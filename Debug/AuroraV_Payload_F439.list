
AuroraV_Payload_F439.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         00009338  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080094e4  080094e4  000194e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800959c  0800959c  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  0800959c  0800959c  0001959c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095a4  080095a4  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095a4  080095a4  000195a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095a8  080095a8  000195a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  080095ac  00020000  2**2
=======
  1 .text         000092b8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08009464  08009464  00019464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800951c  0800951c  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  0800951c  0800951c  0001951c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009524  08009524  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009524  08009524  00019524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009528  08009528  00019528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  0800952c  00020000  2**2
>>>>>>> flight_hardware
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
 10 .bss          00000610  20000028  20000028  00020028  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000638  20000638  00020028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
<<<<<<< HEAD
 14 .debug_info   0001d6bd  00000000  00000000  0002009b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000040cd  00000000  00000000  0003d758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000017a0  00000000  00000000  00041828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001257  00000000  00000000  00042fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002801a  00000000  00000000  0004421f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001e33d  00000000  00000000  0006c239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ea18d  00000000  00000000  0008a576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000625c  00000000  00000000  00174704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0017a960  2**0
=======
 14 .debug_info   0001d6a1  00000000  00000000  0002009b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000040cd  00000000  00000000  0003d73c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000017a0  00000000  00000000  00041810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001256  00000000  00000000  00042fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002800c  00000000  00000000  00044206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001e321  00000000  00000000  0006c212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ea15c  00000000  00000000  0008a533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000625c  00000000  00000000  00174690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0017a8ec  2**0
>>>>>>> flight_hardware
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000028 	.word	0x20000028
 80001c8:	00000000 	.word	0x00000000
<<<<<<< HEAD
 80001cc:	080094cc 	.word	0x080094cc
=======
 80001cc:	0800944c 	.word	0x0800944c
>>>>>>> flight_hardware

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000002c 	.word	0x2000002c
<<<<<<< HEAD
 80001e8:	080094cc 	.word	0x080094cc
=======
 80001e8:	0800944c 	.word	0x0800944c
>>>>>>> flight_hardware

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <init_accel>:
uint8_t OUT_Y_L 				= 0x34;
uint8_t OUT_Y_H 				= 0x35;
uint8_t OUT_Z_L 				= 0x36;
uint8_t OUT_Z_H 				= 0x37;

HAL_StatusTypeDef init_accel(I2C_HandleTypeDef* hi2c) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;

	// Set standby mode
	ret = i2c_write_reg(hi2c, ADXL314_ADDR, &POWER_CTL_REG, 0x00);
 8000500:	4b14      	ldr	r3, [pc, #80]	; (8000554 <init_accel+0x5c>)
 8000502:	7819      	ldrb	r1, [r3, #0]
 8000504:	2300      	movs	r3, #0
 8000506:	4a14      	ldr	r2, [pc, #80]	; (8000558 <init_accel+0x60>)
 8000508:	6878      	ldr	r0, [r7, #4]
 800050a:	f000 fbe8 	bl	8000cde <i2c_write_reg>
 800050e:	4603      	mov	r3, r0
 8000510:	73fb      	strb	r3, [r7, #15]

	// Set to 200G right justified
	ret = i2c_write_reg(hi2c, ADXL314_ADDR, &DATA_FORMAT_REG, RIGHT_JUST);
 8000512:	4b10      	ldr	r3, [pc, #64]	; (8000554 <init_accel+0x5c>)
 8000514:	7819      	ldrb	r1, [r3, #0]
 8000516:	230b      	movs	r3, #11
 8000518:	4a10      	ldr	r2, [pc, #64]	; (800055c <init_accel+0x64>)
 800051a:	6878      	ldr	r0, [r7, #4]
 800051c:	f000 fbdf 	bl	8000cde <i2c_write_reg>
 8000520:	4603      	mov	r3, r0
 8000522:	73fb      	strb	r3, [r7, #15]

	// Set to 1kHz ODR
	ret = i2c_write_reg(hi2c, ADXL314_ADDR, &BW_RATE_REG, MASK_1kHz);
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <init_accel+0x5c>)
 8000526:	7819      	ldrb	r1, [r3, #0]
 8000528:	230a      	movs	r3, #10
 800052a:	4a0d      	ldr	r2, [pc, #52]	; (8000560 <init_accel+0x68>)
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	f000 fbd6 	bl	8000cde <i2c_write_reg>
 8000532:	4603      	mov	r3, r0
 8000534:	73fb      	strb	r3, [r7, #15]

	// Write the offset registers
//	ret = writeOffset(hi2c);

	// Start measuring
	ret = i2c_write_reg(hi2c, ADXL314_ADDR, &POWER_CTL_REG, START_MEAS);
 8000536:	4b07      	ldr	r3, [pc, #28]	; (8000554 <init_accel+0x5c>)
 8000538:	7819      	ldrb	r1, [r3, #0]
 800053a:	2308      	movs	r3, #8
 800053c:	4a06      	ldr	r2, [pc, #24]	; (8000558 <init_accel+0x60>)
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f000 fbcd 	bl	8000cde <i2c_write_reg>
 8000544:	4603      	mov	r3, r0
 8000546:	73fb      	strb	r3, [r7, #15]

	return ret;
 8000548:	7bfb      	ldrb	r3, [r7, #15]
}
 800054a:	4618      	mov	r0, r3
 800054c:	3710      	adds	r7, #16
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	20000000 	.word	0x20000000
 8000558:	20000002 	.word	0x20000002
 800055c:	20000003 	.word	0x20000003
 8000560:	20000001 	.word	0x20000001

08000564 <readAccelerometer>:
void readAccelerometer(uint8_t values[6], I2C_HandleTypeDef* hi2c) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af02      	add	r7, sp, #8
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < 6; i++) {
 800056e:	2300      	movs	r3, #0
 8000570:	73fb      	strb	r3, [r7, #15]
 8000572:	e007      	b.n	8000584 <readAccelerometer+0x20>
		values[i] = 0x00;
 8000574:	7bfb      	ldrb	r3, [r7, #15]
 8000576:	687a      	ldr	r2, [r7, #4]
 8000578:	4413      	add	r3, r2
 800057a:	2200      	movs	r2, #0
 800057c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 6; i++) {
 800057e:	7bfb      	ldrb	r3, [r7, #15]
 8000580:	3301      	adds	r3, #1
 8000582:	73fb      	strb	r3, [r7, #15]
 8000584:	7bfb      	ldrb	r3, [r7, #15]
 8000586:	2b05      	cmp	r3, #5
 8000588:	d9f4      	bls.n	8000574 <readAccelerometer+0x10>
	}

	i2c_burst_read(hi2c, ADXL314_ADDR, OUT_X_L, 6, values);
 800058a:	4b07      	ldr	r3, [pc, #28]	; (80005a8 <readAccelerometer+0x44>)
 800058c:	7819      	ldrb	r1, [r3, #0]
 800058e:	4b07      	ldr	r3, [pc, #28]	; (80005ac <readAccelerometer+0x48>)
 8000590:	781a      	ldrb	r2, [r3, #0]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	2306      	movs	r3, #6
 8000598:	6838      	ldr	r0, [r7, #0]
 800059a:	f000 fb6b 	bl	8000c74 <i2c_burst_read>
}
 800059e:	bf00      	nop
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000000 	.word	0x20000000
 80005ac:	20000004 	.word	0x20000004

080005b0 <readAccel_whoami>:

uint8_t readAccel_whoami(I2C_HandleTypeDef* hi2c) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	uint8_t data = 0x00;
 80005b8:	2300      	movs	r3, #0
 80005ba:	73fb      	strb	r3, [r7, #15]
	i2c_read_reg(hi2c, &data, ADXL314_ADDR, &WHOAMI);
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <readAccel_whoami+0x28>)
 80005be:	781a      	ldrb	r2, [r3, #0]
 80005c0:	f107 010f 	add.w	r1, r7, #15
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <readAccel_whoami+0x2c>)
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	f000 fb2b 	bl	8000c22 <i2c_read_reg>

	return data;
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	3710      	adds	r7, #16
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000000 	.word	0x20000000
 80005dc:	20000044 	.word	0x20000044

080005e0 <init_bme280>:
uint8_t OUT_HUM_H 			= 0xFD;
uint8_t CALIB_ST_1			= 0x88;
uint8_t CALIB_ST_2			= 0xE1;


HAL_StatusTypeDef init_bme280(I2C_HandleTypeDef* hi2c, uint8_t bme) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	460b      	mov	r3, r1
 80005ea:	70fb      	strb	r3, [r7, #3]
	uint8_t bme_addr = getBME280Config(bme).bme_addr;
 80005ec:	78fb      	ldrb	r3, [r7, #3]
 80005ee:	4618      	mov	r0, r3
 80005f0:	f000 f8e0 	bl	80007b4 <getBME280Config>
 80005f4:	4603      	mov	r3, r0
 80005f6:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef ret;
	uint8_t control_reg = 0x00;
 80005f8:	2300      	movs	r3, #0
 80005fa:	737b      	strb	r3, [r7, #13]

	// Reset the sensor
	ret =  i2c_write_reg(hi2c, bme_addr, &RST_REG, RST);
 80005fc:	7bf9      	ldrb	r1, [r7, #15]
 80005fe:	23b6      	movs	r3, #182	; 0xb6
 8000600:	4a19      	ldr	r2, [pc, #100]	; (8000668 <init_bme280+0x88>)
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f000 fb6b 	bl	8000cde <i2c_write_reg>
 8000608:	4603      	mov	r3, r0
 800060a:	73bb      	strb	r3, [r7, #14]

	// Set humidity control register
	i2c_read_reg(hi2c, &control_reg, bme_addr, &CTRL_HUM_REG);
 800060c:	7bfa      	ldrb	r2, [r7, #15]
 800060e:	f107 010d 	add.w	r1, r7, #13
 8000612:	4b16      	ldr	r3, [pc, #88]	; (800066c <init_bme280+0x8c>)
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f000 fb04 	bl	8000c22 <i2c_read_reg>
	control_reg = control_reg & 0xF8;
 800061a:	7b7b      	ldrb	r3, [r7, #13]
 800061c:	f023 0307 	bic.w	r3, r3, #7
 8000620:	b2db      	uxtb	r3, r3
 8000622:	737b      	strb	r3, [r7, #13]
	control_reg = control_reg | CTRL_HUM_MSK;
 8000624:	7b7b      	ldrb	r3, [r7, #13]
 8000626:	f043 0301 	orr.w	r3, r3, #1
 800062a:	b2db      	uxtb	r3, r3
 800062c:	737b      	strb	r3, [r7, #13]
	ret = i2c_write_reg(hi2c, bme_addr, &CTRL_HUM_REG, control_reg);
 800062e:	7b7b      	ldrb	r3, [r7, #13]
 8000630:	7bf9      	ldrb	r1, [r7, #15]
 8000632:	4a0e      	ldr	r2, [pc, #56]	; (800066c <init_bme280+0x8c>)
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f000 fb52 	bl	8000cde <i2c_write_reg>
 800063a:	4603      	mov	r3, r0
 800063c:	73bb      	strb	r3, [r7, #14]

	// Set measure control register
	ret = i2c_write_reg(hi2c, bme_addr, &CTRL_MEAS_REG, CTRL_MEAS_MSK);
 800063e:	7bf9      	ldrb	r1, [r7, #15]
 8000640:	2327      	movs	r3, #39	; 0x27
 8000642:	4a0b      	ldr	r2, [pc, #44]	; (8000670 <init_bme280+0x90>)
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	f000 fb4a 	bl	8000cde <i2c_write_reg>
 800064a:	4603      	mov	r3, r0
 800064c:	73bb      	strb	r3, [r7, #14]

	// Set the config register
	ret = i2c_write_reg(hi2c, bme_addr, &CONF_REG, CONF_MSK);
 800064e:	7bf9      	ldrb	r1, [r7, #15]
 8000650:	2300      	movs	r3, #0
 8000652:	4a08      	ldr	r2, [pc, #32]	; (8000674 <init_bme280+0x94>)
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f000 fb42 	bl	8000cde <i2c_write_reg>
 800065a:	4603      	mov	r3, r0
 800065c:	73bb      	strb	r3, [r7, #14]

	return ret;
 800065e:	7bbb      	ldrb	r3, [r7, #14]
}
 8000660:	4618      	mov	r0, r3
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000006 	.word	0x20000006
 800066c:	20000007 	.word	0x20000007
 8000670:	20000008 	.word	0x20000008
 8000674:	20000009 	.word	0x20000009

08000678 <readTempHumPres>:

void readTempHumPres(uint8_t values[6], I2C_HandleTypeDef* hi2c, uint8_t bme) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b08a      	sub	sp, #40	; 0x28
 800067c:	af02      	add	r7, sp, #8
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	4613      	mov	r3, r2
 8000684:	71fb      	strb	r3, [r7, #7]
	uint8_t readings[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 8000686:	4a27      	ldr	r2, [pc, #156]	; (8000724 <readTempHumPres+0xac>)
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000690:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t bme_addr = getBME280Config(bme).bme_addr;
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	4618      	mov	r0, r3
 8000698:	f000 f88c 	bl	80007b4 <getBME280Config>
 800069c:	4603      	mov	r3, r0
 800069e:	777b      	strb	r3, [r7, #29]
	i2c_burst_read(hi2c, bme_addr, OUT_PRESS_H, 8, readings);
 80006a0:	4b21      	ldr	r3, [pc, #132]	; (8000728 <readTempHumPres+0xb0>)
 80006a2:	781a      	ldrb	r2, [r3, #0]
 80006a4:	7f79      	ldrb	r1, [r7, #29]
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	2308      	movs	r3, #8
 80006ae:	68b8      	ldr	r0, [r7, #8]
 80006b0:	f000 fae0 	bl	8000c74 <i2c_burst_read>

	// Clear the 0 values on the xlsb registers
	uint8_t j = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	77fb      	strb	r3, [r7, #31]
    for(uint8_t i = 0; i < 8; i++) {
 80006b8:	2300      	movs	r3, #0
 80006ba:	77bb      	strb	r3, [r7, #30]
 80006bc:	e014      	b.n	80006e8 <readTempHumPres+0x70>
        if(i != 2 && i != 5) {  // if the index is not 2 or 5
 80006be:	7fbb      	ldrb	r3, [r7, #30]
 80006c0:	2b02      	cmp	r3, #2
 80006c2:	d00e      	beq.n	80006e2 <readTempHumPres+0x6a>
 80006c4:	7fbb      	ldrb	r3, [r7, #30]
 80006c6:	2b05      	cmp	r3, #5
 80006c8:	d00b      	beq.n	80006e2 <readTempHumPres+0x6a>
        	values[j] = readings[i];
 80006ca:	7fba      	ldrb	r2, [r7, #30]
 80006cc:	7ffb      	ldrb	r3, [r7, #31]
 80006ce:	68f9      	ldr	r1, [r7, #12]
 80006d0:	440b      	add	r3, r1
 80006d2:	3220      	adds	r2, #32
 80006d4:	443a      	add	r2, r7
 80006d6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80006da:	701a      	strb	r2, [r3, #0]
            j++;
 80006dc:	7ffb      	ldrb	r3, [r7, #31]
 80006de:	3301      	adds	r3, #1
 80006e0:	77fb      	strb	r3, [r7, #31]
    for(uint8_t i = 0; i < 8; i++) {
 80006e2:	7fbb      	ldrb	r3, [r7, #30]
 80006e4:	3301      	adds	r3, #1
 80006e6:	77bb      	strb	r3, [r7, #30]
 80006e8:	7fbb      	ldrb	r3, [r7, #30]
 80006ea:	2b07      	cmp	r3, #7
 80006ec:	d9e7      	bls.n	80006be <readTempHumPres+0x46>
        }
    }

    // Swap elements to make the array little endian
    swap(&values[0], &values[1]);
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	3301      	adds	r3, #1
 80006f2:	4619      	mov	r1, r3
 80006f4:	68f8      	ldr	r0, [r7, #12]
 80006f6:	f000 f874 	bl	80007e2 <swap>
    swap(&values[2], &values[3]);
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	1c9a      	adds	r2, r3, #2
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	3303      	adds	r3, #3
 8000702:	4619      	mov	r1, r3
 8000704:	4610      	mov	r0, r2
 8000706:	f000 f86c 	bl	80007e2 <swap>
    swap(&values[4], &values[5]);
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	1d1a      	adds	r2, r3, #4
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	3305      	adds	r3, #5
 8000712:	4619      	mov	r1, r3
 8000714:	4610      	mov	r0, r2
 8000716:	f000 f864 	bl	80007e2 <swap>
}
 800071a:	bf00      	nop
 800071c:	3720      	adds	r7, #32
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
<<<<<<< HEAD
 8000724:	080094e4 	.word	0x080094e4
=======
 8000724:	08009464 	.word	0x08009464
>>>>>>> flight_hardware
 8000728:	2000000a 	.word	0x2000000a

0800072c <readBME280_id_reg>:

uint8_t readBME280_id_reg(I2C_HandleTypeDef* hi2c, uint8_t bme) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	460b      	mov	r3, r1
 8000736:	70fb      	strb	r3, [r7, #3]
	uint8_t bme_addr = getBME280Config(bme).bme_addr;
 8000738:	78fb      	ldrb	r3, [r7, #3]
 800073a:	4618      	mov	r0, r3
 800073c:	f000 f83a 	bl	80007b4 <getBME280Config>
 8000740:	4603      	mov	r3, r0
 8000742:	73fb      	strb	r3, [r7, #15]
	uint8_t data = 0x00;
 8000744:	2300      	movs	r3, #0
 8000746:	73bb      	strb	r3, [r7, #14]
	i2c_read_reg(hi2c, &data, bme_addr, &ID_REG);
 8000748:	7bfa      	ldrb	r2, [r7, #15]
 800074a:	f107 010e 	add.w	r1, r7, #14
 800074e:	4b04      	ldr	r3, [pc, #16]	; (8000760 <readBME280_id_reg+0x34>)
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f000 fa66 	bl	8000c22 <i2c_read_reg>

	return data;
 8000756:	7bbb      	ldrb	r3, [r7, #14]
}
 8000758:	4618      	mov	r0, r3
 800075a:	3710      	adds	r7, #16
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000005 	.word	0x20000005

08000764 <readBME280_calib>:

void readBME280_calib(I2C_HandleTypeDef* hi2c, uint8_t bme, uint8_t calibration1[CALIB_CNT_1], uint8_t calibration2[CALIB_CNT_2]) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b088      	sub	sp, #32
 8000768:	af02      	add	r7, sp, #8
 800076a:	60f8      	str	r0, [r7, #12]
 800076c:	607a      	str	r2, [r7, #4]
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	460b      	mov	r3, r1
 8000772:	72fb      	strb	r3, [r7, #11]
	uint8_t bme_addr = getBME280Config(bme).bme_addr;
 8000774:	7afb      	ldrb	r3, [r7, #11]
 8000776:	4618      	mov	r0, r3
 8000778:	f000 f81c 	bl	80007b4 <getBME280Config>
 800077c:	4603      	mov	r3, r0
 800077e:	75fb      	strb	r3, [r7, #23]
	i2c_burst_read(hi2c, bme_addr, CALIB_ST_1, CALIB_CNT_1, calibration1);
 8000780:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <readBME280_calib+0x48>)
 8000782:	781a      	ldrb	r2, [r3, #0]
 8000784:	7df9      	ldrb	r1, [r7, #23]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	2319      	movs	r3, #25
 800078c:	68f8      	ldr	r0, [r7, #12]
 800078e:	f000 fa71 	bl	8000c74 <i2c_burst_read>
	i2c_burst_read(hi2c, bme_addr, CALIB_ST_2, CALIB_CNT_2, calibration2);
 8000792:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <readBME280_calib+0x4c>)
 8000794:	781a      	ldrb	r2, [r3, #0]
 8000796:	7df9      	ldrb	r1, [r7, #23]
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	2307      	movs	r3, #7
 800079e:	68f8      	ldr	r0, [r7, #12]
 80007a0:	f000 fa68 	bl	8000c74 <i2c_burst_read>
}
 80007a4:	bf00      	nop
 80007a6:	3718      	adds	r7, #24
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	2000000b 	.word	0x2000000b
 80007b0:	2000000c 	.word	0x2000000c

080007b4 <getBME280Config>:

BME280_Config getBME280Config(uint8_t bme) {
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
	BME280_Config config;
	if (bme == 0) {
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d102      	bne.n	80007ca <getBME280Config+0x16>
		config.bme_addr = BME280_ADDR_0;
 80007c4:	2376      	movs	r3, #118	; 0x76
 80007c6:	733b      	strb	r3, [r7, #12]
 80007c8:	e004      	b.n	80007d4 <getBME280Config+0x20>
	} else if (bme == 1) {
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d101      	bne.n	80007d4 <getBME280Config+0x20>
		config.bme_addr = BME280_ADDR_1;
 80007d0:	2377      	movs	r3, #119	; 0x77
 80007d2:	733b      	strb	r3, [r7, #12]
	}
    return config;
 80007d4:	7b3b      	ldrb	r3, [r7, #12]
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3714      	adds	r7, #20
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr

080007e2 <swap>:

void swap(uint8_t* a, uint8_t* b) {
 80007e2:	b480      	push	{r7}
 80007e4:	b085      	sub	sp, #20
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
 80007ea:	6039      	str	r1, [r7, #0]
    uint8_t temp = *a;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	73fb      	strb	r3, [r7, #15]
    *a = *b;
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	781a      	ldrb	r2, [r3, #0]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	701a      	strb	r2, [r3, #0]
    *b = temp;
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	7bfa      	ldrb	r2, [r7, #15]
 80007fe:	701a      	strb	r2, [r3, #0]
}
 8000800:	bf00      	nop
 8000802:	3714      	adds	r7, #20
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr

0800080c <sendCAN_TxMessage>:
 */

#include "can_driver.h"


void sendCAN_TxMessage(CAN_HandleTypeDef *hcan, uint8_t dataSize, uint8_t TxData[dataSize], uint32_t *CAN_TxMailbox, uint16_t payload_id) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	; 0x28
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	607a      	str	r2, [r7, #4]
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	460b      	mov	r3, r1
 800081a:	72fb      	strb	r3, [r7, #11]
	CAN_TxHeaderTypeDef TxHeader = configureTxHeader(payload_id, dataSize);
 800081c:	f107 0310 	add.w	r3, r7, #16
 8000820:	7afa      	ldrb	r2, [r7, #11]
 8000822:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8000824:	4618      	mov	r0, r3
 8000826:	f000 f80b 	bl	8000840 <configureTxHeader>
	HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, CAN_TxMailbox);
 800082a:	f107 0110 	add.w	r1, r7, #16
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	687a      	ldr	r2, [r7, #4]
 8000832:	68f8      	ldr	r0, [r7, #12]
<<<<<<< HEAD
 8000834:	f002 fe5e 	bl	80034f4 <HAL_CAN_AddTxMessage>
=======
 8000834:	f002 fe1e 	bl	8003474 <HAL_CAN_AddTxMessage>
>>>>>>> flight_hardware
}
 8000838:	bf00      	nop
 800083a:	3728      	adds	r7, #40	; 0x28
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <configureTxHeader>:

CAN_TxHeaderTypeDef configureTxHeader(uint16_t payload_id, uint8_t dataSize) {
 8000840:	b4b0      	push	{r4, r5, r7}
 8000842:	b089      	sub	sp, #36	; 0x24
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	460b      	mov	r3, r1
 800084a:	807b      	strh	r3, [r7, #2]
 800084c:	4613      	mov	r3, r2
 800084e:	707b      	strb	r3, [r7, #1]
	CAN_TxHeaderTypeDef TxHeader;
	TxHeader.DLC = dataSize;
 8000850:	787b      	ldrb	r3, [r7, #1]
 8000852:	61bb      	str	r3, [r7, #24]
	TxHeader.IDE = CAN_ID_STD;
 8000854:	2300      	movs	r3, #0
 8000856:	613b      	str	r3, [r7, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
	TxHeader.StdId = payload_id;
 800085c:	887b      	ldrh	r3, [r7, #2]
 800085e:	60bb      	str	r3, [r7, #8]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000860:	2300      	movs	r3, #0
 8000862:	773b      	strb	r3, [r7, #28]
	return TxHeader;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	461d      	mov	r5, r3
 8000868:	f107 0408 	add.w	r4, r7, #8
 800086c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800086e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000870:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000874:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	3724      	adds	r7, #36	; 0x24
 800087c:	46bd      	mov	sp, r7
 800087e:	bcb0      	pop	{r4, r5, r7}
 8000880:	4770      	bx	lr

08000882 <check_busy>:
uint8_t FLASH_32K_ERS	= 0x52;			// Erase all memory within a 32K-byte block
uint8_t FLASH_ERASE		= 0xC7;			// Erase the entire chip
uint8_t RST_EN			= 0x66;			// Reset enable
uint8_t DEV_RST			= 0x99;			// Reset device

uint8_t check_busy(SPI_HandleTypeDef *hspi, GPIO_Config config, int timeout) {
 8000882:	b580      	push	{r7, lr}
 8000884:	b088      	sub	sp, #32
 8000886:	af00      	add	r7, sp, #0
 8000888:	60f8      	str	r0, [r7, #12]
 800088a:	1d38      	adds	r0, r7, #4
 800088c:	e880 0006 	stmia.w	r0, {r1, r2}
 8000890:	603b      	str	r3, [r7, #0]
	uint8_t ret_val = 0x00;
 8000892:	2300      	movs	r3, #0
 8000894:	77fb      	strb	r3, [r7, #31]

    // Get the current time
	uint32_t startTick = HAL_GetTick();
<<<<<<< HEAD
 8000896:	f002 fbdd 	bl	8003054 <HAL_GetTick>
=======
 8000896:	f002 fb9d 	bl	8002fd4 <HAL_GetTick>
>>>>>>> flight_hardware
 800089a:	61b8      	str	r0, [r7, #24]

	// Read the status register to ensure no write is currently in progress
	uint8_t busy = 0x01;
 800089c:	2301      	movs	r3, #1
 800089e:	77bb      	strb	r3, [r7, #30]
	while(busy) {
 80008a0:	e015      	b.n	80008ce <check_busy+0x4c>
		// Check if there is a write in progress
		busy = (check_status_register(hspi, config) & 0x01);
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80008a8:	68f8      	ldr	r0, [r7, #12]
 80008aa:	f000 f819 	bl	80008e0 <check_status_register>
 80008ae:	4603      	mov	r3, r0
 80008b0:	f003 0301 	and.w	r3, r3, #1
 80008b4:	77bb      	strb	r3, [r7, #30]

		uint32_t currTick = HAL_GetTick();
<<<<<<< HEAD
 80008b6:	f002 fbcd 	bl	8003054 <HAL_GetTick>
=======
 80008b6:	f002 fb8d 	bl	8002fd4 <HAL_GetTick>
>>>>>>> flight_hardware
 80008ba:	6178      	str	r0, [r7, #20]

        // Check if the timeout has been reached
		if ((currTick - startTick) >= timeout) {
 80008bc:	697a      	ldr	r2, [r7, #20]
 80008be:	69bb      	ldr	r3, [r7, #24]
 80008c0:	1ad2      	subs	r2, r2, r3
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d302      	bcc.n	80008ce <check_busy+0x4c>
        	ret_val = 0x01;
 80008c8:	2301      	movs	r3, #1
 80008ca:	77fb      	strb	r3, [r7, #31]
            break;
 80008cc:	e002      	b.n	80008d4 <check_busy+0x52>
	while(busy) {
 80008ce:	7fbb      	ldrb	r3, [r7, #30]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d1e6      	bne.n	80008a2 <check_busy+0x20>
        }
	}

	return ret_val;
 80008d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3720      	adds	r7, #32
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <check_status_register>:

uint8_t check_status_register(SPI_HandleTypeDef *hspi, GPIO_Config config) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b088      	sub	sp, #32
 80008e4:	af02      	add	r7, sp, #8
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	e883 0006 	stmia.w	r3, {r1, r2}
	uint8_t status_reg = 0x00;
 80008ee:	2300      	movs	r3, #0
 80008f0:	75fb      	strb	r3, [r7, #23]
	spi_sendOp_readByte(&FLASH_READSR1, hspi, &status_reg, config.GPIOx, config.GPIO_Pin);
 80008f2:	6879      	ldr	r1, [r7, #4]
 80008f4:	893b      	ldrh	r3, [r7, #8]
 80008f6:	f107 0217 	add.w	r2, r7, #23
 80008fa:	9300      	str	r3, [sp, #0]
 80008fc:	460b      	mov	r3, r1
 80008fe:	68f9      	ldr	r1, [r7, #12]
 8000900:	4803      	ldr	r0, [pc, #12]	; (8000910 <check_status_register+0x30>)
<<<<<<< HEAD
 8000902:	f001 fe0d 	bl	8002520 <spi_sendOp_readByte>
=======
 8000902:	f001 fdef 	bl	80024e4 <spi_sendOp_readByte>
>>>>>>> flight_hardware
	return status_reg;
 8000906:	7dfb      	ldrb	r3, [r7, #23]
}
 8000908:	4618      	mov	r0, r3
 800090a:	3718      	adds	r7, #24
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	2000000f 	.word	0x2000000f

08000914 <erase_chip_spi>:
 *      Author: aidencontini
 */

#include "data_output_spi.h"

HAL_StatusTypeDef erase_chip_spi(SPI_HandleTypeDef *hspi, GPIO_Config config) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	e883 0006 	stmia.w	r3, {r1, r2}
	check_busy(hspi, config, BSY_TIMEOUT_MS);
 8000922:	2305      	movs	r3, #5
 8000924:	1d3a      	adds	r2, r7, #4
 8000926:	ca06      	ldmia	r2, {r1, r2}
 8000928:	68f8      	ldr	r0, [r7, #12]
 800092a:	f7ff ffaa 	bl	8000882 <check_busy>

	write_enable_spi(hspi, config);
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000934:	68f8      	ldr	r0, [r7, #12]
 8000936:	f000 f815 	bl	8000964 <write_enable_spi>
	perform_operation(&FLASH_ERASE, hspi, config.GPIOx, config.GPIO_Pin);
 800093a:	687a      	ldr	r2, [r7, #4]
 800093c:	893b      	ldrh	r3, [r7, #8]
 800093e:	68f9      	ldr	r1, [r7, #12]
 8000940:	4806      	ldr	r0, [pc, #24]	; (800095c <erase_chip_spi+0x48>)
<<<<<<< HEAD
 8000942:	f001 fe13 	bl	800256c <perform_operation>
=======
 8000942:	f001 fdf5 	bl	8002530 <perform_operation>
>>>>>>> flight_hardware

	check_busy(hspi, config, CHIP_ERASE_TO);
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <erase_chip_spi+0x4c>)
 8000948:	1d3a      	adds	r2, r7, #4
 800094a:	ca06      	ldmia	r2, {r1, r2}
 800094c:	68f8      	ldr	r0, [r7, #12]
 800094e:	f7ff ff98 	bl	8000882 <check_busy>

	return HAL_OK;
 8000952:	2300      	movs	r3, #0
}
 8000954:	4618      	mov	r0, r3
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000012 	.word	0x20000012
 8000960:	00030d40 	.word	0x00030d40

08000964 <write_enable_spi>:
	check_busy(hspi, config, BLK_ERS_32K_TO);

	return HAL_OK;
}

void write_enable_spi(SPI_HandleTypeDef *hspi, GPIO_Config config) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	e883 0006 	stmia.w	r3, {r1, r2}
	perform_operation(&FLASH_WREN, hspi, config.GPIOx, config.GPIO_Pin);
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	893b      	ldrh	r3, [r7, #8]
 8000976:	68f9      	ldr	r1, [r7, #12]
 8000978:	4803      	ldr	r0, [pc, #12]	; (8000988 <write_enable_spi+0x24>)
<<<<<<< HEAD
 800097a:	f001 fdf7 	bl	800256c <perform_operation>
=======
 800097a:	f001 fdd9 	bl	8002530 <perform_operation>
>>>>>>> flight_hardware
}
 800097e:	bf00      	nop
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	2000000d 	.word	0x2000000d

0800098c <software_reset>:

void write_disable_spi(SPI_HandleTypeDef *hspi, GPIO_Config config) {
	perform_operation(&FLASH_WRDIS, hspi, config.GPIOx, config.GPIO_Pin);
}

void software_reset(SPI_HandleTypeDef *hspi, GPIO_Config config) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	e883 0006 	stmia.w	r3, {r1, r2}

	check_busy(hspi, config, BSY_TIMEOUT_MS);
 800099a:	2305      	movs	r3, #5
 800099c:	1d3a      	adds	r2, r7, #4
 800099e:	ca06      	ldmia	r2, {r1, r2}
 80009a0:	68f8      	ldr	r0, [r7, #12]
 80009a2:	f7ff ff6e 	bl	8000882 <check_busy>

	perform_operation(&RST_EN, hspi, config.GPIOx, config.GPIO_Pin);
 80009a6:	687a      	ldr	r2, [r7, #4]
 80009a8:	893b      	ldrh	r3, [r7, #8]
 80009aa:	68f9      	ldr	r1, [r7, #12]
 80009ac:	4807      	ldr	r0, [pc, #28]	; (80009cc <software_reset+0x40>)
<<<<<<< HEAD
 80009ae:	f001 fddd 	bl	800256c <perform_operation>
=======
 80009ae:	f001 fdbf 	bl	8002530 <perform_operation>
>>>>>>> flight_hardware
	perform_operation(&DEV_RST, hspi, config.GPIOx, config.GPIO_Pin);
 80009b2:	687a      	ldr	r2, [r7, #4]
 80009b4:	893b      	ldrh	r3, [r7, #8]
 80009b6:	68f9      	ldr	r1, [r7, #12]
 80009b8:	4805      	ldr	r0, [pc, #20]	; (80009d0 <software_reset+0x44>)
<<<<<<< HEAD
 80009ba:	f001 fdd7 	bl	800256c <perform_operation>

	HAL_Delay(5);
 80009be:	2005      	movs	r0, #5
 80009c0:	f002 fb54 	bl	800306c <HAL_Delay>
=======
 80009ba:	f001 fdb9 	bl	8002530 <perform_operation>

	HAL_Delay(5);
 80009be:	2005      	movs	r0, #5
 80009c0:	f002 fb14 	bl	8002fec <HAL_Delay>
>>>>>>> flight_hardware
}
 80009c4:	bf00      	nop
 80009c6:	3710      	adds	r7, #16
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000013 	.word	0x20000013
 80009d0:	20000014 	.word	0x20000014

080009d4 <write_data_spi_dma>:
	spi_write_data(&FLASH_PGWR, PAGE_SIZE, page, hspi, addr, config.GPIOx, config.GPIO_Pin);

	return 0;
}

uint8_t write_data_spi_dma(uint8_t page[PAGE_SIZE], SPI_HandleTypeDef *hspi, uint32_t addr, GPIO_Config config) {
 80009d4:	b082      	sub	sp, #8
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b088      	sub	sp, #32
 80009da:	af04      	add	r7, sp, #16
 80009dc:	60f8      	str	r0, [r7, #12]
 80009de:	60b9      	str	r1, [r7, #8]
 80009e0:	607a      	str	r2, [r7, #4]
 80009e2:	61fb      	str	r3, [r7, #28]
	check_busy(hspi, config, BSY_TIMEOUT_MS);
 80009e4:	2305      	movs	r3, #5
 80009e6:	f107 021c 	add.w	r2, r7, #28
 80009ea:	ca06      	ldmia	r2, {r1, r2}
 80009ec:	68b8      	ldr	r0, [r7, #8]
 80009ee:	f7ff ff48 	bl	8000882 <check_busy>

	// Send the write enable signal
	write_enable_spi(hspi, config);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80009fa:	68b8      	ldr	r0, [r7, #8]
 80009fc:	f7ff ffb2 	bl	8000964 <write_enable_spi>
	spi_write_data_dma(&FLASH_PGWR, PAGE_SIZE, page, hspi, addr, config.GPIOx, config.GPIO_Pin);
 8000a00:	69fb      	ldr	r3, [r7, #28]
 8000a02:	8c3a      	ldrh	r2, [r7, #32]
 8000a04:	9202      	str	r2, [sp, #8]
 8000a06:	9301      	str	r3, [sp, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	9300      	str	r3, [sp, #0]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	68fa      	ldr	r2, [r7, #12]
 8000a10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <write_data_spi_dma+0x58>)
<<<<<<< HEAD
 8000a16:	f001 fe10 	bl	800263a <spi_write_data_dma>
=======
 8000a16:	f001 fdf2 	bl	80025fe <spi_write_data_dma>
>>>>>>> flight_hardware

	return 0;
 8000a1a:	2300      	movs	r3, #0
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3710      	adds	r7, #16
 8000a20:	46bd      	mov	sp, r7
 8000a22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a26:	b002      	add	sp, #8
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	2000000e 	.word	0x2000000e

08000a30 <find_next_blank_page>:
 *      Author: aidencontini
 */

#include "data_read_spi.h"

uint32_t find_next_blank_page(SPI_HandleTypeDef *hspi, GPIO_PinState *end_of_flash_ptr, GPIO_Config config) {
 8000a30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000a34:	b091      	sub	sp, #68	; 0x44
 8000a36:	af04      	add	r7, sp, #16
 8000a38:	60f8      	str	r0, [r7, #12]
 8000a3a:	60b9      	str	r1, [r7, #8]
 8000a3c:	4639      	mov	r1, r7
 8000a3e:	e881 000c 	stmia.w	r1, {r2, r3}
 8000a42:	466b      	mov	r3, sp
 8000a44:	461e      	mov	r6, r3
	uint8_t firstBytes = 4;
 8000a46:	2304      	movs	r3, #4
 8000a48:	77fb      	strb	r3, [r7, #31]

	uint8_t page_start[firstBytes];
 8000a4a:	7ff9      	ldrb	r1, [r7, #31]
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	61bb      	str	r3, [r7, #24]
 8000a52:	b2cb      	uxtb	r3, r1
 8000a54:	2200      	movs	r2, #0
 8000a56:	4698      	mov	r8, r3
 8000a58:	4691      	mov	r9, r2
 8000a5a:	f04f 0200 	mov.w	r2, #0
 8000a5e:	f04f 0300 	mov.w	r3, #0
 8000a62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000a66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000a6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000a6e:	b2cb      	uxtb	r3, r1
 8000a70:	2200      	movs	r2, #0
 8000a72:	461c      	mov	r4, r3
 8000a74:	4615      	mov	r5, r2
 8000a76:	f04f 0200 	mov.w	r2, #0
 8000a7a:	f04f 0300 	mov.w	r3, #0
 8000a7e:	00eb      	lsls	r3, r5, #3
 8000a80:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000a84:	00e2      	lsls	r2, r4, #3
 8000a86:	460b      	mov	r3, r1
 8000a88:	3307      	adds	r3, #7
 8000a8a:	08db      	lsrs	r3, r3, #3
 8000a8c:	00db      	lsls	r3, r3, #3
 8000a8e:	ebad 0d03 	sub.w	sp, sp, r3
 8000a92:	ab04      	add	r3, sp, #16
 8000a94:	3300      	adds	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < firstBytes; i++) {
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a9c:	e007      	b.n	8000aae <find_next_blank_page+0x7e>
		page_start[i] = 0;
 8000a9e:	697a      	ldr	r2, [r7, #20]
 8000aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aa2:	4413      	add	r3, r2
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < firstBytes; i++) {
 8000aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aaa:	3301      	adds	r3, #1
 8000aac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000aae:	7ffb      	ldrb	r3, [r7, #31]
 8000ab0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	dbf3      	blt.n	8000a9e <find_next_blank_page+0x6e>
	}

	uint32_t page_start_concat = (page_start[0] << 24) | (page_start[1] << 16) | (page_start[2] << 8) | page_start[3];
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	061a      	lsls	r2, r3, #24
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	785b      	ldrb	r3, [r3, #1]
 8000ac0:	041b      	lsls	r3, r3, #16
 8000ac2:	431a      	orrs	r2, r3
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	789b      	ldrb	r3, [r3, #2]
 8000ac8:	021b      	lsls	r3, r3, #8
 8000aca:	4313      	orrs	r3, r2
 8000acc:	697a      	ldr	r2, [r7, #20]
 8000ace:	78d2      	ldrb	r2, [r2, #3]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t temp = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t page_address = temp;
 8000ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ada:	623b      	str	r3, [r7, #32]

	while ((page_start_concat != 0xFFFFFFFF) || (temp == NUM_OF_PAGES)) {
 8000adc:	e027      	b.n	8000b2e <find_next_blank_page+0xfe>
		page_address = temp;
 8000ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae0:	623b      	str	r3, [r7, #32]

		check_busy(hspi, config, BSY_TIMEOUT_MS);
 8000ae2:	2305      	movs	r3, #5
 8000ae4:	463a      	mov	r2, r7
 8000ae6:	ca06      	ldmia	r2, {r1, r2}
 8000ae8:	68f8      	ldr	r0, [r7, #12]
 8000aea:	f7ff feca 	bl	8000882 <check_busy>

		spi_read_data(&FLASH_READEN, firstBytes, page_start, hspi, page_address, config.GPIOx, config.GPIO_Pin);
 8000aee:	7ffb      	ldrb	r3, [r7, #31]
 8000af0:	b299      	uxth	r1, r3
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	88ba      	ldrh	r2, [r7, #4]
 8000af6:	9202      	str	r2, [sp, #8]
 8000af8:	9301      	str	r3, [sp, #4]
 8000afa:	6a3b      	ldr	r3, [r7, #32]
 8000afc:	9300      	str	r3, [sp, #0]
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	697a      	ldr	r2, [r7, #20]
 8000b02:	4816      	ldr	r0, [pc, #88]	; (8000b5c <find_next_blank_page+0x12c>)
<<<<<<< HEAD
 8000b04:	f001 fd52 	bl	80025ac <spi_read_data>
=======
 8000b04:	f001 fd34 	bl	8002570 <spi_read_data>
>>>>>>> flight_hardware

		page_start_concat = (page_start[0] << 24) | (page_start[1] << 16) | (page_start[2] << 8) | page_start[3];
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	061a      	lsls	r2, r3, #24
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	785b      	ldrb	r3, [r3, #1]
 8000b12:	041b      	lsls	r3, r3, #16
 8000b14:	431a      	orrs	r2, r3
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	789b      	ldrb	r3, [r3, #2]
 8000b1a:	021b      	lsls	r3, r3, #8
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	697a      	ldr	r2, [r7, #20]
 8000b20:	78d2      	ldrb	r2, [r2, #3]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
		temp += PAGE_SIZE;
 8000b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b28:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
	while ((page_start_concat != 0xFFFFFFFF) || (temp == NUM_OF_PAGES)) {
 8000b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b34:	d1d3      	bne.n	8000ade <find_next_blank_page+0xae>
 8000b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b3c:	d0cf      	beq.n	8000ade <find_next_blank_page+0xae>
	}

	if (page_address == (NUM_OF_PAGES * PAGE_SIZE)) {
 8000b3e:	6a3b      	ldr	r3, [r7, #32]
 8000b40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b44:	d102      	bne.n	8000b4c <find_next_blank_page+0x11c>
		*end_of_flash_ptr = GPIO_PIN_RESET;
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	701a      	strb	r2, [r3, #0]
	}
	return page_address;
 8000b4c:	6a3b      	ldr	r3, [r7, #32]
 8000b4e:	46b5      	mov	sp, r6
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3734      	adds	r7, #52	; 0x34
 8000b54:	46bd      	mov	sp, r7
 8000b56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000010 	.word	0x20000010

08000b60 <read_page_spi>:

void read_page_spi(uint8_t data_read[PAGE_SIZE], SPI_HandleTypeDef *hspi, uint32_t addr, GPIO_Config config) {
 8000b60:	b082      	sub	sp, #8
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b088      	sub	sp, #32
 8000b66:	af04      	add	r7, sp, #16
 8000b68:	60f8      	str	r0, [r7, #12]
 8000b6a:	60b9      	str	r1, [r7, #8]
 8000b6c:	607a      	str	r2, [r7, #4]
 8000b6e:	61fb      	str	r3, [r7, #28]

	// Read the status register to ensure no write is currently in progress
	check_busy(hspi, config, BSY_TIMEOUT_MS);
 8000b70:	2305      	movs	r3, #5
 8000b72:	f107 021c 	add.w	r2, r7, #28
 8000b76:	ca06      	ldmia	r2, {r1, r2}
 8000b78:	68b8      	ldr	r0, [r7, #8]
 8000b7a:	f7ff fe82 	bl	8000882 <check_busy>
	spi_read_data(&FLASH_READEN, PAGE_SIZE, data_read, hspi, addr, config.GPIOx, config.GPIO_Pin);
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	8c3a      	ldrh	r2, [r7, #32]
 8000b82:	9202      	str	r2, [sp, #8]
 8000b84:	9301      	str	r3, [sp, #4]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	9300      	str	r3, [sp, #0]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	68fa      	ldr	r2, [r7, #12]
 8000b8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b92:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <read_page_spi+0x48>)
<<<<<<< HEAD
 8000b94:	f001 fd0a 	bl	80025ac <spi_read_data>
=======
 8000b94:	f001 fcec 	bl	8002570 <spi_read_data>
>>>>>>> flight_hardware
}
 8000b98:	bf00      	nop
 8000b9a:	3710      	adds	r7, #16
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ba2:	b002      	add	sp, #8
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	20000010 	.word	0x20000010

08000bac <read_manufacturer_id>:

void read_manufacturer_id(uint8_t manu[2], SPI_HandleTypeDef *hspi, GPIO_Config config) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	; 0x28
 8000bb0:	af04      	add	r7, sp, #16
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	4639      	mov	r1, r7
 8000bb8:	e881 000c 	stmia.w	r1, {r2, r3}

	// Read the status register to ensure no write is currently in progress
	check_busy(hspi, config, BSY_TIMEOUT_MS);
 8000bbc:	2305      	movs	r3, #5
 8000bbe:	463a      	mov	r2, r7
 8000bc0:	ca06      	ldmia	r2, {r1, r2}
 8000bc2:	68b8      	ldr	r0, [r7, #8]
 8000bc4:	f7ff fe5d 	bl	8000882 <check_busy>

	// Read the entire contents of a page starting from the given address
	uint8_t addr = 0x00;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	75fb      	strb	r3, [r7, #23]
	spi_read_data(&FLASH_READ_MANU, 2, manu, hspi, addr, config.GPIOx, config.GPIO_Pin);
 8000bcc:	7dfb      	ldrb	r3, [r7, #23]
 8000bce:	683a      	ldr	r2, [r7, #0]
 8000bd0:	88b9      	ldrh	r1, [r7, #4]
 8000bd2:	9102      	str	r1, [sp, #8]
 8000bd4:	9201      	str	r2, [sp, #4]
 8000bd6:	9300      	str	r3, [sp, #0]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	2102      	movs	r1, #2
 8000bde:	4803      	ldr	r0, [pc, #12]	; (8000bec <read_manufacturer_id+0x40>)
<<<<<<< HEAD
 8000be0:	f001 fce4 	bl	80025ac <spi_read_data>
=======
 8000be0:	f001 fcc6 	bl	8002570 <spi_read_data>
>>>>>>> flight_hardware
}
 8000be4:	bf00      	nop
 8000be6:	3718      	adds	r7, #24
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000011 	.word	0x20000011

08000bf0 <create_GPIO_Config>:
 */

#include "gpio_struct.h"

// Function to initialize the GPIO_Config struct
GPIO_Config create_GPIO_Config(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8000bf0:	b480      	push	{r7}
 8000bf2:	b087      	sub	sp, #28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	80fb      	strh	r3, [r7, #6]
    GPIO_Config new_config;
    new_config.GPIOx = GPIOx;
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	613b      	str	r3, [r7, #16]
    new_config.GPIO_Pin = GPIO_Pin;
 8000c02:	88fb      	ldrh	r3, [r7, #6]
 8000c04:	82bb      	strh	r3, [r7, #20]
    return new_config;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	f107 0310 	add.w	r3, r7, #16
 8000c0e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c12:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000c16:	68f8      	ldr	r0, [r7, #12]
 8000c18:	371c      	adds	r7, #28
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <i2c_read_reg>:
 *      Author: aidencontini
 */

#include "i2c_driver.h"

HAL_StatusTypeDef i2c_read_reg(I2C_HandleTypeDef* hi2c, uint8_t* data_ptr, uint8_t dev_addr, uint8_t* register_addr) {
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b088      	sub	sp, #32
 8000c26:	af02      	add	r7, sp, #8
 8000c28:	60f8      	str	r0, [r7, #12]
 8000c2a:	60b9      	str	r1, [r7, #8]
 8000c2c:	603b      	str	r3, [r7, #0]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(hi2c, (dev_addr << 1) & 0xFE, register_addr, 1, I2C_TIMEOUT_SML);
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	b299      	uxth	r1, r3
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	9300      	str	r3, [sp, #0]
 8000c40:	2301      	movs	r3, #1
 8000c42:	683a      	ldr	r2, [r7, #0]
 8000c44:	68f8      	ldr	r0, [r7, #12]
<<<<<<< HEAD
 8000c46:	f004 f905 	bl	8004e54 <HAL_I2C_Master_Transmit>
=======
 8000c46:	f004 f8c5 	bl	8004dd4 <HAL_I2C_Master_Transmit>
>>>>>>> flight_hardware
	HAL_StatusTypeDef hal_status = HAL_I2C_Master_Receive(hi2c, (dev_addr << 1) | 0x01, data_ptr, 1, I2C_TIMEOUT_SML);
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	b21b      	sxth	r3, r3
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	b21b      	sxth	r3, r3
 8000c56:	b299      	uxth	r1, r3
 8000c58:	2301      	movs	r3, #1
 8000c5a:	9300      	str	r3, [sp, #0]
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	68ba      	ldr	r2, [r7, #8]
 8000c60:	68f8      	ldr	r0, [r7, #12]
<<<<<<< HEAD
 8000c62:	f004 f9f5 	bl	8005050 <HAL_I2C_Master_Receive>
=======
 8000c62:	f004 f9b5 	bl	8004fd0 <HAL_I2C_Master_Receive>
>>>>>>> flight_hardware
 8000c66:	4603      	mov	r3, r0
 8000c68:	75fb      	strb	r3, [r7, #23]
	return hal_status;
 8000c6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3718      	adds	r7, #24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <i2c_burst_read>:

HAL_StatusTypeDef i2c_burst_read(I2C_HandleTypeDef* hi2c, uint8_t dev_addr, uint8_t register_addr, uint8_t size, uint8_t data_buffer[size]) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af02      	add	r7, sp, #8
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	4608      	mov	r0, r1
 8000c7e:	4611      	mov	r1, r2
 8000c80:	461a      	mov	r2, r3
 8000c82:	4603      	mov	r3, r0
 8000c84:	70fb      	strb	r3, [r7, #3]
 8000c86:	460b      	mov	r3, r1
 8000c88:	70bb      	strb	r3, [r7, #2]
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	707b      	strb	r3, [r7, #1]
	// In order to read multiple bytes, it is necessary to assert the most significant bit of the sub-address field.
	uint8_t addr = register_addr | 0x80;
 8000c8e:	78bb      	ldrb	r3, [r7, #2]
 8000c90:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(hi2c, (dev_addr << 1) & 0xFE, &addr, 1, I2C_TIMEOUT_SML);
 8000c98:	78fb      	ldrb	r3, [r7, #3]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	b299      	uxth	r1, r3
 8000ca2:	f107 020e 	add.w	r2, r7, #14
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	9300      	str	r3, [sp, #0]
 8000caa:	2301      	movs	r3, #1
 8000cac:	6878      	ldr	r0, [r7, #4]
<<<<<<< HEAD
 8000cae:	f004 f8d1 	bl	8004e54 <HAL_I2C_Master_Transmit>
=======
 8000cae:	f004 f891 	bl	8004dd4 <HAL_I2C_Master_Transmit>
>>>>>>> flight_hardware
	HAL_StatusTypeDef hal_status =  HAL_I2C_Master_Receive(hi2c, (dev_addr << 1) | 0x01, data_buffer, size, I2C_TIMEOUT_LRG);
 8000cb2:	78fb      	ldrb	r3, [r7, #3]
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	b21b      	sxth	r3, r3
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	b21b      	sxth	r3, r3
 8000cbe:	b299      	uxth	r1, r3
 8000cc0:	787b      	ldrb	r3, [r7, #1]
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	220a      	movs	r2, #10
 8000cc6:	9200      	str	r2, [sp, #0]
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	6878      	ldr	r0, [r7, #4]
<<<<<<< HEAD
 8000ccc:	f004 f9c0 	bl	8005050 <HAL_I2C_Master_Receive>
=======
 8000ccc:	f004 f980 	bl	8004fd0 <HAL_I2C_Master_Receive>
>>>>>>> flight_hardware
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	73fb      	strb	r3, [r7, #15]
	return hal_status;
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <i2c_write_reg>:
	HAL_I2C_Master_Transmit(hi2c, (dev_addr << 1) & 0xFE, &addr, 1, I2C_TIMEOUT_SML);
	HAL_StatusTypeDef hal_status =  HAL_I2C_Master_Receive(hi2c, (dev_addr << 1) | 0x01, data_buffer, size, I2C_TIMEOUT_LRG);
	return hal_status;
}

HAL_StatusTypeDef i2c_write_reg(I2C_HandleTypeDef* hi2c, uint8_t dev_addr, uint8_t* register_addr, uint8_t data) {
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b088      	sub	sp, #32
 8000ce2:	af02      	add	r7, sp, #8
 8000ce4:	60f8      	str	r0, [r7, #12]
 8000ce6:	607a      	str	r2, [r7, #4]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	460b      	mov	r3, r1
 8000cec:	72fb      	strb	r3, [r7, #11]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	72bb      	strb	r3, [r7, #10]
	uint8_t data_tx[2] = {*register_addr, data};
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	753b      	strb	r3, [r7, #20]
 8000cf8:	7abb      	ldrb	r3, [r7, #10]
 8000cfa:	757b      	strb	r3, [r7, #21]
	HAL_StatusTypeDef hal_status = HAL_I2C_Master_Transmit(hi2c, (dev_addr << 1) & 0xFE, data_tx, 2, I2C_TIMEOUT_SML);
 8000cfc:	7afb      	ldrb	r3, [r7, #11]
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	b299      	uxth	r1, r3
 8000d06:	f107 0214 	add.w	r2, r7, #20
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	2302      	movs	r3, #2
 8000d10:	68f8      	ldr	r0, [r7, #12]
<<<<<<< HEAD
 8000d12:	f004 f89f 	bl	8004e54 <HAL_I2C_Master_Transmit>
=======
 8000d12:	f004 f85f 	bl	8004dd4 <HAL_I2C_Master_Transmit>
>>>>>>> flight_hardware
 8000d16:	4603      	mov	r3, r0
 8000d18:	75fb      	strb	r3, [r7, #23]
	return hal_status;
 8000d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3718      	adds	r7, #24
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 8000d2a:	f002 f92d 	bl	8002f88 <HAL_Init>
=======
 8000d2a:	f002 f8ed 	bl	8002f08 <HAL_Init>
>>>>>>> flight_hardware
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d2e:	f000 f915 	bl	8000f5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d32:	f000 fb95 	bl	8001460 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d36:	f000 fb5d 	bl	80013f4 <MX_DMA_Init>
  MX_I2C1_Init();
 8000d3a:	f000 f9b3 	bl	80010a4 <MX_I2C1_Init>
  MX_RTC_Init();
 8000d3e:	f000 fa31 	bl	80011a4 <MX_RTC_Init>
  MX_SPI1_Init();
 8000d42:	f000 fa55 	bl	80011f0 <MX_SPI1_Init>
  MX_TIM6_Init();
 8000d46:	f000 fabf 	bl	80012c8 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8000d4a:	f000 fb29 	bl	80013a0 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000d4e:	f000 fa85 	bl	800125c <MX_SPI2_Init>
  MX_CAN2_Init();
 8000d52:	f000 f96f 	bl	8001034 <MX_CAN2_Init>
  MX_TIM7_Init();
 8000d56:	f000 faed 	bl	8001334 <MX_TIM7_Init>
  MX_I2C3_Init();
 8000d5a:	f000 f9e3 	bl	8001124 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  systemInit();
 8000d5e:	f000 fc67 	bl	8001630 <systemInit>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // If the flight jumper has been removed (GPIO rising edge), reset the time to 0.
	  if(rtc_reset == FLAG_SET) {
 8000d62:	4b66      	ldr	r3, [pc, #408]	; (8000efc <main+0x1d8>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d105      	bne.n	8000d76 <main+0x52>
		  initialise_rtc_default(&hrtc);
 8000d6a:	4865      	ldr	r0, [pc, #404]	; (8000f00 <main+0x1dc>)
 8000d6c:	f001 fb4e 	bl	800240c <initialise_rtc_default>
		  rtc_reset = FLAG_RESET;
 8000d70:	4b62      	ldr	r3, [pc, #392]	; (8000efc <main+0x1d8>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	701a      	strb	r2, [r3, #0]
	  }

	  // Handle UART receive flag
	  if(uart2_rec_flag == FLAG_SET) {
 8000d76:	4b63      	ldr	r3, [pc, #396]	; (8000f04 <main+0x1e0>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d104      	bne.n	8000d88 <main+0x64>
		  handleUART();
 8000d7e:	f000 fe61 	bl	8001a44 <handleUART>
		  uart2_rec_flag = FLAG_RESET;
 8000d82:	4b60      	ldr	r3, [pc, #384]	; (8000f04 <main+0x1e0>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]
	  }

	  // Handle CAN receive flag
	  if(CAN_RX_Flag == FLAG_SET) {
 8000d88:	4b5f      	ldr	r3, [pc, #380]	; (8000f08 <main+0x1e4>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d117      	bne.n	8000dc0 <main+0x9c>
		  if((CAN_First_Msg == FLAG_SET) && (flight_state == GROUND)) {
 8000d90:	4b5e      	ldr	r3, [pc, #376]	; (8000f0c <main+0x1e8>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d106      	bne.n	8000da6 <main+0x82>
 8000d98:	4b5d      	ldr	r3, [pc, #372]	; (8000f10 <main+0x1ec>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d102      	bne.n	8000da6 <main+0x82>
			  flight_state = LOADED;
 8000da0:	4b5b      	ldr	r3, [pc, #364]	; (8000f10 <main+0x1ec>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	701a      	strb	r2, [r3, #0]
		  }

		  handleCAN();
 8000da6:	f000 fde3 	bl	8001970 <handleCAN>
		  HAL_GPIO_TogglePin(led_green.GPIOx, led_green.GPIO_Pin);
 8000daa:	4b5a      	ldr	r3, [pc, #360]	; (8000f14 <main+0x1f0>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a59      	ldr	r2, [pc, #356]	; (8000f14 <main+0x1f0>)
 8000db0:	8892      	ldrh	r2, [r2, #4]
 8000db2:	4611      	mov	r1, r2
 8000db4:	4618      	mov	r0, r3
<<<<<<< HEAD
 8000db6:	f003 fed6 	bl	8004b66 <HAL_GPIO_TogglePin>
=======
 8000db6:	f003 fe96 	bl	8004ae6 <HAL_GPIO_TogglePin>
>>>>>>> flight_hardware
		  CAN_RX_Flag = FLAG_RESET;
 8000dba:	4b53      	ldr	r3, [pc, #332]	; (8000f08 <main+0x1e4>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	701a      	strb	r2, [r3, #0]
	  }

	  if (tim7_overflow_flag == FLAG_SET) {
 8000dc0:	4b55      	ldr	r3, [pc, #340]	; (8000f18 <main+0x1f4>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d122      	bne.n	8000e0e <main+0xea>
		  HAL_GPIO_TogglePin(led_orange.GPIOx, led_orange.GPIO_Pin);		// Toggle LED
 8000dc8:	4b54      	ldr	r3, [pc, #336]	; (8000f1c <main+0x1f8>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a53      	ldr	r2, [pc, #332]	; (8000f1c <main+0x1f8>)
 8000dce:	8892      	ldrh	r2, [r2, #4]
 8000dd0:	4611      	mov	r1, r2
 8000dd2:	4618      	mov	r0, r3
<<<<<<< HEAD
 8000dd4:	f003 fec7 	bl	8004b66 <HAL_GPIO_TogglePin>
=======
 8000dd4:	f003 fe87 	bl	8004ae6 <HAL_GPIO_TogglePin>
>>>>>>> flight_hardware
		  sysStatus = systemStatus(&hspi1, &hspi2, i2c_bme280, i2c_accel);
 8000dd8:	4b51      	ldr	r3, [pc, #324]	; (8000f20 <main+0x1fc>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4b51      	ldr	r3, [pc, #324]	; (8000f24 <main+0x200>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4951      	ldr	r1, [pc, #324]	; (8000f28 <main+0x204>)
 8000de2:	4852      	ldr	r0, [pc, #328]	; (8000f2c <main+0x208>)
 8000de4:	f000 ffc8 	bl	8001d78 <systemStatus>
 8000de8:	4603      	mov	r3, r0
 8000dea:	461a      	mov	r2, r3
 8000dec:	4b50      	ldr	r3, [pc, #320]	; (8000f30 <main+0x20c>)
 8000dee:	701a      	strb	r2, [r3, #0]

		  if(sysStatus == 0x00) {
 8000df0:	4b4f      	ldr	r3, [pc, #316]	; (8000f30 <main+0x20c>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d107      	bne.n	8000e08 <main+0xe4>
			  HAL_GPIO_WritePin(status_led.GPIOx, status_led.GPIO_Pin, GPIO_PIN_SET);	// Turn LED off
 8000df8:	4b4e      	ldr	r3, [pc, #312]	; (8000f34 <main+0x210>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a4d      	ldr	r2, [pc, #308]	; (8000f34 <main+0x210>)
 8000dfe:	8891      	ldrh	r1, [r2, #4]
 8000e00:	2201      	movs	r2, #1
 8000e02:	4618      	mov	r0, r3
 8000e04:	f003 fe96 	bl	8004b34 <HAL_GPIO_WritePin>
		  }

		  tim7_overflow_flag = FLAG_RESET;
 8000e08:	4b43      	ldr	r3, [pc, #268]	; (8000f18 <main+0x1f4>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	701a      	strb	r2, [r3, #0]
	  }

	  // Handle Timer 6 overflow flag
	  if(tim6_overflow_flag == FLAG_SET) {
 8000e0e:	4b4a      	ldr	r3, [pc, #296]	; (8000f38 <main+0x214>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d10a      	bne.n	8000e2c <main+0x108>
		  readAllSensors(i2c_accel, i2c_bme280, &hrtc);
 8000e16:	4b43      	ldr	r3, [pc, #268]	; (8000f24 <main+0x200>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a41      	ldr	r2, [pc, #260]	; (8000f20 <main+0x1fc>)
 8000e1c:	6811      	ldr	r1, [r2, #0]
 8000e1e:	4a38      	ldr	r2, [pc, #224]	; (8000f00 <main+0x1dc>)
 8000e20:	4618      	mov	r0, r3
 8000e22:	f001 fa0f 	bl	8002244 <readAllSensors>
		  tim6_overflow_flag = FLAG_RESET;
 8000e26:	4b44      	ldr	r3, [pc, #272]	; (8000f38 <main+0x214>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	701a      	strb	r2, [r3, #0]
	  }

	  // Write data to flash when buffer is full
	  if(byte_tracker > (PAGE_SIZE - READ_SIZE)) {
 8000e2c:	4b43      	ldr	r3, [pc, #268]	; (8000f3c <main+0x218>)
 8000e2e:	881b      	ldrh	r3, [r3, #0]
 8000e30:	2beb      	cmp	r3, #235	; 0xeb
 8000e32:	d953      	bls.n	8000edc <main+0x1b8>
		  GPIO_PinState flight_mode = HAL_GPIO_ReadPin(jmp_flight.GPIOx, jmp_flight.GPIO_Pin);
<<<<<<< HEAD
 8000e34:	4b42      	ldr	r3, [pc, #264]	; (8000f40 <main+0x21c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a41      	ldr	r2, [pc, #260]	; (8000f40 <main+0x21c>)
 8000e3a:	8892      	ldrh	r2, [r2, #4]
 8000e3c:	b292      	uxth	r2, r2
 8000e3e:	4611      	mov	r1, r2
 8000e40:	4618      	mov	r0, r3
 8000e42:	f003 fe5f 	bl	8004b04 <HAL_GPIO_ReadPin>
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
=======
 8000e1c:	4b41      	ldr	r3, [pc, #260]	; (8000f24 <main+0x200>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a40      	ldr	r2, [pc, #256]	; (8000f24 <main+0x200>)
 8000e22:	8892      	ldrh	r2, [r2, #4]
 8000e24:	b292      	uxth	r2, r2
 8000e26:	4611      	mov	r1, r2
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f003 fe2b 	bl	8004a84 <HAL_GPIO_ReadPin>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
>>>>>>> flight_hardware
		  if((flight_mode & !(end_of_flash)) == FLAG_SET) {
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	4a3d      	ldr	r2, [pc, #244]	; (8000f44 <main+0x220>)
 8000e4e:	7812      	ldrb	r2, [r2, #0]
 8000e50:	2a00      	cmp	r2, #0
 8000e52:	bf0c      	ite	eq
 8000e54:	2201      	moveq	r2, #1
 8000e56:	2200      	movne	r2, #0
 8000e58:	b2d2      	uxtb	r2, r2
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d133      	bne.n	8000ec8 <main+0x1a4>
			  HAL_GPIO_WritePin(led_green.GPIOx, led_green.GPIO_Pin, GPIO_PIN_SET);		// Toggle LED when writing data
<<<<<<< HEAD
 8000e60:	4b2c      	ldr	r3, [pc, #176]	; (8000f14 <main+0x1f0>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a2b      	ldr	r2, [pc, #172]	; (8000f14 <main+0x1f0>)
 8000e66:	8891      	ldrh	r1, [r2, #4]
 8000e68:	2201      	movs	r2, #1
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f003 fe62 	bl	8004b34 <HAL_GPIO_WritePin>
=======
 8000e48:	4b2c      	ldr	r3, [pc, #176]	; (8000efc <main+0x1d8>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a2b      	ldr	r2, [pc, #172]	; (8000efc <main+0x1d8>)
 8000e4e:	8891      	ldrh	r1, [r2, #4]
 8000e50:	2201      	movs	r2, #1
 8000e52:	4618      	mov	r0, r3
 8000e54:	f003 fe2e 	bl	8004ab4 <HAL_GPIO_WritePin>
>>>>>>> flight_hardware

			  write_data_spi_dma(data_buffer_tx[buffer_tracker], &hspi1, next_blank_page, cs_spi1);
 8000e70:	4b35      	ldr	r3, [pc, #212]	; (8000f48 <main+0x224>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	021b      	lsls	r3, r3, #8
 8000e76:	4a35      	ldr	r2, [pc, #212]	; (8000f4c <main+0x228>)
 8000e78:	1898      	adds	r0, r3, r2
 8000e7a:	4b35      	ldr	r3, [pc, #212]	; (8000f50 <main+0x22c>)
 8000e7c:	6819      	ldr	r1, [r3, #0]
 8000e7e:	4b35      	ldr	r3, [pc, #212]	; (8000f54 <main+0x230>)
 8000e80:	685a      	ldr	r2, [r3, #4]
 8000e82:	9200      	str	r2, [sp, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	460a      	mov	r2, r1
 8000e88:	4928      	ldr	r1, [pc, #160]	; (8000f2c <main+0x208>)
 8000e8a:	f7ff fda3 	bl	80009d4 <write_data_spi_dma>
			  write_data_spi_dma(data_buffer_tx[buffer_tracker], &hspi2, next_blank_page, cs_spi2);
 8000e8e:	4b2e      	ldr	r3, [pc, #184]	; (8000f48 <main+0x224>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	021b      	lsls	r3, r3, #8
 8000e94:	4a2d      	ldr	r2, [pc, #180]	; (8000f4c <main+0x228>)
 8000e96:	1898      	adds	r0, r3, r2
 8000e98:	4b2d      	ldr	r3, [pc, #180]	; (8000f50 <main+0x22c>)
 8000e9a:	6819      	ldr	r1, [r3, #0]
 8000e9c:	4b2e      	ldr	r3, [pc, #184]	; (8000f58 <main+0x234>)
 8000e9e:	685a      	ldr	r2, [r3, #4]
 8000ea0:	9200      	str	r2, [sp, #0]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	460a      	mov	r2, r1
 8000ea6:	4920      	ldr	r1, [pc, #128]	; (8000f28 <main+0x204>)
 8000ea8:	f7ff fd94 	bl	80009d4 <write_data_spi_dma>
			  next_blank_page += PAGE_SIZE;
 8000eac:	4b28      	ldr	r3, [pc, #160]	; (8000f50 <main+0x22c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000eb4:	4a26      	ldr	r2, [pc, #152]	; (8000f50 <main+0x22c>)
 8000eb6:	6013      	str	r3, [r2, #0]

			  HAL_GPIO_WritePin(led_green.GPIOx, led_green.GPIO_Pin, GPIO_PIN_RESET);		// Toggle LED when writing data
<<<<<<< HEAD
 8000eb8:	4b16      	ldr	r3, [pc, #88]	; (8000f14 <main+0x1f0>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a15      	ldr	r2, [pc, #84]	; (8000f14 <main+0x1f0>)
 8000ebe:	8891      	ldrh	r1, [r2, #4]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f003 fe36 	bl	8004b34 <HAL_GPIO_WritePin>
=======
 8000ea0:	4b16      	ldr	r3, [pc, #88]	; (8000efc <main+0x1d8>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a15      	ldr	r2, [pc, #84]	; (8000efc <main+0x1d8>)
 8000ea6:	8891      	ldrh	r1, [r2, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f003 fe02 	bl	8004ab4 <HAL_GPIO_WritePin>
>>>>>>> flight_hardware
		  }

		// Reset the buffer trackers
		buffer_tracker = buffer_tracker ^ 0x01;
 8000ec8:	4b1f      	ldr	r3, [pc, #124]	; (8000f48 <main+0x224>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	f083 0301 	eor.w	r3, r3, #1
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	4b1d      	ldr	r3, [pc, #116]	; (8000f48 <main+0x224>)
 8000ed4:	701a      	strb	r2, [r3, #0]
		byte_tracker = 0;
 8000ed6:	4b19      	ldr	r3, [pc, #100]	; (8000f3c <main+0x218>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	801a      	strh	r2, [r3, #0]
	  }

	  if(next_blank_page == (NUM_OF_PAGES*PAGE_SIZE)) {
 8000edc:	4b1c      	ldr	r3, [pc, #112]	; (8000f50 <main+0x22c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ee4:	f47f af3d 	bne.w	8000d62 <main+0x3e>
		  // TODO - Error Handle if SPI1 not found
		  next_blank_page = find_next_blank_page(&hspi1, &end_of_flash, cs_spi1);
 8000ee8:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <main+0x230>)
 8000eea:	cb0c      	ldmia	r3, {r2, r3}
 8000eec:	4915      	ldr	r1, [pc, #84]	; (8000f44 <main+0x220>)
 8000eee:	480f      	ldr	r0, [pc, #60]	; (8000f2c <main+0x208>)
 8000ef0:	f7ff fd9e 	bl	8000a30 <find_next_blank_page>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	4a16      	ldr	r2, [pc, #88]	; (8000f50 <main+0x22c>)
 8000ef8:	6013      	str	r3, [r2, #0]
	  if(rtc_reset == FLAG_SET) {
 8000efa:	e732      	b.n	8000d62 <main+0x3e>
 8000efc:	2000061c 	.word	0x2000061c
 8000f00:	20000118 	.word	0x20000118
 8000f04:	2000038a 	.word	0x2000038a
 8000f08:	200003b4 	.word	0x200003b4
 8000f0c:	200003b5 	.word	0x200003b5
 8000f10:	2000061e 	.word	0x2000061e
 8000f14:	200005e4 	.word	0x200005e4
 8000f18:	200003b7 	.word	0x200003b7
 8000f1c:	200005dc 	.word	0x200005dc
 8000f20:	20000384 	.word	0x20000384
 8000f24:	20000380 	.word	0x20000380
 8000f28:	20000190 	.word	0x20000190
 8000f2c:	20000138 	.word	0x20000138
 8000f30:	2000061d 	.word	0x2000061d
 8000f34:	200005ec 	.word	0x200005ec
 8000f38:	200003b6 	.word	0x200003b6
 8000f3c:	200005d8 	.word	0x200005d8
 8000f40:	20000614 	.word	0x20000614
 8000f44:	200005da 	.word	0x200005da
 8000f48:	200005b8 	.word	0x200005b8
 8000f4c:	200003b8 	.word	0x200003b8
 8000f50:	200005d4 	.word	0x200005d4
 8000f54:	200005f4 	.word	0x200005f4
 8000f58:	20000604 	.word	0x20000604

08000f5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b094      	sub	sp, #80	; 0x50
 8000f60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
<<<<<<< HEAD
 8000f62:	f107 0320 	add.w	r3, r7, #32
 8000f66:	2230      	movs	r2, #48	; 0x30
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f008 fa82 	bl	8009474 <memset>
=======
 8000f46:	f107 0320 	add.w	r3, r7, #32
 8000f4a:	2230      	movs	r2, #48	; 0x30
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f008 fa50 	bl	80093f4 <memset>
>>>>>>> flight_hardware
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f80:	2300      	movs	r3, #0
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	4b29      	ldr	r3, [pc, #164]	; (800102c <SystemClock_Config+0xd0>)
 8000f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f88:	4a28      	ldr	r2, [pc, #160]	; (800102c <SystemClock_Config+0xd0>)
 8000f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f90:	4b26      	ldr	r3, [pc, #152]	; (800102c <SystemClock_Config+0xd0>)
 8000f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	4b23      	ldr	r3, [pc, #140]	; (8001030 <SystemClock_Config+0xd4>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a22      	ldr	r2, [pc, #136]	; (8001030 <SystemClock_Config+0xd4>)
 8000fa6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000faa:	6013      	str	r3, [r2, #0]
 8000fac:	4b20      	ldr	r3, [pc, #128]	; (8001030 <SystemClock_Config+0xd4>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000fb8:	2309      	movs	r3, #9
 8000fba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000fd0:	2319      	movs	r3, #25
 8000fd2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fd4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000fd8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fde:	2304      	movs	r3, #4
 8000fe0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
<<<<<<< HEAD
 8000fe2:	f107 0320 	add.w	r3, r7, #32
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f004 fe8e 	bl	8005d08 <HAL_RCC_OscConfig>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <SystemClock_Config+0x9a>
=======
 8000fc6:	f107 0320 	add.w	r3, r7, #32
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f004 fe5c 	bl	8005c88 <HAL_RCC_OscConfig>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <SystemClock_Config+0x9a>
>>>>>>> flight_hardware
  {
    Error_Handler();
 8000ff2:	f000 febb 	bl	8001d6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff6:	230f      	movs	r3, #15
 8000ff8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001002:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001006:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001008:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800100c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
<<<<<<< HEAD
 800100e:	f107 030c 	add.w	r3, r7, #12
 8001012:	2105      	movs	r1, #5
 8001014:	4618      	mov	r0, r3
 8001016:	f005 f8ef 	bl	80061f8 <HAL_RCC_ClockConfig>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <SystemClock_Config+0xc8>
=======
 8000ff2:	f107 030c 	add.w	r3, r7, #12
 8000ff6:	2105      	movs	r1, #5
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f005 f8bd 	bl	8006178 <HAL_RCC_ClockConfig>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <SystemClock_Config+0xc8>
>>>>>>> flight_hardware
  {
    Error_Handler();
 8001020:	f000 fea4 	bl	8001d6c <Error_Handler>
  }
}
 8001024:	bf00      	nop
 8001026:	3750      	adds	r7, #80	; 0x50
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40023800 	.word	0x40023800
 8001030:	40007000 	.word	0x40007000

08001034 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001038:	4b18      	ldr	r3, [pc, #96]	; (800109c <MX_CAN2_Init+0x68>)
 800103a:	4a19      	ldr	r2, [pc, #100]	; (80010a0 <MX_CAN2_Init+0x6c>)
 800103c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 24;
 800103e:	4b17      	ldr	r3, [pc, #92]	; (800109c <MX_CAN2_Init+0x68>)
 8001040:	2218      	movs	r2, #24
 8001042:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001044:	4b15      	ldr	r3, [pc, #84]	; (800109c <MX_CAN2_Init+0x68>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800104a:	4b14      	ldr	r3, [pc, #80]	; (800109c <MX_CAN2_Init+0x68>)
 800104c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001050:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_11TQ;
 8001052:	4b12      	ldr	r3, [pc, #72]	; (800109c <MX_CAN2_Init+0x68>)
 8001054:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8001058:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 800105a:	4b10      	ldr	r3, [pc, #64]	; (800109c <MX_CAN2_Init+0x68>)
 800105c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001060:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <MX_CAN2_Init+0x68>)
 8001064:	2200      	movs	r2, #0
 8001066:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001068:	4b0c      	ldr	r3, [pc, #48]	; (800109c <MX_CAN2_Init+0x68>)
 800106a:	2200      	movs	r2, #0
 800106c:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800106e:	4b0b      	ldr	r3, [pc, #44]	; (800109c <MX_CAN2_Init+0x68>)
 8001070:	2200      	movs	r2, #0
 8001072:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001074:	4b09      	ldr	r3, [pc, #36]	; (800109c <MX_CAN2_Init+0x68>)
 8001076:	2200      	movs	r2, #0
 8001078:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800107a:	4b08      	ldr	r3, [pc, #32]	; (800109c <MX_CAN2_Init+0x68>)
 800107c:	2200      	movs	r2, #0
 800107e:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <MX_CAN2_Init+0x68>)
 8001082:	2200      	movs	r2, #0
 8001084:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
<<<<<<< HEAD
 8001086:	4805      	ldr	r0, [pc, #20]	; (800109c <MX_CAN2_Init+0x68>)
 8001088:	f002 f814 	bl	80030b4 <HAL_CAN_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_CAN2_Init+0x62>
=======
 800106a:	4805      	ldr	r0, [pc, #20]	; (8001080 <MX_CAN2_Init+0x68>)
 800106c:	f001 ffe2 	bl	8003034 <HAL_CAN_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_CAN2_Init+0x62>
>>>>>>> flight_hardware
  {
    Error_Handler();
 8001092:	f000 fe6b 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000048 	.word	0x20000048
 80010a0:	40006800 	.word	0x40006800

080010a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010a8:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <MX_I2C1_Init+0x74>)
 80010aa:	4a1c      	ldr	r2, [pc, #112]	; (800111c <MX_I2C1_Init+0x78>)
 80010ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010ae:	4b1a      	ldr	r3, [pc, #104]	; (8001118 <MX_I2C1_Init+0x74>)
 80010b0:	4a1b      	ldr	r2, [pc, #108]	; (8001120 <MX_I2C1_Init+0x7c>)
 80010b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010b4:	4b18      	ldr	r3, [pc, #96]	; (8001118 <MX_I2C1_Init+0x74>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010ba:	4b17      	ldr	r3, [pc, #92]	; (8001118 <MX_I2C1_Init+0x74>)
 80010bc:	2200      	movs	r2, #0
 80010be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010c0:	4b15      	ldr	r3, [pc, #84]	; (8001118 <MX_I2C1_Init+0x74>)
 80010c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010c8:	4b13      	ldr	r3, [pc, #76]	; (8001118 <MX_I2C1_Init+0x74>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ce:	4b12      	ldr	r3, [pc, #72]	; (8001118 <MX_I2C1_Init+0x74>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010d4:	4b10      	ldr	r3, [pc, #64]	; (8001118 <MX_I2C1_Init+0x74>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010da:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <MX_I2C1_Init+0x74>)
 80010dc:	2200      	movs	r2, #0
 80010de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
<<<<<<< HEAD
 80010e0:	480d      	ldr	r0, [pc, #52]	; (8001118 <MX_I2C1_Init+0x74>)
 80010e2:	f003 fd73 	bl	8004bcc <HAL_I2C_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_I2C1_Init+0x4c>
=======
 80010c4:	480d      	ldr	r0, [pc, #52]	; (80010fc <MX_I2C1_Init+0x74>)
 80010c6:	f003 fd41 	bl	8004b4c <HAL_I2C_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_I2C1_Init+0x4c>
>>>>>>> flight_hardware
  {
    Error_Handler();
 80010ec:	f000 fe3e 	bl	8001d6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
<<<<<<< HEAD
 80010f0:	2100      	movs	r1, #0
 80010f2:	4809      	ldr	r0, [pc, #36]	; (8001118 <MX_I2C1_Init+0x74>)
 80010f4:	f004 fd64 	bl	8005bc0 <HAL_I2CEx_ConfigAnalogFilter>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_I2C1_Init+0x5e>
=======
 80010d4:	2100      	movs	r1, #0
 80010d6:	4809      	ldr	r0, [pc, #36]	; (80010fc <MX_I2C1_Init+0x74>)
 80010d8:	f004 fd32 	bl	8005b40 <HAL_I2CEx_ConfigAnalogFilter>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_I2C1_Init+0x5e>
>>>>>>> flight_hardware
  {
    Error_Handler();
 80010fe:	f000 fe35 	bl	8001d6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
<<<<<<< HEAD
 8001102:	2100      	movs	r1, #0
 8001104:	4804      	ldr	r0, [pc, #16]	; (8001118 <MX_I2C1_Init+0x74>)
 8001106:	f004 fd97 	bl	8005c38 <HAL_I2CEx_ConfigDigitalFilter>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_I2C1_Init+0x70>
=======
 80010e6:	2100      	movs	r1, #0
 80010e8:	4804      	ldr	r0, [pc, #16]	; (80010fc <MX_I2C1_Init+0x74>)
 80010ea:	f004 fd65 	bl	8005bb8 <HAL_I2CEx_ConfigDigitalFilter>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_I2C1_Init+0x70>
>>>>>>> flight_hardware
  {
    Error_Handler();
 8001110:	f000 fe2c 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000070 	.word	0x20000070
 800111c:	40005400 	.word	0x40005400
 8001120:	000186a0 	.word	0x000186a0

08001124 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

<<<<<<< HEAD
  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001128:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <MX_I2C3_Init+0x74>)
 800112a:	4a1c      	ldr	r2, [pc, #112]	; (800119c <MX_I2C3_Init+0x78>)
 800112c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800112e:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <MX_I2C3_Init+0x74>)
 8001130:	4a1b      	ldr	r2, [pc, #108]	; (80011a0 <MX_I2C3_Init+0x7c>)
 8001132:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001134:	4b18      	ldr	r3, [pc, #96]	; (8001198 <MX_I2C3_Init+0x74>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800113a:	4b17      	ldr	r3, [pc, #92]	; (8001198 <MX_I2C3_Init+0x74>)
 800113c:	2200      	movs	r2, #0
 800113e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001140:	4b15      	ldr	r3, [pc, #84]	; (8001198 <MX_I2C3_Init+0x74>)
 8001142:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001146:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001148:	4b13      	ldr	r3, [pc, #76]	; (8001198 <MX_I2C3_Init+0x74>)
 800114a:	2200      	movs	r2, #0
 800114c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800114e:	4b12      	ldr	r3, [pc, #72]	; (8001198 <MX_I2C3_Init+0x74>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001154:	4b10      	ldr	r3, [pc, #64]	; (8001198 <MX_I2C3_Init+0x74>)
 8001156:	2200      	movs	r2, #0
 8001158:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800115a:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <MX_I2C3_Init+0x74>)
 800115c:	2200      	movs	r2, #0
 800115e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001160:	480d      	ldr	r0, [pc, #52]	; (8001198 <MX_I2C3_Init+0x74>)
 8001162:	f003 fd33 	bl	8004bcc <HAL_I2C_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_I2C3_Init+0x4c>
=======
  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800110c:	4b1b      	ldr	r3, [pc, #108]	; (800117c <MX_I2C2_Init+0x74>)
 800110e:	4a1c      	ldr	r2, [pc, #112]	; (8001180 <MX_I2C2_Init+0x78>)
 8001110:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001112:	4b1a      	ldr	r3, [pc, #104]	; (800117c <MX_I2C2_Init+0x74>)
 8001114:	4a1b      	ldr	r2, [pc, #108]	; (8001184 <MX_I2C2_Init+0x7c>)
 8001116:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001118:	4b18      	ldr	r3, [pc, #96]	; (800117c <MX_I2C2_Init+0x74>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800111e:	4b17      	ldr	r3, [pc, #92]	; (800117c <MX_I2C2_Init+0x74>)
 8001120:	2200      	movs	r2, #0
 8001122:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001124:	4b15      	ldr	r3, [pc, #84]	; (800117c <MX_I2C2_Init+0x74>)
 8001126:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800112a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800112c:	4b13      	ldr	r3, [pc, #76]	; (800117c <MX_I2C2_Init+0x74>)
 800112e:	2200      	movs	r2, #0
 8001130:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001132:	4b12      	ldr	r3, [pc, #72]	; (800117c <MX_I2C2_Init+0x74>)
 8001134:	2200      	movs	r2, #0
 8001136:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001138:	4b10      	ldr	r3, [pc, #64]	; (800117c <MX_I2C2_Init+0x74>)
 800113a:	2200      	movs	r2, #0
 800113c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800113e:	4b0f      	ldr	r3, [pc, #60]	; (800117c <MX_I2C2_Init+0x74>)
 8001140:	2200      	movs	r2, #0
 8001142:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001144:	480d      	ldr	r0, [pc, #52]	; (800117c <MX_I2C2_Init+0x74>)
 8001146:	f003 fd01 	bl	8004b4c <HAL_I2C_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_I2C2_Init+0x4c>
>>>>>>> flight_hardware
  {
    Error_Handler();
 800116c:	f000 fdfe 	bl	8001d6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
<<<<<<< HEAD
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001170:	2100      	movs	r1, #0
 8001172:	4809      	ldr	r0, [pc, #36]	; (8001198 <MX_I2C3_Init+0x74>)
 8001174:	f004 fd24 	bl	8005bc0 <HAL_I2CEx_ConfigAnalogFilter>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_I2C3_Init+0x5e>
=======
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001154:	2100      	movs	r1, #0
 8001156:	4809      	ldr	r0, [pc, #36]	; (800117c <MX_I2C2_Init+0x74>)
 8001158:	f004 fcf2 	bl	8005b40 <HAL_I2CEx_ConfigAnalogFilter>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_I2C2_Init+0x5e>
>>>>>>> flight_hardware
  {
    Error_Handler();
 800117e:	f000 fdf5 	bl	8001d6c <Error_Handler>
  }

  /** Configure Digital filter
  */
<<<<<<< HEAD
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001182:	2100      	movs	r1, #0
 8001184:	4804      	ldr	r0, [pc, #16]	; (8001198 <MX_I2C3_Init+0x74>)
 8001186:	f004 fd57 	bl	8005c38 <HAL_I2CEx_ConfigDigitalFilter>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_I2C3_Init+0x70>
=======
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001166:	2100      	movs	r1, #0
 8001168:	4804      	ldr	r0, [pc, #16]	; (800117c <MX_I2C2_Init+0x74>)
 800116a:	f004 fd25 	bl	8005bb8 <HAL_I2CEx_ConfigDigitalFilter>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_I2C2_Init+0x70>
>>>>>>> flight_hardware
  {
    Error_Handler();
 8001190:	f000 fdec 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}
 8001198:	200000c4 	.word	0x200000c4
 800119c:	40005c00 	.word	0x40005c00
 80011a0:	000186a0 	.word	0x000186a0

080011a4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80011a8:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <MX_RTC_Init+0x44>)
 80011aa:	4a10      	ldr	r2, [pc, #64]	; (80011ec <MX_RTC_Init+0x48>)
 80011ac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <MX_RTC_Init+0x44>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80011b4:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <MX_RTC_Init+0x44>)
 80011b6:	227f      	movs	r2, #127	; 0x7f
 80011b8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <MX_RTC_Init+0x44>)
 80011bc:	22ff      	movs	r2, #255	; 0xff
 80011be:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80011c0:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <MX_RTC_Init+0x44>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80011c6:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <MX_RTC_Init+0x44>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <MX_RTC_Init+0x44>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
<<<<<<< HEAD
 80011d2:	4805      	ldr	r0, [pc, #20]	; (80011e8 <MX_RTC_Init+0x44>)
 80011d4:	f005 fbb0 	bl	8006938 <HAL_RTC_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_RTC_Init+0x3e>
=======
 80011b6:	4805      	ldr	r0, [pc, #20]	; (80011cc <MX_RTC_Init+0x44>)
 80011b8:	f005 fb7e 	bl	80068b8 <HAL_RTC_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_RTC_Init+0x3e>
>>>>>>> flight_hardware
  {
    Error_Handler();
 80011de:	f000 fdc5 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000118 	.word	0x20000118
 80011ec:	40002800 	.word	0x40002800

080011f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011f4:	4b17      	ldr	r3, [pc, #92]	; (8001254 <MX_SPI1_Init+0x64>)
 80011f6:	4a18      	ldr	r2, [pc, #96]	; (8001258 <MX_SPI1_Init+0x68>)
 80011f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011fa:	4b16      	ldr	r3, [pc, #88]	; (8001254 <MX_SPI1_Init+0x64>)
 80011fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001200:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001202:	4b14      	ldr	r3, [pc, #80]	; (8001254 <MX_SPI1_Init+0x64>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001208:	4b12      	ldr	r3, [pc, #72]	; (8001254 <MX_SPI1_Init+0x64>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800120e:	4b11      	ldr	r3, [pc, #68]	; (8001254 <MX_SPI1_Init+0x64>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001214:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <MX_SPI1_Init+0x64>)
 8001216:	2200      	movs	r2, #0
 8001218:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
<<<<<<< HEAD
 800121a:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <MX_SPI1_Init+0x64>)
 800121c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001220:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <MX_SPI1_Init+0x64>)
 8001224:	2200      	movs	r2, #0
 8001226:	61da      	str	r2, [r3, #28]
=======
 80011fe:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <MX_SPI1_Init+0x64>)
 8001200:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001204:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001206:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <MX_SPI1_Init+0x64>)
 8001208:	2208      	movs	r2, #8
 800120a:	61da      	str	r2, [r3, #28]
>>>>>>> flight_hardware
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001228:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <MX_SPI1_Init+0x64>)
 800122a:	2200      	movs	r2, #0
 800122c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800122e:	4b09      	ldr	r3, [pc, #36]	; (8001254 <MX_SPI1_Init+0x64>)
 8001230:	2200      	movs	r2, #0
 8001232:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001234:	4b07      	ldr	r3, [pc, #28]	; (8001254 <MX_SPI1_Init+0x64>)
 8001236:	2200      	movs	r2, #0
 8001238:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <MX_SPI1_Init+0x64>)
 800123c:	220a      	movs	r2, #10
 800123e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
<<<<<<< HEAD
 8001240:	4804      	ldr	r0, [pc, #16]	; (8001254 <MX_SPI1_Init+0x64>)
 8001242:	f005 fe85 	bl	8006f50 <HAL_SPI_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_SPI1_Init+0x60>
=======
 8001224:	4804      	ldr	r0, [pc, #16]	; (8001238 <MX_SPI1_Init+0x64>)
 8001226:	f005 fe53 	bl	8006ed0 <HAL_SPI_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_SPI1_Init+0x60>
>>>>>>> flight_hardware
  {
    Error_Handler();
 800124c:	f000 fd8e 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000138 	.word	0x20000138
 8001258:	40013000 	.word	0x40013000

0800125c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001260:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <MX_SPI2_Init+0x64>)
 8001262:	4a18      	ldr	r2, [pc, #96]	; (80012c4 <MX_SPI2_Init+0x68>)
 8001264:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001266:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <MX_SPI2_Init+0x64>)
 8001268:	f44f 7282 	mov.w	r2, #260	; 0x104
 800126c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800126e:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <MX_SPI2_Init+0x64>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <MX_SPI2_Init+0x64>)
 8001276:	2200      	movs	r2, #0
 8001278:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800127a:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <MX_SPI2_Init+0x64>)
 800127c:	2200      	movs	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001280:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <MX_SPI2_Init+0x64>)
 8001282:	2200      	movs	r2, #0
 8001284:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <MX_SPI2_Init+0x64>)
 8001288:	f44f 7200 	mov.w	r2, #512	; 0x200
 800128c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800128e:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <MX_SPI2_Init+0x64>)
 8001290:	2200      	movs	r2, #0
 8001292:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001294:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <MX_SPI2_Init+0x64>)
 8001296:	2200      	movs	r2, #0
 8001298:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <MX_SPI2_Init+0x64>)
 800129c:	2200      	movs	r2, #0
 800129e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012a0:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <MX_SPI2_Init+0x64>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <MX_SPI2_Init+0x64>)
 80012a8:	220a      	movs	r2, #10
 80012aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
<<<<<<< HEAD
 80012ac:	4804      	ldr	r0, [pc, #16]	; (80012c0 <MX_SPI2_Init+0x64>)
 80012ae:	f005 fe4f 	bl	8006f50 <HAL_SPI_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_SPI2_Init+0x60>
=======
 8001290:	4804      	ldr	r0, [pc, #16]	; (80012a4 <MX_SPI2_Init+0x64>)
 8001292:	f005 fe1d 	bl	8006ed0 <HAL_SPI_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_SPI2_Init+0x60>
>>>>>>> flight_hardware
  {
    Error_Handler();
 80012b8:	f000 fd58 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000190 	.word	0x20000190
 80012c4:	40003800 	.word	0x40003800

080012c8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ce:	463b      	mov	r3, r7
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80012d6:	4b15      	ldr	r3, [pc, #84]	; (800132c <MX_TIM6_Init+0x64>)
 80012d8:	4a15      	ldr	r2, [pc, #84]	; (8001330 <MX_TIM6_Init+0x68>)
 80012da:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 20999;
 80012dc:	4b13      	ldr	r3, [pc, #76]	; (800132c <MX_TIM6_Init+0x64>)
 80012de:	f245 2207 	movw	r2, #20999	; 0x5207
 80012e2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e4:	4b11      	ldr	r3, [pc, #68]	; (800132c <MX_TIM6_Init+0x64>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 80;
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <MX_TIM6_Init+0x64>)
 80012ec:	2250      	movs	r2, #80	; 0x50
 80012ee:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f0:	4b0e      	ldr	r3, [pc, #56]	; (800132c <MX_TIM6_Init+0x64>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
<<<<<<< HEAD
 80012f6:	480d      	ldr	r0, [pc, #52]	; (800132c <MX_TIM6_Init+0x64>)
 80012f8:	f006 fd48 	bl	8007d8c <HAL_TIM_Base_Init>
=======
 80012da:	480d      	ldr	r0, [pc, #52]	; (8001310 <MX_TIM6_Init+0x64>)
 80012dc:	f006 fd16 	bl	8007d0c <HAL_TIM_Base_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80012e6:	f000 fd23 	bl	8001d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ea:	2300      	movs	r3, #0
 80012ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80012f2:	463b      	mov	r3, r7
 80012f4:	4619      	mov	r1, r3
 80012f6:	4806      	ldr	r0, [pc, #24]	; (8001310 <MX_TIM6_Init+0x64>)
 80012f8:	f006 ff96 	bl	8008228 <HAL_TIMEx_MasterConfigSynchronization>
>>>>>>> flight_hardware
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001302:	f000 fd33 	bl	8001d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001306:	2300      	movs	r3, #0
 8001308:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800130a:	2300      	movs	r3, #0
 800130c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800130e:	463b      	mov	r3, r7
 8001310:	4619      	mov	r1, r3
 8001312:	4806      	ldr	r0, [pc, #24]	; (800132c <MX_TIM6_Init+0x64>)
 8001314:	f006 ffc8 	bl	80082a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800131e:	f000 fd25 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200002a8 	.word	0x200002a8
 8001330:	40001000 	.word	0x40001000

08001334 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800133a:	463b      	mov	r3, r7
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <MX_TIM7_Init+0x64>)
 8001344:	4a15      	ldr	r2, [pc, #84]	; (800139c <MX_TIM7_Init+0x68>)
 8001346:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 20999;
 8001348:	4b13      	ldr	r3, [pc, #76]	; (8001398 <MX_TIM7_Init+0x64>)
 800134a:	f245 2207 	movw	r2, #20999	; 0x5207
 800134e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <MX_TIM7_Init+0x64>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 4000;
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <MX_TIM7_Init+0x64>)
 8001358:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800135c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <MX_TIM7_Init+0x64>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
<<<<<<< HEAD
 8001364:	480c      	ldr	r0, [pc, #48]	; (8001398 <MX_TIM7_Init+0x64>)
 8001366:	f006 fd11 	bl	8007d8c <HAL_TIM_Base_Init>
=======
 8001348:	480c      	ldr	r0, [pc, #48]	; (800137c <MX_TIM7_Init+0x64>)
 800134a:	f006 fcdf 	bl	8007d0c <HAL_TIM_Base_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001354:	f000 fcec 	bl	8001d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001358:	2300      	movs	r3, #0
 800135a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800135c:	2300      	movs	r3, #0
 800135e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001360:	463b      	mov	r3, r7
 8001362:	4619      	mov	r1, r3
 8001364:	4805      	ldr	r0, [pc, #20]	; (800137c <MX_TIM7_Init+0x64>)
 8001366:	f006 ff5f 	bl	8008228 <HAL_TIMEx_MasterConfigSynchronization>
>>>>>>> flight_hardware
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001370:	f000 fcfc 	bl	8001d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001374:	2300      	movs	r3, #0
 8001376:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001378:	2300      	movs	r3, #0
 800137a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800137c:	463b      	mov	r3, r7
 800137e:	4619      	mov	r1, r3
 8001380:	4805      	ldr	r0, [pc, #20]	; (8001398 <MX_TIM7_Init+0x64>)
 8001382:	f006 ff91 	bl	80082a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800138c:	f000 fcee 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	200002f0 	.word	0x200002f0
 800139c:	40001400 	.word	0x40001400

080013a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013a6:	4a12      	ldr	r2, [pc, #72]	; (80013f0 <MX_USART2_UART_Init+0x50>)
 80013a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013be:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013c4:	4b09      	ldr	r3, [pc, #36]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013c6:	220c      	movs	r2, #12
 80013c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ca:	4b08      	ldr	r3, [pc, #32]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
<<<<<<< HEAD
 80013d6:	4805      	ldr	r0, [pc, #20]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013d8:	f006 fff6 	bl	80083c8 <HAL_UART_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_USART2_UART_Init+0x46>
=======
 80013ba:	4805      	ldr	r0, [pc, #20]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 80013bc:	f006 ffc4 	bl	8008348 <HAL_UART_Init>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_USART2_UART_Init+0x46>
>>>>>>> flight_hardware
  {
    Error_Handler();
 80013e2:	f000 fcc3 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000338 	.word	0x20000338
 80013f0:	40004400 	.word	0x40004400

080013f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	4b17      	ldr	r3, [pc, #92]	; (800145c <MX_DMA_Init+0x68>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a16      	ldr	r2, [pc, #88]	; (800145c <MX_DMA_Init+0x68>)
 8001404:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b14      	ldr	r3, [pc, #80]	; (800145c <MX_DMA_Init+0x68>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	603b      	str	r3, [r7, #0]
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <MX_DMA_Init+0x68>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a0f      	ldr	r2, [pc, #60]	; (800145c <MX_DMA_Init+0x68>)
 8001420:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b0d      	ldr	r3, [pc, #52]	; (800145c <MX_DMA_Init+0x68>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800142e:	603b      	str	r3, [r7, #0]
 8001430:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
<<<<<<< HEAD
 8001432:	2200      	movs	r2, #0
 8001434:	2100      	movs	r1, #0
 8001436:	200f      	movs	r0, #15
 8001438:	f002 fd7f 	bl	8003f3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800143c:	200f      	movs	r0, #15
 800143e:	f002 fd98 	bl	8003f72 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001442:	2200      	movs	r2, #0
 8001444:	2100      	movs	r1, #0
 8001446:	203b      	movs	r0, #59	; 0x3b
 8001448:	f002 fd77 	bl	8003f3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800144c:	203b      	movs	r0, #59	; 0x3b
 800144e:	f002 fd90 	bl	8003f72 <HAL_NVIC_EnableIRQ>
=======
 8001416:	2200      	movs	r2, #0
 8001418:	2100      	movs	r1, #0
 800141a:	200f      	movs	r0, #15
 800141c:	f002 fd4d 	bl	8003eba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001420:	200f      	movs	r0, #15
 8001422:	f002 fd66 	bl	8003ef2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2100      	movs	r1, #0
 800142a:	203b      	movs	r0, #59	; 0x3b
 800142c:	f002 fd45 	bl	8003eba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001430:	203b      	movs	r0, #59	; 0x3b
 8001432:	f002 fd5e 	bl	8003ef2 <HAL_NVIC_EnableIRQ>
>>>>>>> flight_hardware

}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800

08001460 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	; 0x28
 8001464:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
 8001474:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]
 800147a:	4b5b      	ldr	r3, [pc, #364]	; (80015e8 <MX_GPIO_Init+0x188>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a5a      	ldr	r2, [pc, #360]	; (80015e8 <MX_GPIO_Init+0x188>)
 8001480:	f043 0304 	orr.w	r3, r3, #4
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b58      	ldr	r3, [pc, #352]	; (80015e8 <MX_GPIO_Init+0x188>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0304 	and.w	r3, r3, #4
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	4b54      	ldr	r3, [pc, #336]	; (80015e8 <MX_GPIO_Init+0x188>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a53      	ldr	r2, [pc, #332]	; (80015e8 <MX_GPIO_Init+0x188>)
 800149c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b51      	ldr	r3, [pc, #324]	; (80015e8 <MX_GPIO_Init+0x188>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	4b4d      	ldr	r3, [pc, #308]	; (80015e8 <MX_GPIO_Init+0x188>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a4c      	ldr	r2, [pc, #304]	; (80015e8 <MX_GPIO_Init+0x188>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b4a      	ldr	r3, [pc, #296]	; (80015e8 <MX_GPIO_Init+0x188>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	607b      	str	r3, [r7, #4]
 80014ce:	4b46      	ldr	r3, [pc, #280]	; (80015e8 <MX_GPIO_Init+0x188>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a45      	ldr	r2, [pc, #276]	; (80015e8 <MX_GPIO_Init+0x188>)
 80014d4:	f043 0302 	orr.w	r3, r3, #2
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b43      	ldr	r3, [pc, #268]	; (80015e8 <MX_GPIO_Init+0x188>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	603b      	str	r3, [r7, #0]
 80014ea:	4b3f      	ldr	r3, [pc, #252]	; (80015e8 <MX_GPIO_Init+0x188>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a3e      	ldr	r2, [pc, #248]	; (80015e8 <MX_GPIO_Init+0x188>)
 80014f0:	f043 0308 	orr.w	r3, r3, #8
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b3c      	ldr	r3, [pc, #240]	; (80015e8 <MX_GPIO_Init+0x188>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	603b      	str	r3, [r7, #0]
 8001500:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI2_WP_Pin|SPI2_CS_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
<<<<<<< HEAD
 8001502:	2200      	movs	r2, #0
 8001504:	2113      	movs	r1, #19
 8001506:	4839      	ldr	r0, [pc, #228]	; (80015ec <MX_GPIO_Init+0x18c>)
 8001508:	f003 fb14 	bl	8004b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_WP_GPIO_Port, SPI1_WP_Pin, GPIO_PIN_RESET);
 800150c:	2200      	movs	r2, #0
 800150e:	2110      	movs	r1, #16
 8001510:	4837      	ldr	r0, [pc, #220]	; (80015f0 <MX_GPIO_Init+0x190>)
 8001512:	f003 fb0f 	bl	8004b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001516:	2200      	movs	r2, #0
 8001518:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 800151c:	4835      	ldr	r0, [pc, #212]	; (80015f4 <MX_GPIO_Init+0x194>)
 800151e:	f003 fb09 	bl	8004b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI2_WP_Pin */
  GPIO_InitStruct.Pin = SPI2_WP_Pin;
 8001522:	2301      	movs	r3, #1
=======
 80014e6:	2200      	movs	r2, #0
 80014e8:	2113      	movs	r1, #19
 80014ea:	4839      	ldr	r0, [pc, #228]	; (80015d0 <MX_GPIO_Init+0x18c>)
 80014ec:	f003 fae2 	bl	8004ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_WP_GPIO_Port, SPI1_WP_Pin, GPIO_PIN_RESET);
 80014f0:	2200      	movs	r2, #0
 80014f2:	2110      	movs	r1, #16
 80014f4:	4837      	ldr	r0, [pc, #220]	; (80015d4 <MX_GPIO_Init+0x190>)
 80014f6:	f003 fadd 	bl	8004ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 80014fa:	2200      	movs	r2, #0
 80014fc:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001500:	4835      	ldr	r0, [pc, #212]	; (80015d8 <MX_GPIO_Init+0x194>)
 8001502:	f003 fad7 	bl	8004ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI2_WP_Pin */
  GPIO_InitStruct.Pin = SPI2_WP_Pin;
 8001506:	2301      	movs	r3, #1
 8001508:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150a:	2301      	movs	r3, #1
 800150c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800150e:	2301      	movs	r3, #1
 8001510:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2300      	movs	r3, #0
 8001514:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_WP_GPIO_Port, &GPIO_InitStruct);
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	4619      	mov	r1, r3
 800151c:	482c      	ldr	r0, [pc, #176]	; (80015d0 <MX_GPIO_Init+0x18c>)
 800151e:	f003 f905 	bl	800472c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_CS_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin|SPI1_CS_Pin;
 8001522:	2312      	movs	r3, #18
>>>>>>> flight_hardware
 8001524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001526:	2301      	movs	r3, #1
 8001528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800152a:	2301      	movs	r3, #1
 800152c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152e:	2300      	movs	r3, #0
 8001530:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_WP_GPIO_Port, &GPIO_InitStruct);
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	4619      	mov	r1, r3
<<<<<<< HEAD
 8001538:	482c      	ldr	r0, [pc, #176]	; (80015ec <MX_GPIO_Init+0x18c>)
 800153a:	f003 f937 	bl	80047ac <HAL_GPIO_Init>
=======
 8001538:	4825      	ldr	r0, [pc, #148]	; (80015d0 <MX_GPIO_Init+0x18c>)
 800153a:	f003 f8f7 	bl	800472c <HAL_GPIO_Init>
>>>>>>> flight_hardware

  /*Configure GPIO pins : SPI2_CS_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin|SPI1_CS_Pin;
 800153e:	2312      	movs	r3, #18
 8001540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001542:	2301      	movs	r3, #1
 8001544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154a:	2300      	movs	r3, #0
 800154c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	4619      	mov	r1, r3
<<<<<<< HEAD
 8001554:	4825      	ldr	r0, [pc, #148]	; (80015ec <MX_GPIO_Init+0x18c>)
 8001556:	f003 f929 	bl	80047ac <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_WP_Pin */
  GPIO_InitStruct.Pin = SPI1_WP_Pin;
 800155a:	2310      	movs	r3, #16
 800155c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155e:	2301      	movs	r3, #1
 8001560:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001562:	2301      	movs	r3, #1
 8001564:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001566:	2300      	movs	r3, #0
 8001568:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_WP_GPIO_Port, &GPIO_InitStruct);
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	4619      	mov	r1, r3
 8001570:	481f      	ldr	r0, [pc, #124]	; (80015f0 <MX_GPIO_Init+0x190>)
 8001572:	f003 f91b 	bl	80047ac <HAL_GPIO_Init>

  /*Configure GPIO pin : Flight_JMP_Pin */
  GPIO_InitStruct.Pin = Flight_JMP_Pin;
 8001576:	2302      	movs	r3, #2
=======
 8001554:	481f      	ldr	r0, [pc, #124]	; (80015d4 <MX_GPIO_Init+0x190>)
 8001556:	f003 f8e9 	bl	800472c <HAL_GPIO_Init>

  /*Configure GPIO pin : Flight_JMP_Pin */
  GPIO_InitStruct.Pin = Flight_JMP_Pin;
 800155a:	2302      	movs	r3, #2
 800155c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800155e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Flight_JMP_GPIO_Port, &GPIO_InitStruct);
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	4619      	mov	r1, r3
 800156e:	481a      	ldr	r0, [pc, #104]	; (80015d8 <MX_GPIO_Init+0x194>)
 8001570:	f003 f8dc 	bl	800472c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8001574:	f44f 4381 	mov.w	r3, #16512	; 0x4080
>>>>>>> flight_hardware
 8001578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800157a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800157e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Flight_JMP_GPIO_Port, &GPIO_InitStruct);
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	4619      	mov	r1, r3
 800158a:	481a      	ldr	r0, [pc, #104]	; (80015f4 <MX_GPIO_Init+0x194>)
 800158c:	f003 f90e 	bl	80047ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED1_Pin|LED2_Pin;
 8001590:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001596:	2301      	movs	r3, #1
 8001598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800159a:	2302      	movs	r3, #2
 800159c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	2300      	movs	r3, #0
 80015a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
<<<<<<< HEAD
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	4619      	mov	r1, r3
 80015a8:	4812      	ldr	r0, [pc, #72]	; (80015f4 <MX_GPIO_Init+0x194>)
 80015aa:	f003 f8ff 	bl	80047ac <HAL_GPIO_Init>
=======
 8001586:	f107 0314 	add.w	r3, r7, #20
 800158a:	4619      	mov	r1, r3
 800158c:	4812      	ldr	r0, [pc, #72]	; (80015d8 <MX_GPIO_Init+0x194>)
 800158e:	f003 f8cd 	bl	800472c <HAL_GPIO_Init>
>>>>>>> flight_hardware

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80015ae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80015b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015bc:	2303      	movs	r3, #3
 80015be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80015c0:	2309      	movs	r3, #9
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
<<<<<<< HEAD
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	4619      	mov	r1, r3
 80015ca:	4809      	ldr	r0, [pc, #36]	; (80015f0 <MX_GPIO_Init+0x190>)
 80015cc:	f003 f8ee 	bl	80047ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80015d0:	2200      	movs	r2, #0
 80015d2:	2100      	movs	r1, #0
 80015d4:	2007      	movs	r0, #7
 80015d6:	f002 fcb0 	bl	8003f3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80015da:	2007      	movs	r0, #7
 80015dc:	f002 fcc9 	bl	8003f72 <HAL_NVIC_EnableIRQ>
=======
 80015a8:	f107 0314 	add.w	r3, r7, #20
 80015ac:	4619      	mov	r1, r3
 80015ae:	4809      	ldr	r0, [pc, #36]	; (80015d4 <MX_GPIO_Init+0x190>)
 80015b0:	f003 f8bc 	bl	800472c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80015b4:	2200      	movs	r2, #0
 80015b6:	2100      	movs	r1, #0
 80015b8:	2007      	movs	r0, #7
 80015ba:	f002 fc7e 	bl	8003eba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80015be:	2007      	movs	r0, #7
 80015c0:	f002 fc97 	bl	8003ef2 <HAL_NVIC_EnableIRQ>
>>>>>>> flight_hardware

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015e0:	bf00      	nop
 80015e2:	3728      	adds	r7, #40	; 0x28
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40020800 	.word	0x40020800
 80015f0:	40020000 	.word	0x40020000
 80015f4:	40020400 	.word	0x40020400

080015f8 <clean_data_buffer>:

/* USER CODE BEGIN 4 */
void clean_data_buffer(uint16_t array_size, uint8_t data_array[array_size]) {
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	6039      	str	r1, [r7, #0]
 8001602:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < array_size; ++i) {
 8001604:	2300      	movs	r3, #0
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	e007      	b.n	800161a <clean_data_buffer+0x22>
    	data_array[i] = 0xFF;  // Initialize each element to 0xFF
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	4413      	add	r3, r2
 8001610:	22ff      	movs	r2, #255	; 0xff
 8001612:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < array_size; ++i) {
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	3301      	adds	r3, #1
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	88fb      	ldrh	r3, [r7, #6]
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	429a      	cmp	r2, r3
 8001620:	dbf3      	blt.n	800160a <clean_data_buffer+0x12>
    }
}
 8001622:	bf00      	nop
 8001624:	bf00      	nop
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <systemInit>:

void systemInit() {
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
	i2c_accel = &hi2c3;
 8001636:	4b67      	ldr	r3, [pc, #412]	; (80017d4 <systemInit+0x1a4>)
 8001638:	4a67      	ldr	r2, [pc, #412]	; (80017d8 <systemInit+0x1a8>)
 800163a:	601a      	str	r2, [r3, #0]
	i2c_bme280 = &hi2c1;
 800163c:	4b67      	ldr	r3, [pc, #412]	; (80017dc <systemInit+0x1ac>)
 800163e:	4a68      	ldr	r2, [pc, #416]	; (80017e0 <systemInit+0x1b0>)
 8001640:	601a      	str	r2, [r3, #0]

	configureCAN();
 8001642:	f000 fb6f 	bl	8001d24 <configureCAN>
	CAN_TxMailbox = 0;
 8001646:	4b67      	ldr	r3, [pc, #412]	; (80017e4 <systemInit+0x1b4>)
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
	CAN_First_Msg = FLAG_RESET;
 800164c:	4b66      	ldr	r3, [pc, #408]	; (80017e8 <systemInit+0x1b8>)
 800164e:	2200      	movs	r2, #0
 8001650:	701a      	strb	r2, [r3, #0]
	clean_data_buffer(8, CAN_RxData);
 8001652:	4966      	ldr	r1, [pc, #408]	; (80017ec <systemInit+0x1bc>)
 8001654:	2008      	movs	r0, #8
 8001656:	f7ff ffcf 	bl	80015f8 <clean_data_buffer>

	gpio_set_config();
 800165a:	f000 f901 	bl	8001860 <gpio_set_config>
	HAL_GPIO_WritePin(led_orange.GPIOx, led_orange.GPIO_Pin, GPIO_PIN_RESET);	// Turn LED off
<<<<<<< HEAD
 800165e:	4b64      	ldr	r3, [pc, #400]	; (80017f0 <systemInit+0x1c0>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a63      	ldr	r2, [pc, #396]	; (80017f0 <systemInit+0x1c0>)
 8001664:	8891      	ldrh	r1, [r2, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	4618      	mov	r0, r3
 800166a:	f003 fa63 	bl	8004b34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(status_led.GPIOx, status_led.GPIO_Pin, GPIO_PIN_RESET);	// Turn LED off
 800166e:	4b61      	ldr	r3, [pc, #388]	; (80017f4 <systemInit+0x1c4>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a60      	ldr	r2, [pc, #384]	; (80017f4 <systemInit+0x1c4>)
 8001674:	8891      	ldrh	r1, [r2, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	4618      	mov	r0, r3
 800167a:	f003 fa5b 	bl	8004b34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(cs_spi1.GPIOx, cs_spi1.GPIO_Pin, GPIO_PIN_SET);		// SET SPI CS High to disable bus 1
 800167e:	4b5e      	ldr	r3, [pc, #376]	; (80017f8 <systemInit+0x1c8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a5d      	ldr	r2, [pc, #372]	; (80017f8 <systemInit+0x1c8>)
 8001684:	8891      	ldrh	r1, [r2, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	4618      	mov	r0, r3
 800168a:	f003 fa53 	bl	8004b34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(cs_spi2.GPIOx, cs_spi2.GPIO_Pin, GPIO_PIN_SET);		// SET SPI CS High to disable bus 2
 800168e:	4b5b      	ldr	r3, [pc, #364]	; (80017fc <systemInit+0x1cc>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a5a      	ldr	r2, [pc, #360]	; (80017fc <systemInit+0x1cc>)
 8001694:	8891      	ldrh	r1, [r2, #4]
 8001696:	2201      	movs	r2, #1
 8001698:	4618      	mov	r0, r3
 800169a:	f003 fa4b 	bl	8004b34 <HAL_GPIO_WritePin>
=======
 8001642:	4b64      	ldr	r3, [pc, #400]	; (80017d4 <systemInit+0x1c0>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a63      	ldr	r2, [pc, #396]	; (80017d4 <systemInit+0x1c0>)
 8001648:	8891      	ldrh	r1, [r2, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	4618      	mov	r0, r3
 800164e:	f003 fa31 	bl	8004ab4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(status_led.GPIOx, status_led.GPIO_Pin, GPIO_PIN_RESET);	// Turn LED off
 8001652:	4b61      	ldr	r3, [pc, #388]	; (80017d8 <systemInit+0x1c4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a60      	ldr	r2, [pc, #384]	; (80017d8 <systemInit+0x1c4>)
 8001658:	8891      	ldrh	r1, [r2, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	4618      	mov	r0, r3
 800165e:	f003 fa29 	bl	8004ab4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(cs_spi1.GPIOx, cs_spi1.GPIO_Pin, GPIO_PIN_SET);		// SET SPI CS High to disable bus 1
 8001662:	4b5e      	ldr	r3, [pc, #376]	; (80017dc <systemInit+0x1c8>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a5d      	ldr	r2, [pc, #372]	; (80017dc <systemInit+0x1c8>)
 8001668:	8891      	ldrh	r1, [r2, #4]
 800166a:	2201      	movs	r2, #1
 800166c:	4618      	mov	r0, r3
 800166e:	f003 fa21 	bl	8004ab4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(cs_spi2.GPIOx, cs_spi2.GPIO_Pin, GPIO_PIN_SET);		// SET SPI CS High to disable bus 2
 8001672:	4b5b      	ldr	r3, [pc, #364]	; (80017e0 <systemInit+0x1cc>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a5a      	ldr	r2, [pc, #360]	; (80017e0 <systemInit+0x1cc>)
 8001678:	8891      	ldrh	r1, [r2, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	4618      	mov	r0, r3
 800167e:	f003 fa19 	bl	8004ab4 <HAL_GPIO_WritePin>
>>>>>>> flight_hardware

	// Clean the data buffer and set all values to 0xFF
	clean_data_buffer(PAGE_SIZE, data_buffer_tx[0]);
 800169e:	4958      	ldr	r1, [pc, #352]	; (8001800 <systemInit+0x1d0>)
 80016a0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80016a4:	f7ff ffa8 	bl	80015f8 <clean_data_buffer>
	clean_data_buffer(PAGE_SIZE, data_buffer_tx[1]);
 80016a8:	4956      	ldr	r1, [pc, #344]	; (8001804 <systemInit+0x1d4>)
 80016aa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80016ae:	f7ff ffa3 	bl	80015f8 <clean_data_buffer>

	for (uint8_t i = 0; i < 6; i++) {
 80016b2:	2300      	movs	r3, #0
 80016b4:	73fb      	strb	r3, [r7, #15]
 80016b6:	e00e      	b.n	80016d6 <systemInit+0xa6>
		accel_data[i] = 0x00;
 80016b8:	7bfb      	ldrb	r3, [r7, #15]
 80016ba:	4a53      	ldr	r2, [pc, #332]	; (8001808 <systemInit+0x1d8>)
 80016bc:	2100      	movs	r1, #0
 80016be:	54d1      	strb	r1, [r2, r3]
		bme280_data_0[i] = 0x00;
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
 80016c2:	4a52      	ldr	r2, [pc, #328]	; (800180c <systemInit+0x1dc>)
 80016c4:	2100      	movs	r1, #0
 80016c6:	54d1      	strb	r1, [r2, r3]
		bme280_data_1[i] = 0x00;
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
 80016ca:	4a51      	ldr	r2, [pc, #324]	; (8001810 <systemInit+0x1e0>)
 80016cc:	2100      	movs	r1, #0
 80016ce:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 6; i++) {
 80016d0:	7bfb      	ldrb	r3, [r7, #15]
 80016d2:	3301      	adds	r3, #1
 80016d4:	73fb      	strb	r3, [r7, #15]
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
 80016d8:	2b05      	cmp	r3, #5
 80016da:	d9ed      	bls.n	80016b8 <systemInit+0x88>
	}

	// Initialise the peripherals
	init_accel(i2c_accel);
 80016dc:	4b3d      	ldr	r3, [pc, #244]	; (80017d4 <systemInit+0x1a4>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe ff09 	bl	80004f8 <init_accel>
	init_bme280(i2c_bme280, 0);
 80016e6:	4b3d      	ldr	r3, [pc, #244]	; (80017dc <systemInit+0x1ac>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2100      	movs	r1, #0
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7fe ff77 	bl	80005e0 <init_bme280>
	init_bme280(i2c_bme280, 1);
 80016f2:	4b3a      	ldr	r3, [pc, #232]	; (80017dc <systemInit+0x1ac>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2101      	movs	r1, #1
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe ff71 	bl	80005e0 <init_bme280>
	software_reset(&hspi1, cs_spi1);
 80016fe:	4b3e      	ldr	r3, [pc, #248]	; (80017f8 <systemInit+0x1c8>)
 8001700:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001704:	4843      	ldr	r0, [pc, #268]	; (8001814 <systemInit+0x1e4>)
 8001706:	f7ff f941 	bl	800098c <software_reset>
	software_reset(&hspi2, cs_spi2);
 800170a:	4b3c      	ldr	r3, [pc, #240]	; (80017fc <systemInit+0x1cc>)
 800170c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001710:	4841      	ldr	r0, [pc, #260]	; (8001818 <systemInit+0x1e8>)
 8001712:	f7ff f93b 	bl	800098c <software_reset>

	int next_blank_page0 = find_next_blank_page(&hspi1, &end_of_flash, cs_spi1);
 8001716:	4b38      	ldr	r3, [pc, #224]	; (80017f8 <systemInit+0x1c8>)
 8001718:	cb0c      	ldmia	r3, {r2, r3}
 800171a:	4940      	ldr	r1, [pc, #256]	; (800181c <systemInit+0x1ec>)
 800171c:	483d      	ldr	r0, [pc, #244]	; (8001814 <systemInit+0x1e4>)
 800171e:	f7ff f987 	bl	8000a30 <find_next_blank_page>
 8001722:	4603      	mov	r3, r0
 8001724:	60bb      	str	r3, [r7, #8]
	int next_blank_page1 = find_next_blank_page(&hspi2, &end_of_flash, cs_spi2);
 8001726:	4b35      	ldr	r3, [pc, #212]	; (80017fc <systemInit+0x1cc>)
 8001728:	cb0c      	ldmia	r3, {r2, r3}
 800172a:	493c      	ldr	r1, [pc, #240]	; (800181c <systemInit+0x1ec>)
 800172c:	483a      	ldr	r0, [pc, #232]	; (8001818 <systemInit+0x1e8>)
 800172e:	f7ff f97f 	bl	8000a30 <find_next_blank_page>
 8001732:	4603      	mov	r3, r0
 8001734:	607b      	str	r3, [r7, #4]

	// Assign the value of next_blank_page to the larger of next_blank_page0 and next_blank_page1
	next_blank_page = (next_blank_page0 > next_blank_page1) ? next_blank_page0 : next_blank_page1;
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	4293      	cmp	r3, r2
 800173c:	bfb8      	it	lt
 800173e:	4613      	movlt	r3, r2
 8001740:	461a      	mov	r2, r3
 8001742:	4b37      	ldr	r3, [pc, #220]	; (8001820 <systemInit+0x1f0>)
 8001744:	601a      	str	r2, [r3, #0]

	buffer_ref = 0;
 8001746:	4b37      	ldr	r3, [pc, #220]	; (8001824 <systemInit+0x1f4>)
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
	byte_tracker = 0;
 800174c:	4b36      	ldr	r3, [pc, #216]	; (8001828 <systemInit+0x1f8>)
 800174e:	2200      	movs	r2, #0
 8001750:	801a      	strh	r2, [r3, #0]
	end_of_flash = FLAG_RESET;
 8001752:	4b32      	ldr	r3, [pc, #200]	; (800181c <systemInit+0x1ec>)
 8001754:	2200      	movs	r2, #0
 8001756:	701a      	strb	r2, [r3, #0]
	uart2_rec_flag = FLAG_RESET;
 8001758:	4b34      	ldr	r3, [pc, #208]	; (800182c <systemInit+0x1fc>)
 800175a:	2200      	movs	r2, #0
 800175c:	701a      	strb	r2, [r3, #0]
	CAN_RX_Flag = FLAG_RESET;
 800175e:	4b34      	ldr	r3, [pc, #208]	; (8001830 <systemInit+0x200>)
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
	tim6_overflow_flag = FLAG_RESET;
 8001764:	4b33      	ldr	r3, [pc, #204]	; (8001834 <systemInit+0x204>)
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]
	tim7_overflow_flag = FLAG_RESET;
 800176a:	4b33      	ldr	r3, [pc, #204]	; (8001838 <systemInit+0x208>)
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]
	flight_state = GROUND;
 8001770:	4b32      	ldr	r3, [pc, #200]	; (800183c <systemInit+0x20c>)
 8001772:	2200      	movs	r2, #0
 8001774:	701a      	strb	r2, [r3, #0]
	rtc_reset = FLAG_RESET;
 8001776:	4b32      	ldr	r3, [pc, #200]	; (8001840 <systemInit+0x210>)
 8001778:	2200      	movs	r2, #0
 800177a:	701a      	strb	r2, [r3, #0]

	sysStatus = systemStatus(&hspi1, &hspi2, i2c_bme280, i2c_accel);
 800177c:	4b17      	ldr	r3, [pc, #92]	; (80017dc <systemInit+0x1ac>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <systemInit+0x1a4>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4924      	ldr	r1, [pc, #144]	; (8001818 <systemInit+0x1e8>)
 8001786:	4823      	ldr	r0, [pc, #140]	; (8001814 <systemInit+0x1e4>)
 8001788:	f000 faf6 	bl	8001d78 <systemStatus>
 800178c:	4603      	mov	r3, r0
 800178e:	461a      	mov	r2, r3
 8001790:	4b2c      	ldr	r3, [pc, #176]	; (8001844 <systemInit+0x214>)
 8001792:	701a      	strb	r2, [r3, #0]

	send_uart_hex(&huart2, sysStatus);
<<<<<<< HEAD
 8001794:	4b2b      	ldr	r3, [pc, #172]	; (8001844 <systemInit+0x214>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	4619      	mov	r1, r3
 800179a:	482b      	ldr	r0, [pc, #172]	; (8001848 <systemInit+0x218>)
 800179c:	f001 fbb5 	bl	8002f0a <send_uart_hex>

	// Initiate clocks, interrupts, CAN and DMA
	HAL_UART_Receive_IT(&huart2, UARTRxData, 2);
 80017a0:	2202      	movs	r2, #2
 80017a2:	492a      	ldr	r1, [pc, #168]	; (800184c <systemInit+0x21c>)
 80017a4:	4828      	ldr	r0, [pc, #160]	; (8001848 <systemInit+0x218>)
 80017a6:	f006 feea 	bl	800857e <HAL_UART_Receive_IT>
	HAL_CAN_Start(&hcan2);
 80017aa:	4829      	ldr	r0, [pc, #164]	; (8001850 <systemInit+0x220>)
 80017ac:	f001 fe5e 	bl	800346c <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 80017b0:	2102      	movs	r1, #2
 80017b2:	4827      	ldr	r0, [pc, #156]	; (8001850 <systemInit+0x220>)
 80017b4:	f002 f890 	bl	80038d8 <HAL_CAN_ActivateNotification>
=======
 8001778:	4b2b      	ldr	r3, [pc, #172]	; (8001828 <systemInit+0x214>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	4619      	mov	r1, r3
 800177e:	482b      	ldr	r0, [pc, #172]	; (800182c <systemInit+0x218>)
 8001780:	f001 fb83 	bl	8002e8a <send_uart_hex>

	// Initiate clocks, interrupts, CAN and DMA
	HAL_UART_Receive_IT(&huart2, UARTRxData, 2);
 8001784:	2202      	movs	r2, #2
 8001786:	492a      	ldr	r1, [pc, #168]	; (8001830 <systemInit+0x21c>)
 8001788:	4828      	ldr	r0, [pc, #160]	; (800182c <systemInit+0x218>)
 800178a:	f006 feb8 	bl	80084fe <HAL_UART_Receive_IT>
	HAL_CAN_Start(&hcan2);
 800178e:	4829      	ldr	r0, [pc, #164]	; (8001834 <systemInit+0x220>)
 8001790:	f001 fe2c 	bl	80033ec <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001794:	2102      	movs	r1, #2
 8001796:	4827      	ldr	r0, [pc, #156]	; (8001834 <systemInit+0x220>)
 8001798:	f002 f85e 	bl	8003858 <HAL_CAN_ActivateNotification>
>>>>>>> flight_hardware
	initialise_rtc_default(&hrtc);
 80017b8:	4826      	ldr	r0, [pc, #152]	; (8001854 <systemInit+0x224>)
 80017ba:	f000 fe27 	bl	800240c <initialise_rtc_default>
	HAL_TIM_Base_Start_IT(&htim6);
<<<<<<< HEAD
 80017be:	4826      	ldr	r0, [pc, #152]	; (8001858 <systemInit+0x228>)
 80017c0:	f006 fb34 	bl	8007e2c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 80017c4:	4825      	ldr	r0, [pc, #148]	; (800185c <systemInit+0x22c>)
 80017c6:	f006 fb31 	bl	8007e2c <HAL_TIM_Base_Start_IT>
=======
 80017a2:	4826      	ldr	r0, [pc, #152]	; (800183c <systemInit+0x228>)
 80017a4:	f006 fb02 	bl	8007dac <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 80017a8:	4825      	ldr	r0, [pc, #148]	; (8001840 <systemInit+0x22c>)
 80017aa:	f006 faff 	bl	8007dac <HAL_TIM_Base_Start_IT>
>>>>>>> flight_hardware
}
 80017ca:	bf00      	nop
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000380 	.word	0x20000380
 80017d8:	200000c4 	.word	0x200000c4
 80017dc:	20000384 	.word	0x20000384
 80017e0:	20000070 	.word	0x20000070
 80017e4:	2000038c 	.word	0x2000038c
 80017e8:	200003b5 	.word	0x200003b5
 80017ec:	200003ac 	.word	0x200003ac
 80017f0:	200005dc 	.word	0x200005dc
 80017f4:	200005ec 	.word	0x200005ec
 80017f8:	200005f4 	.word	0x200005f4
 80017fc:	20000604 	.word	0x20000604
 8001800:	200003b8 	.word	0x200003b8
 8001804:	200004b8 	.word	0x200004b8
 8001808:	200005bc 	.word	0x200005bc
 800180c:	200005c4 	.word	0x200005c4
 8001810:	200005cc 	.word	0x200005cc
 8001814:	20000138 	.word	0x20000138
 8001818:	20000190 	.word	0x20000190
 800181c:	200005da 	.word	0x200005da
 8001820:	200005d4 	.word	0x200005d4
 8001824:	200005d2 	.word	0x200005d2
 8001828:	200005d8 	.word	0x200005d8
 800182c:	2000038a 	.word	0x2000038a
 8001830:	200003b4 	.word	0x200003b4
 8001834:	200003b6 	.word	0x200003b6
 8001838:	200003b7 	.word	0x200003b7
 800183c:	2000061e 	.word	0x2000061e
 8001840:	2000061c 	.word	0x2000061c
 8001844:	2000061d 	.word	0x2000061d
 8001848:	20000338 	.word	0x20000338
 800184c:	20000388 	.word	0x20000388
 8001850:	20000048 	.word	0x20000048
 8001854:	20000118 	.word	0x20000118
 8001858:	200002a8 	.word	0x200002a8
 800185c:	200002f0 	.word	0x200002f0

08001860 <gpio_set_config>:

void gpio_set_config() {
 8001860:	b590      	push	{r4, r7, lr}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
	// Set LED gpio
	led_orange = create_GPIO_Config(GPIOB, GPIO_PIN_14);	// Orange LED (Heartbeat LED)
 8001866:	4c37      	ldr	r4, [pc, #220]	; (8001944 <gpio_set_config+0xe4>)
 8001868:	463b      	mov	r3, r7
 800186a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800186e:	4936      	ldr	r1, [pc, #216]	; (8001948 <gpio_set_config+0xe8>)
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff f9bd 	bl	8000bf0 <create_GPIO_Config>
 8001876:	4622      	mov	r2, r4
 8001878:	463b      	mov	r3, r7
 800187a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800187e:	e882 0003 	stmia.w	r2, {r0, r1}
	led_green = create_GPIO_Config(GPIOB, GPIO_PIN_13);		// Green LED (Hard Drive LED)
 8001882:	4c32      	ldr	r4, [pc, #200]	; (800194c <gpio_set_config+0xec>)
 8001884:	463b      	mov	r3, r7
 8001886:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800188a:	492f      	ldr	r1, [pc, #188]	; (8001948 <gpio_set_config+0xe8>)
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff f9af 	bl	8000bf0 <create_GPIO_Config>
 8001892:	4622      	mov	r2, r4
 8001894:	463b      	mov	r3, r7
 8001896:	e893 0003 	ldmia.w	r3, {r0, r1}
 800189a:	e882 0003 	stmia.w	r2, {r0, r1}
	status_led = create_GPIO_Config(GPIOB, GPIO_PIN_12);	// Status LED
 800189e:	4c2c      	ldr	r4, [pc, #176]	; (8001950 <gpio_set_config+0xf0>)
 80018a0:	463b      	mov	r3, r7
 80018a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018a6:	4928      	ldr	r1, [pc, #160]	; (8001948 <gpio_set_config+0xe8>)
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff f9a1 	bl	8000bf0 <create_GPIO_Config>
 80018ae:	4622      	mov	r2, r4
 80018b0:	463b      	mov	r3, r7
 80018b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018b6:	e882 0003 	stmia.w	r2, {r0, r1}

	// SPI Flash 0 CS and WP
	cs_spi1 = create_GPIO_Config(GPIOC, GPIO_PIN_4);		// Change for SRAD
 80018ba:	4c26      	ldr	r4, [pc, #152]	; (8001954 <gpio_set_config+0xf4>)
 80018bc:	463b      	mov	r3, r7
 80018be:	2210      	movs	r2, #16
 80018c0:	4925      	ldr	r1, [pc, #148]	; (8001958 <gpio_set_config+0xf8>)
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff f994 	bl	8000bf0 <create_GPIO_Config>
 80018c8:	4622      	mov	r2, r4
 80018ca:	463b      	mov	r3, r7
 80018cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018d0:	e882 0003 	stmia.w	r2, {r0, r1}
	wp_spi1 = create_GPIO_Config(GPIOA, GPIO_PIN_4);
 80018d4:	4c21      	ldr	r4, [pc, #132]	; (800195c <gpio_set_config+0xfc>)
 80018d6:	463b      	mov	r3, r7
 80018d8:	2210      	movs	r2, #16
 80018da:	4921      	ldr	r1, [pc, #132]	; (8001960 <gpio_set_config+0x100>)
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff f987 	bl	8000bf0 <create_GPIO_Config>
 80018e2:	4622      	mov	r2, r4
 80018e4:	463b      	mov	r3, r7
 80018e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018ea:	e882 0003 	stmia.w	r2, {r0, r1}

	// SPI Flash 1 CS and WP
	cs_spi2 = create_GPIO_Config(GPIOC, GPIO_PIN_1);		// Change for SRAD
 80018ee:	4c1d      	ldr	r4, [pc, #116]	; (8001964 <gpio_set_config+0x104>)
 80018f0:	463b      	mov	r3, r7
 80018f2:	2202      	movs	r2, #2
 80018f4:	4918      	ldr	r1, [pc, #96]	; (8001958 <gpio_set_config+0xf8>)
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff f97a 	bl	8000bf0 <create_GPIO_Config>
 80018fc:	4622      	mov	r2, r4
 80018fe:	463b      	mov	r3, r7
 8001900:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001904:	e882 0003 	stmia.w	r2, {r0, r1}
	wp_spi2 = create_GPIO_Config(GPIOC, GPIO_PIN_0);
 8001908:	4c17      	ldr	r4, [pc, #92]	; (8001968 <gpio_set_config+0x108>)
 800190a:	463b      	mov	r3, r7
 800190c:	2201      	movs	r2, #1
 800190e:	4912      	ldr	r1, [pc, #72]	; (8001958 <gpio_set_config+0xf8>)
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff f96d 	bl	8000bf0 <create_GPIO_Config>
 8001916:	4622      	mov	r2, r4
 8001918:	463b      	mov	r3, r7
 800191a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800191e:	e882 0003 	stmia.w	r2, {r0, r1}

	// Flight Jumper GPIO Input
	jmp_flight = create_GPIO_Config(GPIOB, GPIO_PIN_1);
 8001922:	4c12      	ldr	r4, [pc, #72]	; (800196c <gpio_set_config+0x10c>)
 8001924:	463b      	mov	r3, r7
 8001926:	2202      	movs	r2, #2
 8001928:	4907      	ldr	r1, [pc, #28]	; (8001948 <gpio_set_config+0xe8>)
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff f960 	bl	8000bf0 <create_GPIO_Config>
 8001930:	4622      	mov	r2, r4
 8001932:	463b      	mov	r3, r7
 8001934:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001938:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	bd90      	pop	{r4, r7, pc}
 8001944:	200005dc 	.word	0x200005dc
 8001948:	40020400 	.word	0x40020400
 800194c:	200005e4 	.word	0x200005e4
 8001950:	200005ec 	.word	0x200005ec
 8001954:	200005f4 	.word	0x200005f4
 8001958:	40020800 	.word	0x40020800
 800195c:	200005fc 	.word	0x200005fc
 8001960:	40020000 	.word	0x40020000
 8001964:	20000604 	.word	0x20000604
 8001968:	2000060c 	.word	0x2000060c
 800196c:	20000614 	.word	0x20000614

08001970 <handleCAN>:

void handleCAN() {
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af02      	add	r7, sp, #8
	// Process "clock-sync". Change flight-state to "rocket_loaded"
	if(CAN_RxHeader.StdId == CLK_SYNC_ID) {
 8001976:	4b2a      	ldr	r3, [pc, #168]	; (8001a20 <handleCAN+0xb0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800197e:	4293      	cmp	r3, r2
 8001980:	d10e      	bne.n	80019a0 <handleCAN+0x30>
		flight_state = LOADED;
 8001982:	4b28      	ldr	r3, [pc, #160]	; (8001a24 <handleCAN+0xb4>)
 8001984:	2201      	movs	r2, #1
 8001986:	701a      	strb	r2, [r3, #0]
		uint8_t TxData[1] = {0x00};
 8001988:	2300      	movs	r3, #0
 800198a:	713b      	strb	r3, [r7, #4]
		sendCAN_TxMessage(&hcan2, 1, TxData, &CAN_TxMailbox, CLK_SYNC_ID);
 800198c:	1d3a      	adds	r2, r7, #4
 800198e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	4b24      	ldr	r3, [pc, #144]	; (8001a28 <handleCAN+0xb8>)
 8001996:	2101      	movs	r1, #1
 8001998:	4824      	ldr	r0, [pc, #144]	; (8001a2c <handleCAN+0xbc>)
 800199a:	f7fe ff37 	bl	800080c <sendCAN_TxMessage>

	// Transmit values from accelerometer
	else if(CAN_RxHeader.StdId == DUMMY_ID) {
		send_uart_hex(&huart2, sysStatus);
	}
}
 800199e:	e03a      	b.n	8001a16 <handleCAN+0xa6>
	else if(CAN_RxHeader.StdId == TX_BME280_0) {
 80019a0:	4b1f      	ldr	r3, [pc, #124]	; (8001a20 <handleCAN+0xb0>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f240 5201 	movw	r2, #1281	; 0x501
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d109      	bne.n	80019c0 <handleCAN+0x50>
		sendCAN_TxMessage(&hcan2, 6, bme280_data_0, &CAN_TxMailbox, TX_BME280_0);
 80019ac:	f240 5301 	movw	r3, #1281	; 0x501
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	4b1d      	ldr	r3, [pc, #116]	; (8001a28 <handleCAN+0xb8>)
 80019b4:	4a1e      	ldr	r2, [pc, #120]	; (8001a30 <handleCAN+0xc0>)
 80019b6:	2106      	movs	r1, #6
 80019b8:	481c      	ldr	r0, [pc, #112]	; (8001a2c <handleCAN+0xbc>)
 80019ba:	f7fe ff27 	bl	800080c <sendCAN_TxMessage>
}
 80019be:	e02a      	b.n	8001a16 <handleCAN+0xa6>
	else if(CAN_RxHeader.StdId == TX_BME280_1) {
 80019c0:	4b17      	ldr	r3, [pc, #92]	; (8001a20 <handleCAN+0xb0>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f240 5202 	movw	r2, #1282	; 0x502
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d109      	bne.n	80019e0 <handleCAN+0x70>
		sendCAN_TxMessage(&hcan2, 6, bme280_data_1, &CAN_TxMailbox, TX_BME280_1);
 80019cc:	f240 5302 	movw	r3, #1282	; 0x502
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <handleCAN+0xb8>)
 80019d4:	4a17      	ldr	r2, [pc, #92]	; (8001a34 <handleCAN+0xc4>)
 80019d6:	2106      	movs	r1, #6
 80019d8:	4814      	ldr	r0, [pc, #80]	; (8001a2c <handleCAN+0xbc>)
 80019da:	f7fe ff17 	bl	800080c <sendCAN_TxMessage>
}
 80019de:	e01a      	b.n	8001a16 <handleCAN+0xa6>
	else if(CAN_RxHeader.StdId == TX_ACCEL) {
 80019e0:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <handleCAN+0xb0>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f240 5203 	movw	r2, #1283	; 0x503
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d109      	bne.n	8001a00 <handleCAN+0x90>
		sendCAN_TxMessage(&hcan2, 6, accel_data, &CAN_TxMailbox, TX_ACCEL);
 80019ec:	f240 5303 	movw	r3, #1283	; 0x503
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <handleCAN+0xb8>)
 80019f4:	4a10      	ldr	r2, [pc, #64]	; (8001a38 <handleCAN+0xc8>)
 80019f6:	2106      	movs	r1, #6
 80019f8:	480c      	ldr	r0, [pc, #48]	; (8001a2c <handleCAN+0xbc>)
 80019fa:	f7fe ff07 	bl	800080c <sendCAN_TxMessage>
}
 80019fe:	e00a      	b.n	8001a16 <handleCAN+0xa6>
	else if(CAN_RxHeader.StdId == DUMMY_ID) {
 8001a00:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <handleCAN+0xb0>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001a08:	d105      	bne.n	8001a16 <handleCAN+0xa6>
		send_uart_hex(&huart2, sysStatus);
<<<<<<< HEAD
 8001a0a:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <handleCAN+0xcc>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	4619      	mov	r1, r3
 8001a10:	480b      	ldr	r0, [pc, #44]	; (8001a40 <handleCAN+0xd0>)
 8001a12:	f001 fa7a 	bl	8002f0a <send_uart_hex>
=======
 80019ce:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <handleCAN+0xcc>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	4619      	mov	r1, r3
 80019d4:	480b      	ldr	r0, [pc, #44]	; (8001a04 <handleCAN+0xd0>)
 80019d6:	f001 fa58 	bl	8002e8a <send_uart_hex>
>>>>>>> flight_hardware
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000390 	.word	0x20000390
 8001a24:	2000061e 	.word	0x2000061e
 8001a28:	2000038c 	.word	0x2000038c
 8001a2c:	20000048 	.word	0x20000048
 8001a30:	200005c4 	.word	0x200005c4
 8001a34:	200005cc 	.word	0x200005cc
 8001a38:	200005bc 	.word	0x200005bc
 8001a3c:	2000061d 	.word	0x2000061d
 8001a40:	20000338 	.word	0x20000338

08001a44 <handleUART>:

void handleUART() {
 8001a44:	b590      	push	{r4, r7, lr}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af02      	add	r7, sp, #8
	UART_HandleTypeDef *huart = &huart2;
 8001a4a:	4b8e      	ldr	r3, [pc, #568]	; (8001c84 <handleUART+0x240>)
 8001a4c:	607b      	str	r3, [r7, #4]

	// Send Heartbeat to UART (data_rx[0] = "h")
	if (UARTRxData[0] == 0x68) {
 8001a4e:	4b8e      	ldr	r3, [pc, #568]	; (8001c88 <handleUART+0x244>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b68      	cmp	r3, #104	; 0x68
 8001a54:	d109      	bne.n	8001a6a <handleUART+0x26>
		heartbeatUART(huart);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 f9e0 	bl	8001e1c <heartbeatUART>
		send_uart_hex(huart, sysStatus);
<<<<<<< HEAD
 8001a5c:	4b8b      	ldr	r3, [pc, #556]	; (8001c8c <handleUART+0x248>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	4619      	mov	r1, r3
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f001 fa51 	bl	8002f0a <send_uart_hex>
 8001a68:	e102      	b.n	8001c70 <handleUART+0x22c>
=======
 8001a20:	4b8b      	ldr	r3, [pc, #556]	; (8001c50 <handleUART+0x248>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	4619      	mov	r1, r3
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f001 fa2f 	bl	8002e8a <send_uart_hex>
 8001a2c:	e102      	b.n	8001c34 <handleUART+0x22c>
>>>>>>> flight_hardware
	}

/***************************** SPI Flash ************************************************/
	// Erase specified flash chip (data_rx[0]  = "e")
	else if (UARTRxData[0] == 0x65) {
 8001a6a:	4b87      	ldr	r3, [pc, #540]	; (8001c88 <handleUART+0x244>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b65      	cmp	r3, #101	; 0x65
 8001a70:	d11e      	bne.n	8001ab0 <handleUART+0x6c>
		if(decodeASCII(UARTRxData[1]) == 0) {
 8001a72:	4b85      	ldr	r3, [pc, #532]	; (8001c88 <handleUART+0x244>)
 8001a74:	785b      	ldrb	r3, [r3, #1]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f000 f91a 	bl	8001cb0 <decodeASCII>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d106      	bne.n	8001a90 <handleUART+0x4c>
			eraseFlashSPI(&hspi1, huart, cs_spi1);
 8001a82:	4b83      	ldr	r3, [pc, #524]	; (8001c90 <handleUART+0x24c>)
 8001a84:	cb0c      	ldmia	r3, {r2, r3}
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	4882      	ldr	r0, [pc, #520]	; (8001c94 <handleUART+0x250>)
 8001a8a:	f000 f9d3 	bl	8001e34 <eraseFlashSPI>
 8001a8e:	e0ef      	b.n	8001c70 <handleUART+0x22c>
		} else if (decodeASCII(UARTRxData[1]) == 1) {
 8001a90:	4b7d      	ldr	r3, [pc, #500]	; (8001c88 <handleUART+0x244>)
 8001a92:	785b      	ldrb	r3, [r3, #1]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f000 f90b 	bl	8001cb0 <decodeASCII>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	f040 80e7 	bne.w	8001c70 <handleUART+0x22c>
			eraseFlashSPI(&hspi2, huart, cs_spi2);
 8001aa2:	4b7d      	ldr	r3, [pc, #500]	; (8001c98 <handleUART+0x254>)
 8001aa4:	cb0c      	ldmia	r3, {r2, r3}
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	487c      	ldr	r0, [pc, #496]	; (8001c9c <handleUART+0x258>)
 8001aaa:	f000 f9c3 	bl	8001e34 <eraseFlashSPI>
 8001aae:	e0df      	b.n	8001c70 <handleUART+0x22c>
		}
	}

	// Read data from specified flash chip (data_rx[0] = "r")
	else if (UARTRxData[0] == 0x72) {
 8001ab0:	4b75      	ldr	r3, [pc, #468]	; (8001c88 <handleUART+0x244>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b72      	cmp	r3, #114	; 0x72
 8001ab6:	d11e      	bne.n	8001af6 <handleUART+0xb2>
		if(decodeASCII(UARTRxData[1]) == 0) {
 8001ab8:	4b73      	ldr	r3, [pc, #460]	; (8001c88 <handleUART+0x244>)
 8001aba:	785b      	ldrb	r3, [r3, #1]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f000 f8f7 	bl	8001cb0 <decodeASCII>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d106      	bne.n	8001ad6 <handleUART+0x92>
			readFlashToUART(&hspi1, huart, cs_spi1);
 8001ac8:	4b71      	ldr	r3, [pc, #452]	; (8001c90 <handleUART+0x24c>)
 8001aca:	cb0c      	ldmia	r3, {r2, r3}
 8001acc:	6879      	ldr	r1, [r7, #4]
 8001ace:	4871      	ldr	r0, [pc, #452]	; (8001c94 <handleUART+0x250>)
 8001ad0:	f000 f9ec 	bl	8001eac <readFlashToUART>
 8001ad4:	e0cc      	b.n	8001c70 <handleUART+0x22c>
		} else if (decodeASCII(UARTRxData[1]) == 1) {
 8001ad6:	4b6c      	ldr	r3, [pc, #432]	; (8001c88 <handleUART+0x244>)
 8001ad8:	785b      	ldrb	r3, [r3, #1]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f000 f8e8 	bl	8001cb0 <decodeASCII>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	f040 80c4 	bne.w	8001c70 <handleUART+0x22c>
			readFlashToUART(&hspi2, huart, cs_spi2);
 8001ae8:	4b6b      	ldr	r3, [pc, #428]	; (8001c98 <handleUART+0x254>)
 8001aea:	cb0c      	ldmia	r3, {r2, r3}
 8001aec:	6879      	ldr	r1, [r7, #4]
 8001aee:	486b      	ldr	r0, [pc, #428]	; (8001c9c <handleUART+0x258>)
 8001af0:	f000 f9dc 	bl	8001eac <readFlashToUART>
 8001af4:	e0bc      	b.n	8001c70 <handleUART+0x22c>
		}
	}

	// Read Manufacturer over SPI (data_rx[0] = "m")
	else if (UARTRxData[0] == 0x6d) {
 8001af6:	4b64      	ldr	r3, [pc, #400]	; (8001c88 <handleUART+0x244>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b6d      	cmp	r3, #109	; 0x6d
 8001afc:	d11e      	bne.n	8001b3c <handleUART+0xf8>
		if(decodeASCII(UARTRxData[1]) == 0) {
 8001afe:	4b62      	ldr	r3, [pc, #392]	; (8001c88 <handleUART+0x244>)
 8001b00:	785b      	ldrb	r3, [r3, #1]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 f8d4 	bl	8001cb0 <decodeASCII>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d106      	bne.n	8001b1c <handleUART+0xd8>
			readFlashManuSPI(&hspi1, huart, cs_spi1);
 8001b0e:	4b60      	ldr	r3, [pc, #384]	; (8001c90 <handleUART+0x24c>)
 8001b10:	cb0c      	ldmia	r3, {r2, r3}
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	485f      	ldr	r0, [pc, #380]	; (8001c94 <handleUART+0x250>)
 8001b16:	f000 fa35 	bl	8001f84 <readFlashManuSPI>
 8001b1a:	e0a9      	b.n	8001c70 <handleUART+0x22c>
		} else if (decodeASCII(UARTRxData[1]) == 1) {
 8001b1c:	4b5a      	ldr	r3, [pc, #360]	; (8001c88 <handleUART+0x244>)
 8001b1e:	785b      	ldrb	r3, [r3, #1]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f000 f8c5 	bl	8001cb0 <decodeASCII>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	f040 80a1 	bne.w	8001c70 <handleUART+0x22c>
			readFlashManuSPI(&hspi2, huart, cs_spi2);
 8001b2e:	4b5a      	ldr	r3, [pc, #360]	; (8001c98 <handleUART+0x254>)
 8001b30:	cb0c      	ldmia	r3, {r2, r3}
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	4859      	ldr	r0, [pc, #356]	; (8001c9c <handleUART+0x258>)
 8001b36:	f000 fa25 	bl	8001f84 <readFlashManuSPI>
 8001b3a:	e099      	b.n	8001c70 <handleUART+0x22c>
		}
	}

	// Write a page over SPI (data_rx[0] = "w")
	else if (UARTRxData[0] == 0x77) {
 8001b3c:	4b52      	ldr	r3, [pc, #328]	; (8001c88 <handleUART+0x244>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b77      	cmp	r3, #119	; 0x77
 8001b42:	d11d      	bne.n	8001b80 <handleUART+0x13c>
		if(decodeASCII(UARTRxData[1]) == 0) {
 8001b44:	4b50      	ldr	r3, [pc, #320]	; (8001c88 <handleUART+0x244>)
 8001b46:	785b      	ldrb	r3, [r3, #1]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f000 f8b1 	bl	8001cb0 <decodeASCII>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d106      	bne.n	8001b62 <handleUART+0x11e>
			writePageSPI_W(&hspi1, huart, cs_spi1);
 8001b54:	4b4e      	ldr	r3, [pc, #312]	; (8001c90 <handleUART+0x24c>)
 8001b56:	cb0c      	ldmia	r3, {r2, r3}
 8001b58:	6879      	ldr	r1, [r7, #4]
 8001b5a:	484e      	ldr	r0, [pc, #312]	; (8001c94 <handleUART+0x250>)
 8001b5c:	f000 fa32 	bl	8001fc4 <writePageSPI_W>
 8001b60:	e086      	b.n	8001c70 <handleUART+0x22c>
		} else if (decodeASCII(UARTRxData[1]) == 1) {
 8001b62:	4b49      	ldr	r3, [pc, #292]	; (8001c88 <handleUART+0x244>)
 8001b64:	785b      	ldrb	r3, [r3, #1]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f000 f8a2 	bl	8001cb0 <decodeASCII>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d17e      	bne.n	8001c70 <handleUART+0x22c>
			writePageSPI_W(&hspi2, huart, cs_spi2);
 8001b72:	4b49      	ldr	r3, [pc, #292]	; (8001c98 <handleUART+0x254>)
 8001b74:	cb0c      	ldmia	r3, {r2, r3}
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	4848      	ldr	r0, [pc, #288]	; (8001c9c <handleUART+0x258>)
 8001b7a:	f000 fa23 	bl	8001fc4 <writePageSPI_W>
 8001b7e:	e077      	b.n	8001c70 <handleUART+0x22c>
		}
	}

	// Software reset flash chip over SPI (data_rx[0] = "x")
	else if (UARTRxData[0] == 0x78) {
 8001b80:	4b41      	ldr	r3, [pc, #260]	; (8001c88 <handleUART+0x244>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b78      	cmp	r3, #120	; 0x78
 8001b86:	d11d      	bne.n	8001bc4 <handleUART+0x180>
		if(decodeASCII(UARTRxData[1]) == 0) {
 8001b88:	4b3f      	ldr	r3, [pc, #252]	; (8001c88 <handleUART+0x244>)
 8001b8a:	785b      	ldrb	r3, [r3, #1]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f000 f88f 	bl	8001cb0 <decodeASCII>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d106      	bne.n	8001ba6 <handleUART+0x162>
			resetSPIFlash(&hspi1, huart, cs_spi1);
 8001b98:	4b3d      	ldr	r3, [pc, #244]	; (8001c90 <handleUART+0x24c>)
 8001b9a:	cb0c      	ldmia	r3, {r2, r3}
 8001b9c:	6879      	ldr	r1, [r7, #4]
 8001b9e:	483d      	ldr	r0, [pc, #244]	; (8001c94 <handleUART+0x250>)
 8001ba0:	f000 fa64 	bl	800206c <resetSPIFlash>
 8001ba4:	e064      	b.n	8001c70 <handleUART+0x22c>
		} else if (decodeASCII(UARTRxData[1]) == 1) {
 8001ba6:	4b38      	ldr	r3, [pc, #224]	; (8001c88 <handleUART+0x244>)
 8001ba8:	785b      	ldrb	r3, [r3, #1]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f000 f880 	bl	8001cb0 <decodeASCII>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d15c      	bne.n	8001c70 <handleUART+0x22c>
			resetSPIFlash(&hspi2, huart, cs_spi2);
 8001bb6:	4b38      	ldr	r3, [pc, #224]	; (8001c98 <handleUART+0x254>)
 8001bb8:	cb0c      	ldmia	r3, {r2, r3}
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	4837      	ldr	r0, [pc, #220]	; (8001c9c <handleUART+0x258>)
 8001bbe:	f000 fa55 	bl	800206c <resetSPIFlash>
 8001bc2:	e055      	b.n	8001c70 <handleUART+0x22c>
		}
	}

/*********************************** I2C Accelerometer ***********************************/
	// Read Accelerometer WhoAmI (data_rx[0] = "c")
	else if (UARTRxData[0] == 0x63) {
 8001bc4:	4b30      	ldr	r3, [pc, #192]	; (8001c88 <handleUART+0x244>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b63      	cmp	r3, #99	; 0x63
 8001bca:	d106      	bne.n	8001bda <handleUART+0x196>
		checkAccelWhoAmI(i2c_accel, huart);
 8001bcc:	4b34      	ldr	r3, [pc, #208]	; (8001ca0 <handleUART+0x25c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6879      	ldr	r1, [r7, #4]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f000 fa62 	bl	800209c <checkAccelWhoAmI>
 8001bd8:	e04a      	b.n	8001c70 <handleUART+0x22c>
	}

	// Read the accelerometer and print to the UART[0] (data_rx [0] = "a")
	else if (UARTRxData[0] == 0x61) {
 8001bda:	4b2b      	ldr	r3, [pc, #172]	; (8001c88 <handleUART+0x244>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b61      	cmp	r3, #97	; 0x61
 8001be0:	d103      	bne.n	8001bea <handleUART+0x1a6>
		accelToUART(huart);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 fa6e 	bl	80020c4 <accelToUART>
 8001be8:	e042      	b.n	8001c70 <handleUART+0x22c>
	}

/********************************** I2C BME280 *******************************************/
	// Read the temp sensor ID and print to the UART[0] (data_rx [0]= "b")
	else if (UARTRxData[0] == 0x62) {
 8001bea:	4b27      	ldr	r3, [pc, #156]	; (8001c88 <handleUART+0x244>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b62      	cmp	r3, #98	; 0x62
 8001bf0:	d10d      	bne.n	8001c0e <handleUART+0x1ca>
		readTempSensorID(i2c_bme280, huart, decodeASCII(UARTRxData[1]));
 8001bf2:	4b2c      	ldr	r3, [pc, #176]	; (8001ca4 <handleUART+0x260>)
 8001bf4:	681c      	ldr	r4, [r3, #0]
 8001bf6:	4b24      	ldr	r3, [pc, #144]	; (8001c88 <handleUART+0x244>)
 8001bf8:	785b      	ldrb	r3, [r3, #1]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f000 f858 	bl	8001cb0 <decodeASCII>
 8001c00:	4603      	mov	r3, r0
 8001c02:	461a      	mov	r2, r3
 8001c04:	6879      	ldr	r1, [r7, #4]
 8001c06:	4620      	mov	r0, r4
 8001c08:	f000 fa78 	bl	80020fc <readTempSensorID>
 8001c0c:	e030      	b.n	8001c70 <handleUART+0x22c>
	}

	// Read the temp sensor calibration registers and print to the UART (data_rx[0] = "p")
	else if (UARTRxData[0] == 0x70) {
 8001c0e:	4b1e      	ldr	r3, [pc, #120]	; (8001c88 <handleUART+0x244>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b70      	cmp	r3, #112	; 0x70
 8001c14:	d10d      	bne.n	8001c32 <handleUART+0x1ee>
		readTempCalibration(i2c_bme280, huart, decodeASCII(UARTRxData[1]));
 8001c16:	4b23      	ldr	r3, [pc, #140]	; (8001ca4 <handleUART+0x260>)
 8001c18:	681c      	ldr	r4, [r3, #0]
 8001c1a:	4b1b      	ldr	r3, [pc, #108]	; (8001c88 <handleUART+0x244>)
 8001c1c:	785b      	ldrb	r3, [r3, #1]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f000 f846 	bl	8001cb0 <decodeASCII>
 8001c24:	4603      	mov	r3, r0
 8001c26:	461a      	mov	r2, r3
 8001c28:	6879      	ldr	r1, [r7, #4]
 8001c2a:	4620      	mov	r0, r4
 8001c2c:	f000 fa7b 	bl	8002126 <readTempCalibration>
 8001c30:	e01e      	b.n	8001c70 <handleUART+0x22c>
	}

	// Read the temp sensor and print to the UART[0] (data_rx [0]= "t")
	else if (UARTRxData[0] == 0x74) {
 8001c32:	4b15      	ldr	r3, [pc, #84]	; (8001c88 <handleUART+0x244>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b74      	cmp	r3, #116	; 0x74
 8001c38:	d10a      	bne.n	8001c50 <handleUART+0x20c>
		readTempSensor(huart, decodeASCII(UARTRxData[1]));
 8001c3a:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <handleUART+0x244>)
 8001c3c:	785b      	ldrb	r3, [r3, #1]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 f836 	bl	8001cb0 <decodeASCII>
 8001c44:	4603      	mov	r3, r0
 8001c46:	4619      	mov	r1, r3
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 fac3 	bl	80021d4 <readTempSensor>
 8001c4e:	e00f      	b.n	8001c70 <handleUART+0x22c>
	}

	/********************************** CAN Bus *******************************************/
	// Send the second byte received over the CAN bus as a payload with id 0x700 (data_rx [0]= "n")
	else if (UARTRxData[0] == 0x6E) {
 8001c50:	4b0d      	ldr	r3, [pc, #52]	; (8001c88 <handleUART+0x244>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b6e      	cmp	r3, #110	; 0x6e
 8001c56:	d10b      	bne.n	8001c70 <handleUART+0x22c>
		uint8_t TxData[1] = {UARTRxData[1]};
 8001c58:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <handleUART+0x244>)
 8001c5a:	785b      	ldrb	r3, [r3, #1]
 8001c5c:	703b      	strb	r3, [r7, #0]
		sendCAN_TxMessage(&hcan2, 1, TxData, &CAN_TxMailbox, DUMMY_ID);
 8001c5e:	463a      	mov	r2, r7
 8001c60:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <handleUART+0x264>)
 8001c68:	2101      	movs	r1, #1
 8001c6a:	4810      	ldr	r0, [pc, #64]	; (8001cac <handleUART+0x268>)
 8001c6c:	f7fe fdce 	bl	800080c <sendCAN_TxMessage>
	}

	UARTRxData[0] = 0x00;
 8001c70:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <handleUART+0x244>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	701a      	strb	r2, [r3, #0]
	UARTRxData[1] = 0x00;
 8001c76:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <handleUART+0x244>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	705a      	strb	r2, [r3, #1]
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd90      	pop	{r4, r7, pc}
 8001c84:	20000338 	.word	0x20000338
 8001c88:	20000388 	.word	0x20000388
 8001c8c:	2000061d 	.word	0x2000061d
 8001c90:	200005f4 	.word	0x200005f4
 8001c94:	20000138 	.word	0x20000138
 8001c98:	20000604 	.word	0x20000604
 8001c9c:	20000190 	.word	0x20000190
 8001ca0:	20000380 	.word	0x20000380
 8001ca4:	20000384 	.word	0x20000384
 8001ca8:	2000038c 	.word	0x2000038c
 8001cac:	20000048 	.word	0x20000048

08001cb0 <decodeASCII>:

uint8_t decodeASCII(uint8_t asciiVal) {
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
	int returnVal = -1;
 8001cba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cbe:	60fb      	str	r3, [r7, #12]
	if ((asciiVal >= 48) && (asciiVal <= 57)) {
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	2b2f      	cmp	r3, #47	; 0x2f
 8001cc4:	d905      	bls.n	8001cd2 <decodeASCII+0x22>
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	2b39      	cmp	r3, #57	; 0x39
 8001cca:	d802      	bhi.n	8001cd2 <decodeASCII+0x22>
		returnVal = asciiVal - 48;
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	3b30      	subs	r3, #48	; 0x30
 8001cd0:	60fb      	str	r3, [r7, #12]
	}
	return returnVal;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	b2db      	uxtb	r3, r3
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3714      	adds	r7, #20
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
	...

08001ce4 <combine_system_status>:

uint8_t combine_system_status() {
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
    // Mask status to use only bits 4:0
    uint8_t masked_status = sysStatus & 0x1F; 			// 0001 1111b
 8001cea:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <combine_system_status+0x38>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	f003 031f 	and.w	r3, r3, #31
 8001cf2:	71fb      	strb	r3, [r7, #7]

    // Mask flight_state to use only bits 2:0
    uint8_t masked_flight_state = flight_state & 0x07; 	// 0000 0111b
 8001cf4:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <combine_system_status+0x3c>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	71bb      	strb	r3, [r7, #6]
    // Shift flight_state to the correct position (bits 7:5)
    uint8_t shifted_flight_state = masked_flight_state << 5;
 8001cfe:	79bb      	ldrb	r3, [r7, #6]
 8001d00:	015b      	lsls	r3, r3, #5
 8001d02:	717b      	strb	r3, [r7, #5]

    // Combine the masked_status and shifted_flight_state
    uint8_t combined_value = masked_status | shifted_flight_state;
 8001d04:	79fa      	ldrb	r2, [r7, #7]
 8001d06:	797b      	ldrb	r3, [r7, #5]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	713b      	strb	r3, [r7, #4]

    return combined_value;
 8001d0c:	793b      	ldrb	r3, [r7, #4]
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	2000061d 	.word	0x2000061d
 8001d20:	2000061e 	.word	0x2000061e

08001d24 <configureCAN>:

void configureCAN() {
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08a      	sub	sp, #40	; 0x28
 8001d28:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef canFilterConfig;

	canFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	623b      	str	r3, [r7, #32]
	canFilterConfig.FilterBank = 10;
 8001d2e:	230a      	movs	r3, #10
 8001d30:	617b      	str	r3, [r7, #20]
	canFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	613b      	str	r3, [r7, #16]
	canFilterConfig.FilterIdHigh = 0x500 << 5;				// Filter only messages with ID 1X1XXXXXXXXb
 8001d36:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001d3a:	603b      	str	r3, [r7, #0]
	canFilterConfig.FilterIdLow = 0x0000;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	607b      	str	r3, [r7, #4]
	canFilterConfig.FilterMaskIdHigh = 0x500 << 5;
 8001d40:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001d44:	60bb      	str	r3, [r7, #8]
	canFilterConfig.FilterMaskIdLow = 0x0000;
 8001d46:	2300      	movs	r3, #0
 8001d48:	60fb      	str	r3, [r7, #12]
	canFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61bb      	str	r3, [r7, #24]
	canFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	61fb      	str	r3, [r7, #28]
	canFilterConfig.SlaveStartFilterBank = 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan2, &canFilterConfig);
<<<<<<< HEAD
 8001d56:	463b      	mov	r3, r7
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4803      	ldr	r0, [pc, #12]	; (8001d68 <configureCAN+0x44>)
 8001d5c:	f001 faa6 	bl	80032ac <HAL_CAN_ConfigFilter>
=======
 8001d1a:	463b      	mov	r3, r7
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4803      	ldr	r0, [pc, #12]	; (8001d2c <configureCAN+0x44>)
 8001d20:	f001 fa84 	bl	800322c <HAL_CAN_ConfigFilter>
>>>>>>> flight_hardware
}
 8001d60:	bf00      	nop
 8001d62:	3728      	adds	r7, #40	; 0x28
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20000048 	.word	0x20000048

08001d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d70:	b672      	cpsid	i
}
 8001d72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d74:	e7fe      	b.n	8001d74 <Error_Handler+0x8>
	...

08001d78 <systemStatus>:

#include "peripheral_driver.h"
/***************************************************************************************************************
 * Generic Functions
 */
uint8_t systemStatus(SPI_HandleTypeDef *hspi1, SPI_HandleTypeDef *hspi2, I2C_HandleTypeDef* hi2c1, I2C_HandleTypeDef* hi2c2) {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
 8001d84:	603b      	str	r3, [r7, #0]
	uint8_t retVal = 0x00;
 8001d86:	2300      	movs	r3, #0
 8001d88:	75fb      	strb	r3, [r7, #23]

	// Check BME280_1
	if(readBME280_id_reg(hi2c1, 1) != 0x60) {			// Expected 0x60
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7fe fccd 	bl	800072c <readBME280_id_reg>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b60      	cmp	r3, #96	; 0x60
 8001d96:	d003      	beq.n	8001da0 <systemStatus+0x28>
		retVal  = retVal | 0x10;
 8001d98:	7dfb      	ldrb	r3, [r7, #23]
 8001d9a:	f043 0310 	orr.w	r3, r3, #16
 8001d9e:	75fb      	strb	r3, [r7, #23]
	}

	// Check BME280_0
	if(readBME280_id_reg(hi2c1, 0) != 0x60) {			// Expected 0x60
 8001da0:	2100      	movs	r1, #0
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7fe fcc2 	bl	800072c <readBME280_id_reg>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b60      	cmp	r3, #96	; 0x60
 8001dac:	d003      	beq.n	8001db6 <systemStatus+0x3e>
		retVal  = retVal | 0x08;
 8001dae:	7dfb      	ldrb	r3, [r7, #23]
 8001db0:	f043 0308 	orr.w	r3, r3, #8
 8001db4:	75fb      	strb	r3, [r7, #23]
	}

	// Check Accelerometer
	if(readAccel_whoami(hi2c2) != 0xE5) {				// Expected 0xE5
 8001db6:	6838      	ldr	r0, [r7, #0]
 8001db8:	f7fe fbfa 	bl	80005b0 <readAccel_whoami>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2be5      	cmp	r3, #229	; 0xe5
 8001dc0:	d003      	beq.n	8001dca <systemStatus+0x52>
		retVal  = retVal | 0x04;
 8001dc2:	7dfb      	ldrb	r3, [r7, #23]
 8001dc4:	f043 0304 	orr.w	r3, r3, #4
 8001dc8:	75fb      	strb	r3, [r7, #23]
	}

	// Check SPIFlash_1
	uint8_t manu[2] = {0, 0};
 8001dca:	2300      	movs	r3, #0
 8001dcc:	82bb      	strh	r3, [r7, #20]
	read_manufacturer_id(manu, hspi2, cs_spi2);
 8001dce:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <systemStatus+0x9c>)
 8001dd0:	f107 0014 	add.w	r0, r7, #20
 8001dd4:	cb0c      	ldmia	r3, {r2, r3}
 8001dd6:	68b9      	ldr	r1, [r7, #8]
 8001dd8:	f7fe fee8 	bl	8000bac <read_manufacturer_id>
	if(manu[0] != 0xEF) {								// Expected 0xEF
 8001ddc:	7d3b      	ldrb	r3, [r7, #20]
 8001dde:	2bef      	cmp	r3, #239	; 0xef
 8001de0:	d003      	beq.n	8001dea <systemStatus+0x72>
		retVal  = retVal | 0x02;
 8001de2:	7dfb      	ldrb	r3, [r7, #23]
 8001de4:	f043 0302 	orr.w	r3, r3, #2
 8001de8:	75fb      	strb	r3, [r7, #23]
	}

	// Check SPIFlash_0
	uint8_t manu0[2] = {0, 0};
 8001dea:	2300      	movs	r3, #0
 8001dec:	823b      	strh	r3, [r7, #16]
	read_manufacturer_id(manu0, hspi1, cs_spi1);
 8001dee:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <systemStatus+0xa0>)
 8001df0:	f107 0010 	add.w	r0, r7, #16
 8001df4:	cb0c      	ldmia	r3, {r2, r3}
 8001df6:	68f9      	ldr	r1, [r7, #12]
 8001df8:	f7fe fed8 	bl	8000bac <read_manufacturer_id>
	if(manu0[0] != 0xEF) {								// Expected 0xEF
 8001dfc:	7c3b      	ldrb	r3, [r7, #16]
 8001dfe:	2bef      	cmp	r3, #239	; 0xef
 8001e00:	d003      	beq.n	8001e0a <systemStatus+0x92>
		retVal  = retVal | 0x01;
 8001e02:	7dfb      	ldrb	r3, [r7, #23]
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	75fb      	strb	r3, [r7, #23]
	}
	return retVal;
 8001e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20000604 	.word	0x20000604
 8001e18:	200005f4 	.word	0x200005f4

08001e1c <heartbeatUART>:

void heartbeatUART(UART_HandleTypeDef *huart) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
	send_uart_hex(huart, 0x51);			// Transmit the heartbeat as device ID (0x51 = Q)
<<<<<<< HEAD
 8001e24:	2151      	movs	r1, #81	; 0x51
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f001 f86f 	bl	8002f0a <send_uart_hex>
=======
 8001de8:	2151      	movs	r1, #81	; 0x51
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f001 f84d 	bl	8002e8a <send_uart_hex>
>>>>>>> flight_hardware
}
 8001e2c:	bf00      	nop
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <eraseFlashSPI>:

/***************************************************************************************************************
 * SPI Flash Functions
 */
void eraseFlashSPI(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, GPIO_Config config) {
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	4639      	mov	r1, r7
 8001e40:	e881 000c 	stmia.w	r1, {r2, r3}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);		// Activate the "write out" LED
<<<<<<< HEAD
 8001e44:	2201      	movs	r2, #1
 8001e46:	2180      	movs	r1, #128	; 0x80
 8001e48:	4813      	ldr	r0, [pc, #76]	; (8001e98 <eraseFlashSPI+0x64>)
 8001e4a:	f002 fe73 	bl	8004b34 <HAL_GPIO_WritePin>
=======
 8001e08:	2201      	movs	r2, #1
 8001e0a:	2180      	movs	r1, #128	; 0x80
 8001e0c:	4813      	ldr	r0, [pc, #76]	; (8001e5c <eraseFlashSPI+0x64>)
 8001e0e:	f002 fe51 	bl	8004ab4 <HAL_GPIO_WritePin>
>>>>>>> flight_hardware
	if (erase_chip_spi(hspi, config) == HAL_OK) {
 8001e4e:	463b      	mov	r3, r7
 8001e50:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001e54:	68f8      	ldr	r0, [r7, #12]
 8001e56:	f7fe fd5d 	bl	8000914 <erase_chip_spi>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d10d      	bne.n	8001e7c <eraseFlashSPI+0x48>
		send_uart_string(huart, "Successful Chip Erase\r\n");
<<<<<<< HEAD
 8001e60:	490e      	ldr	r1, [pc, #56]	; (8001e9c <eraseFlashSPI+0x68>)
 8001e62:	68b8      	ldr	r0, [r7, #8]
 8001e64:	f001 f83d 	bl	8002ee2 <send_uart_string>
=======
 8001e24:	490e      	ldr	r1, [pc, #56]	; (8001e60 <eraseFlashSPI+0x68>)
 8001e26:	68b8      	ldr	r0, [r7, #8]
 8001e28:	f001 f81b 	bl	8002e62 <send_uart_string>
>>>>>>> flight_hardware
		next_blank_page = find_next_blank_page(hspi, &end_of_flash, config);
 8001e68:	463b      	mov	r3, r7
 8001e6a:	cb0c      	ldmia	r3, {r2, r3}
 8001e6c:	490c      	ldr	r1, [pc, #48]	; (8001ea0 <eraseFlashSPI+0x6c>)
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f7fe fdde 	bl	8000a30 <find_next_blank_page>
 8001e74:	4603      	mov	r3, r0
 8001e76:	4a0b      	ldr	r2, [pc, #44]	; (8001ea4 <eraseFlashSPI+0x70>)
 8001e78:	6013      	str	r3, [r2, #0]
 8001e7a:	e003      	b.n	8001e84 <eraseFlashSPI+0x50>
	} else {
		send_uart_string(huart, "Error during chip erase. Please check the connection and try again.\r\n");
<<<<<<< HEAD
 8001e7c:	490a      	ldr	r1, [pc, #40]	; (8001ea8 <eraseFlashSPI+0x74>)
 8001e7e:	68b8      	ldr	r0, [r7, #8]
 8001e80:	f001 f82f 	bl	8002ee2 <send_uart_string>
	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);	// Deactivate the "write out" LED
 8001e84:	2200      	movs	r2, #0
 8001e86:	2180      	movs	r1, #128	; 0x80
 8001e88:	4803      	ldr	r0, [pc, #12]	; (8001e98 <eraseFlashSPI+0x64>)
 8001e8a:	f002 fe53 	bl	8004b34 <HAL_GPIO_WritePin>
}
 8001e8e:	bf00      	nop
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40020400 	.word	0x40020400
 8001e9c:	080094ec 	.word	0x080094ec
 8001ea0:	200005da 	.word	0x200005da
 8001ea4:	200005d4 	.word	0x200005d4
 8001ea8:	08009504 	.word	0x08009504
=======
 8001e40:	490a      	ldr	r1, [pc, #40]	; (8001e6c <eraseFlashSPI+0x74>)
 8001e42:	68b8      	ldr	r0, [r7, #8]
 8001e44:	f001 f80d 	bl	8002e62 <send_uart_string>
	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);	// Deactivate the "write out" LED
 8001e48:	2200      	movs	r2, #0
 8001e4a:	2180      	movs	r1, #128	; 0x80
 8001e4c:	4803      	ldr	r0, [pc, #12]	; (8001e5c <eraseFlashSPI+0x64>)
 8001e4e:	f002 fe31 	bl	8004ab4 <HAL_GPIO_WritePin>
}
 8001e52:	bf00      	nop
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40020400 	.word	0x40020400
 8001e60:	0800946c 	.word	0x0800946c
 8001e64:	200005da 	.word	0x200005da
 8001e68:	200005d4 	.word	0x200005d4
 8001e6c:	08009484 	.word	0x08009484
>>>>>>> flight_hardware

08001eac <readFlashToUART>:

void readFlashToUART(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, GPIO_Config config) {
 8001eac:	b590      	push	{r4, r7, lr}
 8001eae:	b0cb      	sub	sp, #300	; 0x12c
 8001eb0:	af02      	add	r7, sp, #8
 8001eb2:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8001eb6:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 8001eba:	6020      	str	r0, [r4, #0]
 8001ebc:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8001ec0:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 8001ec4:	6001      	str	r1, [r0, #0]
 8001ec6:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8001eca:	f5a1 7190 	sub.w	r1, r1, #288	; 0x120
 8001ece:	e881 000c 	stmia.w	r1, {r2, r3}
	uint32_t num_of_pages = next_blank_page;
 8001ed2:	4b2a      	ldr	r3, [pc, #168]	; (8001f7c <readFlashToUART+0xd0>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	if(num_of_pages == 0) {
 8001eda:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d103      	bne.n	8001eea <readFlashToUART+0x3e>
		num_of_pages = PAGE_SIZE;
 8001ee2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ee6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	}
	num_of_pages = num_of_pages/PAGE_SIZE;
 8001eea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001eee:	0a1b      	lsrs	r3, r3, #8
 8001ef0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	uint32_t address = 0;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET);		// Activate the "write out" LED
<<<<<<< HEAD
 8001efa:	2201      	movs	r2, #1
 8001efc:	2180      	movs	r1, #128	; 0x80
 8001efe:	4820      	ldr	r0, [pc, #128]	; (8001f80 <readFlashToUART+0xd4>)
 8001f00:	f002 fe18 	bl	8004b34 <HAL_GPIO_WritePin>
=======
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	2180      	movs	r1, #128	; 0x80
 8001ec2:	4820      	ldr	r0, [pc, #128]	; (8001f44 <readFlashToUART+0xd4>)
 8001ec4:	f002 fdf6 	bl	8004ab4 <HAL_GPIO_WritePin>
>>>>>>> flight_hardware

	for (int i = 0; i < (num_of_pages); i++) {
 8001f04:	2300      	movs	r3, #0
 8001f06:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001f0a:	e026      	b.n	8001f5a <readFlashToUART+0xae>
		uint8_t page[PAGE_SIZE];
		read_page_spi(page, hspi, address, config);
 8001f0c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001f10:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001f14:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001f18:	f5a2 718a 	sub.w	r1, r2, #276	; 0x114
 8001f1c:	f107 0014 	add.w	r0, r7, #20
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	9200      	str	r2, [sp, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001f2a:	6809      	ldr	r1, [r1, #0]
 8001f2c:	f7fe fe18 	bl	8000b60 <read_page_spi>
		uart_transmit_page(huart, page);						// Transmit the data//
<<<<<<< HEAD
 8001f30:	f107 0214 	add.w	r2, r7, #20
 8001f34:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001f38:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001f3c:	4611      	mov	r1, r2
 8001f3e:	6818      	ldr	r0, [r3, #0]
 8001f40:	f000 ffbe 	bl	8002ec0 <uart_transmit_page>
=======
 8001ef4:	f107 0214 	add.w	r2, r7, #20
 8001ef8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001efc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001f00:	4611      	mov	r1, r2
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	f000 ff9c 	bl	8002e40 <uart_transmit_page>
>>>>>>> flight_hardware
		address += PAGE_SIZE;
 8001f44:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001f48:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001f4c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	for (int i = 0; i < (num_of_pages); i++) {
 8001f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001f54:	3301      	adds	r3, #1
 8001f56:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001f5e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d8d2      	bhi.n	8001f0c <readFlashToUART+0x60>
	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);	// Deactivate the "write out" LED
<<<<<<< HEAD
 8001f66:	2200      	movs	r2, #0
 8001f68:	2180      	movs	r1, #128	; 0x80
 8001f6a:	4805      	ldr	r0, [pc, #20]	; (8001f80 <readFlashToUART+0xd4>)
 8001f6c:	f002 fde2 	bl	8004b34 <HAL_GPIO_WritePin>
=======
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2180      	movs	r1, #128	; 0x80
 8001f2e:	4805      	ldr	r0, [pc, #20]	; (8001f44 <readFlashToUART+0xd4>)
 8001f30:	f002 fdc0 	bl	8004ab4 <HAL_GPIO_WritePin>
>>>>>>> flight_hardware
}
 8001f70:	bf00      	nop
 8001f72:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd90      	pop	{r4, r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	200005d4 	.word	0x200005d4
 8001f80:	40020400 	.word	0x40020400

08001f84 <readFlashManuSPI>:

void readFlashManuSPI(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, GPIO_Config config) {
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	4639      	mov	r1, r7
 8001f90:	e881 000c 	stmia.w	r1, {r2, r3}
	uint8_t manu[2] = {0, 0};
 8001f94:	2300      	movs	r3, #0
 8001f96:	82bb      	strh	r3, [r7, #20]
	read_manufacturer_id(manu, hspi, config);
 8001f98:	f107 0014 	add.w	r0, r7, #20
 8001f9c:	463b      	mov	r3, r7
 8001f9e:	cb0c      	ldmia	r3, {r2, r3}
 8001fa0:	68f9      	ldr	r1, [r7, #12]
 8001fa2:	f7fe fe03 	bl	8000bac <read_manufacturer_id>
	send_uart_hex(huart, manu[0]);
<<<<<<< HEAD
 8001fa6:	7d3b      	ldrb	r3, [r7, #20]
 8001fa8:	4619      	mov	r1, r3
 8001faa:	68b8      	ldr	r0, [r7, #8]
 8001fac:	f000 ffad 	bl	8002f0a <send_uart_hex>
	send_uart_hex(huart, manu[1]);
 8001fb0:	7d7b      	ldrb	r3, [r7, #21]
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	68b8      	ldr	r0, [r7, #8]
 8001fb6:	f000 ffa8 	bl	8002f0a <send_uart_hex>
=======
 8001f6a:	7d3b      	ldrb	r3, [r7, #20]
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	68b8      	ldr	r0, [r7, #8]
 8001f70:	f000 ff8b 	bl	8002e8a <send_uart_hex>
	send_uart_hex(huart, manu[1]);
 8001f74:	7d7b      	ldrb	r3, [r7, #21]
 8001f76:	4619      	mov	r1, r3
 8001f78:	68b8      	ldr	r0, [r7, #8]
 8001f7a:	f000 ff86 	bl	8002e8a <send_uart_hex>
>>>>>>> flight_hardware
}
 8001fba:	bf00      	nop
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
	...

08001fc4 <writePageSPI_W>:

void writePageSPI_W(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, GPIO_Config config) {
 8001fc4:	b590      	push	{r4, r7, lr}
 8001fc6:	b0c9      	sub	sp, #292	; 0x124
 8001fc8:	af02      	add	r7, sp, #8
 8001fca:	f507 748c 	add.w	r4, r7, #280	; 0x118
 8001fce:	f5a4 7486 	sub.w	r4, r4, #268	; 0x10c
 8001fd2:	6020      	str	r0, [r4, #0]
 8001fd4:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8001fd8:	f5a0 7088 	sub.w	r0, r0, #272	; 0x110
 8001fdc:	6001      	str	r1, [r0, #0]
 8001fde:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8001fe2:	f5a1 718c 	sub.w	r1, r1, #280	; 0x118
 8001fe6:	e881 000c 	stmia.w	r1, {r2, r3}
	uint8_t data_out[PAGE_SIZE];
	for (int i = 0; i < PAGE_SIZE; i++) {
 8001fea:	2300      	movs	r3, #0
 8001fec:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001ff0:	e00d      	b.n	800200e <writePageSPI_W+0x4a>
		data_out[i] = 0x77;		// Make all data in the page 'w'
 8001ff2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001ff6:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 8001ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001ffe:	4413      	add	r3, r2
 8002000:	2277      	movs	r2, #119	; 0x77
 8002002:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < PAGE_SIZE; i++) {
 8002004:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002008:	3301      	adds	r3, #1
 800200a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800200e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002012:	2bff      	cmp	r3, #255	; 0xff
 8002014:	dded      	ble.n	8001ff2 <writePageSPI_W+0x2e>
	}
	write_data_spi_dma(data_out, hspi, next_blank_page, config);
 8002016:	4b13      	ldr	r3, [pc, #76]	; (8002064 <writePageSPI_W+0xa0>)
 8002018:	681c      	ldr	r4, [r3, #0]
 800201a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800201e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002022:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8002026:	f5a2 7186 	sub.w	r1, r2, #268	; 0x10c
 800202a:	f107 0014 	add.w	r0, r7, #20
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	9200      	str	r2, [sp, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4622      	mov	r2, r4
 8002036:	6809      	ldr	r1, [r1, #0]
 8002038:	f7fe fccc 	bl	80009d4 <write_data_spi_dma>
	next_blank_page += PAGE_SIZE;
 800203c:	4b09      	ldr	r3, [pc, #36]	; (8002064 <writePageSPI_W+0xa0>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002044:	4a07      	ldr	r2, [pc, #28]	; (8002064 <writePageSPI_W+0xa0>)
 8002046:	6013      	str	r3, [r2, #0]

	send_uart_string(huart, "Successful Page Written\r\n");
<<<<<<< HEAD
 8002048:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800204c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002050:	4905      	ldr	r1, [pc, #20]	; (8002068 <writePageSPI_W+0xa4>)
 8002052:	6818      	ldr	r0, [r3, #0]
 8002054:	f000 ff45 	bl	8002ee2 <send_uart_string>
}
 8002058:	bf00      	nop
 800205a:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800205e:	46bd      	mov	sp, r7
 8002060:	bd90      	pop	{r4, r7, pc}
 8002062:	bf00      	nop
 8002064:	200005d4 	.word	0x200005d4
 8002068:	0800954c 	.word	0x0800954c
=======
 800200c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002010:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002014:	4905      	ldr	r1, [pc, #20]	; (800202c <writePageSPI_W+0xa4>)
 8002016:	6818      	ldr	r0, [r3, #0]
 8002018:	f000 ff23 	bl	8002e62 <send_uart_string>
}
 800201c:	bf00      	nop
 800201e:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8002022:	46bd      	mov	sp, r7
 8002024:	bd90      	pop	{r4, r7, pc}
 8002026:	bf00      	nop
 8002028:	200005d4 	.word	0x200005d4
 800202c:	080094cc 	.word	0x080094cc
>>>>>>> flight_hardware

0800206c <resetSPIFlash>:

void resetSPIFlash(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, GPIO_Config config) {
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	4639      	mov	r1, r7
 8002078:	e881 000c 	stmia.w	r1, {r2, r3}
	software_reset(hspi, config);
 800207c:	463b      	mov	r3, r7
 800207e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f7fe fc82 	bl	800098c <software_reset>
	send_uart_string(huart, "Flash Chip Reset\r\n");
<<<<<<< HEAD
 8002088:	4903      	ldr	r1, [pc, #12]	; (8002098 <resetSPIFlash+0x2c>)
 800208a:	68b8      	ldr	r0, [r7, #8]
 800208c:	f000 ff29 	bl	8002ee2 <send_uart_string>
}
 8002090:	bf00      	nop
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	08009568 	.word	0x08009568
=======
 800204c:	4903      	ldr	r1, [pc, #12]	; (800205c <resetSPIFlash+0x2c>)
 800204e:	68b8      	ldr	r0, [r7, #8]
 8002050:	f000 ff07 	bl	8002e62 <send_uart_string>
}
 8002054:	bf00      	nop
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	080094e8 	.word	0x080094e8
>>>>>>> flight_hardware

0800209c <checkAccelWhoAmI>:
/***************************************************************************************************************
 * I2C Accelerometer Functions
 */
void checkAccelWhoAmI(I2C_HandleTypeDef* hi2c, UART_HandleTypeDef *huart) {
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
	uint8_t whoami = readAccel_whoami(hi2c);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7fe fa82 	bl	80005b0 <readAccel_whoami>
 80020ac:	4603      	mov	r3, r0
 80020ae:	73fb      	strb	r3, [r7, #15]
	send_uart_hex(huart, whoami);
<<<<<<< HEAD
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
 80020b2:	4619      	mov	r1, r3
 80020b4:	6838      	ldr	r0, [r7, #0]
 80020b6:	f000 ff28 	bl	8002f0a <send_uart_hex>
=======
 8002074:	7bfb      	ldrb	r3, [r7, #15]
 8002076:	4619      	mov	r1, r3
 8002078:	6838      	ldr	r0, [r7, #0]
 800207a:	f000 ff06 	bl	8002e8a <send_uart_hex>
>>>>>>> flight_hardware
}
 80020ba:	bf00      	nop
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
	...

080020c4 <accelToUART>:

void accelToUART(UART_HandleTypeDef *huart) {
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 6; i++) {
 80020cc:	2300      	movs	r3, #0
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	e00a      	b.n	80020e8 <accelToUART+0x24>
		send_uart_hex(huart, accel_data[i]);
<<<<<<< HEAD
 80020d2:	4a09      	ldr	r2, [pc, #36]	; (80020f8 <accelToUART+0x34>)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4413      	add	r3, r2
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	4619      	mov	r1, r3
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 ff14 	bl	8002f0a <send_uart_hex>
=======
 8002096:	4a09      	ldr	r2, [pc, #36]	; (80020bc <accelToUART+0x34>)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4413      	add	r3, r2
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	4619      	mov	r1, r3
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 fef2 	bl	8002e8a <send_uart_hex>
>>>>>>> flight_hardware
	for (int i = 0; i < 6; i++) {
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	3301      	adds	r3, #1
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2b05      	cmp	r3, #5
 80020ec:	ddf1      	ble.n	80020d2 <accelToUART+0xe>
	}
}
 80020ee:	bf00      	nop
 80020f0:	bf00      	nop
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	200005bc 	.word	0x200005bc

080020fc <readTempSensorID>:

/***************************************************************************************************************
 * I2C BME280 Sensor Functions
 */
void readTempSensorID(I2C_HandleTypeDef* hi2c, UART_HandleTypeDef *huart, uint8_t tempNo) {
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	4613      	mov	r3, r2
 8002108:	71fb      	strb	r3, [r7, #7]
	send_uart_hex(huart, readBME280_id_reg(hi2c, tempNo));
<<<<<<< HEAD
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	4619      	mov	r1, r3
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f7fe fb0c 	bl	800072c <readBME280_id_reg>
 8002114:	4603      	mov	r3, r0
 8002116:	4619      	mov	r1, r3
 8002118:	68b8      	ldr	r0, [r7, #8]
 800211a:	f000 fef6 	bl	8002f0a <send_uart_hex>
=======
 80020ce:	79fb      	ldrb	r3, [r7, #7]
 80020d0:	4619      	mov	r1, r3
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f7fe fb2a 	bl	800072c <readBME280_id_reg>
 80020d8:	4603      	mov	r3, r0
 80020da:	4619      	mov	r1, r3
 80020dc:	68b8      	ldr	r0, [r7, #8]
 80020de:	f000 fed4 	bl	8002e8a <send_uart_hex>
>>>>>>> flight_hardware
}
 800211e:	bf00      	nop
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <readTempCalibration>:

void readTempCalibration(I2C_HandleTypeDef* hi2c, UART_HandleTypeDef *huart, uint8_t tempNo) {
 8002126:	b580      	push	{r7, lr}
 8002128:	b090      	sub	sp, #64	; 0x40
 800212a:	af00      	add	r7, sp, #0
 800212c:	60f8      	str	r0, [r7, #12]
 800212e:	60b9      	str	r1, [r7, #8]
 8002130:	4613      	mov	r3, r2
 8002132:	71fb      	strb	r3, [r7, #7]
	uint8_t calibration1[25];
	uint8_t calibration2[7];

	for (uint8_t i = 0; i < CALIB_CNT_1; i++) {
 8002134:	2300      	movs	r3, #0
 8002136:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800213a:	e016      	b.n	800216a <readTempCalibration+0x44>
		calibration1[i] = 0x00;
 800213c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002140:	3340      	adds	r3, #64	; 0x40
 8002142:	443b      	add	r3, r7
 8002144:	2200      	movs	r2, #0
 8002146:	f803 2c28 	strb.w	r2, [r3, #-40]
		if (i < CALIB_CNT_2) {
 800214a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800214e:	2b06      	cmp	r3, #6
 8002150:	d806      	bhi.n	8002160 <readTempCalibration+0x3a>
			calibration2[i] = 0x00;
 8002152:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002156:	3340      	adds	r3, #64	; 0x40
 8002158:	443b      	add	r3, r7
 800215a:	2200      	movs	r2, #0
 800215c:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (uint8_t i = 0; i < CALIB_CNT_1; i++) {
 8002160:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002164:	3301      	adds	r3, #1
 8002166:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800216a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800216e:	2b18      	cmp	r3, #24
 8002170:	d9e4      	bls.n	800213c <readTempCalibration+0x16>
		}
	}

	readBME280_calib(hi2c, tempNo, calibration1, calibration2);
 8002172:	f107 0310 	add.w	r3, r7, #16
 8002176:	f107 0218 	add.w	r2, r7, #24
 800217a:	79f9      	ldrb	r1, [r7, #7]
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f7fe faf1 	bl	8000764 <readBME280_calib>

	for (int i = 0; i < 25; i++) {
 8002182:	2300      	movs	r3, #0
 8002184:	63bb      	str	r3, [r7, #56]	; 0x38
 8002186:	e00b      	b.n	80021a0 <readTempCalibration+0x7a>
	  send_uart_hex(huart, calibration1[i]);
<<<<<<< HEAD
 8002188:	f107 0218 	add.w	r2, r7, #24
 800218c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800218e:	4413      	add	r3, r2
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	4619      	mov	r1, r3
 8002194:	68b8      	ldr	r0, [r7, #8]
 8002196:	f000 feb8 	bl	8002f0a <send_uart_hex>
=======
 800214c:	f107 0218 	add.w	r2, r7, #24
 8002150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002152:	4413      	add	r3, r2
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	4619      	mov	r1, r3
 8002158:	68b8      	ldr	r0, [r7, #8]
 800215a:	f000 fe96 	bl	8002e8a <send_uart_hex>
>>>>>>> flight_hardware
	for (int i = 0; i < 25; i++) {
 800219a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800219c:	3301      	adds	r3, #1
 800219e:	63bb      	str	r3, [r7, #56]	; 0x38
 80021a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a2:	2b18      	cmp	r3, #24
 80021a4:	ddf0      	ble.n	8002188 <readTempCalibration+0x62>
	}

	for (int i = 0; i < 7; i++) {
 80021a6:	2300      	movs	r3, #0
 80021a8:	637b      	str	r3, [r7, #52]	; 0x34
 80021aa:	e00b      	b.n	80021c4 <readTempCalibration+0x9e>
	  send_uart_hex(huart, calibration2[i]);
<<<<<<< HEAD
 80021ac:	f107 0210 	add.w	r2, r7, #16
 80021b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021b2:	4413      	add	r3, r2
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	4619      	mov	r1, r3
 80021b8:	68b8      	ldr	r0, [r7, #8]
 80021ba:	f000 fea6 	bl	8002f0a <send_uart_hex>
=======
 8002170:	f107 0210 	add.w	r2, r7, #16
 8002174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002176:	4413      	add	r3, r2
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	4619      	mov	r1, r3
 800217c:	68b8      	ldr	r0, [r7, #8]
 800217e:	f000 fe84 	bl	8002e8a <send_uart_hex>
>>>>>>> flight_hardware
	for (int i = 0; i < 7; i++) {
 80021be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021c0:	3301      	adds	r3, #1
 80021c2:	637b      	str	r3, [r7, #52]	; 0x34
 80021c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021c6:	2b06      	cmp	r3, #6
 80021c8:	ddf0      	ble.n	80021ac <readTempCalibration+0x86>
	}
}
 80021ca:	bf00      	nop
 80021cc:	bf00      	nop
 80021ce:	3740      	adds	r7, #64	; 0x40
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <readTempSensor>:

void readTempSensor(UART_HandleTypeDef *huart, uint8_t tempNo) {
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	70fb      	strb	r3, [r7, #3]
	if (tempNo == 0) {
 80021e0:	78fb      	ldrb	r3, [r7, #3]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d111      	bne.n	800220a <readTempSensor+0x36>
		for (int i = 0; i < 6; i++) {
 80021e6:	2300      	movs	r3, #0
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	e00a      	b.n	8002202 <readTempSensor+0x2e>
			send_uart_hex(huart, bme280_data_0[i]);
<<<<<<< HEAD
 80021ec:	4a13      	ldr	r2, [pc, #76]	; (800223c <readTempSensor+0x68>)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	4413      	add	r3, r2
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	4619      	mov	r1, r3
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 fe87 	bl	8002f0a <send_uart_hex>
=======
 80021b0:	4a13      	ldr	r2, [pc, #76]	; (8002200 <readTempSensor+0x68>)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	4413      	add	r3, r2
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	4619      	mov	r1, r3
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 fe65 	bl	8002e8a <send_uart_hex>
>>>>>>> flight_hardware
		for (int i = 0; i < 6; i++) {
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	3301      	adds	r3, #1
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2b05      	cmp	r3, #5
 8002206:	ddf1      	ble.n	80021ec <readTempSensor+0x18>
	} else if (tempNo == 1) {
		for (int i = 0; i < 6; i++) {
			send_uart_hex(huart, bme280_data_1[i]);
		}
	}
}
 8002208:	e013      	b.n	8002232 <readTempSensor+0x5e>
	} else if (tempNo == 1) {
 800220a:	78fb      	ldrb	r3, [r7, #3]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d110      	bne.n	8002232 <readTempSensor+0x5e>
		for (int i = 0; i < 6; i++) {
 8002210:	2300      	movs	r3, #0
 8002212:	60bb      	str	r3, [r7, #8]
 8002214:	e00a      	b.n	800222c <readTempSensor+0x58>
			send_uart_hex(huart, bme280_data_1[i]);
<<<<<<< HEAD
 8002216:	4a0a      	ldr	r2, [pc, #40]	; (8002240 <readTempSensor+0x6c>)
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	4413      	add	r3, r2
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	4619      	mov	r1, r3
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 fe72 	bl	8002f0a <send_uart_hex>
=======
 80021da:	4a0a      	ldr	r2, [pc, #40]	; (8002204 <readTempSensor+0x6c>)
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	4413      	add	r3, r2
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	4619      	mov	r1, r3
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 fe50 	bl	8002e8a <send_uart_hex>
>>>>>>> flight_hardware
		for (int i = 0; i < 6; i++) {
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	3301      	adds	r3, #1
 800222a:	60bb      	str	r3, [r7, #8]
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	2b05      	cmp	r3, #5
 8002230:	ddf1      	ble.n	8002216 <readTempSensor+0x42>
}
 8002232:	bf00      	nop
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	200005c4 	.word	0x200005c4
 8002240:	200005cc 	.word	0x200005cc

08002244 <readAllSensors>:

/***************************************************************************************************************
 * Process All Sensors
 */
void readAllSensors(I2C_HandleTypeDef* hi2c_accel, I2C_HandleTypeDef* hi2c_temp, RTC_HandleTypeDef* hrtc) {
 8002244:	b5b0      	push	{r4, r5, r7, lr}
 8002246:	b08a      	sub	sp, #40	; 0x28
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
	// Read Accelerometer Data
	readAccelerometer(accel_data, hi2c_accel);
 8002250:	68f9      	ldr	r1, [r7, #12]
 8002252:	4868      	ldr	r0, [pc, #416]	; (80023f4 <readAllSensors+0x1b0>)
 8002254:	f7fe f986 	bl	8000564 <readAccelerometer>

	// Read BME280 Data
	readTempHumPres(bme280_data_0, hi2c_temp, 0);
 8002258:	2200      	movs	r2, #0
 800225a:	68b9      	ldr	r1, [r7, #8]
 800225c:	4866      	ldr	r0, [pc, #408]	; (80023f8 <readAllSensors+0x1b4>)
 800225e:	f7fe fa0b 	bl	8000678 <readTempHumPres>
	readTempHumPres(bme280_data_1, hi2c_temp, 1);
 8002262:	2201      	movs	r2, #1
 8002264:	68b9      	ldr	r1, [r7, #8]
 8002266:	4865      	ldr	r0, [pc, #404]	; (80023fc <readAllSensors+0x1b8>)
 8002268:	f7fe fa06 	bl	8000678 <readTempHumPres>

	uint16_t time = getTimestampMilliseconds(hrtc);
<<<<<<< HEAD
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 f903 	bl	8002478 <getTimestampMilliseconds>
 8002272:	4603      	mov	r3, r0
 8002274:	82fb      	strh	r3, [r7, #22]
=======
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 f903 	bl	800243c <getTimestampMilliseconds>
 8002236:	4603      	mov	r3, r0
 8002238:	82fb      	strh	r3, [r7, #22]
>>>>>>> flight_hardware
	uint8_t array_ptr = 0;
 8002276:	2300      	movs	r3, #0
 8002278:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// Store the new read in the buffer if there is space
	if (byte_tracker < (PAGE_SIZE - READ_SIZE)) {
 800227c:	4b60      	ldr	r3, [pc, #384]	; (8002400 <readAllSensors+0x1bc>)
 800227e:	881b      	ldrh	r3, [r3, #0]
 8002280:	2bea      	cmp	r3, #234	; 0xea
 8002282:	f200 80b2 	bhi.w	80023ea <readAllSensors+0x1a6>
		// Store the timestamp in the buffer (Little Endian)
		data_buffer_tx[buffer_tracker][byte_tracker + array_ptr] = (uint8_t) (time & 0xFF); 		// Least significant byte (LSB)
 8002286:	4b5f      	ldr	r3, [pc, #380]	; (8002404 <readAllSensors+0x1c0>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	461a      	mov	r2, r3
 800228c:	4b5c      	ldr	r3, [pc, #368]	; (8002400 <readAllSensors+0x1bc>)
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	4619      	mov	r1, r3
 8002292:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002296:	440b      	add	r3, r1
 8002298:	8af9      	ldrh	r1, [r7, #22]
 800229a:	b2c8      	uxtb	r0, r1
 800229c:	495a      	ldr	r1, [pc, #360]	; (8002408 <readAllSensors+0x1c4>)
 800229e:	0212      	lsls	r2, r2, #8
 80022a0:	440a      	add	r2, r1
 80022a2:	4413      	add	r3, r2
 80022a4:	4602      	mov	r2, r0
 80022a6:	701a      	strb	r2, [r3, #0]
		array_ptr += 1;
 80022a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022ac:	3301      	adds	r3, #1
 80022ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		data_buffer_tx[buffer_tracker][byte_tracker + array_ptr] = (uint8_t) ((time >> 8) & 0xFF); // Most significant byte (MSB)
 80022b2:	8afb      	ldrh	r3, [r7, #22]
 80022b4:	0a1b      	lsrs	r3, r3, #8
 80022b6:	b299      	uxth	r1, r3
 80022b8:	4b52      	ldr	r3, [pc, #328]	; (8002404 <readAllSensors+0x1c0>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	461a      	mov	r2, r3
 80022be:	4b50      	ldr	r3, [pc, #320]	; (8002400 <readAllSensors+0x1bc>)
 80022c0:	881b      	ldrh	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022c8:	4403      	add	r3, r0
 80022ca:	b2c8      	uxtb	r0, r1
 80022cc:	494e      	ldr	r1, [pc, #312]	; (8002408 <readAllSensors+0x1c4>)
 80022ce:	0212      	lsls	r2, r2, #8
 80022d0:	440a      	add	r2, r1
 80022d2:	4413      	add	r3, r2
 80022d4:	4602      	mov	r2, r0
 80022d6:	701a      	strb	r2, [r3, #0]
		array_ptr += 1;
 80022d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022dc:	3301      	adds	r3, #1
 80022de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		// Store the accelerometer data
		for (int i = 0; i < 6; i++) {
 80022e2:	2300      	movs	r3, #0
 80022e4:	623b      	str	r3, [r7, #32]
 80022e6:	e01a      	b.n	800231e <readAllSensors+0xda>
		  data_buffer_tx[buffer_tracker][byte_tracker + array_ptr] = accel_data[i];
 80022e8:	4b46      	ldr	r3, [pc, #280]	; (8002404 <readAllSensors+0x1c0>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	461c      	mov	r4, r3
 80022ee:	4b44      	ldr	r3, [pc, #272]	; (8002400 <readAllSensors+0x1bc>)
 80022f0:	881b      	ldrh	r3, [r3, #0]
 80022f2:	461a      	mov	r2, r3
 80022f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022f8:	4413      	add	r3, r2
 80022fa:	493e      	ldr	r1, [pc, #248]	; (80023f4 <readAllSensors+0x1b0>)
 80022fc:	6a3a      	ldr	r2, [r7, #32]
 80022fe:	440a      	add	r2, r1
 8002300:	7810      	ldrb	r0, [r2, #0]
 8002302:	4941      	ldr	r1, [pc, #260]	; (8002408 <readAllSensors+0x1c4>)
 8002304:	0222      	lsls	r2, r4, #8
 8002306:	440a      	add	r2, r1
 8002308:	4413      	add	r3, r2
 800230a:	4602      	mov	r2, r0
 800230c:	701a      	strb	r2, [r3, #0]
		  array_ptr += 1;
 800230e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002312:	3301      	adds	r3, #1
 8002314:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for (int i = 0; i < 6; i++) {
 8002318:	6a3b      	ldr	r3, [r7, #32]
 800231a:	3301      	adds	r3, #1
 800231c:	623b      	str	r3, [r7, #32]
 800231e:	6a3b      	ldr	r3, [r7, #32]
 8002320:	2b05      	cmp	r3, #5
 8002322:	dde1      	ble.n	80022e8 <readAllSensors+0xa4>
		}

		// Store the BME280_0 Data
		for (int i = 0; i < 6; i++) {
 8002324:	2300      	movs	r3, #0
 8002326:	61fb      	str	r3, [r7, #28]
 8002328:	e01a      	b.n	8002360 <readAllSensors+0x11c>
		  data_buffer_tx[buffer_tracker][byte_tracker + array_ptr] = bme280_data_0[i];
 800232a:	4b36      	ldr	r3, [pc, #216]	; (8002404 <readAllSensors+0x1c0>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	461c      	mov	r4, r3
 8002330:	4b33      	ldr	r3, [pc, #204]	; (8002400 <readAllSensors+0x1bc>)
 8002332:	881b      	ldrh	r3, [r3, #0]
 8002334:	461a      	mov	r2, r3
 8002336:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800233a:	4413      	add	r3, r2
 800233c:	492e      	ldr	r1, [pc, #184]	; (80023f8 <readAllSensors+0x1b4>)
 800233e:	69fa      	ldr	r2, [r7, #28]
 8002340:	440a      	add	r2, r1
 8002342:	7810      	ldrb	r0, [r2, #0]
 8002344:	4930      	ldr	r1, [pc, #192]	; (8002408 <readAllSensors+0x1c4>)
 8002346:	0222      	lsls	r2, r4, #8
 8002348:	440a      	add	r2, r1
 800234a:	4413      	add	r3, r2
 800234c:	4602      	mov	r2, r0
 800234e:	701a      	strb	r2, [r3, #0]
		  array_ptr += 1;
 8002350:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002354:	3301      	adds	r3, #1
 8002356:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for (int i = 0; i < 6; i++) {
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	3301      	adds	r3, #1
 800235e:	61fb      	str	r3, [r7, #28]
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	2b05      	cmp	r3, #5
 8002364:	dde1      	ble.n	800232a <readAllSensors+0xe6>
		}

		// Store the BME280_1 Data
		for (int i = 0; i < 6; i++) {
 8002366:	2300      	movs	r3, #0
 8002368:	61bb      	str	r3, [r7, #24]
 800236a:	e01a      	b.n	80023a2 <readAllSensors+0x15e>
		  data_buffer_tx[buffer_tracker][byte_tracker + array_ptr] = bme280_data_1[i];
 800236c:	4b25      	ldr	r3, [pc, #148]	; (8002404 <readAllSensors+0x1c0>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	461c      	mov	r4, r3
 8002372:	4b23      	ldr	r3, [pc, #140]	; (8002400 <readAllSensors+0x1bc>)
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	461a      	mov	r2, r3
 8002378:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800237c:	4413      	add	r3, r2
 800237e:	491f      	ldr	r1, [pc, #124]	; (80023fc <readAllSensors+0x1b8>)
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	440a      	add	r2, r1
 8002384:	7810      	ldrb	r0, [r2, #0]
 8002386:	4920      	ldr	r1, [pc, #128]	; (8002408 <readAllSensors+0x1c4>)
 8002388:	0222      	lsls	r2, r4, #8
 800238a:	440a      	add	r2, r1
 800238c:	4413      	add	r3, r2
 800238e:	4602      	mov	r2, r0
 8002390:	701a      	strb	r2, [r3, #0]
		  array_ptr += 1;
 8002392:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002396:	3301      	adds	r3, #1
 8002398:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for (int i = 0; i < 6; i++) {
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	3301      	adds	r3, #1
 80023a0:	61bb      	str	r3, [r7, #24]
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	2b05      	cmp	r3, #5
 80023a6:	dde1      	ble.n	800236c <readAllSensors+0x128>
		}

		// Store the flight state and peripheral status in the final byte
		data_buffer_tx[buffer_tracker][byte_tracker + array_ptr] = combine_system_status();
 80023a8:	4b16      	ldr	r3, [pc, #88]	; (8002404 <readAllSensors+0x1c0>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	461d      	mov	r5, r3
 80023ae:	4b14      	ldr	r3, [pc, #80]	; (8002400 <readAllSensors+0x1bc>)
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	461a      	mov	r2, r3
 80023b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023b8:	18d4      	adds	r4, r2, r3
 80023ba:	f7ff fc93 	bl	8001ce4 <combine_system_status>
 80023be:	4603      	mov	r3, r0
 80023c0:	4619      	mov	r1, r3
 80023c2:	4a11      	ldr	r2, [pc, #68]	; (8002408 <readAllSensors+0x1c4>)
 80023c4:	022b      	lsls	r3, r5, #8
 80023c6:	4413      	add	r3, r2
 80023c8:	4423      	add	r3, r4
 80023ca:	460a      	mov	r2, r1
 80023cc:	701a      	strb	r2, [r3, #0]
		array_ptr += 1;
 80023ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023d2:	3301      	adds	r3, #1
 80023d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		byte_tracker = byte_tracker + (array_ptr);
 80023d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023dc:	b29a      	uxth	r2, r3
 80023de:	4b08      	ldr	r3, [pc, #32]	; (8002400 <readAllSensors+0x1bc>)
 80023e0:	881b      	ldrh	r3, [r3, #0]
 80023e2:	4413      	add	r3, r2
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	4b06      	ldr	r3, [pc, #24]	; (8002400 <readAllSensors+0x1bc>)
 80023e8:	801a      	strh	r2, [r3, #0]
	}
}
 80023ea:	bf00      	nop
 80023ec:	3728      	adds	r7, #40	; 0x28
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bdb0      	pop	{r4, r5, r7, pc}
 80023f2:	bf00      	nop
 80023f4:	200005bc 	.word	0x200005bc
 80023f8:	200005c4 	.word	0x200005c4
 80023fc:	200005cc 	.word	0x200005cc
 8002400:	200005d8 	.word	0x200005d8
 8002404:	200005b8 	.word	0x200005b8
 8002408:	200003b8 	.word	0x200003b8

0800240c <initialise_rtc_default>:
    .Month = RTC_MONTH_JANUARY, // Set default month (e.g., January)
    .Date = 1, // Set default day of the month
    .Year = 24 // Set default year (e.g., 2021)
};

void initialise_rtc_default(RTC_HandleTypeDef* hrtc) {
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
    // Enable access to the backup domain
    __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< HEAD
 8002414:	2300      	movs	r3, #0
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	4b13      	ldr	r3, [pc, #76]	; (8002468 <initialise_rtc_default+0x5c>)
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	4a12      	ldr	r2, [pc, #72]	; (8002468 <initialise_rtc_default+0x5c>)
 800241e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002422:	6413      	str	r3, [r2, #64]	; 0x40
 8002424:	4b10      	ldr	r3, [pc, #64]	; (8002468 <initialise_rtc_default+0x5c>)
 8002426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242c:	60fb      	str	r3, [r7, #12]
 800242e:	68fb      	ldr	r3, [r7, #12]
    HAL_PWR_EnableBkUpAccess();
 8002430:	f003 fc42 	bl	8005cb8 <HAL_PWR_EnableBkUpAccess>

    // Reset the RTC
    __HAL_RCC_BACKUPRESET_FORCE();
 8002434:	4b0d      	ldr	r3, [pc, #52]	; (800246c <initialise_rtc_default+0x60>)
 8002436:	2201      	movs	r2, #1
 8002438:	601a      	str	r2, [r3, #0]
    __HAL_RCC_BACKUPRESET_RELEASE();
 800243a:	4b0c      	ldr	r3, [pc, #48]	; (800246c <initialise_rtc_default+0x60>)
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]

    // Initialize RTC hardware
    HAL_RTC_MspInit(hrtc);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 fa61 	bl	8002908 <HAL_RTC_MspInit>

    // Set default time and date
    HAL_RTC_SetTime(hrtc, &defaultTime, RTC_FORMAT_BIN);
 8002446:	2200      	movs	r2, #0
 8002448:	4909      	ldr	r1, [pc, #36]	; (8002470 <initialise_rtc_default+0x64>)
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f004 faf7 	bl	8006a3e <HAL_RTC_SetTime>
    HAL_RTC_SetDate(hrtc, &defaultDate, RTC_FORMAT_BIN);
 8002450:	2200      	movs	r2, #0
 8002452:	4908      	ldr	r1, [pc, #32]	; (8002474 <initialise_rtc_default+0x68>)
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f004 fbea 	bl	8006c2e <HAL_RTC_SetDate>

    // Disable access to the backup domain
    HAL_PWR_DisableBkUpAccess();
 800245a:	f003 fc41 	bl	8005ce0 <HAL_PWR_DisableBkUpAccess>
}
 800245e:	bf00      	nop
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40023800 	.word	0x40023800
 800246c:	42470e40 	.word	0x42470e40
 8002470:	20000620 	.word	0x20000620
 8002474:	20000018 	.word	0x20000018

08002478 <getTimestampMilliseconds>:

uint32_t getTimestampMilliseconds(RTC_HandleTypeDef* hrtc) {
 8002478:	b580      	push	{r7, lr}
 800247a:	b08c      	sub	sp, #48	; 0x30
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
=======
 80023d8:	2300      	movs	r3, #0
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	4b13      	ldr	r3, [pc, #76]	; (800242c <initialise_rtc_default+0x5c>)
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	4a12      	ldr	r2, [pc, #72]	; (800242c <initialise_rtc_default+0x5c>)
 80023e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e6:	6413      	str	r3, [r2, #64]	; 0x40
 80023e8:	4b10      	ldr	r3, [pc, #64]	; (800242c <initialise_rtc_default+0x5c>)
 80023ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	68fb      	ldr	r3, [r7, #12]
    HAL_PWR_EnableBkUpAccess();
 80023f4:	f003 fc20 	bl	8005c38 <HAL_PWR_EnableBkUpAccess>

    // Reset the RTC
    __HAL_RCC_BACKUPRESET_FORCE();
 80023f8:	4b0d      	ldr	r3, [pc, #52]	; (8002430 <initialise_rtc_default+0x60>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	601a      	str	r2, [r3, #0]
    __HAL_RCC_BACKUPRESET_RELEASE();
 80023fe:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <initialise_rtc_default+0x60>)
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]

    // Initialize RTC hardware
    HAL_RTC_MspInit(hrtc);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 fa3f 	bl	8002888 <HAL_RTC_MspInit>

    // Set default time and date
    HAL_RTC_SetTime(hrtc, &defaultTime, RTC_FORMAT_BIN);
 800240a:	2200      	movs	r2, #0
 800240c:	4909      	ldr	r1, [pc, #36]	; (8002434 <initialise_rtc_default+0x64>)
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f004 fad5 	bl	80069be <HAL_RTC_SetTime>
    HAL_RTC_SetDate(hrtc, &defaultDate, RTC_FORMAT_BIN);
 8002414:	2200      	movs	r2, #0
 8002416:	4908      	ldr	r1, [pc, #32]	; (8002438 <initialise_rtc_default+0x68>)
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f004 fbc8 	bl	8006bae <HAL_RTC_SetDate>

    // Disable access to the backup domain
    HAL_PWR_DisableBkUpAccess();
 800241e:	f003 fc1f 	bl	8005c60 <HAL_PWR_DisableBkUpAccess>
}
 8002422:	bf00      	nop
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40023800 	.word	0x40023800
 8002430:	42470e40 	.word	0x42470e40
 8002434:	20000620 	.word	0x20000620
 8002438:	20000018 	.word	0x20000018

0800243c <getTimestampMilliseconds>:

uint32_t getTimestampMilliseconds(RTC_HandleTypeDef* hrtc) {
 800243c:	b580      	push	{r7, lr}
 800243e:	b08c      	sub	sp, #48	; 0x30
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
>>>>>>> flight_hardware
    RTC_TimeTypeDef rtcTime;
    RTC_DateTypeDef rtcDate;

    // Read RTC time and date
    HAL_RTC_GetTime(hrtc, &rtcTime, RTC_FORMAT_BIN);
<<<<<<< HEAD
 8002480:	f107 0310 	add.w	r3, r7, #16
 8002484:	2200      	movs	r2, #0
 8002486:	4619      	mov	r1, r3
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f004 fb72 	bl	8006b72 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(hrtc, &rtcDate, RTC_FORMAT_BIN);
 800248e:	f107 030c 	add.w	r3, r7, #12
 8002492:	2200      	movs	r2, #0
 8002494:	4619      	mov	r1, r3
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f004 fc4d 	bl	8006d36 <HAL_RTC_GetDate>

    // Calculate timestamp in milliseconds
    uint32_t timestampSeconds = rtcTime.Seconds + rtcTime.Minutes * 60 + rtcTime.Hours * 3600;
 800249c:	7cbb      	ldrb	r3, [r7, #18]
 800249e:	4619      	mov	r1, r3
 80024a0:	7c7b      	ldrb	r3, [r7, #17]
 80024a2:	461a      	mov	r2, r3
 80024a4:	4613      	mov	r3, r2
 80024a6:	011b      	lsls	r3, r3, #4
 80024a8:	1a9b      	subs	r3, r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	18ca      	adds	r2, r1, r3
 80024ae:	7c3b      	ldrb	r3, [r7, #16]
 80024b0:	4619      	mov	r1, r3
 80024b2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80024b6:	fb01 f303 	mul.w	r3, r1, r3
 80024ba:	4413      	add	r3, r2
 80024bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t timestampMilliseconds = timestampSeconds * 1000;
 80024be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024c4:	fb02 f303 	mul.w	r3, r2, r3
 80024c8:	62bb      	str	r3, [r7, #40]	; 0x28
    float subsecondsFraction = (float)(rtcTime.SecondFraction - rtcTime.SubSeconds) / (rtcTime.SecondFraction + 1);
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	ee07 3a90 	vmov	s15, r3
 80024d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	3301      	adds	r3, #1
 80024dc:	ee07 3a90 	vmov	s15, r3
 80024e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024e8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    timestampMilliseconds += subsecondsFraction * 1000;
 80024ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ee:	ee07 3a90 	vmov	s15, r3
 80024f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024f6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80024fa:	eddf 6a08 	vldr	s13, [pc, #32]	; 800251c <getTimestampMilliseconds+0xa4>
 80024fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002502:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002506:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800250a:	ee17 3a90 	vmov	r3, s15
 800250e:	62bb      	str	r3, [r7, #40]	; 0x28

    return timestampMilliseconds;
 8002510:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002512:	4618      	mov	r0, r3
 8002514:	3730      	adds	r7, #48	; 0x30
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	447a0000 	.word	0x447a0000

08002520 <spi_sendOp_readByte>:
=======
 8002444:	f107 0310 	add.w	r3, r7, #16
 8002448:	2200      	movs	r2, #0
 800244a:	4619      	mov	r1, r3
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f004 fb50 	bl	8006af2 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(hrtc, &rtcDate, RTC_FORMAT_BIN);
 8002452:	f107 030c 	add.w	r3, r7, #12
 8002456:	2200      	movs	r2, #0
 8002458:	4619      	mov	r1, r3
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f004 fc2b 	bl	8006cb6 <HAL_RTC_GetDate>

    // Calculate timestamp in milliseconds
    uint32_t timestampSeconds = rtcTime.Seconds + rtcTime.Minutes * 60 + rtcTime.Hours * 3600;
 8002460:	7cbb      	ldrb	r3, [r7, #18]
 8002462:	4619      	mov	r1, r3
 8002464:	7c7b      	ldrb	r3, [r7, #17]
 8002466:	461a      	mov	r2, r3
 8002468:	4613      	mov	r3, r2
 800246a:	011b      	lsls	r3, r3, #4
 800246c:	1a9b      	subs	r3, r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	18ca      	adds	r2, r1, r3
 8002472:	7c3b      	ldrb	r3, [r7, #16]
 8002474:	4619      	mov	r1, r3
 8002476:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800247a:	fb01 f303 	mul.w	r3, r1, r3
 800247e:	4413      	add	r3, r2
 8002480:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t timestampMilliseconds = timestampSeconds * 1000;
 8002482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002484:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002488:	fb02 f303 	mul.w	r3, r2, r3
 800248c:	62bb      	str	r3, [r7, #40]	; 0x28
    float subsecondsFraction = (float)(rtcTime.SecondFraction - rtcTime.SubSeconds) / (rtcTime.SecondFraction + 1);
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	ee07 3a90 	vmov	s15, r3
 8002498:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	3301      	adds	r3, #1
 80024a0:	ee07 3a90 	vmov	s15, r3
 80024a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024ac:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    timestampMilliseconds += subsecondsFraction * 1000;
 80024b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b2:	ee07 3a90 	vmov	s15, r3
 80024b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024ba:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80024be:	eddf 6a08 	vldr	s13, [pc, #32]	; 80024e0 <getTimestampMilliseconds+0xa4>
 80024c2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80024c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024ce:	ee17 3a90 	vmov	r3, s15
 80024d2:	62bb      	str	r3, [r7, #40]	; 0x28

    return timestampMilliseconds;
 80024d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3730      	adds	r7, #48	; 0x30
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	447a0000 	.word	0x447a0000

080024e4 <spi_sendOp_readByte>:
>>>>>>> flight_hardware
#ifndef SRC_SPI_DRIVER_C_
#define SRC_SPI_DRIVER_C_

#include "spi_driver.h"

HAL_StatusTypeDef spi_sendOp_readByte(uint8_t* opcode, SPI_HandleTypeDef *hspi, uint8_t* data_ptr, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
<<<<<<< HEAD
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
 800252c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status;
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);	// Set the chip select pin to low to initiate SPI comms
 800252e:	8c3b      	ldrh	r3, [r7, #32]
 8002530:	2200      	movs	r2, #0
 8002532:	4619      	mov	r1, r3
 8002534:	6838      	ldr	r0, [r7, #0]
 8002536:	f002 fafd 	bl	8004b34 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, opcode, 1, TIMEOUT_SML);			// Write the write enable value to the Flash to initial reading
 800253a:	2302      	movs	r3, #2
 800253c:	2201      	movs	r2, #1
 800253e:	68f9      	ldr	r1, [r7, #12]
 8002540:	68b8      	ldr	r0, [r7, #8]
 8002542:	f004 fd8e 	bl	8007062 <HAL_SPI_Transmit>
	status = HAL_SPI_Receive(hspi, data_ptr, 1, TIMEOUT_SML);
 8002546:	2302      	movs	r3, #2
 8002548:	2201      	movs	r2, #1
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	68b8      	ldr	r0, [r7, #8]
 800254e:	f004 fecb 	bl	80072e8 <HAL_SPI_Receive>
 8002552:	4603      	mov	r3, r0
 8002554:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);
 8002556:	8c3b      	ldrh	r3, [r7, #32]
 8002558:	2201      	movs	r2, #1
 800255a:	4619      	mov	r1, r3
 800255c:	6838      	ldr	r0, [r7, #0]
 800255e:	f002 fae9 	bl	8004b34 <HAL_GPIO_WritePin>
	return status;
 8002562:	7dfb      	ldrb	r3, [r7, #23]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <perform_operation>:

HAL_StatusTypeDef perform_operation(uint8_t* opcode, SPI_HandleTypeDef *hspi, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
 8002578:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef status;
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);				// Set the chip select pin to low to initiate SPI comms
 800257a:	887b      	ldrh	r3, [r7, #2]
 800257c:	2200      	movs	r2, #0
 800257e:	4619      	mov	r1, r3
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f002 fad7 	bl	8004b34 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(hspi, opcode, 1, TIMEOUT_SML);				// Write the opcode value
 8002586:	2302      	movs	r3, #2
 8002588:	2201      	movs	r2, #1
 800258a:	68f9      	ldr	r1, [r7, #12]
 800258c:	68b8      	ldr	r0, [r7, #8]
 800258e:	f004 fd68 	bl	8007062 <HAL_SPI_Transmit>
 8002592:	4603      	mov	r3, r0
 8002594:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);
 8002596:	887b      	ldrh	r3, [r7, #2]
 8002598:	2201      	movs	r2, #1
 800259a:	4619      	mov	r1, r3
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f002 fac9 	bl	8004b34 <HAL_GPIO_WritePin>

	return status;
 80025a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <spi_read_data>:

HAL_StatusTypeDef spi_read_data(uint8_t* opcode, uint16_t data_size, uint8_t data_read[data_size], SPI_HandleTypeDef *hspi, uint32_t addr, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	607a      	str	r2, [r7, #4]
 80025b6:	603b      	str	r3, [r7, #0]
 80025b8:	460b      	mov	r3, r1
 80025ba:	817b      	strh	r3, [r7, #10]
=======
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
 80024f0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status;
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);	// Set the chip select pin to low to initiate SPI comms
 80024f2:	8c3b      	ldrh	r3, [r7, #32]
 80024f4:	2200      	movs	r2, #0
 80024f6:	4619      	mov	r1, r3
 80024f8:	6838      	ldr	r0, [r7, #0]
 80024fa:	f002 fadb 	bl	8004ab4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, opcode, 1, TIMEOUT_SML);			// Write the write enable value to the Flash to initial reading
 80024fe:	2302      	movs	r3, #2
 8002500:	2201      	movs	r2, #1
 8002502:	68f9      	ldr	r1, [r7, #12]
 8002504:	68b8      	ldr	r0, [r7, #8]
 8002506:	f004 fd6c 	bl	8006fe2 <HAL_SPI_Transmit>
	status = HAL_SPI_Receive(hspi, data_ptr, 1, TIMEOUT_SML);
 800250a:	2302      	movs	r3, #2
 800250c:	2201      	movs	r2, #1
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	68b8      	ldr	r0, [r7, #8]
 8002512:	f004 fea9 	bl	8007268 <HAL_SPI_Receive>
 8002516:	4603      	mov	r3, r0
 8002518:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);
 800251a:	8c3b      	ldrh	r3, [r7, #32]
 800251c:	2201      	movs	r2, #1
 800251e:	4619      	mov	r1, r3
 8002520:	6838      	ldr	r0, [r7, #0]
 8002522:	f002 fac7 	bl	8004ab4 <HAL_GPIO_WritePin>
	return status;
 8002526:	7dfb      	ldrb	r3, [r7, #23]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3718      	adds	r7, #24
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <perform_operation>:

HAL_StatusTypeDef perform_operation(uint8_t* opcode, SPI_HandleTypeDef *hspi, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
 800253c:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef status;
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);				// Set the chip select pin to low to initiate SPI comms
 800253e:	887b      	ldrh	r3, [r7, #2]
 8002540:	2200      	movs	r2, #0
 8002542:	4619      	mov	r1, r3
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f002 fab5 	bl	8004ab4 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(hspi, opcode, 1, TIMEOUT_SML);				// Write the opcode value
 800254a:	2302      	movs	r3, #2
 800254c:	2201      	movs	r2, #1
 800254e:	68f9      	ldr	r1, [r7, #12]
 8002550:	68b8      	ldr	r0, [r7, #8]
 8002552:	f004 fd46 	bl	8006fe2 <HAL_SPI_Transmit>
 8002556:	4603      	mov	r3, r0
 8002558:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);
 800255a:	887b      	ldrh	r3, [r7, #2]
 800255c:	2201      	movs	r2, #1
 800255e:	4619      	mov	r1, r3
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f002 faa7 	bl	8004ab4 <HAL_GPIO_WritePin>

	return status;
 8002566:	7dfb      	ldrb	r3, [r7, #23]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3718      	adds	r7, #24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <spi_read_data>:

HAL_StatusTypeDef spi_read_data(uint8_t* opcode, uint16_t data_size, uint8_t data_read[data_size], SPI_HandleTypeDef *hspi, uint32_t addr, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	607a      	str	r2, [r7, #4]
 800257a:	603b      	str	r3, [r7, #0]
 800257c:	460b      	mov	r3, r1
 800257e:	817b      	strh	r3, [r7, #10]
>>>>>>> flight_hardware
	HAL_StatusTypeDef status;

	// Split the 24 bit address into three 8 bit ints
	uint8_t addrL = addr & 0xFF;  // Get the low byte
<<<<<<< HEAD
 80025bc:	6a3b      	ldr	r3, [r7, #32]
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	75bb      	strb	r3, [r7, #22]
	uint8_t addrM = (addr >> 8) & 0xFF;  // Get the middle byte
 80025c2:	6a3b      	ldr	r3, [r7, #32]
 80025c4:	0a1b      	lsrs	r3, r3, #8
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	757b      	strb	r3, [r7, #21]
	uint8_t addrH = (addr >> 16) & 0xFF;  // Get the high byte
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	0c1b      	lsrs	r3, r3, #16
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	753b      	strb	r3, [r7, #20]

	// Read the data denoted by the given address
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);
 80025d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80025d4:	2200      	movs	r2, #0
 80025d6:	4619      	mov	r1, r3
 80025d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025da:	f002 faab 	bl	8004b34 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, opcode, 1, TIMEOUT_SML);	// Write the read enable value
 80025de:	2302      	movs	r3, #2
 80025e0:	2201      	movs	r2, #1
 80025e2:	68f9      	ldr	r1, [r7, #12]
 80025e4:	6838      	ldr	r0, [r7, #0]
 80025e6:	f004 fd3c 	bl	8007062 <HAL_SPI_Transmit>

	// Transmit the 24 bit address of the page to initialise read from
	HAL_SPI_Transmit(hspi, &addrH, 1, TIMEOUT_SML);
 80025ea:	f107 0114 	add.w	r1, r7, #20
 80025ee:	2302      	movs	r3, #2
 80025f0:	2201      	movs	r2, #1
 80025f2:	6838      	ldr	r0, [r7, #0]
 80025f4:	f004 fd35 	bl	8007062 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &addrM, 1, TIMEOUT_SML);
 80025f8:	f107 0115 	add.w	r1, r7, #21
 80025fc:	2302      	movs	r3, #2
 80025fe:	2201      	movs	r2, #1
 8002600:	6838      	ldr	r0, [r7, #0]
 8002602:	f004 fd2e 	bl	8007062 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &addrL, 1, TIMEOUT_SML);
 8002606:	f107 0116 	add.w	r1, r7, #22
 800260a:	2302      	movs	r3, #2
 800260c:	2201      	movs	r2, #1
 800260e:	6838      	ldr	r0, [r7, #0]
 8002610:	f004 fd27 	bl	8007062 <HAL_SPI_Transmit>

	status = HAL_SPI_Receive(hspi, data_read, data_size, TIMEOUT_LRG);
 8002614:	897a      	ldrh	r2, [r7, #10]
 8002616:	2364      	movs	r3, #100	; 0x64
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	6838      	ldr	r0, [r7, #0]
 800261c:	f004 fe64 	bl	80072e8 <HAL_SPI_Receive>
 8002620:	4603      	mov	r3, r0
 8002622:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);
 8002624:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002626:	2201      	movs	r2, #1
 8002628:	4619      	mov	r1, r3
 800262a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800262c:	f002 fa82 	bl	8004b34 <HAL_GPIO_WritePin>

	return status;
 8002630:	7dfb      	ldrb	r3, [r7, #23]
}
 8002632:	4618      	mov	r0, r3
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <spi_write_data_dma>:
=======
 8002580:	6a3b      	ldr	r3, [r7, #32]
 8002582:	b2db      	uxtb	r3, r3
 8002584:	75bb      	strb	r3, [r7, #22]
	uint8_t addrM = (addr >> 8) & 0xFF;  // Get the middle byte
 8002586:	6a3b      	ldr	r3, [r7, #32]
 8002588:	0a1b      	lsrs	r3, r3, #8
 800258a:	b2db      	uxtb	r3, r3
 800258c:	757b      	strb	r3, [r7, #21]
	uint8_t addrH = (addr >> 16) & 0xFF;  // Get the high byte
 800258e:	6a3b      	ldr	r3, [r7, #32]
 8002590:	0c1b      	lsrs	r3, r3, #16
 8002592:	b2db      	uxtb	r3, r3
 8002594:	753b      	strb	r3, [r7, #20]

	// Read the data denoted by the given address
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);
 8002596:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002598:	2200      	movs	r2, #0
 800259a:	4619      	mov	r1, r3
 800259c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800259e:	f002 fa89 	bl	8004ab4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, opcode, 1, TIMEOUT_SML);	// Write the read enable value
 80025a2:	2302      	movs	r3, #2
 80025a4:	2201      	movs	r2, #1
 80025a6:	68f9      	ldr	r1, [r7, #12]
 80025a8:	6838      	ldr	r0, [r7, #0]
 80025aa:	f004 fd1a 	bl	8006fe2 <HAL_SPI_Transmit>

	// Transmit the 24 bit address of the page to initialise read from
	HAL_SPI_Transmit(hspi, &addrH, 1, TIMEOUT_SML);
 80025ae:	f107 0114 	add.w	r1, r7, #20
 80025b2:	2302      	movs	r3, #2
 80025b4:	2201      	movs	r2, #1
 80025b6:	6838      	ldr	r0, [r7, #0]
 80025b8:	f004 fd13 	bl	8006fe2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &addrM, 1, TIMEOUT_SML);
 80025bc:	f107 0115 	add.w	r1, r7, #21
 80025c0:	2302      	movs	r3, #2
 80025c2:	2201      	movs	r2, #1
 80025c4:	6838      	ldr	r0, [r7, #0]
 80025c6:	f004 fd0c 	bl	8006fe2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &addrL, 1, TIMEOUT_SML);
 80025ca:	f107 0116 	add.w	r1, r7, #22
 80025ce:	2302      	movs	r3, #2
 80025d0:	2201      	movs	r2, #1
 80025d2:	6838      	ldr	r0, [r7, #0]
 80025d4:	f004 fd05 	bl	8006fe2 <HAL_SPI_Transmit>

	status = HAL_SPI_Receive(hspi, data_read, data_size, TIMEOUT_LRG);
 80025d8:	897a      	ldrh	r2, [r7, #10]
 80025da:	2364      	movs	r3, #100	; 0x64
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	6838      	ldr	r0, [r7, #0]
 80025e0:	f004 fe42 	bl	8007268 <HAL_SPI_Receive>
 80025e4:	4603      	mov	r3, r0
 80025e6:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);
 80025e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80025ea:	2201      	movs	r2, #1
 80025ec:	4619      	mov	r1, r3
 80025ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025f0:	f002 fa60 	bl	8004ab4 <HAL_GPIO_WritePin>

	return status;
 80025f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <spi_write_data_dma>:
>>>>>>> flight_hardware
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);	// Set the chip select pin to high to remove the Flash from the SPI bus

	return status;
}

HAL_StatusTypeDef spi_write_data_dma(uint8_t* opcode, uint16_t data_size, uint8_t data_write[data_size], SPI_HandleTypeDef *hspi, uint32_t addr, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
<<<<<<< HEAD
 800263a:	b580      	push	{r7, lr}
 800263c:	b086      	sub	sp, #24
 800263e:	af00      	add	r7, sp, #0
 8002640:	60f8      	str	r0, [r7, #12]
 8002642:	607a      	str	r2, [r7, #4]
 8002644:	603b      	str	r3, [r7, #0]
 8002646:	460b      	mov	r3, r1
 8002648:	817b      	strh	r3, [r7, #10]
=======
 80025fe:	b580      	push	{r7, lr}
 8002600:	b086      	sub	sp, #24
 8002602:	af00      	add	r7, sp, #0
 8002604:	60f8      	str	r0, [r7, #12]
 8002606:	607a      	str	r2, [r7, #4]
 8002608:	603b      	str	r3, [r7, #0]
 800260a:	460b      	mov	r3, r1
 800260c:	817b      	strh	r3, [r7, #10]
>>>>>>> flight_hardware
    HAL_StatusTypeDef status;

    // Split the 24 bit address into three 8 bit ints
    uint8_t addrL = addr & 0xFF;  			// Get the low byte
<<<<<<< HEAD
 800264a:	6a3b      	ldr	r3, [r7, #32]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	75bb      	strb	r3, [r7, #22]
    uint8_t addrM = (addr >> 8) & 0xFF;  	// Get the middle byte
 8002650:	6a3b      	ldr	r3, [r7, #32]
 8002652:	0a1b      	lsrs	r3, r3, #8
 8002654:	b2db      	uxtb	r3, r3
 8002656:	757b      	strb	r3, [r7, #21]
    uint8_t addrH = (addr >> 16) & 0xFF;  	// Get the high byte
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	0c1b      	lsrs	r3, r3, #16
 800265c:	b2db      	uxtb	r3, r3
 800265e:	753b      	strb	r3, [r7, #20]

    // Send the PageWrite command
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);	// Set the chip select pin to low to initiate SPI comms
 8002660:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002662:	2200      	movs	r2, #0
 8002664:	4619      	mov	r1, r3
 8002666:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002668:	f002 fa64 	bl	8004b34 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(hspi, opcode, 1, TIMEOUT_SML);					// Write the write enable value to the Flash to initial writing
 800266c:	2302      	movs	r3, #2
 800266e:	2201      	movs	r2, #1
 8002670:	68f9      	ldr	r1, [r7, #12]
 8002672:	6838      	ldr	r0, [r7, #0]
 8002674:	f004 fcf5 	bl	8007062 <HAL_SPI_Transmit>

    // Transmit the 24 bit address of the page to write to
    HAL_SPI_Transmit(hspi, &addrH, 1, TIMEOUT_SML);
 8002678:	f107 0114 	add.w	r1, r7, #20
 800267c:	2302      	movs	r3, #2
 800267e:	2201      	movs	r2, #1
 8002680:	6838      	ldr	r0, [r7, #0]
 8002682:	f004 fcee 	bl	8007062 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hspi, &addrM, 1, TIMEOUT_SML);
 8002686:	f107 0115 	add.w	r1, r7, #21
 800268a:	2302      	movs	r3, #2
 800268c:	2201      	movs	r2, #1
 800268e:	6838      	ldr	r0, [r7, #0]
 8002690:	f004 fce7 	bl	8007062 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hspi, &addrL, 1, TIMEOUT_SML);
 8002694:	f107 0116 	add.w	r1, r7, #22
 8002698:	2302      	movs	r3, #2
 800269a:	2201      	movs	r2, #1
 800269c:	6838      	ldr	r0, [r7, #0]
 800269e:	f004 fce0 	bl	8007062 <HAL_SPI_Transmit>

    // Start the DMA transfer
    status = HAL_SPI_Transmit_DMA(hspi, data_write, data_size);
 80026a2:	897b      	ldrh	r3, [r7, #10]
 80026a4:	461a      	mov	r2, r3
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	6838      	ldr	r0, [r7, #0]
 80026aa:	f005 f8e5 	bl	8007878 <HAL_SPI_Transmit_DMA>
 80026ae:	4603      	mov	r3, r0
 80026b0:	75fb      	strb	r3, [r7, #23]

    return status;
 80026b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_MspInit>:
=======
 800260e:	6a3b      	ldr	r3, [r7, #32]
 8002610:	b2db      	uxtb	r3, r3
 8002612:	75bb      	strb	r3, [r7, #22]
    uint8_t addrM = (addr >> 8) & 0xFF;  	// Get the middle byte
 8002614:	6a3b      	ldr	r3, [r7, #32]
 8002616:	0a1b      	lsrs	r3, r3, #8
 8002618:	b2db      	uxtb	r3, r3
 800261a:	757b      	strb	r3, [r7, #21]
    uint8_t addrH = (addr >> 16) & 0xFF;  	// Get the high byte
 800261c:	6a3b      	ldr	r3, [r7, #32]
 800261e:	0c1b      	lsrs	r3, r3, #16
 8002620:	b2db      	uxtb	r3, r3
 8002622:	753b      	strb	r3, [r7, #20]

    // Send the PageWrite command
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);	// Set the chip select pin to low to initiate SPI comms
 8002624:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002626:	2200      	movs	r2, #0
 8002628:	4619      	mov	r1, r3
 800262a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800262c:	f002 fa42 	bl	8004ab4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(hspi, opcode, 1, TIMEOUT_SML);					// Write the write enable value to the Flash to initial writing
 8002630:	2302      	movs	r3, #2
 8002632:	2201      	movs	r2, #1
 8002634:	68f9      	ldr	r1, [r7, #12]
 8002636:	6838      	ldr	r0, [r7, #0]
 8002638:	f004 fcd3 	bl	8006fe2 <HAL_SPI_Transmit>

    // Transmit the 24 bit address of the page to write to
    HAL_SPI_Transmit(hspi, &addrH, 1, TIMEOUT_SML);
 800263c:	f107 0114 	add.w	r1, r7, #20
 8002640:	2302      	movs	r3, #2
 8002642:	2201      	movs	r2, #1
 8002644:	6838      	ldr	r0, [r7, #0]
 8002646:	f004 fccc 	bl	8006fe2 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hspi, &addrM, 1, TIMEOUT_SML);
 800264a:	f107 0115 	add.w	r1, r7, #21
 800264e:	2302      	movs	r3, #2
 8002650:	2201      	movs	r2, #1
 8002652:	6838      	ldr	r0, [r7, #0]
 8002654:	f004 fcc5 	bl	8006fe2 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hspi, &addrL, 1, TIMEOUT_SML);
 8002658:	f107 0116 	add.w	r1, r7, #22
 800265c:	2302      	movs	r3, #2
 800265e:	2201      	movs	r2, #1
 8002660:	6838      	ldr	r0, [r7, #0]
 8002662:	f004 fcbe 	bl	8006fe2 <HAL_SPI_Transmit>

    // Start the DMA transfer
    status = HAL_SPI_Transmit_DMA(hspi, data_write, data_size);
 8002666:	897b      	ldrh	r3, [r7, #10]
 8002668:	461a      	mov	r2, r3
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	6838      	ldr	r0, [r7, #0]
 800266e:	f005 f8c3 	bl	80077f8 <HAL_SPI_Transmit_DMA>
 8002672:	4603      	mov	r3, r0
 8002674:	75fb      	strb	r3, [r7, #23]

    return status;
 8002676:	7dfb      	ldrb	r3, [r7, #23]
}
 8002678:	4618      	mov	r0, r3
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <HAL_MspInit>:
>>>>>>> flight_hardware
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
=======
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
>>>>>>> flight_hardware
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
 80026c2:	2300      	movs	r3, #0
 80026c4:	607b      	str	r3, [r7, #4]
 80026c6:	4b10      	ldr	r3, [pc, #64]	; (8002708 <HAL_MspInit+0x4c>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	4a0f      	ldr	r2, [pc, #60]	; (8002708 <HAL_MspInit+0x4c>)
 80026cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026d0:	6453      	str	r3, [r2, #68]	; 0x44
 80026d2:	4b0d      	ldr	r3, [pc, #52]	; (8002708 <HAL_MspInit+0x4c>)
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026da:	607b      	str	r3, [r7, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	603b      	str	r3, [r7, #0]
 80026e2:	4b09      	ldr	r3, [pc, #36]	; (8002708 <HAL_MspInit+0x4c>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	4a08      	ldr	r2, [pc, #32]	; (8002708 <HAL_MspInit+0x4c>)
 80026e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ec:	6413      	str	r3, [r2, #64]	; 0x40
 80026ee:	4b06      	ldr	r3, [pc, #24]	; (8002708 <HAL_MspInit+0x4c>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f6:	603b      	str	r3, [r7, #0]
 80026f8:	683b      	ldr	r3, [r7, #0]
=======
 8002686:	2300      	movs	r3, #0
 8002688:	607b      	str	r3, [r7, #4]
 800268a:	4b10      	ldr	r3, [pc, #64]	; (80026cc <HAL_MspInit+0x4c>)
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268e:	4a0f      	ldr	r2, [pc, #60]	; (80026cc <HAL_MspInit+0x4c>)
 8002690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002694:	6453      	str	r3, [r2, #68]	; 0x44
 8002696:	4b0d      	ldr	r3, [pc, #52]	; (80026cc <HAL_MspInit+0x4c>)
 8002698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800269e:	607b      	str	r3, [r7, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	603b      	str	r3, [r7, #0]
 80026a6:	4b09      	ldr	r3, [pc, #36]	; (80026cc <HAL_MspInit+0x4c>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	4a08      	ldr	r2, [pc, #32]	; (80026cc <HAL_MspInit+0x4c>)
 80026ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b0:	6413      	str	r3, [r2, #64]	; 0x40
 80026b2:	4b06      	ldr	r3, [pc, #24]	; (80026cc <HAL_MspInit+0x4c>)
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ba:	603b      	str	r3, [r7, #0]
 80026bc:	683b      	ldr	r3, [r7, #0]
>>>>>>> flight_hardware
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40023800 	.word	0x40023800

0800270c <HAL_CAN_MspInit>:
=======
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	40023800 	.word	0x40023800

080026d0 <HAL_CAN_MspInit>:
>>>>>>> flight_hardware
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
<<<<<<< HEAD
 800270c:	b580      	push	{r7, lr}
 800270e:	b08a      	sub	sp, #40	; 0x28
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002714:	f107 0314 	add.w	r3, r7, #20
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	605a      	str	r2, [r3, #4]
 800271e:	609a      	str	r2, [r3, #8]
 8002720:	60da      	str	r2, [r3, #12]
 8002722:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a24      	ldr	r2, [pc, #144]	; (80027bc <HAL_CAN_MspInit+0xb0>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d141      	bne.n	80027b2 <HAL_CAN_MspInit+0xa6>
=======
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b08a      	sub	sp, #40	; 0x28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d8:	f107 0314 	add.w	r3, r7, #20
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	609a      	str	r2, [r3, #8]
 80026e4:	60da      	str	r2, [r3, #12]
 80026e6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a24      	ldr	r2, [pc, #144]	; (8002780 <HAL_CAN_MspInit+0xb0>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d141      	bne.n	8002776 <HAL_CAN_MspInit+0xa6>
>>>>>>> flight_hardware
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
<<<<<<< HEAD
 800272e:	2300      	movs	r3, #0
 8002730:	613b      	str	r3, [r7, #16]
 8002732:	4b23      	ldr	r3, [pc, #140]	; (80027c0 <HAL_CAN_MspInit+0xb4>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	4a22      	ldr	r2, [pc, #136]	; (80027c0 <HAL_CAN_MspInit+0xb4>)
 8002738:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800273c:	6413      	str	r3, [r2, #64]	; 0x40
 800273e:	4b20      	ldr	r3, [pc, #128]	; (80027c0 <HAL_CAN_MspInit+0xb4>)
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002746:	613b      	str	r3, [r7, #16]
 8002748:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	4b1c      	ldr	r3, [pc, #112]	; (80027c0 <HAL_CAN_MspInit+0xb4>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	4a1b      	ldr	r2, [pc, #108]	; (80027c0 <HAL_CAN_MspInit+0xb4>)
 8002754:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002758:	6413      	str	r3, [r2, #64]	; 0x40
 800275a:	4b19      	ldr	r3, [pc, #100]	; (80027c0 <HAL_CAN_MspInit+0xb4>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	60bb      	str	r3, [r7, #8]
 800276a:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <HAL_CAN_MspInit+0xb4>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	4a14      	ldr	r2, [pc, #80]	; (80027c0 <HAL_CAN_MspInit+0xb4>)
 8002770:	f043 0302 	orr.w	r3, r3, #2
 8002774:	6313      	str	r3, [r2, #48]	; 0x30
 8002776:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <HAL_CAN_MspInit+0xb4>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	60bb      	str	r3, [r7, #8]
 8002780:	68bb      	ldr	r3, [r7, #8]
=======
 80026f2:	2300      	movs	r3, #0
 80026f4:	613b      	str	r3, [r7, #16]
 80026f6:	4b23      	ldr	r3, [pc, #140]	; (8002784 <HAL_CAN_MspInit+0xb4>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	4a22      	ldr	r2, [pc, #136]	; (8002784 <HAL_CAN_MspInit+0xb4>)
 80026fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002700:	6413      	str	r3, [r2, #64]	; 0x40
 8002702:	4b20      	ldr	r3, [pc, #128]	; (8002784 <HAL_CAN_MspInit+0xb4>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800270a:	613b      	str	r3, [r7, #16]
 800270c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	4b1c      	ldr	r3, [pc, #112]	; (8002784 <HAL_CAN_MspInit+0xb4>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	4a1b      	ldr	r2, [pc, #108]	; (8002784 <HAL_CAN_MspInit+0xb4>)
 8002718:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800271c:	6413      	str	r3, [r2, #64]	; 0x40
 800271e:	4b19      	ldr	r3, [pc, #100]	; (8002784 <HAL_CAN_MspInit+0xb4>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	4b15      	ldr	r3, [pc, #84]	; (8002784 <HAL_CAN_MspInit+0xb4>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	4a14      	ldr	r2, [pc, #80]	; (8002784 <HAL_CAN_MspInit+0xb4>)
 8002734:	f043 0302 	orr.w	r3, r3, #2
 8002738:	6313      	str	r3, [r2, #48]	; 0x30
 800273a:	4b12      	ldr	r3, [pc, #72]	; (8002784 <HAL_CAN_MspInit+0xb4>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	60bb      	str	r3, [r7, #8]
 8002744:	68bb      	ldr	r3, [r7, #8]
>>>>>>> flight_hardware
    /**CAN2 GPIO Configuration
    PB5     ------> CAN2_RX
    PB6     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
<<<<<<< HEAD
 8002782:	2360      	movs	r3, #96	; 0x60
 8002784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002786:	2302      	movs	r3, #2
 8002788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278a:	2300      	movs	r3, #0
 800278c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800278e:	2303      	movs	r3, #3
 8002790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002792:	2309      	movs	r3, #9
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002796:	f107 0314 	add.w	r3, r7, #20
 800279a:	4619      	mov	r1, r3
 800279c:	4809      	ldr	r0, [pc, #36]	; (80027c4 <HAL_CAN_MspInit+0xb8>)
 800279e:	f002 f805 	bl	80047ac <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80027a2:	2200      	movs	r2, #0
 80027a4:	2100      	movs	r1, #0
 80027a6:	2040      	movs	r0, #64	; 0x40
 80027a8:	f001 fbc7 	bl	8003f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80027ac:	2040      	movs	r0, #64	; 0x40
 80027ae:	f001 fbe0 	bl	8003f72 <HAL_NVIC_EnableIRQ>
=======
 8002746:	2360      	movs	r3, #96	; 0x60
 8002748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274a:	2302      	movs	r3, #2
 800274c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274e:	2300      	movs	r3, #0
 8002750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002752:	2303      	movs	r3, #3
 8002754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002756:	2309      	movs	r3, #9
 8002758:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800275a:	f107 0314 	add.w	r3, r7, #20
 800275e:	4619      	mov	r1, r3
 8002760:	4809      	ldr	r0, [pc, #36]	; (8002788 <HAL_CAN_MspInit+0xb8>)
 8002762:	f001 ffe3 	bl	800472c <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8002766:	2200      	movs	r2, #0
 8002768:	2100      	movs	r1, #0
 800276a:	2040      	movs	r0, #64	; 0x40
 800276c:	f001 fba5 	bl	8003eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8002770:	2040      	movs	r0, #64	; 0x40
 8002772:	f001 fbbe 	bl	8003ef2 <HAL_NVIC_EnableIRQ>
>>>>>>> flight_hardware
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
<<<<<<< HEAD
 80027b2:	bf00      	nop
 80027b4:	3728      	adds	r7, #40	; 0x28
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40006800 	.word	0x40006800
 80027c0:	40023800 	.word	0x40023800
 80027c4:	40020400 	.word	0x40020400

080027c8 <HAL_I2C_MspInit>:
=======
 8002776:	bf00      	nop
 8002778:	3728      	adds	r7, #40	; 0x28
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40006800 	.word	0x40006800
 8002784:	40023800 	.word	0x40023800
 8002788:	40020400 	.word	0x40020400

0800278c <HAL_I2C_MspInit>:
>>>>>>> flight_hardware
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
<<<<<<< HEAD
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08c      	sub	sp, #48	; 0x30
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d0:	f107 031c 	add.w	r3, r7, #28
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	605a      	str	r2, [r3, #4]
 80027da:	609a      	str	r2, [r3, #8]
 80027dc:	60da      	str	r2, [r3, #12]
 80027de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a42      	ldr	r2, [pc, #264]	; (80028f0 <HAL_I2C_MspInit+0x128>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d12d      	bne.n	8002846 <HAL_I2C_MspInit+0x7e>
=======
 800278c:	b580      	push	{r7, lr}
 800278e:	b08c      	sub	sp, #48	; 0x30
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002794:	f107 031c 	add.w	r3, r7, #28
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	605a      	str	r2, [r3, #4]
 800279e:	609a      	str	r2, [r3, #8]
 80027a0:	60da      	str	r2, [r3, #12]
 80027a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a33      	ldr	r2, [pc, #204]	; (8002878 <HAL_I2C_MspInit+0xec>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d12d      	bne.n	800280a <HAL_I2C_MspInit+0x7e>
>>>>>>> flight_hardware
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
<<<<<<< HEAD
 80027ea:	2300      	movs	r3, #0
 80027ec:	61bb      	str	r3, [r7, #24]
 80027ee:	4b41      	ldr	r3, [pc, #260]	; (80028f4 <HAL_I2C_MspInit+0x12c>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	4a40      	ldr	r2, [pc, #256]	; (80028f4 <HAL_I2C_MspInit+0x12c>)
 80027f4:	f043 0302 	orr.w	r3, r3, #2
 80027f8:	6313      	str	r3, [r2, #48]	; 0x30
 80027fa:	4b3e      	ldr	r3, [pc, #248]	; (80028f4 <HAL_I2C_MspInit+0x12c>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	61bb      	str	r3, [r7, #24]
 8002804:	69bb      	ldr	r3, [r7, #24]
=======
 80027ae:	2300      	movs	r3, #0
 80027b0:	61bb      	str	r3, [r7, #24]
 80027b2:	4b32      	ldr	r3, [pc, #200]	; (800287c <HAL_I2C_MspInit+0xf0>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	4a31      	ldr	r2, [pc, #196]	; (800287c <HAL_I2C_MspInit+0xf0>)
 80027b8:	f043 0302 	orr.w	r3, r3, #2
 80027bc:	6313      	str	r3, [r2, #48]	; 0x30
 80027be:	4b2f      	ldr	r3, [pc, #188]	; (800287c <HAL_I2C_MspInit+0xf0>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	61bb      	str	r3, [r7, #24]
 80027c8:	69bb      	ldr	r3, [r7, #24]
>>>>>>> flight_hardware
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
<<<<<<< HEAD
 8002806:	f44f 7340 	mov.w	r3, #768	; 0x300
 800280a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800280c:	2312      	movs	r3, #18
 800280e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002810:	2300      	movs	r3, #0
 8002812:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002814:	2303      	movs	r3, #3
 8002816:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002818:	2304      	movs	r3, #4
 800281a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800281c:	f107 031c 	add.w	r3, r7, #28
 8002820:	4619      	mov	r1, r3
 8002822:	4835      	ldr	r0, [pc, #212]	; (80028f8 <HAL_I2C_MspInit+0x130>)
 8002824:	f001 ffc2 	bl	80047ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]
 800282c:	4b31      	ldr	r3, [pc, #196]	; (80028f4 <HAL_I2C_MspInit+0x12c>)
 800282e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002830:	4a30      	ldr	r2, [pc, #192]	; (80028f4 <HAL_I2C_MspInit+0x12c>)
 8002832:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002836:	6413      	str	r3, [r2, #64]	; 0x40
 8002838:	4b2e      	ldr	r3, [pc, #184]	; (80028f4 <HAL_I2C_MspInit+0x12c>)
 800283a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002840:	617b      	str	r3, [r7, #20]
 8002842:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */
=======
 80027ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027d0:	2312      	movs	r3, #18
 80027d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d8:	2303      	movs	r3, #3
 80027da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027dc:	2304      	movs	r3, #4
 80027de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e0:	f107 031c 	add.w	r3, r7, #28
 80027e4:	4619      	mov	r1, r3
 80027e6:	4826      	ldr	r0, [pc, #152]	; (8002880 <HAL_I2C_MspInit+0xf4>)
 80027e8:	f001 ffa0 	bl	800472c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027ec:	2300      	movs	r3, #0
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	4b22      	ldr	r3, [pc, #136]	; (800287c <HAL_I2C_MspInit+0xf0>)
 80027f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f4:	4a21      	ldr	r2, [pc, #132]	; (800287c <HAL_I2C_MspInit+0xf0>)
 80027f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027fa:	6413      	str	r3, [r2, #64]	; 0x40
 80027fc:	4b1f      	ldr	r3, [pc, #124]	; (800287c <HAL_I2C_MspInit+0xf0>)
 80027fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002800:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */
>>>>>>> flight_hardware

  /* USER CODE END I2C3_MspInit 1 */
  }

}
<<<<<<< HEAD
 8002844:	e050      	b.n	80028e8 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a2c      	ldr	r2, [pc, #176]	; (80028fc <HAL_I2C_MspInit+0x134>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d14b      	bne.n	80028e8 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002850:	2300      	movs	r3, #0
 8002852:	613b      	str	r3, [r7, #16]
 8002854:	4b27      	ldr	r3, [pc, #156]	; (80028f4 <HAL_I2C_MspInit+0x12c>)
 8002856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002858:	4a26      	ldr	r2, [pc, #152]	; (80028f4 <HAL_I2C_MspInit+0x12c>)
 800285a:	f043 0304 	orr.w	r3, r3, #4
 800285e:	6313      	str	r3, [r2, #48]	; 0x30
 8002860:	4b24      	ldr	r3, [pc, #144]	; (80028f4 <HAL_I2C_MspInit+0x12c>)
 8002862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	613b      	str	r3, [r7, #16]
 800286a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800286c:	2300      	movs	r3, #0
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	4b20      	ldr	r3, [pc, #128]	; (80028f4 <HAL_I2C_MspInit+0x12c>)
 8002872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002874:	4a1f      	ldr	r2, [pc, #124]	; (80028f4 <HAL_I2C_MspInit+0x12c>)
 8002876:	f043 0301 	orr.w	r3, r3, #1
 800287a:	6313      	str	r3, [r2, #48]	; 0x30
 800287c:	4b1d      	ldr	r3, [pc, #116]	; (80028f4 <HAL_I2C_MspInit+0x12c>)
 800287e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002888:	f44f 7300 	mov.w	r3, #512	; 0x200
 800288c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800288e:	2312      	movs	r3, #18
 8002890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002892:	2300      	movs	r3, #0
 8002894:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002896:	2303      	movs	r3, #3
 8002898:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800289a:	2304      	movs	r3, #4
 800289c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800289e:	f107 031c 	add.w	r3, r7, #28
 80028a2:	4619      	mov	r1, r3
 80028a4:	4816      	ldr	r0, [pc, #88]	; (8002900 <HAL_I2C_MspInit+0x138>)
 80028a6:	f001 ff81 	bl	80047ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80028aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028b0:	2312      	movs	r3, #18
 80028b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b8:	2303      	movs	r3, #3
 80028ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80028bc:	2304      	movs	r3, #4
 80028be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c0:	f107 031c 	add.w	r3, r7, #28
 80028c4:	4619      	mov	r1, r3
 80028c6:	480f      	ldr	r0, [pc, #60]	; (8002904 <HAL_I2C_MspInit+0x13c>)
 80028c8:	f001 ff70 	bl	80047ac <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80028cc:	2300      	movs	r3, #0
 80028ce:	60bb      	str	r3, [r7, #8]
 80028d0:	4b08      	ldr	r3, [pc, #32]	; (80028f4 <HAL_I2C_MspInit+0x12c>)
 80028d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d4:	4a07      	ldr	r2, [pc, #28]	; (80028f4 <HAL_I2C_MspInit+0x12c>)
 80028d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028da:	6413      	str	r3, [r2, #64]	; 0x40
 80028dc:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <HAL_I2C_MspInit+0x12c>)
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028e4:	60bb      	str	r3, [r7, #8]
 80028e6:	68bb      	ldr	r3, [r7, #8]
}
 80028e8:	bf00      	nop
 80028ea:	3730      	adds	r7, #48	; 0x30
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40005400 	.word	0x40005400
 80028f4:	40023800 	.word	0x40023800
 80028f8:	40020400 	.word	0x40020400
 80028fc:	40005c00 	.word	0x40005c00
 8002900:	40020800 	.word	0x40020800
 8002904:	40020000 	.word	0x40020000

08002908 <HAL_RTC_MspInit>:
=======
 8002808:	e031      	b.n	800286e <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a1d      	ldr	r2, [pc, #116]	; (8002884 <HAL_I2C_MspInit+0xf8>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d12c      	bne.n	800286e <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002814:	2300      	movs	r3, #0
 8002816:	613b      	str	r3, [r7, #16]
 8002818:	4b18      	ldr	r3, [pc, #96]	; (800287c <HAL_I2C_MspInit+0xf0>)
 800281a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281c:	4a17      	ldr	r2, [pc, #92]	; (800287c <HAL_I2C_MspInit+0xf0>)
 800281e:	f043 0302 	orr.w	r3, r3, #2
 8002822:	6313      	str	r3, [r2, #48]	; 0x30
 8002824:	4b15      	ldr	r3, [pc, #84]	; (800287c <HAL_I2C_MspInit+0xf0>)
 8002826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	613b      	str	r3, [r7, #16]
 800282e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002830:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002836:	2312      	movs	r3, #18
 8002838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283a:	2300      	movs	r3, #0
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800283e:	2303      	movs	r3, #3
 8002840:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002842:	2304      	movs	r3, #4
 8002844:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002846:	f107 031c 	add.w	r3, r7, #28
 800284a:	4619      	mov	r1, r3
 800284c:	480c      	ldr	r0, [pc, #48]	; (8002880 <HAL_I2C_MspInit+0xf4>)
 800284e:	f001 ff6d 	bl	800472c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	4b09      	ldr	r3, [pc, #36]	; (800287c <HAL_I2C_MspInit+0xf0>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	4a08      	ldr	r2, [pc, #32]	; (800287c <HAL_I2C_MspInit+0xf0>)
 800285c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002860:	6413      	str	r3, [r2, #64]	; 0x40
 8002862:	4b06      	ldr	r3, [pc, #24]	; (800287c <HAL_I2C_MspInit+0xf0>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	68fb      	ldr	r3, [r7, #12]
}
 800286e:	bf00      	nop
 8002870:	3730      	adds	r7, #48	; 0x30
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40005400 	.word	0x40005400
 800287c:	40023800 	.word	0x40023800
 8002880:	40020400 	.word	0x40020400
 8002884:	40005800 	.word	0x40005800

08002888 <HAL_RTC_MspInit>:
>>>>>>> flight_hardware
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
<<<<<<< HEAD
 8002908:	b580      	push	{r7, lr}
 800290a:	b08e      	sub	sp, #56	; 0x38
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002910:	f107 0308 	add.w	r3, r7, #8
 8002914:	2230      	movs	r2, #48	; 0x30
 8002916:	2100      	movs	r1, #0
 8002918:	4618      	mov	r0, r3
 800291a:	f006 fdab 	bl	8009474 <memset>
  if(hrtc->Instance==RTC)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a0c      	ldr	r2, [pc, #48]	; (8002954 <HAL_RTC_MspInit+0x4c>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d111      	bne.n	800294c <HAL_RTC_MspInit+0x44>
=======
 8002888:	b580      	push	{r7, lr}
 800288a:	b08e      	sub	sp, #56	; 0x38
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002890:	f107 0308 	add.w	r3, r7, #8
 8002894:	2230      	movs	r2, #48	; 0x30
 8002896:	2100      	movs	r1, #0
 8002898:	4618      	mov	r0, r3
 800289a:	f006 fdab 	bl	80093f4 <memset>
  if(hrtc->Instance==RTC)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a0c      	ldr	r2, [pc, #48]	; (80028d4 <HAL_RTC_MspInit+0x4c>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d111      	bne.n	80028cc <HAL_RTC_MspInit+0x44>
>>>>>>> flight_hardware

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
<<<<<<< HEAD
 8002928:	2320      	movs	r3, #32
 800292a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800292c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002930:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002932:	f107 0308 	add.w	r3, r7, #8
 8002936:	4618      	mov	r0, r3
 8002938:	f003 fe3e 	bl	80065b8 <HAL_RCCEx_PeriphCLKConfig>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002942:	f7ff fa13 	bl	8001d6c <Error_Handler>
=======
 80028a8:	2320      	movs	r3, #32
 80028aa:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80028ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028b0:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028b2:	f107 0308 	add.w	r3, r7, #8
 80028b6:	4618      	mov	r0, r3
 80028b8:	f003 fe3e 	bl	8006538 <HAL_RCCEx_PeriphCLKConfig>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80028c2:	f7ff fa35 	bl	8001d30 <Error_Handler>
>>>>>>> flight_hardware
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
<<<<<<< HEAD
 8002946:	4b04      	ldr	r3, [pc, #16]	; (8002958 <HAL_RTC_MspInit+0x50>)
 8002948:	2201      	movs	r2, #1
 800294a:	601a      	str	r2, [r3, #0]
=======
 80028c6:	4b04      	ldr	r3, [pc, #16]	; (80028d8 <HAL_RTC_MspInit+0x50>)
 80028c8:	2201      	movs	r2, #1
 80028ca:	601a      	str	r2, [r3, #0]
>>>>>>> flight_hardware
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
<<<<<<< HEAD
 800294c:	bf00      	nop
 800294e:	3738      	adds	r7, #56	; 0x38
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40002800 	.word	0x40002800
 8002958:	42470e3c 	.word	0x42470e3c

0800295c <HAL_SPI_MspInit>:
=======
 80028cc:	bf00      	nop
 80028ce:	3738      	adds	r7, #56	; 0x38
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40002800 	.word	0x40002800
 80028d8:	42470e3c 	.word	0x42470e3c

080028dc <HAL_SPI_MspInit>:
>>>>>>> flight_hardware
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
<<<<<<< HEAD
 800295c:	b580      	push	{r7, lr}
 800295e:	b08c      	sub	sp, #48	; 0x30
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002964:	f107 031c 	add.w	r3, r7, #28
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	605a      	str	r2, [r3, #4]
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	60da      	str	r2, [r3, #12]
 8002972:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a6f      	ldr	r2, [pc, #444]	; (8002b38 <HAL_SPI_MspInit+0x1dc>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d15b      	bne.n	8002a36 <HAL_SPI_MspInit+0xda>
=======
 80028dc:	b580      	push	{r7, lr}
 80028de:	b08c      	sub	sp, #48	; 0x30
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e4:	f107 031c 	add.w	r3, r7, #28
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	605a      	str	r2, [r3, #4]
 80028ee:	609a      	str	r2, [r3, #8]
 80028f0:	60da      	str	r2, [r3, #12]
 80028f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a6f      	ldr	r2, [pc, #444]	; (8002ab8 <HAL_SPI_MspInit+0x1dc>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d15b      	bne.n	80029b6 <HAL_SPI_MspInit+0xda>
>>>>>>> flight_hardware
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
<<<<<<< HEAD
 800297e:	2300      	movs	r3, #0
 8002980:	61bb      	str	r3, [r7, #24]
 8002982:	4b6e      	ldr	r3, [pc, #440]	; (8002b3c <HAL_SPI_MspInit+0x1e0>)
 8002984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002986:	4a6d      	ldr	r2, [pc, #436]	; (8002b3c <HAL_SPI_MspInit+0x1e0>)
 8002988:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800298c:	6453      	str	r3, [r2, #68]	; 0x44
 800298e:	4b6b      	ldr	r3, [pc, #428]	; (8002b3c <HAL_SPI_MspInit+0x1e0>)
 8002990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002992:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002996:	61bb      	str	r3, [r7, #24]
 8002998:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	617b      	str	r3, [r7, #20]
 800299e:	4b67      	ldr	r3, [pc, #412]	; (8002b3c <HAL_SPI_MspInit+0x1e0>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	4a66      	ldr	r2, [pc, #408]	; (8002b3c <HAL_SPI_MspInit+0x1e0>)
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	6313      	str	r3, [r2, #48]	; 0x30
 80029aa:	4b64      	ldr	r3, [pc, #400]	; (8002b3c <HAL_SPI_MspInit+0x1e0>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	697b      	ldr	r3, [r7, #20]
=======
 80028fe:	2300      	movs	r3, #0
 8002900:	61bb      	str	r3, [r7, #24]
 8002902:	4b6e      	ldr	r3, [pc, #440]	; (8002abc <HAL_SPI_MspInit+0x1e0>)
 8002904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002906:	4a6d      	ldr	r2, [pc, #436]	; (8002abc <HAL_SPI_MspInit+0x1e0>)
 8002908:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800290c:	6453      	str	r3, [r2, #68]	; 0x44
 800290e:	4b6b      	ldr	r3, [pc, #428]	; (8002abc <HAL_SPI_MspInit+0x1e0>)
 8002910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002912:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002916:	61bb      	str	r3, [r7, #24]
 8002918:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	617b      	str	r3, [r7, #20]
 800291e:	4b67      	ldr	r3, [pc, #412]	; (8002abc <HAL_SPI_MspInit+0x1e0>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	4a66      	ldr	r2, [pc, #408]	; (8002abc <HAL_SPI_MspInit+0x1e0>)
 8002924:	f043 0301 	orr.w	r3, r3, #1
 8002928:	6313      	str	r3, [r2, #48]	; 0x30
 800292a:	4b64      	ldr	r3, [pc, #400]	; (8002abc <HAL_SPI_MspInit+0x1e0>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	617b      	str	r3, [r7, #20]
 8002934:	697b      	ldr	r3, [r7, #20]
>>>>>>> flight_hardware
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
<<<<<<< HEAD
 80029b6:	23e0      	movs	r3, #224	; 0xe0
 80029b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ba:	2302      	movs	r3, #2
 80029bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029be:	2300      	movs	r3, #0
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c2:	2303      	movs	r3, #3
 80029c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029c6:	2305      	movs	r3, #5
 80029c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ca:	f107 031c 	add.w	r3, r7, #28
 80029ce:	4619      	mov	r1, r3
 80029d0:	485b      	ldr	r0, [pc, #364]	; (8002b40 <HAL_SPI_MspInit+0x1e4>)
 80029d2:	f001 feeb 	bl	80047ac <HAL_GPIO_Init>
=======
 8002936:	23e0      	movs	r3, #224	; 0xe0
 8002938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800293a:	2302      	movs	r3, #2
 800293c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293e:	2300      	movs	r3, #0
 8002940:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002942:	2303      	movs	r3, #3
 8002944:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002946:	2305      	movs	r3, #5
 8002948:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800294a:	f107 031c 	add.w	r3, r7, #28
 800294e:	4619      	mov	r1, r3
 8002950:	485b      	ldr	r0, [pc, #364]	; (8002ac0 <HAL_SPI_MspInit+0x1e4>)
 8002952:	f001 feeb 	bl	800472c <HAL_GPIO_Init>
>>>>>>> flight_hardware

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
<<<<<<< HEAD
 80029d6:	4b5b      	ldr	r3, [pc, #364]	; (8002b44 <HAL_SPI_MspInit+0x1e8>)
 80029d8:	4a5b      	ldr	r2, [pc, #364]	; (8002b48 <HAL_SPI_MspInit+0x1ec>)
 80029da:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80029dc:	4b59      	ldr	r3, [pc, #356]	; (8002b44 <HAL_SPI_MspInit+0x1e8>)
 80029de:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80029e2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029e4:	4b57      	ldr	r3, [pc, #348]	; (8002b44 <HAL_SPI_MspInit+0x1e8>)
 80029e6:	2240      	movs	r2, #64	; 0x40
 80029e8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029ea:	4b56      	ldr	r3, [pc, #344]	; (8002b44 <HAL_SPI_MspInit+0x1e8>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029f0:	4b54      	ldr	r3, [pc, #336]	; (8002b44 <HAL_SPI_MspInit+0x1e8>)
 80029f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029f6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029f8:	4b52      	ldr	r3, [pc, #328]	; (8002b44 <HAL_SPI_MspInit+0x1e8>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029fe:	4b51      	ldr	r3, [pc, #324]	; (8002b44 <HAL_SPI_MspInit+0x1e8>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002a04:	4b4f      	ldr	r3, [pc, #316]	; (8002b44 <HAL_SPI_MspInit+0x1e8>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002a0a:	4b4e      	ldr	r3, [pc, #312]	; (8002b44 <HAL_SPI_MspInit+0x1e8>)
 8002a0c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a10:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a12:	4b4c      	ldr	r3, [pc, #304]	; (8002b44 <HAL_SPI_MspInit+0x1e8>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002a18:	484a      	ldr	r0, [pc, #296]	; (8002b44 <HAL_SPI_MspInit+0x1e8>)
 8002a1a:	f001 fac5 	bl	8003fa8 <HAL_DMA_Init>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8002a24:	f7ff f9a2 	bl	8001d6c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a46      	ldr	r2, [pc, #280]	; (8002b44 <HAL_SPI_MspInit+0x1e8>)
 8002a2c:	649a      	str	r2, [r3, #72]	; 0x48
 8002a2e:	4a45      	ldr	r2, [pc, #276]	; (8002b44 <HAL_SPI_MspInit+0x1e8>)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6393      	str	r3, [r2, #56]	; 0x38
=======
 8002956:	4b5b      	ldr	r3, [pc, #364]	; (8002ac4 <HAL_SPI_MspInit+0x1e8>)
 8002958:	4a5b      	ldr	r2, [pc, #364]	; (8002ac8 <HAL_SPI_MspInit+0x1ec>)
 800295a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800295c:	4b59      	ldr	r3, [pc, #356]	; (8002ac4 <HAL_SPI_MspInit+0x1e8>)
 800295e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002962:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002964:	4b57      	ldr	r3, [pc, #348]	; (8002ac4 <HAL_SPI_MspInit+0x1e8>)
 8002966:	2240      	movs	r2, #64	; 0x40
 8002968:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800296a:	4b56      	ldr	r3, [pc, #344]	; (8002ac4 <HAL_SPI_MspInit+0x1e8>)
 800296c:	2200      	movs	r2, #0
 800296e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002970:	4b54      	ldr	r3, [pc, #336]	; (8002ac4 <HAL_SPI_MspInit+0x1e8>)
 8002972:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002976:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002978:	4b52      	ldr	r3, [pc, #328]	; (8002ac4 <HAL_SPI_MspInit+0x1e8>)
 800297a:	2200      	movs	r2, #0
 800297c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800297e:	4b51      	ldr	r3, [pc, #324]	; (8002ac4 <HAL_SPI_MspInit+0x1e8>)
 8002980:	2200      	movs	r2, #0
 8002982:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002984:	4b4f      	ldr	r3, [pc, #316]	; (8002ac4 <HAL_SPI_MspInit+0x1e8>)
 8002986:	2200      	movs	r2, #0
 8002988:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800298a:	4b4e      	ldr	r3, [pc, #312]	; (8002ac4 <HAL_SPI_MspInit+0x1e8>)
 800298c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002990:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002992:	4b4c      	ldr	r3, [pc, #304]	; (8002ac4 <HAL_SPI_MspInit+0x1e8>)
 8002994:	2200      	movs	r2, #0
 8002996:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002998:	484a      	ldr	r0, [pc, #296]	; (8002ac4 <HAL_SPI_MspInit+0x1e8>)
 800299a:	f001 fac5 	bl	8003f28 <HAL_DMA_Init>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80029a4:	f7ff f9c4 	bl	8001d30 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a46      	ldr	r2, [pc, #280]	; (8002ac4 <HAL_SPI_MspInit+0x1e8>)
 80029ac:	649a      	str	r2, [r3, #72]	; 0x48
 80029ae:	4a45      	ldr	r2, [pc, #276]	; (8002ac4 <HAL_SPI_MspInit+0x1e8>)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6393      	str	r3, [r2, #56]	; 0x38
>>>>>>> flight_hardware
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
<<<<<<< HEAD
 8002a34:	e07b      	b.n	8002b2e <HAL_SPI_MspInit+0x1d2>
  else if(hspi->Instance==SPI2)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a44      	ldr	r2, [pc, #272]	; (8002b4c <HAL_SPI_MspInit+0x1f0>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d176      	bne.n	8002b2e <HAL_SPI_MspInit+0x1d2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002a40:	2300      	movs	r3, #0
 8002a42:	613b      	str	r3, [r7, #16]
 8002a44:	4b3d      	ldr	r3, [pc, #244]	; (8002b3c <HAL_SPI_MspInit+0x1e0>)
 8002a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a48:	4a3c      	ldr	r2, [pc, #240]	; (8002b3c <HAL_SPI_MspInit+0x1e0>)
 8002a4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a4e:	6413      	str	r3, [r2, #64]	; 0x40
 8002a50:	4b3a      	ldr	r3, [pc, #232]	; (8002b3c <HAL_SPI_MspInit+0x1e0>)
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	4b36      	ldr	r3, [pc, #216]	; (8002b3c <HAL_SPI_MspInit+0x1e0>)
 8002a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a64:	4a35      	ldr	r2, [pc, #212]	; (8002b3c <HAL_SPI_MspInit+0x1e0>)
 8002a66:	f043 0304 	orr.w	r3, r3, #4
 8002a6a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a6c:	4b33      	ldr	r3, [pc, #204]	; (8002b3c <HAL_SPI_MspInit+0x1e0>)
 8002a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a78:	2300      	movs	r3, #0
 8002a7a:	60bb      	str	r3, [r7, #8]
 8002a7c:	4b2f      	ldr	r3, [pc, #188]	; (8002b3c <HAL_SPI_MspInit+0x1e0>)
 8002a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a80:	4a2e      	ldr	r2, [pc, #184]	; (8002b3c <HAL_SPI_MspInit+0x1e0>)
 8002a82:	f043 0308 	orr.w	r3, r3, #8
 8002a86:	6313      	str	r3, [r2, #48]	; 0x30
 8002a88:	4b2c      	ldr	r3, [pc, #176]	; (8002b3c <HAL_SPI_MspInit+0x1e0>)
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8c:	f003 0308 	and.w	r3, r3, #8
 8002a90:	60bb      	str	r3, [r7, #8]
 8002a92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002a94:	230c      	movs	r3, #12
 8002a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a98:	2302      	movs	r3, #2
 8002a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002aa4:	2305      	movs	r3, #5
 8002aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aa8:	f107 031c 	add.w	r3, r7, #28
 8002aac:	4619      	mov	r1, r3
 8002aae:	4828      	ldr	r0, [pc, #160]	; (8002b50 <HAL_SPI_MspInit+0x1f4>)
 8002ab0:	f001 fe7c 	bl	80047ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002ab4:	2308      	movs	r3, #8
 8002ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab8:	2302      	movs	r3, #2
 8002aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abc:	2300      	movs	r3, #0
 8002abe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ac4:	2305      	movs	r3, #5
 8002ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ac8:	f107 031c 	add.w	r3, r7, #28
 8002acc:	4619      	mov	r1, r3
 8002ace:	4821      	ldr	r0, [pc, #132]	; (8002b54 <HAL_SPI_MspInit+0x1f8>)
 8002ad0:	f001 fe6c 	bl	80047ac <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8002ad4:	4b20      	ldr	r3, [pc, #128]	; (8002b58 <HAL_SPI_MspInit+0x1fc>)
 8002ad6:	4a21      	ldr	r2, [pc, #132]	; (8002b5c <HAL_SPI_MspInit+0x200>)
 8002ad8:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8002ada:	4b1f      	ldr	r3, [pc, #124]	; (8002b58 <HAL_SPI_MspInit+0x1fc>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ae0:	4b1d      	ldr	r3, [pc, #116]	; (8002b58 <HAL_SPI_MspInit+0x1fc>)
 8002ae2:	2240      	movs	r2, #64	; 0x40
 8002ae4:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ae6:	4b1c      	ldr	r3, [pc, #112]	; (8002b58 <HAL_SPI_MspInit+0x1fc>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002aec:	4b1a      	ldr	r3, [pc, #104]	; (8002b58 <HAL_SPI_MspInit+0x1fc>)
 8002aee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002af2:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002af4:	4b18      	ldr	r3, [pc, #96]	; (8002b58 <HAL_SPI_MspInit+0x1fc>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002afa:	4b17      	ldr	r3, [pc, #92]	; (8002b58 <HAL_SPI_MspInit+0x1fc>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002b00:	4b15      	ldr	r3, [pc, #84]	; (8002b58 <HAL_SPI_MspInit+0x1fc>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b06:	4b14      	ldr	r3, [pc, #80]	; (8002b58 <HAL_SPI_MspInit+0x1fc>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b0c:	4b12      	ldr	r3, [pc, #72]	; (8002b58 <HAL_SPI_MspInit+0x1fc>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002b12:	4811      	ldr	r0, [pc, #68]	; (8002b58 <HAL_SPI_MspInit+0x1fc>)
 8002b14:	f001 fa48 	bl	8003fa8 <HAL_DMA_Init>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <HAL_SPI_MspInit+0x1c6>
      Error_Handler();
 8002b1e:	f7ff f925 	bl	8001d6c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a0c      	ldr	r2, [pc, #48]	; (8002b58 <HAL_SPI_MspInit+0x1fc>)
 8002b26:	649a      	str	r2, [r3, #72]	; 0x48
 8002b28:	4a0b      	ldr	r2, [pc, #44]	; (8002b58 <HAL_SPI_MspInit+0x1fc>)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002b2e:	bf00      	nop
 8002b30:	3730      	adds	r7, #48	; 0x30
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	40013000 	.word	0x40013000
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	40020000 	.word	0x40020000
 8002b44:	200001e8 	.word	0x200001e8
 8002b48:	40026458 	.word	0x40026458
 8002b4c:	40003800 	.word	0x40003800
 8002b50:	40020800 	.word	0x40020800
 8002b54:	40020c00 	.word	0x40020c00
 8002b58:	20000248 	.word	0x20000248
 8002b5c:	40026070 	.word	0x40026070

08002b60 <HAL_TIM_Base_MspInit>:
=======
 80029b4:	e07c      	b.n	8002ab0 <HAL_SPI_MspInit+0x1d4>
  else if(hspi->Instance==SPI2)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a44      	ldr	r2, [pc, #272]	; (8002acc <HAL_SPI_MspInit+0x1f0>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d177      	bne.n	8002ab0 <HAL_SPI_MspInit+0x1d4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80029c0:	2300      	movs	r3, #0
 80029c2:	613b      	str	r3, [r7, #16]
 80029c4:	4b3d      	ldr	r3, [pc, #244]	; (8002abc <HAL_SPI_MspInit+0x1e0>)
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	4a3c      	ldr	r2, [pc, #240]	; (8002abc <HAL_SPI_MspInit+0x1e0>)
 80029ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029ce:	6413      	str	r3, [r2, #64]	; 0x40
 80029d0:	4b3a      	ldr	r3, [pc, #232]	; (8002abc <HAL_SPI_MspInit+0x1e0>)
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d8:	613b      	str	r3, [r7, #16]
 80029da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029dc:	2300      	movs	r3, #0
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	4b36      	ldr	r3, [pc, #216]	; (8002abc <HAL_SPI_MspInit+0x1e0>)
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	4a35      	ldr	r2, [pc, #212]	; (8002abc <HAL_SPI_MspInit+0x1e0>)
 80029e6:	f043 0304 	orr.w	r3, r3, #4
 80029ea:	6313      	str	r3, [r2, #48]	; 0x30
 80029ec:	4b33      	ldr	r3, [pc, #204]	; (8002abc <HAL_SPI_MspInit+0x1e0>)
 80029ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029f8:	2300      	movs	r3, #0
 80029fa:	60bb      	str	r3, [r7, #8]
 80029fc:	4b2f      	ldr	r3, [pc, #188]	; (8002abc <HAL_SPI_MspInit+0x1e0>)
 80029fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a00:	4a2e      	ldr	r2, [pc, #184]	; (8002abc <HAL_SPI_MspInit+0x1e0>)
 8002a02:	f043 0308 	orr.w	r3, r3, #8
 8002a06:	6313      	str	r3, [r2, #48]	; 0x30
 8002a08:	4b2c      	ldr	r3, [pc, #176]	; (8002abc <HAL_SPI_MspInit+0x1e0>)
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	60bb      	str	r3, [r7, #8]
 8002a12:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002a14:	230c      	movs	r3, #12
 8002a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a20:	2303      	movs	r3, #3
 8002a22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a24:	2305      	movs	r3, #5
 8002a26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a28:	f107 031c 	add.w	r3, r7, #28
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4828      	ldr	r0, [pc, #160]	; (8002ad0 <HAL_SPI_MspInit+0x1f4>)
 8002a30:	f001 fe7c 	bl	800472c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a34:	2308      	movs	r3, #8
 8002a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a38:	2302      	movs	r3, #2
 8002a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a40:	2303      	movs	r3, #3
 8002a42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a44:	2305      	movs	r3, #5
 8002a46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a48:	f107 031c 	add.w	r3, r7, #28
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4821      	ldr	r0, [pc, #132]	; (8002ad4 <HAL_SPI_MspInit+0x1f8>)
 8002a50:	f001 fe6c 	bl	800472c <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8002a54:	4b20      	ldr	r3, [pc, #128]	; (8002ad8 <HAL_SPI_MspInit+0x1fc>)
 8002a56:	4a21      	ldr	r2, [pc, #132]	; (8002adc <HAL_SPI_MspInit+0x200>)
 8002a58:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8002a5a:	4b1f      	ldr	r3, [pc, #124]	; (8002ad8 <HAL_SPI_MspInit+0x1fc>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a60:	4b1d      	ldr	r3, [pc, #116]	; (8002ad8 <HAL_SPI_MspInit+0x1fc>)
 8002a62:	2240      	movs	r2, #64	; 0x40
 8002a64:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a66:	4b1c      	ldr	r3, [pc, #112]	; (8002ad8 <HAL_SPI_MspInit+0x1fc>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a6c:	4b1a      	ldr	r3, [pc, #104]	; (8002ad8 <HAL_SPI_MspInit+0x1fc>)
 8002a6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a72:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a74:	4b18      	ldr	r3, [pc, #96]	; (8002ad8 <HAL_SPI_MspInit+0x1fc>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a7a:	4b17      	ldr	r3, [pc, #92]	; (8002ad8 <HAL_SPI_MspInit+0x1fc>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002a80:	4b15      	ldr	r3, [pc, #84]	; (8002ad8 <HAL_SPI_MspInit+0x1fc>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002a86:	4b14      	ldr	r3, [pc, #80]	; (8002ad8 <HAL_SPI_MspInit+0x1fc>)
 8002a88:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a8c:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a8e:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <HAL_SPI_MspInit+0x1fc>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002a94:	4810      	ldr	r0, [pc, #64]	; (8002ad8 <HAL_SPI_MspInit+0x1fc>)
 8002a96:	f001 fa47 	bl	8003f28 <HAL_DMA_Init>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <HAL_SPI_MspInit+0x1c8>
      Error_Handler();
 8002aa0:	f7ff f946 	bl	8001d30 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a0c      	ldr	r2, [pc, #48]	; (8002ad8 <HAL_SPI_MspInit+0x1fc>)
 8002aa8:	649a      	str	r2, [r3, #72]	; 0x48
 8002aaa:	4a0b      	ldr	r2, [pc, #44]	; (8002ad8 <HAL_SPI_MspInit+0x1fc>)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002ab0:	bf00      	nop
 8002ab2:	3730      	adds	r7, #48	; 0x30
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40013000 	.word	0x40013000
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	40020000 	.word	0x40020000
 8002ac4:	200001e8 	.word	0x200001e8
 8002ac8:	40026458 	.word	0x40026458
 8002acc:	40003800 	.word	0x40003800
 8002ad0:	40020800 	.word	0x40020800
 8002ad4:	40020c00 	.word	0x40020c00
 8002ad8:	20000248 	.word	0x20000248
 8002adc:	40026070 	.word	0x40026070

08002ae0 <HAL_TIM_Base_MspInit>:
>>>>>>> flight_hardware
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
<<<<<<< HEAD
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a1c      	ldr	r2, [pc, #112]	; (8002be0 <HAL_TIM_Base_MspInit+0x80>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d116      	bne.n	8002ba0 <HAL_TIM_Base_MspInit+0x40>
=======
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a1c      	ldr	r2, [pc, #112]	; (8002b60 <HAL_TIM_Base_MspInit+0x80>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d116      	bne.n	8002b20 <HAL_TIM_Base_MspInit+0x40>
>>>>>>> flight_hardware
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
<<<<<<< HEAD
 8002b72:	2300      	movs	r3, #0
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	4b1b      	ldr	r3, [pc, #108]	; (8002be4 <HAL_TIM_Base_MspInit+0x84>)
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	4a1a      	ldr	r2, [pc, #104]	; (8002be4 <HAL_TIM_Base_MspInit+0x84>)
 8002b7c:	f043 0310 	orr.w	r3, r3, #16
 8002b80:	6413      	str	r3, [r2, #64]	; 0x40
 8002b82:	4b18      	ldr	r3, [pc, #96]	; (8002be4 <HAL_TIM_Base_MspInit+0x84>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	f003 0310 	and.w	r3, r3, #16
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002b8e:	2200      	movs	r2, #0
 8002b90:	2100      	movs	r1, #0
 8002b92:	2036      	movs	r0, #54	; 0x36
 8002b94:	f001 f9d1 	bl	8003f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002b98:	2036      	movs	r0, #54	; 0x36
 8002b9a:	f001 f9ea 	bl	8003f72 <HAL_NVIC_EnableIRQ>
=======
 8002af2:	2300      	movs	r3, #0
 8002af4:	60fb      	str	r3, [r7, #12]
 8002af6:	4b1b      	ldr	r3, [pc, #108]	; (8002b64 <HAL_TIM_Base_MspInit+0x84>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	4a1a      	ldr	r2, [pc, #104]	; (8002b64 <HAL_TIM_Base_MspInit+0x84>)
 8002afc:	f043 0310 	orr.w	r3, r3, #16
 8002b00:	6413      	str	r3, [r2, #64]	; 0x40
 8002b02:	4b18      	ldr	r3, [pc, #96]	; (8002b64 <HAL_TIM_Base_MspInit+0x84>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	f003 0310 	and.w	r3, r3, #16
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002b0e:	2200      	movs	r2, #0
 8002b10:	2100      	movs	r1, #0
 8002b12:	2036      	movs	r0, #54	; 0x36
 8002b14:	f001 f9d1 	bl	8003eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002b18:	2036      	movs	r0, #54	; 0x36
 8002b1a:	f001 f9ea 	bl	8003ef2 <HAL_NVIC_EnableIRQ>
>>>>>>> flight_hardware
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
<<<<<<< HEAD
 8002b9e:	e01a      	b.n	8002bd6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a10      	ldr	r2, [pc, #64]	; (8002be8 <HAL_TIM_Base_MspInit+0x88>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d115      	bne.n	8002bd6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002baa:	2300      	movs	r3, #0
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	4b0d      	ldr	r3, [pc, #52]	; (8002be4 <HAL_TIM_Base_MspInit+0x84>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	4a0c      	ldr	r2, [pc, #48]	; (8002be4 <HAL_TIM_Base_MspInit+0x84>)
 8002bb4:	f043 0320 	orr.w	r3, r3, #32
 8002bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bba:	4b0a      	ldr	r3, [pc, #40]	; (8002be4 <HAL_TIM_Base_MspInit+0x84>)
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	f003 0320 	and.w	r3, r3, #32
 8002bc2:	60bb      	str	r3, [r7, #8]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	2100      	movs	r1, #0
 8002bca:	2037      	movs	r0, #55	; 0x37
 8002bcc:	f001 f9b5 	bl	8003f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002bd0:	2037      	movs	r0, #55	; 0x37
 8002bd2:	f001 f9ce 	bl	8003f72 <HAL_NVIC_EnableIRQ>
}
 8002bd6:	bf00      	nop
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	40001000 	.word	0x40001000
 8002be4:	40023800 	.word	0x40023800
 8002be8:	40001400 	.word	0x40001400

08002bec <HAL_UART_MspInit>:
=======
 8002b1e:	e01a      	b.n	8002b56 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a10      	ldr	r2, [pc, #64]	; (8002b68 <HAL_TIM_Base_MspInit+0x88>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d115      	bne.n	8002b56 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60bb      	str	r3, [r7, #8]
 8002b2e:	4b0d      	ldr	r3, [pc, #52]	; (8002b64 <HAL_TIM_Base_MspInit+0x84>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	4a0c      	ldr	r2, [pc, #48]	; (8002b64 <HAL_TIM_Base_MspInit+0x84>)
 8002b34:	f043 0320 	orr.w	r3, r3, #32
 8002b38:	6413      	str	r3, [r2, #64]	; 0x40
 8002b3a:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <HAL_TIM_Base_MspInit+0x84>)
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	f003 0320 	and.w	r3, r3, #32
 8002b42:	60bb      	str	r3, [r7, #8]
 8002b44:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002b46:	2200      	movs	r2, #0
 8002b48:	2100      	movs	r1, #0
 8002b4a:	2037      	movs	r0, #55	; 0x37
 8002b4c:	f001 f9b5 	bl	8003eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002b50:	2037      	movs	r0, #55	; 0x37
 8002b52:	f001 f9ce 	bl	8003ef2 <HAL_NVIC_EnableIRQ>
}
 8002b56:	bf00      	nop
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40001000 	.word	0x40001000
 8002b64:	40023800 	.word	0x40023800
 8002b68:	40001400 	.word	0x40001400

08002b6c <HAL_UART_MspInit>:
>>>>>>> flight_hardware
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
<<<<<<< HEAD
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08a      	sub	sp, #40	; 0x28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf4:	f107 0314 	add.w	r3, r7, #20
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	605a      	str	r2, [r3, #4]
 8002bfe:	609a      	str	r2, [r3, #8]
 8002c00:	60da      	str	r2, [r3, #12]
 8002c02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a1d      	ldr	r2, [pc, #116]	; (8002c80 <HAL_UART_MspInit+0x94>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d133      	bne.n	8002c76 <HAL_UART_MspInit+0x8a>
=======
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b08a      	sub	sp, #40	; 0x28
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b74:	f107 0314 	add.w	r3, r7, #20
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	605a      	str	r2, [r3, #4]
 8002b7e:	609a      	str	r2, [r3, #8]
 8002b80:	60da      	str	r2, [r3, #12]
 8002b82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a1d      	ldr	r2, [pc, #116]	; (8002c00 <HAL_UART_MspInit+0x94>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d133      	bne.n	8002bf6 <HAL_UART_MspInit+0x8a>
>>>>>>> flight_hardware
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
<<<<<<< HEAD
 8002c0e:	2300      	movs	r3, #0
 8002c10:	613b      	str	r3, [r7, #16]
 8002c12:	4b1c      	ldr	r3, [pc, #112]	; (8002c84 <HAL_UART_MspInit+0x98>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	4a1b      	ldr	r2, [pc, #108]	; (8002c84 <HAL_UART_MspInit+0x98>)
 8002c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c1e:	4b19      	ldr	r3, [pc, #100]	; (8002c84 <HAL_UART_MspInit+0x98>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c26:	613b      	str	r3, [r7, #16]
 8002c28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	4b15      	ldr	r3, [pc, #84]	; (8002c84 <HAL_UART_MspInit+0x98>)
 8002c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c32:	4a14      	ldr	r2, [pc, #80]	; (8002c84 <HAL_UART_MspInit+0x98>)
 8002c34:	f043 0308 	orr.w	r3, r3, #8
 8002c38:	6313      	str	r3, [r2, #48]	; 0x30
 8002c3a:	4b12      	ldr	r3, [pc, #72]	; (8002c84 <HAL_UART_MspInit+0x98>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	f003 0308 	and.w	r3, r3, #8
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	68fb      	ldr	r3, [r7, #12]
=======
 8002b8e:	2300      	movs	r3, #0
 8002b90:	613b      	str	r3, [r7, #16]
 8002b92:	4b1c      	ldr	r3, [pc, #112]	; (8002c04 <HAL_UART_MspInit+0x98>)
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	4a1b      	ldr	r2, [pc, #108]	; (8002c04 <HAL_UART_MspInit+0x98>)
 8002b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b9e:	4b19      	ldr	r3, [pc, #100]	; (8002c04 <HAL_UART_MspInit+0x98>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba6:	613b      	str	r3, [r7, #16]
 8002ba8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002baa:	2300      	movs	r3, #0
 8002bac:	60fb      	str	r3, [r7, #12]
 8002bae:	4b15      	ldr	r3, [pc, #84]	; (8002c04 <HAL_UART_MspInit+0x98>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	4a14      	ldr	r2, [pc, #80]	; (8002c04 <HAL_UART_MspInit+0x98>)
 8002bb4:	f043 0308 	orr.w	r3, r3, #8
 8002bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bba:	4b12      	ldr	r3, [pc, #72]	; (8002c04 <HAL_UART_MspInit+0x98>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
>>>>>>> flight_hardware
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
<<<<<<< HEAD
 8002c46:	2360      	movs	r3, #96	; 0x60
 8002c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c52:	2303      	movs	r3, #3
 8002c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c56:	2307      	movs	r3, #7
 8002c58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c5a:	f107 0314 	add.w	r3, r7, #20
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4809      	ldr	r0, [pc, #36]	; (8002c88 <HAL_UART_MspInit+0x9c>)
 8002c62:	f001 fda3 	bl	80047ac <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002c66:	2200      	movs	r2, #0
 8002c68:	2100      	movs	r1, #0
 8002c6a:	2026      	movs	r0, #38	; 0x26
 8002c6c:	f001 f965 	bl	8003f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c70:	2026      	movs	r0, #38	; 0x26
 8002c72:	f001 f97e 	bl	8003f72 <HAL_NVIC_EnableIRQ>
=======
 8002bc6:	2360      	movs	r3, #96	; 0x60
 8002bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bca:	2302      	movs	r3, #2
 8002bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002bd6:	2307      	movs	r3, #7
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bda:	f107 0314 	add.w	r3, r7, #20
 8002bde:	4619      	mov	r1, r3
 8002be0:	4809      	ldr	r0, [pc, #36]	; (8002c08 <HAL_UART_MspInit+0x9c>)
 8002be2:	f001 fda3 	bl	800472c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002be6:	2200      	movs	r2, #0
 8002be8:	2100      	movs	r1, #0
 8002bea:	2026      	movs	r0, #38	; 0x26
 8002bec:	f001 f965 	bl	8003eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002bf0:	2026      	movs	r0, #38	; 0x26
 8002bf2:	f001 f97e 	bl	8003ef2 <HAL_NVIC_EnableIRQ>
>>>>>>> flight_hardware
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
<<<<<<< HEAD
 8002c76:	bf00      	nop
 8002c78:	3728      	adds	r7, #40	; 0x28
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40004400 	.word	0x40004400
 8002c84:	40023800 	.word	0x40023800
 8002c88:	40020c00 	.word	0x40020c00

08002c8c <NMI_Handler>:
=======
 8002bf6:	bf00      	nop
 8002bf8:	3728      	adds	r7, #40	; 0x28
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40004400 	.word	0x40004400
 8002c04:	40023800 	.word	0x40023800
 8002c08:	40020c00 	.word	0x40020c00

08002c0c <NMI_Handler>:
>>>>>>> flight_hardware
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
=======
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
>>>>>>> flight_hardware
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< HEAD
 8002c90:	e7fe      	b.n	8002c90 <NMI_Handler+0x4>

08002c92 <HardFault_Handler>:
=======
 8002c10:	e7fe      	b.n	8002c10 <NMI_Handler+0x4>

08002c12 <HardFault_Handler>:
>>>>>>> flight_hardware

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 8002c92:	b480      	push	{r7}
 8002c94:	af00      	add	r7, sp, #0
=======
 8002c12:	b480      	push	{r7}
 8002c14:	af00      	add	r7, sp, #0
>>>>>>> flight_hardware
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8002c96:	e7fe      	b.n	8002c96 <HardFault_Handler+0x4>

08002c98 <MemManage_Handler>:
=======
 8002c16:	e7fe      	b.n	8002c16 <HardFault_Handler+0x4>

08002c18 <MemManage_Handler>:
>>>>>>> flight_hardware

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
=======
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
>>>>>>> flight_hardware
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8002c9c:	e7fe      	b.n	8002c9c <MemManage_Handler+0x4>

08002c9e <BusFault_Handler>:
=======
 8002c1c:	e7fe      	b.n	8002c1c <MemManage_Handler+0x4>

08002c1e <BusFault_Handler>:
>>>>>>> flight_hardware

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 8002c9e:	b480      	push	{r7}
 8002ca0:	af00      	add	r7, sp, #0
=======
 8002c1e:	b480      	push	{r7}
 8002c20:	af00      	add	r7, sp, #0
>>>>>>> flight_hardware
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8002ca2:	e7fe      	b.n	8002ca2 <BusFault_Handler+0x4>

08002ca4 <UsageFault_Handler>:
=======
 8002c22:	e7fe      	b.n	8002c22 <BusFault_Handler+0x4>

08002c24 <UsageFault_Handler>:
>>>>>>> flight_hardware

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
=======
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
>>>>>>> flight_hardware
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8002ca8:	e7fe      	b.n	8002ca8 <UsageFault_Handler+0x4>

08002caa <SVC_Handler>:
=======
 8002c28:	e7fe      	b.n	8002c28 <UsageFault_Handler+0x4>

08002c2a <SVC_Handler>:
>>>>>>> flight_hardware

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< HEAD
 8002caa:	b480      	push	{r7}
 8002cac:	af00      	add	r7, sp, #0
=======
 8002c2a:	b480      	push	{r7}
 8002c2c:	af00      	add	r7, sp, #0
>>>>>>> flight_hardware

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< HEAD
 8002cae:	bf00      	nop
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <DebugMon_Handler>:
=======
 8002c2e:	bf00      	nop
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <DebugMon_Handler>:
>>>>>>> flight_hardware

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
=======
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
>>>>>>> flight_hardware

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 8002cbc:	bf00      	nop
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <PendSV_Handler>:
=======
 8002c3c:	bf00      	nop
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <PendSV_Handler>:
>>>>>>> flight_hardware

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< HEAD
 8002cc6:	b480      	push	{r7}
 8002cc8:	af00      	add	r7, sp, #0
=======
 8002c46:	b480      	push	{r7}
 8002c48:	af00      	add	r7, sp, #0
>>>>>>> flight_hardware

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< HEAD
 8002cca:	bf00      	nop
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <SysTick_Handler>:
=======
 8002c4a:	bf00      	nop
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <SysTick_Handler>:
>>>>>>> flight_hardware

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
=======
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
>>>>>>> flight_hardware
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
 8002cd8:	f000 f9a8 	bl	800302c <HAL_IncTick>
=======
 8002c58:	f000 f9a8 	bl	8002fac <HAL_IncTick>
>>>>>>> flight_hardware
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
 8002cdc:	bf00      	nop
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <EXTI1_IRQHandler>:
=======
 8002c5c:	bf00      	nop
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <EXTI1_IRQHandler>:
>>>>>>> flight_hardware

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
<<<<<<< HEAD
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
=======
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
>>>>>>> flight_hardware
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Flight_JMP_Pin);
<<<<<<< HEAD
 8002ce4:	2002      	movs	r0, #2
 8002ce6:	f001 ff59 	bl	8004b9c <HAL_GPIO_EXTI_IRQHandler>
=======
 8002c64:	2002      	movs	r0, #2
 8002c66:	f001 ff59 	bl	8004b1c <HAL_GPIO_EXTI_IRQHandler>
>>>>>>> flight_hardware
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
<<<<<<< HEAD
 8002cea:	bf00      	nop
 8002cec:	bd80      	pop	{r7, pc}
	...

08002cf0 <DMA1_Stream4_IRQHandler>:
=======
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
	...

08002c70 <DMA1_Stream4_IRQHandler>:
>>>>>>> flight_hardware

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
<<<<<<< HEAD
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
=======
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
>>>>>>> flight_hardware
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
<<<<<<< HEAD
 8002cf4:	4802      	ldr	r0, [pc, #8]	; (8002d00 <DMA1_Stream4_IRQHandler+0x10>)
 8002cf6:	f001 faef 	bl	80042d8 <HAL_DMA_IRQHandler>
=======
 8002c74:	4802      	ldr	r0, [pc, #8]	; (8002c80 <DMA1_Stream4_IRQHandler+0x10>)
 8002c76:	f001 faef 	bl	8004258 <HAL_DMA_IRQHandler>
>>>>>>> flight_hardware
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
<<<<<<< HEAD
 8002cfa:	bf00      	nop
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000248 	.word	0x20000248

08002d04 <USART2_IRQHandler>:
=======
 8002c7a:	bf00      	nop
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	20000248 	.word	0x20000248

08002c84 <USART2_IRQHandler>:
>>>>>>> flight_hardware

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
<<<<<<< HEAD
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
=======
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
>>>>>>> flight_hardware
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
<<<<<<< HEAD
 8002d08:	4802      	ldr	r0, [pc, #8]	; (8002d14 <USART2_IRQHandler+0x10>)
 8002d0a:	f005 fc5d 	bl	80085c8 <HAL_UART_IRQHandler>
=======
 8002c88:	4802      	ldr	r0, [pc, #8]	; (8002c94 <USART2_IRQHandler+0x10>)
 8002c8a:	f005 fc5d 	bl	8008548 <HAL_UART_IRQHandler>
>>>>>>> flight_hardware
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
<<<<<<< HEAD
 8002d0e:	bf00      	nop
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	20000338 	.word	0x20000338

08002d18 <TIM6_DAC_IRQHandler>:
=======
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	20000338 	.word	0x20000338

08002c98 <TIM6_DAC_IRQHandler>:
>>>>>>> flight_hardware

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
<<<<<<< HEAD
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
=======
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
>>>>>>> flight_hardware
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
<<<<<<< HEAD
 8002d1c:	4803      	ldr	r0, [pc, #12]	; (8002d2c <TIM6_DAC_IRQHandler+0x14>)
 8002d1e:	f005 f8f5 	bl	8007f0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  tim6_overflow_flag = FLAG_SET;
 8002d22:	4b03      	ldr	r3, [pc, #12]	; (8002d30 <TIM6_DAC_IRQHandler+0x18>)
 8002d24:	2201      	movs	r2, #1
 8002d26:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002d28:	bf00      	nop
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	200002a8 	.word	0x200002a8
 8002d30:	200003b6 	.word	0x200003b6

08002d34 <TIM7_IRQHandler>:
=======
 8002c9c:	4803      	ldr	r0, [pc, #12]	; (8002cac <TIM6_DAC_IRQHandler+0x14>)
 8002c9e:	f005 f8f5 	bl	8007e8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  tim6_overflow_flag = FLAG_SET;
 8002ca2:	4b03      	ldr	r3, [pc, #12]	; (8002cb0 <TIM6_DAC_IRQHandler+0x18>)
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002ca8:	bf00      	nop
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	200002a8 	.word	0x200002a8
 8002cb0:	200003b6 	.word	0x200003b6

08002cb4 <TIM7_IRQHandler>:
>>>>>>> flight_hardware

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
<<<<<<< HEAD
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
=======
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
>>>>>>> flight_hardware
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
<<<<<<< HEAD
 8002d38:	4803      	ldr	r0, [pc, #12]	; (8002d48 <TIM7_IRQHandler+0x14>)
 8002d3a:	f005 f8e7 	bl	8007f0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  tim7_overflow_flag = FLAG_SET;
 8002d3e:	4b03      	ldr	r3, [pc, #12]	; (8002d4c <TIM7_IRQHandler+0x18>)
 8002d40:	2201      	movs	r2, #1
 8002d42:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM7_IRQn 1 */
}
 8002d44:	bf00      	nop
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	200002f0 	.word	0x200002f0
 8002d4c:	200003b7 	.word	0x200003b7

08002d50 <DMA2_Stream3_IRQHandler>:
=======
 8002cb8:	4803      	ldr	r0, [pc, #12]	; (8002cc8 <TIM7_IRQHandler+0x14>)
 8002cba:	f005 f8e7 	bl	8007e8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  tim7_overflow_flag = FLAG_SET;
 8002cbe:	4b03      	ldr	r3, [pc, #12]	; (8002ccc <TIM7_IRQHandler+0x18>)
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM7_IRQn 1 */
}
 8002cc4:	bf00      	nop
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	200002f0 	.word	0x200002f0
 8002ccc:	200003b7 	.word	0x200003b7

08002cd0 <DMA2_Stream3_IRQHandler>:
>>>>>>> flight_hardware

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
<<<<<<< HEAD
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
=======
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
>>>>>>> flight_hardware
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
<<<<<<< HEAD
 8002d54:	4802      	ldr	r0, [pc, #8]	; (8002d60 <DMA2_Stream3_IRQHandler+0x10>)
 8002d56:	f001 fabf 	bl	80042d8 <HAL_DMA_IRQHandler>
=======
 8002cd4:	4802      	ldr	r0, [pc, #8]	; (8002ce0 <DMA2_Stream3_IRQHandler+0x10>)
 8002cd6:	f001 fabf 	bl	8004258 <HAL_DMA_IRQHandler>
>>>>>>> flight_hardware
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
<<<<<<< HEAD
 8002d5a:	bf00      	nop
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	200001e8 	.word	0x200001e8

08002d64 <CAN2_RX0_IRQHandler>:
=======
 8002cda:	bf00      	nop
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	200001e8 	.word	0x200001e8

08002ce4 <CAN2_RX0_IRQHandler>:
>>>>>>> flight_hardware

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
<<<<<<< HEAD
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
=======
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
>>>>>>> flight_hardware
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
<<<<<<< HEAD
 8002d68:	4802      	ldr	r0, [pc, #8]	; (8002d74 <CAN2_RX0_IRQHandler+0x10>)
 8002d6a:	f000 fddb 	bl	8003924 <HAL_CAN_IRQHandler>
=======
 8002ce8:	4802      	ldr	r0, [pc, #8]	; (8002cf4 <CAN2_RX0_IRQHandler+0x10>)
 8002cea:	f000 fddb 	bl	80038a4 <HAL_CAN_IRQHandler>
>>>>>>> flight_hardware
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
<<<<<<< HEAD
 8002d6e:	bf00      	nop
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	20000048 	.word	0x20000048

08002d78 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 1 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CAN_RxHeader, CAN_RxData);
 8002d80:	4b09      	ldr	r3, [pc, #36]	; (8002da8 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8002d82:	4a0a      	ldr	r2, [pc, #40]	; (8002dac <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8002d84:	2100      	movs	r1, #0
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 fc84 	bl	8003694 <HAL_CAN_GetRxMessage>
	CAN_RX_Flag = FLAG_SET;
 8002d8c:	4b08      	ldr	r3, [pc, #32]	; (8002db0 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8002d8e:	2201      	movs	r2, #1
 8002d90:	701a      	strb	r2, [r3, #0]

	if(CAN_First_Msg == FLAG_RESET) {
 8002d92:	4b08      	ldr	r3, [pc, #32]	; (8002db4 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d102      	bne.n	8002da0 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
		CAN_First_Msg = FLAG_SET;
 8002d9a:	4b06      	ldr	r3, [pc, #24]	; (8002db4 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	701a      	strb	r2, [r3, #0]
	}
}
 8002da0:	bf00      	nop
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	200003ac 	.word	0x200003ac
 8002dac:	20000390 	.word	0x20000390
 8002db0:	200003b4 	.word	0x200003b4
 8002db4:	200003b5 	.word	0x200003b5

08002db8 <HAL_GPIO_EXTI_Callback>:

// Set the reset RTC flag on the rising edge of the jumper flight input pin
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == jmp_flight.GPIO_Pin) {
 8002dc2:	4b07      	ldr	r3, [pc, #28]	; (8002de0 <HAL_GPIO_EXTI_Callback+0x28>)
 8002dc4:	889b      	ldrh	r3, [r3, #4]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	88fa      	ldrh	r2, [r7, #6]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d102      	bne.n	8002dd4 <HAL_GPIO_EXTI_Callback+0x1c>
		rtc_reset = FLAG_SET;
 8002dce:	4b05      	ldr	r3, [pc, #20]	; (8002de4 <HAL_GPIO_EXTI_Callback+0x2c>)
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	701a      	strb	r2, [r3, #0]
	}
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	20000614 	.word	0x20000614
 8002de4:	2000061c 	.word	0x2000061c

08002de8 <HAL_SPI_TxCpltCallback>:


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
	// Pull CS pin high to deselect the device
    if (hspi->Instance == SPI1) {
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a18      	ldr	r2, [pc, #96]	; (8002e58 <HAL_SPI_TxCpltCallback+0x70>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d108      	bne.n	8002e0c <HAL_SPI_TxCpltCallback+0x24>
        // Pull CS pin high for SPI1 to deselect the device
    	HAL_GPIO_WritePin(cs_spi1.GPIOx, cs_spi1.GPIO_Pin, GPIO_PIN_SET);
 8002dfa:	4b18      	ldr	r3, [pc, #96]	; (8002e5c <HAL_SPI_TxCpltCallback+0x74>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a17      	ldr	r2, [pc, #92]	; (8002e5c <HAL_SPI_TxCpltCallback+0x74>)
 8002e00:	8891      	ldrh	r1, [r2, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	4618      	mov	r0, r3
 8002e06:	f001 fe95 	bl	8004b34 <HAL_GPIO_WritePin>
 8002e0a:	e00c      	b.n	8002e26 <HAL_SPI_TxCpltCallback+0x3e>
    } else if (hspi->Instance == SPI2) {
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a13      	ldr	r2, [pc, #76]	; (8002e60 <HAL_SPI_TxCpltCallback+0x78>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d107      	bne.n	8002e26 <HAL_SPI_TxCpltCallback+0x3e>
        // Pull CS pin high for SPI2 to deselect the device
    	HAL_GPIO_WritePin(cs_spi2.GPIOx, cs_spi2.GPIO_Pin, GPIO_PIN_SET);
 8002e16:	4b13      	ldr	r3, [pc, #76]	; (8002e64 <HAL_SPI_TxCpltCallback+0x7c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a12      	ldr	r2, [pc, #72]	; (8002e64 <HAL_SPI_TxCpltCallback+0x7c>)
 8002e1c:	8891      	ldrh	r1, [r2, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	4618      	mov	r0, r3
 8002e22:	f001 fe87 	bl	8004b34 <HAL_GPIO_WritePin>
    }

    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 0202 	bic.w	r2, r2, #2
 8002e34:	605a      	str	r2, [r3, #4]
    clean_data_buffer(PAGE_SIZE, data_buffer_tx[buffer_tracker ^ 0x01]);
 8002e36:	4b0c      	ldr	r3, [pc, #48]	; (8002e68 <HAL_SPI_TxCpltCallback+0x80>)
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	f083 0301 	eor.w	r3, r3, #1
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	021b      	lsls	r3, r3, #8
 8002e42:	4a0a      	ldr	r2, [pc, #40]	; (8002e6c <HAL_SPI_TxCpltCallback+0x84>)
 8002e44:	4413      	add	r3, r2
 8002e46:	4619      	mov	r1, r3
 8002e48:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002e4c:	f7fe fbd4 	bl	80015f8 <clean_data_buffer>
}
 8002e50:	bf00      	nop
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40013000 	.word	0x40013000
 8002e5c:	200005f4 	.word	0x200005f4
 8002e60:	40003800 	.word	0x40003800
 8002e64:	20000604 	.word	0x20000604
 8002e68:	200005b8 	.word	0x200005b8
 8002e6c:	200003b8 	.word	0x200003b8

08002e70 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
	uart2_rec_flag = FLAG_SET;
 8002e78:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <HAL_UART_RxCpltCallback+0x20>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, UARTRxData, 2);
 8002e7e:	2202      	movs	r2, #2
 8002e80:	4904      	ldr	r1, [pc, #16]	; (8002e94 <HAL_UART_RxCpltCallback+0x24>)
 8002e82:	4805      	ldr	r0, [pc, #20]	; (8002e98 <HAL_UART_RxCpltCallback+0x28>)
 8002e84:	f005 fb7b 	bl	800857e <HAL_UART_Receive_IT>
}
 8002e88:	bf00      	nop
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	2000038a 	.word	0x2000038a
 8002e94:	20000388 	.word	0x20000388
 8002e98:	20000338 	.word	0x20000338

08002e9c <SystemInit>:
=======
 8002cee:	bf00      	nop
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20000048 	.word	0x20000048

08002cf8 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 1 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CAN_RxHeader, CAN_RxData);
 8002d00:	4b09      	ldr	r3, [pc, #36]	; (8002d28 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8002d02:	4a0a      	ldr	r2, [pc, #40]	; (8002d2c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8002d04:	2100      	movs	r1, #0
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 fc84 	bl	8003614 <HAL_CAN_GetRxMessage>
	CAN_RX_Flag = FLAG_SET;
 8002d0c:	4b08      	ldr	r3, [pc, #32]	; (8002d30 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8002d0e:	2201      	movs	r2, #1
 8002d10:	701a      	strb	r2, [r3, #0]

	if(CAN_First_Msg == FLAG_RESET) {
 8002d12:	4b08      	ldr	r3, [pc, #32]	; (8002d34 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d102      	bne.n	8002d20 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
		CAN_First_Msg = FLAG_SET;
 8002d1a:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	701a      	strb	r2, [r3, #0]
	}
}
 8002d20:	bf00      	nop
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	200003ac 	.word	0x200003ac
 8002d2c:	20000390 	.word	0x20000390
 8002d30:	200003b4 	.word	0x200003b4
 8002d34:	200003b5 	.word	0x200003b5

08002d38 <HAL_GPIO_EXTI_Callback>:

// Set the reset RTC flag on the rising edge of the jumper flight input pin
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == jmp_flight.GPIO_Pin) {
 8002d42:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <HAL_GPIO_EXTI_Callback+0x28>)
 8002d44:	889b      	ldrh	r3, [r3, #4]
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	88fa      	ldrh	r2, [r7, #6]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d102      	bne.n	8002d54 <HAL_GPIO_EXTI_Callback+0x1c>
		rtc_reset = FLAG_SET;
 8002d4e:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <HAL_GPIO_EXTI_Callback+0x2c>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	701a      	strb	r2, [r3, #0]
	}
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	20000614 	.word	0x20000614
 8002d64:	2000061c 	.word	0x2000061c

08002d68 <HAL_SPI_TxCpltCallback>:


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
	// Pull CS pin high to deselect the device
    if (hspi->Instance == SPI1) {
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a18      	ldr	r2, [pc, #96]	; (8002dd8 <HAL_SPI_TxCpltCallback+0x70>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d108      	bne.n	8002d8c <HAL_SPI_TxCpltCallback+0x24>
        // Pull CS pin high for SPI1 to deselect the device
    	HAL_GPIO_WritePin(cs_spi1.GPIOx, cs_spi1.GPIO_Pin, GPIO_PIN_SET);
 8002d7a:	4b18      	ldr	r3, [pc, #96]	; (8002ddc <HAL_SPI_TxCpltCallback+0x74>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a17      	ldr	r2, [pc, #92]	; (8002ddc <HAL_SPI_TxCpltCallback+0x74>)
 8002d80:	8891      	ldrh	r1, [r2, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	4618      	mov	r0, r3
 8002d86:	f001 fe95 	bl	8004ab4 <HAL_GPIO_WritePin>
 8002d8a:	e00c      	b.n	8002da6 <HAL_SPI_TxCpltCallback+0x3e>
    } else if (hspi->Instance == SPI2) {
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a13      	ldr	r2, [pc, #76]	; (8002de0 <HAL_SPI_TxCpltCallback+0x78>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d107      	bne.n	8002da6 <HAL_SPI_TxCpltCallback+0x3e>
        // Pull CS pin high for SPI2 to deselect the device
    	HAL_GPIO_WritePin(cs_spi2.GPIOx, cs_spi2.GPIO_Pin, GPIO_PIN_SET);
 8002d96:	4b13      	ldr	r3, [pc, #76]	; (8002de4 <HAL_SPI_TxCpltCallback+0x7c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a12      	ldr	r2, [pc, #72]	; (8002de4 <HAL_SPI_TxCpltCallback+0x7c>)
 8002d9c:	8891      	ldrh	r1, [r2, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	4618      	mov	r0, r3
 8002da2:	f001 fe87 	bl	8004ab4 <HAL_GPIO_WritePin>
    }

    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	685a      	ldr	r2, [r3, #4]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 0202 	bic.w	r2, r2, #2
 8002db4:	605a      	str	r2, [r3, #4]
    clean_data_buffer(PAGE_SIZE, data_buffer_tx[buffer_tracker ^ 0x01]);
 8002db6:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <HAL_SPI_TxCpltCallback+0x80>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	f083 0301 	eor.w	r3, r3, #1
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	021b      	lsls	r3, r3, #8
 8002dc2:	4a0a      	ldr	r2, [pc, #40]	; (8002dec <HAL_SPI_TxCpltCallback+0x84>)
 8002dc4:	4413      	add	r3, r2
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002dcc:	f7fe fc06 	bl	80015dc <clean_data_buffer>
}
 8002dd0:	bf00      	nop
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40013000 	.word	0x40013000
 8002ddc:	200005f4 	.word	0x200005f4
 8002de0:	40003800 	.word	0x40003800
 8002de4:	20000604 	.word	0x20000604
 8002de8:	200005b8 	.word	0x200005b8
 8002dec:	200003b8 	.word	0x200003b8

08002df0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
	uart2_rec_flag = FLAG_SET;
 8002df8:	4b05      	ldr	r3, [pc, #20]	; (8002e10 <HAL_UART_RxCpltCallback+0x20>)
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, UARTRxData, 2);
 8002dfe:	2202      	movs	r2, #2
 8002e00:	4904      	ldr	r1, [pc, #16]	; (8002e14 <HAL_UART_RxCpltCallback+0x24>)
 8002e02:	4805      	ldr	r0, [pc, #20]	; (8002e18 <HAL_UART_RxCpltCallback+0x28>)
 8002e04:	f005 fb7b 	bl	80084fe <HAL_UART_Receive_IT>
}
 8002e08:	bf00      	nop
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	2000038a 	.word	0x2000038a
 8002e14:	20000388 	.word	0x20000388
 8002e18:	20000338 	.word	0x20000338

08002e1c <SystemInit>:
>>>>>>> flight_hardware
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< HEAD
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ea0:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <SystemInit+0x20>)
 8002ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea6:	4a05      	ldr	r2, [pc, #20]	; (8002ebc <SystemInit+0x20>)
 8002ea8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002eac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e20:	4b06      	ldr	r3, [pc, #24]	; (8002e3c <SystemInit+0x20>)
 8002e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e26:	4a05      	ldr	r2, [pc, #20]	; (8002e3c <SystemInit+0x20>)
 8002e28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> flight_hardware

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< HEAD
 8002eb0:	bf00      	nop
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	e000ed00 	.word	0xe000ed00

08002ec0 <uart_transmit_page>:
=======
 8002e30:	bf00      	nop
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	e000ed00 	.word	0xe000ed00

08002e40 <uart_transmit_page>:
>>>>>>> flight_hardware

#include "uart_transmit.h"
/**
 * Transmit one single page over the UART interface
 */
void uart_transmit_page(UART_HandleTypeDef *huart, uint8_t page[PAGE_SIZE]) {
<<<<<<< HEAD
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huart, page, PAGE_SIZE, HAL_MAX_DELAY);
 8002eca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ece:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ed2:	6839      	ldr	r1, [r7, #0]
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f005 fac7 	bl	8008468 <HAL_UART_Transmit>
}
 8002eda:	bf00      	nop
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <send_uart_string>:

void send_uart_string(UART_HandleTypeDef *huart, const char *str) {
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b082      	sub	sp, #8
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
 8002eea:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8002eec:	6838      	ldr	r0, [r7, #0]
 8002eee:	f7fd f97d 	bl	80001ec <strlen>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002efa:	6839      	ldr	r1, [r7, #0]
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f005 fab3 	bl	8008468 <HAL_UART_Transmit>
}
 8002f02:	bf00      	nop
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <send_uart_hex>:
=======
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huart, page, PAGE_SIZE, HAL_MAX_DELAY);
 8002e4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e52:	6839      	ldr	r1, [r7, #0]
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f005 fac7 	bl	80083e8 <HAL_UART_Transmit>
}
 8002e5a:	bf00      	nop
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <send_uart_string>:

void send_uart_string(UART_HandleTypeDef *huart, const char *str) {
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b082      	sub	sp, #8
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
 8002e6a:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8002e6c:	6838      	ldr	r0, [r7, #0]
 8002e6e:	f7fd f9bd 	bl	80001ec <strlen>
 8002e72:	4603      	mov	r3, r0
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e7a:	6839      	ldr	r1, [r7, #0]
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f005 fab3 	bl	80083e8 <HAL_UART_Transmit>
}
 8002e82:	bf00      	nop
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <send_uart_hex>:
>>>>>>> flight_hardware
	// Call the send_uart_string function to send the value to UART
	send_uart_string(huart, value_str);
	send_uart_string(huart, "\r\n");
}

void send_uart_hex(UART_HandleTypeDef *huart, uint8_t value) {
<<<<<<< HEAD
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b084      	sub	sp, #16
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
 8002f12:	460b      	mov	r3, r1
 8002f14:	70fb      	strb	r3, [r7, #3]
	uint8_t buffer[1];
	buffer[0] = value;
 8002f16:	78fb      	ldrb	r3, [r7, #3]
 8002f18:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(huart, buffer, 1, HAL_MAX_DELAY);
 8002f1a:	f107 010c 	add.w	r1, r7, #12
 8002f1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f22:	2201      	movs	r2, #1
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f005 fa9f 	bl	8008468 <HAL_UART_Transmit>
}
 8002f2a:	bf00      	nop
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
	...

08002f34 <Reset_Handler>:
=======
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b084      	sub	sp, #16
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
 8002e92:	460b      	mov	r3, r1
 8002e94:	70fb      	strb	r3, [r7, #3]
	uint8_t buffer[1];
	buffer[0] = value;
 8002e96:	78fb      	ldrb	r3, [r7, #3]
 8002e98:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(huart, buffer, 1, HAL_MAX_DELAY);
 8002e9a:	f107 010c 	add.w	r1, r7, #12
 8002e9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f005 fa9f 	bl	80083e8 <HAL_UART_Transmit>
}
 8002eaa:	bf00      	nop
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
	...

08002eb4 <Reset_Handler>:
>>>>>>> flight_hardware

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
<<<<<<< HEAD
 8002f34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f6c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002f38:	f7ff ffb0 	bl	8002e9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f3c:	480c      	ldr	r0, [pc, #48]	; (8002f70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f3e:	490d      	ldr	r1, [pc, #52]	; (8002f74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f40:	4a0d      	ldr	r2, [pc, #52]	; (8002f78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f44:	e002      	b.n	8002f4c <LoopCopyDataInit>

08002f46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f4a:	3304      	adds	r3, #4

08002f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f50:	d3f9      	bcc.n	8002f46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f52:	4a0a      	ldr	r2, [pc, #40]	; (8002f7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f54:	4c0a      	ldr	r4, [pc, #40]	; (8002f80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f58:	e001      	b.n	8002f5e <LoopFillZerobss>

08002f5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f5c:	3204      	adds	r2, #4

08002f5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f60:	d3fb      	bcc.n	8002f5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f62:	f006 fa8f 	bl	8009484 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f66:	f7fd fedd 	bl	8000d24 <main>
  bx  lr    
 8002f6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002f6c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002f70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f74:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8002f78:	080095ac 	.word	0x080095ac
  ldr r2, =_sbss
 8002f7c:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8002f80:	20000638 	.word	0x20000638

08002f84 <ADC_IRQHandler>:
=======
 8002eb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002eec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002eb8:	f7ff ffb0 	bl	8002e1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ebc:	480c      	ldr	r0, [pc, #48]	; (8002ef0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ebe:	490d      	ldr	r1, [pc, #52]	; (8002ef4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ec0:	4a0d      	ldr	r2, [pc, #52]	; (8002ef8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ec4:	e002      	b.n	8002ecc <LoopCopyDataInit>

08002ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eca:	3304      	adds	r3, #4

08002ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ed0:	d3f9      	bcc.n	8002ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ed2:	4a0a      	ldr	r2, [pc, #40]	; (8002efc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ed4:	4c0a      	ldr	r4, [pc, #40]	; (8002f00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ed8:	e001      	b.n	8002ede <LoopFillZerobss>

08002eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002edc:	3204      	adds	r2, #4

08002ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ee0:	d3fb      	bcc.n	8002eda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ee2:	f006 fa8f 	bl	8009404 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ee6:	f7fd ff1d 	bl	8000d24 <main>
  bx  lr    
 8002eea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002eec:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ef4:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8002ef8:	0800952c 	.word	0x0800952c
  ldr r2, =_sbss
 8002efc:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8002f00:	20000638 	.word	0x20000638

08002f04 <ADC_IRQHandler>:
>>>>>>> flight_hardware
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
<<<<<<< HEAD
 8002f84:	e7fe      	b.n	8002f84 <ADC_IRQHandler>
	...

08002f88 <HAL_Init>:
=======
 8002f04:	e7fe      	b.n	8002f04 <ADC_IRQHandler>
	...

08002f08 <HAL_Init>:
>>>>>>> flight_hardware
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f8c:	4b0e      	ldr	r3, [pc, #56]	; (8002fc8 <HAL_Init+0x40>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a0d      	ldr	r2, [pc, #52]	; (8002fc8 <HAL_Init+0x40>)
 8002f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f96:	6013      	str	r3, [r2, #0]
=======
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f0c:	4b0e      	ldr	r3, [pc, #56]	; (8002f48 <HAL_Init+0x40>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a0d      	ldr	r2, [pc, #52]	; (8002f48 <HAL_Init+0x40>)
 8002f12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f16:	6013      	str	r3, [r2, #0]
>>>>>>> flight_hardware
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
<<<<<<< HEAD
 8002f98:	4b0b      	ldr	r3, [pc, #44]	; (8002fc8 <HAL_Init+0x40>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a0a      	ldr	r2, [pc, #40]	; (8002fc8 <HAL_Init+0x40>)
 8002f9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fa2:	6013      	str	r3, [r2, #0]
=======
 8002f18:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <HAL_Init+0x40>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a0a      	ldr	r2, [pc, #40]	; (8002f48 <HAL_Init+0x40>)
 8002f1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f22:	6013      	str	r3, [r2, #0]
>>>>>>> flight_hardware
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 8002fa4:	4b08      	ldr	r3, [pc, #32]	; (8002fc8 <HAL_Init+0x40>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a07      	ldr	r2, [pc, #28]	; (8002fc8 <HAL_Init+0x40>)
 8002faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fae:	6013      	str	r3, [r2, #0]
=======
 8002f24:	4b08      	ldr	r3, [pc, #32]	; (8002f48 <HAL_Init+0x40>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a07      	ldr	r2, [pc, #28]	; (8002f48 <HAL_Init+0x40>)
 8002f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f2e:	6013      	str	r3, [r2, #0]
>>>>>>> flight_hardware
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 8002fb0:	2003      	movs	r0, #3
 8002fb2:	f000 ffb7 	bl	8003f24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fb6:	200f      	movs	r0, #15
 8002fb8:	f000 f808 	bl	8002fcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fbc:	f7ff fb7e 	bl	80026bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40023c00 	.word	0x40023c00

08002fcc <HAL_InitTick>:
=======
 8002f30:	2003      	movs	r0, #3
 8002f32:	f000 ffb7 	bl	8003ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f36:	200f      	movs	r0, #15
 8002f38:	f000 f808 	bl	8002f4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f3c:	f7ff fba0 	bl	8002680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40023c00 	.word	0x40023c00

08002f4c <HAL_InitTick>:
>>>>>>> flight_hardware
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fd4:	4b12      	ldr	r3, [pc, #72]	; (8003020 <HAL_InitTick+0x54>)
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	4b12      	ldr	r3, [pc, #72]	; (8003024 <HAL_InitTick+0x58>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	4619      	mov	r1, r3
 8002fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 ffcf 	bl	8003f8e <HAL_SYSTICK_Config>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e00e      	b.n	8003018 <HAL_InitTick+0x4c>
=======
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f54:	4b12      	ldr	r3, [pc, #72]	; (8002fa0 <HAL_InitTick+0x54>)
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	4b12      	ldr	r3, [pc, #72]	; (8002fa4 <HAL_InitTick+0x58>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f62:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 ffcf 	bl	8003f0e <HAL_SYSTICK_Config>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e00e      	b.n	8002f98 <HAL_InitTick+0x4c>
>>>>>>> flight_hardware
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< HEAD
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2b0f      	cmp	r3, #15
 8002ffe:	d80a      	bhi.n	8003016 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003000:	2200      	movs	r2, #0
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003008:	f000 ff97 	bl	8003f3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800300c:	4a06      	ldr	r2, [pc, #24]	; (8003028 <HAL_InitTick+0x5c>)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6013      	str	r3, [r2, #0]
=======
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b0f      	cmp	r3, #15
 8002f7e:	d80a      	bhi.n	8002f96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f80:	2200      	movs	r2, #0
 8002f82:	6879      	ldr	r1, [r7, #4]
 8002f84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f88:	f000 ff97 	bl	8003eba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f8c:	4a06      	ldr	r2, [pc, #24]	; (8002fa8 <HAL_InitTick+0x5c>)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6013      	str	r3, [r2, #0]
>>>>>>> flight_hardware
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8003012:	2300      	movs	r3, #0
 8003014:	e000      	b.n	8003018 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
}
 8003018:	4618      	mov	r0, r3
 800301a:	3708      	adds	r7, #8
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	2000001c 	.word	0x2000001c
 8003024:	20000024 	.word	0x20000024
 8003028:	20000020 	.word	0x20000020

0800302c <HAL_IncTick>:
=======
 8002f92:	2300      	movs	r3, #0
 8002f94:	e000      	b.n	8002f98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	2000001c 	.word	0x2000001c
 8002fa4:	20000024 	.word	0x20000024
 8002fa8:	20000020 	.word	0x20000020

08002fac <HAL_IncTick>:
>>>>>>> flight_hardware
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003030:	4b06      	ldr	r3, [pc, #24]	; (800304c <HAL_IncTick+0x20>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	461a      	mov	r2, r3
 8003036:	4b06      	ldr	r3, [pc, #24]	; (8003050 <HAL_IncTick+0x24>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4413      	add	r3, r2
 800303c:	4a04      	ldr	r2, [pc, #16]	; (8003050 <HAL_IncTick+0x24>)
 800303e:	6013      	str	r3, [r2, #0]
}
 8003040:	bf00      	nop
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	20000024 	.word	0x20000024
 8003050:	20000634 	.word	0x20000634

08003054 <HAL_GetTick>:
=======
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fb0:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <HAL_IncTick+0x20>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <HAL_IncTick+0x24>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4413      	add	r3, r2
 8002fbc:	4a04      	ldr	r2, [pc, #16]	; (8002fd0 <HAL_IncTick+0x24>)
 8002fbe:	6013      	str	r3, [r2, #0]
}
 8002fc0:	bf00      	nop
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	20000024 	.word	0x20000024
 8002fd0:	20000634 	.word	0x20000634

08002fd4 <HAL_GetTick>:
>>>>>>> flight_hardware
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  return uwTick;
 8003058:	4b03      	ldr	r3, [pc, #12]	; (8003068 <HAL_GetTick+0x14>)
 800305a:	681b      	ldr	r3, [r3, #0]
}
 800305c:	4618      	mov	r0, r3
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	20000634 	.word	0x20000634

0800306c <HAL_Delay>:
=======
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8002fd8:	4b03      	ldr	r3, [pc, #12]	; (8002fe8 <HAL_GetTick+0x14>)
 8002fda:	681b      	ldr	r3, [r3, #0]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	20000634 	.word	0x20000634

08002fec <HAL_Delay>:
>>>>>>> flight_hardware
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< HEAD
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003074:	f7ff ffee 	bl	8003054 <HAL_GetTick>
 8003078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003084:	d005      	beq.n	8003092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003086:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <HAL_Delay+0x44>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	461a      	mov	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4413      	add	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003092:	bf00      	nop
 8003094:	f7ff ffde 	bl	8003054 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d8f7      	bhi.n	8003094 <HAL_Delay+0x28>
  {
  }
}
 80030a4:	bf00      	nop
 80030a6:	bf00      	nop
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	20000024 	.word	0x20000024

080030b4 <HAL_CAN_Init>:
=======
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ff4:	f7ff ffee 	bl	8002fd4 <HAL_GetTick>
 8002ff8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003004:	d005      	beq.n	8003012 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003006:	4b0a      	ldr	r3, [pc, #40]	; (8003030 <HAL_Delay+0x44>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	461a      	mov	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4413      	add	r3, r2
 8003010:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003012:	bf00      	nop
 8003014:	f7ff ffde 	bl	8002fd4 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	429a      	cmp	r2, r3
 8003022:	d8f7      	bhi.n	8003014 <HAL_Delay+0x28>
  {
  }
}
 8003024:	bf00      	nop
 8003026:	bf00      	nop
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	20000024 	.word	0x20000024

08003034 <HAL_CAN_Init>:
>>>>>>> flight_hardware
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
=======
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
>>>>>>> flight_hardware
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
<<<<<<< HEAD
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e0ed      	b.n	80032a2 <HAL_CAN_Init+0x1ee>
=======
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e0ed      	b.n	8003222 <HAL_CAN_Init+0x1ee>
>>>>>>> flight_hardware
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
<<<<<<< HEAD
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d102      	bne.n	80030d8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7ff fb1a 	bl	800270c <HAL_CAN_MspInit>
=======
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 3020 	ldrb.w	r3, [r3, #32]
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d102      	bne.n	8003058 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7ff fb3c 	bl	80026d0 <HAL_CAN_MspInit>
>>>>>>> flight_hardware
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
<<<<<<< HEAD
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0201 	orr.w	r2, r2, #1
 80030e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030e8:	f7ff ffb4 	bl	8003054 <HAL_GetTick>
 80030ec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80030ee:	e012      	b.n	8003116 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80030f0:	f7ff ffb0 	bl	8003054 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b0a      	cmp	r3, #10
 80030fc:	d90b      	bls.n	8003116 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003102:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2205      	movs	r2, #5
 800310e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e0c5      	b.n	80032a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0e5      	beq.n	80030f0 <HAL_CAN_Init+0x3c>
=======
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0201 	orr.w	r2, r2, #1
 8003066:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003068:	f7ff ffb4 	bl	8002fd4 <HAL_GetTick>
 800306c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800306e:	e012      	b.n	8003096 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003070:	f7ff ffb0 	bl	8002fd4 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b0a      	cmp	r3, #10
 800307c:	d90b      	bls.n	8003096 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2205      	movs	r2, #5
 800308e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e0c5      	b.n	8003222 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0e5      	beq.n	8003070 <HAL_CAN_Init+0x3c>
>>>>>>> flight_hardware
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
<<<<<<< HEAD
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0202 	bic.w	r2, r2, #2
 8003132:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003134:	f7ff ff8e 	bl	8003054 <HAL_GetTick>
 8003138:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800313a:	e012      	b.n	8003162 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800313c:	f7ff ff8a 	bl	8003054 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b0a      	cmp	r3, #10
 8003148:	d90b      	bls.n	8003162 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2205      	movs	r2, #5
 800315a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e09f      	b.n	80032a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1e5      	bne.n	800313c <HAL_CAN_Init+0x88>
=======
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 0202 	bic.w	r2, r2, #2
 80030b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030b4:	f7ff ff8e 	bl	8002fd4 <HAL_GetTick>
 80030b8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80030ba:	e012      	b.n	80030e2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80030bc:	f7ff ff8a 	bl	8002fd4 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b0a      	cmp	r3, #10
 80030c8:	d90b      	bls.n	80030e2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2205      	movs	r2, #5
 80030da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e09f      	b.n	8003222 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1e5      	bne.n	80030bc <HAL_CAN_Init+0x88>
>>>>>>> flight_hardware
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
<<<<<<< HEAD
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	7e1b      	ldrb	r3, [r3, #24]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d108      	bne.n	800318a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	e007      	b.n	800319a <HAL_CAN_Init+0xe6>
=======
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	7e1b      	ldrb	r3, [r3, #24]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d108      	bne.n	800310a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	e007      	b.n	800311a <HAL_CAN_Init+0xe6>
>>>>>>> flight_hardware
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
<<<<<<< HEAD
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003198:	601a      	str	r2, [r3, #0]
=======
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003118:	601a      	str	r2, [r3, #0]
>>>>>>> flight_hardware
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
<<<<<<< HEAD
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	7e5b      	ldrb	r3, [r3, #25]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d108      	bne.n	80031b4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	e007      	b.n	80031c4 <HAL_CAN_Init+0x110>
=======
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	7e5b      	ldrb	r3, [r3, #25]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d108      	bne.n	8003134 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003130:	601a      	str	r2, [r3, #0]
 8003132:	e007      	b.n	8003144 <HAL_CAN_Init+0x110>
>>>>>>> flight_hardware
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
<<<<<<< HEAD
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031c2:	601a      	str	r2, [r3, #0]
=======
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003142:	601a      	str	r2, [r3, #0]
>>>>>>> flight_hardware
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
<<<<<<< HEAD
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	7e9b      	ldrb	r3, [r3, #26]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d108      	bne.n	80031de <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0220 	orr.w	r2, r2, #32
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	e007      	b.n	80031ee <HAL_CAN_Init+0x13a>
=======
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	7e9b      	ldrb	r3, [r3, #26]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d108      	bne.n	800315e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f042 0220 	orr.w	r2, r2, #32
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	e007      	b.n	800316e <HAL_CAN_Init+0x13a>
>>>>>>> flight_hardware
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
<<<<<<< HEAD
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 0220 	bic.w	r2, r2, #32
 80031ec:	601a      	str	r2, [r3, #0]
=======
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 0220 	bic.w	r2, r2, #32
 800316c:	601a      	str	r2, [r3, #0]
>>>>>>> flight_hardware
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
<<<<<<< HEAD
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	7edb      	ldrb	r3, [r3, #27]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d108      	bne.n	8003208 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 0210 	bic.w	r2, r2, #16
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	e007      	b.n	8003218 <HAL_CAN_Init+0x164>
=======
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	7edb      	ldrb	r3, [r3, #27]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d108      	bne.n	8003188 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 0210 	bic.w	r2, r2, #16
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	e007      	b.n	8003198 <HAL_CAN_Init+0x164>
>>>>>>> flight_hardware
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
<<<<<<< HEAD
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f042 0210 	orr.w	r2, r2, #16
 8003216:	601a      	str	r2, [r3, #0]
=======
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f042 0210 	orr.w	r2, r2, #16
 8003196:	601a      	str	r2, [r3, #0]
>>>>>>> flight_hardware
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
<<<<<<< HEAD
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	7f1b      	ldrb	r3, [r3, #28]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d108      	bne.n	8003232 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f042 0208 	orr.w	r2, r2, #8
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	e007      	b.n	8003242 <HAL_CAN_Init+0x18e>
=======
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	7f1b      	ldrb	r3, [r3, #28]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d108      	bne.n	80031b2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f042 0208 	orr.w	r2, r2, #8
 80031ae:	601a      	str	r2, [r3, #0]
 80031b0:	e007      	b.n	80031c2 <HAL_CAN_Init+0x18e>
>>>>>>> flight_hardware
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
<<<<<<< HEAD
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 0208 	bic.w	r2, r2, #8
 8003240:	601a      	str	r2, [r3, #0]
=======
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 0208 	bic.w	r2, r2, #8
 80031c0:	601a      	str	r2, [r3, #0]
>>>>>>> flight_hardware
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
<<<<<<< HEAD
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	7f5b      	ldrb	r3, [r3, #29]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d108      	bne.n	800325c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f042 0204 	orr.w	r2, r2, #4
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	e007      	b.n	800326c <HAL_CAN_Init+0x1b8>
=======
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	7f5b      	ldrb	r3, [r3, #29]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d108      	bne.n	80031dc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f042 0204 	orr.w	r2, r2, #4
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	e007      	b.n	80031ec <HAL_CAN_Init+0x1b8>
>>>>>>> flight_hardware
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
<<<<<<< HEAD
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0204 	bic.w	r2, r2, #4
 800326a:	601a      	str	r2, [r3, #0]
=======
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 0204 	bic.w	r2, r2, #4
 80031ea:	601a      	str	r2, [r3, #0]
>>>>>>> flight_hardware
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
<<<<<<< HEAD
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	431a      	orrs	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	ea42 0103 	orr.w	r1, r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	1e5a      	subs	r2, r3, #1
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	61da      	str	r2, [r3, #28]
=======
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	431a      	orrs	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	431a      	orrs	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	ea42 0103 	orr.w	r1, r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	1e5a      	subs	r2, r3, #1
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	61da      	str	r2, [r3, #28]
>>>>>>> flight_hardware
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
<<<<<<< HEAD
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
	...

080032ac <HAL_CAN_ConfigFilter>:
=======
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
	...

0800322c <HAL_CAN_ConfigFilter>:
>>>>>>> flight_hardware
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
<<<<<<< HEAD
 80032ac:	b480      	push	{r7}
 80032ae:	b087      	sub	sp, #28
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032c2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80032c4:	7cfb      	ldrb	r3, [r7, #19]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d003      	beq.n	80032d2 <HAL_CAN_ConfigFilter+0x26>
 80032ca:	7cfb      	ldrb	r3, [r7, #19]
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	f040 80be 	bne.w	800344e <HAL_CAN_ConfigFilter+0x1a2>
=======
 800322c:	b480      	push	{r7}
 800322e:	b087      	sub	sp, #28
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003242:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003244:	7cfb      	ldrb	r3, [r7, #19]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d003      	beq.n	8003252 <HAL_CAN_ConfigFilter+0x26>
 800324a:	7cfb      	ldrb	r3, [r7, #19]
 800324c:	2b02      	cmp	r3, #2
 800324e:	f040 80be 	bne.w	80033ce <HAL_CAN_ConfigFilter+0x1a2>
>>>>>>> flight_hardware
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
<<<<<<< HEAD
 80032d2:	4b65      	ldr	r3, [pc, #404]	; (8003468 <HAL_CAN_ConfigFilter+0x1bc>)
 80032d4:	617b      	str	r3, [r7, #20]
=======
 8003252:	4b65      	ldr	r3, [pc, #404]	; (80033e8 <HAL_CAN_ConfigFilter+0x1bc>)
 8003254:	617b      	str	r3, [r7, #20]
>>>>>>> flight_hardware
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
<<<<<<< HEAD
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80032dc:	f043 0201 	orr.w	r2, r3, #1
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
=======
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800325c:	f043 0201 	orr.w	r2, r3, #1
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
>>>>>>> flight_hardware
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
<<<<<<< HEAD
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80032ec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	021b      	lsls	r3, r3, #8
 8003302:	431a      	orrs	r2, r3
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
=======
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800326c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	021b      	lsls	r3, r3, #8
 8003282:	431a      	orrs	r2, r3
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
>>>>>>> flight_hardware

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
<<<<<<< HEAD
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	f003 031f 	and.w	r3, r3, #31
 8003312:	2201      	movs	r2, #1
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	43db      	mvns	r3, r3
 8003324:	401a      	ands	r2, r3
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d123      	bne.n	800337c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	43db      	mvns	r3, r3
 800333e:	401a      	ands	r2, r3
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
=======
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	f003 031f 	and.w	r3, r3, #31
 8003292:	2201      	movs	r2, #1
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	43db      	mvns	r3, r3
 80032a4:	401a      	ands	r2, r3
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	69db      	ldr	r3, [r3, #28]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d123      	bne.n	80032fc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	43db      	mvns	r3, r3
 80032be:	401a      	ands	r2, r3
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
>>>>>>> flight_hardware

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
<<<<<<< HEAD
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003356:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	3248      	adds	r2, #72	; 0x48
 800335c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
=======
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80032d6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	3248      	adds	r2, #72	; 0x48
 80032dc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
>>>>>>> flight_hardware

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
<<<<<<< HEAD
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003370:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003372:	6979      	ldr	r1, [r7, #20]
 8003374:	3348      	adds	r3, #72	; 0x48
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	440b      	add	r3, r1
 800337a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d122      	bne.n	80033ca <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	431a      	orrs	r2, r3
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
=======
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80032f0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80032f2:	6979      	ldr	r1, [r7, #20]
 80032f4:	3348      	adds	r3, #72	; 0x48
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	440b      	add	r3, r1
 80032fa:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	69db      	ldr	r3, [r3, #28]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d122      	bne.n	800334a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	431a      	orrs	r2, r3
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
>>>>>>> flight_hardware

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
<<<<<<< HEAD
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80033a4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	3248      	adds	r2, #72	; 0x48
 80033aa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
=======
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003324:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	3248      	adds	r2, #72	; 0x48
 800332a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
>>>>>>> flight_hardware

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
<<<<<<< HEAD
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033be:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033c0:	6979      	ldr	r1, [r7, #20]
 80033c2:	3348      	adds	r3, #72	; 0x48
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	440b      	add	r3, r1
 80033c8:	605a      	str	r2, [r3, #4]
=======
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800333e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003340:	6979      	ldr	r1, [r7, #20]
 8003342:	3348      	adds	r3, #72	; 0x48
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	440b      	add	r3, r1
 8003348:	605a      	str	r2, [r3, #4]
>>>>>>> flight_hardware
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
<<<<<<< HEAD
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d109      	bne.n	80033e6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	43db      	mvns	r3, r3
 80033dc:	401a      	ands	r2, r3
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80033e4:	e007      	b.n	80033f6 <HAL_CAN_ConfigFilter+0x14a>
=======
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d109      	bne.n	8003366 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	43db      	mvns	r3, r3
 800335c:	401a      	ands	r2, r3
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003364:	e007      	b.n	8003376 <HAL_CAN_ConfigFilter+0x14a>
>>>>>>> flight_hardware
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
<<<<<<< HEAD
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	431a      	orrs	r2, r3
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
=======
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	431a      	orrs	r2, r3
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
>>>>>>> flight_hardware
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
<<<<<<< HEAD
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d109      	bne.n	8003412 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	43db      	mvns	r3, r3
 8003408:	401a      	ands	r2, r3
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003410:	e007      	b.n	8003422 <HAL_CAN_ConfigFilter+0x176>
=======
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d109      	bne.n	8003392 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	43db      	mvns	r3, r3
 8003388:	401a      	ands	r2, r3
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003390:	e007      	b.n	80033a2 <HAL_CAN_ConfigFilter+0x176>
>>>>>>> flight_hardware
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
<<<<<<< HEAD
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	431a      	orrs	r2, r3
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
=======
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	431a      	orrs	r2, r3
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
>>>>>>> flight_hardware
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
<<<<<<< HEAD
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d107      	bne.n	800343a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	431a      	orrs	r2, r3
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
=======
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d107      	bne.n	80033ba <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	431a      	orrs	r2, r3
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
>>>>>>> flight_hardware
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
<<<<<<< HEAD
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003440:	f023 0201 	bic.w	r2, r3, #1
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800344a:	2300      	movs	r3, #0
 800344c:	e006      	b.n	800345c <HAL_CAN_ConfigFilter+0x1b0>
=======
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80033c0:	f023 0201 	bic.w	r2, r3, #1
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80033ca:	2300      	movs	r3, #0
 80033cc:	e006      	b.n	80033dc <HAL_CAN_ConfigFilter+0x1b0>
>>>>>>> flight_hardware
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
<<<<<<< HEAD
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
  }
}
 800345c:	4618      	mov	r0, r3
 800345e:	371c      	adds	r7, #28
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	40006400 	.word	0x40006400

0800346c <HAL_CAN_Start>:
=======
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
  }
}
 80033dc:	4618      	mov	r0, r3
 80033de:	371c      	adds	r7, #28
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	40006400 	.word	0x40006400

080033ec <HAL_CAN_Start>:
>>>>>>> flight_hardware
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 3020 	ldrb.w	r3, [r3, #32]
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b01      	cmp	r3, #1
 800347e:	d12e      	bne.n	80034de <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2202      	movs	r2, #2
 8003484:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0201 	bic.w	r2, r2, #1
 8003496:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003498:	f7ff fddc 	bl	8003054 <HAL_GetTick>
 800349c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800349e:	e012      	b.n	80034c6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80034a0:	f7ff fdd8 	bl	8003054 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b0a      	cmp	r3, #10
 80034ac:	d90b      	bls.n	80034c6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2205      	movs	r2, #5
 80034be:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e012      	b.n	80034ec <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1e5      	bne.n	80034a0 <HAL_CAN_Start+0x34>
=======
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d12e      	bne.n	800345e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2202      	movs	r2, #2
 8003404:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0201 	bic.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003418:	f7ff fddc 	bl	8002fd4 <HAL_GetTick>
 800341c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800341e:	e012      	b.n	8003446 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003420:	f7ff fdd8 	bl	8002fd4 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b0a      	cmp	r3, #10
 800342c:	d90b      	bls.n	8003446 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2205      	movs	r2, #5
 800343e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e012      	b.n	800346c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1e5      	bne.n	8003420 <HAL_CAN_Start+0x34>
>>>>>>> flight_hardware
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
<<<<<<< HEAD
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80034da:	2300      	movs	r3, #0
 80034dc:	e006      	b.n	80034ec <HAL_CAN_Start+0x80>
=======
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800345a:	2300      	movs	r3, #0
 800345c:	e006      	b.n	800346c <HAL_CAN_Start+0x80>
>>>>>>> flight_hardware
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
<<<<<<< HEAD
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
  }
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <HAL_CAN_AddTxMessage>:
=======
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
  }
}
 800346c:	4618      	mov	r0, r3
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <HAL_CAN_AddTxMessage>:
>>>>>>> flight_hardware
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
<<<<<<< HEAD
 80034f4:	b480      	push	{r7}
 80034f6:	b089      	sub	sp, #36	; 0x24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
 8003500:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003508:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	61bb      	str	r3, [r7, #24]
=======
 8003474:	b480      	push	{r7}
 8003476:	b089      	sub	sp, #36	; 0x24
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
 8003480:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003488:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	61bb      	str	r3, [r7, #24]
>>>>>>> flight_hardware
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
<<<<<<< HEAD
 8003512:	7ffb      	ldrb	r3, [r7, #31]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d003      	beq.n	8003520 <HAL_CAN_AddTxMessage+0x2c>
 8003518:	7ffb      	ldrb	r3, [r7, #31]
 800351a:	2b02      	cmp	r3, #2
 800351c:	f040 80ad 	bne.w	800367a <HAL_CAN_AddTxMessage+0x186>
=======
 8003492:	7ffb      	ldrb	r3, [r7, #31]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d003      	beq.n	80034a0 <HAL_CAN_AddTxMessage+0x2c>
 8003498:	7ffb      	ldrb	r3, [r7, #31]
 800349a:	2b02      	cmp	r3, #2
 800349c:	f040 80ad 	bne.w	80035fa <HAL_CAN_AddTxMessage+0x186>
>>>>>>> flight_hardware
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
<<<<<<< HEAD
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10a      	bne.n	8003540 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003530:	2b00      	cmp	r3, #0
 8003532:	d105      	bne.n	8003540 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800353a:	2b00      	cmp	r3, #0
 800353c:	f000 8095 	beq.w	800366a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	0e1b      	lsrs	r3, r3, #24
 8003544:	f003 0303 	and.w	r3, r3, #3
 8003548:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800354a:	2201      	movs	r2, #1
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	409a      	lsls	r2, r3
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d10d      	bne.n	8003578 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003566:	68f9      	ldr	r1, [r7, #12]
 8003568:	6809      	ldr	r1, [r1, #0]
 800356a:	431a      	orrs	r2, r3
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	3318      	adds	r3, #24
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	440b      	add	r3, r1
 8003574:	601a      	str	r2, [r3, #0]
 8003576:	e00f      	b.n	8003598 <HAL_CAN_AddTxMessage+0xa4>
=======
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10a      	bne.n	80034c0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d105      	bne.n	80034c0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 8095 	beq.w	80035ea <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	0e1b      	lsrs	r3, r3, #24
 80034c4:	f003 0303 	and.w	r3, r3, #3
 80034c8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80034ca:	2201      	movs	r2, #1
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	409a      	lsls	r2, r3
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d10d      	bne.n	80034f8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80034e6:	68f9      	ldr	r1, [r7, #12]
 80034e8:	6809      	ldr	r1, [r1, #0]
 80034ea:	431a      	orrs	r2, r3
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	3318      	adds	r3, #24
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	440b      	add	r3, r1
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	e00f      	b.n	8003518 <HAL_CAN_AddTxMessage+0xa4>
>>>>>>> flight_hardware
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
<<<<<<< HEAD
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003582:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003588:	68f9      	ldr	r1, [r7, #12]
 800358a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800358c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	3318      	adds	r3, #24
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	440b      	add	r3, r1
 8003596:	601a      	str	r2, [r3, #0]
=======
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003502:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003508:	68f9      	ldr	r1, [r7, #12]
 800350a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800350c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	3318      	adds	r3, #24
 8003512:	011b      	lsls	r3, r3, #4
 8003514:	440b      	add	r3, r1
 8003516:	601a      	str	r2, [r3, #0]
>>>>>>> flight_hardware
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
<<<<<<< HEAD
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6819      	ldr	r1, [r3, #0]
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	691a      	ldr	r2, [r3, #16]
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	3318      	adds	r3, #24
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	440b      	add	r3, r1
 80035a8:	3304      	adds	r3, #4
 80035aa:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	7d1b      	ldrb	r3, [r3, #20]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d111      	bne.n	80035d8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	3318      	adds	r3, #24
 80035bc:	011b      	lsls	r3, r3, #4
 80035be:	4413      	add	r3, r2
 80035c0:	3304      	adds	r3, #4
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	6811      	ldr	r1, [r2, #0]
 80035c8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	3318      	adds	r3, #24
 80035d0:	011b      	lsls	r3, r3, #4
 80035d2:	440b      	add	r3, r1
 80035d4:	3304      	adds	r3, #4
 80035d6:	601a      	str	r2, [r3, #0]
=======
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6819      	ldr	r1, [r3, #0]
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	691a      	ldr	r2, [r3, #16]
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	3318      	adds	r3, #24
 8003524:	011b      	lsls	r3, r3, #4
 8003526:	440b      	add	r3, r1
 8003528:	3304      	adds	r3, #4
 800352a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	7d1b      	ldrb	r3, [r3, #20]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d111      	bne.n	8003558 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	3318      	adds	r3, #24
 800353c:	011b      	lsls	r3, r3, #4
 800353e:	4413      	add	r3, r2
 8003540:	3304      	adds	r3, #4
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	6811      	ldr	r1, [r2, #0]
 8003548:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	3318      	adds	r3, #24
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	440b      	add	r3, r1
 8003554:	3304      	adds	r3, #4
 8003556:	601a      	str	r2, [r3, #0]
>>>>>>> flight_hardware
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
<<<<<<< HEAD
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3307      	adds	r3, #7
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	061a      	lsls	r2, r3, #24
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3306      	adds	r3, #6
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	041b      	lsls	r3, r3, #16
 80035e8:	431a      	orrs	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	3305      	adds	r3, #5
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	021b      	lsls	r3, r3, #8
 80035f2:	4313      	orrs	r3, r2
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	3204      	adds	r2, #4
 80035f8:	7812      	ldrb	r2, [r2, #0]
 80035fa:	4610      	mov	r0, r2
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	6811      	ldr	r1, [r2, #0]
 8003600:	ea43 0200 	orr.w	r2, r3, r0
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	011b      	lsls	r3, r3, #4
 8003608:	440b      	add	r3, r1
 800360a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800360e:	601a      	str	r2, [r3, #0]
=======
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3307      	adds	r3, #7
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	061a      	lsls	r2, r3, #24
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	3306      	adds	r3, #6
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	041b      	lsls	r3, r3, #16
 8003568:	431a      	orrs	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	3305      	adds	r3, #5
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	021b      	lsls	r3, r3, #8
 8003572:	4313      	orrs	r3, r2
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	3204      	adds	r2, #4
 8003578:	7812      	ldrb	r2, [r2, #0]
 800357a:	4610      	mov	r0, r2
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	6811      	ldr	r1, [r2, #0]
 8003580:	ea43 0200 	orr.w	r2, r3, r0
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	440b      	add	r3, r1
 800358a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800358e:	601a      	str	r2, [r3, #0]
>>>>>>> flight_hardware
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
<<<<<<< HEAD
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3303      	adds	r3, #3
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	061a      	lsls	r2, r3, #24
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3302      	adds	r3, #2
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	041b      	lsls	r3, r3, #16
 8003620:	431a      	orrs	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	3301      	adds	r3, #1
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	021b      	lsls	r3, r3, #8
 800362a:	4313      	orrs	r3, r2
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	7812      	ldrb	r2, [r2, #0]
 8003630:	4610      	mov	r0, r2
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	6811      	ldr	r1, [r2, #0]
 8003636:	ea43 0200 	orr.w	r2, r3, r0
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	011b      	lsls	r3, r3, #4
 800363e:	440b      	add	r3, r1
 8003640:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003644:	601a      	str	r2, [r3, #0]
=======
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3303      	adds	r3, #3
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	061a      	lsls	r2, r3, #24
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3302      	adds	r3, #2
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	041b      	lsls	r3, r3, #16
 80035a0:	431a      	orrs	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	3301      	adds	r3, #1
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	021b      	lsls	r3, r3, #8
 80035aa:	4313      	orrs	r3, r2
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	7812      	ldrb	r2, [r2, #0]
 80035b0:	4610      	mov	r0, r2
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	6811      	ldr	r1, [r2, #0]
 80035b6:	ea43 0200 	orr.w	r2, r3, r0
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	011b      	lsls	r3, r3, #4
 80035be:	440b      	add	r3, r1
 80035c0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80035c4:	601a      	str	r2, [r3, #0]
>>>>>>> flight_hardware
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
<<<<<<< HEAD
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	3318      	adds	r3, #24
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	4413      	add	r3, r2
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	6811      	ldr	r1, [r2, #0]
 8003658:	f043 0201 	orr.w	r2, r3, #1
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	3318      	adds	r3, #24
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	440b      	add	r3, r1
 8003664:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003666:	2300      	movs	r3, #0
 8003668:	e00e      	b.n	8003688 <HAL_CAN_AddTxMessage+0x194>
=======
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	3318      	adds	r3, #24
 80035ce:	011b      	lsls	r3, r3, #4
 80035d0:	4413      	add	r3, r2
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	6811      	ldr	r1, [r2, #0]
 80035d8:	f043 0201 	orr.w	r2, r3, #1
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	3318      	adds	r3, #24
 80035e0:	011b      	lsls	r3, r3, #4
 80035e2:	440b      	add	r3, r1
 80035e4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80035e6:	2300      	movs	r3, #0
 80035e8:	e00e      	b.n	8003608 <HAL_CAN_AddTxMessage+0x194>
>>>>>>> flight_hardware
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
<<<<<<< HEAD
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e006      	b.n	8003688 <HAL_CAN_AddTxMessage+0x194>
=======
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e006      	b.n	8003608 <HAL_CAN_AddTxMessage+0x194>
>>>>>>> flight_hardware
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
<<<<<<< HEAD
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
  }
}
 8003688:	4618      	mov	r0, r3
 800368a:	3724      	adds	r7, #36	; 0x24
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <HAL_CAN_GetRxMessage>:
=======
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
  }
}
 8003608:	4618      	mov	r0, r3
 800360a:	3724      	adds	r7, #36	; 0x24
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_CAN_GetRxMessage>:
>>>>>>> flight_hardware
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
<<<<<<< HEAD
 8003694:	b480      	push	{r7}
 8003696:	b087      	sub	sp, #28
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
 80036a0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036a8:	75fb      	strb	r3, [r7, #23]
=======
 8003614:	b480      	push	{r7}
 8003616:	b087      	sub	sp, #28
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
 8003620:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003628:	75fb      	strb	r3, [r7, #23]
>>>>>>> flight_hardware

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
<<<<<<< HEAD
 80036aa:	7dfb      	ldrb	r3, [r7, #23]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d003      	beq.n	80036b8 <HAL_CAN_GetRxMessage+0x24>
 80036b0:	7dfb      	ldrb	r3, [r7, #23]
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	f040 8103 	bne.w	80038be <HAL_CAN_GetRxMessage+0x22a>
=======
 800362a:	7dfb      	ldrb	r3, [r7, #23]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d003      	beq.n	8003638 <HAL_CAN_GetRxMessage+0x24>
 8003630:	7dfb      	ldrb	r3, [r7, #23]
 8003632:	2b02      	cmp	r3, #2
 8003634:	f040 8103 	bne.w	800383e <HAL_CAN_GetRxMessage+0x22a>
>>>>>>> flight_hardware
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
<<<<<<< HEAD
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10e      	bne.n	80036dc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f003 0303 	and.w	r3, r3, #3
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d116      	bne.n	80036fa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e0f7      	b.n	80038cc <HAL_CAN_GetRxMessage+0x238>
=======
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10e      	bne.n	800365c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f003 0303 	and.w	r3, r3, #3
 8003648:	2b00      	cmp	r3, #0
 800364a:	d116      	bne.n	800367a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003650:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e0f7      	b.n	800384c <HAL_CAN_GetRxMessage+0x238>
>>>>>>> flight_hardware
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
<<<<<<< HEAD
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	f003 0303 	and.w	r3, r3, #3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d107      	bne.n	80036fa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e0e8      	b.n	80038cc <HAL_CAN_GetRxMessage+0x238>
=======
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	f003 0303 	and.w	r3, r3, #3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d107      	bne.n	800367a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e0e8      	b.n	800384c <HAL_CAN_GetRxMessage+0x238>
>>>>>>> flight_hardware
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
<<<<<<< HEAD
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	331b      	adds	r3, #27
 8003702:	011b      	lsls	r3, r3, #4
 8003704:	4413      	add	r3, r2
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0204 	and.w	r2, r3, #4
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10c      	bne.n	8003732 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	331b      	adds	r3, #27
 8003720:	011b      	lsls	r3, r3, #4
 8003722:	4413      	add	r3, r2
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	0d5b      	lsrs	r3, r3, #21
 8003728:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	e00b      	b.n	800374a <HAL_CAN_GetRxMessage+0xb6>
=======
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	331b      	adds	r3, #27
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	4413      	add	r3, r2
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0204 	and.w	r2, r3, #4
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10c      	bne.n	80036b2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	331b      	adds	r3, #27
 80036a0:	011b      	lsls	r3, r3, #4
 80036a2:	4413      	add	r3, r2
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	0d5b      	lsrs	r3, r3, #21
 80036a8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	e00b      	b.n	80036ca <HAL_CAN_GetRxMessage+0xb6>
>>>>>>> flight_hardware
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
<<<<<<< HEAD
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	331b      	adds	r3, #27
 800373a:	011b      	lsls	r3, r3, #4
 800373c:	4413      	add	r3, r2
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	08db      	lsrs	r3, r3, #3
 8003742:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	331b      	adds	r3, #27
 8003752:	011b      	lsls	r3, r3, #4
 8003754:	4413      	add	r3, r2
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0202 	and.w	r2, r3, #2
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	331b      	adds	r3, #27
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	4413      	add	r3, r2
 800376c:	3304      	adds	r3, #4
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0308 	and.w	r3, r3, #8
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2208      	movs	r2, #8
 800377c:	611a      	str	r2, [r3, #16]
 800377e:	e00b      	b.n	8003798 <HAL_CAN_GetRxMessage+0x104>
=======
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	331b      	adds	r3, #27
 80036ba:	011b      	lsls	r3, r3, #4
 80036bc:	4413      	add	r3, r2
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	08db      	lsrs	r3, r3, #3
 80036c2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	331b      	adds	r3, #27
 80036d2:	011b      	lsls	r3, r3, #4
 80036d4:	4413      	add	r3, r2
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0202 	and.w	r2, r3, #2
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	331b      	adds	r3, #27
 80036e8:	011b      	lsls	r3, r3, #4
 80036ea:	4413      	add	r3, r2
 80036ec:	3304      	adds	r3, #4
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0308 	and.w	r3, r3, #8
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d003      	beq.n	8003700 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2208      	movs	r2, #8
 80036fc:	611a      	str	r2, [r3, #16]
 80036fe:	e00b      	b.n	8003718 <HAL_CAN_GetRxMessage+0x104>
>>>>>>> flight_hardware
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
<<<<<<< HEAD
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	331b      	adds	r3, #27
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	4413      	add	r3, r2
 800378c:	3304      	adds	r3, #4
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 020f 	and.w	r2, r3, #15
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	331b      	adds	r3, #27
 80037a0:	011b      	lsls	r3, r3, #4
 80037a2:	4413      	add	r3, r2
 80037a4:	3304      	adds	r3, #4
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	0a1b      	lsrs	r3, r3, #8
 80037aa:	b2da      	uxtb	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	331b      	adds	r3, #27
 80037b8:	011b      	lsls	r3, r3, #4
 80037ba:	4413      	add	r3, r2
 80037bc:	3304      	adds	r3, #4
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	0c1b      	lsrs	r3, r3, #16
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	b2da      	uxtb	r2, r3
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	011b      	lsls	r3, r3, #4
 80037e6:	4413      	add	r3, r2
 80037e8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	0a1a      	lsrs	r2, r3, #8
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	3301      	adds	r3, #1
 80037f4:	b2d2      	uxtb	r2, r2
 80037f6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	4413      	add	r3, r2
 8003802:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	0c1a      	lsrs	r2, r3, #16
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	3302      	adds	r3, #2
 800380e:	b2d2      	uxtb	r2, r2
 8003810:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	011b      	lsls	r3, r3, #4
 800381a:	4413      	add	r3, r2
 800381c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	0e1a      	lsrs	r2, r3, #24
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	3303      	adds	r3, #3
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	011b      	lsls	r3, r3, #4
 8003834:	4413      	add	r3, r2
 8003836:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	3304      	adds	r3, #4
 8003840:	b2d2      	uxtb	r2, r2
 8003842:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	011b      	lsls	r3, r3, #4
 800384c:	4413      	add	r3, r2
 800384e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	0a1a      	lsrs	r2, r3, #8
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	3305      	adds	r3, #5
 800385a:	b2d2      	uxtb	r2, r2
 800385c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	011b      	lsls	r3, r3, #4
 8003866:	4413      	add	r3, r2
 8003868:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	0c1a      	lsrs	r2, r3, #16
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	3306      	adds	r3, #6
 8003874:	b2d2      	uxtb	r2, r2
 8003876:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	011b      	lsls	r3, r3, #4
 8003880:	4413      	add	r3, r2
 8003882:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	0e1a      	lsrs	r2, r3, #24
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	3307      	adds	r3, #7
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d108      	bne.n	80038aa <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 0220 	orr.w	r2, r2, #32
 80038a6:	60da      	str	r2, [r3, #12]
 80038a8:	e007      	b.n	80038ba <HAL_CAN_GetRxMessage+0x226>
=======
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	331b      	adds	r3, #27
 8003708:	011b      	lsls	r3, r3, #4
 800370a:	4413      	add	r3, r2
 800370c:	3304      	adds	r3, #4
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 020f 	and.w	r2, r3, #15
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	331b      	adds	r3, #27
 8003720:	011b      	lsls	r3, r3, #4
 8003722:	4413      	add	r3, r2
 8003724:	3304      	adds	r3, #4
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	0a1b      	lsrs	r3, r3, #8
 800372a:	b2da      	uxtb	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	331b      	adds	r3, #27
 8003738:	011b      	lsls	r3, r3, #4
 800373a:	4413      	add	r3, r2
 800373c:	3304      	adds	r3, #4
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	0c1b      	lsrs	r3, r3, #16
 8003742:	b29a      	uxth	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	4413      	add	r3, r2
 8003752:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	b2da      	uxtb	r2, r3
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	4413      	add	r3, r2
 8003768:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	0a1a      	lsrs	r2, r3, #8
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	3301      	adds	r3, #1
 8003774:	b2d2      	uxtb	r2, r2
 8003776:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	4413      	add	r3, r2
 8003782:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	0c1a      	lsrs	r2, r3, #16
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	3302      	adds	r3, #2
 800378e:	b2d2      	uxtb	r2, r2
 8003790:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	011b      	lsls	r3, r3, #4
 800379a:	4413      	add	r3, r2
 800379c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	0e1a      	lsrs	r2, r3, #24
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	3303      	adds	r3, #3
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	011b      	lsls	r3, r3, #4
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	3304      	adds	r3, #4
 80037c0:	b2d2      	uxtb	r2, r2
 80037c2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	011b      	lsls	r3, r3, #4
 80037cc:	4413      	add	r3, r2
 80037ce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	0a1a      	lsrs	r2, r3, #8
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	3305      	adds	r3, #5
 80037da:	b2d2      	uxtb	r2, r2
 80037dc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	011b      	lsls	r3, r3, #4
 80037e6:	4413      	add	r3, r2
 80037e8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	0c1a      	lsrs	r2, r3, #16
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	3306      	adds	r3, #6
 80037f4:	b2d2      	uxtb	r2, r2
 80037f6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	4413      	add	r3, r2
 8003802:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	0e1a      	lsrs	r2, r3, #24
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	3307      	adds	r3, #7
 800380e:	b2d2      	uxtb	r2, r2
 8003810:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d108      	bne.n	800382a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68da      	ldr	r2, [r3, #12]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 0220 	orr.w	r2, r2, #32
 8003826:	60da      	str	r2, [r3, #12]
 8003828:	e007      	b.n	800383a <HAL_CAN_GetRxMessage+0x226>
>>>>>>> flight_hardware
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
<<<<<<< HEAD
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	691a      	ldr	r2, [r3, #16]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f042 0220 	orr.w	r2, r2, #32
 80038b8:	611a      	str	r2, [r3, #16]
=======
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	691a      	ldr	r2, [r3, #16]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f042 0220 	orr.w	r2, r2, #32
 8003838:	611a      	str	r2, [r3, #16]
>>>>>>> flight_hardware
    }

    /* Return function status */
    return HAL_OK;
<<<<<<< HEAD
 80038ba:	2300      	movs	r3, #0
 80038bc:	e006      	b.n	80038cc <HAL_CAN_GetRxMessage+0x238>
=======
 800383a:	2300      	movs	r3, #0
 800383c:	e006      	b.n	800384c <HAL_CAN_GetRxMessage+0x238>
>>>>>>> flight_hardware
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
<<<<<<< HEAD
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
  }
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	371c      	adds	r7, #28
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <HAL_CAN_ActivateNotification>:
=======
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
  }
}
 800384c:	4618      	mov	r0, r3
 800384e:	371c      	adds	r7, #28
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <HAL_CAN_ActivateNotification>:
>>>>>>> flight_hardware
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
<<<<<<< HEAD
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038e8:	73fb      	strb	r3, [r7, #15]
=======
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003868:	73fb      	strb	r3, [r7, #15]
>>>>>>> flight_hardware

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
<<<<<<< HEAD
 80038ea:	7bfb      	ldrb	r3, [r7, #15]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d002      	beq.n	80038f6 <HAL_CAN_ActivateNotification+0x1e>
 80038f0:	7bfb      	ldrb	r3, [r7, #15]
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d109      	bne.n	800390a <HAL_CAN_ActivateNotification+0x32>
=======
 800386a:	7bfb      	ldrb	r3, [r7, #15]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d002      	beq.n	8003876 <HAL_CAN_ActivateNotification+0x1e>
 8003870:	7bfb      	ldrb	r3, [r7, #15]
 8003872:	2b02      	cmp	r3, #2
 8003874:	d109      	bne.n	800388a <HAL_CAN_ActivateNotification+0x32>
>>>>>>> flight_hardware
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
<<<<<<< HEAD
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6959      	ldr	r1, [r3, #20]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003906:	2300      	movs	r3, #0
 8003908:	e006      	b.n	8003918 <HAL_CAN_ActivateNotification+0x40>
=======
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6959      	ldr	r1, [r3, #20]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003886:	2300      	movs	r3, #0
 8003888:	e006      	b.n	8003898 <HAL_CAN_ActivateNotification+0x40>
>>>>>>> flight_hardware
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
<<<<<<< HEAD
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
  }
}
 8003918:	4618      	mov	r0, r3
 800391a:	3714      	adds	r7, #20
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HAL_CAN_IRQHandler>:
=======
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
  }
}
 8003898:	4618      	mov	r0, r3
 800389a:	3714      	adds	r7, #20
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_CAN_IRQHandler>:
>>>>>>> flight_hardware
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8003924:	b580      	push	{r7, lr}
 8003926:	b08a      	sub	sp, #40	; 0x28
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800392c:	2300      	movs	r3, #0
 800392e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003960:	6a3b      	ldr	r3, [r7, #32]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	d07c      	beq.n	8003a64 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	2b00      	cmp	r3, #0
 8003972:	d023      	beq.n	80039bc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2201      	movs	r2, #1
 800397a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_CAN_IRQHandler+0x6a>
=======
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08a      	sub	sp, #40	; 0x28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80038ac:	2300      	movs	r3, #0
 80038ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80038e0:	6a3b      	ldr	r3, [r7, #32]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d07c      	beq.n	80039e4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d023      	beq.n	800393c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2201      	movs	r2, #1
 80038fa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <HAL_CAN_IRQHandler+0x6a>
>>>>>>> flight_hardware
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
<<<<<<< HEAD
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 f983 	bl	8003c92 <HAL_CAN_TxMailbox0CompleteCallback>
 800398c:	e016      	b.n	80039bc <HAL_CAN_IRQHandler+0x98>
=======
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f983 	bl	8003c12 <HAL_CAN_TxMailbox0CompleteCallback>
 800390c:	e016      	b.n	800393c <HAL_CAN_IRQHandler+0x98>
>>>>>>> flight_hardware
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
<<<<<<< HEAD
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	2b00      	cmp	r3, #0
 8003996:	d004      	beq.n	80039a2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800399e:	627b      	str	r3, [r7, #36]	; 0x24
 80039a0:	e00c      	b.n	80039bc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	f003 0308 	and.w	r3, r3, #8
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d004      	beq.n	80039b6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039b2:	627b      	str	r3, [r7, #36]	; 0x24
 80039b4:	e002      	b.n	80039bc <HAL_CAN_IRQHandler+0x98>
=======
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b00      	cmp	r3, #0
 8003916:	d004      	beq.n	8003922 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800391e:	627b      	str	r3, [r7, #36]	; 0x24
 8003920:	e00c      	b.n	800393c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	f003 0308 	and.w	r3, r3, #8
 8003928:	2b00      	cmp	r3, #0
 800392a:	d004      	beq.n	8003936 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800392c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003932:	627b      	str	r3, [r7, #36]	; 0x24
 8003934:	e002      	b.n	800393c <HAL_CAN_IRQHandler+0x98>
>>>>>>> flight_hardware
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
<<<<<<< HEAD
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f989 	bl	8003cce <HAL_CAN_TxMailbox0AbortCallback>
=======
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f989 	bl	8003c4e <HAL_CAN_TxMailbox0AbortCallback>
>>>>>>> flight_hardware
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
<<<<<<< HEAD
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d024      	beq.n	8003a10 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039ce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <HAL_CAN_IRQHandler+0xbe>
=======
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003942:	2b00      	cmp	r3, #0
 8003944:	d024      	beq.n	8003990 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800394e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <HAL_CAN_IRQHandler+0xbe>
>>>>>>> flight_hardware
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
<<<<<<< HEAD
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f963 	bl	8003ca6 <HAL_CAN_TxMailbox1CompleteCallback>
 80039e0:	e016      	b.n	8003a10 <HAL_CAN_IRQHandler+0xec>
=======
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f963 	bl	8003c26 <HAL_CAN_TxMailbox1CompleteCallback>
 8003960:	e016      	b.n	8003990 <HAL_CAN_IRQHandler+0xec>
>>>>>>> flight_hardware
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
<<<<<<< HEAD
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d004      	beq.n	80039f6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80039f2:	627b      	str	r3, [r7, #36]	; 0x24
 80039f4:	e00c      	b.n	8003a10 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d004      	beq.n	8003a0a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a06:	627b      	str	r3, [r7, #36]	; 0x24
 8003a08:	e002      	b.n	8003a10 <HAL_CAN_IRQHandler+0xec>
=======
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003968:	2b00      	cmp	r3, #0
 800396a:	d004      	beq.n	8003976 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003972:	627b      	str	r3, [r7, #36]	; 0x24
 8003974:	e00c      	b.n	8003990 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800397c:	2b00      	cmp	r3, #0
 800397e:	d004      	beq.n	800398a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003986:	627b      	str	r3, [r7, #36]	; 0x24
 8003988:	e002      	b.n	8003990 <HAL_CAN_IRQHandler+0xec>
>>>>>>> flight_hardware
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
<<<<<<< HEAD
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f969 	bl	8003ce2 <HAL_CAN_TxMailbox1AbortCallback>
=======
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f969 	bl	8003c62 <HAL_CAN_TxMailbox1AbortCallback>
>>>>>>> flight_hardware
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
<<<<<<< HEAD
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d024      	beq.n	8003a64 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003a22:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <HAL_CAN_IRQHandler+0x112>
=======
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d024      	beq.n	80039e4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80039a2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_CAN_IRQHandler+0x112>
>>>>>>> flight_hardware
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
<<<<<<< HEAD
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f943 	bl	8003cba <HAL_CAN_TxMailbox2CompleteCallback>
 8003a34:	e016      	b.n	8003a64 <HAL_CAN_IRQHandler+0x140>
=======
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f943 	bl	8003c3a <HAL_CAN_TxMailbox2CompleteCallback>
 80039b4:	e016      	b.n	80039e4 <HAL_CAN_IRQHandler+0x140>
>>>>>>> flight_hardware
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
<<<<<<< HEAD
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d004      	beq.n	8003a4a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a46:	627b      	str	r3, [r7, #36]	; 0x24
 8003a48:	e00c      	b.n	8003a64 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d004      	beq.n	8003a5e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a5c:	e002      	b.n	8003a64 <HAL_CAN_IRQHandler+0x140>
=======
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d004      	beq.n	80039ca <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80039c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039c6:	627b      	str	r3, [r7, #36]	; 0x24
 80039c8:	e00c      	b.n	80039e4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d004      	beq.n	80039de <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039da:	627b      	str	r3, [r7, #36]	; 0x24
 80039dc:	e002      	b.n	80039e4 <HAL_CAN_IRQHandler+0x140>
>>>>>>> flight_hardware
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
<<<<<<< HEAD
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f949 	bl	8003cf6 <HAL_CAN_TxMailbox2AbortCallback>
=======
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f949 	bl	8003c76 <HAL_CAN_TxMailbox2AbortCallback>
>>>>>>> flight_hardware
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
<<<<<<< HEAD
 8003a64:	6a3b      	ldr	r3, [r7, #32]
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00c      	beq.n	8003a88 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f003 0310 	and.w	r3, r3, #16
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d007      	beq.n	8003a88 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a7e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2210      	movs	r2, #16
 8003a86:	60da      	str	r2, [r3, #12]
=======
 80039e4:	6a3b      	ldr	r3, [r7, #32]
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00c      	beq.n	8003a08 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f003 0310 	and.w	r3, r3, #16
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d007      	beq.n	8003a08 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039fe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2210      	movs	r2, #16
 8003a06:	60da      	str	r2, [r3, #12]
>>>>>>> flight_hardware
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
<<<<<<< HEAD
 8003a88:	6a3b      	ldr	r3, [r7, #32]
 8003a8a:	f003 0304 	and.w	r3, r3, #4
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00b      	beq.n	8003aaa <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f003 0308 	and.w	r3, r3, #8
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d006      	beq.n	8003aaa <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2208      	movs	r2, #8
 8003aa2:	60da      	str	r2, [r3, #12]
=======
 8003a08:	6a3b      	ldr	r3, [r7, #32]
 8003a0a:	f003 0304 	and.w	r3, r3, #4
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00b      	beq.n	8003a2a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f003 0308 	and.w	r3, r3, #8
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d006      	beq.n	8003a2a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2208      	movs	r2, #8
 8003a22:	60da      	str	r2, [r3, #12]
>>>>>>> flight_hardware
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
<<<<<<< HEAD
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f930 	bl	8003d0a <HAL_CAN_RxFifo0FullCallback>
=======
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 f930 	bl	8003c8a <HAL_CAN_RxFifo0FullCallback>
>>>>>>> flight_hardware
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
<<<<<<< HEAD
 8003aaa:	6a3b      	ldr	r3, [r7, #32]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d009      	beq.n	8003ac8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f003 0303 	and.w	r3, r3, #3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d002      	beq.n	8003ac8 <HAL_CAN_IRQHandler+0x1a4>
=======
 8003a2a:	6a3b      	ldr	r3, [r7, #32]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d009      	beq.n	8003a48 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	f003 0303 	and.w	r3, r3, #3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d002      	beq.n	8003a48 <HAL_CAN_IRQHandler+0x1a4>
>>>>>>> flight_hardware
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
<<<<<<< HEAD
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7ff f958 	bl	8002d78 <HAL_CAN_RxFifo0MsgPendingCallback>
=======
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7ff f958 	bl	8002cf8 <HAL_CAN_RxFifo0MsgPendingCallback>
>>>>>>> flight_hardware
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
<<<<<<< HEAD
 8003ac8:	6a3b      	ldr	r3, [r7, #32]
 8003aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00c      	beq.n	8003aec <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f003 0310 	and.w	r3, r3, #16
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d007      	beq.n	8003aec <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ae2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2210      	movs	r2, #16
 8003aea:	611a      	str	r2, [r3, #16]
=======
 8003a48:	6a3b      	ldr	r3, [r7, #32]
 8003a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00c      	beq.n	8003a6c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	f003 0310 	and.w	r3, r3, #16
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d007      	beq.n	8003a6c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a62:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2210      	movs	r2, #16
 8003a6a:	611a      	str	r2, [r3, #16]
>>>>>>> flight_hardware
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
<<<<<<< HEAD
 8003aec:	6a3b      	ldr	r3, [r7, #32]
 8003aee:	f003 0320 	and.w	r3, r3, #32
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00b      	beq.n	8003b0e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	f003 0308 	and.w	r3, r3, #8
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d006      	beq.n	8003b0e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2208      	movs	r2, #8
 8003b06:	611a      	str	r2, [r3, #16]
=======
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	f003 0320 	and.w	r3, r3, #32
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00b      	beq.n	8003a8e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	f003 0308 	and.w	r3, r3, #8
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d006      	beq.n	8003a8e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2208      	movs	r2, #8
 8003a86:	611a      	str	r2, [r3, #16]
>>>>>>> flight_hardware
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
<<<<<<< HEAD
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 f912 	bl	8003d32 <HAL_CAN_RxFifo1FullCallback>
=======
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 f912 	bl	8003cb2 <HAL_CAN_RxFifo1FullCallback>
>>>>>>> flight_hardware
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
<<<<<<< HEAD
 8003b0e:	6a3b      	ldr	r3, [r7, #32]
 8003b10:	f003 0310 	and.w	r3, r3, #16
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d009      	beq.n	8003b2c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	f003 0303 	and.w	r3, r3, #3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d002      	beq.n	8003b2c <HAL_CAN_IRQHandler+0x208>
=======
 8003a8e:	6a3b      	ldr	r3, [r7, #32]
 8003a90:	f003 0310 	and.w	r3, r3, #16
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d009      	beq.n	8003aac <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	f003 0303 	and.w	r3, r3, #3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d002      	beq.n	8003aac <HAL_CAN_IRQHandler+0x208>
>>>>>>> flight_hardware
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
<<<<<<< HEAD
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f8f9 	bl	8003d1e <HAL_CAN_RxFifo1MsgPendingCallback>
=======
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f8f9 	bl	8003c9e <HAL_CAN_RxFifo1MsgPendingCallback>
>>>>>>> flight_hardware
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
<<<<<<< HEAD
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00b      	beq.n	8003b4e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	f003 0310 	and.w	r3, r3, #16
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d006      	beq.n	8003b4e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2210      	movs	r2, #16
 8003b46:	605a      	str	r2, [r3, #4]
=======
 8003aac:	6a3b      	ldr	r3, [r7, #32]
 8003aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00b      	beq.n	8003ace <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	f003 0310 	and.w	r3, r3, #16
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d006      	beq.n	8003ace <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2210      	movs	r2, #16
 8003ac6:	605a      	str	r2, [r3, #4]
>>>>>>> flight_hardware
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
<<<<<<< HEAD
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 f8fc 	bl	8003d46 <HAL_CAN_SleepCallback>
=======
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f8fc 	bl	8003cc6 <HAL_CAN_SleepCallback>
>>>>>>> flight_hardware
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
<<<<<<< HEAD
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00b      	beq.n	8003b70 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d006      	beq.n	8003b70 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2208      	movs	r2, #8
 8003b68:	605a      	str	r2, [r3, #4]
=======
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00b      	beq.n	8003af0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d006      	beq.n	8003af0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2208      	movs	r2, #8
 8003ae8:	605a      	str	r2, [r3, #4]
>>>>>>> flight_hardware
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
<<<<<<< HEAD
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f8f5 	bl	8003d5a <HAL_CAN_WakeUpFromRxMsgCallback>
=======
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f8f5 	bl	8003cda <HAL_CAN_WakeUpFromRxMsgCallback>
>>>>>>> flight_hardware
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
<<<<<<< HEAD
 8003b70:	6a3b      	ldr	r3, [r7, #32]
 8003b72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d07b      	beq.n	8003c72 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	f003 0304 	and.w	r3, r3, #4
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d072      	beq.n	8003c6a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003b84:	6a3b      	ldr	r3, [r7, #32]
 8003b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d008      	beq.n	8003ba0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d003      	beq.n	8003ba0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	f043 0301 	orr.w	r3, r3, #1
 8003b9e:	627b      	str	r3, [r7, #36]	; 0x24
=======
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d07b      	beq.n	8003bf2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d072      	beq.n	8003bea <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003b04:	6a3b      	ldr	r3, [r7, #32]
 8003b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d008      	beq.n	8003b20 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d003      	beq.n	8003b20 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1a:	f043 0301 	orr.w	r3, r3, #1
 8003b1e:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> flight_hardware

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
<<<<<<< HEAD
 8003ba0:	6a3b      	ldr	r3, [r7, #32]
 8003ba2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d008      	beq.n	8003bbc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d003      	beq.n	8003bbc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb6:	f043 0302 	orr.w	r3, r3, #2
 8003bba:	627b      	str	r3, [r7, #36]	; 0x24
=======
 8003b20:	6a3b      	ldr	r3, [r7, #32]
 8003b22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d008      	beq.n	8003b3c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d003      	beq.n	8003b3c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	f043 0302 	orr.w	r3, r3, #2
 8003b3a:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> flight_hardware

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
<<<<<<< HEAD
 8003bbc:	6a3b      	ldr	r3, [r7, #32]
 8003bbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d008      	beq.n	8003bd8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	f043 0304 	orr.w	r3, r3, #4
 8003bd6:	627b      	str	r3, [r7, #36]	; 0x24
=======
 8003b3c:	6a3b      	ldr	r3, [r7, #32]
 8003b3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d008      	beq.n	8003b58 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d003      	beq.n	8003b58 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b52:	f043 0304 	orr.w	r3, r3, #4
 8003b56:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> flight_hardware

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
<<<<<<< HEAD
 8003bd8:	6a3b      	ldr	r3, [r7, #32]
 8003bda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d043      	beq.n	8003c6a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d03e      	beq.n	8003c6a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bf2:	2b60      	cmp	r3, #96	; 0x60
 8003bf4:	d02b      	beq.n	8003c4e <HAL_CAN_IRQHandler+0x32a>
 8003bf6:	2b60      	cmp	r3, #96	; 0x60
 8003bf8:	d82e      	bhi.n	8003c58 <HAL_CAN_IRQHandler+0x334>
 8003bfa:	2b50      	cmp	r3, #80	; 0x50
 8003bfc:	d022      	beq.n	8003c44 <HAL_CAN_IRQHandler+0x320>
 8003bfe:	2b50      	cmp	r3, #80	; 0x50
 8003c00:	d82a      	bhi.n	8003c58 <HAL_CAN_IRQHandler+0x334>
 8003c02:	2b40      	cmp	r3, #64	; 0x40
 8003c04:	d019      	beq.n	8003c3a <HAL_CAN_IRQHandler+0x316>
 8003c06:	2b40      	cmp	r3, #64	; 0x40
 8003c08:	d826      	bhi.n	8003c58 <HAL_CAN_IRQHandler+0x334>
 8003c0a:	2b30      	cmp	r3, #48	; 0x30
 8003c0c:	d010      	beq.n	8003c30 <HAL_CAN_IRQHandler+0x30c>
 8003c0e:	2b30      	cmp	r3, #48	; 0x30
 8003c10:	d822      	bhi.n	8003c58 <HAL_CAN_IRQHandler+0x334>
 8003c12:	2b10      	cmp	r3, #16
 8003c14:	d002      	beq.n	8003c1c <HAL_CAN_IRQHandler+0x2f8>
 8003c16:	2b20      	cmp	r3, #32
 8003c18:	d005      	beq.n	8003c26 <HAL_CAN_IRQHandler+0x302>
=======
 8003b58:	6a3b      	ldr	r3, [r7, #32]
 8003b5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d043      	beq.n	8003bea <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d03e      	beq.n	8003bea <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b72:	2b60      	cmp	r3, #96	; 0x60
 8003b74:	d02b      	beq.n	8003bce <HAL_CAN_IRQHandler+0x32a>
 8003b76:	2b60      	cmp	r3, #96	; 0x60
 8003b78:	d82e      	bhi.n	8003bd8 <HAL_CAN_IRQHandler+0x334>
 8003b7a:	2b50      	cmp	r3, #80	; 0x50
 8003b7c:	d022      	beq.n	8003bc4 <HAL_CAN_IRQHandler+0x320>
 8003b7e:	2b50      	cmp	r3, #80	; 0x50
 8003b80:	d82a      	bhi.n	8003bd8 <HAL_CAN_IRQHandler+0x334>
 8003b82:	2b40      	cmp	r3, #64	; 0x40
 8003b84:	d019      	beq.n	8003bba <HAL_CAN_IRQHandler+0x316>
 8003b86:	2b40      	cmp	r3, #64	; 0x40
 8003b88:	d826      	bhi.n	8003bd8 <HAL_CAN_IRQHandler+0x334>
 8003b8a:	2b30      	cmp	r3, #48	; 0x30
 8003b8c:	d010      	beq.n	8003bb0 <HAL_CAN_IRQHandler+0x30c>
 8003b8e:	2b30      	cmp	r3, #48	; 0x30
 8003b90:	d822      	bhi.n	8003bd8 <HAL_CAN_IRQHandler+0x334>
 8003b92:	2b10      	cmp	r3, #16
 8003b94:	d002      	beq.n	8003b9c <HAL_CAN_IRQHandler+0x2f8>
 8003b96:	2b20      	cmp	r3, #32
 8003b98:	d005      	beq.n	8003ba6 <HAL_CAN_IRQHandler+0x302>
>>>>>>> flight_hardware
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
<<<<<<< HEAD
 8003c1a:	e01d      	b.n	8003c58 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1e:	f043 0308 	orr.w	r3, r3, #8
 8003c22:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c24:	e019      	b.n	8003c5a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	f043 0310 	orr.w	r3, r3, #16
 8003c2c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c2e:	e014      	b.n	8003c5a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	f043 0320 	orr.w	r3, r3, #32
 8003c36:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c38:	e00f      	b.n	8003c5a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c40:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c42:	e00a      	b.n	8003c5a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c4a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c4c:	e005      	b.n	8003c5a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c54:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c56:	e000      	b.n	8003c5a <HAL_CAN_IRQHandler+0x336>
            break;
 8003c58:	bf00      	nop
=======
 8003b9a:	e01d      	b.n	8003bd8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9e:	f043 0308 	orr.w	r3, r3, #8
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ba4:	e019      	b.n	8003bda <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	f043 0310 	orr.w	r3, r3, #16
 8003bac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003bae:	e014      	b.n	8003bda <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	f043 0320 	orr.w	r3, r3, #32
 8003bb6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003bb8:	e00f      	b.n	8003bda <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bc0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003bc2:	e00a      	b.n	8003bda <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003bcc:	e005      	b.n	8003bda <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bd4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003bd6:	e000      	b.n	8003bda <HAL_CAN_IRQHandler+0x336>
            break;
 8003bd8:	bf00      	nop
>>>>>>> flight_hardware
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
<<<<<<< HEAD
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	699a      	ldr	r2, [r3, #24]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003c68:	619a      	str	r2, [r3, #24]
=======
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	699a      	ldr	r2, [r3, #24]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003be8:	619a      	str	r2, [r3, #24]
>>>>>>> flight_hardware
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
<<<<<<< HEAD
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2204      	movs	r2, #4
 8003c70:	605a      	str	r2, [r3, #4]
=======
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2204      	movs	r2, #4
 8003bf0:	605a      	str	r2, [r3, #4]
>>>>>>> flight_hardware
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
<<<<<<< HEAD
 8003c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d008      	beq.n	8003c8a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	625a      	str	r2, [r3, #36]	; 0x24
=======
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d008      	beq.n	8003c0a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	625a      	str	r2, [r3, #36]	; 0x24
>>>>>>> flight_hardware
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
<<<<<<< HEAD
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 f872 	bl	8003d6e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003c8a:	bf00      	nop
 8003c8c:	3728      	adds	r7, #40	; 0x28
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <HAL_CAN_TxMailbox0CompleteCallback>:
=======
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 f872 	bl	8003cee <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003c0a:	bf00      	nop
 8003c0c:	3728      	adds	r7, #40	; 0x28
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <HAL_CAN_TxMailbox0CompleteCallback>:
>>>>>>> flight_hardware
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
=======
 8003c12:	b480      	push	{r7}
 8003c14:	b083      	sub	sp, #12
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
>>>>>>> flight_hardware

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <HAL_CAN_TxMailbox1CompleteCallback>:
=======
 8003c1a:	bf00      	nop
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <HAL_CAN_TxMailbox1CompleteCallback>:
>>>>>>> flight_hardware
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
=======
 8003c26:	b480      	push	{r7}
 8003c28:	b083      	sub	sp, #12
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
>>>>>>> flight_hardware

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 8003cae:	bf00      	nop
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <HAL_CAN_TxMailbox2CompleteCallback>:
=======
 8003c2e:	bf00      	nop
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <HAL_CAN_TxMailbox2CompleteCallback>:
>>>>>>> flight_hardware
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
=======
 8003c3a:	b480      	push	{r7}
 8003c3c:	b083      	sub	sp, #12
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
>>>>>>> flight_hardware

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <HAL_CAN_TxMailbox0AbortCallback>:
=======
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <HAL_CAN_TxMailbox0AbortCallback>:
>>>>>>> flight_hardware
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
=======
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
>>>>>>> flight_hardware

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <HAL_CAN_TxMailbox1AbortCallback>:
=======
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <HAL_CAN_TxMailbox1AbortCallback>:
>>>>>>> flight_hardware
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8003ce2:	b480      	push	{r7}
 8003ce4:	b083      	sub	sp, #12
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
=======
 8003c62:	b480      	push	{r7}
 8003c64:	b083      	sub	sp, #12
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
>>>>>>> flight_hardware

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 8003cea:	bf00      	nop
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <HAL_CAN_TxMailbox2AbortCallback>:
=======
 8003c6a:	bf00      	nop
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <HAL_CAN_TxMailbox2AbortCallback>:
>>>>>>> flight_hardware
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8003cf6:	b480      	push	{r7}
 8003cf8:	b083      	sub	sp, #12
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
=======
 8003c76:	b480      	push	{r7}
 8003c78:	b083      	sub	sp, #12
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
>>>>>>> flight_hardware

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <HAL_CAN_RxFifo0FullCallback>:
=======
 8003c7e:	bf00      	nop
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <HAL_CAN_RxFifo0FullCallback>:
>>>>>>> flight_hardware
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
=======
 8003c8a:	b480      	push	{r7}
 8003c8c:	b083      	sub	sp, #12
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
>>>>>>> flight_hardware

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
<<<<<<< HEAD
 8003d12:	bf00      	nop
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <HAL_CAN_RxFifo1MsgPendingCallback>:
=======
 8003c92:	bf00      	nop
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <HAL_CAN_RxFifo1MsgPendingCallback>:
>>>>>>> flight_hardware
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8003d1e:	b480      	push	{r7}
 8003d20:	b083      	sub	sp, #12
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
=======
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
>>>>>>> flight_hardware

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <HAL_CAN_RxFifo1FullCallback>:
=======
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <HAL_CAN_RxFifo1FullCallback>:
>>>>>>> flight_hardware
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8003d32:	b480      	push	{r7}
 8003d34:	b083      	sub	sp, #12
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
=======
 8003cb2:	b480      	push	{r7}
 8003cb4:	b083      	sub	sp, #12
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
>>>>>>> flight_hardware

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
<<<<<<< HEAD
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <HAL_CAN_SleepCallback>:
=======
 8003cba:	bf00      	nop
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <HAL_CAN_SleepCallback>:
>>>>>>> flight_hardware
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8003d46:	b480      	push	{r7}
 8003d48:	b083      	sub	sp, #12
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
=======
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
>>>>>>> flight_hardware
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003d4e:	bf00      	nop
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <HAL_CAN_WakeUpFromRxMsgCallback>:
=======
 8003cce:	bf00      	nop
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <HAL_CAN_WakeUpFromRxMsgCallback>:
>>>>>>> flight_hardware
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
=======
 8003cda:	b480      	push	{r7}
 8003cdc:	b083      	sub	sp, #12
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
>>>>>>> flight_hardware

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <HAL_CAN_ErrorCallback>:
=======
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <HAL_CAN_ErrorCallback>:
>>>>>>> flight_hardware
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8003d6e:	b480      	push	{r7}
 8003d70:	b083      	sub	sp, #12
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
=======
 8003cee:	b480      	push	{r7}
 8003cf0:	b083      	sub	sp, #12
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
>>>>>>> flight_hardware
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003d76:	bf00      	nop
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
	...

08003d84 <__NVIC_SetPriorityGrouping>:
=======
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
	...

08003d04 <__NVIC_SetPriorityGrouping>:
>>>>>>> flight_hardware
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f003 0307 	and.w	r3, r3, #7
 8003d92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d94:	4b0c      	ldr	r3, [pc, #48]	; (8003dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d9a:	68ba      	ldr	r2, [r7, #8]
 8003d9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003da0:	4013      	ands	r3, r2
 8003da2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003dac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003db6:	4a04      	ldr	r2, [pc, #16]	; (8003dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	60d3      	str	r3, [r2, #12]
}
 8003dbc:	bf00      	nop
 8003dbe:	3714      	adds	r7, #20
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	e000ed00 	.word	0xe000ed00

08003dcc <__NVIC_GetPriorityGrouping>:
=======
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f003 0307 	and.w	r3, r3, #7
 8003d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d14:	4b0c      	ldr	r3, [pc, #48]	; (8003d48 <__NVIC_SetPriorityGrouping+0x44>)
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d1a:	68ba      	ldr	r2, [r7, #8]
 8003d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d20:	4013      	ands	r3, r2
 8003d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d36:	4a04      	ldr	r2, [pc, #16]	; (8003d48 <__NVIC_SetPriorityGrouping+0x44>)
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	60d3      	str	r3, [r2, #12]
}
 8003d3c:	bf00      	nop
 8003d3e:	3714      	adds	r7, #20
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	e000ed00 	.word	0xe000ed00

08003d4c <__NVIC_GetPriorityGrouping>:
>>>>>>> flight_hardware
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dd0:	4b04      	ldr	r3, [pc, #16]	; (8003de4 <__NVIC_GetPriorityGrouping+0x18>)
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	0a1b      	lsrs	r3, r3, #8
 8003dd6:	f003 0307 	and.w	r3, r3, #7
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	e000ed00 	.word	0xe000ed00

08003de8 <__NVIC_EnableIRQ>:
=======
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d50:	4b04      	ldr	r3, [pc, #16]	; (8003d64 <__NVIC_GetPriorityGrouping+0x18>)
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	0a1b      	lsrs	r3, r3, #8
 8003d56:	f003 0307 	and.w	r3, r3, #7
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	e000ed00 	.word	0xe000ed00

08003d68 <__NVIC_EnableIRQ>:
>>>>>>> flight_hardware
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	4603      	mov	r3, r0
 8003df0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	db0b      	blt.n	8003e12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dfa:	79fb      	ldrb	r3, [r7, #7]
 8003dfc:	f003 021f 	and.w	r2, r3, #31
 8003e00:	4907      	ldr	r1, [pc, #28]	; (8003e20 <__NVIC_EnableIRQ+0x38>)
 8003e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e06:	095b      	lsrs	r3, r3, #5
 8003e08:	2001      	movs	r0, #1
 8003e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8003e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	e000e100 	.word	0xe000e100

08003e24 <__NVIC_SetPriority>:
=======
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	4603      	mov	r3, r0
 8003d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	db0b      	blt.n	8003d92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d7a:	79fb      	ldrb	r3, [r7, #7]
 8003d7c:	f003 021f 	and.w	r2, r3, #31
 8003d80:	4907      	ldr	r1, [pc, #28]	; (8003da0 <__NVIC_EnableIRQ+0x38>)
 8003d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d86:	095b      	lsrs	r3, r3, #5
 8003d88:	2001      	movs	r0, #1
 8003d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d92:	bf00      	nop
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	e000e100 	.word	0xe000e100

08003da4 <__NVIC_SetPriority>:
>>>>>>> flight_hardware
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	6039      	str	r1, [r7, #0]
 8003e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	db0a      	blt.n	8003e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	b2da      	uxtb	r2, r3
 8003e3c:	490c      	ldr	r1, [pc, #48]	; (8003e70 <__NVIC_SetPriority+0x4c>)
 8003e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e42:	0112      	lsls	r2, r2, #4
 8003e44:	b2d2      	uxtb	r2, r2
 8003e46:	440b      	add	r3, r1
 8003e48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	4603      	mov	r3, r0
 8003dac:	6039      	str	r1, [r7, #0]
 8003dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	db0a      	blt.n	8003dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	b2da      	uxtb	r2, r3
 8003dbc:	490c      	ldr	r1, [pc, #48]	; (8003df0 <__NVIC_SetPriority+0x4c>)
 8003dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc2:	0112      	lsls	r2, r2, #4
 8003dc4:	b2d2      	uxtb	r2, r2
 8003dc6:	440b      	add	r3, r1
 8003dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> flight_hardware
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 8003e4c:	e00a      	b.n	8003e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	4908      	ldr	r1, [pc, #32]	; (8003e74 <__NVIC_SetPriority+0x50>)
 8003e54:	79fb      	ldrb	r3, [r7, #7]
 8003e56:	f003 030f 	and.w	r3, r3, #15
 8003e5a:	3b04      	subs	r3, #4
 8003e5c:	0112      	lsls	r2, r2, #4
 8003e5e:	b2d2      	uxtb	r2, r2
 8003e60:	440b      	add	r3, r1
 8003e62:	761a      	strb	r2, [r3, #24]
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	e000e100 	.word	0xe000e100
 8003e74:	e000ed00 	.word	0xe000ed00

08003e78 <NVIC_EncodePriority>:
=======
 8003dcc:	e00a      	b.n	8003de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	b2da      	uxtb	r2, r3
 8003dd2:	4908      	ldr	r1, [pc, #32]	; (8003df4 <__NVIC_SetPriority+0x50>)
 8003dd4:	79fb      	ldrb	r3, [r7, #7]
 8003dd6:	f003 030f 	and.w	r3, r3, #15
 8003dda:	3b04      	subs	r3, #4
 8003ddc:	0112      	lsls	r2, r2, #4
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	440b      	add	r3, r1
 8003de2:	761a      	strb	r2, [r3, #24]
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	e000e100 	.word	0xe000e100
 8003df4:	e000ed00 	.word	0xe000ed00

08003df8 <NVIC_EncodePriority>:
>>>>>>> flight_hardware
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8003e78:	b480      	push	{r7}
 8003e7a:	b089      	sub	sp, #36	; 0x24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f003 0307 	and.w	r3, r3, #7
 8003e8a:	61fb      	str	r3, [r7, #28]
=======
 8003df8:	b480      	push	{r7}
 8003dfa:	b089      	sub	sp, #36	; 0x24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f003 0307 	and.w	r3, r3, #7
 8003e0a:	61fb      	str	r3, [r7, #28]
>>>>>>> flight_hardware
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	f1c3 0307 	rsb	r3, r3, #7
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	bf28      	it	cs
 8003e96:	2304      	movcs	r3, #4
 8003e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	2b06      	cmp	r3, #6
 8003ea0:	d902      	bls.n	8003ea8 <NVIC_EncodePriority+0x30>
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	3b03      	subs	r3, #3
 8003ea6:	e000      	b.n	8003eaa <NVIC_EncodePriority+0x32>
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	43da      	mvns	r2, r3
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	401a      	ands	r2, r3
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ec0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eca:	43d9      	mvns	r1, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ed0:	4313      	orrs	r3, r2
         );
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3724      	adds	r7, #36	; 0x24
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
	...

08003ee0 <SysTick_Config>:
=======
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	f1c3 0307 	rsb	r3, r3, #7
 8003e12:	2b04      	cmp	r3, #4
 8003e14:	bf28      	it	cs
 8003e16:	2304      	movcs	r3, #4
 8003e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	3304      	adds	r3, #4
 8003e1e:	2b06      	cmp	r3, #6
 8003e20:	d902      	bls.n	8003e28 <NVIC_EncodePriority+0x30>
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	3b03      	subs	r3, #3
 8003e26:	e000      	b.n	8003e2a <NVIC_EncodePriority+0x32>
 8003e28:	2300      	movs	r3, #0
 8003e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	fa02 f303 	lsl.w	r3, r2, r3
 8003e36:	43da      	mvns	r2, r3
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	401a      	ands	r2, r3
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4a:	43d9      	mvns	r1, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e50:	4313      	orrs	r3, r2
         );
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3724      	adds	r7, #36	; 0x24
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
	...

08003e60 <SysTick_Config>:
>>>>>>> flight_hardware
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	3b01      	subs	r3, #1
 8003eec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ef0:	d301      	bcc.n	8003ef6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e00f      	b.n	8003f16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ef6:	4a0a      	ldr	r2, [pc, #40]	; (8003f20 <SysTick_Config+0x40>)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	3b01      	subs	r3, #1
 8003efc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003efe:	210f      	movs	r1, #15
 8003f00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f04:	f7ff ff8e 	bl	8003e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f08:	4b05      	ldr	r3, [pc, #20]	; (8003f20 <SysTick_Config+0x40>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f0e:	4b04      	ldr	r3, [pc, #16]	; (8003f20 <SysTick_Config+0x40>)
 8003f10:	2207      	movs	r2, #7
 8003f12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	e000e010 	.word	0xe000e010

08003f24 <HAL_NVIC_SetPriorityGrouping>:
=======
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e70:	d301      	bcc.n	8003e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e72:	2301      	movs	r3, #1
 8003e74:	e00f      	b.n	8003e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e76:	4a0a      	ldr	r2, [pc, #40]	; (8003ea0 <SysTick_Config+0x40>)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e7e:	210f      	movs	r1, #15
 8003e80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e84:	f7ff ff8e 	bl	8003da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e88:	4b05      	ldr	r3, [pc, #20]	; (8003ea0 <SysTick_Config+0x40>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e8e:	4b04      	ldr	r3, [pc, #16]	; (8003ea0 <SysTick_Config+0x40>)
 8003e90:	2207      	movs	r2, #7
 8003e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	e000e010 	.word	0xe000e010

08003ea4 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> flight_hardware
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
=======
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
>>>>>>> flight_hardware
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f7ff ff29 	bl	8003d84 <__NVIC_SetPriorityGrouping>
}
 8003f32:	bf00      	nop
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <HAL_NVIC_SetPriority>:
=======
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f7ff ff29 	bl	8003d04 <__NVIC_SetPriorityGrouping>
}
 8003eb2:	bf00      	nop
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <HAL_NVIC_SetPriority>:
>>>>>>> flight_hardware
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b086      	sub	sp, #24
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	4603      	mov	r3, r0
 8003f42:	60b9      	str	r1, [r7, #8]
 8003f44:	607a      	str	r2, [r7, #4]
 8003f46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	617b      	str	r3, [r7, #20]
=======
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b086      	sub	sp, #24
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	60b9      	str	r1, [r7, #8]
 8003ec4:	607a      	str	r2, [r7, #4]
 8003ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	617b      	str	r3, [r7, #20]
>>>>>>> flight_hardware
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 8003f4c:	f7ff ff3e 	bl	8003dcc <__NVIC_GetPriorityGrouping>
 8003f50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	68b9      	ldr	r1, [r7, #8]
 8003f56:	6978      	ldr	r0, [r7, #20]
 8003f58:	f7ff ff8e 	bl	8003e78 <NVIC_EncodePriority>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f62:	4611      	mov	r1, r2
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7ff ff5d 	bl	8003e24 <__NVIC_SetPriority>
}
 8003f6a:	bf00      	nop
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <HAL_NVIC_EnableIRQ>:
=======
 8003ecc:	f7ff ff3e 	bl	8003d4c <__NVIC_GetPriorityGrouping>
 8003ed0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	68b9      	ldr	r1, [r7, #8]
 8003ed6:	6978      	ldr	r0, [r7, #20]
 8003ed8:	f7ff ff8e 	bl	8003df8 <NVIC_EncodePriority>
 8003edc:	4602      	mov	r2, r0
 8003ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ee2:	4611      	mov	r1, r2
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7ff ff5d 	bl	8003da4 <__NVIC_SetPriority>
}
 8003eea:	bf00      	nop
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <HAL_NVIC_EnableIRQ>:
>>>>>>> flight_hardware
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b082      	sub	sp, #8
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	4603      	mov	r3, r0
 8003f7a:	71fb      	strb	r3, [r7, #7]
=======
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b082      	sub	sp, #8
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	4603      	mov	r3, r0
 8003efa:	71fb      	strb	r3, [r7, #7]
>>>>>>> flight_hardware
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 8003f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7ff ff31 	bl	8003de8 <__NVIC_EnableIRQ>
}
 8003f86:	bf00      	nop
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <HAL_SYSTICK_Config>:
=======
 8003efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7ff ff31 	bl	8003d68 <__NVIC_EnableIRQ>
}
 8003f06:	bf00      	nop
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <HAL_SYSTICK_Config>:
>>>>>>> flight_hardware
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b082      	sub	sp, #8
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7ff ffa2 	bl	8003ee0 <SysTick_Config>
 8003f9c:	4603      	mov	r3, r0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
	...

08003fa8 <HAL_DMA_Init>:
=======
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b082      	sub	sp, #8
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7ff ffa2 	bl	8003e60 <SysTick_Config>
 8003f1c:	4603      	mov	r3, r0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
	...

08003f28 <HAL_DMA_Init>:
>>>>>>> flight_hardware
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003fb4:	f7ff f84e 	bl	8003054 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]
=======
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f30:	2300      	movs	r3, #0
 8003f32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f34:	f7ff f84e 	bl	8002fd4 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]
>>>>>>> flight_hardware
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
<<<<<<< HEAD
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e099      	b.n	80040f8 <HAL_DMA_Init+0x150>
=======
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e099      	b.n	8004078 <HAL_DMA_Init+0x150>
>>>>>>> flight_hardware
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
<<<<<<< HEAD
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 0201 	bic.w	r2, r2, #1
 8003fe2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fe4:	e00f      	b.n	8004006 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fe6:	f7ff f835 	bl	8003054 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b05      	cmp	r3, #5
 8003ff2:	d908      	bls.n	8004006 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2203      	movs	r2, #3
 8003ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e078      	b.n	80040f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1e8      	bne.n	8003fe6 <HAL_DMA_Init+0x3e>
=======
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2202      	movs	r2, #2
 8003f48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 0201 	bic.w	r2, r2, #1
 8003f62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f64:	e00f      	b.n	8003f86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f66:	f7ff f835 	bl	8002fd4 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	2b05      	cmp	r3, #5
 8003f72:	d908      	bls.n	8003f86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2220      	movs	r2, #32
 8003f78:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2203      	movs	r2, #3
 8003f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e078      	b.n	8004078 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1e8      	bne.n	8003f66 <HAL_DMA_Init+0x3e>
>>>>>>> flight_hardware
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
<<<<<<< HEAD
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	4b38      	ldr	r3, [pc, #224]	; (8004100 <HAL_DMA_Init+0x158>)
 8004020:	4013      	ands	r3, r2
 8004022:	617b      	str	r3, [r7, #20]
=======
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	4b38      	ldr	r3, [pc, #224]	; (8004080 <HAL_DMA_Init+0x158>)
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	617b      	str	r3, [r7, #20]
>>>>>>> flight_hardware
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
<<<<<<< HEAD
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004032:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800403e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800404a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	4313      	orrs	r3, r2
 8004056:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405c:	2b04      	cmp	r3, #4
 800405e:	d107      	bne.n	8004070 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004068:	4313      	orrs	r3, r2
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	4313      	orrs	r3, r2
 800406e:	617b      	str	r3, [r7, #20]
=======
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	2b04      	cmp	r3, #4
 8003fde:	d107      	bne.n	8003ff0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	617b      	str	r3, [r7, #20]
>>>>>>> flight_hardware
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
<<<<<<< HEAD
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f023 0307 	bic.w	r3, r3, #7
 8004086:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	4313      	orrs	r3, r2
 8004090:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	2b04      	cmp	r3, #4
 8004098:	d117      	bne.n	80040ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	617b      	str	r3, [r7, #20]
=======
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f023 0307 	bic.w	r3, r3, #7
 8004006:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	4313      	orrs	r3, r2
 8004010:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004016:	2b04      	cmp	r3, #4
 8004018:	d117      	bne.n	800404a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	4313      	orrs	r3, r2
 8004022:	617b      	str	r3, [r7, #20]
>>>>>>> flight_hardware
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
<<<<<<< HEAD
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00e      	beq.n	80040ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 fb01 	bl	80046b4 <DMA_CheckFifoParam>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d008      	beq.n	80040ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2240      	movs	r2, #64	; 0x40
 80040bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80040c6:	2301      	movs	r3, #1
 80040c8:	e016      	b.n	80040f8 <HAL_DMA_Init+0x150>
=======
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00e      	beq.n	800404a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 fb01 	bl	8004634 <DMA_CheckFifoParam>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d008      	beq.n	800404a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2240      	movs	r2, #64	; 0x40
 800403c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004046:	2301      	movs	r3, #1
 8004048:	e016      	b.n	8004078 <HAL_DMA_Init+0x150>
>>>>>>> flight_hardware
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
<<<<<<< HEAD
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	615a      	str	r2, [r3, #20]
=======
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	615a      	str	r2, [r3, #20]
>>>>>>> flight_hardware

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
<<<<<<< HEAD
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 fab8 	bl	8004648 <DMA_CalcBaseAndBitshift>
 80040d8:	4603      	mov	r3, r0
 80040da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e0:	223f      	movs	r2, #63	; 0x3f
 80040e2:	409a      	lsls	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3718      	adds	r7, #24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	f010803f 	.word	0xf010803f

08004104 <HAL_DMA_Start_IT>:
=======
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 fab8 	bl	80045c8 <DMA_CalcBaseAndBitshift>
 8004058:	4603      	mov	r3, r0
 800405a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004060:	223f      	movs	r2, #63	; 0x3f
 8004062:	409a      	lsls	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3718      	adds	r7, #24
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	f010803f 	.word	0xf010803f

08004084 <HAL_DMA_Start_IT>:
>>>>>>> flight_hardware
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< HEAD
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]
 8004110:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004112:	2300      	movs	r3, #0
 8004114:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800411a:	613b      	str	r3, [r7, #16]
=======
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
 8004090:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004092:	2300      	movs	r3, #0
 8004094:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800409a:	613b      	str	r3, [r7, #16]
>>>>>>> flight_hardware
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
<<<<<<< HEAD
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004122:	2b01      	cmp	r3, #1
 8004124:	d101      	bne.n	800412a <HAL_DMA_Start_IT+0x26>
 8004126:	2302      	movs	r3, #2
 8004128:	e040      	b.n	80041ac <HAL_DMA_Start_IT+0xa8>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b01      	cmp	r3, #1
 800413c:	d12f      	bne.n	800419e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2202      	movs	r2, #2
 8004142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	68b9      	ldr	r1, [r7, #8]
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f000 fa4a 	bl	80045ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800415c:	223f      	movs	r2, #63	; 0x3f
 800415e:	409a      	lsls	r2, r3
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 0216 	orr.w	r2, r2, #22
 8004172:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004178:	2b00      	cmp	r3, #0
 800417a:	d007      	beq.n	800418c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f042 0208 	orr.w	r2, r2, #8
 800418a:	601a      	str	r2, [r3, #0]
=======
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d101      	bne.n	80040aa <HAL_DMA_Start_IT+0x26>
 80040a6:	2302      	movs	r3, #2
 80040a8:	e040      	b.n	800412c <HAL_DMA_Start_IT+0xa8>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d12f      	bne.n	800411e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2202      	movs	r2, #2
 80040c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	68b9      	ldr	r1, [r7, #8]
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f000 fa4a 	bl	800456c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040dc:	223f      	movs	r2, #63	; 0x3f
 80040de:	409a      	lsls	r2, r3
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 0216 	orr.w	r2, r2, #22
 80040f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d007      	beq.n	800410c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0208 	orr.w	r2, r2, #8
 800410a:	601a      	str	r2, [r3, #0]
>>>>>>> flight_hardware
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
<<<<<<< HEAD
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f042 0201 	orr.w	r2, r2, #1
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	e005      	b.n	80041aa <HAL_DMA_Start_IT+0xa6>
=======
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f042 0201 	orr.w	r2, r2, #1
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	e005      	b.n	800412a <HAL_DMA_Start_IT+0xa6>
>>>>>>> flight_hardware
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
<<<<<<< HEAD
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80041a6:	2302      	movs	r3, #2
 80041a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80041aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3718      	adds	r7, #24
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <HAL_DMA_Abort>:
=======
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004126:	2302      	movs	r3, #2
 8004128:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800412a:	7dfb      	ldrb	r3, [r7, #23]
}
 800412c:	4618      	mov	r0, r3
 800412e:	3718      	adds	r7, #24
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <HAL_DMA_Abort>:
>>>>>>> flight_hardware
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80041c2:	f7fe ff47 	bl	8003054 <HAL_GetTick>
 80041c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d008      	beq.n	80041e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2280      	movs	r2, #128	; 0x80
 80041d8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e052      	b.n	800428c <HAL_DMA_Abort+0xd8>
=======
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004140:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004142:	f7fe ff47 	bl	8002fd4 <HAL_GetTick>
 8004146:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d008      	beq.n	8004166 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2280      	movs	r2, #128	; 0x80
 8004158:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e052      	b.n	800420c <HAL_DMA_Abort+0xd8>
>>>>>>> flight_hardware
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
<<<<<<< HEAD
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 0216 	bic.w	r2, r2, #22
 80041f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	695a      	ldr	r2, [r3, #20]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004204:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	2b00      	cmp	r3, #0
 800420c:	d103      	bne.n	8004216 <HAL_DMA_Abort+0x62>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004212:	2b00      	cmp	r3, #0
 8004214:	d007      	beq.n	8004226 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 0208 	bic.w	r2, r2, #8
 8004224:	601a      	str	r2, [r3, #0]
=======
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 0216 	bic.w	r2, r2, #22
 8004174:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	695a      	ldr	r2, [r3, #20]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004184:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	2b00      	cmp	r3, #0
 800418c:	d103      	bne.n	8004196 <HAL_DMA_Abort+0x62>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004192:	2b00      	cmp	r3, #0
 8004194:	d007      	beq.n	80041a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0208 	bic.w	r2, r2, #8
 80041a4:	601a      	str	r2, [r3, #0]
>>>>>>> flight_hardware
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
<<<<<<< HEAD
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f022 0201 	bic.w	r2, r2, #1
 8004234:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004236:	e013      	b.n	8004260 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004238:	f7fe ff0c 	bl	8003054 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b05      	cmp	r3, #5
 8004244:	d90c      	bls.n	8004260 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2220      	movs	r2, #32
 800424a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2203      	movs	r2, #3
 8004250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e015      	b.n	800428c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1e4      	bne.n	8004238 <HAL_DMA_Abort+0x84>
=======
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 0201 	bic.w	r2, r2, #1
 80041b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041b6:	e013      	b.n	80041e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041b8:	f7fe ff0c 	bl	8002fd4 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b05      	cmp	r3, #5
 80041c4:	d90c      	bls.n	80041e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2220      	movs	r2, #32
 80041ca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2203      	movs	r2, #3
 80041d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e015      	b.n	800420c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1e4      	bne.n	80041b8 <HAL_DMA_Abort+0x84>
>>>>>>> flight_hardware
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
<<<<<<< HEAD
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004272:	223f      	movs	r2, #63	; 0x3f
 8004274:	409a      	lsls	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <HAL_DMA_Abort_IT>:
=======
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f2:	223f      	movs	r2, #63	; 0x3f
 80041f4:	409a      	lsls	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <HAL_DMA_Abort_IT>:
>>>>>>> flight_hardware
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d004      	beq.n	80042b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2280      	movs	r2, #128	; 0x80
 80042ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e00c      	b.n	80042cc <HAL_DMA_Abort_IT+0x38>
=======
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d004      	beq.n	8004232 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2280      	movs	r2, #128	; 0x80
 800422c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e00c      	b.n	800424c <HAL_DMA_Abort_IT+0x38>
>>>>>>> flight_hardware
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
<<<<<<< HEAD
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2205      	movs	r2, #5
 80042b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f022 0201 	bic.w	r2, r2, #1
 80042c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <HAL_DMA_IRQHandler>:
=======
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2205      	movs	r2, #5
 8004236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0201 	bic.w	r2, r2, #1
 8004248:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_DMA_IRQHandler>:
>>>>>>> flight_hardware
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80042e4:	4b8e      	ldr	r3, [pc, #568]	; (8004520 <HAL_DMA_IRQHandler+0x248>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a8e      	ldr	r2, [pc, #568]	; (8004524 <HAL_DMA_IRQHandler+0x24c>)
 80042ea:	fba2 2303 	umull	r2, r3, r2, r3
 80042ee:	0a9b      	lsrs	r3, r3, #10
 80042f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004302:	2208      	movs	r2, #8
 8004304:	409a      	lsls	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	4013      	ands	r3, r2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d01a      	beq.n	8004344 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	2b00      	cmp	r3, #0
 800431a:	d013      	beq.n	8004344 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 0204 	bic.w	r2, r2, #4
 800432a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004330:	2208      	movs	r2, #8
 8004332:	409a      	lsls	r2, r3
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433c:	f043 0201 	orr.w	r2, r3, #1
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004260:	2300      	movs	r3, #0
 8004262:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004264:	4b8e      	ldr	r3, [pc, #568]	; (80044a0 <HAL_DMA_IRQHandler+0x248>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a8e      	ldr	r2, [pc, #568]	; (80044a4 <HAL_DMA_IRQHandler+0x24c>)
 800426a:	fba2 2303 	umull	r2, r3, r2, r3
 800426e:	0a9b      	lsrs	r3, r3, #10
 8004270:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004276:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004282:	2208      	movs	r2, #8
 8004284:	409a      	lsls	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	4013      	ands	r3, r2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d01a      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	2b00      	cmp	r3, #0
 800429a:	d013      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 0204 	bic.w	r2, r2, #4
 80042aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b0:	2208      	movs	r2, #8
 80042b2:	409a      	lsls	r2, r3
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042bc:	f043 0201 	orr.w	r2, r3, #1
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> flight_hardware
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004348:	2201      	movs	r2, #1
 800434a:	409a      	lsls	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4013      	ands	r3, r2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d012      	beq.n	800437a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00b      	beq.n	800437a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004366:	2201      	movs	r2, #1
 8004368:	409a      	lsls	r2, r3
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004372:	f043 0202 	orr.w	r2, r3, #2
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c8:	2201      	movs	r2, #1
 80042ca:	409a      	lsls	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	4013      	ands	r3, r2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d012      	beq.n	80042fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00b      	beq.n	80042fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e6:	2201      	movs	r2, #1
 80042e8:	409a      	lsls	r2, r3
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f2:	f043 0202 	orr.w	r2, r3, #2
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> flight_hardware
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800437e:	2204      	movs	r2, #4
 8004380:	409a      	lsls	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	4013      	ands	r3, r2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d012      	beq.n	80043b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00b      	beq.n	80043b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800439c:	2204      	movs	r2, #4
 800439e:	409a      	lsls	r2, r3
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a8:	f043 0204 	orr.w	r2, r3, #4
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042fe:	2204      	movs	r2, #4
 8004300:	409a      	lsls	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	4013      	ands	r3, r2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d012      	beq.n	8004330 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00b      	beq.n	8004330 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800431c:	2204      	movs	r2, #4
 800431e:	409a      	lsls	r2, r3
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004328:	f043 0204 	orr.w	r2, r3, #4
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> flight_hardware
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043b4:	2210      	movs	r2, #16
 80043b6:	409a      	lsls	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	4013      	ands	r3, r2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d043      	beq.n	8004448 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0308 	and.w	r3, r3, #8
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d03c      	beq.n	8004448 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d2:	2210      	movs	r2, #16
 80043d4:	409a      	lsls	r2, r3
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d018      	beq.n	800441a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d108      	bne.n	8004408 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d024      	beq.n	8004448 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	4798      	blx	r3
 8004406:	e01f      	b.n	8004448 <HAL_DMA_IRQHandler+0x170>
=======
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004334:	2210      	movs	r2, #16
 8004336:	409a      	lsls	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	4013      	ands	r3, r2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d043      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0308 	and.w	r3, r3, #8
 800434a:	2b00      	cmp	r3, #0
 800434c:	d03c      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004352:	2210      	movs	r2, #16
 8004354:	409a      	lsls	r2, r3
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d018      	beq.n	800439a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d108      	bne.n	8004388 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437a:	2b00      	cmp	r3, #0
 800437c:	d024      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	4798      	blx	r3
 8004386:	e01f      	b.n	80043c8 <HAL_DMA_IRQHandler+0x170>
>>>>>>> flight_hardware
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
<<<<<<< HEAD
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800440c:	2b00      	cmp	r3, #0
 800440e:	d01b      	beq.n	8004448 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	4798      	blx	r3
 8004418:	e016      	b.n	8004448 <HAL_DMA_IRQHandler+0x170>
=======
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800438c:	2b00      	cmp	r3, #0
 800438e:	d01b      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	4798      	blx	r3
 8004398:	e016      	b.n	80043c8 <HAL_DMA_IRQHandler+0x170>
>>>>>>> flight_hardware
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
<<<<<<< HEAD
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004424:	2b00      	cmp	r3, #0
 8004426:	d107      	bne.n	8004438 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f022 0208 	bic.w	r2, r2, #8
 8004436:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443c:	2b00      	cmp	r3, #0
 800443e:	d003      	beq.n	8004448 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	4798      	blx	r3
=======
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d107      	bne.n	80043b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 0208 	bic.w	r2, r2, #8
 80043b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d003      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	4798      	blx	r3
>>>>>>> flight_hardware
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800444c:	2220      	movs	r2, #32
 800444e:	409a      	lsls	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	4013      	ands	r3, r2
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 808f 	beq.w	8004578 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0310 	and.w	r3, r3, #16
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 8087 	beq.w	8004578 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800446e:	2220      	movs	r2, #32
 8004470:	409a      	lsls	r2, r3
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b05      	cmp	r3, #5
 8004480:	d136      	bne.n	80044f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 0216 	bic.w	r2, r2, #22
 8004490:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	695a      	ldr	r2, [r3, #20]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d103      	bne.n	80044b2 <HAL_DMA_IRQHandler+0x1da>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d007      	beq.n	80044c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 0208 	bic.w	r2, r2, #8
 80044c0:	601a      	str	r2, [r3, #0]
=======
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043cc:	2220      	movs	r2, #32
 80043ce:	409a      	lsls	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4013      	ands	r3, r2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 808f 	beq.w	80044f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0310 	and.w	r3, r3, #16
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 8087 	beq.w	80044f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ee:	2220      	movs	r2, #32
 80043f0:	409a      	lsls	r2, r3
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b05      	cmp	r3, #5
 8004400:	d136      	bne.n	8004470 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 0216 	bic.w	r2, r2, #22
 8004410:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	695a      	ldr	r2, [r3, #20]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004420:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	2b00      	cmp	r3, #0
 8004428:	d103      	bne.n	8004432 <HAL_DMA_IRQHandler+0x1da>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800442e:	2b00      	cmp	r3, #0
 8004430:	d007      	beq.n	8004442 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 0208 	bic.w	r2, r2, #8
 8004440:	601a      	str	r2, [r3, #0]
>>>>>>> flight_hardware
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
<<<<<<< HEAD
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c6:	223f      	movs	r2, #63	; 0x3f
 80044c8:	409a      	lsls	r2, r3
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d07e      	beq.n	80045e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	4798      	blx	r3
        }
        return;
 80044ee:	e079      	b.n	80045e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d01d      	beq.n	800453a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10d      	bne.n	8004528 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004510:	2b00      	cmp	r3, #0
 8004512:	d031      	beq.n	8004578 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	4798      	blx	r3
 800451c:	e02c      	b.n	8004578 <HAL_DMA_IRQHandler+0x2a0>
 800451e:	bf00      	nop
 8004520:	2000001c 	.word	0x2000001c
 8004524:	1b4e81b5 	.word	0x1b4e81b5
=======
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004446:	223f      	movs	r2, #63	; 0x3f
 8004448:	409a      	lsls	r2, r3
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004462:	2b00      	cmp	r3, #0
 8004464:	d07e      	beq.n	8004564 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	4798      	blx	r3
        }
        return;
 800446e:	e079      	b.n	8004564 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d01d      	beq.n	80044ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10d      	bne.n	80044a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004490:	2b00      	cmp	r3, #0
 8004492:	d031      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	4798      	blx	r3
 800449c:	e02c      	b.n	80044f8 <HAL_DMA_IRQHandler+0x2a0>
 800449e:	bf00      	nop
 80044a0:	2000001c 	.word	0x2000001c
 80044a4:	1b4e81b5 	.word	0x1b4e81b5
>>>>>>> flight_hardware
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
<<<<<<< HEAD
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800452c:	2b00      	cmp	r3, #0
 800452e:	d023      	beq.n	8004578 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	4798      	blx	r3
 8004538:	e01e      	b.n	8004578 <HAL_DMA_IRQHandler+0x2a0>
=======
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d023      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	4798      	blx	r3
 80044b8:	e01e      	b.n	80044f8 <HAL_DMA_IRQHandler+0x2a0>
>>>>>>> flight_hardware
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
<<<<<<< HEAD
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004544:	2b00      	cmp	r3, #0
 8004546:	d10f      	bne.n	8004568 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f022 0210 	bic.w	r2, r2, #16
 8004556:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800456c:	2b00      	cmp	r3, #0
 800456e:	d003      	beq.n	8004578 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	4798      	blx	r3
=======
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10f      	bne.n	80044e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 0210 	bic.w	r2, r2, #16
 80044d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d003      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	4798      	blx	r3
>>>>>>> flight_hardware
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
<<<<<<< HEAD
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457c:	2b00      	cmp	r3, #0
 800457e:	d032      	beq.n	80045e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b00      	cmp	r3, #0
 800458a:	d022      	beq.n	80045d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2205      	movs	r2, #5
 8004590:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f022 0201 	bic.w	r2, r2, #1
 80045a2:	601a      	str	r2, [r3, #0]
=======
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d032      	beq.n	8004566 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b00      	cmp	r3, #0
 800450a:	d022      	beq.n	8004552 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2205      	movs	r2, #5
 8004510:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 0201 	bic.w	r2, r2, #1
 8004522:	601a      	str	r2, [r3, #0]
>>>>>>> flight_hardware

      do
      {
        if (++count > timeout)
<<<<<<< HEAD
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	3301      	adds	r3, #1
 80045a8:	60bb      	str	r3, [r7, #8]
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d307      	bcc.n	80045c0 <HAL_DMA_IRQHandler+0x2e8>
=======
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	3301      	adds	r3, #1
 8004528:	60bb      	str	r3, [r7, #8]
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	429a      	cmp	r2, r3
 800452e:	d307      	bcc.n	8004540 <HAL_DMA_IRQHandler+0x2e8>
>>>>>>> flight_hardware
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
<<<<<<< HEAD
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1f2      	bne.n	80045a4 <HAL_DMA_IRQHandler+0x2cc>
 80045be:	e000      	b.n	80045c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80045c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d005      	beq.n	80045e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	4798      	blx	r3
 80045e2:	e000      	b.n	80045e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80045e4:	bf00      	nop
    }
  }
}
 80045e6:	3718      	adds	r7, #24
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <DMA_SetConfig>:
=======
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1f2      	bne.n	8004524 <HAL_DMA_IRQHandler+0x2cc>
 800453e:	e000      	b.n	8004542 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004540:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004556:	2b00      	cmp	r3, #0
 8004558:	d005      	beq.n	8004566 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	4798      	blx	r3
 8004562:	e000      	b.n	8004566 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004564:	bf00      	nop
    }
  }
}
 8004566:	3718      	adds	r7, #24
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <DMA_SetConfig>:
>>>>>>> flight_hardware
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< HEAD
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
 80045f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004608:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	683a      	ldr	r2, [r7, #0]
 8004610:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	2b40      	cmp	r3, #64	; 0x40
 8004618:	d108      	bne.n	800462c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	60da      	str	r2, [r3, #12]
=======
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
 8004578:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004588:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	2b40      	cmp	r3, #64	; 0x40
 8004598:	d108      	bne.n	80045ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	60da      	str	r2, [r3, #12]
>>>>>>> flight_hardware
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
<<<<<<< HEAD
 800462a:	e007      	b.n	800463c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	60da      	str	r2, [r3, #12]
}
 800463c:	bf00      	nop
 800463e:	3714      	adds	r7, #20
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <DMA_CalcBaseAndBitshift>:
=======
 80045aa:	e007      	b.n	80045bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68ba      	ldr	r2, [r7, #8]
 80045b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	60da      	str	r2, [r3, #12]
}
 80045bc:	bf00      	nop
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <DMA_CalcBaseAndBitshift>:
>>>>>>> flight_hardware
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	b2db      	uxtb	r3, r3
 8004656:	3b10      	subs	r3, #16
 8004658:	4a14      	ldr	r2, [pc, #80]	; (80046ac <DMA_CalcBaseAndBitshift+0x64>)
 800465a:	fba2 2303 	umull	r2, r3, r2, r3
 800465e:	091b      	lsrs	r3, r3, #4
 8004660:	60fb      	str	r3, [r7, #12]
=======
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	3b10      	subs	r3, #16
 80045d8:	4a14      	ldr	r2, [pc, #80]	; (800462c <DMA_CalcBaseAndBitshift+0x64>)
 80045da:	fba2 2303 	umull	r2, r3, r2, r3
 80045de:	091b      	lsrs	r3, r3, #4
 80045e0:	60fb      	str	r3, [r7, #12]
>>>>>>> flight_hardware
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
<<<<<<< HEAD
 8004662:	4a13      	ldr	r2, [pc, #76]	; (80046b0 <DMA_CalcBaseAndBitshift+0x68>)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	4413      	add	r3, r2
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	461a      	mov	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2b03      	cmp	r3, #3
 8004674:	d909      	bls.n	800468a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800467e:	f023 0303 	bic.w	r3, r3, #3
 8004682:	1d1a      	adds	r2, r3, #4
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	659a      	str	r2, [r3, #88]	; 0x58
 8004688:	e007      	b.n	800469a <DMA_CalcBaseAndBitshift+0x52>
=======
 80045e2:	4a13      	ldr	r2, [pc, #76]	; (8004630 <DMA_CalcBaseAndBitshift+0x68>)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	4413      	add	r3, r2
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	461a      	mov	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2b03      	cmp	r3, #3
 80045f4:	d909      	bls.n	800460a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80045fe:	f023 0303 	bic.w	r3, r3, #3
 8004602:	1d1a      	adds	r2, r3, #4
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	659a      	str	r2, [r3, #88]	; 0x58
 8004608:	e007      	b.n	800461a <DMA_CalcBaseAndBitshift+0x52>
>>>>>>> flight_hardware
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
<<<<<<< HEAD
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004692:	f023 0303 	bic.w	r3, r3, #3
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	aaaaaaab 	.word	0xaaaaaaab
 80046b0:	08009594 	.word	0x08009594

080046b4 <DMA_CheckFifoParam>:
=======
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004612:	f023 0303 	bic.w	r3, r3, #3
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800461e:	4618      	mov	r0, r3
 8004620:	3714      	adds	r7, #20
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	aaaaaaab 	.word	0xaaaaaaab
 8004630:	08009514 	.word	0x08009514

08004634 <DMA_CheckFifoParam>:
>>>>>>> flight_hardware
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046bc:	2300      	movs	r3, #0
 80046be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d11f      	bne.n	800470e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	2b03      	cmp	r3, #3
 80046d2:	d856      	bhi.n	8004782 <DMA_CheckFifoParam+0xce>
 80046d4:	a201      	add	r2, pc, #4	; (adr r2, 80046dc <DMA_CheckFifoParam+0x28>)
 80046d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046da:	bf00      	nop
 80046dc:	080046ed 	.word	0x080046ed
 80046e0:	080046ff 	.word	0x080046ff
 80046e4:	080046ed 	.word	0x080046ed
 80046e8:	08004783 	.word	0x08004783
=======
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800463c:	2300      	movs	r3, #0
 800463e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004644:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d11f      	bne.n	800468e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	2b03      	cmp	r3, #3
 8004652:	d856      	bhi.n	8004702 <DMA_CheckFifoParam+0xce>
 8004654:	a201      	add	r2, pc, #4	; (adr r2, 800465c <DMA_CheckFifoParam+0x28>)
 8004656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800465a:	bf00      	nop
 800465c:	0800466d 	.word	0x0800466d
 8004660:	0800467f 	.word	0x0800467f
 8004664:	0800466d 	.word	0x0800466d
 8004668:	08004703 	.word	0x08004703
>>>>>>> flight_hardware
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
<<<<<<< HEAD
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d046      	beq.n	8004786 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046fc:	e043      	b.n	8004786 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004702:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004706:	d140      	bne.n	800478a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800470c:	e03d      	b.n	800478a <DMA_CheckFifoParam+0xd6>
=======
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004670:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d046      	beq.n	8004706 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800467c:	e043      	b.n	8004706 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004682:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004686:	d140      	bne.n	800470a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800468c:	e03d      	b.n	800470a <DMA_CheckFifoParam+0xd6>
>>>>>>> flight_hardware
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
<<<<<<< HEAD
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004716:	d121      	bne.n	800475c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	2b03      	cmp	r3, #3
 800471c:	d837      	bhi.n	800478e <DMA_CheckFifoParam+0xda>
 800471e:	a201      	add	r2, pc, #4	; (adr r2, 8004724 <DMA_CheckFifoParam+0x70>)
 8004720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004724:	08004735 	.word	0x08004735
 8004728:	0800473b 	.word	0x0800473b
 800472c:	08004735 	.word	0x08004735
 8004730:	0800474d 	.word	0x0800474d
=======
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004696:	d121      	bne.n	80046dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	2b03      	cmp	r3, #3
 800469c:	d837      	bhi.n	800470e <DMA_CheckFifoParam+0xda>
 800469e:	a201      	add	r2, pc, #4	; (adr r2, 80046a4 <DMA_CheckFifoParam+0x70>)
 80046a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a4:	080046b5 	.word	0x080046b5
 80046a8:	080046bb 	.word	0x080046bb
 80046ac:	080046b5 	.word	0x080046b5
 80046b0:	080046cd 	.word	0x080046cd
>>>>>>> flight_hardware
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
<<<<<<< HEAD
 8004734:	2301      	movs	r3, #1
 8004736:	73fb      	strb	r3, [r7, #15]
      break;
 8004738:	e030      	b.n	800479c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d025      	beq.n	8004792 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800474a:	e022      	b.n	8004792 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004750:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004754:	d11f      	bne.n	8004796 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800475a:	e01c      	b.n	8004796 <DMA_CheckFifoParam+0xe2>
=======
 80046b4:	2301      	movs	r3, #1
 80046b6:	73fb      	strb	r3, [r7, #15]
      break;
 80046b8:	e030      	b.n	800471c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d025      	beq.n	8004712 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046ca:	e022      	b.n	8004712 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80046d4:	d11f      	bne.n	8004716 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80046da:	e01c      	b.n	8004716 <DMA_CheckFifoParam+0xe2>
>>>>>>> flight_hardware
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
<<<<<<< HEAD
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	2b02      	cmp	r3, #2
 8004760:	d903      	bls.n	800476a <DMA_CheckFifoParam+0xb6>
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	2b03      	cmp	r3, #3
 8004766:	d003      	beq.n	8004770 <DMA_CheckFifoParam+0xbc>
=======
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d903      	bls.n	80046ea <DMA_CheckFifoParam+0xb6>
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	2b03      	cmp	r3, #3
 80046e6:	d003      	beq.n	80046f0 <DMA_CheckFifoParam+0xbc>
>>>>>>> flight_hardware
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
<<<<<<< HEAD
 8004768:	e018      	b.n	800479c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	73fb      	strb	r3, [r7, #15]
      break;
 800476e:	e015      	b.n	800479c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004774:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00e      	beq.n	800479a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	73fb      	strb	r3, [r7, #15]
      break;
 8004780:	e00b      	b.n	800479a <DMA_CheckFifoParam+0xe6>
      break;
 8004782:	bf00      	nop
 8004784:	e00a      	b.n	800479c <DMA_CheckFifoParam+0xe8>
      break;
 8004786:	bf00      	nop
 8004788:	e008      	b.n	800479c <DMA_CheckFifoParam+0xe8>
      break;
 800478a:	bf00      	nop
 800478c:	e006      	b.n	800479c <DMA_CheckFifoParam+0xe8>
      break;
 800478e:	bf00      	nop
 8004790:	e004      	b.n	800479c <DMA_CheckFifoParam+0xe8>
      break;
 8004792:	bf00      	nop
 8004794:	e002      	b.n	800479c <DMA_CheckFifoParam+0xe8>
      break;   
 8004796:	bf00      	nop
 8004798:	e000      	b.n	800479c <DMA_CheckFifoParam+0xe8>
      break;
 800479a:	bf00      	nop
=======
 80046e8:	e018      	b.n	800471c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	73fb      	strb	r3, [r7, #15]
      break;
 80046ee:	e015      	b.n	800471c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00e      	beq.n	800471a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004700:	e00b      	b.n	800471a <DMA_CheckFifoParam+0xe6>
      break;
 8004702:	bf00      	nop
 8004704:	e00a      	b.n	800471c <DMA_CheckFifoParam+0xe8>
      break;
 8004706:	bf00      	nop
 8004708:	e008      	b.n	800471c <DMA_CheckFifoParam+0xe8>
      break;
 800470a:	bf00      	nop
 800470c:	e006      	b.n	800471c <DMA_CheckFifoParam+0xe8>
      break;
 800470e:	bf00      	nop
 8004710:	e004      	b.n	800471c <DMA_CheckFifoParam+0xe8>
      break;
 8004712:	bf00      	nop
 8004714:	e002      	b.n	800471c <DMA_CheckFifoParam+0xe8>
      break;   
 8004716:	bf00      	nop
 8004718:	e000      	b.n	800471c <DMA_CheckFifoParam+0xe8>
      break;
 800471a:	bf00      	nop
>>>>>>> flight_hardware
    }
  } 
  
  return status; 
<<<<<<< HEAD
 800479c:	7bfb      	ldrb	r3, [r7, #15]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop

080047ac <HAL_GPIO_Init>:
=======
 800471c:	7bfb      	ldrb	r3, [r7, #15]
}
 800471e:	4618      	mov	r0, r3
 8004720:	3714      	adds	r7, #20
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop

0800472c <HAL_GPIO_Init>:
>>>>>>> flight_hardware
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 80047ac:	b480      	push	{r7}
 80047ae:	b089      	sub	sp, #36	; 0x24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80047b6:	2300      	movs	r3, #0
 80047b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80047ba:	2300      	movs	r3, #0
 80047bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80047be:	2300      	movs	r3, #0
 80047c0:	61bb      	str	r3, [r7, #24]
=======
 800472c:	b480      	push	{r7}
 800472e:	b089      	sub	sp, #36	; 0x24
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004736:	2300      	movs	r3, #0
 8004738:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800473a:	2300      	movs	r3, #0
 800473c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800473e:	2300      	movs	r3, #0
 8004740:	61bb      	str	r3, [r7, #24]
>>>>>>> flight_hardware
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
<<<<<<< HEAD
 80047c2:	2300      	movs	r3, #0
 80047c4:	61fb      	str	r3, [r7, #28]
 80047c6:	e177      	b.n	8004ab8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80047c8:	2201      	movs	r2, #1
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	fa02 f303 	lsl.w	r3, r2, r3
 80047d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	4013      	ands	r3, r2
 80047da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	f040 8166 	bne.w	8004ab2 <HAL_GPIO_Init+0x306>
=======
 8004742:	2300      	movs	r3, #0
 8004744:	61fb      	str	r3, [r7, #28]
 8004746:	e177      	b.n	8004a38 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004748:	2201      	movs	r2, #1
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	fa02 f303 	lsl.w	r3, r2, r3
 8004750:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	4013      	ands	r3, r2
 800475a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	429a      	cmp	r2, r3
 8004762:	f040 8166 	bne.w	8004a32 <HAL_GPIO_Init+0x306>
>>>>>>> flight_hardware
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
<<<<<<< HEAD
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f003 0303 	and.w	r3, r3, #3
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d005      	beq.n	80047fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d130      	bne.n	8004860 <HAL_GPIO_Init+0xb4>
=======
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f003 0303 	and.w	r3, r3, #3
 800476e:	2b01      	cmp	r3, #1
 8004770:	d005      	beq.n	800477e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800477a:	2b02      	cmp	r3, #2
 800477c:	d130      	bne.n	80047e0 <HAL_GPIO_Init+0xb4>
>>>>>>> flight_hardware
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
<<<<<<< HEAD
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	2203      	movs	r2, #3
 800480a:	fa02 f303 	lsl.w	r3, r2, r3
 800480e:	43db      	mvns	r3, r3
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	4013      	ands	r3, r2
 8004814:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	68da      	ldr	r2, [r3, #12]
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	fa02 f303 	lsl.w	r3, r2, r3
 8004822:	69ba      	ldr	r2, [r7, #24]
 8004824:	4313      	orrs	r3, r2
 8004826:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004834:	2201      	movs	r2, #1
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	fa02 f303 	lsl.w	r3, r2, r3
 800483c:	43db      	mvns	r3, r3
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	4013      	ands	r3, r2
 8004842:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	091b      	lsrs	r3, r3, #4
 800484a:	f003 0201 	and.w	r2, r3, #1
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	fa02 f303 	lsl.w	r3, r2, r3
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	4313      	orrs	r3, r2
 8004858:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f003 0303 	and.w	r3, r3, #3
 8004868:	2b03      	cmp	r3, #3
 800486a:	d017      	beq.n	800489c <HAL_GPIO_Init+0xf0>
=======
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	2203      	movs	r2, #3
 800478a:	fa02 f303 	lsl.w	r3, r2, r3
 800478e:	43db      	mvns	r3, r3
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	4013      	ands	r3, r2
 8004794:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	68da      	ldr	r2, [r3, #12]
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	fa02 f303 	lsl.w	r3, r2, r3
 80047a2:	69ba      	ldr	r2, [r7, #24]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047b4:	2201      	movs	r2, #1
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	fa02 f303 	lsl.w	r3, r2, r3
 80047bc:	43db      	mvns	r3, r3
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	4013      	ands	r3, r2
 80047c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	091b      	lsrs	r3, r3, #4
 80047ca:	f003 0201 	and.w	r2, r3, #1
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	fa02 f303 	lsl.w	r3, r2, r3
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f003 0303 	and.w	r3, r3, #3
 80047e8:	2b03      	cmp	r3, #3
 80047ea:	d017      	beq.n	800481c <HAL_GPIO_Init+0xf0>
>>>>>>> flight_hardware
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
<<<<<<< HEAD
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	2203      	movs	r2, #3
 8004878:	fa02 f303 	lsl.w	r3, r2, r3
 800487c:	43db      	mvns	r3, r3
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	4013      	ands	r3, r2
 8004882:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	689a      	ldr	r2, [r3, #8]
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	fa02 f303 	lsl.w	r3, r2, r3
 8004890:	69ba      	ldr	r2, [r7, #24]
 8004892:	4313      	orrs	r3, r2
 8004894:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	60da      	str	r2, [r3, #12]
=======
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	2203      	movs	r2, #3
 80047f8:	fa02 f303 	lsl.w	r3, r2, r3
 80047fc:	43db      	mvns	r3, r3
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	4013      	ands	r3, r2
 8004802:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	689a      	ldr	r2, [r3, #8]
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	005b      	lsls	r3, r3, #1
 800480c:	fa02 f303 	lsl.w	r3, r2, r3
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	4313      	orrs	r3, r2
 8004814:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	60da      	str	r2, [r3, #12]
>>>>>>> flight_hardware
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< HEAD
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f003 0303 	and.w	r3, r3, #3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d123      	bne.n	80048f0 <HAL_GPIO_Init+0x144>
=======
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f003 0303 	and.w	r3, r3, #3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d123      	bne.n	8004870 <HAL_GPIO_Init+0x144>
>>>>>>> flight_hardware
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< HEAD
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	08da      	lsrs	r2, r3, #3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	3208      	adds	r2, #8
 80048b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	f003 0307 	and.w	r3, r3, #7
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	220f      	movs	r2, #15
 80048c0:	fa02 f303 	lsl.w	r3, r2, r3
 80048c4:	43db      	mvns	r3, r3
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	4013      	ands	r3, r2
 80048ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	691a      	ldr	r2, [r3, #16]
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	f003 0307 	and.w	r3, r3, #7
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	fa02 f303 	lsl.w	r3, r2, r3
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	4313      	orrs	r3, r2
 80048e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	08da      	lsrs	r2, r3, #3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	3208      	adds	r2, #8
 80048ea:	69b9      	ldr	r1, [r7, #24]
 80048ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	08da      	lsrs	r2, r3, #3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	3208      	adds	r2, #8
 8004830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004834:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	f003 0307 	and.w	r3, r3, #7
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	220f      	movs	r2, #15
 8004840:	fa02 f303 	lsl.w	r3, r2, r3
 8004844:	43db      	mvns	r3, r3
 8004846:	69ba      	ldr	r2, [r7, #24]
 8004848:	4013      	ands	r3, r2
 800484a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	691a      	ldr	r2, [r3, #16]
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	f003 0307 	and.w	r3, r3, #7
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	fa02 f303 	lsl.w	r3, r2, r3
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	4313      	orrs	r3, r2
 8004860:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	08da      	lsrs	r2, r3, #3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	3208      	adds	r2, #8
 800486a:	69b9      	ldr	r1, [r7, #24]
 800486c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> flight_hardware
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	2203      	movs	r2, #3
 80048fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004900:	43db      	mvns	r3, r3
 8004902:	69ba      	ldr	r2, [r7, #24]
 8004904:	4013      	ands	r3, r2
 8004906:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f003 0203 	and.w	r2, r3, #3
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	005b      	lsls	r3, r3, #1
 8004914:	fa02 f303 	lsl.w	r3, r2, r3
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	4313      	orrs	r3, r2
 800491c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	601a      	str	r2, [r3, #0]
=======
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	2203      	movs	r2, #3
 800487c:	fa02 f303 	lsl.w	r3, r2, r3
 8004880:	43db      	mvns	r3, r3
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	4013      	ands	r3, r2
 8004886:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f003 0203 	and.w	r2, r3, #3
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	fa02 f303 	lsl.w	r3, r2, r3
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	4313      	orrs	r3, r2
 800489c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	601a      	str	r2, [r3, #0]
>>>>>>> flight_hardware

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
<<<<<<< HEAD
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800492c:	2b00      	cmp	r3, #0
 800492e:	f000 80c0 	beq.w	8004ab2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004932:	2300      	movs	r3, #0
 8004934:	60fb      	str	r3, [r7, #12]
 8004936:	4b66      	ldr	r3, [pc, #408]	; (8004ad0 <HAL_GPIO_Init+0x324>)
 8004938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493a:	4a65      	ldr	r2, [pc, #404]	; (8004ad0 <HAL_GPIO_Init+0x324>)
 800493c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004940:	6453      	str	r3, [r2, #68]	; 0x44
 8004942:	4b63      	ldr	r3, [pc, #396]	; (8004ad0 <HAL_GPIO_Init+0x324>)
 8004944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800494a:	60fb      	str	r3, [r7, #12]
 800494c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800494e:	4a61      	ldr	r2, [pc, #388]	; (8004ad4 <HAL_GPIO_Init+0x328>)
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	089b      	lsrs	r3, r3, #2
 8004954:	3302      	adds	r3, #2
 8004956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800495a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	f003 0303 	and.w	r3, r3, #3
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	220f      	movs	r2, #15
 8004966:	fa02 f303 	lsl.w	r3, r2, r3
 800496a:	43db      	mvns	r3, r3
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	4013      	ands	r3, r2
 8004970:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a58      	ldr	r2, [pc, #352]	; (8004ad8 <HAL_GPIO_Init+0x32c>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d037      	beq.n	80049ea <HAL_GPIO_Init+0x23e>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a57      	ldr	r2, [pc, #348]	; (8004adc <HAL_GPIO_Init+0x330>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d031      	beq.n	80049e6 <HAL_GPIO_Init+0x23a>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a56      	ldr	r2, [pc, #344]	; (8004ae0 <HAL_GPIO_Init+0x334>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d02b      	beq.n	80049e2 <HAL_GPIO_Init+0x236>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a55      	ldr	r2, [pc, #340]	; (8004ae4 <HAL_GPIO_Init+0x338>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d025      	beq.n	80049de <HAL_GPIO_Init+0x232>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a54      	ldr	r2, [pc, #336]	; (8004ae8 <HAL_GPIO_Init+0x33c>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d01f      	beq.n	80049da <HAL_GPIO_Init+0x22e>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a53      	ldr	r2, [pc, #332]	; (8004aec <HAL_GPIO_Init+0x340>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d019      	beq.n	80049d6 <HAL_GPIO_Init+0x22a>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a52      	ldr	r2, [pc, #328]	; (8004af0 <HAL_GPIO_Init+0x344>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d013      	beq.n	80049d2 <HAL_GPIO_Init+0x226>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a51      	ldr	r2, [pc, #324]	; (8004af4 <HAL_GPIO_Init+0x348>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d00d      	beq.n	80049ce <HAL_GPIO_Init+0x222>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a50      	ldr	r2, [pc, #320]	; (8004af8 <HAL_GPIO_Init+0x34c>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d007      	beq.n	80049ca <HAL_GPIO_Init+0x21e>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a4f      	ldr	r2, [pc, #316]	; (8004afc <HAL_GPIO_Init+0x350>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d101      	bne.n	80049c6 <HAL_GPIO_Init+0x21a>
 80049c2:	2309      	movs	r3, #9
 80049c4:	e012      	b.n	80049ec <HAL_GPIO_Init+0x240>
 80049c6:	230a      	movs	r3, #10
 80049c8:	e010      	b.n	80049ec <HAL_GPIO_Init+0x240>
 80049ca:	2308      	movs	r3, #8
 80049cc:	e00e      	b.n	80049ec <HAL_GPIO_Init+0x240>
 80049ce:	2307      	movs	r3, #7
 80049d0:	e00c      	b.n	80049ec <HAL_GPIO_Init+0x240>
 80049d2:	2306      	movs	r3, #6
 80049d4:	e00a      	b.n	80049ec <HAL_GPIO_Init+0x240>
 80049d6:	2305      	movs	r3, #5
 80049d8:	e008      	b.n	80049ec <HAL_GPIO_Init+0x240>
 80049da:	2304      	movs	r3, #4
 80049dc:	e006      	b.n	80049ec <HAL_GPIO_Init+0x240>
 80049de:	2303      	movs	r3, #3
 80049e0:	e004      	b.n	80049ec <HAL_GPIO_Init+0x240>
 80049e2:	2302      	movs	r3, #2
 80049e4:	e002      	b.n	80049ec <HAL_GPIO_Init+0x240>
 80049e6:	2301      	movs	r3, #1
 80049e8:	e000      	b.n	80049ec <HAL_GPIO_Init+0x240>
 80049ea:	2300      	movs	r3, #0
 80049ec:	69fa      	ldr	r2, [r7, #28]
 80049ee:	f002 0203 	and.w	r2, r2, #3
 80049f2:	0092      	lsls	r2, r2, #2
 80049f4:	4093      	lsls	r3, r2
 80049f6:	69ba      	ldr	r2, [r7, #24]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049fc:	4935      	ldr	r1, [pc, #212]	; (8004ad4 <HAL_GPIO_Init+0x328>)
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	089b      	lsrs	r3, r3, #2
 8004a02:	3302      	adds	r3, #2
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a0a:	4b3d      	ldr	r3, [pc, #244]	; (8004b00 <HAL_GPIO_Init+0x354>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	43db      	mvns	r3, r3
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	4013      	ands	r3, r2
 8004a18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a2e:	4a34      	ldr	r2, [pc, #208]	; (8004b00 <HAL_GPIO_Init+0x354>)
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a34:	4b32      	ldr	r3, [pc, #200]	; (8004b00 <HAL_GPIO_Init+0x354>)
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	43db      	mvns	r3, r3
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	4013      	ands	r3, r2
 8004a42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d003      	beq.n	8004a58 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004a50:	69ba      	ldr	r2, [r7, #24]
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a58:	4a29      	ldr	r2, [pc, #164]	; (8004b00 <HAL_GPIO_Init+0x354>)
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a5e:	4b28      	ldr	r3, [pc, #160]	; (8004b00 <HAL_GPIO_Init+0x354>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	43db      	mvns	r3, r3
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d003      	beq.n	8004a82 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a82:	4a1f      	ldr	r2, [pc, #124]	; (8004b00 <HAL_GPIO_Init+0x354>)
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a88:	4b1d      	ldr	r3, [pc, #116]	; (8004b00 <HAL_GPIO_Init+0x354>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	43db      	mvns	r3, r3
 8004a92:	69ba      	ldr	r2, [r7, #24]
 8004a94:	4013      	ands	r3, r2
 8004a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d003      	beq.n	8004aac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004aac:	4a14      	ldr	r2, [pc, #80]	; (8004b00 <HAL_GPIO_Init+0x354>)
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	61fb      	str	r3, [r7, #28]
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	2b0f      	cmp	r3, #15
 8004abc:	f67f ae84 	bls.w	80047c8 <HAL_GPIO_Init+0x1c>
=======
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 80c0 	beq.w	8004a32 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048b2:	2300      	movs	r3, #0
 80048b4:	60fb      	str	r3, [r7, #12]
 80048b6:	4b66      	ldr	r3, [pc, #408]	; (8004a50 <HAL_GPIO_Init+0x324>)
 80048b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ba:	4a65      	ldr	r2, [pc, #404]	; (8004a50 <HAL_GPIO_Init+0x324>)
 80048bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048c0:	6453      	str	r3, [r2, #68]	; 0x44
 80048c2:	4b63      	ldr	r3, [pc, #396]	; (8004a50 <HAL_GPIO_Init+0x324>)
 80048c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048ca:	60fb      	str	r3, [r7, #12]
 80048cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048ce:	4a61      	ldr	r2, [pc, #388]	; (8004a54 <HAL_GPIO_Init+0x328>)
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	089b      	lsrs	r3, r3, #2
 80048d4:	3302      	adds	r3, #2
 80048d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	f003 0303 	and.w	r3, r3, #3
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	220f      	movs	r2, #15
 80048e6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ea:	43db      	mvns	r3, r3
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	4013      	ands	r3, r2
 80048f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a58      	ldr	r2, [pc, #352]	; (8004a58 <HAL_GPIO_Init+0x32c>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d037      	beq.n	800496a <HAL_GPIO_Init+0x23e>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a57      	ldr	r2, [pc, #348]	; (8004a5c <HAL_GPIO_Init+0x330>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d031      	beq.n	8004966 <HAL_GPIO_Init+0x23a>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a56      	ldr	r2, [pc, #344]	; (8004a60 <HAL_GPIO_Init+0x334>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d02b      	beq.n	8004962 <HAL_GPIO_Init+0x236>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a55      	ldr	r2, [pc, #340]	; (8004a64 <HAL_GPIO_Init+0x338>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d025      	beq.n	800495e <HAL_GPIO_Init+0x232>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a54      	ldr	r2, [pc, #336]	; (8004a68 <HAL_GPIO_Init+0x33c>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d01f      	beq.n	800495a <HAL_GPIO_Init+0x22e>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a53      	ldr	r2, [pc, #332]	; (8004a6c <HAL_GPIO_Init+0x340>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d019      	beq.n	8004956 <HAL_GPIO_Init+0x22a>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a52      	ldr	r2, [pc, #328]	; (8004a70 <HAL_GPIO_Init+0x344>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d013      	beq.n	8004952 <HAL_GPIO_Init+0x226>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a51      	ldr	r2, [pc, #324]	; (8004a74 <HAL_GPIO_Init+0x348>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d00d      	beq.n	800494e <HAL_GPIO_Init+0x222>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a50      	ldr	r2, [pc, #320]	; (8004a78 <HAL_GPIO_Init+0x34c>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d007      	beq.n	800494a <HAL_GPIO_Init+0x21e>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a4f      	ldr	r2, [pc, #316]	; (8004a7c <HAL_GPIO_Init+0x350>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d101      	bne.n	8004946 <HAL_GPIO_Init+0x21a>
 8004942:	2309      	movs	r3, #9
 8004944:	e012      	b.n	800496c <HAL_GPIO_Init+0x240>
 8004946:	230a      	movs	r3, #10
 8004948:	e010      	b.n	800496c <HAL_GPIO_Init+0x240>
 800494a:	2308      	movs	r3, #8
 800494c:	e00e      	b.n	800496c <HAL_GPIO_Init+0x240>
 800494e:	2307      	movs	r3, #7
 8004950:	e00c      	b.n	800496c <HAL_GPIO_Init+0x240>
 8004952:	2306      	movs	r3, #6
 8004954:	e00a      	b.n	800496c <HAL_GPIO_Init+0x240>
 8004956:	2305      	movs	r3, #5
 8004958:	e008      	b.n	800496c <HAL_GPIO_Init+0x240>
 800495a:	2304      	movs	r3, #4
 800495c:	e006      	b.n	800496c <HAL_GPIO_Init+0x240>
 800495e:	2303      	movs	r3, #3
 8004960:	e004      	b.n	800496c <HAL_GPIO_Init+0x240>
 8004962:	2302      	movs	r3, #2
 8004964:	e002      	b.n	800496c <HAL_GPIO_Init+0x240>
 8004966:	2301      	movs	r3, #1
 8004968:	e000      	b.n	800496c <HAL_GPIO_Init+0x240>
 800496a:	2300      	movs	r3, #0
 800496c:	69fa      	ldr	r2, [r7, #28]
 800496e:	f002 0203 	and.w	r2, r2, #3
 8004972:	0092      	lsls	r2, r2, #2
 8004974:	4093      	lsls	r3, r2
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	4313      	orrs	r3, r2
 800497a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800497c:	4935      	ldr	r1, [pc, #212]	; (8004a54 <HAL_GPIO_Init+0x328>)
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	089b      	lsrs	r3, r3, #2
 8004982:	3302      	adds	r3, #2
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800498a:	4b3d      	ldr	r3, [pc, #244]	; (8004a80 <HAL_GPIO_Init+0x354>)
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	43db      	mvns	r3, r3
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	4013      	ands	r3, r2
 8004998:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80049a6:	69ba      	ldr	r2, [r7, #24]
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80049ae:	4a34      	ldr	r2, [pc, #208]	; (8004a80 <HAL_GPIO_Init+0x354>)
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049b4:	4b32      	ldr	r3, [pc, #200]	; (8004a80 <HAL_GPIO_Init+0x354>)
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	43db      	mvns	r3, r3
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	4013      	ands	r3, r2
 80049c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d003      	beq.n	80049d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80049d0:	69ba      	ldr	r2, [r7, #24]
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049d8:	4a29      	ldr	r2, [pc, #164]	; (8004a80 <HAL_GPIO_Init+0x354>)
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80049de:	4b28      	ldr	r3, [pc, #160]	; (8004a80 <HAL_GPIO_Init+0x354>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	43db      	mvns	r3, r3
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	4013      	ands	r3, r2
 80049ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80049fa:	69ba      	ldr	r2, [r7, #24]
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a02:	4a1f      	ldr	r2, [pc, #124]	; (8004a80 <HAL_GPIO_Init+0x354>)
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a08:	4b1d      	ldr	r3, [pc, #116]	; (8004a80 <HAL_GPIO_Init+0x354>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	43db      	mvns	r3, r3
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	4013      	ands	r3, r2
 8004a16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d003      	beq.n	8004a2c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a2c:	4a14      	ldr	r2, [pc, #80]	; (8004a80 <HAL_GPIO_Init+0x354>)
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	3301      	adds	r3, #1
 8004a36:	61fb      	str	r3, [r7, #28]
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	2b0f      	cmp	r3, #15
 8004a3c:	f67f ae84 	bls.w	8004748 <HAL_GPIO_Init+0x1c>
>>>>>>> flight_hardware
      }
    }
  }
}
<<<<<<< HEAD
 8004ac0:	bf00      	nop
 8004ac2:	bf00      	nop
 8004ac4:	3724      	adds	r7, #36	; 0x24
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	40023800 	.word	0x40023800
 8004ad4:	40013800 	.word	0x40013800
 8004ad8:	40020000 	.word	0x40020000
 8004adc:	40020400 	.word	0x40020400
 8004ae0:	40020800 	.word	0x40020800
 8004ae4:	40020c00 	.word	0x40020c00
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	40021400 	.word	0x40021400
 8004af0:	40021800 	.word	0x40021800
 8004af4:	40021c00 	.word	0x40021c00
 8004af8:	40022000 	.word	0x40022000
 8004afc:	40022400 	.word	0x40022400
 8004b00:	40013c00 	.word	0x40013c00

08004b04 <HAL_GPIO_ReadPin>:
=======
 8004a40:	bf00      	nop
 8004a42:	bf00      	nop
 8004a44:	3724      	adds	r7, #36	; 0x24
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	40023800 	.word	0x40023800
 8004a54:	40013800 	.word	0x40013800
 8004a58:	40020000 	.word	0x40020000
 8004a5c:	40020400 	.word	0x40020400
 8004a60:	40020800 	.word	0x40020800
 8004a64:	40020c00 	.word	0x40020c00
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	40021400 	.word	0x40021400
 8004a70:	40021800 	.word	0x40021800
 8004a74:	40021c00 	.word	0x40021c00
 8004a78:	40022000 	.word	0x40022000
 8004a7c:	40022400 	.word	0x40022400
 8004a80:	40013c00 	.word	0x40013c00

08004a84 <HAL_GPIO_ReadPin>:
>>>>>>> flight_hardware
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	807b      	strh	r3, [r7, #2]
=======
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	807b      	strh	r3, [r7, #2]
>>>>>>> flight_hardware
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
<<<<<<< HEAD
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	691a      	ldr	r2, [r3, #16]
 8004b14:	887b      	ldrh	r3, [r7, #2]
 8004b16:	4013      	ands	r3, r2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d002      	beq.n	8004b22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	73fb      	strb	r3, [r7, #15]
 8004b20:	e001      	b.n	8004b26 <HAL_GPIO_ReadPin+0x22>
=======
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	691a      	ldr	r2, [r3, #16]
 8004a94:	887b      	ldrh	r3, [r7, #2]
 8004a96:	4013      	ands	r3, r2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d002      	beq.n	8004aa2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	73fb      	strb	r3, [r7, #15]
 8004aa0:	e001      	b.n	8004aa6 <HAL_GPIO_ReadPin+0x22>
>>>>>>> flight_hardware
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
<<<<<<< HEAD
 8004b22:	2300      	movs	r3, #0
 8004b24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3714      	adds	r7, #20
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <HAL_GPIO_WritePin>:
=======
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3714      	adds	r7, #20
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <HAL_GPIO_WritePin>:
>>>>>>> flight_hardware
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	807b      	strh	r3, [r7, #2]
 8004b40:	4613      	mov	r3, r2
 8004b42:	707b      	strb	r3, [r7, #1]
=======
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	460b      	mov	r3, r1
 8004abe:	807b      	strh	r3, [r7, #2]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	707b      	strb	r3, [r7, #1]
>>>>>>> flight_hardware
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 8004b44:	787b      	ldrb	r3, [r7, #1]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d003      	beq.n	8004b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b4a:	887a      	ldrh	r2, [r7, #2]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	619a      	str	r2, [r3, #24]
=======
 8004ac4:	787b      	ldrb	r3, [r7, #1]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004aca:	887a      	ldrh	r2, [r7, #2]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	619a      	str	r2, [r3, #24]
>>>>>>> flight_hardware
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
<<<<<<< HEAD
 8004b50:	e003      	b.n	8004b5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b52:	887b      	ldrh	r3, [r7, #2]
 8004b54:	041a      	lsls	r2, r3, #16
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	619a      	str	r2, [r3, #24]
}
 8004b5a:	bf00      	nop
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <HAL_GPIO_TogglePin>:
=======
 8004ad0:	e003      	b.n	8004ada <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004ad2:	887b      	ldrh	r3, [r7, #2]
 8004ad4:	041a      	lsls	r2, r3, #16
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	619a      	str	r2, [r3, #24]
}
 8004ada:	bf00      	nop
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <HAL_GPIO_TogglePin>:
>>>>>>> flight_hardware
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 8004b66:	b480      	push	{r7}
 8004b68:	b085      	sub	sp, #20
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
 8004b6e:	460b      	mov	r3, r1
 8004b70:	807b      	strh	r3, [r7, #2]
=======
 8004ae6:	b480      	push	{r7}
 8004ae8:	b085      	sub	sp, #20
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
 8004aee:	460b      	mov	r3, r1
 8004af0:	807b      	strh	r3, [r7, #2]
>>>>>>> flight_hardware

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
<<<<<<< HEAD
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b78:	887a      	ldrh	r2, [r7, #2]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	041a      	lsls	r2, r3, #16
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	43d9      	mvns	r1, r3
 8004b84:	887b      	ldrh	r3, [r7, #2]
 8004b86:	400b      	ands	r3, r1
 8004b88:	431a      	orrs	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	619a      	str	r2, [r3, #24]
}
 8004b8e:	bf00      	nop
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
	...

08004b9c <HAL_GPIO_EXTI_IRQHandler>:
=======
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004af8:	887a      	ldrh	r2, [r7, #2]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	4013      	ands	r3, r2
 8004afe:	041a      	lsls	r2, r3, #16
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	43d9      	mvns	r1, r3
 8004b04:	887b      	ldrh	r3, [r7, #2]
 8004b06:	400b      	ands	r3, r1
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	619a      	str	r2, [r3, #24]
}
 8004b0e:	bf00      	nop
 8004b10:	3714      	adds	r7, #20
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
	...

08004b1c <HAL_GPIO_EXTI_IRQHandler>:
>>>>>>> flight_hardware
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004ba6:	4b08      	ldr	r3, [pc, #32]	; (8004bc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ba8:	695a      	ldr	r2, [r3, #20]
 8004baa:	88fb      	ldrh	r3, [r7, #6]
 8004bac:	4013      	ands	r3, r2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d006      	beq.n	8004bc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004bb2:	4a05      	ldr	r2, [pc, #20]	; (8004bc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004bb4:	88fb      	ldrh	r3, [r7, #6]
 8004bb6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004bb8:	88fb      	ldrh	r3, [r7, #6]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7fe f8fc 	bl	8002db8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004bc0:	bf00      	nop
 8004bc2:	3708      	adds	r7, #8
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	40013c00 	.word	0x40013c00

08004bcc <HAL_I2C_Init>:
=======
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	4603      	mov	r3, r0
 8004b24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004b26:	4b08      	ldr	r3, [pc, #32]	; (8004b48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b28:	695a      	ldr	r2, [r3, #20]
 8004b2a:	88fb      	ldrh	r3, [r7, #6]
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d006      	beq.n	8004b40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b32:	4a05      	ldr	r2, [pc, #20]	; (8004b48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b34:	88fb      	ldrh	r3, [r7, #6]
 8004b36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b38:	88fb      	ldrh	r3, [r7, #6]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fe f8fc 	bl	8002d38 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b40:	bf00      	nop
 8004b42:	3708      	adds	r7, #8
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	40013c00 	.word	0x40013c00

08004b4c <HAL_I2C_Init>:
>>>>>>> flight_hardware
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
=======
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
>>>>>>> flight_hardware
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
<<<<<<< HEAD
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d101      	bne.n	8004bde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e12b      	b.n	8004e36 <HAL_I2C_Init+0x26a>
=======
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e12b      	b.n	8004db6 <HAL_I2C_Init+0x26a>
>>>>>>> flight_hardware
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
<<<<<<< HEAD
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d106      	bne.n	8004bf8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d106      	bne.n	8004b78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> flight_hardware

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
<<<<<<< HEAD
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f7fd fde8 	bl	80027c8 <HAL_I2C_MspInit>
=======
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7fd fe0a 	bl	800278c <HAL_I2C_MspInit>
>>>>>>> flight_hardware
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
<<<<<<< HEAD
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2224      	movs	r2, #36	; 0x24
 8004bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 0201 	bic.w	r2, r2, #1
 8004c0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c30:	f001 fc9a 	bl	8006568 <HAL_RCC_GetPCLK1Freq>
 8004c34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	4a81      	ldr	r2, [pc, #516]	; (8004e40 <HAL_I2C_Init+0x274>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d807      	bhi.n	8004c50 <HAL_I2C_Init+0x84>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4a80      	ldr	r2, [pc, #512]	; (8004e44 <HAL_I2C_Init+0x278>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	bf94      	ite	ls
 8004c48:	2301      	movls	r3, #1
 8004c4a:	2300      	movhi	r3, #0
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	e006      	b.n	8004c5e <HAL_I2C_Init+0x92>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	4a7d      	ldr	r2, [pc, #500]	; (8004e48 <HAL_I2C_Init+0x27c>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	bf94      	ite	ls
 8004c58:	2301      	movls	r3, #1
 8004c5a:	2300      	movhi	r3, #0
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e0e7      	b.n	8004e36 <HAL_I2C_Init+0x26a>
=======
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2224      	movs	r2, #36	; 0x24
 8004b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 0201 	bic.w	r2, r2, #1
 8004b8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004bb0:	f001 fc9a 	bl	80064e8 <HAL_RCC_GetPCLK1Freq>
 8004bb4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	4a81      	ldr	r2, [pc, #516]	; (8004dc0 <HAL_I2C_Init+0x274>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d807      	bhi.n	8004bd0 <HAL_I2C_Init+0x84>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	4a80      	ldr	r2, [pc, #512]	; (8004dc4 <HAL_I2C_Init+0x278>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	bf94      	ite	ls
 8004bc8:	2301      	movls	r3, #1
 8004bca:	2300      	movhi	r3, #0
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	e006      	b.n	8004bde <HAL_I2C_Init+0x92>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	4a7d      	ldr	r2, [pc, #500]	; (8004dc8 <HAL_I2C_Init+0x27c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	bf94      	ite	ls
 8004bd8:	2301      	movls	r3, #1
 8004bda:	2300      	movhi	r3, #0
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e0e7      	b.n	8004db6 <HAL_I2C_Init+0x26a>
>>>>>>> flight_hardware
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
<<<<<<< HEAD
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	4a78      	ldr	r2, [pc, #480]	; (8004e4c <HAL_I2C_Init+0x280>)
 8004c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6e:	0c9b      	lsrs	r3, r3, #18
 8004c70:	60bb      	str	r3, [r7, #8]
=======
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	4a78      	ldr	r2, [pc, #480]	; (8004dcc <HAL_I2C_Init+0x280>)
 8004bea:	fba2 2303 	umull	r2, r3, r2, r3
 8004bee:	0c9b      	lsrs	r3, r3, #18
 8004bf0:	60bb      	str	r3, [r7, #8]
>>>>>>> flight_hardware

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
<<<<<<< HEAD
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	605a      	str	r2, [r3, #4]
=======
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	605a      	str	r2, [r3, #4]
>>>>>>> flight_hardware

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
<<<<<<< HEAD
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	4a6a      	ldr	r2, [pc, #424]	; (8004e40 <HAL_I2C_Init+0x274>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d802      	bhi.n	8004ca0 <HAL_I2C_Init+0xd4>
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	e009      	b.n	8004cb4 <HAL_I2C_Init+0xe8>
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004ca6:	fb02 f303 	mul.w	r3, r2, r3
 8004caa:	4a69      	ldr	r2, [pc, #420]	; (8004e50 <HAL_I2C_Init+0x284>)
 8004cac:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb0:	099b      	lsrs	r3, r3, #6
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	6812      	ldr	r2, [r2, #0]
 8004cb8:	430b      	orrs	r3, r1
 8004cba:	6213      	str	r3, [r2, #32]
=======
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	6a1b      	ldr	r3, [r3, #32]
 8004c0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	4a6a      	ldr	r2, [pc, #424]	; (8004dc0 <HAL_I2C_Init+0x274>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d802      	bhi.n	8004c20 <HAL_I2C_Init+0xd4>
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	e009      	b.n	8004c34 <HAL_I2C_Init+0xe8>
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c26:	fb02 f303 	mul.w	r3, r2, r3
 8004c2a:	4a69      	ldr	r2, [pc, #420]	; (8004dd0 <HAL_I2C_Init+0x284>)
 8004c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c30:	099b      	lsrs	r3, r3, #6
 8004c32:	3301      	adds	r3, #1
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	6812      	ldr	r2, [r2, #0]
 8004c38:	430b      	orrs	r3, r1
 8004c3a:	6213      	str	r3, [r2, #32]
>>>>>>> flight_hardware

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
<<<<<<< HEAD
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004cc6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	495c      	ldr	r1, [pc, #368]	; (8004e40 <HAL_I2C_Init+0x274>)
 8004cd0:	428b      	cmp	r3, r1
 8004cd2:	d819      	bhi.n	8004d08 <HAL_I2C_Init+0x13c>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	1e59      	subs	r1, r3, #1
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	005b      	lsls	r3, r3, #1
 8004cde:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ce2:	1c59      	adds	r1, r3, #1
 8004ce4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004ce8:	400b      	ands	r3, r1
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00a      	beq.n	8004d04 <HAL_I2C_Init+0x138>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	1e59      	subs	r1, r3, #1
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	005b      	lsls	r3, r3, #1
 8004cf8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d02:	e051      	b.n	8004da8 <HAL_I2C_Init+0x1dc>
 8004d04:	2304      	movs	r3, #4
 8004d06:	e04f      	b.n	8004da8 <HAL_I2C_Init+0x1dc>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d111      	bne.n	8004d34 <HAL_I2C_Init+0x168>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	1e58      	subs	r0, r3, #1
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6859      	ldr	r1, [r3, #4]
 8004d18:	460b      	mov	r3, r1
 8004d1a:	005b      	lsls	r3, r3, #1
 8004d1c:	440b      	add	r3, r1
 8004d1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d22:	3301      	adds	r3, #1
 8004d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	bf0c      	ite	eq
 8004d2c:	2301      	moveq	r3, #1
 8004d2e:	2300      	movne	r3, #0
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	e012      	b.n	8004d5a <HAL_I2C_Init+0x18e>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	1e58      	subs	r0, r3, #1
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6859      	ldr	r1, [r3, #4]
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	440b      	add	r3, r1
 8004d42:	0099      	lsls	r1, r3, #2
 8004d44:	440b      	add	r3, r1
 8004d46:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	bf0c      	ite	eq
 8004d54:	2301      	moveq	r3, #1
 8004d56:	2300      	movne	r3, #0
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <HAL_I2C_Init+0x196>
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e022      	b.n	8004da8 <HAL_I2C_Init+0x1dc>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10e      	bne.n	8004d88 <HAL_I2C_Init+0x1bc>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	1e58      	subs	r0, r3, #1
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6859      	ldr	r1, [r3, #4]
 8004d72:	460b      	mov	r3, r1
 8004d74:	005b      	lsls	r3, r3, #1
 8004d76:	440b      	add	r3, r1
 8004d78:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d86:	e00f      	b.n	8004da8 <HAL_I2C_Init+0x1dc>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	1e58      	subs	r0, r3, #1
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6859      	ldr	r1, [r3, #4]
 8004d90:	460b      	mov	r3, r1
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	440b      	add	r3, r1
 8004d96:	0099      	lsls	r1, r3, #2
 8004d98:	440b      	add	r3, r1
 8004d9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d9e:	3301      	adds	r3, #1
 8004da0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004da4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004da8:	6879      	ldr	r1, [r7, #4]
 8004daa:	6809      	ldr	r1, [r1, #0]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	61cb      	str	r3, [r1, #28]
=======
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	69db      	ldr	r3, [r3, #28]
 8004c42:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004c46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	495c      	ldr	r1, [pc, #368]	; (8004dc0 <HAL_I2C_Init+0x274>)
 8004c50:	428b      	cmp	r3, r1
 8004c52:	d819      	bhi.n	8004c88 <HAL_I2C_Init+0x13c>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	1e59      	subs	r1, r3, #1
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	005b      	lsls	r3, r3, #1
 8004c5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c62:	1c59      	adds	r1, r3, #1
 8004c64:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c68:	400b      	ands	r3, r1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00a      	beq.n	8004c84 <HAL_I2C_Init+0x138>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	1e59      	subs	r1, r3, #1
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	005b      	lsls	r3, r3, #1
 8004c78:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c82:	e051      	b.n	8004d28 <HAL_I2C_Init+0x1dc>
 8004c84:	2304      	movs	r3, #4
 8004c86:	e04f      	b.n	8004d28 <HAL_I2C_Init+0x1dc>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d111      	bne.n	8004cb4 <HAL_I2C_Init+0x168>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	1e58      	subs	r0, r3, #1
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6859      	ldr	r1, [r3, #4]
 8004c98:	460b      	mov	r3, r1
 8004c9a:	005b      	lsls	r3, r3, #1
 8004c9c:	440b      	add	r3, r1
 8004c9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	bf0c      	ite	eq
 8004cac:	2301      	moveq	r3, #1
 8004cae:	2300      	movne	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	e012      	b.n	8004cda <HAL_I2C_Init+0x18e>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	1e58      	subs	r0, r3, #1
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6859      	ldr	r1, [r3, #4]
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	440b      	add	r3, r1
 8004cc2:	0099      	lsls	r1, r3, #2
 8004cc4:	440b      	add	r3, r1
 8004cc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cca:	3301      	adds	r3, #1
 8004ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	bf0c      	ite	eq
 8004cd4:	2301      	moveq	r3, #1
 8004cd6:	2300      	movne	r3, #0
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <HAL_I2C_Init+0x196>
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e022      	b.n	8004d28 <HAL_I2C_Init+0x1dc>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10e      	bne.n	8004d08 <HAL_I2C_Init+0x1bc>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	1e58      	subs	r0, r3, #1
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6859      	ldr	r1, [r3, #4]
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	005b      	lsls	r3, r3, #1
 8004cf6:	440b      	add	r3, r1
 8004cf8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d06:	e00f      	b.n	8004d28 <HAL_I2C_Init+0x1dc>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	1e58      	subs	r0, r3, #1
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6859      	ldr	r1, [r3, #4]
 8004d10:	460b      	mov	r3, r1
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	440b      	add	r3, r1
 8004d16:	0099      	lsls	r1, r3, #2
 8004d18:	440b      	add	r3, r1
 8004d1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d1e:	3301      	adds	r3, #1
 8004d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d28:	6879      	ldr	r1, [r7, #4]
 8004d2a:	6809      	ldr	r1, [r1, #0]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	61cb      	str	r3, [r1, #28]
>>>>>>> flight_hardware

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
<<<<<<< HEAD
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	69da      	ldr	r2, [r3, #28]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	431a      	orrs	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	601a      	str	r2, [r3, #0]
=======
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	69da      	ldr	r2, [r3, #28]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	431a      	orrs	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	601a      	str	r2, [r3, #0]
>>>>>>> flight_hardware

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
<<<<<<< HEAD
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004dd6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	6911      	ldr	r1, [r2, #16]
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	68d2      	ldr	r2, [r2, #12]
 8004de2:	4311      	orrs	r1, r2
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	6812      	ldr	r2, [r2, #0]
 8004de8:	430b      	orrs	r3, r1
 8004dea:	6093      	str	r3, [r2, #8]
=======
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	6911      	ldr	r1, [r2, #16]
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	68d2      	ldr	r2, [r2, #12]
 8004d62:	4311      	orrs	r1, r2
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	6812      	ldr	r2, [r2, #0]
 8004d68:	430b      	orrs	r3, r1
 8004d6a:	6093      	str	r3, [r2, #8]
>>>>>>> flight_hardware

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
<<<<<<< HEAD
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	695a      	ldr	r2, [r3, #20]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	430a      	orrs	r2, r1
 8004e06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f042 0201 	orr.w	r2, r2, #1
 8004e16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2220      	movs	r2, #32
 8004e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	000186a0 	.word	0x000186a0
 8004e44:	001e847f 	.word	0x001e847f
 8004e48:	003d08ff 	.word	0x003d08ff
 8004e4c:	431bde83 	.word	0x431bde83
 8004e50:	10624dd3 	.word	0x10624dd3

08004e54 <HAL_I2C_Master_Transmit>:
=======
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	695a      	ldr	r2, [r3, #20]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f042 0201 	orr.w	r2, r2, #1
 8004d96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2220      	movs	r2, #32
 8004da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	000186a0 	.word	0x000186a0
 8004dc4:	001e847f 	.word	0x001e847f
 8004dc8:	003d08ff 	.word	0x003d08ff
 8004dcc:	431bde83 	.word	0x431bde83
 8004dd0:	10624dd3 	.word	0x10624dd3

08004dd4 <HAL_I2C_Master_Transmit>:
>>>>>>> flight_hardware
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b088      	sub	sp, #32
 8004e58:	af02      	add	r7, sp, #8
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	607a      	str	r2, [r7, #4]
 8004e5e:	461a      	mov	r2, r3
 8004e60:	460b      	mov	r3, r1
 8004e62:	817b      	strh	r3, [r7, #10]
 8004e64:	4613      	mov	r3, r2
 8004e66:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e68:	f7fe f8f4 	bl	8003054 <HAL_GetTick>
 8004e6c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b20      	cmp	r3, #32
 8004e78:	f040 80e0 	bne.w	800503c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	9300      	str	r3, [sp, #0]
 8004e80:	2319      	movs	r3, #25
 8004e82:	2201      	movs	r2, #1
 8004e84:	4970      	ldr	r1, [pc, #448]	; (8005048 <HAL_I2C_Master_Transmit+0x1f4>)
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f000 fc64 	bl	8005754 <I2C_WaitOnFlagUntilTimeout>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004e92:	2302      	movs	r3, #2
 8004e94:	e0d3      	b.n	800503e <HAL_I2C_Master_Transmit+0x1ea>
=======
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b088      	sub	sp, #32
 8004dd8:	af02      	add	r7, sp, #8
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	607a      	str	r2, [r7, #4]
 8004dde:	461a      	mov	r2, r3
 8004de0:	460b      	mov	r3, r1
 8004de2:	817b      	strh	r3, [r7, #10]
 8004de4:	4613      	mov	r3, r2
 8004de6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004de8:	f7fe f8f4 	bl	8002fd4 <HAL_GetTick>
 8004dec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b20      	cmp	r3, #32
 8004df8:	f040 80e0 	bne.w	8004fbc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	9300      	str	r3, [sp, #0]
 8004e00:	2319      	movs	r3, #25
 8004e02:	2201      	movs	r2, #1
 8004e04:	4970      	ldr	r1, [pc, #448]	; (8004fc8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	f000 fc64 	bl	80056d4 <I2C_WaitOnFlagUntilTimeout>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004e12:	2302      	movs	r3, #2
 8004e14:	e0d3      	b.n	8004fbe <HAL_I2C_Master_Transmit+0x1ea>
>>>>>>> flight_hardware
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
<<<<<<< HEAD
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d101      	bne.n	8004ea4 <HAL_I2C_Master_Transmit+0x50>
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	e0cc      	b.n	800503e <HAL_I2C_Master_Transmit+0x1ea>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d007      	beq.n	8004eca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f042 0201 	orr.w	r2, r2, #1
 8004ec8:	601a      	str	r2, [r3, #0]
=======
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d101      	bne.n	8004e24 <HAL_I2C_Master_Transmit+0x50>
 8004e20:	2302      	movs	r3, #2
 8004e22:	e0cc      	b.n	8004fbe <HAL_I2C_Master_Transmit+0x1ea>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d007      	beq.n	8004e4a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f042 0201 	orr.w	r2, r2, #1
 8004e48:	601a      	str	r2, [r3, #0]
>>>>>>> flight_hardware
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
<<<<<<< HEAD
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ed8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2221      	movs	r2, #33	; 0x21
 8004ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2210      	movs	r2, #16
 8004ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	893a      	ldrh	r2, [r7, #8]
 8004efa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	4a50      	ldr	r2, [pc, #320]	; (800504c <HAL_I2C_Master_Transmit+0x1f8>)
 8004f0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004f0c:	8979      	ldrh	r1, [r7, #10]
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	6a3a      	ldr	r2, [r7, #32]
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f000 face 	bl	80054b4 <I2C_MasterRequestWrite>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e08d      	b.n	800503e <HAL_I2C_Master_Transmit+0x1ea>
=======
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2221      	movs	r2, #33	; 0x21
 8004e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2210      	movs	r2, #16
 8004e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	893a      	ldrh	r2, [r7, #8]
 8004e7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	4a50      	ldr	r2, [pc, #320]	; (8004fcc <HAL_I2C_Master_Transmit+0x1f8>)
 8004e8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004e8c:	8979      	ldrh	r1, [r7, #10]
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	6a3a      	ldr	r2, [r7, #32]
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f000 face 	bl	8005434 <I2C_MasterRequestWrite>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e08d      	b.n	8004fbe <HAL_I2C_Master_Transmit+0x1ea>
>>>>>>> flight_hardware
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
<<<<<<< HEAD
 8004f22:	2300      	movs	r3, #0
 8004f24:	613b      	str	r3, [r7, #16]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	695b      	ldr	r3, [r3, #20]
 8004f2c:	613b      	str	r3, [r7, #16]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	613b      	str	r3, [r7, #16]
 8004f36:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004f38:	e066      	b.n	8005008 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	6a39      	ldr	r1, [r7, #32]
 8004f3e:	68f8      	ldr	r0, [r7, #12]
 8004f40:	f000 fd22 	bl	8005988 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00d      	beq.n	8004f66 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4e:	2b04      	cmp	r3, #4
 8004f50:	d107      	bne.n	8004f62 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e06b      	b.n	800503e <HAL_I2C_Master_Transmit+0x1ea>
=======
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	613b      	str	r3, [r7, #16]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	613b      	str	r3, [r7, #16]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	613b      	str	r3, [r7, #16]
 8004eb6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004eb8:	e066      	b.n	8004f88 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	6a39      	ldr	r1, [r7, #32]
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f000 fd22 	bl	8005908 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00d      	beq.n	8004ee6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ece:	2b04      	cmp	r3, #4
 8004ed0:	d107      	bne.n	8004ee2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ee0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e06b      	b.n	8004fbe <HAL_I2C_Master_Transmit+0x1ea>
>>>>>>> flight_hardware
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
<<<<<<< HEAD
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	781a      	ldrb	r2, [r3, #0]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f76:	1c5a      	adds	r2, r3, #1
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	3b01      	subs	r3, #1
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	f003 0304 	and.w	r3, r3, #4
 8004fa0:	2b04      	cmp	r3, #4
 8004fa2:	d11b      	bne.n	8004fdc <HAL_I2C_Master_Transmit+0x188>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d017      	beq.n	8004fdc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb0:	781a      	ldrb	r2, [r3, #0]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbc:	1c5a      	adds	r2, r3, #1
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	851a      	strh	r2, [r3, #40]	; 0x28
=======
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eea:	781a      	ldrb	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef6:	1c5a      	adds	r2, r3, #1
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	3b01      	subs	r3, #1
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	695b      	ldr	r3, [r3, #20]
 8004f1c:	f003 0304 	and.w	r3, r3, #4
 8004f20:	2b04      	cmp	r3, #4
 8004f22:	d11b      	bne.n	8004f5c <HAL_I2C_Master_Transmit+0x188>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d017      	beq.n	8004f5c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f30:	781a      	ldrb	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3c:	1c5a      	adds	r2, r3, #1
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f54:	3b01      	subs	r3, #1
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	851a      	strh	r2, [r3, #40]	; 0x28
>>>>>>> flight_hardware
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	6a39      	ldr	r1, [r7, #32]
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f000 fd19 	bl	8005a18 <I2C_WaitOnBTFFlagUntilTimeout>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00d      	beq.n	8005008 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff0:	2b04      	cmp	r3, #4
 8004ff2:	d107      	bne.n	8005004 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005002:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e01a      	b.n	800503e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800500c:	2b00      	cmp	r3, #0
 800500e:	d194      	bne.n	8004f3a <HAL_I2C_Master_Transmit+0xe6>
=======
 8004f5c:	697a      	ldr	r2, [r7, #20]
 8004f5e:	6a39      	ldr	r1, [r7, #32]
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f000 fd19 	bl	8005998 <I2C_WaitOnBTFFlagUntilTimeout>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00d      	beq.n	8004f88 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f70:	2b04      	cmp	r3, #4
 8004f72:	d107      	bne.n	8004f84 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f82:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e01a      	b.n	8004fbe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d194      	bne.n	8004eba <HAL_I2C_Master_Transmit+0xe6>
>>>>>>> flight_hardware
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
<<<<<<< HEAD
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800501e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2220      	movs	r2, #32
 8005024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005038:	2300      	movs	r3, #0
 800503a:	e000      	b.n	800503e <HAL_I2C_Master_Transmit+0x1ea>
=======
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	e000      	b.n	8004fbe <HAL_I2C_Master_Transmit+0x1ea>
>>>>>>> flight_hardware
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 800503c:	2302      	movs	r3, #2
  }
}
 800503e:	4618      	mov	r0, r3
 8005040:	3718      	adds	r7, #24
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	00100002 	.word	0x00100002
 800504c:	ffff0000 	.word	0xffff0000

08005050 <HAL_I2C_Master_Receive>:
=======
 8004fbc:	2302      	movs	r3, #2
  }
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3718      	adds	r7, #24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	00100002 	.word	0x00100002
 8004fcc:	ffff0000 	.word	0xffff0000

08004fd0 <HAL_I2C_Master_Receive>:
>>>>>>> flight_hardware
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 8005050:	b580      	push	{r7, lr}
 8005052:	b08c      	sub	sp, #48	; 0x30
 8005054:	af02      	add	r7, sp, #8
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	607a      	str	r2, [r7, #4]
 800505a:	461a      	mov	r2, r3
 800505c:	460b      	mov	r3, r1
 800505e:	817b      	strh	r3, [r7, #10]
 8005060:	4613      	mov	r3, r2
 8005062:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005064:	f7fd fff6 	bl	8003054 <HAL_GetTick>
 8005068:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b20      	cmp	r3, #32
 8005074:	f040 8217 	bne.w	80054a6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507a:	9300      	str	r3, [sp, #0]
 800507c:	2319      	movs	r3, #25
 800507e:	2201      	movs	r2, #1
 8005080:	497c      	ldr	r1, [pc, #496]	; (8005274 <HAL_I2C_Master_Receive+0x224>)
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f000 fb66 	bl	8005754 <I2C_WaitOnFlagUntilTimeout>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d001      	beq.n	8005092 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800508e:	2302      	movs	r3, #2
 8005090:	e20a      	b.n	80054a8 <HAL_I2C_Master_Receive+0x458>
=======
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b08c      	sub	sp, #48	; 0x30
 8004fd4:	af02      	add	r7, sp, #8
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	607a      	str	r2, [r7, #4]
 8004fda:	461a      	mov	r2, r3
 8004fdc:	460b      	mov	r3, r1
 8004fde:	817b      	strh	r3, [r7, #10]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004fe4:	f7fd fff6 	bl	8002fd4 <HAL_GetTick>
 8004fe8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b20      	cmp	r3, #32
 8004ff4:	f040 8217 	bne.w	8005426 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	2319      	movs	r3, #25
 8004ffe:	2201      	movs	r2, #1
 8005000:	497c      	ldr	r1, [pc, #496]	; (80051f4 <HAL_I2C_Master_Receive+0x224>)
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f000 fb66 	bl	80056d4 <I2C_WaitOnFlagUntilTimeout>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d001      	beq.n	8005012 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800500e:	2302      	movs	r3, #2
 8005010:	e20a      	b.n	8005428 <HAL_I2C_Master_Receive+0x458>
>>>>>>> flight_hardware
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
<<<<<<< HEAD
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005098:	2b01      	cmp	r3, #1
 800509a:	d101      	bne.n	80050a0 <HAL_I2C_Master_Receive+0x50>
 800509c:	2302      	movs	r3, #2
 800509e:	e203      	b.n	80054a8 <HAL_I2C_Master_Receive+0x458>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d007      	beq.n	80050c6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f042 0201 	orr.w	r2, r2, #1
 80050c4:	601a      	str	r2, [r3, #0]
=======
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005018:	2b01      	cmp	r3, #1
 800501a:	d101      	bne.n	8005020 <HAL_I2C_Master_Receive+0x50>
 800501c:	2302      	movs	r3, #2
 800501e:	e203      	b.n	8005428 <HAL_I2C_Master_Receive+0x458>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b01      	cmp	r3, #1
 8005034:	d007      	beq.n	8005046 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f042 0201 	orr.w	r2, r2, #1
 8005044:	601a      	str	r2, [r3, #0]
>>>>>>> flight_hardware
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
<<<<<<< HEAD
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2222      	movs	r2, #34	; 0x22
 80050da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2210      	movs	r2, #16
 80050e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	893a      	ldrh	r2, [r7, #8]
 80050f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	4a5c      	ldr	r2, [pc, #368]	; (8005278 <HAL_I2C_Master_Receive+0x228>)
 8005106:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005108:	8979      	ldrh	r1, [r7, #10]
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f000 fa52 	bl	80055b8 <I2C_MasterRequestRead>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e1c4      	b.n	80054a8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005122:	2b00      	cmp	r3, #0
 8005124:	d113      	bne.n	800514e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005126:	2300      	movs	r3, #0
 8005128:	623b      	str	r3, [r7, #32]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	695b      	ldr	r3, [r3, #20]
 8005130:	623b      	str	r3, [r7, #32]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	623b      	str	r3, [r7, #32]
 800513a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800514a:	601a      	str	r2, [r3, #0]
 800514c:	e198      	b.n	8005480 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005152:	2b01      	cmp	r3, #1
 8005154:	d11b      	bne.n	800518e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005164:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005166:	2300      	movs	r3, #0
 8005168:	61fb      	str	r3, [r7, #28]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	61fb      	str	r3, [r7, #28]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	61fb      	str	r3, [r7, #28]
 800517a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800518a:	601a      	str	r2, [r3, #0]
 800518c:	e178      	b.n	8005480 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005192:	2b02      	cmp	r3, #2
 8005194:	d11b      	bne.n	80051ce <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051b6:	2300      	movs	r3, #0
 80051b8:	61bb      	str	r3, [r7, #24]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	695b      	ldr	r3, [r3, #20]
 80051c0:	61bb      	str	r3, [r7, #24]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	61bb      	str	r3, [r7, #24]
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	e158      	b.n	8005480 <HAL_I2C_Master_Receive+0x430>
=======
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005054:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2222      	movs	r2, #34	; 0x22
 800505a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2210      	movs	r2, #16
 8005062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	893a      	ldrh	r2, [r7, #8]
 8005076:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800507c:	b29a      	uxth	r2, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	4a5c      	ldr	r2, [pc, #368]	; (80051f8 <HAL_I2C_Master_Receive+0x228>)
 8005086:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005088:	8979      	ldrh	r1, [r7, #10]
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f000 fa52 	bl	8005538 <I2C_MasterRequestRead>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d001      	beq.n	800509e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e1c4      	b.n	8005428 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d113      	bne.n	80050ce <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050a6:	2300      	movs	r3, #0
 80050a8:	623b      	str	r3, [r7, #32]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	695b      	ldr	r3, [r3, #20]
 80050b0:	623b      	str	r3, [r7, #32]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	623b      	str	r3, [r7, #32]
 80050ba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ca:	601a      	str	r2, [r3, #0]
 80050cc:	e198      	b.n	8005400 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d11b      	bne.n	800510e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050e6:	2300      	movs	r3, #0
 80050e8:	61fb      	str	r3, [r7, #28]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	695b      	ldr	r3, [r3, #20]
 80050f0:	61fb      	str	r3, [r7, #28]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	61fb      	str	r3, [r7, #28]
 80050fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	e178      	b.n	8005400 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005112:	2b02      	cmp	r3, #2
 8005114:	d11b      	bne.n	800514e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005124:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005134:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005136:	2300      	movs	r3, #0
 8005138:	61bb      	str	r3, [r7, #24]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	61bb      	str	r3, [r7, #24]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	61bb      	str	r3, [r7, #24]
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	e158      	b.n	8005400 <HAL_I2C_Master_Receive+0x430>
>>>>>>> flight_hardware
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
<<<<<<< HEAD
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051de:	2300      	movs	r3, #0
 80051e0:	617b      	str	r3, [r7, #20]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	695b      	ldr	r3, [r3, #20]
 80051e8:	617b      	str	r3, [r7, #20]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	617b      	str	r3, [r7, #20]
 80051f2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80051f4:	e144      	b.n	8005480 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051fa:	2b03      	cmp	r3, #3
 80051fc:	f200 80f1 	bhi.w	80053e2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005204:	2b01      	cmp	r3, #1
 8005206:	d123      	bne.n	8005250 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800520a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f000 fc4b 	bl	8005aa8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d001      	beq.n	800521c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e145      	b.n	80054a8 <HAL_I2C_Master_Receive+0x458>
=======
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800515c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800515e:	2300      	movs	r3, #0
 8005160:	617b      	str	r3, [r7, #20]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	617b      	str	r3, [r7, #20]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	617b      	str	r3, [r7, #20]
 8005172:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005174:	e144      	b.n	8005400 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800517a:	2b03      	cmp	r3, #3
 800517c:	f200 80f1 	bhi.w	8005362 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005184:	2b01      	cmp	r3, #1
 8005186:	d123      	bne.n	80051d0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800518a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 fc4b 	bl	8005a28 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d001      	beq.n	800519c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e145      	b.n	8005428 <HAL_I2C_Master_Receive+0x458>
>>>>>>> flight_hardware
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
<<<<<<< HEAD
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	691a      	ldr	r2, [r3, #16]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005226:	b2d2      	uxtb	r2, r2
 8005228:	701a      	strb	r2, [r3, #0]
=======
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	691a      	ldr	r2, [r3, #16]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a6:	b2d2      	uxtb	r2, r2
 80051a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ae:	1c5a      	adds	r2, r3, #1
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b8:	3b01      	subs	r3, #1
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	3b01      	subs	r3, #1
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051ce:	e117      	b.n	8005400 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d14e      	bne.n	8005276 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051da:	9300      	str	r3, [sp, #0]
 80051dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051de:	2200      	movs	r2, #0
 80051e0:	4906      	ldr	r1, [pc, #24]	; (80051fc <HAL_I2C_Master_Receive+0x22c>)
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f000 fa76 	bl	80056d4 <I2C_WaitOnFlagUntilTimeout>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d008      	beq.n	8005200 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e11a      	b.n	8005428 <HAL_I2C_Master_Receive+0x458>
 80051f2:	bf00      	nop
 80051f4:	00100002 	.word	0x00100002
 80051f8:	ffff0000 	.word	0xffff0000
 80051fc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800520e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	691a      	ldr	r2, [r3, #16]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521a:	b2d2      	uxtb	r2, r2
 800521c:	701a      	strb	r2, [r3, #0]
>>>>>>> flight_hardware

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005222:	1c5a      	adds	r2, r3, #1
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800522c:	3b01      	subs	r3, #1
 800522e:	b29a      	uxth	r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
<<<<<<< HEAD
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005244:	b29b      	uxth	r3, r3
 8005246:	3b01      	subs	r3, #1
 8005248:	b29a      	uxth	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800524e:	e117      	b.n	8005480 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005254:	2b02      	cmp	r3, #2
 8005256:	d14e      	bne.n	80052f6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	9300      	str	r3, [sp, #0]
 800525c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525e:	2200      	movs	r2, #0
 8005260:	4906      	ldr	r1, [pc, #24]	; (800527c <HAL_I2C_Master_Receive+0x22c>)
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f000 fa76 	bl	8005754 <I2C_WaitOnFlagUntilTimeout>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d008      	beq.n	8005280 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e11a      	b.n	80054a8 <HAL_I2C_Master_Receive+0x458>
 8005272:	bf00      	nop
 8005274:	00100002 	.word	0x00100002
 8005278:	ffff0000 	.word	0xffff0000
 800527c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800528e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	691a      	ldr	r2, [r3, #16]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529a:	b2d2      	uxtb	r2, r2
 800529c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a2:	1c5a      	adds	r2, r3, #1
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ac:	3b01      	subs	r3, #1
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	3b01      	subs	r3, #1
 80052bc:	b29a      	uxth	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	691a      	ldr	r2, [r3, #16]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052cc:	b2d2      	uxtb	r2, r2
 80052ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d4:	1c5a      	adds	r2, r3, #1
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052de:	3b01      	subs	r3, #1
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	3b01      	subs	r3, #1
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052f4:	e0c4      	b.n	8005480 <HAL_I2C_Master_Receive+0x430>
=======
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005238:	b29b      	uxth	r3, r3
 800523a:	3b01      	subs	r3, #1
 800523c:	b29a      	uxth	r2, r3
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	691a      	ldr	r2, [r3, #16]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524c:	b2d2      	uxtb	r2, r2
 800524e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005254:	1c5a      	adds	r2, r3, #1
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800525e:	3b01      	subs	r3, #1
 8005260:	b29a      	uxth	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800526a:	b29b      	uxth	r3, r3
 800526c:	3b01      	subs	r3, #1
 800526e:	b29a      	uxth	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005274:	e0c4      	b.n	8005400 <HAL_I2C_Master_Receive+0x430>
>>>>>>> flight_hardware
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fc:	2200      	movs	r2, #0
 80052fe:	496c      	ldr	r1, [pc, #432]	; (80054b0 <HAL_I2C_Master_Receive+0x460>)
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f000 fa27 	bl	8005754 <I2C_WaitOnFlagUntilTimeout>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d001      	beq.n	8005310 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e0cb      	b.n	80054a8 <HAL_I2C_Master_Receive+0x458>
=======
 8005276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005278:	9300      	str	r3, [sp, #0]
 800527a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527c:	2200      	movs	r2, #0
 800527e:	496c      	ldr	r1, [pc, #432]	; (8005430 <HAL_I2C_Master_Receive+0x460>)
 8005280:	68f8      	ldr	r0, [r7, #12]
 8005282:	f000 fa27 	bl	80056d4 <I2C_WaitOnFlagUntilTimeout>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d001      	beq.n	8005290 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e0cb      	b.n	8005428 <HAL_I2C_Master_Receive+0x458>
>>>>>>> flight_hardware
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
<<<<<<< HEAD
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800531e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	691a      	ldr	r2, [r3, #16]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532a:	b2d2      	uxtb	r2, r2
 800532c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005332:	1c5a      	adds	r2, r3, #1
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800533c:	3b01      	subs	r3, #1
 800533e:	b29a      	uxth	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005348:	b29b      	uxth	r3, r3
 800534a:	3b01      	subs	r3, #1
 800534c:	b29a      	uxth	r2, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005358:	2200      	movs	r2, #0
 800535a:	4955      	ldr	r1, [pc, #340]	; (80054b0 <HAL_I2C_Master_Receive+0x460>)
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f000 f9f9 	bl	8005754 <I2C_WaitOnFlagUntilTimeout>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d001      	beq.n	800536c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e09d      	b.n	80054a8 <HAL_I2C_Master_Receive+0x458>
=======
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800529e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	691a      	ldr	r2, [r3, #16]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052aa:	b2d2      	uxtb	r2, r2
 80052ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b2:	1c5a      	adds	r2, r3, #1
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052bc:	3b01      	subs	r3, #1
 80052be:	b29a      	uxth	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	3b01      	subs	r3, #1
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d8:	2200      	movs	r2, #0
 80052da:	4955      	ldr	r1, [pc, #340]	; (8005430 <HAL_I2C_Master_Receive+0x460>)
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f000 f9f9 	bl	80056d4 <I2C_WaitOnFlagUntilTimeout>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d001      	beq.n	80052ec <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e09d      	b.n	8005428 <HAL_I2C_Master_Receive+0x458>
>>>>>>> flight_hardware
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
<<<<<<< HEAD
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800537a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	691a      	ldr	r2, [r3, #16]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005386:	b2d2      	uxtb	r2, r2
 8005388:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538e:	1c5a      	adds	r2, r3, #1
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005398:	3b01      	subs	r3, #1
 800539a:	b29a      	uxth	r2, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	3b01      	subs	r3, #1
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	691a      	ldr	r2, [r3, #16]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b8:	b2d2      	uxtb	r2, r2
 80053ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c0:	1c5a      	adds	r2, r3, #1
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ca:	3b01      	subs	r3, #1
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	3b01      	subs	r3, #1
 80053da:	b29a      	uxth	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80053e0:	e04e      	b.n	8005480 <HAL_I2C_Master_Receive+0x430>
=======
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	691a      	ldr	r2, [r3, #16]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005306:	b2d2      	uxtb	r2, r2
 8005308:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530e:	1c5a      	adds	r2, r3, #1
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005318:	3b01      	subs	r3, #1
 800531a:	b29a      	uxth	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005324:	b29b      	uxth	r3, r3
 8005326:	3b01      	subs	r3, #1
 8005328:	b29a      	uxth	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	691a      	ldr	r2, [r3, #16]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005338:	b2d2      	uxtb	r2, r2
 800533a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005340:	1c5a      	adds	r2, r3, #1
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800534a:	3b01      	subs	r3, #1
 800534c:	b29a      	uxth	r2, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005356:	b29b      	uxth	r3, r3
 8005358:	3b01      	subs	r3, #1
 800535a:	b29a      	uxth	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005360:	e04e      	b.n	8005400 <HAL_I2C_Master_Receive+0x430>
>>>>>>> flight_hardware
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 80053e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f000 fb5e 	bl	8005aa8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d001      	beq.n	80053f6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e058      	b.n	80054a8 <HAL_I2C_Master_Receive+0x458>
=======
 8005362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005364:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f000 fb5e 	bl	8005a28 <I2C_WaitOnRXNEFlagUntilTimeout>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e058      	b.n	8005428 <HAL_I2C_Master_Receive+0x458>
>>>>>>> flight_hardware
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
<<<<<<< HEAD
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	691a      	ldr	r2, [r3, #16]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005400:	b2d2      	uxtb	r2, r2
 8005402:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005408:	1c5a      	adds	r2, r3, #1
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005412:	3b01      	subs	r3, #1
 8005414:	b29a      	uxth	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800541e:	b29b      	uxth	r3, r3
 8005420:	3b01      	subs	r3, #1
 8005422:	b29a      	uxth	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	f003 0304 	and.w	r3, r3, #4
 8005432:	2b04      	cmp	r3, #4
 8005434:	d124      	bne.n	8005480 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800543a:	2b03      	cmp	r3, #3
 800543c:	d107      	bne.n	800544e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800544c:	601a      	str	r2, [r3, #0]
=======
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	691a      	ldr	r2, [r3, #16]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005380:	b2d2      	uxtb	r2, r2
 8005382:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	1c5a      	adds	r2, r3, #1
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005392:	3b01      	subs	r3, #1
 8005394:	b29a      	uxth	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800539e:	b29b      	uxth	r3, r3
 80053a0:	3b01      	subs	r3, #1
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	f003 0304 	and.w	r3, r3, #4
 80053b2:	2b04      	cmp	r3, #4
 80053b4:	d124      	bne.n	8005400 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ba:	2b03      	cmp	r3, #3
 80053bc:	d107      	bne.n	80053ce <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053cc:	601a      	str	r2, [r3, #0]
>>>>>>> flight_hardware
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
<<<<<<< HEAD
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	691a      	ldr	r2, [r3, #16]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005458:	b2d2      	uxtb	r2, r2
 800545a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005460:	1c5a      	adds	r2, r3, #1
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800546a:	3b01      	subs	r3, #1
 800546c:	b29a      	uxth	r2, r3
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005476:	b29b      	uxth	r3, r3
 8005478:	3b01      	subs	r3, #1
 800547a:	b29a      	uxth	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005484:	2b00      	cmp	r3, #0
 8005486:	f47f aeb6 	bne.w	80051f6 <HAL_I2C_Master_Receive+0x1a6>
=======
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	691a      	ldr	r2, [r3, #16]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d8:	b2d2      	uxtb	r2, r2
 80053da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e0:	1c5a      	adds	r2, r3, #1
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ea:	3b01      	subs	r3, #1
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	3b01      	subs	r3, #1
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005404:	2b00      	cmp	r3, #0
 8005406:	f47f aeb6 	bne.w	8005176 <HAL_I2C_Master_Receive+0x1a6>
>>>>>>> flight_hardware
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
<<<<<<< HEAD
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2220      	movs	r2, #32
 800548e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80054a2:	2300      	movs	r3, #0
 80054a4:	e000      	b.n	80054a8 <HAL_I2C_Master_Receive+0x458>
=======
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2220      	movs	r2, #32
 800540e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005422:	2300      	movs	r3, #0
 8005424:	e000      	b.n	8005428 <HAL_I2C_Master_Receive+0x458>
>>>>>>> flight_hardware
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 80054a6:	2302      	movs	r3, #2
  }
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3728      	adds	r7, #40	; 0x28
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	00010004 	.word	0x00010004

080054b4 <I2C_MasterRequestWrite>:
=======
 8005426:	2302      	movs	r3, #2
  }
}
 8005428:	4618      	mov	r0, r3
 800542a:	3728      	adds	r7, #40	; 0x28
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	00010004 	.word	0x00010004

08005434 <I2C_MasterRequestWrite>:
>>>>>>> flight_hardware
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b088      	sub	sp, #32
 80054b8:	af02      	add	r7, sp, #8
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	607a      	str	r2, [r7, #4]
 80054be:	603b      	str	r3, [r7, #0]
 80054c0:	460b      	mov	r3, r1
 80054c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	2b08      	cmp	r3, #8
 80054ce:	d006      	beq.n	80054de <I2C_MasterRequestWrite+0x2a>
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d003      	beq.n	80054de <I2C_MasterRequestWrite+0x2a>
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054dc:	d108      	bne.n	80054f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054ec:	601a      	str	r2, [r3, #0]
 80054ee:	e00b      	b.n	8005508 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f4:	2b12      	cmp	r3, #18
 80054f6:	d107      	bne.n	8005508 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005506:	601a      	str	r2, [r3, #0]
=======
 8005434:	b580      	push	{r7, lr}
 8005436:	b088      	sub	sp, #32
 8005438:	af02      	add	r7, sp, #8
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	607a      	str	r2, [r7, #4]
 800543e:	603b      	str	r3, [r7, #0]
 8005440:	460b      	mov	r3, r1
 8005442:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005448:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	2b08      	cmp	r3, #8
 800544e:	d006      	beq.n	800545e <I2C_MasterRequestWrite+0x2a>
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	2b01      	cmp	r3, #1
 8005454:	d003      	beq.n	800545e <I2C_MasterRequestWrite+0x2a>
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800545c:	d108      	bne.n	8005470 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800546c:	601a      	str	r2, [r3, #0]
 800546e:	e00b      	b.n	8005488 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005474:	2b12      	cmp	r3, #18
 8005476:	d107      	bne.n	8005488 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005486:	601a      	str	r2, [r3, #0]
>>>>>>> flight_hardware
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f000 f91d 	bl	8005754 <I2C_WaitOnFlagUntilTimeout>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00d      	beq.n	800553c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800552a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800552e:	d103      	bne.n	8005538 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005536:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e035      	b.n	80055a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005544:	d108      	bne.n	8005558 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005546:	897b      	ldrh	r3, [r7, #10]
 8005548:	b2db      	uxtb	r3, r3
 800554a:	461a      	mov	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005554:	611a      	str	r2, [r3, #16]
 8005556:	e01b      	b.n	8005590 <I2C_MasterRequestWrite+0xdc>
=======
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	9300      	str	r3, [sp, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	f000 f91d 	bl	80056d4 <I2C_WaitOnFlagUntilTimeout>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00d      	beq.n	80054bc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054ae:	d103      	bne.n	80054b8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e035      	b.n	8005528 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054c4:	d108      	bne.n	80054d8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054c6:	897b      	ldrh	r3, [r7, #10]
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	461a      	mov	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80054d4:	611a      	str	r2, [r3, #16]
 80054d6:	e01b      	b.n	8005510 <I2C_MasterRequestWrite+0xdc>
>>>>>>> flight_hardware
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
<<<<<<< HEAD
 8005558:	897b      	ldrh	r3, [r7, #10]
 800555a:	11db      	asrs	r3, r3, #7
 800555c:	b2db      	uxtb	r3, r3
 800555e:	f003 0306 	and.w	r3, r3, #6
 8005562:	b2db      	uxtb	r3, r3
 8005564:	f063 030f 	orn	r3, r3, #15
 8005568:	b2da      	uxtb	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	490e      	ldr	r1, [pc, #56]	; (80055b0 <I2C_MasterRequestWrite+0xfc>)
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f000 f966 	bl	8005848 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d001      	beq.n	8005586 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e010      	b.n	80055a8 <I2C_MasterRequestWrite+0xf4>
=======
 80054d8:	897b      	ldrh	r3, [r7, #10]
 80054da:	11db      	asrs	r3, r3, #7
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	f003 0306 	and.w	r3, r3, #6
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	f063 030f 	orn	r3, r3, #15
 80054e8:	b2da      	uxtb	r2, r3
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	490e      	ldr	r1, [pc, #56]	; (8005530 <I2C_MasterRequestWrite+0xfc>)
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f000 f966 	bl	80057c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e010      	b.n	8005528 <I2C_MasterRequestWrite+0xf4>
>>>>>>> flight_hardware
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
<<<<<<< HEAD
 8005586:	897b      	ldrh	r3, [r7, #10]
 8005588:	b2da      	uxtb	r2, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	611a      	str	r2, [r3, #16]
=======
 8005506:	897b      	ldrh	r3, [r7, #10]
 8005508:	b2da      	uxtb	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	611a      	str	r2, [r3, #16]
>>>>>>> flight_hardware
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	4907      	ldr	r1, [pc, #28]	; (80055b4 <I2C_MasterRequestWrite+0x100>)
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f000 f956 	bl	8005848 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e000      	b.n	80055a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3718      	adds	r7, #24
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	00010008 	.word	0x00010008
 80055b4:	00010002 	.word	0x00010002

080055b8 <I2C_MasterRequestRead>:
=======
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	4907      	ldr	r1, [pc, #28]	; (8005534 <I2C_MasterRequestWrite+0x100>)
 8005516:	68f8      	ldr	r0, [r7, #12]
 8005518:	f000 f956 	bl	80057c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d001      	beq.n	8005526 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e000      	b.n	8005528 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	3718      	adds	r7, #24
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	00010008 	.word	0x00010008
 8005534:	00010002 	.word	0x00010002

08005538 <I2C_MasterRequestRead>:
>>>>>>> flight_hardware
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b088      	sub	sp, #32
 80055bc:	af02      	add	r7, sp, #8
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	607a      	str	r2, [r7, #4]
 80055c2:	603b      	str	r3, [r7, #0]
 80055c4:	460b      	mov	r3, r1
 80055c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055cc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055dc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	2b08      	cmp	r3, #8
 80055e2:	d006      	beq.n	80055f2 <I2C_MasterRequestRead+0x3a>
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d003      	beq.n	80055f2 <I2C_MasterRequestRead+0x3a>
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80055f0:	d108      	bne.n	8005604 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005600:	601a      	str	r2, [r3, #0]
 8005602:	e00b      	b.n	800561c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005608:	2b11      	cmp	r3, #17
 800560a:	d107      	bne.n	800561c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800561a:	601a      	str	r2, [r3, #0]
=======
 8005538:	b580      	push	{r7, lr}
 800553a:	b088      	sub	sp, #32
 800553c:	af02      	add	r7, sp, #8
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	607a      	str	r2, [r7, #4]
 8005542:	603b      	str	r3, [r7, #0]
 8005544:	460b      	mov	r3, r1
 8005546:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800555c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	2b08      	cmp	r3, #8
 8005562:	d006      	beq.n	8005572 <I2C_MasterRequestRead+0x3a>
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d003      	beq.n	8005572 <I2C_MasterRequestRead+0x3a>
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005570:	d108      	bne.n	8005584 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005580:	601a      	str	r2, [r3, #0]
 8005582:	e00b      	b.n	800559c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005588:	2b11      	cmp	r3, #17
 800558a:	d107      	bne.n	800559c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800559a:	601a      	str	r2, [r3, #0]
>>>>>>> flight_hardware
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	9300      	str	r3, [sp, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	f000 f893 	bl	8005754 <I2C_WaitOnFlagUntilTimeout>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00d      	beq.n	8005650 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800563e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005642:	d103      	bne.n	800564c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f44f 7200 	mov.w	r2, #512	; 0x200
 800564a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e079      	b.n	8005744 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005658:	d108      	bne.n	800566c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800565a:	897b      	ldrh	r3, [r7, #10]
 800565c:	b2db      	uxtb	r3, r3
 800565e:	f043 0301 	orr.w	r3, r3, #1
 8005662:	b2da      	uxtb	r2, r3
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	611a      	str	r2, [r3, #16]
 800566a:	e05f      	b.n	800572c <I2C_MasterRequestRead+0x174>
=======
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	9300      	str	r3, [sp, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f000 f893 	bl	80056d4 <I2C_WaitOnFlagUntilTimeout>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00d      	beq.n	80055d0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055c2:	d103      	bne.n	80055cc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e079      	b.n	80056c4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055d8:	d108      	bne.n	80055ec <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80055da:	897b      	ldrh	r3, [r7, #10]
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	f043 0301 	orr.w	r3, r3, #1
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	611a      	str	r2, [r3, #16]
 80055ea:	e05f      	b.n	80056ac <I2C_MasterRequestRead+0x174>
>>>>>>> flight_hardware
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
<<<<<<< HEAD
 800566c:	897b      	ldrh	r3, [r7, #10]
 800566e:	11db      	asrs	r3, r3, #7
 8005670:	b2db      	uxtb	r3, r3
 8005672:	f003 0306 	and.w	r3, r3, #6
 8005676:	b2db      	uxtb	r3, r3
 8005678:	f063 030f 	orn	r3, r3, #15
 800567c:	b2da      	uxtb	r2, r3
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	4930      	ldr	r1, [pc, #192]	; (800574c <I2C_MasterRequestRead+0x194>)
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f000 f8dc 	bl	8005848 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d001      	beq.n	800569a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e054      	b.n	8005744 <I2C_MasterRequestRead+0x18c>
=======
 80055ec:	897b      	ldrh	r3, [r7, #10]
 80055ee:	11db      	asrs	r3, r3, #7
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	f003 0306 	and.w	r3, r3, #6
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	f063 030f 	orn	r3, r3, #15
 80055fc:	b2da      	uxtb	r2, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	4930      	ldr	r1, [pc, #192]	; (80056cc <I2C_MasterRequestRead+0x194>)
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f000 f8dc 	bl	80057c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d001      	beq.n	800561a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e054      	b.n	80056c4 <I2C_MasterRequestRead+0x18c>
>>>>>>> flight_hardware
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
<<<<<<< HEAD
 800569a:	897b      	ldrh	r3, [r7, #10]
 800569c:	b2da      	uxtb	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	4929      	ldr	r1, [pc, #164]	; (8005750 <I2C_MasterRequestRead+0x198>)
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	f000 f8cc 	bl	8005848 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e044      	b.n	8005744 <I2C_MasterRequestRead+0x18c>
=======
 800561a:	897b      	ldrh	r3, [r7, #10]
 800561c:	b2da      	uxtb	r2, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	4929      	ldr	r1, [pc, #164]	; (80056d0 <I2C_MasterRequestRead+0x198>)
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f000 f8cc 	bl	80057c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d001      	beq.n	800563a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e044      	b.n	80056c4 <I2C_MasterRequestRead+0x18c>
>>>>>>> flight_hardware
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
<<<<<<< HEAD
 80056ba:	2300      	movs	r3, #0
 80056bc:	613b      	str	r3, [r7, #16]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	695b      	ldr	r3, [r3, #20]
 80056c4:	613b      	str	r3, [r7, #16]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	613b      	str	r3, [r7, #16]
 80056ce:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056de:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	9300      	str	r3, [sp, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056ec:	68f8      	ldr	r0, [r7, #12]
 80056ee:	f000 f831 	bl	8005754 <I2C_WaitOnFlagUntilTimeout>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00d      	beq.n	8005714 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005706:	d103      	bne.n	8005710 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800570e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e017      	b.n	8005744 <I2C_MasterRequestRead+0x18c>
=======
 800563a:	2300      	movs	r3, #0
 800563c:	613b      	str	r3, [r7, #16]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	613b      	str	r3, [r7, #16]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	613b      	str	r3, [r7, #16]
 800564e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800565e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f000 f831 	bl	80056d4 <I2C_WaitOnFlagUntilTimeout>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00d      	beq.n	8005694 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005686:	d103      	bne.n	8005690 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800568e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e017      	b.n	80056c4 <I2C_MasterRequestRead+0x18c>
>>>>>>> flight_hardware
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
<<<<<<< HEAD
 8005714:	897b      	ldrh	r3, [r7, #10]
 8005716:	11db      	asrs	r3, r3, #7
 8005718:	b2db      	uxtb	r3, r3
 800571a:	f003 0306 	and.w	r3, r3, #6
 800571e:	b2db      	uxtb	r3, r3
 8005720:	f063 030e 	orn	r3, r3, #14
 8005724:	b2da      	uxtb	r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	611a      	str	r2, [r3, #16]
=======
 8005694:	897b      	ldrh	r3, [r7, #10]
 8005696:	11db      	asrs	r3, r3, #7
 8005698:	b2db      	uxtb	r3, r3
 800569a:	f003 0306 	and.w	r3, r3, #6
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	f063 030e 	orn	r3, r3, #14
 80056a4:	b2da      	uxtb	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	611a      	str	r2, [r3, #16]
>>>>>>> flight_hardware
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	4907      	ldr	r1, [pc, #28]	; (8005750 <I2C_MasterRequestRead+0x198>)
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	f000 f888 	bl	8005848 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d001      	beq.n	8005742 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e000      	b.n	8005744 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3718      	adds	r7, #24
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	00010008 	.word	0x00010008
 8005750:	00010002 	.word	0x00010002

08005754 <I2C_WaitOnFlagUntilTimeout>:
=======
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	4907      	ldr	r1, [pc, #28]	; (80056d0 <I2C_MasterRequestRead+0x198>)
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f000 f888 	bl	80057c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d001      	beq.n	80056c2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e000      	b.n	80056c4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3718      	adds	r7, #24
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	00010008 	.word	0x00010008
 80056d0:	00010002 	.word	0x00010002

080056d4 <I2C_WaitOnFlagUntilTimeout>:
>>>>>>> flight_hardware
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	603b      	str	r3, [r7, #0]
 8005760:	4613      	mov	r3, r2
 8005762:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005764:	e048      	b.n	80057f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800576c:	d044      	beq.n	80057f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800576e:	f7fd fc71 	bl	8003054 <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	683a      	ldr	r2, [r7, #0]
 800577a:	429a      	cmp	r2, r3
 800577c:	d302      	bcc.n	8005784 <I2C_WaitOnFlagUntilTimeout+0x30>
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d139      	bne.n	80057f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	0c1b      	lsrs	r3, r3, #16
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b01      	cmp	r3, #1
 800578c:	d10d      	bne.n	80057aa <I2C_WaitOnFlagUntilTimeout+0x56>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	43da      	mvns	r2, r3
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	4013      	ands	r3, r2
 800579a:	b29b      	uxth	r3, r3
 800579c:	2b00      	cmp	r3, #0
 800579e:	bf0c      	ite	eq
 80057a0:	2301      	moveq	r3, #1
 80057a2:	2300      	movne	r3, #0
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	461a      	mov	r2, r3
 80057a8:	e00c      	b.n	80057c4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	699b      	ldr	r3, [r3, #24]
 80057b0:	43da      	mvns	r2, r3
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	4013      	ands	r3, r2
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	bf0c      	ite	eq
 80057bc:	2301      	moveq	r3, #1
 80057be:	2300      	movne	r3, #0
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	461a      	mov	r2, r3
 80057c4:	79fb      	ldrb	r3, [r7, #7]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d116      	bne.n	80057f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2220      	movs	r2, #32
 80057d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e4:	f043 0220 	orr.w	r2, r3, #32
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e023      	b.n	8005840 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	0c1b      	lsrs	r3, r3, #16
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d10d      	bne.n	800581e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	43da      	mvns	r2, r3
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	4013      	ands	r3, r2
 800580e:	b29b      	uxth	r3, r3
 8005810:	2b00      	cmp	r3, #0
 8005812:	bf0c      	ite	eq
 8005814:	2301      	moveq	r3, #1
 8005816:	2300      	movne	r3, #0
 8005818:	b2db      	uxtb	r3, r3
 800581a:	461a      	mov	r2, r3
 800581c:	e00c      	b.n	8005838 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	43da      	mvns	r2, r3
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	4013      	ands	r3, r2
 800582a:	b29b      	uxth	r3, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	bf0c      	ite	eq
 8005830:	2301      	moveq	r3, #1
 8005832:	2300      	movne	r3, #0
 8005834:	b2db      	uxtb	r3, r3
 8005836:	461a      	mov	r2, r3
 8005838:	79fb      	ldrb	r3, [r7, #7]
 800583a:	429a      	cmp	r2, r3
 800583c:	d093      	beq.n	8005766 <I2C_WaitOnFlagUntilTimeout+0x12>
=======
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	603b      	str	r3, [r7, #0]
 80056e0:	4613      	mov	r3, r2
 80056e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056e4:	e048      	b.n	8005778 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056ec:	d044      	beq.n	8005778 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ee:	f7fd fc71 	bl	8002fd4 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	683a      	ldr	r2, [r7, #0]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d302      	bcc.n	8005704 <I2C_WaitOnFlagUntilTimeout+0x30>
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d139      	bne.n	8005778 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	0c1b      	lsrs	r3, r3, #16
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b01      	cmp	r3, #1
 800570c:	d10d      	bne.n	800572a <I2C_WaitOnFlagUntilTimeout+0x56>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	43da      	mvns	r2, r3
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	4013      	ands	r3, r2
 800571a:	b29b      	uxth	r3, r3
 800571c:	2b00      	cmp	r3, #0
 800571e:	bf0c      	ite	eq
 8005720:	2301      	moveq	r3, #1
 8005722:	2300      	movne	r3, #0
 8005724:	b2db      	uxtb	r3, r3
 8005726:	461a      	mov	r2, r3
 8005728:	e00c      	b.n	8005744 <I2C_WaitOnFlagUntilTimeout+0x70>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	43da      	mvns	r2, r3
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	4013      	ands	r3, r2
 8005736:	b29b      	uxth	r3, r3
 8005738:	2b00      	cmp	r3, #0
 800573a:	bf0c      	ite	eq
 800573c:	2301      	moveq	r3, #1
 800573e:	2300      	movne	r3, #0
 8005740:	b2db      	uxtb	r3, r3
 8005742:	461a      	mov	r2, r3
 8005744:	79fb      	ldrb	r3, [r7, #7]
 8005746:	429a      	cmp	r2, r3
 8005748:	d116      	bne.n	8005778 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2220      	movs	r2, #32
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005764:	f043 0220 	orr.w	r2, r3, #32
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e023      	b.n	80057c0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	0c1b      	lsrs	r3, r3, #16
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b01      	cmp	r3, #1
 8005780:	d10d      	bne.n	800579e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	695b      	ldr	r3, [r3, #20]
 8005788:	43da      	mvns	r2, r3
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	4013      	ands	r3, r2
 800578e:	b29b      	uxth	r3, r3
 8005790:	2b00      	cmp	r3, #0
 8005792:	bf0c      	ite	eq
 8005794:	2301      	moveq	r3, #1
 8005796:	2300      	movne	r3, #0
 8005798:	b2db      	uxtb	r3, r3
 800579a:	461a      	mov	r2, r3
 800579c:	e00c      	b.n	80057b8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	699b      	ldr	r3, [r3, #24]
 80057a4:	43da      	mvns	r2, r3
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	4013      	ands	r3, r2
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	bf0c      	ite	eq
 80057b0:	2301      	moveq	r3, #1
 80057b2:	2300      	movne	r3, #0
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	461a      	mov	r2, r3
 80057b8:	79fb      	ldrb	r3, [r7, #7]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d093      	beq.n	80056e6 <I2C_WaitOnFlagUntilTimeout+0x12>
>>>>>>> flight_hardware
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3710      	adds	r7, #16
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
=======
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
>>>>>>> flight_hardware
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
 8005854:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005856:	e071      	b.n	800593c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005866:	d123      	bne.n	80058b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005876:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005880:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2220      	movs	r2, #32
 800588c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589c:	f043 0204 	orr.w	r2, r3, #4
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e067      	b.n	8005980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
=======
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
 80057d4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057d6:	e071      	b.n	80058bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057e6:	d123      	bne.n	8005830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057f6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005800:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2220      	movs	r2, #32
 800580c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581c:	f043 0204 	orr.w	r2, r3, #4
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e067      	b.n	8005900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
>>>>>>> flight_hardware
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< HEAD
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058b6:	d041      	beq.n	800593c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058b8:	f7fd fbcc 	bl	8003054 <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d302      	bcc.n	80058ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d136      	bne.n	800593c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	0c1b      	lsrs	r3, r3, #16
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d10c      	bne.n	80058f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	43da      	mvns	r2, r3
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	4013      	ands	r3, r2
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	bf14      	ite	ne
 80058ea:	2301      	movne	r3, #1
 80058ec:	2300      	moveq	r3, #0
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	e00b      	b.n	800590a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	43da      	mvns	r2, r3
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	4013      	ands	r3, r2
 80058fe:	b29b      	uxth	r3, r3
 8005900:	2b00      	cmp	r3, #0
 8005902:	bf14      	ite	ne
 8005904:	2301      	movne	r3, #1
 8005906:	2300      	moveq	r3, #0
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d016      	beq.n	800593c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2220      	movs	r2, #32
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005928:	f043 0220 	orr.w	r2, r3, #32
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e021      	b.n	8005980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	0c1b      	lsrs	r3, r3, #16
 8005940:	b2db      	uxtb	r3, r3
 8005942:	2b01      	cmp	r3, #1
 8005944:	d10c      	bne.n	8005960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	695b      	ldr	r3, [r3, #20]
 800594c:	43da      	mvns	r2, r3
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	4013      	ands	r3, r2
 8005952:	b29b      	uxth	r3, r3
 8005954:	2b00      	cmp	r3, #0
 8005956:	bf14      	ite	ne
 8005958:	2301      	movne	r3, #1
 800595a:	2300      	moveq	r3, #0
 800595c:	b2db      	uxtb	r3, r3
 800595e:	e00b      	b.n	8005978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	43da      	mvns	r2, r3
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	4013      	ands	r3, r2
 800596c:	b29b      	uxth	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	bf14      	ite	ne
 8005972:	2301      	movne	r3, #1
 8005974:	2300      	moveq	r3, #0
 8005976:	b2db      	uxtb	r3, r3
 8005978:	2b00      	cmp	r3, #0
 800597a:	f47f af6d 	bne.w	8005858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
=======
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005836:	d041      	beq.n	80058bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005838:	f7fd fbcc 	bl	8002fd4 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	429a      	cmp	r2, r3
 8005846:	d302      	bcc.n	800584e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d136      	bne.n	80058bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	0c1b      	lsrs	r3, r3, #16
 8005852:	b2db      	uxtb	r3, r3
 8005854:	2b01      	cmp	r3, #1
 8005856:	d10c      	bne.n	8005872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	43da      	mvns	r2, r3
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	4013      	ands	r3, r2
 8005864:	b29b      	uxth	r3, r3
 8005866:	2b00      	cmp	r3, #0
 8005868:	bf14      	ite	ne
 800586a:	2301      	movne	r3, #1
 800586c:	2300      	moveq	r3, #0
 800586e:	b2db      	uxtb	r3, r3
 8005870:	e00b      	b.n	800588a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	43da      	mvns	r2, r3
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	4013      	ands	r3, r2
 800587e:	b29b      	uxth	r3, r3
 8005880:	2b00      	cmp	r3, #0
 8005882:	bf14      	ite	ne
 8005884:	2301      	movne	r3, #1
 8005886:	2300      	moveq	r3, #0
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d016      	beq.n	80058bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2220      	movs	r2, #32
 8005898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a8:	f043 0220 	orr.w	r2, r3, #32
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e021      	b.n	8005900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	0c1b      	lsrs	r3, r3, #16
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d10c      	bne.n	80058e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	695b      	ldr	r3, [r3, #20]
 80058cc:	43da      	mvns	r2, r3
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	4013      	ands	r3, r2
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	bf14      	ite	ne
 80058d8:	2301      	movne	r3, #1
 80058da:	2300      	moveq	r3, #0
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	e00b      	b.n	80058f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	43da      	mvns	r2, r3
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	4013      	ands	r3, r2
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	bf14      	ite	ne
 80058f2:	2301      	movne	r3, #1
 80058f4:	2300      	moveq	r3, #0
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	f47f af6d 	bne.w	80057d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
>>>>>>> flight_hardware
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <I2C_WaitOnTXEFlagUntilTimeout>:
=======
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <I2C_WaitOnTXEFlagUntilTimeout>:
>>>>>>> flight_hardware
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005994:	e034      	b.n	8005a00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f000 f8e3 	bl	8005b62 <I2C_IsAcknowledgeFailed>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d001      	beq.n	80059a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e034      	b.n	8005a10 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
=======
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005914:	e034      	b.n	8005980 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f000 f8e3 	bl	8005ae2 <I2C_IsAcknowledgeFailed>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e034      	b.n	8005990 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
>>>>>>> flight_hardware
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< HEAD
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059ac:	d028      	beq.n	8005a00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059ae:	f7fd fb51 	bl	8003054 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d302      	bcc.n	80059c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d11d      	bne.n	8005a00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ce:	2b80      	cmp	r3, #128	; 0x80
 80059d0:	d016      	beq.n	8005a00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2220      	movs	r2, #32
 80059dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ec:	f043 0220 	orr.w	r2, r3, #32
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e007      	b.n	8005a10 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a0a:	2b80      	cmp	r3, #128	; 0x80
 8005a0c:	d1c3      	bne.n	8005996 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
=======
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800592c:	d028      	beq.n	8005980 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800592e:	f7fd fb51 	bl	8002fd4 <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	429a      	cmp	r2, r3
 800593c:	d302      	bcc.n	8005944 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d11d      	bne.n	8005980 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800594e:	2b80      	cmp	r3, #128	; 0x80
 8005950:	d016      	beq.n	8005980 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2220      	movs	r2, #32
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596c:	f043 0220 	orr.w	r2, r3, #32
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e007      	b.n	8005990 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800598a:	2b80      	cmp	r3, #128	; 0x80
 800598c:	d1c3      	bne.n	8005916 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
>>>>>>> flight_hardware
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3710      	adds	r7, #16
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <I2C_WaitOnBTFFlagUntilTimeout>:
=======
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <I2C_WaitOnBTFFlagUntilTimeout>:
>>>>>>> flight_hardware
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a24:	e034      	b.n	8005a90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f000 f89b 	bl	8005b62 <I2C_IsAcknowledgeFailed>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d001      	beq.n	8005a36 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e034      	b.n	8005aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
=======
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059a4:	e034      	b.n	8005a10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80059a6:	68f8      	ldr	r0, [r7, #12]
 80059a8:	f000 f89b 	bl	8005ae2 <I2C_IsAcknowledgeFailed>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e034      	b.n	8005a20 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
>>>>>>> flight_hardware
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< HEAD
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a3c:	d028      	beq.n	8005a90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a3e:	f7fd fb09 	bl	8003054 <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	68ba      	ldr	r2, [r7, #8]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d302      	bcc.n	8005a54 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d11d      	bne.n	8005a90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	f003 0304 	and.w	r3, r3, #4
 8005a5e:	2b04      	cmp	r3, #4
 8005a60:	d016      	beq.n	8005a90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7c:	f043 0220 	orr.w	r2, r3, #32
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e007      	b.n	8005aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	f003 0304 	and.w	r3, r3, #4
 8005a9a:	2b04      	cmp	r3, #4
 8005a9c:	d1c3      	bne.n	8005a26 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
=======
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059bc:	d028      	beq.n	8005a10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059be:	f7fd fb09 	bl	8002fd4 <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	68ba      	ldr	r2, [r7, #8]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d302      	bcc.n	80059d4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d11d      	bne.n	8005a10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	f003 0304 	and.w	r3, r3, #4
 80059de:	2b04      	cmp	r3, #4
 80059e0:	d016      	beq.n	8005a10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2220      	movs	r2, #32
 80059ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fc:	f043 0220 	orr.w	r2, r3, #32
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e007      	b.n	8005a20 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	f003 0304 	and.w	r3, r3, #4
 8005a1a:	2b04      	cmp	r3, #4
 8005a1c:	d1c3      	bne.n	80059a6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
>>>>>>> flight_hardware
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3710      	adds	r7, #16
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <I2C_WaitOnRXNEFlagUntilTimeout>:
=======
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <I2C_WaitOnRXNEFlagUntilTimeout>:
>>>>>>> flight_hardware
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ab4:	e049      	b.n	8005b4a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	695b      	ldr	r3, [r3, #20]
 8005abc:	f003 0310 	and.w	r3, r3, #16
 8005ac0:	2b10      	cmp	r3, #16
 8005ac2:	d119      	bne.n	8005af8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f06f 0210 	mvn.w	r2, #16
 8005acc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2220      	movs	r2, #32
 8005ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e030      	b.n	8005b5a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
=======
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a34:	e049      	b.n	8005aca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	f003 0310 	and.w	r3, r3, #16
 8005a40:	2b10      	cmp	r3, #16
 8005a42:	d119      	bne.n	8005a78 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f06f 0210 	mvn.w	r2, #16
 8005a4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2220      	movs	r2, #32
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e030      	b.n	8005ada <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
>>>>>>> flight_hardware
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
<<<<<<< HEAD
 8005af8:	f7fd faac 	bl	8003054 <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d302      	bcc.n	8005b0e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d11d      	bne.n	8005b4a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b18:	2b40      	cmp	r3, #64	; 0x40
 8005b1a:	d016      	beq.n	8005b4a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2220      	movs	r2, #32
 8005b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b36:	f043 0220 	orr.w	r2, r3, #32
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e007      	b.n	8005b5a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	695b      	ldr	r3, [r3, #20]
 8005b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b54:	2b40      	cmp	r3, #64	; 0x40
 8005b56:	d1ae      	bne.n	8005ab6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
=======
 8005a78:	f7fd faac 	bl	8002fd4 <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d302      	bcc.n	8005a8e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d11d      	bne.n	8005aca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	695b      	ldr	r3, [r3, #20]
 8005a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a98:	2b40      	cmp	r3, #64	; 0x40
 8005a9a:	d016      	beq.n	8005aca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab6:	f043 0220 	orr.w	r2, r3, #32
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e007      	b.n	8005ada <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad4:	2b40      	cmp	r3, #64	; 0x40
 8005ad6:	d1ae      	bne.n	8005a36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
>>>>>>> flight_hardware
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <I2C_IsAcknowledgeFailed>:
=======
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <I2C_IsAcknowledgeFailed>:
>>>>>>> flight_hardware
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8005b62:	b480      	push	{r7}
 8005b64:	b083      	sub	sp, #12
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	695b      	ldr	r3, [r3, #20]
 8005b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b78:	d11b      	bne.n	8005bb2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b82:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9e:	f043 0204 	orr.w	r2, r3, #4
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e000      	b.n	8005bb4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <HAL_I2CEx_ConfigAnalogFilter>:
=======
 8005ae2:	b480      	push	{r7}
 8005ae4:	b083      	sub	sp, #12
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	695b      	ldr	r3, [r3, #20]
 8005af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005af4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005af8:	d11b      	bne.n	8005b32 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b02:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2220      	movs	r2, #32
 8005b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1e:	f043 0204 	orr.w	r2, r3, #4
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e000      	b.n	8005b34 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <HAL_I2CEx_ConfigAnalogFilter>:
>>>>>>> flight_hardware
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
<<<<<<< HEAD
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
=======
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
>>>>>>> flight_hardware
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< HEAD
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	2b20      	cmp	r3, #32
 8005bd4:	d129      	bne.n	8005c2a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2224      	movs	r2, #36	; 0x24
 8005bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f022 0201 	bic.w	r2, r2, #1
 8005bec:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f022 0210 	bic.w	r2, r2, #16
 8005bfc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	683a      	ldr	r2, [r7, #0]
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f042 0201 	orr.w	r2, r2, #1
 8005c1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2220      	movs	r2, #32
 8005c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005c26:	2300      	movs	r3, #0
 8005c28:	e000      	b.n	8005c2c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
=======
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b20      	cmp	r3, #32
 8005b54:	d129      	bne.n	8005baa <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2224      	movs	r2, #36	; 0x24
 8005b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f022 0201 	bic.w	r2, r2, #1
 8005b6c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f022 0210 	bic.w	r2, r2, #16
 8005b7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	683a      	ldr	r2, [r7, #0]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f042 0201 	orr.w	r2, r2, #1
 8005b9c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	e000      	b.n	8005bac <HAL_I2CEx_ConfigAnalogFilter+0x6c>
>>>>>>> flight_hardware
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8005c2a:	2302      	movs	r3, #2
  }
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <HAL_I2CEx_ConfigDigitalFilter>:
=======
 8005baa:	2302      	movs	r3, #2
  }
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_I2CEx_ConfigDigitalFilter>:
>>>>>>> flight_hardware
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
<<<<<<< HEAD
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005c42:	2300      	movs	r3, #0
 8005c44:	81fb      	strh	r3, [r7, #14]
=======
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	81fb      	strh	r3, [r7, #14]
>>>>>>> flight_hardware

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< HEAD
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	2b20      	cmp	r3, #32
 8005c50:	d12a      	bne.n	8005ca8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2224      	movs	r2, #36	; 0x24
 8005c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f022 0201 	bic.w	r2, r2, #1
 8005c68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c70:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005c72:	89fb      	ldrh	r3, [r7, #14]
 8005c74:	f023 030f 	bic.w	r3, r3, #15
 8005c78:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	89fb      	ldrh	r3, [r7, #14]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	89fa      	ldrh	r2, [r7, #14]
 8005c8a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f042 0201 	orr.w	r2, r2, #1
 8005c9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2220      	movs	r2, #32
 8005ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	e000      	b.n	8005caa <HAL_I2CEx_ConfigDigitalFilter+0x72>
=======
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b20      	cmp	r3, #32
 8005bd0:	d12a      	bne.n	8005c28 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2224      	movs	r2, #36	; 0x24
 8005bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f022 0201 	bic.w	r2, r2, #1
 8005be8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf0:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005bf2:	89fb      	ldrh	r3, [r7, #14]
 8005bf4:	f023 030f 	bic.w	r3, r3, #15
 8005bf8:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	b29a      	uxth	r2, r3
 8005bfe:	89fb      	ldrh	r3, [r7, #14]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	89fa      	ldrh	r2, [r7, #14]
 8005c0a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f042 0201 	orr.w	r2, r2, #1
 8005c1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2220      	movs	r2, #32
 8005c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005c24:	2300      	movs	r3, #0
 8005c26:	e000      	b.n	8005c2a <HAL_I2CEx_ConfigDigitalFilter+0x72>
>>>>>>> flight_hardware
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8005ca8:	2302      	movs	r3, #2
  }
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3714      	adds	r7, #20
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
	...

08005cb8 <HAL_PWR_EnableBkUpAccess>:
=======
 8005c28:	2302      	movs	r3, #2
  }
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3714      	adds	r7, #20
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
	...

08005c38 <HAL_PWR_EnableBkUpAccess>:
>>>>>>> flight_hardware
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
<<<<<<< HEAD
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005cbe:	4b06      	ldr	r3, [pc, #24]	; (8005cd8 <HAL_PWR_EnableBkUpAccess+0x20>)
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8005cc4:	4b05      	ldr	r3, [pc, #20]	; (8005cdc <HAL_PWR_EnableBkUpAccess+0x24>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8005cca:	687b      	ldr	r3, [r7, #4]
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr
 8005cd8:	420e0020 	.word	0x420e0020
 8005cdc:	40007000 	.word	0x40007000

08005ce0 <HAL_PWR_DisableBkUpAccess>:
=======
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005c3e:	4b06      	ldr	r3, [pc, #24]	; (8005c58 <HAL_PWR_EnableBkUpAccess+0x20>)
 8005c40:	2201      	movs	r2, #1
 8005c42:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8005c44:	4b05      	ldr	r3, [pc, #20]	; (8005c5c <HAL_PWR_EnableBkUpAccess+0x24>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8005c4a:	687b      	ldr	r3, [r7, #4]
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr
 8005c58:	420e0020 	.word	0x420e0020
 8005c5c:	40007000 	.word	0x40007000

08005c60 <HAL_PWR_DisableBkUpAccess>:
>>>>>>> flight_hardware
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
<<<<<<< HEAD
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8005ce6:	4b06      	ldr	r3, [pc, #24]	; (8005d00 <HAL_PWR_DisableBkUpAccess+0x20>)
 8005ce8:	2200      	movs	r2, #0
 8005cea:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8005cec:	4b05      	ldr	r3, [pc, #20]	; (8005d04 <HAL_PWR_DisableBkUpAccess+0x24>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8005cf2:	687b      	ldr	r3, [r7, #4]
}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr
 8005d00:	420e0020 	.word	0x420e0020
 8005d04:	40007000 	.word	0x40007000

08005d08 <HAL_RCC_OscConfig>:
=======
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8005c66:	4b06      	ldr	r3, [pc, #24]	; (8005c80 <HAL_PWR_DisableBkUpAccess+0x20>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8005c6c:	4b05      	ldr	r3, [pc, #20]	; (8005c84 <HAL_PWR_DisableBkUpAccess+0x24>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8005c72:	687b      	ldr	r3, [r7, #4]
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr
 8005c80:	420e0020 	.word	0x420e0020
 8005c84:	40007000 	.word	0x40007000

08005c88 <HAL_RCC_OscConfig>:
>>>>>>> flight_hardware
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
=======
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b086      	sub	sp, #24
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
>>>>>>> flight_hardware
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e267      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
=======
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d101      	bne.n	8005c9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e267      	b.n	800616a <HAL_RCC_OscConfig+0x4e2>
>>>>>>> flight_hardware
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d075      	beq.n	8005e12 <HAL_RCC_OscConfig+0x10a>
=======
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d075      	beq.n	8005d92 <HAL_RCC_OscConfig+0x10a>
>>>>>>> flight_hardware
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
<<<<<<< HEAD
 8005d26:	4b88      	ldr	r3, [pc, #544]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f003 030c 	and.w	r3, r3, #12
 8005d2e:	2b04      	cmp	r3, #4
 8005d30:	d00c      	beq.n	8005d4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d32:	4b85      	ldr	r3, [pc, #532]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d3a:	2b08      	cmp	r3, #8
 8005d3c:	d112      	bne.n	8005d64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d3e:	4b82      	ldr	r3, [pc, #520]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d4a:	d10b      	bne.n	8005d64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d4c:	4b7e      	ldr	r3, [pc, #504]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d05b      	beq.n	8005e10 <HAL_RCC_OscConfig+0x108>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d157      	bne.n	8005e10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e242      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
=======
 8005ca6:	4b88      	ldr	r3, [pc, #544]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f003 030c 	and.w	r3, r3, #12
 8005cae:	2b04      	cmp	r3, #4
 8005cb0:	d00c      	beq.n	8005ccc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cb2:	4b85      	ldr	r3, [pc, #532]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cba:	2b08      	cmp	r3, #8
 8005cbc:	d112      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cbe:	4b82      	ldr	r3, [pc, #520]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cca:	d10b      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ccc:	4b7e      	ldr	r3, [pc, #504]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d05b      	beq.n	8005d90 <HAL_RCC_OscConfig+0x108>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d157      	bne.n	8005d90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e242      	b.n	800616a <HAL_RCC_OscConfig+0x4e2>
>>>>>>> flight_hardware
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d6c:	d106      	bne.n	8005d7c <HAL_RCC_OscConfig+0x74>
 8005d6e:	4b76      	ldr	r3, [pc, #472]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a75      	ldr	r2, [pc, #468]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d78:	6013      	str	r3, [r2, #0]
 8005d7a:	e01d      	b.n	8005db8 <HAL_RCC_OscConfig+0xb0>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d84:	d10c      	bne.n	8005da0 <HAL_RCC_OscConfig+0x98>
 8005d86:	4b70      	ldr	r3, [pc, #448]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a6f      	ldr	r2, [pc, #444]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d90:	6013      	str	r3, [r2, #0]
 8005d92:	4b6d      	ldr	r3, [pc, #436]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a6c      	ldr	r2, [pc, #432]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d9c:	6013      	str	r3, [r2, #0]
 8005d9e:	e00b      	b.n	8005db8 <HAL_RCC_OscConfig+0xb0>
 8005da0:	4b69      	ldr	r3, [pc, #420]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a68      	ldr	r2, [pc, #416]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005daa:	6013      	str	r3, [r2, #0]
 8005dac:	4b66      	ldr	r3, [pc, #408]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a65      	ldr	r2, [pc, #404]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d013      	beq.n	8005de8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dc0:	f7fd f948 	bl	8003054 <HAL_GetTick>
 8005dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dc6:	e008      	b.n	8005dda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005dc8:	f7fd f944 	bl	8003054 <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	2b64      	cmp	r3, #100	; 0x64
 8005dd4:	d901      	bls.n	8005dda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e207      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dda:	4b5b      	ldr	r3, [pc, #364]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d0f0      	beq.n	8005dc8 <HAL_RCC_OscConfig+0xc0>
 8005de6:	e014      	b.n	8005e12 <HAL_RCC_OscConfig+0x10a>
=======
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cec:	d106      	bne.n	8005cfc <HAL_RCC_OscConfig+0x74>
 8005cee:	4b76      	ldr	r3, [pc, #472]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a75      	ldr	r2, [pc, #468]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cf8:	6013      	str	r3, [r2, #0]
 8005cfa:	e01d      	b.n	8005d38 <HAL_RCC_OscConfig+0xb0>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d04:	d10c      	bne.n	8005d20 <HAL_RCC_OscConfig+0x98>
 8005d06:	4b70      	ldr	r3, [pc, #448]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a6f      	ldr	r2, [pc, #444]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d10:	6013      	str	r3, [r2, #0]
 8005d12:	4b6d      	ldr	r3, [pc, #436]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a6c      	ldr	r2, [pc, #432]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d1c:	6013      	str	r3, [r2, #0]
 8005d1e:	e00b      	b.n	8005d38 <HAL_RCC_OscConfig+0xb0>
 8005d20:	4b69      	ldr	r3, [pc, #420]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a68      	ldr	r2, [pc, #416]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d2a:	6013      	str	r3, [r2, #0]
 8005d2c:	4b66      	ldr	r3, [pc, #408]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a65      	ldr	r2, [pc, #404]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d013      	beq.n	8005d68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d40:	f7fd f948 	bl	8002fd4 <HAL_GetTick>
 8005d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d46:	e008      	b.n	8005d5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d48:	f7fd f944 	bl	8002fd4 <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	2b64      	cmp	r3, #100	; 0x64
 8005d54:	d901      	bls.n	8005d5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e207      	b.n	800616a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d5a:	4b5b      	ldr	r3, [pc, #364]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d0f0      	beq.n	8005d48 <HAL_RCC_OscConfig+0xc0>
 8005d66:	e014      	b.n	8005d92 <HAL_RCC_OscConfig+0x10a>
>>>>>>> flight_hardware
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8005de8:	f7fd f934 	bl	8003054 <HAL_GetTick>
 8005dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dee:	e008      	b.n	8005e02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005df0:	f7fd f930 	bl	8003054 <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	2b64      	cmp	r3, #100	; 0x64
 8005dfc:	d901      	bls.n	8005e02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e1f3      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e02:	4b51      	ldr	r3, [pc, #324]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1f0      	bne.n	8005df0 <HAL_RCC_OscConfig+0xe8>
 8005e0e:	e000      	b.n	8005e12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e10:	bf00      	nop
=======
 8005d68:	f7fd f934 	bl	8002fd4 <HAL_GetTick>
 8005d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d6e:	e008      	b.n	8005d82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d70:	f7fd f930 	bl	8002fd4 <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	2b64      	cmp	r3, #100	; 0x64
 8005d7c:	d901      	bls.n	8005d82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e1f3      	b.n	800616a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d82:	4b51      	ldr	r3, [pc, #324]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1f0      	bne.n	8005d70 <HAL_RCC_OscConfig+0xe8>
 8005d8e:	e000      	b.n	8005d92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d90:	bf00      	nop
>>>>>>> flight_hardware
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0302 	and.w	r3, r3, #2
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d063      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x1de>
=======
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d063      	beq.n	8005e66 <HAL_RCC_OscConfig+0x1de>
>>>>>>> flight_hardware
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
<<<<<<< HEAD
 8005e1e:	4b4a      	ldr	r3, [pc, #296]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f003 030c 	and.w	r3, r3, #12
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00b      	beq.n	8005e42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e2a:	4b47      	ldr	r3, [pc, #284]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e32:	2b08      	cmp	r3, #8
 8005e34:	d11c      	bne.n	8005e70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e36:	4b44      	ldr	r3, [pc, #272]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d116      	bne.n	8005e70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e42:	4b41      	ldr	r3, [pc, #260]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0302 	and.w	r3, r3, #2
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d005      	beq.n	8005e5a <HAL_RCC_OscConfig+0x152>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d001      	beq.n	8005e5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e1c7      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
=======
 8005d9e:	4b4a      	ldr	r3, [pc, #296]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f003 030c 	and.w	r3, r3, #12
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00b      	beq.n	8005dc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005daa:	4b47      	ldr	r3, [pc, #284]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005db2:	2b08      	cmp	r3, #8
 8005db4:	d11c      	bne.n	8005df0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005db6:	4b44      	ldr	r3, [pc, #272]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d116      	bne.n	8005df0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dc2:	4b41      	ldr	r3, [pc, #260]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0302 	and.w	r3, r3, #2
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d005      	beq.n	8005dda <HAL_RCC_OscConfig+0x152>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d001      	beq.n	8005dda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e1c7      	b.n	800616a <HAL_RCC_OscConfig+0x4e2>
>>>>>>> flight_hardware
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8005e5a:	4b3b      	ldr	r3, [pc, #236]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	00db      	lsls	r3, r3, #3
 8005e68:	4937      	ldr	r1, [pc, #220]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e6e:	e03a      	b.n	8005ee6 <HAL_RCC_OscConfig+0x1de>
=======
 8005dda:	4b3b      	ldr	r3, [pc, #236]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	00db      	lsls	r3, r3, #3
 8005de8:	4937      	ldr	r1, [pc, #220]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dee:	e03a      	b.n	8005e66 <HAL_RCC_OscConfig+0x1de>
>>>>>>> flight_hardware
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
<<<<<<< HEAD
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d020      	beq.n	8005eba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e78:	4b34      	ldr	r3, [pc, #208]	; (8005f4c <HAL_RCC_OscConfig+0x244>)
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e7e:	f7fd f8e9 	bl	8003054 <HAL_GetTick>
 8005e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e84:	e008      	b.n	8005e98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e86:	f7fd f8e5 	bl	8003054 <HAL_GetTick>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d901      	bls.n	8005e98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e1a8      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e98:	4b2b      	ldr	r3, [pc, #172]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 0302 	and.w	r3, r3, #2
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d0f0      	beq.n	8005e86 <HAL_RCC_OscConfig+0x17e>
=======
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d020      	beq.n	8005e3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005df8:	4b34      	ldr	r3, [pc, #208]	; (8005ecc <HAL_RCC_OscConfig+0x244>)
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dfe:	f7fd f8e9 	bl	8002fd4 <HAL_GetTick>
 8005e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e04:	e008      	b.n	8005e18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e06:	f7fd f8e5 	bl	8002fd4 <HAL_GetTick>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d901      	bls.n	8005e18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e1a8      	b.n	800616a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e18:	4b2b      	ldr	r3, [pc, #172]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0302 	and.w	r3, r3, #2
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d0f0      	beq.n	8005e06 <HAL_RCC_OscConfig+0x17e>
>>>>>>> flight_hardware
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8005ea4:	4b28      	ldr	r3, [pc, #160]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	00db      	lsls	r3, r3, #3
 8005eb2:	4925      	ldr	r1, [pc, #148]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	600b      	str	r3, [r1, #0]
 8005eb8:	e015      	b.n	8005ee6 <HAL_RCC_OscConfig+0x1de>
=======
 8005e24:	4b28      	ldr	r3, [pc, #160]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	00db      	lsls	r3, r3, #3
 8005e32:	4925      	ldr	r1, [pc, #148]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005e34:	4313      	orrs	r3, r2
 8005e36:	600b      	str	r3, [r1, #0]
 8005e38:	e015      	b.n	8005e66 <HAL_RCC_OscConfig+0x1de>
>>>>>>> flight_hardware
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 8005eba:	4b24      	ldr	r3, [pc, #144]	; (8005f4c <HAL_RCC_OscConfig+0x244>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ec0:	f7fd f8c8 	bl	8003054 <HAL_GetTick>
 8005ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ec6:	e008      	b.n	8005eda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ec8:	f7fd f8c4 	bl	8003054 <HAL_GetTick>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d901      	bls.n	8005eda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e187      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005eda:	4b1b      	ldr	r3, [pc, #108]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0302 	and.w	r3, r3, #2
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1f0      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x1c0>
=======
 8005e3a:	4b24      	ldr	r3, [pc, #144]	; (8005ecc <HAL_RCC_OscConfig+0x244>)
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e40:	f7fd f8c8 	bl	8002fd4 <HAL_GetTick>
 8005e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e46:	e008      	b.n	8005e5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e48:	f7fd f8c4 	bl	8002fd4 <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d901      	bls.n	8005e5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e187      	b.n	800616a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e5a:	4b1b      	ldr	r3, [pc, #108]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0302 	and.w	r3, r3, #2
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d1f0      	bne.n	8005e48 <HAL_RCC_OscConfig+0x1c0>
>>>>>>> flight_hardware
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0308 	and.w	r3, r3, #8
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d036      	beq.n	8005f60 <HAL_RCC_OscConfig+0x258>
=======
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 0308 	and.w	r3, r3, #8
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d036      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x258>
>>>>>>> flight_hardware
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
<<<<<<< HEAD
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d016      	beq.n	8005f28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005efa:	4b15      	ldr	r3, [pc, #84]	; (8005f50 <HAL_RCC_OscConfig+0x248>)
 8005efc:	2201      	movs	r2, #1
 8005efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f00:	f7fd f8a8 	bl	8003054 <HAL_GetTick>
 8005f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f06:	e008      	b.n	8005f1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f08:	f7fd f8a4 	bl	8003054 <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d901      	bls.n	8005f1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e167      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f1a:	4b0b      	ldr	r3, [pc, #44]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f1e:	f003 0302 	and.w	r3, r3, #2
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d0f0      	beq.n	8005f08 <HAL_RCC_OscConfig+0x200>
 8005f26:	e01b      	b.n	8005f60 <HAL_RCC_OscConfig+0x258>
=======
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d016      	beq.n	8005ea8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e7a:	4b15      	ldr	r3, [pc, #84]	; (8005ed0 <HAL_RCC_OscConfig+0x248>)
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e80:	f7fd f8a8 	bl	8002fd4 <HAL_GetTick>
 8005e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e86:	e008      	b.n	8005e9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e88:	f7fd f8a4 	bl	8002fd4 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d901      	bls.n	8005e9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e167      	b.n	800616a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e9a:	4b0b      	ldr	r3, [pc, #44]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005e9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d0f0      	beq.n	8005e88 <HAL_RCC_OscConfig+0x200>
 8005ea6:	e01b      	b.n	8005ee0 <HAL_RCC_OscConfig+0x258>
>>>>>>> flight_hardware
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 8005f28:	4b09      	ldr	r3, [pc, #36]	; (8005f50 <HAL_RCC_OscConfig+0x248>)
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f2e:	f7fd f891 	bl	8003054 <HAL_GetTick>
 8005f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f34:	e00e      	b.n	8005f54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f36:	f7fd f88d 	bl	8003054 <HAL_GetTick>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d907      	bls.n	8005f54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e150      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
 8005f48:	40023800 	.word	0x40023800
 8005f4c:	42470000 	.word	0x42470000
 8005f50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f54:	4b88      	ldr	r3, [pc, #544]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8005f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f58:	f003 0302 	and.w	r3, r3, #2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1ea      	bne.n	8005f36 <HAL_RCC_OscConfig+0x22e>
=======
 8005ea8:	4b09      	ldr	r3, [pc, #36]	; (8005ed0 <HAL_RCC_OscConfig+0x248>)
 8005eaa:	2200      	movs	r2, #0
 8005eac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005eae:	f7fd f891 	bl	8002fd4 <HAL_GetTick>
 8005eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005eb4:	e00e      	b.n	8005ed4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005eb6:	f7fd f88d 	bl	8002fd4 <HAL_GetTick>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d907      	bls.n	8005ed4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e150      	b.n	800616a <HAL_RCC_OscConfig+0x4e2>
 8005ec8:	40023800 	.word	0x40023800
 8005ecc:	42470000 	.word	0x42470000
 8005ed0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ed4:	4b88      	ldr	r3, [pc, #544]	; (80060f8 <HAL_RCC_OscConfig+0x470>)
 8005ed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ed8:	f003 0302 	and.w	r3, r3, #2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1ea      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x22e>
>>>>>>> flight_hardware
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0304 	and.w	r3, r3, #4
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f000 8097 	beq.w	800609c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	75fb      	strb	r3, [r7, #23]
=======
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0304 	and.w	r3, r3, #4
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f000 8097 	beq.w	800601c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	75fb      	strb	r3, [r7, #23]
>>>>>>> flight_hardware
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 8005f72:	4b81      	ldr	r3, [pc, #516]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8005f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10f      	bne.n	8005f9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f7e:	2300      	movs	r3, #0
 8005f80:	60bb      	str	r3, [r7, #8]
 8005f82:	4b7d      	ldr	r3, [pc, #500]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8005f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f86:	4a7c      	ldr	r2, [pc, #496]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8005f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8005f8e:	4b7a      	ldr	r3, [pc, #488]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8005f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f96:	60bb      	str	r3, [r7, #8]
 8005f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f9e:	4b77      	ldr	r3, [pc, #476]	; (800617c <HAL_RCC_OscConfig+0x474>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d118      	bne.n	8005fdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005faa:	4b74      	ldr	r3, [pc, #464]	; (800617c <HAL_RCC_OscConfig+0x474>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a73      	ldr	r2, [pc, #460]	; (800617c <HAL_RCC_OscConfig+0x474>)
 8005fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fb6:	f7fd f84d 	bl	8003054 <HAL_GetTick>
 8005fba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fbc:	e008      	b.n	8005fd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fbe:	f7fd f849 	bl	8003054 <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d901      	bls.n	8005fd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e10c      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fd0:	4b6a      	ldr	r3, [pc, #424]	; (800617c <HAL_RCC_OscConfig+0x474>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d0f0      	beq.n	8005fbe <HAL_RCC_OscConfig+0x2b6>
=======
 8005ef2:	4b81      	ldr	r3, [pc, #516]	; (80060f8 <HAL_RCC_OscConfig+0x470>)
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10f      	bne.n	8005f1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005efe:	2300      	movs	r3, #0
 8005f00:	60bb      	str	r3, [r7, #8]
 8005f02:	4b7d      	ldr	r3, [pc, #500]	; (80060f8 <HAL_RCC_OscConfig+0x470>)
 8005f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f06:	4a7c      	ldr	r2, [pc, #496]	; (80060f8 <HAL_RCC_OscConfig+0x470>)
 8005f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8005f0e:	4b7a      	ldr	r3, [pc, #488]	; (80060f8 <HAL_RCC_OscConfig+0x470>)
 8005f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f16:	60bb      	str	r3, [r7, #8]
 8005f18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f1e:	4b77      	ldr	r3, [pc, #476]	; (80060fc <HAL_RCC_OscConfig+0x474>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d118      	bne.n	8005f5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f2a:	4b74      	ldr	r3, [pc, #464]	; (80060fc <HAL_RCC_OscConfig+0x474>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a73      	ldr	r2, [pc, #460]	; (80060fc <HAL_RCC_OscConfig+0x474>)
 8005f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f36:	f7fd f84d 	bl	8002fd4 <HAL_GetTick>
 8005f3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f3c:	e008      	b.n	8005f50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f3e:	f7fd f849 	bl	8002fd4 <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d901      	bls.n	8005f50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e10c      	b.n	800616a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f50:	4b6a      	ldr	r3, [pc, #424]	; (80060fc <HAL_RCC_OscConfig+0x474>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d0f0      	beq.n	8005f3e <HAL_RCC_OscConfig+0x2b6>
>>>>>>> flight_hardware
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d106      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x2ea>
 8005fe4:	4b64      	ldr	r3, [pc, #400]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8005fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe8:	4a63      	ldr	r2, [pc, #396]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8005fea:	f043 0301 	orr.w	r3, r3, #1
 8005fee:	6713      	str	r3, [r2, #112]	; 0x70
 8005ff0:	e01c      	b.n	800602c <HAL_RCC_OscConfig+0x324>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	2b05      	cmp	r3, #5
 8005ff8:	d10c      	bne.n	8006014 <HAL_RCC_OscConfig+0x30c>
 8005ffa:	4b5f      	ldr	r3, [pc, #380]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8005ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ffe:	4a5e      	ldr	r2, [pc, #376]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8006000:	f043 0304 	orr.w	r3, r3, #4
 8006004:	6713      	str	r3, [r2, #112]	; 0x70
 8006006:	4b5c      	ldr	r3, [pc, #368]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8006008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800600a:	4a5b      	ldr	r2, [pc, #364]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 800600c:	f043 0301 	orr.w	r3, r3, #1
 8006010:	6713      	str	r3, [r2, #112]	; 0x70
 8006012:	e00b      	b.n	800602c <HAL_RCC_OscConfig+0x324>
 8006014:	4b58      	ldr	r3, [pc, #352]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8006016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006018:	4a57      	ldr	r2, [pc, #348]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 800601a:	f023 0301 	bic.w	r3, r3, #1
 800601e:	6713      	str	r3, [r2, #112]	; 0x70
 8006020:	4b55      	ldr	r3, [pc, #340]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8006022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006024:	4a54      	ldr	r2, [pc, #336]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8006026:	f023 0304 	bic.w	r3, r3, #4
 800602a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d015      	beq.n	8006060 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006034:	f7fd f80e 	bl	8003054 <HAL_GetTick>
 8006038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800603a:	e00a      	b.n	8006052 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800603c:	f7fd f80a 	bl	8003054 <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	f241 3288 	movw	r2, #5000	; 0x1388
 800604a:	4293      	cmp	r3, r2
 800604c:	d901      	bls.n	8006052 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800604e:	2303      	movs	r3, #3
 8006050:	e0cb      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006052:	4b49      	ldr	r3, [pc, #292]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8006054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006056:	f003 0302 	and.w	r3, r3, #2
 800605a:	2b00      	cmp	r3, #0
 800605c:	d0ee      	beq.n	800603c <HAL_RCC_OscConfig+0x334>
 800605e:	e014      	b.n	800608a <HAL_RCC_OscConfig+0x382>
=======
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d106      	bne.n	8005f72 <HAL_RCC_OscConfig+0x2ea>
 8005f64:	4b64      	ldr	r3, [pc, #400]	; (80060f8 <HAL_RCC_OscConfig+0x470>)
 8005f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f68:	4a63      	ldr	r2, [pc, #396]	; (80060f8 <HAL_RCC_OscConfig+0x470>)
 8005f6a:	f043 0301 	orr.w	r3, r3, #1
 8005f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8005f70:	e01c      	b.n	8005fac <HAL_RCC_OscConfig+0x324>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	2b05      	cmp	r3, #5
 8005f78:	d10c      	bne.n	8005f94 <HAL_RCC_OscConfig+0x30c>
 8005f7a:	4b5f      	ldr	r3, [pc, #380]	; (80060f8 <HAL_RCC_OscConfig+0x470>)
 8005f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f7e:	4a5e      	ldr	r2, [pc, #376]	; (80060f8 <HAL_RCC_OscConfig+0x470>)
 8005f80:	f043 0304 	orr.w	r3, r3, #4
 8005f84:	6713      	str	r3, [r2, #112]	; 0x70
 8005f86:	4b5c      	ldr	r3, [pc, #368]	; (80060f8 <HAL_RCC_OscConfig+0x470>)
 8005f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f8a:	4a5b      	ldr	r2, [pc, #364]	; (80060f8 <HAL_RCC_OscConfig+0x470>)
 8005f8c:	f043 0301 	orr.w	r3, r3, #1
 8005f90:	6713      	str	r3, [r2, #112]	; 0x70
 8005f92:	e00b      	b.n	8005fac <HAL_RCC_OscConfig+0x324>
 8005f94:	4b58      	ldr	r3, [pc, #352]	; (80060f8 <HAL_RCC_OscConfig+0x470>)
 8005f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f98:	4a57      	ldr	r2, [pc, #348]	; (80060f8 <HAL_RCC_OscConfig+0x470>)
 8005f9a:	f023 0301 	bic.w	r3, r3, #1
 8005f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8005fa0:	4b55      	ldr	r3, [pc, #340]	; (80060f8 <HAL_RCC_OscConfig+0x470>)
 8005fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa4:	4a54      	ldr	r2, [pc, #336]	; (80060f8 <HAL_RCC_OscConfig+0x470>)
 8005fa6:	f023 0304 	bic.w	r3, r3, #4
 8005faa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d015      	beq.n	8005fe0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fb4:	f7fd f80e 	bl	8002fd4 <HAL_GetTick>
 8005fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fba:	e00a      	b.n	8005fd2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fbc:	f7fd f80a 	bl	8002fd4 <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d901      	bls.n	8005fd2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e0cb      	b.n	800616a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fd2:	4b49      	ldr	r3, [pc, #292]	; (80060f8 <HAL_RCC_OscConfig+0x470>)
 8005fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd6:	f003 0302 	and.w	r3, r3, #2
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d0ee      	beq.n	8005fbc <HAL_RCC_OscConfig+0x334>
 8005fde:	e014      	b.n	800600a <HAL_RCC_OscConfig+0x382>
>>>>>>> flight_hardware
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8006060:	f7fc fff8 	bl	8003054 <HAL_GetTick>
 8006064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006066:	e00a      	b.n	800607e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006068:	f7fc fff4 	bl	8003054 <HAL_GetTick>
 800606c:	4602      	mov	r2, r0
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	f241 3288 	movw	r2, #5000	; 0x1388
 8006076:	4293      	cmp	r3, r2
 8006078:	d901      	bls.n	800607e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800607a:	2303      	movs	r3, #3
 800607c:	e0b5      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800607e:	4b3e      	ldr	r3, [pc, #248]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8006080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006082:	f003 0302 	and.w	r3, r3, #2
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1ee      	bne.n	8006068 <HAL_RCC_OscConfig+0x360>
=======
 8005fe0:	f7fc fff8 	bl	8002fd4 <HAL_GetTick>
 8005fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fe6:	e00a      	b.n	8005ffe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fe8:	f7fc fff4 	bl	8002fd4 <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d901      	bls.n	8005ffe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e0b5      	b.n	800616a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ffe:	4b3e      	ldr	r3, [pc, #248]	; (80060f8 <HAL_RCC_OscConfig+0x470>)
 8006000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006002:	f003 0302 	and.w	r3, r3, #2
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1ee      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x360>
>>>>>>> flight_hardware
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< HEAD
 800608a:	7dfb      	ldrb	r3, [r7, #23]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d105      	bne.n	800609c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006090:	4b39      	ldr	r3, [pc, #228]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8006092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006094:	4a38      	ldr	r2, [pc, #224]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8006096:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800609a:	6413      	str	r3, [r2, #64]	; 0x40
=======
 800600a:	7dfb      	ldrb	r3, [r7, #23]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d105      	bne.n	800601c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006010:	4b39      	ldr	r3, [pc, #228]	; (80060f8 <HAL_RCC_OscConfig+0x470>)
 8006012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006014:	4a38      	ldr	r2, [pc, #224]	; (80060f8 <HAL_RCC_OscConfig+0x470>)
 8006016:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800601a:	6413      	str	r3, [r2, #64]	; 0x40
>>>>>>> flight_hardware
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f000 80a1 	beq.w	80061e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060a6:	4b34      	ldr	r3, [pc, #208]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f003 030c 	and.w	r3, r3, #12
 80060ae:	2b08      	cmp	r3, #8
 80060b0:	d05c      	beq.n	800616c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	699b      	ldr	r3, [r3, #24]
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d141      	bne.n	800613e <HAL_RCC_OscConfig+0x436>
=======
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	699b      	ldr	r3, [r3, #24]
 8006020:	2b00      	cmp	r3, #0
 8006022:	f000 80a1 	beq.w	8006168 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006026:	4b34      	ldr	r3, [pc, #208]	; (80060f8 <HAL_RCC_OscConfig+0x470>)
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f003 030c 	and.w	r3, r3, #12
 800602e:	2b08      	cmp	r3, #8
 8006030:	d05c      	beq.n	80060ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	2b02      	cmp	r3, #2
 8006038:	d141      	bne.n	80060be <HAL_RCC_OscConfig+0x436>
>>>>>>> flight_hardware
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 80060ba:	4b31      	ldr	r3, [pc, #196]	; (8006180 <HAL_RCC_OscConfig+0x478>)
 80060bc:	2200      	movs	r2, #0
 80060be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060c0:	f7fc ffc8 	bl	8003054 <HAL_GetTick>
 80060c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060c6:	e008      	b.n	80060da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060c8:	f7fc ffc4 	bl	8003054 <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d901      	bls.n	80060da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e087      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060da:	4b27      	ldr	r3, [pc, #156]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1f0      	bne.n	80060c8 <HAL_RCC_OscConfig+0x3c0>
=======
 800603a:	4b31      	ldr	r3, [pc, #196]	; (8006100 <HAL_RCC_OscConfig+0x478>)
 800603c:	2200      	movs	r2, #0
 800603e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006040:	f7fc ffc8 	bl	8002fd4 <HAL_GetTick>
 8006044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006046:	e008      	b.n	800605a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006048:	f7fc ffc4 	bl	8002fd4 <HAL_GetTick>
 800604c:	4602      	mov	r2, r0
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	2b02      	cmp	r3, #2
 8006054:	d901      	bls.n	800605a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e087      	b.n	800616a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800605a:	4b27      	ldr	r3, [pc, #156]	; (80060f8 <HAL_RCC_OscConfig+0x470>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d1f0      	bne.n	8006048 <HAL_RCC_OscConfig+0x3c0>
>>>>>>> flight_hardware
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
<<<<<<< HEAD
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	69da      	ldr	r2, [r3, #28]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	431a      	orrs	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f4:	019b      	lsls	r3, r3, #6
 80060f6:	431a      	orrs	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fc:	085b      	lsrs	r3, r3, #1
 80060fe:	3b01      	subs	r3, #1
 8006100:	041b      	lsls	r3, r3, #16
 8006102:	431a      	orrs	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006108:	061b      	lsls	r3, r3, #24
 800610a:	491b      	ldr	r1, [pc, #108]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 800610c:	4313      	orrs	r3, r2
 800610e:	604b      	str	r3, [r1, #4]
=======
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	69da      	ldr	r2, [r3, #28]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	431a      	orrs	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006074:	019b      	lsls	r3, r3, #6
 8006076:	431a      	orrs	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607c:	085b      	lsrs	r3, r3, #1
 800607e:	3b01      	subs	r3, #1
 8006080:	041b      	lsls	r3, r3, #16
 8006082:	431a      	orrs	r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006088:	061b      	lsls	r3, r3, #24
 800608a:	491b      	ldr	r1, [pc, #108]	; (80060f8 <HAL_RCC_OscConfig+0x470>)
 800608c:	4313      	orrs	r3, r2
 800608e:	604b      	str	r3, [r1, #4]
>>>>>>> flight_hardware
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< HEAD
 8006110:	4b1b      	ldr	r3, [pc, #108]	; (8006180 <HAL_RCC_OscConfig+0x478>)
 8006112:	2201      	movs	r2, #1
 8006114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006116:	f7fc ff9d 	bl	8003054 <HAL_GetTick>
 800611a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800611c:	e008      	b.n	8006130 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800611e:	f7fc ff99 	bl	8003054 <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	2b02      	cmp	r3, #2
 800612a:	d901      	bls.n	8006130 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e05c      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006130:	4b11      	ldr	r3, [pc, #68]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006138:	2b00      	cmp	r3, #0
 800613a:	d0f0      	beq.n	800611e <HAL_RCC_OscConfig+0x416>
 800613c:	e054      	b.n	80061e8 <HAL_RCC_OscConfig+0x4e0>
=======
 8006090:	4b1b      	ldr	r3, [pc, #108]	; (8006100 <HAL_RCC_OscConfig+0x478>)
 8006092:	2201      	movs	r2, #1
 8006094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006096:	f7fc ff9d 	bl	8002fd4 <HAL_GetTick>
 800609a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800609c:	e008      	b.n	80060b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800609e:	f7fc ff99 	bl	8002fd4 <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d901      	bls.n	80060b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e05c      	b.n	800616a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060b0:	4b11      	ldr	r3, [pc, #68]	; (80060f8 <HAL_RCC_OscConfig+0x470>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d0f0      	beq.n	800609e <HAL_RCC_OscConfig+0x416>
 80060bc:	e054      	b.n	8006168 <HAL_RCC_OscConfig+0x4e0>
>>>>>>> flight_hardware
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 800613e:	4b10      	ldr	r3, [pc, #64]	; (8006180 <HAL_RCC_OscConfig+0x478>)
 8006140:	2200      	movs	r2, #0
 8006142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006144:	f7fc ff86 	bl	8003054 <HAL_GetTick>
 8006148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800614a:	e008      	b.n	800615e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800614c:	f7fc ff82 	bl	8003054 <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	2b02      	cmp	r3, #2
 8006158:	d901      	bls.n	800615e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e045      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800615e:	4b06      	ldr	r3, [pc, #24]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1f0      	bne.n	800614c <HAL_RCC_OscConfig+0x444>
 800616a:	e03d      	b.n	80061e8 <HAL_RCC_OscConfig+0x4e0>
=======
 80060be:	4b10      	ldr	r3, [pc, #64]	; (8006100 <HAL_RCC_OscConfig+0x478>)
 80060c0:	2200      	movs	r2, #0
 80060c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060c4:	f7fc ff86 	bl	8002fd4 <HAL_GetTick>
 80060c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060ca:	e008      	b.n	80060de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060cc:	f7fc ff82 	bl	8002fd4 <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d901      	bls.n	80060de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e045      	b.n	800616a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060de:	4b06      	ldr	r3, [pc, #24]	; (80060f8 <HAL_RCC_OscConfig+0x470>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d1f0      	bne.n	80060cc <HAL_RCC_OscConfig+0x444>
 80060ea:	e03d      	b.n	8006168 <HAL_RCC_OscConfig+0x4e0>
>>>>>>> flight_hardware
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	699b      	ldr	r3, [r3, #24]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d107      	bne.n	8006184 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e038      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
 8006178:	40023800 	.word	0x40023800
 800617c:	40007000 	.word	0x40007000
 8006180:	42470060 	.word	0x42470060
=======
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d107      	bne.n	8006104 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e038      	b.n	800616a <HAL_RCC_OscConfig+0x4e2>
 80060f8:	40023800 	.word	0x40023800
 80060fc:	40007000 	.word	0x40007000
 8006100:	42470060 	.word	0x42470060
>>>>>>> flight_hardware
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
<<<<<<< HEAD
 8006184:	4b1b      	ldr	r3, [pc, #108]	; (80061f4 <HAL_RCC_OscConfig+0x4ec>)
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	60fb      	str	r3, [r7, #12]
=======
 8006104:	4b1b      	ldr	r3, [pc, #108]	; (8006174 <HAL_RCC_OscConfig+0x4ec>)
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	60fb      	str	r3, [r7, #12]
>>>>>>> flight_hardware
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
<<<<<<< HEAD
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	2b01      	cmp	r3, #1
 8006190:	d028      	beq.n	80061e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800619c:	429a      	cmp	r2, r3
 800619e:	d121      	bne.n	80061e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d11a      	bne.n	80061e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80061b4:	4013      	ands	r3, r2
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80061ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061bc:	4293      	cmp	r3, r2
 80061be:	d111      	bne.n	80061e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ca:	085b      	lsrs	r3, r3, #1
 80061cc:	3b01      	subs	r3, #1
 80061ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d107      	bne.n	80061e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d001      	beq.n	80061e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e000      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
=======
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d028      	beq.n	8006164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800611c:	429a      	cmp	r2, r3
 800611e:	d121      	bne.n	8006164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800612a:	429a      	cmp	r2, r3
 800612c:	d11a      	bne.n	8006164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006134:	4013      	ands	r3, r2
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800613a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800613c:	4293      	cmp	r3, r2
 800613e:	d111      	bne.n	8006164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614a:	085b      	lsrs	r3, r3, #1
 800614c:	3b01      	subs	r3, #1
 800614e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006150:	429a      	cmp	r2, r3
 8006152:	d107      	bne.n	8006164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800615e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006160:	429a      	cmp	r2, r3
 8006162:	d001      	beq.n	8006168 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e000      	b.n	800616a <HAL_RCC_OscConfig+0x4e2>
>>>>>>> flight_hardware
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3718      	adds	r7, #24
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	40023800 	.word	0x40023800

080061f8 <HAL_RCC_ClockConfig>:
=======
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3718      	adds	r7, #24
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	40023800 	.word	0x40023800

08006178 <HAL_RCC_ClockConfig>:
>>>>>>> flight_hardware
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
=======
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
>>>>>>> flight_hardware
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d101      	bne.n	800620c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e0cc      	b.n	80063a6 <HAL_RCC_ClockConfig+0x1ae>
=======
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d101      	bne.n	800618c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	e0cc      	b.n	8006326 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> flight_hardware
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 800620c:	4b68      	ldr	r3, [pc, #416]	; (80063b0 <HAL_RCC_ClockConfig+0x1b8>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 030f 	and.w	r3, r3, #15
 8006214:	683a      	ldr	r2, [r7, #0]
 8006216:	429a      	cmp	r2, r3
 8006218:	d90c      	bls.n	8006234 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800621a:	4b65      	ldr	r3, [pc, #404]	; (80063b0 <HAL_RCC_ClockConfig+0x1b8>)
 800621c:	683a      	ldr	r2, [r7, #0]
 800621e:	b2d2      	uxtb	r2, r2
 8006220:	701a      	strb	r2, [r3, #0]
=======
 800618c:	4b68      	ldr	r3, [pc, #416]	; (8006330 <HAL_RCC_ClockConfig+0x1b8>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 030f 	and.w	r3, r3, #15
 8006194:	683a      	ldr	r2, [r7, #0]
 8006196:	429a      	cmp	r2, r3
 8006198:	d90c      	bls.n	80061b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800619a:	4b65      	ldr	r3, [pc, #404]	; (8006330 <HAL_RCC_ClockConfig+0x1b8>)
 800619c:	683a      	ldr	r2, [r7, #0]
 800619e:	b2d2      	uxtb	r2, r2
 80061a0:	701a      	strb	r2, [r3, #0]
>>>>>>> flight_hardware

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8006222:	4b63      	ldr	r3, [pc, #396]	; (80063b0 <HAL_RCC_ClockConfig+0x1b8>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 030f 	and.w	r3, r3, #15
 800622a:	683a      	ldr	r2, [r7, #0]
 800622c:	429a      	cmp	r2, r3
 800622e:	d001      	beq.n	8006234 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e0b8      	b.n	80063a6 <HAL_RCC_ClockConfig+0x1ae>
=======
 80061a2:	4b63      	ldr	r3, [pc, #396]	; (8006330 <HAL_RCC_ClockConfig+0x1b8>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 030f 	and.w	r3, r3, #15
 80061aa:	683a      	ldr	r2, [r7, #0]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d001      	beq.n	80061b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e0b8      	b.n	8006326 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> flight_hardware
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0302 	and.w	r3, r3, #2
 800623c:	2b00      	cmp	r3, #0
 800623e:	d020      	beq.n	8006282 <HAL_RCC_ClockConfig+0x8a>
=======
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0302 	and.w	r3, r3, #2
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d020      	beq.n	8006202 <HAL_RCC_ClockConfig+0x8a>
>>>>>>> flight_hardware
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 0304 	and.w	r3, r3, #4
 8006248:	2b00      	cmp	r3, #0
 800624a:	d005      	beq.n	8006258 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800624c:	4b59      	ldr	r3, [pc, #356]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	4a58      	ldr	r2, [pc, #352]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006252:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006256:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0308 	and.w	r3, r3, #8
 8006260:	2b00      	cmp	r3, #0
 8006262:	d005      	beq.n	8006270 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006264:	4b53      	ldr	r3, [pc, #332]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	4a52      	ldr	r2, [pc, #328]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 800626a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800626e:	6093      	str	r3, [r2, #8]
=======
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0304 	and.w	r3, r3, #4
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d005      	beq.n	80061d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061cc:	4b59      	ldr	r3, [pc, #356]	; (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	4a58      	ldr	r2, [pc, #352]	; (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 80061d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80061d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0308 	and.w	r3, r3, #8
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d005      	beq.n	80061f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061e4:	4b53      	ldr	r3, [pc, #332]	; (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	4a52      	ldr	r2, [pc, #328]	; (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 80061ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80061ee:	6093      	str	r3, [r2, #8]
>>>>>>> flight_hardware
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 8006270:	4b50      	ldr	r3, [pc, #320]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	494d      	ldr	r1, [pc, #308]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 800627e:	4313      	orrs	r3, r2
 8006280:	608b      	str	r3, [r1, #8]
=======
 80061f0:	4b50      	ldr	r3, [pc, #320]	; (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	494d      	ldr	r1, [pc, #308]	; (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 80061fe:	4313      	orrs	r3, r2
 8006200:	608b      	str	r3, [r1, #8]
>>>>>>> flight_hardware
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 0301 	and.w	r3, r3, #1
 800628a:	2b00      	cmp	r3, #0
 800628c:	d044      	beq.n	8006318 <HAL_RCC_ClockConfig+0x120>
=======
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 0301 	and.w	r3, r3, #1
 800620a:	2b00      	cmp	r3, #0
 800620c:	d044      	beq.n	8006298 <HAL_RCC_ClockConfig+0x120>
>>>>>>> flight_hardware
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	2b01      	cmp	r3, #1
 8006294:	d107      	bne.n	80062a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006296:	4b47      	ldr	r3, [pc, #284]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d119      	bne.n	80062d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e07f      	b.n	80063a6 <HAL_RCC_ClockConfig+0x1ae>
=======
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	2b01      	cmp	r3, #1
 8006214:	d107      	bne.n	8006226 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006216:	4b47      	ldr	r3, [pc, #284]	; (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d119      	bne.n	8006256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e07f      	b.n	8006326 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> flight_hardware
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
<<<<<<< HEAD
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d003      	beq.n	80062b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062b2:	2b03      	cmp	r3, #3
 80062b4:	d107      	bne.n	80062c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062b6:	4b3f      	ldr	r3, [pc, #252]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d109      	bne.n	80062d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e06f      	b.n	80063a6 <HAL_RCC_ClockConfig+0x1ae>
=======
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	2b02      	cmp	r3, #2
 800622c:	d003      	beq.n	8006236 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006232:	2b03      	cmp	r3, #3
 8006234:	d107      	bne.n	8006246 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006236:	4b3f      	ldr	r3, [pc, #252]	; (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d109      	bne.n	8006256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e06f      	b.n	8006326 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> flight_hardware
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 80062c6:	4b3b      	ldr	r3, [pc, #236]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0302 	and.w	r3, r3, #2
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d101      	bne.n	80062d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e067      	b.n	80063a6 <HAL_RCC_ClockConfig+0x1ae>
=======
 8006246:	4b3b      	ldr	r3, [pc, #236]	; (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 0302 	and.w	r3, r3, #2
 800624e:	2b00      	cmp	r3, #0
 8006250:	d101      	bne.n	8006256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e067      	b.n	8006326 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> flight_hardware
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< HEAD
 80062d6:	4b37      	ldr	r3, [pc, #220]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f023 0203 	bic.w	r2, r3, #3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	4934      	ldr	r1, [pc, #208]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 80062e4:	4313      	orrs	r3, r2
 80062e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062e8:	f7fc feb4 	bl	8003054 <HAL_GetTick>
 80062ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062ee:	e00a      	b.n	8006306 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062f0:	f7fc feb0 	bl	8003054 <HAL_GetTick>
 80062f4:	4602      	mov	r2, r0
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80062fe:	4293      	cmp	r3, r2
 8006300:	d901      	bls.n	8006306 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e04f      	b.n	80063a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006306:	4b2b      	ldr	r3, [pc, #172]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	f003 020c 	and.w	r2, r3, #12
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	429a      	cmp	r2, r3
 8006316:	d1eb      	bne.n	80062f0 <HAL_RCC_ClockConfig+0xf8>
=======
 8006256:	4b37      	ldr	r3, [pc, #220]	; (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	f023 0203 	bic.w	r2, r3, #3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	4934      	ldr	r1, [pc, #208]	; (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 8006264:	4313      	orrs	r3, r2
 8006266:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006268:	f7fc feb4 	bl	8002fd4 <HAL_GetTick>
 800626c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800626e:	e00a      	b.n	8006286 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006270:	f7fc feb0 	bl	8002fd4 <HAL_GetTick>
 8006274:	4602      	mov	r2, r0
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	f241 3288 	movw	r2, #5000	; 0x1388
 800627e:	4293      	cmp	r3, r2
 8006280:	d901      	bls.n	8006286 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e04f      	b.n	8006326 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006286:	4b2b      	ldr	r3, [pc, #172]	; (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f003 020c 	and.w	r2, r3, #12
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	429a      	cmp	r2, r3
 8006296:	d1eb      	bne.n	8006270 <HAL_RCC_ClockConfig+0xf8>
>>>>>>> flight_hardware
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8006318:	4b25      	ldr	r3, [pc, #148]	; (80063b0 <HAL_RCC_ClockConfig+0x1b8>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 030f 	and.w	r3, r3, #15
 8006320:	683a      	ldr	r2, [r7, #0]
 8006322:	429a      	cmp	r2, r3
 8006324:	d20c      	bcs.n	8006340 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006326:	4b22      	ldr	r3, [pc, #136]	; (80063b0 <HAL_RCC_ClockConfig+0x1b8>)
 8006328:	683a      	ldr	r2, [r7, #0]
 800632a:	b2d2      	uxtb	r2, r2
 800632c:	701a      	strb	r2, [r3, #0]
=======
 8006298:	4b25      	ldr	r3, [pc, #148]	; (8006330 <HAL_RCC_ClockConfig+0x1b8>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 030f 	and.w	r3, r3, #15
 80062a0:	683a      	ldr	r2, [r7, #0]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d20c      	bcs.n	80062c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062a6:	4b22      	ldr	r3, [pc, #136]	; (8006330 <HAL_RCC_ClockConfig+0x1b8>)
 80062a8:	683a      	ldr	r2, [r7, #0]
 80062aa:	b2d2      	uxtb	r2, r2
 80062ac:	701a      	strb	r2, [r3, #0]
>>>>>>> flight_hardware

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 800632e:	4b20      	ldr	r3, [pc, #128]	; (80063b0 <HAL_RCC_ClockConfig+0x1b8>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 030f 	and.w	r3, r3, #15
 8006336:	683a      	ldr	r2, [r7, #0]
 8006338:	429a      	cmp	r2, r3
 800633a:	d001      	beq.n	8006340 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	e032      	b.n	80063a6 <HAL_RCC_ClockConfig+0x1ae>
=======
 80062ae:	4b20      	ldr	r3, [pc, #128]	; (8006330 <HAL_RCC_ClockConfig+0x1b8>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 030f 	and.w	r3, r3, #15
 80062b6:	683a      	ldr	r2, [r7, #0]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d001      	beq.n	80062c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	e032      	b.n	8006326 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> flight_hardware
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0304 	and.w	r3, r3, #4
 8006348:	2b00      	cmp	r3, #0
 800634a:	d008      	beq.n	800635e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800634c:	4b19      	ldr	r3, [pc, #100]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	4916      	ldr	r1, [pc, #88]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 800635a:	4313      	orrs	r3, r2
 800635c:	608b      	str	r3, [r1, #8]
=======
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0304 	and.w	r3, r3, #4
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d008      	beq.n	80062de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062cc:	4b19      	ldr	r3, [pc, #100]	; (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	4916      	ldr	r1, [pc, #88]	; (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 80062da:	4313      	orrs	r3, r2
 80062dc:	608b      	str	r3, [r1, #8]
>>>>>>> flight_hardware
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0308 	and.w	r3, r3, #8
 8006366:	2b00      	cmp	r3, #0
 8006368:	d009      	beq.n	800637e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800636a:	4b12      	ldr	r3, [pc, #72]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	00db      	lsls	r3, r3, #3
 8006378:	490e      	ldr	r1, [pc, #56]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 800637a:	4313      	orrs	r3, r2
 800637c:	608b      	str	r3, [r1, #8]
=======
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 0308 	and.w	r3, r3, #8
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d009      	beq.n	80062fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062ea:	4b12      	ldr	r3, [pc, #72]	; (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	00db      	lsls	r3, r3, #3
 80062f8:	490e      	ldr	r1, [pc, #56]	; (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 80062fa:	4313      	orrs	r3, r2
 80062fc:	608b      	str	r3, [r1, #8]
>>>>>>> flight_hardware
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 800637e:	f000 f821 	bl	80063c4 <HAL_RCC_GetSysClockFreq>
 8006382:	4602      	mov	r2, r0
 8006384:	4b0b      	ldr	r3, [pc, #44]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	091b      	lsrs	r3, r3, #4
 800638a:	f003 030f 	and.w	r3, r3, #15
 800638e:	490a      	ldr	r1, [pc, #40]	; (80063b8 <HAL_RCC_ClockConfig+0x1c0>)
 8006390:	5ccb      	ldrb	r3, [r1, r3]
 8006392:	fa22 f303 	lsr.w	r3, r2, r3
 8006396:	4a09      	ldr	r2, [pc, #36]	; (80063bc <HAL_RCC_ClockConfig+0x1c4>)
 8006398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800639a:	4b09      	ldr	r3, [pc, #36]	; (80063c0 <HAL_RCC_ClockConfig+0x1c8>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4618      	mov	r0, r3
 80063a0:	f7fc fe14 	bl	8002fcc <HAL_InitTick>

  return HAL_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3710      	adds	r7, #16
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	40023c00 	.word	0x40023c00
 80063b4:	40023800 	.word	0x40023800
 80063b8:	0800957c 	.word	0x0800957c
 80063bc:	2000001c 	.word	0x2000001c
 80063c0:	20000020 	.word	0x20000020

080063c4 <HAL_RCC_GetSysClockFreq>:
=======
 80062fe:	f000 f821 	bl	8006344 <HAL_RCC_GetSysClockFreq>
 8006302:	4602      	mov	r2, r0
 8006304:	4b0b      	ldr	r3, [pc, #44]	; (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	091b      	lsrs	r3, r3, #4
 800630a:	f003 030f 	and.w	r3, r3, #15
 800630e:	490a      	ldr	r1, [pc, #40]	; (8006338 <HAL_RCC_ClockConfig+0x1c0>)
 8006310:	5ccb      	ldrb	r3, [r1, r3]
 8006312:	fa22 f303 	lsr.w	r3, r2, r3
 8006316:	4a09      	ldr	r2, [pc, #36]	; (800633c <HAL_RCC_ClockConfig+0x1c4>)
 8006318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800631a:	4b09      	ldr	r3, [pc, #36]	; (8006340 <HAL_RCC_ClockConfig+0x1c8>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4618      	mov	r0, r3
 8006320:	f7fc fe14 	bl	8002f4c <HAL_InitTick>

  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	40023c00 	.word	0x40023c00
 8006334:	40023800 	.word	0x40023800
 8006338:	080094fc 	.word	0x080094fc
 800633c:	2000001c 	.word	0x2000001c
 8006340:	20000020 	.word	0x20000020

08006344 <HAL_RCC_GetSysClockFreq>:
>>>>>>> flight_hardware
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 80063c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063c8:	b090      	sub	sp, #64	; 0x40
 80063ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80063cc:	2300      	movs	r3, #0
 80063ce:	637b      	str	r3, [r7, #52]	; 0x34
 80063d0:	2300      	movs	r3, #0
 80063d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063d4:	2300      	movs	r3, #0
 80063d6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80063d8:	2300      	movs	r3, #0
 80063da:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063dc:	4b59      	ldr	r3, [pc, #356]	; (8006544 <HAL_RCC_GetSysClockFreq+0x180>)
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f003 030c 	and.w	r3, r3, #12
 80063e4:	2b08      	cmp	r3, #8
 80063e6:	d00d      	beq.n	8006404 <HAL_RCC_GetSysClockFreq+0x40>
 80063e8:	2b08      	cmp	r3, #8
 80063ea:	f200 80a1 	bhi.w	8006530 <HAL_RCC_GetSysClockFreq+0x16c>
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d002      	beq.n	80063f8 <HAL_RCC_GetSysClockFreq+0x34>
 80063f2:	2b04      	cmp	r3, #4
 80063f4:	d003      	beq.n	80063fe <HAL_RCC_GetSysClockFreq+0x3a>
 80063f6:	e09b      	b.n	8006530 <HAL_RCC_GetSysClockFreq+0x16c>
=======
 8006344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006348:	b090      	sub	sp, #64	; 0x40
 800634a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800634c:	2300      	movs	r3, #0
 800634e:	637b      	str	r3, [r7, #52]	; 0x34
 8006350:	2300      	movs	r3, #0
 8006352:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006354:	2300      	movs	r3, #0
 8006356:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006358:	2300      	movs	r3, #0
 800635a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800635c:	4b59      	ldr	r3, [pc, #356]	; (80064c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f003 030c 	and.w	r3, r3, #12
 8006364:	2b08      	cmp	r3, #8
 8006366:	d00d      	beq.n	8006384 <HAL_RCC_GetSysClockFreq+0x40>
 8006368:	2b08      	cmp	r3, #8
 800636a:	f200 80a1 	bhi.w	80064b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800636e:	2b00      	cmp	r3, #0
 8006370:	d002      	beq.n	8006378 <HAL_RCC_GetSysClockFreq+0x34>
 8006372:	2b04      	cmp	r3, #4
 8006374:	d003      	beq.n	800637e <HAL_RCC_GetSysClockFreq+0x3a>
 8006376:	e09b      	b.n	80064b0 <HAL_RCC_GetSysClockFreq+0x16c>
>>>>>>> flight_hardware
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 80063f8:	4b53      	ldr	r3, [pc, #332]	; (8006548 <HAL_RCC_GetSysClockFreq+0x184>)
 80063fa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80063fc:	e09b      	b.n	8006536 <HAL_RCC_GetSysClockFreq+0x172>
=======
 8006378:	4b53      	ldr	r3, [pc, #332]	; (80064c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800637a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800637c:	e09b      	b.n	80064b6 <HAL_RCC_GetSysClockFreq+0x172>
>>>>>>> flight_hardware
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 80063fe:	4b53      	ldr	r3, [pc, #332]	; (800654c <HAL_RCC_GetSysClockFreq+0x188>)
 8006400:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006402:	e098      	b.n	8006536 <HAL_RCC_GetSysClockFreq+0x172>
=======
 800637e:	4b53      	ldr	r3, [pc, #332]	; (80064cc <HAL_RCC_GetSysClockFreq+0x188>)
 8006380:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006382:	e098      	b.n	80064b6 <HAL_RCC_GetSysClockFreq+0x172>
>>>>>>> flight_hardware
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< HEAD
 8006404:	4b4f      	ldr	r3, [pc, #316]	; (8006544 <HAL_RCC_GetSysClockFreq+0x180>)
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800640c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800640e:	4b4d      	ldr	r3, [pc, #308]	; (8006544 <HAL_RCC_GetSysClockFreq+0x180>)
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006416:	2b00      	cmp	r3, #0
 8006418:	d028      	beq.n	800646c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800641a:	4b4a      	ldr	r3, [pc, #296]	; (8006544 <HAL_RCC_GetSysClockFreq+0x180>)
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	099b      	lsrs	r3, r3, #6
 8006420:	2200      	movs	r2, #0
 8006422:	623b      	str	r3, [r7, #32]
 8006424:	627a      	str	r2, [r7, #36]	; 0x24
 8006426:	6a3b      	ldr	r3, [r7, #32]
 8006428:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800642c:	2100      	movs	r1, #0
 800642e:	4b47      	ldr	r3, [pc, #284]	; (800654c <HAL_RCC_GetSysClockFreq+0x188>)
 8006430:	fb03 f201 	mul.w	r2, r3, r1
 8006434:	2300      	movs	r3, #0
 8006436:	fb00 f303 	mul.w	r3, r0, r3
 800643a:	4413      	add	r3, r2
 800643c:	4a43      	ldr	r2, [pc, #268]	; (800654c <HAL_RCC_GetSysClockFreq+0x188>)
 800643e:	fba0 1202 	umull	r1, r2, r0, r2
 8006442:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006444:	460a      	mov	r2, r1
 8006446:	62ba      	str	r2, [r7, #40]	; 0x28
 8006448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800644a:	4413      	add	r3, r2
 800644c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800644e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006450:	2200      	movs	r2, #0
 8006452:	61bb      	str	r3, [r7, #24]
 8006454:	61fa      	str	r2, [r7, #28]
 8006456:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800645a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800645e:	f7f9 fecd 	bl	80001fc <__aeabi_uldivmod>
 8006462:	4602      	mov	r2, r0
 8006464:	460b      	mov	r3, r1
 8006466:	4613      	mov	r3, r2
 8006468:	63fb      	str	r3, [r7, #60]	; 0x3c
 800646a:	e053      	b.n	8006514 <HAL_RCC_GetSysClockFreq+0x150>
=======
 8006384:	4b4f      	ldr	r3, [pc, #316]	; (80064c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800638c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800638e:	4b4d      	ldr	r3, [pc, #308]	; (80064c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d028      	beq.n	80063ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800639a:	4b4a      	ldr	r3, [pc, #296]	; (80064c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	099b      	lsrs	r3, r3, #6
 80063a0:	2200      	movs	r2, #0
 80063a2:	623b      	str	r3, [r7, #32]
 80063a4:	627a      	str	r2, [r7, #36]	; 0x24
 80063a6:	6a3b      	ldr	r3, [r7, #32]
 80063a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80063ac:	2100      	movs	r1, #0
 80063ae:	4b47      	ldr	r3, [pc, #284]	; (80064cc <HAL_RCC_GetSysClockFreq+0x188>)
 80063b0:	fb03 f201 	mul.w	r2, r3, r1
 80063b4:	2300      	movs	r3, #0
 80063b6:	fb00 f303 	mul.w	r3, r0, r3
 80063ba:	4413      	add	r3, r2
 80063bc:	4a43      	ldr	r2, [pc, #268]	; (80064cc <HAL_RCC_GetSysClockFreq+0x188>)
 80063be:	fba0 1202 	umull	r1, r2, r0, r2
 80063c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063c4:	460a      	mov	r2, r1
 80063c6:	62ba      	str	r2, [r7, #40]	; 0x28
 80063c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063ca:	4413      	add	r3, r2
 80063cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063d0:	2200      	movs	r2, #0
 80063d2:	61bb      	str	r3, [r7, #24]
 80063d4:	61fa      	str	r2, [r7, #28]
 80063d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80063de:	f7f9 ff0d 	bl	80001fc <__aeabi_uldivmod>
 80063e2:	4602      	mov	r2, r0
 80063e4:	460b      	mov	r3, r1
 80063e6:	4613      	mov	r3, r2
 80063e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063ea:	e053      	b.n	8006494 <HAL_RCC_GetSysClockFreq+0x150>
>>>>>>> flight_hardware
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< HEAD
 800646c:	4b35      	ldr	r3, [pc, #212]	; (8006544 <HAL_RCC_GetSysClockFreq+0x180>)
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	099b      	lsrs	r3, r3, #6
 8006472:	2200      	movs	r2, #0
 8006474:	613b      	str	r3, [r7, #16]
 8006476:	617a      	str	r2, [r7, #20]
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800647e:	f04f 0b00 	mov.w	fp, #0
 8006482:	4652      	mov	r2, sl
 8006484:	465b      	mov	r3, fp
 8006486:	f04f 0000 	mov.w	r0, #0
 800648a:	f04f 0100 	mov.w	r1, #0
 800648e:	0159      	lsls	r1, r3, #5
 8006490:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006494:	0150      	lsls	r0, r2, #5
 8006496:	4602      	mov	r2, r0
 8006498:	460b      	mov	r3, r1
 800649a:	ebb2 080a 	subs.w	r8, r2, sl
 800649e:	eb63 090b 	sbc.w	r9, r3, fp
 80064a2:	f04f 0200 	mov.w	r2, #0
 80064a6:	f04f 0300 	mov.w	r3, #0
 80064aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80064ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80064b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80064b6:	ebb2 0408 	subs.w	r4, r2, r8
 80064ba:	eb63 0509 	sbc.w	r5, r3, r9
 80064be:	f04f 0200 	mov.w	r2, #0
 80064c2:	f04f 0300 	mov.w	r3, #0
 80064c6:	00eb      	lsls	r3, r5, #3
 80064c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064cc:	00e2      	lsls	r2, r4, #3
 80064ce:	4614      	mov	r4, r2
 80064d0:	461d      	mov	r5, r3
 80064d2:	eb14 030a 	adds.w	r3, r4, sl
 80064d6:	603b      	str	r3, [r7, #0]
 80064d8:	eb45 030b 	adc.w	r3, r5, fp
 80064dc:	607b      	str	r3, [r7, #4]
 80064de:	f04f 0200 	mov.w	r2, #0
 80064e2:	f04f 0300 	mov.w	r3, #0
 80064e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80064ea:	4629      	mov	r1, r5
 80064ec:	028b      	lsls	r3, r1, #10
 80064ee:	4621      	mov	r1, r4
 80064f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80064f4:	4621      	mov	r1, r4
 80064f6:	028a      	lsls	r2, r1, #10
 80064f8:	4610      	mov	r0, r2
 80064fa:	4619      	mov	r1, r3
 80064fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064fe:	2200      	movs	r2, #0
 8006500:	60bb      	str	r3, [r7, #8]
 8006502:	60fa      	str	r2, [r7, #12]
 8006504:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006508:	f7f9 fe78 	bl	80001fc <__aeabi_uldivmod>
 800650c:	4602      	mov	r2, r0
 800650e:	460b      	mov	r3, r1
 8006510:	4613      	mov	r3, r2
 8006512:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006514:	4b0b      	ldr	r3, [pc, #44]	; (8006544 <HAL_RCC_GetSysClockFreq+0x180>)
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	0c1b      	lsrs	r3, r3, #16
 800651a:	f003 0303 	and.w	r3, r3, #3
 800651e:	3301      	adds	r3, #1
 8006520:	005b      	lsls	r3, r3, #1
 8006522:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006524:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006528:	fbb2 f3f3 	udiv	r3, r2, r3
 800652c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800652e:	e002      	b.n	8006536 <HAL_RCC_GetSysClockFreq+0x172>
=======
 80063ec:	4b35      	ldr	r3, [pc, #212]	; (80064c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	099b      	lsrs	r3, r3, #6
 80063f2:	2200      	movs	r2, #0
 80063f4:	613b      	str	r3, [r7, #16]
 80063f6:	617a      	str	r2, [r7, #20]
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80063fe:	f04f 0b00 	mov.w	fp, #0
 8006402:	4652      	mov	r2, sl
 8006404:	465b      	mov	r3, fp
 8006406:	f04f 0000 	mov.w	r0, #0
 800640a:	f04f 0100 	mov.w	r1, #0
 800640e:	0159      	lsls	r1, r3, #5
 8006410:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006414:	0150      	lsls	r0, r2, #5
 8006416:	4602      	mov	r2, r0
 8006418:	460b      	mov	r3, r1
 800641a:	ebb2 080a 	subs.w	r8, r2, sl
 800641e:	eb63 090b 	sbc.w	r9, r3, fp
 8006422:	f04f 0200 	mov.w	r2, #0
 8006426:	f04f 0300 	mov.w	r3, #0
 800642a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800642e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006432:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006436:	ebb2 0408 	subs.w	r4, r2, r8
 800643a:	eb63 0509 	sbc.w	r5, r3, r9
 800643e:	f04f 0200 	mov.w	r2, #0
 8006442:	f04f 0300 	mov.w	r3, #0
 8006446:	00eb      	lsls	r3, r5, #3
 8006448:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800644c:	00e2      	lsls	r2, r4, #3
 800644e:	4614      	mov	r4, r2
 8006450:	461d      	mov	r5, r3
 8006452:	eb14 030a 	adds.w	r3, r4, sl
 8006456:	603b      	str	r3, [r7, #0]
 8006458:	eb45 030b 	adc.w	r3, r5, fp
 800645c:	607b      	str	r3, [r7, #4]
 800645e:	f04f 0200 	mov.w	r2, #0
 8006462:	f04f 0300 	mov.w	r3, #0
 8006466:	e9d7 4500 	ldrd	r4, r5, [r7]
 800646a:	4629      	mov	r1, r5
 800646c:	028b      	lsls	r3, r1, #10
 800646e:	4621      	mov	r1, r4
 8006470:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006474:	4621      	mov	r1, r4
 8006476:	028a      	lsls	r2, r1, #10
 8006478:	4610      	mov	r0, r2
 800647a:	4619      	mov	r1, r3
 800647c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800647e:	2200      	movs	r2, #0
 8006480:	60bb      	str	r3, [r7, #8]
 8006482:	60fa      	str	r2, [r7, #12]
 8006484:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006488:	f7f9 feb8 	bl	80001fc <__aeabi_uldivmod>
 800648c:	4602      	mov	r2, r0
 800648e:	460b      	mov	r3, r1
 8006490:	4613      	mov	r3, r2
 8006492:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006494:	4b0b      	ldr	r3, [pc, #44]	; (80064c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	0c1b      	lsrs	r3, r3, #16
 800649a:	f003 0303 	and.w	r3, r3, #3
 800649e:	3301      	adds	r3, #1
 80064a0:	005b      	lsls	r3, r3, #1
 80064a2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80064a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80064a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80064ae:	e002      	b.n	80064b6 <HAL_RCC_GetSysClockFreq+0x172>
>>>>>>> flight_hardware
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 8006530:	4b05      	ldr	r3, [pc, #20]	; (8006548 <HAL_RCC_GetSysClockFreq+0x184>)
 8006532:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006534:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006538:	4618      	mov	r0, r3
 800653a:	3740      	adds	r7, #64	; 0x40
 800653c:	46bd      	mov	sp, r7
 800653e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006542:	bf00      	nop
 8006544:	40023800 	.word	0x40023800
 8006548:	00f42400 	.word	0x00f42400
 800654c:	017d7840 	.word	0x017d7840

08006550 <HAL_RCC_GetHCLKFreq>:
=======
 80064b0:	4b05      	ldr	r3, [pc, #20]	; (80064c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80064b2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80064b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3740      	adds	r7, #64	; 0x40
 80064bc:	46bd      	mov	sp, r7
 80064be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064c2:	bf00      	nop
 80064c4:	40023800 	.word	0x40023800
 80064c8:	00f42400 	.word	0x00f42400
 80064cc:	017d7840 	.word	0x017d7840

080064d0 <HAL_RCC_GetHCLKFreq>:
>>>>>>> flight_hardware
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 8006550:	b480      	push	{r7}
 8006552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006554:	4b03      	ldr	r3, [pc, #12]	; (8006564 <HAL_RCC_GetHCLKFreq+0x14>)
 8006556:	681b      	ldr	r3, [r3, #0]
}
 8006558:	4618      	mov	r0, r3
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	2000001c 	.word	0x2000001c

08006568 <HAL_RCC_GetPCLK1Freq>:
=======
 80064d0:	b480      	push	{r7}
 80064d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064d4:	4b03      	ldr	r3, [pc, #12]	; (80064e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80064d6:	681b      	ldr	r3, [r3, #0]
}
 80064d8:	4618      	mov	r0, r3
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	2000001c 	.word	0x2000001c

080064e8 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> flight_hardware
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 8006568:	b580      	push	{r7, lr}
 800656a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800656c:	f7ff fff0 	bl	8006550 <HAL_RCC_GetHCLKFreq>
 8006570:	4602      	mov	r2, r0
 8006572:	4b05      	ldr	r3, [pc, #20]	; (8006588 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	0a9b      	lsrs	r3, r3, #10
 8006578:	f003 0307 	and.w	r3, r3, #7
 800657c:	4903      	ldr	r1, [pc, #12]	; (800658c <HAL_RCC_GetPCLK1Freq+0x24>)
 800657e:	5ccb      	ldrb	r3, [r1, r3]
 8006580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006584:	4618      	mov	r0, r3
 8006586:	bd80      	pop	{r7, pc}
 8006588:	40023800 	.word	0x40023800
 800658c:	0800958c 	.word	0x0800958c

08006590 <HAL_RCC_GetPCLK2Freq>:
=======
 80064e8:	b580      	push	{r7, lr}
 80064ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80064ec:	f7ff fff0 	bl	80064d0 <HAL_RCC_GetHCLKFreq>
 80064f0:	4602      	mov	r2, r0
 80064f2:	4b05      	ldr	r3, [pc, #20]	; (8006508 <HAL_RCC_GetPCLK1Freq+0x20>)
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	0a9b      	lsrs	r3, r3, #10
 80064f8:	f003 0307 	and.w	r3, r3, #7
 80064fc:	4903      	ldr	r1, [pc, #12]	; (800650c <HAL_RCC_GetPCLK1Freq+0x24>)
 80064fe:	5ccb      	ldrb	r3, [r1, r3]
 8006500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006504:	4618      	mov	r0, r3
 8006506:	bd80      	pop	{r7, pc}
 8006508:	40023800 	.word	0x40023800
 800650c:	0800950c 	.word	0x0800950c

08006510 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> flight_hardware
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
 8006590:	b580      	push	{r7, lr}
 8006592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006594:	f7ff ffdc 	bl	8006550 <HAL_RCC_GetHCLKFreq>
 8006598:	4602      	mov	r2, r0
 800659a:	4b05      	ldr	r3, [pc, #20]	; (80065b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	0b5b      	lsrs	r3, r3, #13
 80065a0:	f003 0307 	and.w	r3, r3, #7
 80065a4:	4903      	ldr	r1, [pc, #12]	; (80065b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065a6:	5ccb      	ldrb	r3, [r1, r3]
 80065a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	bd80      	pop	{r7, pc}
 80065b0:	40023800 	.word	0x40023800
 80065b4:	0800958c 	.word	0x0800958c

080065b8 <HAL_RCCEx_PeriphCLKConfig>:
=======
 8006510:	b580      	push	{r7, lr}
 8006512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006514:	f7ff ffdc 	bl	80064d0 <HAL_RCC_GetHCLKFreq>
 8006518:	4602      	mov	r2, r0
 800651a:	4b05      	ldr	r3, [pc, #20]	; (8006530 <HAL_RCC_GetPCLK2Freq+0x20>)
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	0b5b      	lsrs	r3, r3, #13
 8006520:	f003 0307 	and.w	r3, r3, #7
 8006524:	4903      	ldr	r1, [pc, #12]	; (8006534 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006526:	5ccb      	ldrb	r3, [r1, r3]
 8006528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800652c:	4618      	mov	r0, r3
 800652e:	bd80      	pop	{r7, pc}
 8006530:	40023800 	.word	0x40023800
 8006534:	0800950c 	.word	0x0800950c

08006538 <HAL_RCCEx_PeriphCLKConfig>:
>>>>>>> flight_hardware
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
<<<<<<< HEAD
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80065c0:	2300      	movs	r3, #0
 80065c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80065c4:	2300      	movs	r3, #0
 80065c6:	613b      	str	r3, [r7, #16]
=======
 8006538:	b580      	push	{r7, lr}
 800653a:	b086      	sub	sp, #24
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006540:	2300      	movs	r3, #0
 8006542:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006544:	2300      	movs	r3, #0
 8006546:	613b      	str	r3, [r7, #16]
>>>>>>> flight_hardware

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
<<<<<<< HEAD
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 0301 	and.w	r3, r3, #1
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d10b      	bne.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d105      	bne.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d075      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x120>
=======
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 0301 	and.w	r3, r3, #1
 8006550:	2b00      	cmp	r3, #0
 8006552:	d10b      	bne.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800655c:	2b00      	cmp	r3, #0
 800655e:	d105      	bne.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006568:	2b00      	cmp	r3, #0
 800656a:	d075      	beq.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x120>
>>>>>>> flight_hardware
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
<<<<<<< HEAD
 80065ec:	4b91      	ldr	r3, [pc, #580]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80065ee:	2200      	movs	r2, #0
 80065f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80065f2:	f7fc fd2f 	bl	8003054 <HAL_GetTick>
 80065f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80065f8:	e008      	b.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80065fa:	f7fc fd2b 	bl	8003054 <HAL_GetTick>
 80065fe:	4602      	mov	r2, r0
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	2b02      	cmp	r3, #2
 8006606:	d901      	bls.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006608:	2303      	movs	r3, #3
 800660a:	e189      	b.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800660c:	4b8a      	ldr	r3, [pc, #552]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006614:	2b00      	cmp	r3, #0
 8006616:	d1f0      	bne.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x42>
=======
 800656c:	4b91      	ldr	r3, [pc, #580]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800656e:	2200      	movs	r2, #0
 8006570:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006572:	f7fc fd2f 	bl	8002fd4 <HAL_GetTick>
 8006576:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006578:	e008      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800657a:	f7fc fd2b 	bl	8002fd4 <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	2b02      	cmp	r3, #2
 8006586:	d901      	bls.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	e189      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800658c:	4b8a      	ldr	r3, [pc, #552]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d1f0      	bne.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x42>
>>>>>>> flight_hardware
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
<<<<<<< HEAD
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 0301 	and.w	r3, r3, #1
 8006620:	2b00      	cmp	r3, #0
 8006622:	d009      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x80>
=======
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 0301 	and.w	r3, r3, #1
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d009      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
>>>>>>> flight_hardware
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
<<<<<<< HEAD
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	019a      	lsls	r2, r3, #6
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	071b      	lsls	r3, r3, #28
 8006630:	4981      	ldr	r1, [pc, #516]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006632:	4313      	orrs	r3, r2
 8006634:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
=======
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	019a      	lsls	r2, r3, #6
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	071b      	lsls	r3, r3, #28
 80065b0:	4981      	ldr	r1, [pc, #516]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065b2:	4313      	orrs	r3, r2
 80065b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
>>>>>>> flight_hardware
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
<<<<<<< HEAD
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0302 	and.w	r3, r3, #2
 8006640:	2b00      	cmp	r3, #0
 8006642:	d01f      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xcc>
=======
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0302 	and.w	r3, r3, #2
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d01f      	beq.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0xcc>
>>>>>>> flight_hardware
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
<<<<<<< HEAD
 8006644:	4b7c      	ldr	r3, [pc, #496]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006646:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800664a:	0f1b      	lsrs	r3, r3, #28
 800664c:	f003 0307 	and.w	r3, r3, #7
 8006650:	613b      	str	r3, [r7, #16]
=======
 80065c4:	4b7c      	ldr	r3, [pc, #496]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065ca:	0f1b      	lsrs	r3, r3, #28
 80065cc:	f003 0307 	and.w	r3, r3, #7
 80065d0:	613b      	str	r3, [r7, #16]
>>>>>>> flight_hardware
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
<<<<<<< HEAD
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	019a      	lsls	r2, r3, #6
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	061b      	lsls	r3, r3, #24
 800665e:	431a      	orrs	r2, r3
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	071b      	lsls	r3, r3, #28
 8006664:	4974      	ldr	r1, [pc, #464]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006666:	4313      	orrs	r3, r2
 8006668:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800666c:	4b72      	ldr	r3, [pc, #456]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800666e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006672:	f023 021f 	bic.w	r2, r3, #31
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	69db      	ldr	r3, [r3, #28]
 800667a:	3b01      	subs	r3, #1
 800667c:	496e      	ldr	r1, [pc, #440]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800667e:	4313      	orrs	r3, r2
 8006680:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
=======
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	019a      	lsls	r2, r3, #6
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	061b      	lsls	r3, r3, #24
 80065de:	431a      	orrs	r2, r3
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	071b      	lsls	r3, r3, #28
 80065e4:	4974      	ldr	r1, [pc, #464]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065e6:	4313      	orrs	r3, r2
 80065e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80065ec:	4b72      	ldr	r3, [pc, #456]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065f2:	f023 021f 	bic.w	r2, r3, #31
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	69db      	ldr	r3, [r3, #28]
 80065fa:	3b01      	subs	r3, #1
 80065fc:	496e      	ldr	r1, [pc, #440]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
>>>>>>> flight_hardware
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
<<<<<<< HEAD
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00d      	beq.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
=======
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00d      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0xf4>
>>>>>>> flight_hardware
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
<<<<<<< HEAD
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	019a      	lsls	r2, r3, #6
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	061b      	lsls	r3, r3, #24
 800669c:	431a      	orrs	r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	071b      	lsls	r3, r3, #28
 80066a4:	4964      	ldr	r1, [pc, #400]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066a6:	4313      	orrs	r3, r2
 80066a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
=======
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	019a      	lsls	r2, r3, #6
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	061b      	lsls	r3, r3, #24
 800661c:	431a      	orrs	r2, r3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	071b      	lsls	r3, r3, #28
 8006624:	4964      	ldr	r1, [pc, #400]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006626:	4313      	orrs	r3, r2
 8006628:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
>>>>>>> flight_hardware
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
<<<<<<< HEAD
 80066ac:	4b61      	ldr	r3, [pc, #388]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80066ae:	2201      	movs	r2, #1
 80066b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80066b2:	f7fc fccf 	bl	8003054 <HAL_GetTick>
 80066b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066b8:	e008      	b.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80066ba:	f7fc fccb 	bl	8003054 <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d901      	bls.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e129      	b.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066cc:	4b5a      	ldr	r3, [pc, #360]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d0f0      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x102>
=======
 800662c:	4b61      	ldr	r3, [pc, #388]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800662e:	2201      	movs	r2, #1
 8006630:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006632:	f7fc fccf 	bl	8002fd4 <HAL_GetTick>
 8006636:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006638:	e008      	b.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800663a:	f7fc fccb 	bl	8002fd4 <HAL_GetTick>
 800663e:	4602      	mov	r2, r0
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	2b02      	cmp	r3, #2
 8006646:	d901      	bls.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006648:	2303      	movs	r3, #3
 800664a:	e129      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800664c:	4b5a      	ldr	r3, [pc, #360]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006654:	2b00      	cmp	r3, #0
 8006656:	d0f0      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x102>
>>>>>>> flight_hardware

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
<<<<<<< HEAD
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0304 	and.w	r3, r3, #4
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d105      	bne.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d079      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
=======
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0304 	and.w	r3, r3, #4
 8006660:	2b00      	cmp	r3, #0
 8006662:	d105      	bne.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800666c:	2b00      	cmp	r3, #0
 800666e:	d079      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x22c>
>>>>>>> flight_hardware
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
<<<<<<< HEAD
 80066f0:	4b52      	ldr	r3, [pc, #328]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80066f2:	2200      	movs	r2, #0
 80066f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80066f6:	f7fc fcad 	bl	8003054 <HAL_GetTick>
 80066fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80066fc:	e008      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80066fe:	f7fc fca9 	bl	8003054 <HAL_GetTick>
 8006702:	4602      	mov	r2, r0
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	1ad3      	subs	r3, r2, r3
 8006708:	2b02      	cmp	r3, #2
 800670a:	d901      	bls.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	e107      	b.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006710:	4b49      	ldr	r3, [pc, #292]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006718:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800671c:	d0ef      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x146>
=======
 8006670:	4b52      	ldr	r3, [pc, #328]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006672:	2200      	movs	r2, #0
 8006674:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006676:	f7fc fcad 	bl	8002fd4 <HAL_GetTick>
 800667a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800667c:	e008      	b.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800667e:	f7fc fca9 	bl	8002fd4 <HAL_GetTick>
 8006682:	4602      	mov	r2, r0
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	2b02      	cmp	r3, #2
 800668a:	d901      	bls.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	e107      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006690:	4b49      	ldr	r3, [pc, #292]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006698:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800669c:	d0ef      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x146>
>>>>>>> flight_hardware
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
<<<<<<< HEAD
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 0304 	and.w	r3, r3, #4
 8006726:	2b00      	cmp	r3, #0
 8006728:	d020      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
=======
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 0304 	and.w	r3, r3, #4
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d020      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
>>>>>>> flight_hardware
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
<<<<<<< HEAD
 800672a:	4b43      	ldr	r3, [pc, #268]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800672c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006730:	0f1b      	lsrs	r3, r3, #28
 8006732:	f003 0307 	and.w	r3, r3, #7
 8006736:	613b      	str	r3, [r7, #16]
=======
 80066aa:	4b43      	ldr	r3, [pc, #268]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066b0:	0f1b      	lsrs	r3, r3, #28
 80066b2:	f003 0307 	and.w	r3, r3, #7
 80066b6:	613b      	str	r3, [r7, #16]
>>>>>>> flight_hardware
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
<<<<<<< HEAD
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	019a      	lsls	r2, r3, #6
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	061b      	lsls	r3, r3, #24
 8006744:	431a      	orrs	r2, r3
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	071b      	lsls	r3, r3, #28
 800674a:	493b      	ldr	r1, [pc, #236]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800674c:	4313      	orrs	r3, r2
 800674e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006752:	4b39      	ldr	r3, [pc, #228]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006758:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a1b      	ldr	r3, [r3, #32]
 8006760:	3b01      	subs	r3, #1
 8006762:	021b      	lsls	r3, r3, #8
 8006764:	4934      	ldr	r1, [pc, #208]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006766:	4313      	orrs	r3, r2
 8006768:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
=======
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	019a      	lsls	r2, r3, #6
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	061b      	lsls	r3, r3, #24
 80066c4:	431a      	orrs	r2, r3
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	071b      	lsls	r3, r3, #28
 80066ca:	493b      	ldr	r1, [pc, #236]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066cc:	4313      	orrs	r3, r2
 80066ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80066d2:	4b39      	ldr	r3, [pc, #228]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066d8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a1b      	ldr	r3, [r3, #32]
 80066e0:	3b01      	subs	r3, #1
 80066e2:	021b      	lsls	r3, r3, #8
 80066e4:	4934      	ldr	r1, [pc, #208]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
>>>>>>> flight_hardware
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
<<<<<<< HEAD
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0308 	and.w	r3, r3, #8
 8006774:	2b00      	cmp	r3, #0
 8006776:	d01e      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
=======
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0308 	and.w	r3, r3, #8
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d01e      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
>>>>>>> flight_hardware
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
<<<<<<< HEAD
 8006778:	4b2f      	ldr	r3, [pc, #188]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800677a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800677e:	0e1b      	lsrs	r3, r3, #24
 8006780:	f003 030f 	and.w	r3, r3, #15
 8006784:	613b      	str	r3, [r7, #16]
=======
 80066f8:	4b2f      	ldr	r3, [pc, #188]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066fe:	0e1b      	lsrs	r3, r3, #24
 8006700:	f003 030f 	and.w	r3, r3, #15
 8006704:	613b      	str	r3, [r7, #16]
>>>>>>> flight_hardware
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
<<<<<<< HEAD
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	019a      	lsls	r2, r3, #6
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	061b      	lsls	r3, r3, #24
 8006790:	431a      	orrs	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	699b      	ldr	r3, [r3, #24]
 8006796:	071b      	lsls	r3, r3, #28
 8006798:	4927      	ldr	r1, [pc, #156]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800679a:	4313      	orrs	r3, r2
 800679c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80067a0:	4b25      	ldr	r3, [pc, #148]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ae:	4922      	ldr	r1, [pc, #136]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067b0:	4313      	orrs	r3, r2
 80067b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80067b6:	4b21      	ldr	r3, [pc, #132]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80067b8:	2201      	movs	r2, #1
 80067ba:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80067bc:	f7fc fc4a 	bl	8003054 <HAL_GetTick>
 80067c0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80067c2:	e008      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80067c4:	f7fc fc46 	bl	8003054 <HAL_GetTick>
 80067c8:	4602      	mov	r2, r0
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d901      	bls.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e0a4      	b.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80067d6:	4b18      	ldr	r3, [pc, #96]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067e2:	d1ef      	bne.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
=======
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	019a      	lsls	r2, r3, #6
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	061b      	lsls	r3, r3, #24
 8006710:	431a      	orrs	r2, r3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	071b      	lsls	r3, r3, #28
 8006718:	4927      	ldr	r1, [pc, #156]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800671a:	4313      	orrs	r3, r2
 800671c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006720:	4b25      	ldr	r3, [pc, #148]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006722:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006726:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672e:	4922      	ldr	r1, [pc, #136]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006730:	4313      	orrs	r3, r2
 8006732:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006736:	4b21      	ldr	r3, [pc, #132]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006738:	2201      	movs	r2, #1
 800673a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800673c:	f7fc fc4a 	bl	8002fd4 <HAL_GetTick>
 8006740:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006742:	e008      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006744:	f7fc fc46 	bl	8002fd4 <HAL_GetTick>
 8006748:	4602      	mov	r2, r0
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	1ad3      	subs	r3, r2, r3
 800674e:	2b02      	cmp	r3, #2
 8006750:	d901      	bls.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	e0a4      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006756:	4b18      	ldr	r3, [pc, #96]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800675e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006762:	d1ef      	bne.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x20c>
>>>>>>> flight_hardware
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
<<<<<<< HEAD
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0320 	and.w	r3, r3, #32
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f000 808b 	beq.w	8006908 <HAL_RCCEx_PeriphCLKConfig+0x350>
=======
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0320 	and.w	r3, r3, #32
 800676c:	2b00      	cmp	r3, #0
 800676e:	f000 808b 	beq.w	8006888 <HAL_RCCEx_PeriphCLKConfig+0x350>
>>>>>>> flight_hardware
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< HEAD
 80067f2:	2300      	movs	r3, #0
 80067f4:	60fb      	str	r3, [r7, #12]
 80067f6:	4b10      	ldr	r3, [pc, #64]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fa:	4a0f      	ldr	r2, [pc, #60]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006800:	6413      	str	r3, [r2, #64]	; 0x40
 8006802:	4b0d      	ldr	r3, [pc, #52]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800680a:	60fb      	str	r3, [r7, #12]
 800680c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800680e:	4b0c      	ldr	r3, [pc, #48]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a0b      	ldr	r2, [pc, #44]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006818:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800681a:	f7fc fc1b 	bl	8003054 <HAL_GetTick>
 800681e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006820:	e010      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006822:	f7fc fc17 	bl	8003054 <HAL_GetTick>
 8006826:	4602      	mov	r2, r0
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	2b02      	cmp	r3, #2
 800682e:	d909      	bls.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	e075      	b.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006834:	42470068 	.word	0x42470068
 8006838:	40023800 	.word	0x40023800
 800683c:	42470070 	.word	0x42470070
 8006840:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006844:	4b38      	ldr	r3, [pc, #224]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800684c:	2b00      	cmp	r3, #0
 800684e:	d0e8      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x26a>
=======
 8006772:	2300      	movs	r3, #0
 8006774:	60fb      	str	r3, [r7, #12]
 8006776:	4b10      	ldr	r3, [pc, #64]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677a:	4a0f      	ldr	r2, [pc, #60]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800677c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006780:	6413      	str	r3, [r2, #64]	; 0x40
 8006782:	4b0d      	ldr	r3, [pc, #52]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800678a:	60fb      	str	r3, [r7, #12]
 800678c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800678e:	4b0c      	ldr	r3, [pc, #48]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a0b      	ldr	r2, [pc, #44]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006798:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800679a:	f7fc fc1b 	bl	8002fd4 <HAL_GetTick>
 800679e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80067a0:	e010      	b.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80067a2:	f7fc fc17 	bl	8002fd4 <HAL_GetTick>
 80067a6:	4602      	mov	r2, r0
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d909      	bls.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e075      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80067b4:	42470068 	.word	0x42470068
 80067b8:	40023800 	.word	0x40023800
 80067bc:	42470070 	.word	0x42470070
 80067c0:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80067c4:	4b38      	ldr	r3, [pc, #224]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d0e8      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
>>>>>>> flight_hardware
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
<<<<<<< HEAD
 8006850:	4b36      	ldr	r3, [pc, #216]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006854:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006858:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d02f      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006864:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	429a      	cmp	r2, r3
 800686c:	d028      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800686e:	4b2f      	ldr	r3, [pc, #188]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006872:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006876:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006878:	4b2d      	ldr	r3, [pc, #180]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800687a:	2201      	movs	r2, #1
 800687c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800687e:	4b2c      	ldr	r3, [pc, #176]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006880:	2200      	movs	r2, #0
 8006882:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006884:	4a29      	ldr	r2, [pc, #164]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800688a:	4b28      	ldr	r3, [pc, #160]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800688c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800688e:	f003 0301 	and.w	r3, r3, #1
 8006892:	2b01      	cmp	r3, #1
 8006894:	d114      	bne.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006896:	f7fc fbdd 	bl	8003054 <HAL_GetTick>
 800689a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800689c:	e00a      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800689e:	f7fc fbd9 	bl	8003054 <HAL_GetTick>
 80068a2:	4602      	mov	r2, r0
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d901      	bls.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80068b0:	2303      	movs	r3, #3
 80068b2:	e035      	b.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068b4:	4b1d      	ldr	r3, [pc, #116]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80068b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068b8:	f003 0302 	and.w	r3, r3, #2
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d0ee      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
=======
 80067d0:	4b36      	ldr	r3, [pc, #216]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80067d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067d8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d02f      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d028      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80067ee:	4b2f      	ldr	r3, [pc, #188]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80067f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067f6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80067f8:	4b2d      	ldr	r3, [pc, #180]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80067fa:	2201      	movs	r2, #1
 80067fc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80067fe:	4b2c      	ldr	r3, [pc, #176]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006800:	2200      	movs	r2, #0
 8006802:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006804:	4a29      	ldr	r2, [pc, #164]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800680a:	4b28      	ldr	r3, [pc, #160]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800680c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	2b01      	cmp	r3, #1
 8006814:	d114      	bne.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006816:	f7fc fbdd 	bl	8002fd4 <HAL_GetTick>
 800681a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800681c:	e00a      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800681e:	f7fc fbd9 	bl	8002fd4 <HAL_GetTick>
 8006822:	4602      	mov	r2, r0
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	f241 3288 	movw	r2, #5000	; 0x1388
 800682c:	4293      	cmp	r3, r2
 800682e:	d901      	bls.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	e035      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006834:	4b1d      	ldr	r3, [pc, #116]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006838:	f003 0302 	and.w	r3, r3, #2
 800683c:	2b00      	cmp	r3, #0
 800683e:	d0ee      	beq.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
>>>>>>> flight_hardware
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
<<<<<<< HEAD
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068cc:	d10d      	bne.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x332>
 80068ce:	4b17      	ldr	r3, [pc, #92]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068da:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80068de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068e2:	4912      	ldr	r1, [pc, #72]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80068e4:	4313      	orrs	r3, r2
 80068e6:	608b      	str	r3, [r1, #8]
 80068e8:	e005      	b.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80068ea:	4b10      	ldr	r3, [pc, #64]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	4a0f      	ldr	r2, [pc, #60]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80068f0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80068f4:	6093      	str	r3, [r2, #8]
 80068f6:	4b0d      	ldr	r3, [pc, #52]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80068f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006902:	490a      	ldr	r1, [pc, #40]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006904:	4313      	orrs	r3, r2
 8006906:	670b      	str	r3, [r1, #112]	; 0x70
=======
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006844:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006848:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800684c:	d10d      	bne.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800684e:	4b17      	ldr	r3, [pc, #92]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800685a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800685e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006862:	4912      	ldr	r1, [pc, #72]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006864:	4313      	orrs	r3, r2
 8006866:	608b      	str	r3, [r1, #8]
 8006868:	e005      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800686a:	4b10      	ldr	r3, [pc, #64]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	4a0f      	ldr	r2, [pc, #60]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006870:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006874:	6093      	str	r3, [r2, #8]
 8006876:	4b0d      	ldr	r3, [pc, #52]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006878:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006882:	490a      	ldr	r1, [pc, #40]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006884:	4313      	orrs	r3, r2
 8006886:	670b      	str	r3, [r1, #112]	; 0x70
>>>>>>> flight_hardware
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
<<<<<<< HEAD
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0310 	and.w	r3, r3, #16
 8006910:	2b00      	cmp	r3, #0
 8006912:	d004      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800691a:	4b06      	ldr	r3, [pc, #24]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800691c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800691e:	2300      	movs	r3, #0
}
 8006920:	4618      	mov	r0, r3
 8006922:	3718      	adds	r7, #24
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}
 8006928:	40007000 	.word	0x40007000
 800692c:	40023800 	.word	0x40023800
 8006930:	42470e40 	.word	0x42470e40
 8006934:	424711e0 	.word	0x424711e0

08006938 <HAL_RTC_Init>:
=======
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 0310 	and.w	r3, r3, #16
 8006890:	2b00      	cmp	r3, #0
 8006892:	d004      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800689a:	4b06      	ldr	r3, [pc, #24]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800689c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3718      	adds	r7, #24
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	40007000 	.word	0x40007000
 80068ac:	40023800 	.word	0x40023800
 80068b0:	42470e40 	.word	0x42470e40
 80068b4:	424711e0 	.word	0x424711e0

080068b8 <HAL_RTC_Init>:
>>>>>>> flight_hardware
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
<<<<<<< HEAD
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d101      	bne.n	800694e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	e073      	b.n	8006a36 <HAL_RTC_Init+0xfe>
=======
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d101      	bne.n	80068ce <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e073      	b.n	80069b6 <HAL_RTC_Init+0xfe>
>>>>>>> flight_hardware
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
<<<<<<< HEAD
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	7f5b      	ldrb	r3, [r3, #29]
 8006952:	b2db      	uxtb	r3, r3
 8006954:	2b00      	cmp	r3, #0
 8006956:	d105      	bne.n	8006964 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f7fb ffd2 	bl	8002908 <HAL_RTC_MspInit>
=======
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	7f5b      	ldrb	r3, [r3, #29]
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d105      	bne.n	80068e4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f7fb ffd2 	bl	8002888 <HAL_RTC_MspInit>
>>>>>>> flight_hardware
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
<<<<<<< HEAD
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2202      	movs	r2, #2
 8006968:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	f003 0310 	and.w	r3, r3, #16
 8006974:	2b10      	cmp	r3, #16
 8006976:	d055      	beq.n	8006a24 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	22ca      	movs	r2, #202	; 0xca
 800697e:	625a      	str	r2, [r3, #36]	; 0x24
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2253      	movs	r2, #83	; 0x53
 8006986:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 fa49 	bl	8006e20 <RTC_EnterInitMode>
 800698e:	4603      	mov	r3, r0
 8006990:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006992:	7bfb      	ldrb	r3, [r7, #15]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d12c      	bne.n	80069f2 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	6812      	ldr	r2, [r2, #0]
 80069a2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80069a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069aa:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	6899      	ldr	r1, [r3, #8]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685a      	ldr	r2, [r3, #4]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	431a      	orrs	r2, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	695b      	ldr	r3, [r3, #20]
 80069c0:	431a      	orrs	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	430a      	orrs	r2, r1
 80069c8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	68d2      	ldr	r2, [r2, #12]
 80069d2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	6919      	ldr	r1, [r3, #16]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	041a      	lsls	r2, r3, #16
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	430a      	orrs	r2, r1
 80069e6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 fa50 	bl	8006e8e <RTC_ExitInitMode>
 80069ee:	4603      	mov	r3, r0
 80069f0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80069f2:	7bfb      	ldrb	r3, [r7, #15]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d110      	bne.n	8006a1a <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006a06:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	699a      	ldr	r2, [r3, #24]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	430a      	orrs	r2, r1
 8006a18:	641a      	str	r2, [r3, #64]	; 0x40
=======
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2202      	movs	r2, #2
 80068e8:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	f003 0310 	and.w	r3, r3, #16
 80068f4:	2b10      	cmp	r3, #16
 80068f6:	d055      	beq.n	80069a4 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	22ca      	movs	r2, #202	; 0xca
 80068fe:	625a      	str	r2, [r3, #36]	; 0x24
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2253      	movs	r2, #83	; 0x53
 8006906:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 fa49 	bl	8006da0 <RTC_EnterInitMode>
 800690e:	4603      	mov	r3, r0
 8006910:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006912:	7bfb      	ldrb	r3, [r7, #15]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d12c      	bne.n	8006972 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	6812      	ldr	r2, [r2, #0]
 8006922:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006926:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800692a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	6899      	ldr	r1, [r3, #8]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	685a      	ldr	r2, [r3, #4]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	431a      	orrs	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	695b      	ldr	r3, [r3, #20]
 8006940:	431a      	orrs	r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	430a      	orrs	r2, r1
 8006948:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	68d2      	ldr	r2, [r2, #12]
 8006952:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	6919      	ldr	r1, [r3, #16]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	041a      	lsls	r2, r3, #16
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	430a      	orrs	r2, r1
 8006966:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 fa50 	bl	8006e0e <RTC_ExitInitMode>
 800696e:	4603      	mov	r3, r0
 8006970:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006972:	7bfb      	ldrb	r3, [r7, #15]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d110      	bne.n	800699a <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006986:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	699a      	ldr	r2, [r3, #24]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	430a      	orrs	r2, r1
 8006998:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> flight_hardware
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
<<<<<<< HEAD
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	22ff      	movs	r2, #255	; 0xff
 8006a20:	625a      	str	r2, [r3, #36]	; 0x24
 8006a22:	e001      	b.n	8006a28 <HAL_RTC_Init+0xf0>
=======
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	22ff      	movs	r2, #255	; 0xff
 80069a0:	625a      	str	r2, [r3, #36]	; 0x24
 80069a2:	e001      	b.n	80069a8 <HAL_RTC_Init+0xf0>
>>>>>>> flight_hardware
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
<<<<<<< HEAD
 8006a24:	2300      	movs	r3, #0
 8006a26:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006a28:	7bfb      	ldrb	r3, [r7, #15]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d102      	bne.n	8006a34 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2201      	movs	r2, #1
 8006a32:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8006a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <HAL_RTC_SetTime>:
=======
 80069a4:	2300      	movs	r3, #0
 80069a6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80069a8:	7bfb      	ldrb	r3, [r7, #15]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d102      	bne.n	80069b4 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2201      	movs	r2, #1
 80069b2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80069b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3710      	adds	r7, #16
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <HAL_RTC_SetTime>:
>>>>>>> flight_hardware
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
<<<<<<< HEAD
 8006a3e:	b590      	push	{r4, r7, lr}
 8006a40:	b087      	sub	sp, #28
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	60f8      	str	r0, [r7, #12]
 8006a46:	60b9      	str	r1, [r7, #8]
 8006a48:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	617b      	str	r3, [r7, #20]
=======
 80069be:	b590      	push	{r4, r7, lr}
 80069c0:	b087      	sub	sp, #28
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	60f8      	str	r0, [r7, #12]
 80069c6:	60b9      	str	r1, [r7, #8]
 80069c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80069ca:	2300      	movs	r3, #0
 80069cc:	617b      	str	r3, [r7, #20]
>>>>>>> flight_hardware
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
<<<<<<< HEAD
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	7f1b      	ldrb	r3, [r3, #28]
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d101      	bne.n	8006a5a <HAL_RTC_SetTime+0x1c>
 8006a56:	2302      	movs	r3, #2
 8006a58:	e087      	b.n	8006b6a <HAL_RTC_SetTime+0x12c>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2202      	movs	r2, #2
 8006a64:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d126      	bne.n	8006aba <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d102      	bne.n	8006a80 <HAL_RTC_SetTime+0x42>
=======
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	7f1b      	ldrb	r3, [r3, #28]
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d101      	bne.n	80069da <HAL_RTC_SetTime+0x1c>
 80069d6:	2302      	movs	r3, #2
 80069d8:	e087      	b.n	8006aea <HAL_RTC_SetTime+0x12c>
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2201      	movs	r2, #1
 80069de:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2202      	movs	r2, #2
 80069e4:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d126      	bne.n	8006a3a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d102      	bne.n	8006a00 <HAL_RTC_SetTime+0x42>
>>>>>>> flight_hardware
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
<<<<<<< HEAD
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	70da      	strb	r2, [r3, #3]
=======
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	2200      	movs	r2, #0
 80069fe:	70da      	strb	r2, [r3, #3]
>>>>>>> flight_hardware
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
<<<<<<< HEAD
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	4618      	mov	r0, r3
 8006a86:	f000 fa27 	bl	8006ed8 <RTC_ByteToBcd2>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	785b      	ldrb	r3, [r3, #1]
 8006a92:	4618      	mov	r0, r3
 8006a94:	f000 fa20 	bl	8006ed8 <RTC_ByteToBcd2>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006a9c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	789b      	ldrb	r3, [r3, #2]
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f000 fa18 	bl	8006ed8 <RTC_ByteToBcd2>
 8006aa8:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006aaa:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	78db      	ldrb	r3, [r3, #3]
 8006ab2:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	617b      	str	r3, [r7, #20]
 8006ab8:	e018      	b.n	8006aec <HAL_RTC_SetTime+0xae>
=======
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	4618      	mov	r0, r3
 8006a06:	f000 fa27 	bl	8006e58 <RTC_ByteToBcd2>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	785b      	ldrb	r3, [r3, #1]
 8006a12:	4618      	mov	r0, r3
 8006a14:	f000 fa20 	bl	8006e58 <RTC_ByteToBcd2>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006a1c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	789b      	ldrb	r3, [r3, #2]
 8006a22:	4618      	mov	r0, r3
 8006a24:	f000 fa18 	bl	8006e58 <RTC_ByteToBcd2>
 8006a28:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006a2a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	78db      	ldrb	r3, [r3, #3]
 8006a32:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006a34:	4313      	orrs	r3, r2
 8006a36:	617b      	str	r3, [r7, #20]
 8006a38:	e018      	b.n	8006a6c <HAL_RTC_SetTime+0xae>
>>>>>>> flight_hardware
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
<<<<<<< HEAD
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d102      	bne.n	8006ace <HAL_RTC_SetTime+0x90>
=======
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d102      	bne.n	8006a4e <HAL_RTC_SetTime+0x90>
>>>>>>> flight_hardware
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
<<<<<<< HEAD
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	2200      	movs	r2, #0
 8006acc:	70da      	strb	r2, [r3, #3]
=======
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	70da      	strb	r2, [r3, #3]
>>>>>>> flight_hardware
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
<<<<<<< HEAD
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	785b      	ldrb	r3, [r3, #1]
 8006ad8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006ada:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006adc:	68ba      	ldr	r2, [r7, #8]
 8006ade:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006ae0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	78db      	ldrb	r3, [r3, #3]
 8006ae6:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	617b      	str	r3, [r7, #20]
=======
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	785b      	ldrb	r3, [r3, #1]
 8006a58:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006a5a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006a5c:	68ba      	ldr	r2, [r7, #8]
 8006a5e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006a60:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	78db      	ldrb	r3, [r3, #3]
 8006a66:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	617b      	str	r3, [r7, #20]
>>>>>>> flight_hardware
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
<<<<<<< HEAD
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	22ca      	movs	r2, #202	; 0xca
 8006af2:	625a      	str	r2, [r3, #36]	; 0x24
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2253      	movs	r2, #83	; 0x53
 8006afa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f000 f98f 	bl	8006e20 <RTC_EnterInitMode>
 8006b02:	4603      	mov	r3, r0
 8006b04:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006b06:	7cfb      	ldrb	r3, [r7, #19]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d120      	bne.n	8006b4e <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006b16:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006b1a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	689a      	ldr	r2, [r3, #8]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006b2a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	6899      	ldr	r1, [r3, #8]
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	68da      	ldr	r2, [r3, #12]
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	431a      	orrs	r2, r3
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	430a      	orrs	r2, r1
 8006b42:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	f000 f9a2 	bl	8006e8e <RTC_ExitInitMode>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006b4e:	7cfb      	ldrb	r3, [r7, #19]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d102      	bne.n	8006b5a <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2201      	movs	r2, #1
 8006b58:	775a      	strb	r2, [r3, #29]
=======
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	22ca      	movs	r2, #202	; 0xca
 8006a72:	625a      	str	r2, [r3, #36]	; 0x24
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2253      	movs	r2, #83	; 0x53
 8006a7a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f000 f98f 	bl	8006da0 <RTC_EnterInitMode>
 8006a82:	4603      	mov	r3, r0
 8006a84:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006a86:	7cfb      	ldrb	r3, [r7, #19]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d120      	bne.n	8006ace <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006a96:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006a9a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	689a      	ldr	r2, [r3, #8]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006aaa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	6899      	ldr	r1, [r3, #8]
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	68da      	ldr	r2, [r3, #12]
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	431a      	orrs	r2, r3
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	430a      	orrs	r2, r1
 8006ac2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f000 f9a2 	bl	8006e0e <RTC_ExitInitMode>
 8006aca:	4603      	mov	r3, r0
 8006acc:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006ace:	7cfb      	ldrb	r3, [r7, #19]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d102      	bne.n	8006ada <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	775a      	strb	r2, [r3, #29]
>>>>>>> flight_hardware
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
<<<<<<< HEAD
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	22ff      	movs	r2, #255	; 0xff
 8006b60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2200      	movs	r2, #0
 8006b66:	771a      	strb	r2, [r3, #28]

  return status;
 8006b68:	7cfb      	ldrb	r3, [r7, #19]
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	371c      	adds	r7, #28
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd90      	pop	{r4, r7, pc}

08006b72 <HAL_RTC_GetTime>:
=======
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	22ff      	movs	r2, #255	; 0xff
 8006ae0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	771a      	strb	r2, [r3, #28]

  return status;
 8006ae8:	7cfb      	ldrb	r3, [r7, #19]
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	371c      	adds	r7, #28
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd90      	pop	{r4, r7, pc}

08006af2 <HAL_RTC_GetTime>:
>>>>>>> flight_hardware
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
<<<<<<< HEAD
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b086      	sub	sp, #24
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	60f8      	str	r0, [r7, #12]
 8006b7a:	60b9      	str	r1, [r7, #8]
 8006b7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	617b      	str	r3, [r7, #20]
=======
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b086      	sub	sp, #24
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	60f8      	str	r0, [r7, #12]
 8006afa:	60b9      	str	r1, [r7, #8]
 8006afc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006afe:	2300      	movs	r3, #0
 8006b00:	617b      	str	r3, [r7, #20]
>>>>>>> flight_hardware

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
<<<<<<< HEAD
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006ba4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006ba8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	0c1b      	lsrs	r3, r3, #16
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bb4:	b2da      	uxtb	r2, r3
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	0a1b      	lsrs	r3, r3, #8
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bc4:	b2da      	uxtb	r2, r3
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bd2:	b2da      	uxtb	r2, r3
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	0d9b      	lsrs	r3, r3, #22
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	f003 0301 	and.w	r3, r3, #1
 8006be2:	b2da      	uxtb	r2, r3
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d11a      	bne.n	8006c24 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f000 f98e 	bl	8006f14 <RTC_Bcd2ToByte>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	785b      	ldrb	r3, [r3, #1]
 8006c04:	4618      	mov	r0, r3
 8006c06:	f000 f985 	bl	8006f14 <RTC_Bcd2ToByte>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	789b      	ldrb	r3, [r3, #2]
 8006c16:	4618      	mov	r0, r3
 8006c18:	f000 f97c 	bl	8006f14 <RTC_Bcd2ToByte>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	461a      	mov	r2, r3
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3718      	adds	r7, #24
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <HAL_RTC_SetDate>:
=======
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006b24:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006b28:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	0c1b      	lsrs	r3, r3, #16
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b34:	b2da      	uxtb	r2, r3
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	0a1b      	lsrs	r3, r3, #8
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b44:	b2da      	uxtb	r2, r3
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b52:	b2da      	uxtb	r2, r3
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	0d9b      	lsrs	r3, r3, #22
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	f003 0301 	and.w	r3, r3, #1
 8006b62:	b2da      	uxtb	r2, r3
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d11a      	bne.n	8006ba4 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	4618      	mov	r0, r3
 8006b74:	f000 f98e 	bl	8006e94 <RTC_Bcd2ToByte>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	785b      	ldrb	r3, [r3, #1]
 8006b84:	4618      	mov	r0, r3
 8006b86:	f000 f985 	bl	8006e94 <RTC_Bcd2ToByte>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	789b      	ldrb	r3, [r3, #2]
 8006b96:	4618      	mov	r0, r3
 8006b98:	f000 f97c 	bl	8006e94 <RTC_Bcd2ToByte>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3718      	adds	r7, #24
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <HAL_RTC_SetDate>:
>>>>>>> flight_hardware
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
<<<<<<< HEAD
 8006c2e:	b590      	push	{r4, r7, lr}
 8006c30:	b087      	sub	sp, #28
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	60f8      	str	r0, [r7, #12]
 8006c36:	60b9      	str	r1, [r7, #8]
 8006c38:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	617b      	str	r3, [r7, #20]
=======
 8006bae:	b590      	push	{r4, r7, lr}
 8006bb0:	b087      	sub	sp, #28
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	60f8      	str	r0, [r7, #12]
 8006bb6:	60b9      	str	r1, [r7, #8]
 8006bb8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	617b      	str	r3, [r7, #20]
>>>>>>> flight_hardware

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
<<<<<<< HEAD
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	7f1b      	ldrb	r3, [r3, #28]
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d101      	bne.n	8006c4a <HAL_RTC_SetDate+0x1c>
 8006c46:	2302      	movs	r3, #2
 8006c48:	e071      	b.n	8006d2e <HAL_RTC_SetDate+0x100>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2202      	movs	r2, #2
 8006c54:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d10e      	bne.n	8006c7a <HAL_RTC_SetDate+0x4c>
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	785b      	ldrb	r3, [r3, #1]
 8006c60:	f003 0310 	and.w	r3, r3, #16
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d008      	beq.n	8006c7a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	785b      	ldrb	r3, [r3, #1]
 8006c6c:	f023 0310 	bic.w	r3, r3, #16
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	330a      	adds	r3, #10
 8006c74:	b2da      	uxtb	r2, r3
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	705a      	strb	r2, [r3, #1]
=======
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	7f1b      	ldrb	r3, [r3, #28]
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d101      	bne.n	8006bca <HAL_RTC_SetDate+0x1c>
 8006bc6:	2302      	movs	r3, #2
 8006bc8:	e071      	b.n	8006cae <HAL_RTC_SetDate+0x100>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d10e      	bne.n	8006bfa <HAL_RTC_SetDate+0x4c>
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	785b      	ldrb	r3, [r3, #1]
 8006be0:	f003 0310 	and.w	r3, r3, #16
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d008      	beq.n	8006bfa <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	785b      	ldrb	r3, [r3, #1]
 8006bec:	f023 0310 	bic.w	r3, r3, #16
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	330a      	adds	r3, #10
 8006bf4:	b2da      	uxtb	r2, r3
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	705a      	strb	r2, [r3, #1]
>>>>>>> flight_hardware
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
<<<<<<< HEAD
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d11c      	bne.n	8006cba <HAL_RTC_SetDate+0x8c>
=======
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d11c      	bne.n	8006c3a <HAL_RTC_SetDate+0x8c>
>>>>>>> flight_hardware
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
<<<<<<< HEAD
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	78db      	ldrb	r3, [r3, #3]
 8006c84:	4618      	mov	r0, r3
 8006c86:	f000 f927 	bl	8006ed8 <RTC_ByteToBcd2>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	785b      	ldrb	r3, [r3, #1]
 8006c92:	4618      	mov	r0, r3
 8006c94:	f000 f920 	bl	8006ed8 <RTC_ByteToBcd2>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006c9c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	789b      	ldrb	r3, [r3, #2]
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f000 f918 	bl	8006ed8 <RTC_ByteToBcd2>
 8006ca8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006caa:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	617b      	str	r3, [r7, #20]
 8006cb8:	e00e      	b.n	8006cd8 <HAL_RTC_SetDate+0xaa>
=======
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	78db      	ldrb	r3, [r3, #3]
 8006c04:	4618      	mov	r0, r3
 8006c06:	f000 f927 	bl	8006e58 <RTC_ByteToBcd2>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	785b      	ldrb	r3, [r3, #1]
 8006c12:	4618      	mov	r0, r3
 8006c14:	f000 f920 	bl	8006e58 <RTC_ByteToBcd2>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006c1c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	789b      	ldrb	r3, [r3, #2]
 8006c22:	4618      	mov	r0, r3
 8006c24:	f000 f918 	bl	8006e58 <RTC_ByteToBcd2>
 8006c28:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006c2a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006c34:	4313      	orrs	r3, r2
 8006c36:	617b      	str	r3, [r7, #20]
 8006c38:	e00e      	b.n	8006c58 <HAL_RTC_SetDate+0xaa>
>>>>>>> flight_hardware
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
<<<<<<< HEAD
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	78db      	ldrb	r3, [r3, #3]
 8006cbe:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	785b      	ldrb	r3, [r3, #1]
 8006cc4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006cc6:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006ccc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	617b      	str	r3, [r7, #20]
=======
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	78db      	ldrb	r3, [r3, #3]
 8006c3e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	785b      	ldrb	r3, [r3, #1]
 8006c44:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006c46:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006c48:	68ba      	ldr	r2, [r7, #8]
 8006c4a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006c4c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006c54:	4313      	orrs	r3, r2
 8006c56:	617b      	str	r3, [r7, #20]
>>>>>>> flight_hardware
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
<<<<<<< HEAD
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	22ca      	movs	r2, #202	; 0xca
 8006cde:	625a      	str	r2, [r3, #36]	; 0x24
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2253      	movs	r2, #83	; 0x53
 8006ce6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f000 f899 	bl	8006e20 <RTC_EnterInitMode>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006cf2:	7cfb      	ldrb	r3, [r7, #19]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d10c      	bne.n	8006d12 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006d02:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006d06:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006d08:	68f8      	ldr	r0, [r7, #12]
 8006d0a:	f000 f8c0 	bl	8006e8e <RTC_ExitInitMode>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006d12:	7cfb      	ldrb	r3, [r7, #19]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d102      	bne.n	8006d1e <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	775a      	strb	r2, [r3, #29]
=======
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	22ca      	movs	r2, #202	; 0xca
 8006c5e:	625a      	str	r2, [r3, #36]	; 0x24
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2253      	movs	r2, #83	; 0x53
 8006c66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	f000 f899 	bl	8006da0 <RTC_EnterInitMode>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006c72:	7cfb      	ldrb	r3, [r7, #19]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d10c      	bne.n	8006c92 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006c82:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006c86:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006c88:	68f8      	ldr	r0, [r7, #12]
 8006c8a:	f000 f8c0 	bl	8006e0e <RTC_ExitInitMode>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006c92:	7cfb      	ldrb	r3, [r7, #19]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d102      	bne.n	8006c9e <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	775a      	strb	r2, [r3, #29]
>>>>>>> flight_hardware
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
<<<<<<< HEAD
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	22ff      	movs	r2, #255	; 0xff
 8006d24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	771a      	strb	r2, [r3, #28]

  return status;
 8006d2c:	7cfb      	ldrb	r3, [r7, #19]
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	371c      	adds	r7, #28
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd90      	pop	{r4, r7, pc}

08006d36 <HAL_RTC_GetDate>:
=======
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	22ff      	movs	r2, #255	; 0xff
 8006ca4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	771a      	strb	r2, [r3, #28]

  return status;
 8006cac:	7cfb      	ldrb	r3, [r7, #19]
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	371c      	adds	r7, #28
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd90      	pop	{r4, r7, pc}

08006cb6 <HAL_RTC_GetDate>:
>>>>>>> flight_hardware
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
<<<<<<< HEAD
 8006d36:	b580      	push	{r7, lr}
 8006d38:	b086      	sub	sp, #24
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	60f8      	str	r0, [r7, #12]
 8006d3e:	60b9      	str	r1, [r7, #8]
 8006d40:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006d42:	2300      	movs	r3, #0
 8006d44:	617b      	str	r3, [r7, #20]
=======
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b086      	sub	sp, #24
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	60f8      	str	r0, [r7, #12]
 8006cbe:	60b9      	str	r1, [r7, #8]
 8006cc0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	617b      	str	r3, [r7, #20]
>>>>>>> flight_hardware

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
<<<<<<< HEAD
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006d50:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006d54:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	0c1b      	lsrs	r3, r3, #16
 8006d5a:	b2da      	uxtb	r2, r3
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	0a1b      	lsrs	r3, r3, #8
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	f003 031f 	and.w	r3, r3, #31
 8006d6a:	b2da      	uxtb	r2, r3
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d78:	b2da      	uxtb	r2, r3
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	0b5b      	lsrs	r3, r3, #13
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	f003 0307 	and.w	r3, r3, #7
 8006d88:	b2da      	uxtb	r2, r3
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d11a      	bne.n	8006dca <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	78db      	ldrb	r3, [r3, #3]
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f000 f8bb 	bl	8006f14 <RTC_Bcd2ToByte>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	461a      	mov	r2, r3
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	785b      	ldrb	r3, [r3, #1]
 8006daa:	4618      	mov	r0, r3
 8006dac:	f000 f8b2 	bl	8006f14 <RTC_Bcd2ToByte>
 8006db0:	4603      	mov	r3, r0
 8006db2:	461a      	mov	r2, r3
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	789b      	ldrb	r3, [r3, #2]
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f000 f8a9 	bl	8006f14 <RTC_Bcd2ToByte>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3718      	adds	r7, #24
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <HAL_RTC_WaitForSynchro>:
=======
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006cd0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006cd4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	0c1b      	lsrs	r3, r3, #16
 8006cda:	b2da      	uxtb	r2, r3
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	0a1b      	lsrs	r3, r3, #8
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	f003 031f 	and.w	r3, r3, #31
 8006cea:	b2da      	uxtb	r2, r3
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cf8:	b2da      	uxtb	r2, r3
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	0b5b      	lsrs	r3, r3, #13
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	f003 0307 	and.w	r3, r3, #7
 8006d08:	b2da      	uxtb	r2, r3
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d11a      	bne.n	8006d4a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	78db      	ldrb	r3, [r3, #3]
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f000 f8bb 	bl	8006e94 <RTC_Bcd2ToByte>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	461a      	mov	r2, r3
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	785b      	ldrb	r3, [r3, #1]
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f000 f8b2 	bl	8006e94 <RTC_Bcd2ToByte>
 8006d30:	4603      	mov	r3, r0
 8006d32:	461a      	mov	r2, r3
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	789b      	ldrb	r3, [r3, #2]
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f000 f8a9 	bl	8006e94 <RTC_Bcd2ToByte>
 8006d42:	4603      	mov	r3, r0
 8006d44:	461a      	mov	r2, r3
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3718      	adds	r7, #24
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <HAL_RTC_WaitForSynchro>:
>>>>>>> flight_hardware
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
<<<<<<< HEAD
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a0d      	ldr	r2, [pc, #52]	; (8006e1c <HAL_RTC_WaitForSynchro+0x48>)
 8006de6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006de8:	f7fc f934 	bl	8003054 <HAL_GetTick>
 8006dec:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006dee:	e009      	b.n	8006e04 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006df0:	f7fc f930 	bl	8003054 <HAL_GetTick>
 8006df4:	4602      	mov	r2, r0
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006dfe:	d901      	bls.n	8006e04 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006e00:	2303      	movs	r3, #3
 8006e02:	e007      	b.n	8006e14 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	f003 0320 	and.w	r3, r3, #32
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d0ee      	beq.n	8006df0 <HAL_RTC_WaitForSynchro+0x1c>
=======
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a0d      	ldr	r2, [pc, #52]	; (8006d9c <HAL_RTC_WaitForSynchro+0x48>)
 8006d66:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d68:	f7fc f934 	bl	8002fd4 <HAL_GetTick>
 8006d6c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006d6e:	e009      	b.n	8006d84 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006d70:	f7fc f930 	bl	8002fd4 <HAL_GetTick>
 8006d74:	4602      	mov	r2, r0
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d7e:	d901      	bls.n	8006d84 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006d80:	2303      	movs	r3, #3
 8006d82:	e007      	b.n	8006d94 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	f003 0320 	and.w	r3, r3, #32
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d0ee      	beq.n	8006d70 <HAL_RTC_WaitForSynchro+0x1c>
>>>>>>> flight_hardware
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	00017f5f 	.word	0x00017f5f

08006e20 <RTC_EnterInitMode>:
=======
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3710      	adds	r7, #16
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	00017f5f 	.word	0x00017f5f

08006da0 <RTC_EnterInitMode>:
>>>>>>> flight_hardware
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
<<<<<<< HEAD
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d122      	bne.n	8006e84 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68da      	ldr	r2, [r3, #12]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e4c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006e4e:	f7fc f901 	bl	8003054 <HAL_GetTick>
 8006e52:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006e54:	e00c      	b.n	8006e70 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006e56:	f7fc f8fd 	bl	8003054 <HAL_GetTick>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	1ad3      	subs	r3, r2, r3
 8006e60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e64:	d904      	bls.n	8006e70 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2204      	movs	r2, #4
 8006e6a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d102      	bne.n	8006e84 <RTC_EnterInitMode+0x64>
 8006e7e:	7bfb      	ldrb	r3, [r7, #15]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d1e8      	bne.n	8006e56 <RTC_EnterInitMode+0x36>
=======
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006da8:	2300      	movs	r3, #0
 8006daa:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006dac:	2300      	movs	r3, #0
 8006dae:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d122      	bne.n	8006e04 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68da      	ldr	r2, [r3, #12]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006dcc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006dce:	f7fc f901 	bl	8002fd4 <HAL_GetTick>
 8006dd2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006dd4:	e00c      	b.n	8006df0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006dd6:	f7fc f8fd 	bl	8002fd4 <HAL_GetTick>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	1ad3      	subs	r3, r2, r3
 8006de0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006de4:	d904      	bls.n	8006df0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2204      	movs	r2, #4
 8006dea:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d102      	bne.n	8006e04 <RTC_EnterInitMode+0x64>
 8006dfe:	7bfb      	ldrb	r3, [r7, #15]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d1e8      	bne.n	8006dd6 <RTC_EnterInitMode+0x36>
>>>>>>> flight_hardware
      }
    }
  }

  return status;
<<<<<<< HEAD
 8006e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <RTC_ExitInitMode>:
=======
 8006e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <RTC_ExitInitMode>:
>>>>>>> flight_hardware
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
<<<<<<< HEAD
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b084      	sub	sp, #16
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e96:	2300      	movs	r3, #0
 8006e98:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68da      	ldr	r2, [r3, #12]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ea8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f003 0320 	and.w	r3, r3, #32
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d10a      	bne.n	8006ece <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f7ff ff8b 	bl	8006dd4 <HAL_RTC_WaitForSynchro>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d004      	beq.n	8006ece <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2204      	movs	r2, #4
 8006ec8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	73fb      	strb	r3, [r7, #15]
=======
 8006e0e:	b580      	push	{r7, lr}
 8006e10:	b084      	sub	sp, #16
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e16:	2300      	movs	r3, #0
 8006e18:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	68da      	ldr	r2, [r3, #12]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e28:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	f003 0320 	and.w	r3, r3, #32
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d10a      	bne.n	8006e4e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f7ff ff8b 	bl	8006d54 <HAL_RTC_WaitForSynchro>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d004      	beq.n	8006e4e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2204      	movs	r2, #4
 8006e48:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	73fb      	strb	r3, [r7, #15]
>>>>>>> flight_hardware
    }
  }

  return status;
<<<<<<< HEAD
 8006ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3710      	adds	r7, #16
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <RTC_ByteToBcd2>:
=======
 8006e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3710      	adds	r7, #16
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <RTC_ByteToBcd2>:
>>>>>>> flight_hardware
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
<<<<<<< HEAD
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	4603      	mov	r3, r0
 8006ee0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8006ee6:	e005      	b.n	8006ef4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	3301      	adds	r3, #1
 8006eec:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8006eee:	79fb      	ldrb	r3, [r7, #7]
 8006ef0:	3b0a      	subs	r3, #10
 8006ef2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006ef4:	79fb      	ldrb	r3, [r7, #7]
 8006ef6:	2b09      	cmp	r3, #9
 8006ef8:	d8f6      	bhi.n	8006ee8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	011b      	lsls	r3, r3, #4
 8006f00:	b2da      	uxtb	r2, r3
 8006f02:	79fb      	ldrb	r3, [r7, #7]
 8006f04:	4313      	orrs	r3, r2
 8006f06:	b2db      	uxtb	r3, r3
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3714      	adds	r7, #20
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <RTC_Bcd2ToByte>:
=======
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	4603      	mov	r3, r0
 8006e60:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006e62:	2300      	movs	r3, #0
 8006e64:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8006e66:	e005      	b.n	8006e74 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8006e6e:	79fb      	ldrb	r3, [r7, #7]
 8006e70:	3b0a      	subs	r3, #10
 8006e72:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006e74:	79fb      	ldrb	r3, [r7, #7]
 8006e76:	2b09      	cmp	r3, #9
 8006e78:	d8f6      	bhi.n	8006e68 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	011b      	lsls	r3, r3, #4
 8006e80:	b2da      	uxtb	r2, r3
 8006e82:	79fb      	ldrb	r3, [r7, #7]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	b2db      	uxtb	r3, r3
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3714      	adds	r7, #20
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <RTC_Bcd2ToByte>:
>>>>>>> flight_hardware
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
<<<<<<< HEAD
 8006f14:	b480      	push	{r7}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8006f22:	79fb      	ldrb	r3, [r7, #7]
 8006f24:	091b      	lsrs	r3, r3, #4
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	461a      	mov	r2, r3
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	4413      	add	r3, r2
 8006f30:	005b      	lsls	r3, r3, #1
 8006f32:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	b2da      	uxtb	r2, r3
 8006f38:	79fb      	ldrb	r3, [r7, #7]
 8006f3a:	f003 030f 	and.w	r3, r3, #15
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	4413      	add	r3, r2
 8006f42:	b2db      	uxtb	r3, r3
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3714      	adds	r7, #20
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <HAL_SPI_Init>:
=======
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8006ea2:	79fb      	ldrb	r3, [r7, #7]
 8006ea4:	091b      	lsrs	r3, r3, #4
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	4613      	mov	r3, r2
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	4413      	add	r3, r2
 8006eb0:	005b      	lsls	r3, r3, #1
 8006eb2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	b2da      	uxtb	r2, r3
 8006eb8:	79fb      	ldrb	r3, [r7, #7]
 8006eba:	f003 030f 	and.w	r3, r3, #15
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	4413      	add	r3, r2
 8006ec2:	b2db      	uxtb	r3, r3
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3714      	adds	r7, #20
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <HAL_SPI_Init>:
>>>>>>> flight_hardware
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d101      	bne.n	8006f62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e07b      	b.n	800705a <HAL_SPI_Init+0x10a>
=======
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d101      	bne.n	8006ee2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e07b      	b.n	8006fda <HAL_SPI_Init+0x10a>
>>>>>>> flight_hardware
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
<<<<<<< HEAD
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d108      	bne.n	8006f7c <HAL_SPI_Init+0x2c>
=======
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d108      	bne.n	8006efc <HAL_SPI_Init+0x2c>
>>>>>>> flight_hardware
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
<<<<<<< HEAD
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f72:	d009      	beq.n	8006f88 <HAL_SPI_Init+0x38>
=======
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ef2:	d009      	beq.n	8006f08 <HAL_SPI_Init+0x38>
>>>>>>> flight_hardware
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
<<<<<<< HEAD
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	61da      	str	r2, [r3, #28]
 8006f7a:	e005      	b.n	8006f88 <HAL_SPI_Init+0x38>
=======
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	61da      	str	r2, [r3, #28]
 8006efa:	e005      	b.n	8006f08 <HAL_SPI_Init+0x38>
>>>>>>> flight_hardware
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
<<<<<<< HEAD
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	615a      	str	r2, [r3, #20]
=======
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	615a      	str	r2, [r3, #20]
>>>>>>> flight_hardware
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
<<<<<<< HEAD
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d106      	bne.n	8006fa8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
=======
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d106      	bne.n	8006f28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
>>>>>>> flight_hardware

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
<<<<<<< HEAD
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f7fb fcda 	bl	800295c <HAL_SPI_MspInit>
=======
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f7fb fcda 	bl	80028dc <HAL_SPI_MspInit>
>>>>>>> flight_hardware
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
<<<<<<< HEAD
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2202      	movs	r2, #2
 8006fac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fbe:	601a      	str	r2, [r3, #0]
=======
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f3e:	601a      	str	r2, [r3, #0]
>>>>>>> flight_hardware

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
<<<<<<< HEAD
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006fd0:	431a      	orrs	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fda:	431a      	orrs	r2, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	f003 0302 	and.w	r3, r3, #2
 8006fe4:	431a      	orrs	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	695b      	ldr	r3, [r3, #20]
 8006fea:	f003 0301 	and.w	r3, r3, #1
 8006fee:	431a      	orrs	r2, r3
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	699b      	ldr	r3, [r3, #24]
 8006ff4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ff8:	431a      	orrs	r2, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	69db      	ldr	r3, [r3, #28]
 8006ffe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007002:	431a      	orrs	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a1b      	ldr	r3, [r3, #32]
 8007008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800700c:	ea42 0103 	orr.w	r1, r2, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007014:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	430a      	orrs	r2, r1
 800701e:	601a      	str	r2, [r3, #0]
=======
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006f50:	431a      	orrs	r2, r3
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f5a:	431a      	orrs	r2, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	f003 0302 	and.w	r3, r3, #2
 8006f64:	431a      	orrs	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	695b      	ldr	r3, [r3, #20]
 8006f6a:	f003 0301 	and.w	r3, r3, #1
 8006f6e:	431a      	orrs	r2, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	699b      	ldr	r3, [r3, #24]
 8006f74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f78:	431a      	orrs	r2, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	69db      	ldr	r3, [r3, #28]
 8006f7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f82:	431a      	orrs	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a1b      	ldr	r3, [r3, #32]
 8006f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f8c:	ea42 0103 	orr.w	r1, r2, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f94:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	430a      	orrs	r2, r1
 8006f9e:	601a      	str	r2, [r3, #0]
>>>>>>> flight_hardware
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
<<<<<<< HEAD
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	699b      	ldr	r3, [r3, #24]
 8007024:	0c1b      	lsrs	r3, r3, #16
 8007026:	f003 0104 	and.w	r1, r3, #4
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702e:	f003 0210 	and.w	r2, r3, #16
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	430a      	orrs	r2, r1
 8007038:	605a      	str	r2, [r3, #4]
=======
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	699b      	ldr	r3, [r3, #24]
 8006fa4:	0c1b      	lsrs	r3, r3, #16
 8006fa6:	f003 0104 	and.w	r1, r3, #4
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fae:	f003 0210 	and.w	r2, r3, #16
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	430a      	orrs	r2, r1
 8006fb8:	605a      	str	r2, [r3, #4]
>>>>>>> flight_hardware
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
<<<<<<< HEAD
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	69da      	ldr	r2, [r3, #28]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007048:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3708      	adds	r7, #8
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <HAL_SPI_Transmit>:
=======
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	69da      	ldr	r2, [r3, #28]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006fc8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3708      	adds	r7, #8
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <HAL_SPI_Transmit>:
>>>>>>> flight_hardware
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 8007062:	b580      	push	{r7, lr}
 8007064:	b088      	sub	sp, #32
 8007066:	af00      	add	r7, sp, #0
 8007068:	60f8      	str	r0, [r7, #12]
 800706a:	60b9      	str	r1, [r7, #8]
 800706c:	603b      	str	r3, [r7, #0]
 800706e:	4613      	mov	r3, r2
 8007070:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007072:	2300      	movs	r3, #0
 8007074:	77fb      	strb	r3, [r7, #31]
=======
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b088      	sub	sp, #32
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	60f8      	str	r0, [r7, #12]
 8006fea:	60b9      	str	r1, [r7, #8]
 8006fec:	603b      	str	r3, [r7, #0]
 8006fee:	4613      	mov	r3, r2
 8006ff0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	77fb      	strb	r3, [r7, #31]
>>>>>>> flight_hardware

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
<<<<<<< HEAD
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800707c:	2b01      	cmp	r3, #1
 800707e:	d101      	bne.n	8007084 <HAL_SPI_Transmit+0x22>
 8007080:	2302      	movs	r3, #2
 8007082:	e12d      	b.n	80072e0 <HAL_SPI_Transmit+0x27e>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800708c:	f7fb ffe2 	bl	8003054 <HAL_GetTick>
 8007090:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007092:	88fb      	ldrh	r3, [r7, #6]
 8007094:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800709c:	b2db      	uxtb	r3, r3
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d002      	beq.n	80070a8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80070a2:	2302      	movs	r3, #2
 80070a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80070a6:	e116      	b.n	80072d6 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d002      	beq.n	80070b4 <HAL_SPI_Transmit+0x52>
 80070ae:	88fb      	ldrh	r3, [r7, #6]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d102      	bne.n	80070ba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80070b8:	e10d      	b.n	80072d6 <HAL_SPI_Transmit+0x274>
=======
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d101      	bne.n	8007004 <HAL_SPI_Transmit+0x22>
 8007000:	2302      	movs	r3, #2
 8007002:	e12d      	b.n	8007260 <HAL_SPI_Transmit+0x27e>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800700c:	f7fb ffe2 	bl	8002fd4 <HAL_GetTick>
 8007010:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007012:	88fb      	ldrh	r3, [r7, #6]
 8007014:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800701c:	b2db      	uxtb	r3, r3
 800701e:	2b01      	cmp	r3, #1
 8007020:	d002      	beq.n	8007028 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007022:	2302      	movs	r3, #2
 8007024:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007026:	e116      	b.n	8007256 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d002      	beq.n	8007034 <HAL_SPI_Transmit+0x52>
 800702e:	88fb      	ldrh	r3, [r7, #6]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d102      	bne.n	800703a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007038:	e10d      	b.n	8007256 <HAL_SPI_Transmit+0x274>
>>>>>>> flight_hardware
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
<<<<<<< HEAD
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2203      	movs	r2, #3
 80070be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2200      	movs	r2, #0
 80070c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	68ba      	ldr	r2, [r7, #8]
 80070cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	88fa      	ldrh	r2, [r7, #6]
 80070d2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	88fa      	ldrh	r2, [r7, #6]
 80070d8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2200      	movs	r2, #0
 80070de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2200      	movs	r2, #0
 80070e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2200      	movs	r2, #0
 80070ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2200      	movs	r2, #0
 80070f0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2200      	movs	r2, #0
 80070f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007100:	d10f      	bne.n	8007122 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007110:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007120:	601a      	str	r2, [r3, #0]
=======
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2203      	movs	r2, #3
 800703e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2200      	movs	r2, #0
 8007046:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	88fa      	ldrh	r2, [r7, #6]
 8007052:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	88fa      	ldrh	r2, [r7, #6]
 8007058:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2200      	movs	r2, #0
 800705e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2200      	movs	r2, #0
 800706a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2200      	movs	r2, #0
 8007070:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007080:	d10f      	bne.n	80070a2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007090:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80070a0:	601a      	str	r2, [r3, #0]
>>>>>>> flight_hardware
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
<<<<<<< HEAD
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800712c:	2b40      	cmp	r3, #64	; 0x40
 800712e:	d007      	beq.n	8007140 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800713e:	601a      	str	r2, [r3, #0]
=======
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ac:	2b40      	cmp	r3, #64	; 0x40
 80070ae:	d007      	beq.n	80070c0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070be:	601a      	str	r2, [r3, #0]
>>>>>>> flight_hardware
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
<<<<<<< HEAD
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007148:	d14f      	bne.n	80071ea <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d002      	beq.n	8007158 <HAL_SPI_Transmit+0xf6>
 8007152:	8afb      	ldrh	r3, [r7, #22]
 8007154:	2b01      	cmp	r3, #1
 8007156:	d142      	bne.n	80071de <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800715c:	881a      	ldrh	r2, [r3, #0]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007168:	1c9a      	adds	r2, r3, #2
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007172:	b29b      	uxth	r3, r3
 8007174:	3b01      	subs	r3, #1
 8007176:	b29a      	uxth	r2, r3
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800717c:	e02f      	b.n	80071de <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	f003 0302 	and.w	r3, r3, #2
 8007188:	2b02      	cmp	r3, #2
 800718a:	d112      	bne.n	80071b2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007190:	881a      	ldrh	r2, [r3, #0]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800719c:	1c9a      	adds	r2, r3, #2
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	3b01      	subs	r3, #1
 80071aa:	b29a      	uxth	r2, r3
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	86da      	strh	r2, [r3, #54]	; 0x36
 80071b0:	e015      	b.n	80071de <HAL_SPI_Transmit+0x17c>
=======
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070c8:	d14f      	bne.n	800716a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d002      	beq.n	80070d8 <HAL_SPI_Transmit+0xf6>
 80070d2:	8afb      	ldrh	r3, [r7, #22]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d142      	bne.n	800715e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070dc:	881a      	ldrh	r2, [r3, #0]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e8:	1c9a      	adds	r2, r3, #2
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	3b01      	subs	r3, #1
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80070fc:	e02f      	b.n	800715e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	f003 0302 	and.w	r3, r3, #2
 8007108:	2b02      	cmp	r3, #2
 800710a:	d112      	bne.n	8007132 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007110:	881a      	ldrh	r2, [r3, #0]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800711c:	1c9a      	adds	r2, r3, #2
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007126:	b29b      	uxth	r3, r3
 8007128:	3b01      	subs	r3, #1
 800712a:	b29a      	uxth	r2, r3
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007130:	e015      	b.n	800715e <HAL_SPI_Transmit+0x17c>
>>>>>>> flight_hardware
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< HEAD
 80071b2:	f7fb ff4f 	bl	8003054 <HAL_GetTick>
 80071b6:	4602      	mov	r2, r0
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	1ad3      	subs	r3, r2, r3
 80071bc:	683a      	ldr	r2, [r7, #0]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d803      	bhi.n	80071ca <HAL_SPI_Transmit+0x168>
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071c8:	d102      	bne.n	80071d0 <HAL_SPI_Transmit+0x16e>
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d106      	bne.n	80071de <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80071d0:	2303      	movs	r3, #3
 80071d2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80071dc:	e07b      	b.n	80072d6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d1ca      	bne.n	800717e <HAL_SPI_Transmit+0x11c>
 80071e8:	e050      	b.n	800728c <HAL_SPI_Transmit+0x22a>
=======
 8007132:	f7fb ff4f 	bl	8002fd4 <HAL_GetTick>
 8007136:	4602      	mov	r2, r0
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	683a      	ldr	r2, [r7, #0]
 800713e:	429a      	cmp	r2, r3
 8007140:	d803      	bhi.n	800714a <HAL_SPI_Transmit+0x168>
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007148:	d102      	bne.n	8007150 <HAL_SPI_Transmit+0x16e>
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d106      	bne.n	800715e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8007150:	2303      	movs	r3, #3
 8007152:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800715c:	e07b      	b.n	8007256 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007162:	b29b      	uxth	r3, r3
 8007164:	2b00      	cmp	r3, #0
 8007166:	d1ca      	bne.n	80070fe <HAL_SPI_Transmit+0x11c>
 8007168:	e050      	b.n	800720c <HAL_SPI_Transmit+0x22a>
>>>>>>> flight_hardware
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
<<<<<<< HEAD
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d002      	beq.n	80071f8 <HAL_SPI_Transmit+0x196>
 80071f2:	8afb      	ldrh	r3, [r7, #22]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d144      	bne.n	8007282 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	330c      	adds	r3, #12
 8007202:	7812      	ldrb	r2, [r2, #0]
 8007204:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800720a:	1c5a      	adds	r2, r3, #1
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007214:	b29b      	uxth	r3, r3
 8007216:	3b01      	subs	r3, #1
 8007218:	b29a      	uxth	r2, r3
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800721e:	e030      	b.n	8007282 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	f003 0302 	and.w	r3, r3, #2
 800722a:	2b02      	cmp	r3, #2
 800722c:	d113      	bne.n	8007256 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	330c      	adds	r3, #12
 8007238:	7812      	ldrb	r2, [r2, #0]
 800723a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007240:	1c5a      	adds	r2, r3, #1
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800724a:	b29b      	uxth	r3, r3
 800724c:	3b01      	subs	r3, #1
 800724e:	b29a      	uxth	r2, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	86da      	strh	r2, [r3, #54]	; 0x36
 8007254:	e015      	b.n	8007282 <HAL_SPI_Transmit+0x220>
=======
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d002      	beq.n	8007178 <HAL_SPI_Transmit+0x196>
 8007172:	8afb      	ldrh	r3, [r7, #22]
 8007174:	2b01      	cmp	r3, #1
 8007176:	d144      	bne.n	8007202 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	330c      	adds	r3, #12
 8007182:	7812      	ldrb	r2, [r2, #0]
 8007184:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718a:	1c5a      	adds	r2, r3, #1
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007194:	b29b      	uxth	r3, r3
 8007196:	3b01      	subs	r3, #1
 8007198:	b29a      	uxth	r2, r3
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800719e:	e030      	b.n	8007202 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	f003 0302 	and.w	r3, r3, #2
 80071aa:	2b02      	cmp	r3, #2
 80071ac:	d113      	bne.n	80071d6 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	330c      	adds	r3, #12
 80071b8:	7812      	ldrb	r2, [r2, #0]
 80071ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c0:	1c5a      	adds	r2, r3, #1
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	3b01      	subs	r3, #1
 80071ce:	b29a      	uxth	r2, r3
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80071d4:	e015      	b.n	8007202 <HAL_SPI_Transmit+0x220>
>>>>>>> flight_hardware
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< HEAD
 8007256:	f7fb fefd 	bl	8003054 <HAL_GetTick>
 800725a:	4602      	mov	r2, r0
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	1ad3      	subs	r3, r2, r3
 8007260:	683a      	ldr	r2, [r7, #0]
 8007262:	429a      	cmp	r2, r3
 8007264:	d803      	bhi.n	800726e <HAL_SPI_Transmit+0x20c>
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800726c:	d102      	bne.n	8007274 <HAL_SPI_Transmit+0x212>
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d106      	bne.n	8007282 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8007274:	2303      	movs	r3, #3
 8007276:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8007280:	e029      	b.n	80072d6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007286:	b29b      	uxth	r3, r3
 8007288:	2b00      	cmp	r3, #0
 800728a:	d1c9      	bne.n	8007220 <HAL_SPI_Transmit+0x1be>
=======
 80071d6:	f7fb fefd 	bl	8002fd4 <HAL_GetTick>
 80071da:	4602      	mov	r2, r0
 80071dc:	69bb      	ldr	r3, [r7, #24]
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	683a      	ldr	r2, [r7, #0]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d803      	bhi.n	80071ee <HAL_SPI_Transmit+0x20c>
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071ec:	d102      	bne.n	80071f4 <HAL_SPI_Transmit+0x212>
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d106      	bne.n	8007202 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80071f4:	2303      	movs	r3, #3
 80071f6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8007200:	e029      	b.n	8007256 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007206:	b29b      	uxth	r3, r3
 8007208:	2b00      	cmp	r3, #0
 800720a:	d1c9      	bne.n	80071a0 <HAL_SPI_Transmit+0x1be>
>>>>>>> flight_hardware
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 800728c:	69ba      	ldr	r2, [r7, #24]
 800728e:	6839      	ldr	r1, [r7, #0]
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	f000 fd27 	bl	8007ce4 <SPI_EndRxTxTransaction>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d002      	beq.n	80072a2 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2220      	movs	r2, #32
 80072a0:	655a      	str	r2, [r3, #84]	; 0x54
=======
 800720c:	69ba      	ldr	r2, [r7, #24]
 800720e:	6839      	ldr	r1, [r7, #0]
 8007210:	68f8      	ldr	r0, [r7, #12]
 8007212:	f000 fd27 	bl	8007c64 <SPI_EndRxTxTransaction>
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d002      	beq.n	8007222 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2220      	movs	r2, #32
 8007220:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> flight_hardware
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
<<<<<<< HEAD
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d10a      	bne.n	80072c0 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80072aa:	2300      	movs	r3, #0
 80072ac:	613b      	str	r3, [r7, #16]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	613b      	str	r3, [r7, #16]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	613b      	str	r3, [r7, #16]
 80072be:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d002      	beq.n	80072ce <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	77fb      	strb	r3, [r7, #31]
 80072cc:	e003      	b.n	80072d6 <HAL_SPI_Transmit+0x274>
=======
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d10a      	bne.n	8007240 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800722a:	2300      	movs	r3, #0
 800722c:	613b      	str	r3, [r7, #16]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	613b      	str	r3, [r7, #16]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	613b      	str	r3, [r7, #16]
 800723e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007244:	2b00      	cmp	r3, #0
 8007246:	d002      	beq.n	800724e <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	77fb      	strb	r3, [r7, #31]
 800724c:	e003      	b.n	8007256 <HAL_SPI_Transmit+0x274>
>>>>>>> flight_hardware
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
<<<<<<< HEAD
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2201      	movs	r2, #1
 80072d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
=======
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
>>>>>>> flight_hardware
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
<<<<<<< HEAD
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80072de:	7ffb      	ldrb	r3, [r7, #31]
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3720      	adds	r7, #32
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <HAL_SPI_Receive>:
=======
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800725e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007260:	4618      	mov	r0, r3
 8007262:	3720      	adds	r7, #32
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <HAL_SPI_Receive>:
>>>>>>> flight_hardware
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b088      	sub	sp, #32
 80072ec:	af02      	add	r7, sp, #8
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	603b      	str	r3, [r7, #0]
 80072f4:	4613      	mov	r3, r2
 80072f6:	80fb      	strh	r3, [r7, #6]
=======
 8007268:	b580      	push	{r7, lr}
 800726a:	b088      	sub	sp, #32
 800726c:	af02      	add	r7, sp, #8
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	603b      	str	r3, [r7, #0]
 8007274:	4613      	mov	r3, r2
 8007276:	80fb      	strh	r3, [r7, #6]
>>>>>>> flight_hardware
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
<<<<<<< HEAD
 80072f8:	2300      	movs	r3, #0
 80072fa:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007302:	b2db      	uxtb	r3, r3
 8007304:	2b01      	cmp	r3, #1
 8007306:	d002      	beq.n	800730e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8007308:	2302      	movs	r3, #2
 800730a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800730c:	e0fb      	b.n	8007506 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007316:	d112      	bne.n	800733e <HAL_SPI_Receive+0x56>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d10e      	bne.n	800733e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2204      	movs	r2, #4
 8007324:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007328:	88fa      	ldrh	r2, [r7, #6]
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	9300      	str	r3, [sp, #0]
 800732e:	4613      	mov	r3, r2
 8007330:	68ba      	ldr	r2, [r7, #8]
 8007332:	68b9      	ldr	r1, [r7, #8]
 8007334:	68f8      	ldr	r0, [r7, #12]
 8007336:	f000 f8ef 	bl	8007518 <HAL_SPI_TransmitReceive>
 800733a:	4603      	mov	r3, r0
 800733c:	e0e8      	b.n	8007510 <HAL_SPI_Receive+0x228>
=======
 8007278:	2300      	movs	r3, #0
 800727a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007282:	b2db      	uxtb	r3, r3
 8007284:	2b01      	cmp	r3, #1
 8007286:	d002      	beq.n	800728e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8007288:	2302      	movs	r3, #2
 800728a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800728c:	e0fb      	b.n	8007486 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007296:	d112      	bne.n	80072be <HAL_SPI_Receive+0x56>
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d10e      	bne.n	80072be <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2204      	movs	r2, #4
 80072a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80072a8:	88fa      	ldrh	r2, [r7, #6]
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	9300      	str	r3, [sp, #0]
 80072ae:	4613      	mov	r3, r2
 80072b0:	68ba      	ldr	r2, [r7, #8]
 80072b2:	68b9      	ldr	r1, [r7, #8]
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f000 f8ef 	bl	8007498 <HAL_SPI_TransmitReceive>
 80072ba:	4603      	mov	r3, r0
 80072bc:	e0e8      	b.n	8007490 <HAL_SPI_Receive+0x228>
>>>>>>> flight_hardware
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
<<<<<<< HEAD
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007344:	2b01      	cmp	r3, #1
 8007346:	d101      	bne.n	800734c <HAL_SPI_Receive+0x64>
 8007348:	2302      	movs	r3, #2
 800734a:	e0e1      	b.n	8007510 <HAL_SPI_Receive+0x228>
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007354:	f7fb fe7e 	bl	8003054 <HAL_GetTick>
 8007358:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d002      	beq.n	8007366 <HAL_SPI_Receive+0x7e>
 8007360:	88fb      	ldrh	r3, [r7, #6]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d102      	bne.n	800736c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	75fb      	strb	r3, [r7, #23]
    goto error;
 800736a:	e0cc      	b.n	8007506 <HAL_SPI_Receive+0x21e>
=======
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d101      	bne.n	80072cc <HAL_SPI_Receive+0x64>
 80072c8:	2302      	movs	r3, #2
 80072ca:	e0e1      	b.n	8007490 <HAL_SPI_Receive+0x228>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072d4:	f7fb fe7e 	bl	8002fd4 <HAL_GetTick>
 80072d8:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d002      	beq.n	80072e6 <HAL_SPI_Receive+0x7e>
 80072e0:	88fb      	ldrh	r3, [r7, #6]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d102      	bne.n	80072ec <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80072ea:	e0cc      	b.n	8007486 <HAL_SPI_Receive+0x21e>
>>>>>>> flight_hardware
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
<<<<<<< HEAD
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2204      	movs	r2, #4
 8007370:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2200      	movs	r2, #0
 8007378:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	68ba      	ldr	r2, [r7, #8]
 800737e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	88fa      	ldrh	r2, [r7, #6]
 8007384:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	88fa      	ldrh	r2, [r7, #6]
 800738a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2200      	movs	r2, #0
 8007396:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2200      	movs	r2, #0
 800739c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2200      	movs	r2, #0
 80073a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2200      	movs	r2, #0
 80073a8:	645a      	str	r2, [r3, #68]	; 0x44
=======
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2204      	movs	r2, #4
 80072f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2200      	movs	r2, #0
 80072f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	68ba      	ldr	r2, [r7, #8]
 80072fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	88fa      	ldrh	r2, [r7, #6]
 8007304:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	88fa      	ldrh	r2, [r7, #6]
 800730a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2200      	movs	r2, #0
 8007310:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2200      	movs	r2, #0
 8007322:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2200      	movs	r2, #0
 8007328:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> flight_hardware
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
<<<<<<< HEAD
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073b2:	d10f      	bne.n	80073d4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80073d2:	601a      	str	r2, [r3, #0]
=======
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007332:	d10f      	bne.n	8007354 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007342:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007352:	601a      	str	r2, [r3, #0]
>>>>>>> flight_hardware
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
<<<<<<< HEAD
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073de:	2b40      	cmp	r3, #64	; 0x40
 80073e0:	d007      	beq.n	80073f2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073f0:	601a      	str	r2, [r3, #0]
=======
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800735e:	2b40      	cmp	r3, #64	; 0x40
 8007360:	d007      	beq.n	8007372 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007370:	601a      	str	r2, [r3, #0]
>>>>>>> flight_hardware
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
<<<<<<< HEAD
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d16a      	bne.n	80074d0 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80073fa:	e032      	b.n	8007462 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	f003 0301 	and.w	r3, r3, #1
 8007406:	2b01      	cmp	r3, #1
 8007408:	d115      	bne.n	8007436 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f103 020c 	add.w	r2, r3, #12
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007416:	7812      	ldrb	r2, [r2, #0]
 8007418:	b2d2      	uxtb	r2, r2
 800741a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007420:	1c5a      	adds	r2, r3, #1
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800742a:	b29b      	uxth	r3, r3
 800742c:	3b01      	subs	r3, #1
 800742e:	b29a      	uxth	r2, r3
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007434:	e015      	b.n	8007462 <HAL_SPI_Receive+0x17a>
=======
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d16a      	bne.n	8007450 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800737a:	e032      	b.n	80073e2 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	f003 0301 	and.w	r3, r3, #1
 8007386:	2b01      	cmp	r3, #1
 8007388:	d115      	bne.n	80073b6 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f103 020c 	add.w	r2, r3, #12
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007396:	7812      	ldrb	r2, [r2, #0]
 8007398:	b2d2      	uxtb	r2, r2
 800739a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a0:	1c5a      	adds	r2, r3, #1
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	3b01      	subs	r3, #1
 80073ae:	b29a      	uxth	r2, r3
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80073b4:	e015      	b.n	80073e2 <HAL_SPI_Receive+0x17a>
>>>>>>> flight_hardware
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< HEAD
 8007436:	f7fb fe0d 	bl	8003054 <HAL_GetTick>
 800743a:	4602      	mov	r2, r0
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	683a      	ldr	r2, [r7, #0]
 8007442:	429a      	cmp	r2, r3
 8007444:	d803      	bhi.n	800744e <HAL_SPI_Receive+0x166>
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800744c:	d102      	bne.n	8007454 <HAL_SPI_Receive+0x16c>
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d106      	bne.n	8007462 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8007454:	2303      	movs	r3, #3
 8007456:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8007460:	e051      	b.n	8007506 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007466:	b29b      	uxth	r3, r3
 8007468:	2b00      	cmp	r3, #0
 800746a:	d1c7      	bne.n	80073fc <HAL_SPI_Receive+0x114>
 800746c:	e035      	b.n	80074da <HAL_SPI_Receive+0x1f2>
=======
 80073b6:	f7fb fe0d 	bl	8002fd4 <HAL_GetTick>
 80073ba:	4602      	mov	r2, r0
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	1ad3      	subs	r3, r2, r3
 80073c0:	683a      	ldr	r2, [r7, #0]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d803      	bhi.n	80073ce <HAL_SPI_Receive+0x166>
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073cc:	d102      	bne.n	80073d4 <HAL_SPI_Receive+0x16c>
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d106      	bne.n	80073e2 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80073d4:	2303      	movs	r3, #3
 80073d6:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80073e0:	e051      	b.n	8007486 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d1c7      	bne.n	800737c <HAL_SPI_Receive+0x114>
 80073ec:	e035      	b.n	800745a <HAL_SPI_Receive+0x1f2>
>>>>>>> flight_hardware
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
<<<<<<< HEAD
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	f003 0301 	and.w	r3, r3, #1
 8007478:	2b01      	cmp	r3, #1
 800747a:	d113      	bne.n	80074a4 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68da      	ldr	r2, [r3, #12]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007486:	b292      	uxth	r2, r2
 8007488:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800748e:	1c9a      	adds	r2, r3, #2
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007498:	b29b      	uxth	r3, r3
 800749a:	3b01      	subs	r3, #1
 800749c:	b29a      	uxth	r2, r3
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80074a2:	e015      	b.n	80074d0 <HAL_SPI_Receive+0x1e8>
=======
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	f003 0301 	and.w	r3, r3, #1
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d113      	bne.n	8007424 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68da      	ldr	r2, [r3, #12]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007406:	b292      	uxth	r2, r2
 8007408:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740e:	1c9a      	adds	r2, r3, #2
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007418:	b29b      	uxth	r3, r3
 800741a:	3b01      	subs	r3, #1
 800741c:	b29a      	uxth	r2, r3
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007422:	e015      	b.n	8007450 <HAL_SPI_Receive+0x1e8>
>>>>>>> flight_hardware
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< HEAD
 80074a4:	f7fb fdd6 	bl	8003054 <HAL_GetTick>
 80074a8:	4602      	mov	r2, r0
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	1ad3      	subs	r3, r2, r3
 80074ae:	683a      	ldr	r2, [r7, #0]
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d803      	bhi.n	80074bc <HAL_SPI_Receive+0x1d4>
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074ba:	d102      	bne.n	80074c2 <HAL_SPI_Receive+0x1da>
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d106      	bne.n	80074d0 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80074c2:	2303      	movs	r3, #3
 80074c4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80074ce:	e01a      	b.n	8007506 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d1c9      	bne.n	800746e <HAL_SPI_Receive+0x186>
=======
 8007424:	f7fb fdd6 	bl	8002fd4 <HAL_GetTick>
 8007428:	4602      	mov	r2, r0
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	683a      	ldr	r2, [r7, #0]
 8007430:	429a      	cmp	r2, r3
 8007432:	d803      	bhi.n	800743c <HAL_SPI_Receive+0x1d4>
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800743a:	d102      	bne.n	8007442 <HAL_SPI_Receive+0x1da>
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d106      	bne.n	8007450 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8007442:	2303      	movs	r3, #3
 8007444:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2201      	movs	r2, #1
 800744a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800744e:	e01a      	b.n	8007486 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007454:	b29b      	uxth	r3, r3
 8007456:	2b00      	cmp	r3, #0
 8007458:	d1c9      	bne.n	80073ee <HAL_SPI_Receive+0x186>
>>>>>>> flight_hardware
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 80074da:	693a      	ldr	r2, [r7, #16]
 80074dc:	6839      	ldr	r1, [r7, #0]
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	f000 fb9a 	bl	8007c18 <SPI_EndRxTransaction>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d002      	beq.n	80074f0 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2220      	movs	r2, #32
 80074ee:	655a      	str	r2, [r3, #84]	; 0x54
=======
 800745a:	693a      	ldr	r2, [r7, #16]
 800745c:	6839      	ldr	r1, [r7, #0]
 800745e:	68f8      	ldr	r0, [r7, #12]
 8007460:	f000 fb9a 	bl	8007b98 <SPI_EndRxTransaction>
 8007464:	4603      	mov	r3, r0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d002      	beq.n	8007470 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2220      	movs	r2, #32
 800746e:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> flight_hardware
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
<<<<<<< HEAD
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d002      	beq.n	80074fe <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	75fb      	strb	r3, [r7, #23]
 80074fc:	e003      	b.n	8007506 <HAL_SPI_Receive+0x21e>
=======
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007474:	2b00      	cmp	r3, #0
 8007476:	d002      	beq.n	800747e <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	75fb      	strb	r3, [r7, #23]
 800747c:	e003      	b.n	8007486 <HAL_SPI_Receive+0x21e>
>>>>>>> flight_hardware
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
<<<<<<< HEAD
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2201      	movs	r2, #1
 8007502:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
=======
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2201      	movs	r2, #1
 8007482:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
>>>>>>> flight_hardware
  }

error :
  __HAL_UNLOCK(hspi);
<<<<<<< HEAD
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800750e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007510:	4618      	mov	r0, r3
 8007512:	3718      	adds	r7, #24
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <HAL_SPI_TransmitReceive>:
=======
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800748e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007490:	4618      	mov	r0, r3
 8007492:	3718      	adds	r7, #24
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <HAL_SPI_TransmitReceive>:
>>>>>>> flight_hardware
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
<<<<<<< HEAD
 8007518:	b580      	push	{r7, lr}
 800751a:	b08c      	sub	sp, #48	; 0x30
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	607a      	str	r2, [r7, #4]
 8007524:	807b      	strh	r3, [r7, #2]
=======
 8007498:	b580      	push	{r7, lr}
 800749a:	b08c      	sub	sp, #48	; 0x30
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
 80074a4:	807b      	strh	r3, [r7, #2]
>>>>>>> flight_hardware
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
<<<<<<< HEAD
 8007526:	2301      	movs	r3, #1
 8007528:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800752a:	2300      	movs	r3, #0
 800752c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
=======
 80074a6:	2301      	movs	r3, #1
 80074a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80074aa:	2300      	movs	r3, #0
 80074ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
>>>>>>> flight_hardware

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
<<<<<<< HEAD
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007536:	2b01      	cmp	r3, #1
 8007538:	d101      	bne.n	800753e <HAL_SPI_TransmitReceive+0x26>
 800753a:	2302      	movs	r3, #2
 800753c:	e198      	b.n	8007870 <HAL_SPI_TransmitReceive+0x358>
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2201      	movs	r2, #1
 8007542:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007546:	f7fb fd85 	bl	8003054 <HAL_GetTick>
 800754a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800755c:	887b      	ldrh	r3, [r7, #2]
 800755e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007560:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007564:	2b01      	cmp	r3, #1
 8007566:	d00f      	beq.n	8007588 <HAL_SPI_TransmitReceive+0x70>
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800756e:	d107      	bne.n	8007580 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d103      	bne.n	8007580 <HAL_SPI_TransmitReceive+0x68>
 8007578:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800757c:	2b04      	cmp	r3, #4
 800757e:	d003      	beq.n	8007588 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007580:	2302      	movs	r3, #2
 8007582:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007586:	e16d      	b.n	8007864 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d005      	beq.n	800759a <HAL_SPI_TransmitReceive+0x82>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d002      	beq.n	800759a <HAL_SPI_TransmitReceive+0x82>
 8007594:	887b      	ldrh	r3, [r7, #2]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d103      	bne.n	80075a2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80075a0:	e160      	b.n	8007864 <HAL_SPI_TransmitReceive+0x34c>
=======
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d101      	bne.n	80074be <HAL_SPI_TransmitReceive+0x26>
 80074ba:	2302      	movs	r3, #2
 80074bc:	e198      	b.n	80077f0 <HAL_SPI_TransmitReceive+0x358>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2201      	movs	r2, #1
 80074c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074c6:	f7fb fd85 	bl	8002fd4 <HAL_GetTick>
 80074ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80074dc:	887b      	ldrh	r3, [r7, #2]
 80074de:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80074e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d00f      	beq.n	8007508 <HAL_SPI_TransmitReceive+0x70>
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074ee:	d107      	bne.n	8007500 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d103      	bne.n	8007500 <HAL_SPI_TransmitReceive+0x68>
 80074f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074fc:	2b04      	cmp	r3, #4
 80074fe:	d003      	beq.n	8007508 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007500:	2302      	movs	r3, #2
 8007502:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007506:	e16d      	b.n	80077e4 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d005      	beq.n	800751a <HAL_SPI_TransmitReceive+0x82>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d002      	beq.n	800751a <HAL_SPI_TransmitReceive+0x82>
 8007514:	887b      	ldrh	r3, [r7, #2]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d103      	bne.n	8007522 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007520:	e160      	b.n	80077e4 <HAL_SPI_TransmitReceive+0x34c>
>>>>>>> flight_hardware
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
<<<<<<< HEAD
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	2b04      	cmp	r3, #4
 80075ac:	d003      	beq.n	80075b6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2205      	movs	r2, #5
 80075b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
=======
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007528:	b2db      	uxtb	r3, r3
 800752a:	2b04      	cmp	r3, #4
 800752c:	d003      	beq.n	8007536 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2205      	movs	r2, #5
 8007532:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
>>>>>>> flight_hardware
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
<<<<<<< HEAD
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2200      	movs	r2, #0
 80075ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	887a      	ldrh	r2, [r7, #2]
 80075c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	887a      	ldrh	r2, [r7, #2]
 80075cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	887a      	ldrh	r2, [r7, #2]
 80075d8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	887a      	ldrh	r2, [r7, #2]
 80075de:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2200      	movs	r2, #0
 80075ea:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2200      	movs	r2, #0
 800753a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	887a      	ldrh	r2, [r7, #2]
 8007546:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	887a      	ldrh	r2, [r7, #2]
 800754c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	68ba      	ldr	r2, [r7, #8]
 8007552:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	887a      	ldrh	r2, [r7, #2]
 8007558:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	887a      	ldrh	r2, [r7, #2]
 800755e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2200      	movs	r2, #0
 8007564:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2200      	movs	r2, #0
 800756a:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> flight_hardware
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
<<<<<<< HEAD
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075f6:	2b40      	cmp	r3, #64	; 0x40
 80075f8:	d007      	beq.n	800760a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007608:	601a      	str	r2, [r3, #0]
=======
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007576:	2b40      	cmp	r3, #64	; 0x40
 8007578:	d007      	beq.n	800758a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007588:	601a      	str	r2, [r3, #0]
>>>>>>> flight_hardware
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
<<<<<<< HEAD
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	68db      	ldr	r3, [r3, #12]
 800760e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007612:	d17c      	bne.n	800770e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d002      	beq.n	8007622 <HAL_SPI_TransmitReceive+0x10a>
 800761c:	8b7b      	ldrh	r3, [r7, #26]
 800761e:	2b01      	cmp	r3, #1
 8007620:	d16a      	bne.n	80076f8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007626:	881a      	ldrh	r2, [r3, #0]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007632:	1c9a      	adds	r2, r3, #2
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800763c:	b29b      	uxth	r3, r3
 800763e:	3b01      	subs	r3, #1
 8007640:	b29a      	uxth	r2, r3
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	86da      	strh	r2, [r3, #54]	; 0x36
=======
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007592:	d17c      	bne.n	800768e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d002      	beq.n	80075a2 <HAL_SPI_TransmitReceive+0x10a>
 800759c:	8b7b      	ldrh	r3, [r7, #26]
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d16a      	bne.n	8007678 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a6:	881a      	ldrh	r2, [r3, #0]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b2:	1c9a      	adds	r2, r3, #2
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075bc:	b29b      	uxth	r3, r3
 80075be:	3b01      	subs	r3, #1
 80075c0:	b29a      	uxth	r2, r3
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	86da      	strh	r2, [r3, #54]	; 0x36
>>>>>>> flight_hardware
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
<<<<<<< HEAD
 8007646:	e057      	b.n	80076f8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	f003 0302 	and.w	r3, r3, #2
 8007652:	2b02      	cmp	r3, #2
 8007654:	d11b      	bne.n	800768e <HAL_SPI_TransmitReceive+0x176>
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800765a:	b29b      	uxth	r3, r3
 800765c:	2b00      	cmp	r3, #0
 800765e:	d016      	beq.n	800768e <HAL_SPI_TransmitReceive+0x176>
 8007660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007662:	2b01      	cmp	r3, #1
 8007664:	d113      	bne.n	800768e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800766a:	881a      	ldrh	r2, [r3, #0]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007676:	1c9a      	adds	r2, r3, #2
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007680:	b29b      	uxth	r3, r3
 8007682:	3b01      	subs	r3, #1
 8007684:	b29a      	uxth	r2, r3
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800768a:	2300      	movs	r3, #0
 800768c:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 80075c6:	e057      	b.n	8007678 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	f003 0302 	and.w	r3, r3, #2
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d11b      	bne.n	800760e <HAL_SPI_TransmitReceive+0x176>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075da:	b29b      	uxth	r3, r3
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d016      	beq.n	800760e <HAL_SPI_TransmitReceive+0x176>
 80075e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d113      	bne.n	800760e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ea:	881a      	ldrh	r2, [r3, #0]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f6:	1c9a      	adds	r2, r3, #2
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007600:	b29b      	uxth	r3, r3
 8007602:	3b01      	subs	r3, #1
 8007604:	b29a      	uxth	r2, r3
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800760a:	2300      	movs	r3, #0
 800760c:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> flight_hardware
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
<<<<<<< HEAD
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	f003 0301 	and.w	r3, r3, #1
 8007698:	2b01      	cmp	r3, #1
 800769a:	d119      	bne.n	80076d0 <HAL_SPI_TransmitReceive+0x1b8>
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d014      	beq.n	80076d0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	68da      	ldr	r2, [r3, #12]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b0:	b292      	uxth	r2, r2
 80076b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b8:	1c9a      	adds	r2, r3, #2
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	3b01      	subs	r3, #1
 80076c6:	b29a      	uxth	r2, r3
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80076cc:	2301      	movs	r3, #1
 80076ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80076d0:	f7fb fcc0 	bl	8003054 <HAL_GetTick>
 80076d4:	4602      	mov	r2, r0
 80076d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d8:	1ad3      	subs	r3, r2, r3
 80076da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076dc:	429a      	cmp	r2, r3
 80076de:	d80b      	bhi.n	80076f8 <HAL_SPI_TransmitReceive+0x1e0>
 80076e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076e6:	d007      	beq.n	80076f8 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80076e8:	2303      	movs	r3, #3
 80076ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2201      	movs	r2, #1
 80076f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80076f6:	e0b5      	b.n	8007864 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d1a2      	bne.n	8007648 <HAL_SPI_TransmitReceive+0x130>
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007706:	b29b      	uxth	r3, r3
 8007708:	2b00      	cmp	r3, #0
 800770a:	d19d      	bne.n	8007648 <HAL_SPI_TransmitReceive+0x130>
 800770c:	e080      	b.n	8007810 <HAL_SPI_TransmitReceive+0x2f8>
=======
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	f003 0301 	and.w	r3, r3, #1
 8007618:	2b01      	cmp	r3, #1
 800761a:	d119      	bne.n	8007650 <HAL_SPI_TransmitReceive+0x1b8>
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007620:	b29b      	uxth	r3, r3
 8007622:	2b00      	cmp	r3, #0
 8007624:	d014      	beq.n	8007650 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68da      	ldr	r2, [r3, #12]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007630:	b292      	uxth	r2, r2
 8007632:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007638:	1c9a      	adds	r2, r3, #2
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007642:	b29b      	uxth	r3, r3
 8007644:	3b01      	subs	r3, #1
 8007646:	b29a      	uxth	r2, r3
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800764c:	2301      	movs	r3, #1
 800764e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007650:	f7fb fcc0 	bl	8002fd4 <HAL_GetTick>
 8007654:	4602      	mov	r2, r0
 8007656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800765c:	429a      	cmp	r2, r3
 800765e:	d80b      	bhi.n	8007678 <HAL_SPI_TransmitReceive+0x1e0>
 8007660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007662:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007666:	d007      	beq.n	8007678 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8007668:	2303      	movs	r3, #3
 800766a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2201      	movs	r2, #1
 8007672:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8007676:	e0b5      	b.n	80077e4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800767c:	b29b      	uxth	r3, r3
 800767e:	2b00      	cmp	r3, #0
 8007680:	d1a2      	bne.n	80075c8 <HAL_SPI_TransmitReceive+0x130>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007686:	b29b      	uxth	r3, r3
 8007688:	2b00      	cmp	r3, #0
 800768a:	d19d      	bne.n	80075c8 <HAL_SPI_TransmitReceive+0x130>
 800768c:	e080      	b.n	8007790 <HAL_SPI_TransmitReceive+0x2f8>
>>>>>>> flight_hardware
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
<<<<<<< HEAD
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d002      	beq.n	800771c <HAL_SPI_TransmitReceive+0x204>
 8007716:	8b7b      	ldrh	r3, [r7, #26]
 8007718:	2b01      	cmp	r3, #1
 800771a:	d16f      	bne.n	80077fc <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	330c      	adds	r3, #12
 8007726:	7812      	ldrb	r2, [r2, #0]
 8007728:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772e:	1c5a      	adds	r2, r3, #1
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007738:	b29b      	uxth	r3, r3
 800773a:	3b01      	subs	r3, #1
 800773c:	b29a      	uxth	r2, r3
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	86da      	strh	r2, [r3, #54]	; 0x36
=======
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d002      	beq.n	800769c <HAL_SPI_TransmitReceive+0x204>
 8007696:	8b7b      	ldrh	r3, [r7, #26]
 8007698:	2b01      	cmp	r3, #1
 800769a:	d16f      	bne.n	800777c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	330c      	adds	r3, #12
 80076a6:	7812      	ldrb	r2, [r2, #0]
 80076a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ae:	1c5a      	adds	r2, r3, #1
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	3b01      	subs	r3, #1
 80076bc:	b29a      	uxth	r2, r3
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	86da      	strh	r2, [r3, #54]	; 0x36
>>>>>>> flight_hardware
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
<<<<<<< HEAD
 8007742:	e05b      	b.n	80077fc <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	f003 0302 	and.w	r3, r3, #2
 800774e:	2b02      	cmp	r3, #2
 8007750:	d11c      	bne.n	800778c <HAL_SPI_TransmitReceive+0x274>
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007756:	b29b      	uxth	r3, r3
 8007758:	2b00      	cmp	r3, #0
 800775a:	d017      	beq.n	800778c <HAL_SPI_TransmitReceive+0x274>
 800775c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800775e:	2b01      	cmp	r3, #1
 8007760:	d114      	bne.n	800778c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	330c      	adds	r3, #12
 800776c:	7812      	ldrb	r2, [r2, #0]
 800776e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007774:	1c5a      	adds	r2, r3, #1
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800777e:	b29b      	uxth	r3, r3
 8007780:	3b01      	subs	r3, #1
 8007782:	b29a      	uxth	r2, r3
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007788:	2300      	movs	r3, #0
 800778a:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 80076c2:	e05b      	b.n	800777c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	f003 0302 	and.w	r3, r3, #2
 80076ce:	2b02      	cmp	r3, #2
 80076d0:	d11c      	bne.n	800770c <HAL_SPI_TransmitReceive+0x274>
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d017      	beq.n	800770c <HAL_SPI_TransmitReceive+0x274>
 80076dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d114      	bne.n	800770c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	330c      	adds	r3, #12
 80076ec:	7812      	ldrb	r2, [r2, #0]
 80076ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f4:	1c5a      	adds	r2, r3, #1
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076fe:	b29b      	uxth	r3, r3
 8007700:	3b01      	subs	r3, #1
 8007702:	b29a      	uxth	r2, r3
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007708:	2300      	movs	r3, #0
 800770a:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> flight_hardware
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
<<<<<<< HEAD
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	f003 0301 	and.w	r3, r3, #1
 8007796:	2b01      	cmp	r3, #1
 8007798:	d119      	bne.n	80077ce <HAL_SPI_TransmitReceive+0x2b6>
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800779e:	b29b      	uxth	r3, r3
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d014      	beq.n	80077ce <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68da      	ldr	r2, [r3, #12]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ae:	b2d2      	uxtb	r2, r2
 80077b0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b6:	1c5a      	adds	r2, r3, #1
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	3b01      	subs	r3, #1
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80077ca:	2301      	movs	r3, #1
 80077cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80077ce:	f7fb fc41 	bl	8003054 <HAL_GetTick>
 80077d2:	4602      	mov	r2, r0
 80077d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d6:	1ad3      	subs	r3, r2, r3
 80077d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077da:	429a      	cmp	r2, r3
 80077dc:	d803      	bhi.n	80077e6 <HAL_SPI_TransmitReceive+0x2ce>
 80077de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077e4:	d102      	bne.n	80077ec <HAL_SPI_TransmitReceive+0x2d4>
 80077e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d107      	bne.n	80077fc <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80077ec:	2303      	movs	r3, #3
 80077ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2201      	movs	r2, #1
 80077f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80077fa:	e033      	b.n	8007864 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007800:	b29b      	uxth	r3, r3
 8007802:	2b00      	cmp	r3, #0
 8007804:	d19e      	bne.n	8007744 <HAL_SPI_TransmitReceive+0x22c>
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800780a:	b29b      	uxth	r3, r3
 800780c:	2b00      	cmp	r3, #0
 800780e:	d199      	bne.n	8007744 <HAL_SPI_TransmitReceive+0x22c>
=======
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	f003 0301 	and.w	r3, r3, #1
 8007716:	2b01      	cmp	r3, #1
 8007718:	d119      	bne.n	800774e <HAL_SPI_TransmitReceive+0x2b6>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800771e:	b29b      	uxth	r3, r3
 8007720:	2b00      	cmp	r3, #0
 8007722:	d014      	beq.n	800774e <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	68da      	ldr	r2, [r3, #12]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800772e:	b2d2      	uxtb	r2, r2
 8007730:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007736:	1c5a      	adds	r2, r3, #1
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007740:	b29b      	uxth	r3, r3
 8007742:	3b01      	subs	r3, #1
 8007744:	b29a      	uxth	r2, r3
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800774a:	2301      	movs	r3, #1
 800774c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800774e:	f7fb fc41 	bl	8002fd4 <HAL_GetTick>
 8007752:	4602      	mov	r2, r0
 8007754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007756:	1ad3      	subs	r3, r2, r3
 8007758:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800775a:	429a      	cmp	r2, r3
 800775c:	d803      	bhi.n	8007766 <HAL_SPI_TransmitReceive+0x2ce>
 800775e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007760:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007764:	d102      	bne.n	800776c <HAL_SPI_TransmitReceive+0x2d4>
 8007766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007768:	2b00      	cmp	r3, #0
 800776a:	d107      	bne.n	800777c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800776c:	2303      	movs	r3, #3
 800776e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2201      	movs	r2, #1
 8007776:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800777a:	e033      	b.n	80077e4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007780:	b29b      	uxth	r3, r3
 8007782:	2b00      	cmp	r3, #0
 8007784:	d19e      	bne.n	80076c4 <HAL_SPI_TransmitReceive+0x22c>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800778a:	b29b      	uxth	r3, r3
 800778c:	2b00      	cmp	r3, #0
 800778e:	d199      	bne.n	80076c4 <HAL_SPI_TransmitReceive+0x22c>
>>>>>>> flight_hardware
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 8007810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007812:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007814:	68f8      	ldr	r0, [r7, #12]
 8007816:	f000 fa65 	bl	8007ce4 <SPI_EndRxTxTransaction>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d006      	beq.n	800782e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2220      	movs	r2, #32
 800782a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800782c:	e01a      	b.n	8007864 <HAL_SPI_TransmitReceive+0x34c>
=======
 8007790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007792:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007794:	68f8      	ldr	r0, [r7, #12]
 8007796:	f000 fa65 	bl	8007c64 <SPI_EndRxTxTransaction>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d006      	beq.n	80077ae <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2220      	movs	r2, #32
 80077aa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80077ac:	e01a      	b.n	80077e4 <HAL_SPI_TransmitReceive+0x34c>
>>>>>>> flight_hardware
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
<<<<<<< HEAD
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d10a      	bne.n	800784c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007836:	2300      	movs	r3, #0
 8007838:	617b      	str	r3, [r7, #20]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	617b      	str	r3, [r7, #20]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	617b      	str	r3, [r7, #20]
 800784a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007850:	2b00      	cmp	r3, #0
 8007852:	d003      	beq.n	800785c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800785a:	e003      	b.n	8007864 <HAL_SPI_TransmitReceive+0x34c>
=======
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d10a      	bne.n	80077cc <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80077b6:	2300      	movs	r3, #0
 80077b8:	617b      	str	r3, [r7, #20]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	617b      	str	r3, [r7, #20]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	617b      	str	r3, [r7, #20]
 80077ca:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d003      	beq.n	80077dc <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077da:	e003      	b.n	80077e4 <HAL_SPI_TransmitReceive+0x34c>
>>>>>>> flight_hardware
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
<<<<<<< HEAD
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2201      	movs	r2, #1
 8007860:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
=======
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
>>>>>>> flight_hardware
  }
  
error :
  __HAL_UNLOCK(hspi);
<<<<<<< HEAD
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800786c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007870:	4618      	mov	r0, r3
 8007872:	3730      	adds	r7, #48	; 0x30
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <HAL_SPI_Transmit_DMA>:
=======
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2200      	movs	r2, #0
 80077e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80077ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3730      	adds	r7, #48	; 0x30
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <HAL_SPI_Transmit_DMA>:
>>>>>>> flight_hardware
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 8007878:	b580      	push	{r7, lr}
 800787a:	b086      	sub	sp, #24
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	4613      	mov	r3, r2
 8007884:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007886:	2300      	movs	r3, #0
 8007888:	75fb      	strb	r3, [r7, #23]
=======
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b086      	sub	sp, #24
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	4613      	mov	r3, r2
 8007804:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007806:	2300      	movs	r3, #0
 8007808:	75fb      	strb	r3, [r7, #23]
>>>>>>> flight_hardware

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
<<<<<<< HEAD
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007890:	2b01      	cmp	r3, #1
 8007892:	d101      	bne.n	8007898 <HAL_SPI_Transmit_DMA+0x20>
 8007894:	2302      	movs	r3, #2
 8007896:	e097      	b.n	80079c8 <HAL_SPI_Transmit_DMA+0x150>
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d002      	beq.n	80078b2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80078ac:	2302      	movs	r3, #2
 80078ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 80078b0:	e085      	b.n	80079be <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d002      	beq.n	80078be <HAL_SPI_Transmit_DMA+0x46>
 80078b8:	88fb      	ldrh	r3, [r7, #6]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d102      	bne.n	80078c4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80078c2:	e07c      	b.n	80079be <HAL_SPI_Transmit_DMA+0x146>
=======
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007810:	2b01      	cmp	r3, #1
 8007812:	d101      	bne.n	8007818 <HAL_SPI_Transmit_DMA+0x20>
 8007814:	2302      	movs	r3, #2
 8007816:	e097      	b.n	8007948 <HAL_SPI_Transmit_DMA+0x150>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007826:	b2db      	uxtb	r3, r3
 8007828:	2b01      	cmp	r3, #1
 800782a:	d002      	beq.n	8007832 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800782c:	2302      	movs	r3, #2
 800782e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007830:	e085      	b.n	800793e <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d002      	beq.n	800783e <HAL_SPI_Transmit_DMA+0x46>
 8007838:	88fb      	ldrh	r3, [r7, #6]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d102      	bne.n	8007844 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007842:	e07c      	b.n	800793e <HAL_SPI_Transmit_DMA+0x146>
>>>>>>> flight_hardware
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
<<<<<<< HEAD
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2203      	movs	r2, #3
 80078c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2200      	movs	r2, #0
 80078d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	68ba      	ldr	r2, [r7, #8]
 80078d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	88fa      	ldrh	r2, [r7, #6]
 80078dc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	88fa      	ldrh	r2, [r7, #6]
 80078e2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2200      	movs	r2, #0
 80078e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2200      	movs	r2, #0
 80078ee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2200      	movs	r2, #0
 80078f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2200      	movs	r2, #0
 80078fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800790a:	d10f      	bne.n	800792c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800791a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800792a:	601a      	str	r2, [r3, #0]
=======
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2203      	movs	r2, #3
 8007848:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2200      	movs	r2, #0
 8007850:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	68ba      	ldr	r2, [r7, #8]
 8007856:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	88fa      	ldrh	r2, [r7, #6]
 800785c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	88fa      	ldrh	r2, [r7, #6]
 8007862:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2200      	movs	r2, #0
 8007868:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2200      	movs	r2, #0
 8007874:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2200      	movs	r2, #0
 8007880:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800788a:	d10f      	bne.n	80078ac <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800789a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80078aa:	601a      	str	r2, [r3, #0]
>>>>>>> flight_hardware
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
<<<<<<< HEAD
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007930:	4a27      	ldr	r2, [pc, #156]	; (80079d0 <HAL_SPI_Transmit_DMA+0x158>)
 8007932:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007938:	4a26      	ldr	r2, [pc, #152]	; (80079d4 <HAL_SPI_Transmit_DMA+0x15c>)
 800793a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007940:	4a25      	ldr	r2, [pc, #148]	; (80079d8 <HAL_SPI_Transmit_DMA+0x160>)
 8007942:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007948:	2200      	movs	r2, #0
 800794a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007954:	4619      	mov	r1, r3
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	330c      	adds	r3, #12
 800795c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007962:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007964:	f7fc fbce 	bl	8004104 <HAL_DMA_Start_IT>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d008      	beq.n	8007980 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007972:	f043 0210 	orr.w	r2, r3, #16
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	75fb      	strb	r3, [r7, #23]

    goto error;
 800797e:	e01e      	b.n	80079be <HAL_SPI_Transmit_DMA+0x146>
=======
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078b0:	4a27      	ldr	r2, [pc, #156]	; (8007950 <HAL_SPI_Transmit_DMA+0x158>)
 80078b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078b8:	4a26      	ldr	r2, [pc, #152]	; (8007954 <HAL_SPI_Transmit_DMA+0x15c>)
 80078ba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078c0:	4a25      	ldr	r2, [pc, #148]	; (8007958 <HAL_SPI_Transmit_DMA+0x160>)
 80078c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078c8:	2200      	movs	r2, #0
 80078ca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d4:	4619      	mov	r1, r3
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	330c      	adds	r3, #12
 80078dc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078e2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80078e4:	f7fc fbce 	bl	8004084 <HAL_DMA_Start_IT>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d008      	beq.n	8007900 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078f2:	f043 0210 	orr.w	r2, r3, #16
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	75fb      	strb	r3, [r7, #23]

    goto error;
 80078fe:	e01e      	b.n	800793e <HAL_SPI_Transmit_DMA+0x146>
>>>>>>> flight_hardware
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
<<<<<<< HEAD
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800798a:	2b40      	cmp	r3, #64	; 0x40
 800798c:	d007      	beq.n	800799e <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800799c:	601a      	str	r2, [r3, #0]
=======
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800790a:	2b40      	cmp	r3, #64	; 0x40
 800790c:	d007      	beq.n	800791e <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800791c:	601a      	str	r2, [r3, #0]
>>>>>>> flight_hardware
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
<<<<<<< HEAD
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	685a      	ldr	r2, [r3, #4]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f042 0220 	orr.w	r2, r2, #32
 80079ac:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	685a      	ldr	r2, [r3, #4]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f042 0202 	orr.w	r2, r2, #2
 80079bc:	605a      	str	r2, [r3, #4]
=======
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	685a      	ldr	r2, [r3, #4]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f042 0220 	orr.w	r2, r2, #32
 800792c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	685a      	ldr	r2, [r3, #4]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f042 0202 	orr.w	r2, r2, #2
 800793c:	605a      	str	r2, [r3, #4]
>>>>>>> flight_hardware

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
<<<<<<< HEAD
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80079c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3718      	adds	r7, #24
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	08007aad 	.word	0x08007aad
 80079d4:	08007a05 	.word	0x08007a05
 80079d8:	08007ac9 	.word	0x08007ac9

080079dc <HAL_SPI_TxHalfCpltCallback>:
=======
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2200      	movs	r2, #0
 8007942:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007946:	7dfb      	ldrb	r3, [r7, #23]
}
 8007948:	4618      	mov	r0, r3
 800794a:	3718      	adds	r7, #24
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	08007a2d 	.word	0x08007a2d
 8007954:	08007985 	.word	0x08007985
 8007958:	08007a49 	.word	0x08007a49

0800795c <HAL_SPI_TxHalfCpltCallback>:
>>>>>>> flight_hardware
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
=======
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
>>>>>>> flight_hardware
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
<<<<<<< HEAD
 80079e4:	bf00      	nop
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <HAL_SPI_ErrorCallback>:
=======
 8007964:	bf00      	nop
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <HAL_SPI_ErrorCallback>:
>>>>>>> flight_hardware
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
=======
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
>>>>>>> flight_hardware
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
<<<<<<< HEAD
 80079f8:	bf00      	nop
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <SPI_DMATransmitCplt>:
=======
 8007978:	bf00      	nop
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <SPI_DMATransmitCplt>:
>>>>>>> flight_hardware
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b086      	sub	sp, #24
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a10:	617b      	str	r3, [r7, #20]
=======
 8007984:	b580      	push	{r7, lr}
 8007986:	b086      	sub	sp, #24
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007990:	617b      	str	r3, [r7, #20]
>>>>>>> flight_hardware
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
<<<<<<< HEAD
 8007a12:	f7fb fb1f 	bl	8003054 <HAL_GetTick>
 8007a16:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a26:	d03b      	beq.n	8007aa0 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	685a      	ldr	r2, [r3, #4]
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f022 0220 	bic.w	r2, r2, #32
 8007a36:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	685a      	ldr	r2, [r3, #4]
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f022 0202 	bic.w	r2, r2, #2
 8007a46:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007a48:	693a      	ldr	r2, [r7, #16]
 8007a4a:	2164      	movs	r1, #100	; 0x64
 8007a4c:	6978      	ldr	r0, [r7, #20]
 8007a4e:	f000 f949 	bl	8007ce4 <SPI_EndRxTxTransaction>
 8007a52:	4603      	mov	r3, r0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d005      	beq.n	8007a64 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a5c:	f043 0220 	orr.w	r2, r3, #32
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8007992:	f7fb fb1f 	bl	8002fd4 <HAL_GetTick>
 8007996:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079a6:	d03b      	beq.n	8007a20 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	685a      	ldr	r2, [r3, #4]
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f022 0220 	bic.w	r2, r2, #32
 80079b6:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	685a      	ldr	r2, [r3, #4]
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f022 0202 	bic.w	r2, r2, #2
 80079c6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80079c8:	693a      	ldr	r2, [r7, #16]
 80079ca:	2164      	movs	r1, #100	; 0x64
 80079cc:	6978      	ldr	r0, [r7, #20]
 80079ce:	f000 f949 	bl	8007c64 <SPI_EndRxTxTransaction>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d005      	beq.n	80079e4 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079dc:	f043 0220 	orr.w	r2, r3, #32
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> flight_hardware
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
<<<<<<< HEAD
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d10a      	bne.n	8007a82 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	60fb      	str	r3, [r7, #12]
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	60fb      	str	r3, [r7, #12]
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	60fb      	str	r3, [r7, #12]
 8007a80:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	2200      	movs	r2, #0
 8007a86:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d003      	beq.n	8007aa0 <SPI_DMATransmitCplt+0x9c>
=======
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d10a      	bne.n	8007a02 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079ec:	2300      	movs	r3, #0
 80079ee:	60fb      	str	r3, [r7, #12]
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	60fb      	str	r3, [r7, #12]
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	60fb      	str	r3, [r7, #12]
 8007a00:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	2200      	movs	r2, #0
 8007a06:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d003      	beq.n	8007a20 <SPI_DMATransmitCplt+0x9c>
>>>>>>> flight_hardware
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
<<<<<<< HEAD
 8007a98:	6978      	ldr	r0, [r7, #20]
 8007a9a:	f7ff ffa9 	bl	80079f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007a9e:	e002      	b.n	8007aa6 <SPI_DMATransmitCplt+0xa2>
=======
 8007a18:	6978      	ldr	r0, [r7, #20]
 8007a1a:	f7ff ffa9 	bl	8007970 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007a1e:	e002      	b.n	8007a26 <SPI_DMATransmitCplt+0xa2>
>>>>>>> flight_hardware
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
<<<<<<< HEAD
 8007aa0:	6978      	ldr	r0, [r7, #20]
 8007aa2:	f7fb f9a1 	bl	8002de8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007aa6:	3718      	adds	r7, #24
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <SPI_DMAHalfTransmitCplt>:
=======
 8007a20:	6978      	ldr	r0, [r7, #20]
 8007a22:	f7fb f9a1 	bl	8002d68 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007a26:	3718      	adds	r7, #24
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <SPI_DMAHalfTransmitCplt>:
>>>>>>> flight_hardware
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab8:	60fb      	str	r3, [r7, #12]
=======
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a38:	60fb      	str	r3, [r7, #12]
>>>>>>> flight_hardware

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
<<<<<<< HEAD
 8007aba:	68f8      	ldr	r0, [r7, #12]
 8007abc:	f7ff ff8e 	bl	80079dc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007ac0:	bf00      	nop
 8007ac2:	3710      	adds	r7, #16
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <SPI_DMAError>:
=======
 8007a3a:	68f8      	ldr	r0, [r7, #12]
 8007a3c:	f7ff ff8e 	bl	800795c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007a40:	bf00      	nop
 8007a42:	3710      	adds	r7, #16
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <SPI_DMAError>:
>>>>>>> flight_hardware
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	685a      	ldr	r2, [r3, #4]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f022 0203 	bic.w	r2, r2, #3
 8007ae4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aea:	f043 0210 	orr.w	r2, r3, #16
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2201      	movs	r2, #1
 8007af6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
=======
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a54:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	685a      	ldr	r2, [r3, #4]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f022 0203 	bic.w	r2, r2, #3
 8007a64:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a6a:	f043 0210 	orr.w	r2, r3, #16
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2201      	movs	r2, #1
 8007a76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
>>>>>>> flight_hardware
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
<<<<<<< HEAD
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	f7ff ff78 	bl	80079f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007b00:	bf00      	nop
 8007b02:	3710      	adds	r7, #16
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <SPI_WaitFlagStateUntilTimeout>:
=======
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f7ff ff78 	bl	8007970 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007a80:	bf00      	nop
 8007a82:	3710      	adds	r7, #16
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <SPI_WaitFlagStateUntilTimeout>:
>>>>>>> flight_hardware
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b088      	sub	sp, #32
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	603b      	str	r3, [r7, #0]
 8007b14:	4613      	mov	r3, r2
 8007b16:	71fb      	strb	r3, [r7, #7]
=======
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b088      	sub	sp, #32
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	603b      	str	r3, [r7, #0]
 8007a94:	4613      	mov	r3, r2
 8007a96:	71fb      	strb	r3, [r7, #7]
>>>>>>> flight_hardware
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
<<<<<<< HEAD
 8007b18:	f7fb fa9c 	bl	8003054 <HAL_GetTick>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b20:	1a9b      	subs	r3, r3, r2
 8007b22:	683a      	ldr	r2, [r7, #0]
 8007b24:	4413      	add	r3, r2
 8007b26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007b28:	f7fb fa94 	bl	8003054 <HAL_GetTick>
 8007b2c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007b2e:	4b39      	ldr	r3, [pc, #228]	; (8007c14 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	015b      	lsls	r3, r3, #5
 8007b34:	0d1b      	lsrs	r3, r3, #20
 8007b36:	69fa      	ldr	r2, [r7, #28]
 8007b38:	fb02 f303 	mul.w	r3, r2, r3
 8007b3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b3e:	e054      	b.n	8007bea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b46:	d050      	beq.n	8007bea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b48:	f7fb fa84 	bl	8003054 <HAL_GetTick>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	1ad3      	subs	r3, r2, r3
 8007b52:	69fa      	ldr	r2, [r7, #28]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d902      	bls.n	8007b5e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d13d      	bne.n	8007bda <SPI_WaitFlagStateUntilTimeout+0xd2>
=======
 8007a98:	f7fb fa9c 	bl	8002fd4 <HAL_GetTick>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa0:	1a9b      	subs	r3, r3, r2
 8007aa2:	683a      	ldr	r2, [r7, #0]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007aa8:	f7fb fa94 	bl	8002fd4 <HAL_GetTick>
 8007aac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007aae:	4b39      	ldr	r3, [pc, #228]	; (8007b94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	015b      	lsls	r3, r3, #5
 8007ab4:	0d1b      	lsrs	r3, r3, #20
 8007ab6:	69fa      	ldr	r2, [r7, #28]
 8007ab8:	fb02 f303 	mul.w	r3, r2, r3
 8007abc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007abe:	e054      	b.n	8007b6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ac6:	d050      	beq.n	8007b6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007ac8:	f7fb fa84 	bl	8002fd4 <HAL_GetTick>
 8007acc:	4602      	mov	r2, r0
 8007ace:	69bb      	ldr	r3, [r7, #24]
 8007ad0:	1ad3      	subs	r3, r2, r3
 8007ad2:	69fa      	ldr	r2, [r7, #28]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d902      	bls.n	8007ade <SPI_WaitFlagStateUntilTimeout+0x56>
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d13d      	bne.n	8007b5a <SPI_WaitFlagStateUntilTimeout+0xd2>
>>>>>>> flight_hardware
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
<<<<<<< HEAD
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	685a      	ldr	r2, [r3, #4]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007b6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b76:	d111      	bne.n	8007b9c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b80:	d004      	beq.n	8007b8c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b8a:	d107      	bne.n	8007b9c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b9a:	601a      	str	r2, [r3, #0]
=======
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	685a      	ldr	r2, [r3, #4]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007aec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007af6:	d111      	bne.n	8007b1c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b00:	d004      	beq.n	8007b0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b0a:	d107      	bne.n	8007b1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b1a:	601a      	str	r2, [r3, #0]
>>>>>>> flight_hardware
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
<<<<<<< HEAD
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ba4:	d10f      	bne.n	8007bc6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007bb4:	601a      	str	r2, [r3, #0]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007bc4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007bd6:	2303      	movs	r3, #3
 8007bd8:	e017      	b.n	8007c0a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d101      	bne.n	8007be4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007be0:	2300      	movs	r3, #0
 8007be2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	3b01      	subs	r3, #1
 8007be8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	689a      	ldr	r2, [r3, #8]
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	4013      	ands	r3, r2
 8007bf4:	68ba      	ldr	r2, [r7, #8]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	bf0c      	ite	eq
 8007bfa:	2301      	moveq	r3, #1
 8007bfc:	2300      	movne	r3, #0
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	461a      	mov	r2, r3
 8007c02:	79fb      	ldrb	r3, [r7, #7]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d19b      	bne.n	8007b40 <SPI_WaitFlagStateUntilTimeout+0x38>
=======
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b24:	d10f      	bne.n	8007b46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b34:	601a      	str	r2, [r3, #0]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007b56:	2303      	movs	r3, #3
 8007b58:	e017      	b.n	8007b8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d101      	bne.n	8007b64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007b60:	2300      	movs	r3, #0
 8007b62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	3b01      	subs	r3, #1
 8007b68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	689a      	ldr	r2, [r3, #8]
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	4013      	ands	r3, r2
 8007b74:	68ba      	ldr	r2, [r7, #8]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	bf0c      	ite	eq
 8007b7a:	2301      	moveq	r3, #1
 8007b7c:	2300      	movne	r3, #0
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	461a      	mov	r2, r3
 8007b82:	79fb      	ldrb	r3, [r7, #7]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d19b      	bne.n	8007ac0 <SPI_WaitFlagStateUntilTimeout+0x38>
>>>>>>> flight_hardware
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 8007c08:	2300      	movs	r3, #0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3720      	adds	r7, #32
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	2000001c 	.word	0x2000001c

08007c18 <SPI_EndRxTransaction>:
=======
 8007b88:	2300      	movs	r3, #0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3720      	adds	r7, #32
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	2000001c 	.word	0x2000001c

08007b98 <SPI_EndRxTransaction>:
>>>>>>> flight_hardware
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b086      	sub	sp, #24
 8007c1c:	af02      	add	r7, sp, #8
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c2c:	d111      	bne.n	8007c52 <SPI_EndRxTransaction+0x3a>
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c36:	d004      	beq.n	8007c42 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c40:	d107      	bne.n	8007c52 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c50:	601a      	str	r2, [r3, #0]
=======
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b086      	sub	sp, #24
 8007b9c:	af02      	add	r7, sp, #8
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bac:	d111      	bne.n	8007bd2 <SPI_EndRxTransaction+0x3a>
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bb6:	d004      	beq.n	8007bc2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bc0:	d107      	bne.n	8007bd2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bd0:	601a      	str	r2, [r3, #0]
>>>>>>> flight_hardware
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
<<<<<<< HEAD
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c5a:	d12a      	bne.n	8007cb2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c64:	d012      	beq.n	8007c8c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	9300      	str	r3, [sp, #0]
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	2180      	movs	r1, #128	; 0x80
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	f7ff ff49 	bl	8007b08 <SPI_WaitFlagStateUntilTimeout>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d02d      	beq.n	8007cd8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c80:	f043 0220 	orr.w	r2, r3, #32
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007c88:	2303      	movs	r3, #3
 8007c8a:	e026      	b.n	8007cda <SPI_EndRxTransaction+0xc2>
=======
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bda:	d12a      	bne.n	8007c32 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007be4:	d012      	beq.n	8007c0c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	9300      	str	r3, [sp, #0]
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	2200      	movs	r2, #0
 8007bee:	2180      	movs	r1, #128	; 0x80
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	f7ff ff49 	bl	8007a88 <SPI_WaitFlagStateUntilTimeout>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d02d      	beq.n	8007c58 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c00:	f043 0220 	orr.w	r2, r3, #32
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007c08:	2303      	movs	r3, #3
 8007c0a:	e026      	b.n	8007c5a <SPI_EndRxTransaction+0xc2>
>>>>>>> flight_hardware
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	9300      	str	r3, [sp, #0]
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	2200      	movs	r2, #0
 8007c94:	2101      	movs	r1, #1
 8007c96:	68f8      	ldr	r0, [r7, #12]
 8007c98:	f7ff ff36 	bl	8007b08 <SPI_WaitFlagStateUntilTimeout>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d01a      	beq.n	8007cd8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ca6:	f043 0220 	orr.w	r2, r3, #32
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007cae:	2303      	movs	r3, #3
 8007cb0:	e013      	b.n	8007cda <SPI_EndRxTransaction+0xc2>
=======
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	9300      	str	r3, [sp, #0]
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	2200      	movs	r2, #0
 8007c14:	2101      	movs	r1, #1
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f7ff ff36 	bl	8007a88 <SPI_WaitFlagStateUntilTimeout>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d01a      	beq.n	8007c58 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c26:	f043 0220 	orr.w	r2, r3, #32
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007c2e:	2303      	movs	r3, #3
 8007c30:	e013      	b.n	8007c5a <SPI_EndRxTransaction+0xc2>
>>>>>>> flight_hardware
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	9300      	str	r3, [sp, #0]
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	2101      	movs	r1, #1
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f7ff ff23 	bl	8007b08 <SPI_WaitFlagStateUntilTimeout>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d007      	beq.n	8007cd8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ccc:	f043 0220 	orr.w	r2, r3, #32
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007cd4:	2303      	movs	r3, #3
 8007cd6:	e000      	b.n	8007cda <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
	...

08007ce4 <SPI_EndRxTxTransaction>:
=======
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	9300      	str	r3, [sp, #0]
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	2101      	movs	r1, #1
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f7ff ff23 	bl	8007a88 <SPI_WaitFlagStateUntilTimeout>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d007      	beq.n	8007c58 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c4c:	f043 0220 	orr.w	r2, r3, #32
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007c54:	2303      	movs	r3, #3
 8007c56:	e000      	b.n	8007c5a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
	...

08007c64 <SPI_EndRxTxTransaction>:
>>>>>>> flight_hardware
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b088      	sub	sp, #32
 8007ce8:	af02      	add	r7, sp, #8
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	9300      	str	r3, [sp, #0]
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	2102      	movs	r1, #2
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	f7ff ff04 	bl	8007b08 <SPI_WaitFlagStateUntilTimeout>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d007      	beq.n	8007d16 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d0a:	f043 0220 	orr.w	r2, r3, #32
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007d12:	2303      	movs	r3, #3
 8007d14:	e032      	b.n	8007d7c <SPI_EndRxTxTransaction+0x98>
=======
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b088      	sub	sp, #32
 8007c68:	af02      	add	r7, sp, #8
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	9300      	str	r3, [sp, #0]
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	2201      	movs	r2, #1
 8007c78:	2102      	movs	r1, #2
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f7ff ff04 	bl	8007a88 <SPI_WaitFlagStateUntilTimeout>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d007      	beq.n	8007c96 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c8a:	f043 0220 	orr.w	r2, r3, #32
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007c92:	2303      	movs	r3, #3
 8007c94:	e032      	b.n	8007cfc <SPI_EndRxTxTransaction+0x98>
>>>>>>> flight_hardware
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
<<<<<<< HEAD
 8007d16:	4b1b      	ldr	r3, [pc, #108]	; (8007d84 <SPI_EndRxTxTransaction+0xa0>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a1b      	ldr	r2, [pc, #108]	; (8007d88 <SPI_EndRxTxTransaction+0xa4>)
 8007d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8007d20:	0d5b      	lsrs	r3, r3, #21
 8007d22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007d26:	fb02 f303 	mul.w	r3, r2, r3
 8007d2a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d34:	d112      	bne.n	8007d5c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	9300      	str	r3, [sp, #0]
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	2180      	movs	r1, #128	; 0x80
 8007d40:	68f8      	ldr	r0, [r7, #12]
 8007d42:	f7ff fee1 	bl	8007b08 <SPI_WaitFlagStateUntilTimeout>
 8007d46:	4603      	mov	r3, r0
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d016      	beq.n	8007d7a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d50:	f043 0220 	orr.w	r2, r3, #32
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007d58:	2303      	movs	r3, #3
 8007d5a:	e00f      	b.n	8007d7c <SPI_EndRxTxTransaction+0x98>
=======
 8007c96:	4b1b      	ldr	r3, [pc, #108]	; (8007d04 <SPI_EndRxTxTransaction+0xa0>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a1b      	ldr	r2, [pc, #108]	; (8007d08 <SPI_EndRxTxTransaction+0xa4>)
 8007c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8007ca0:	0d5b      	lsrs	r3, r3, #21
 8007ca2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007ca6:	fb02 f303 	mul.w	r3, r2, r3
 8007caa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007cb4:	d112      	bne.n	8007cdc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	9300      	str	r3, [sp, #0]
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	2180      	movs	r1, #128	; 0x80
 8007cc0:	68f8      	ldr	r0, [r7, #12]
 8007cc2:	f7ff fee1 	bl	8007a88 <SPI_WaitFlagStateUntilTimeout>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d016      	beq.n	8007cfa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cd0:	f043 0220 	orr.w	r2, r3, #32
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007cd8:	2303      	movs	r3, #3
 8007cda:	e00f      	b.n	8007cfc <SPI_EndRxTxTransaction+0x98>
>>>>>>> flight_hardware
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
<<<<<<< HEAD
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00a      	beq.n	8007d78 <SPI_EndRxTxTransaction+0x94>
=======
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00a      	beq.n	8007cf8 <SPI_EndRxTxTransaction+0x94>
>>>>>>> flight_hardware
      {
        break;
      }
      count--;
<<<<<<< HEAD
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	3b01      	subs	r3, #1
 8007d66:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d72:	2b80      	cmp	r3, #128	; 0x80
 8007d74:	d0f2      	beq.n	8007d5c <SPI_EndRxTxTransaction+0x78>
 8007d76:	e000      	b.n	8007d7a <SPI_EndRxTxTransaction+0x96>
        break;
 8007d78:	bf00      	nop
  }

  return HAL_OK;
 8007d7a:	2300      	movs	r3, #0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3718      	adds	r7, #24
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	2000001c 	.word	0x2000001c
 8007d88:	165e9f81 	.word	0x165e9f81

08007d8c <HAL_TIM_Base_Init>:
=======
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	3b01      	subs	r3, #1
 8007ce6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cf2:	2b80      	cmp	r3, #128	; 0x80
 8007cf4:	d0f2      	beq.n	8007cdc <SPI_EndRxTxTransaction+0x78>
 8007cf6:	e000      	b.n	8007cfa <SPI_EndRxTxTransaction+0x96>
        break;
 8007cf8:	bf00      	nop
  }

  return HAL_OK;
 8007cfa:	2300      	movs	r3, #0
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3718      	adds	r7, #24
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}
 8007d04:	2000001c 	.word	0x2000001c
 8007d08:	165e9f81 	.word	0x165e9f81

08007d0c <HAL_TIM_Base_Init>:
>>>>>>> flight_hardware
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d101      	bne.n	8007d9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e041      	b.n	8007e22 <HAL_TIM_Base_Init+0x96>
=======
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d101      	bne.n	8007d1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e041      	b.n	8007da2 <HAL_TIM_Base_Init+0x96>
>>>>>>> flight_hardware
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d106      	bne.n	8007db8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d106      	bne.n	8007d38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> flight_hardware
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f7fa fed4 	bl	8002b60 <HAL_TIM_Base_MspInit>
=======
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f7fa fed4 	bl	8002ae0 <HAL_TIM_Base_MspInit>
>>>>>>> flight_hardware
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2202      	movs	r2, #2
 8007dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	3304      	adds	r3, #4
 8007dc8:	4619      	mov	r1, r3
 8007dca:	4610      	mov	r0, r2
 8007dcc:	f000 f9c0 	bl	8008150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3708      	adds	r7, #8
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
	...

08007e2c <HAL_TIM_Base_Start_IT>:
=======
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2202      	movs	r2, #2
 8007d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	3304      	adds	r3, #4
 8007d48:	4619      	mov	r1, r3
 8007d4a:	4610      	mov	r0, r2
 8007d4c:	f000 f9c0 	bl	80080d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2201      	movs	r2, #1
 8007d64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3708      	adds	r7, #8
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
	...

08007dac <HAL_TIM_Base_Start_IT>:
>>>>>>> flight_hardware
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8007e2c:	b480      	push	{r7}
 8007e2e:	b085      	sub	sp, #20
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
=======
 8007dac:	b480      	push	{r7}
 8007dae:	b085      	sub	sp, #20
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
>>>>>>> flight_hardware

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< HEAD
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d001      	beq.n	8007e44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	e04e      	b.n	8007ee2 <HAL_TIM_Base_Start_IT+0xb6>
=======
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d001      	beq.n	8007dc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e04e      	b.n	8007e62 <HAL_TIM_Base_Start_IT+0xb6>
>>>>>>> flight_hardware
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2202      	movs	r2, #2
 8007e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	68da      	ldr	r2, [r3, #12]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f042 0201 	orr.w	r2, r2, #1
 8007e5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a23      	ldr	r2, [pc, #140]	; (8007ef0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d022      	beq.n	8007eac <HAL_TIM_Base_Start_IT+0x80>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e6e:	d01d      	beq.n	8007eac <HAL_TIM_Base_Start_IT+0x80>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a1f      	ldr	r2, [pc, #124]	; (8007ef4 <HAL_TIM_Base_Start_IT+0xc8>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d018      	beq.n	8007eac <HAL_TIM_Base_Start_IT+0x80>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a1e      	ldr	r2, [pc, #120]	; (8007ef8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d013      	beq.n	8007eac <HAL_TIM_Base_Start_IT+0x80>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a1c      	ldr	r2, [pc, #112]	; (8007efc <HAL_TIM_Base_Start_IT+0xd0>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d00e      	beq.n	8007eac <HAL_TIM_Base_Start_IT+0x80>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a1b      	ldr	r2, [pc, #108]	; (8007f00 <HAL_TIM_Base_Start_IT+0xd4>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d009      	beq.n	8007eac <HAL_TIM_Base_Start_IT+0x80>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a19      	ldr	r2, [pc, #100]	; (8007f04 <HAL_TIM_Base_Start_IT+0xd8>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d004      	beq.n	8007eac <HAL_TIM_Base_Start_IT+0x80>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a18      	ldr	r2, [pc, #96]	; (8007f08 <HAL_TIM_Base_Start_IT+0xdc>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d111      	bne.n	8007ed0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	f003 0307 	and.w	r3, r3, #7
 8007eb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2b06      	cmp	r3, #6
 8007ebc:	d010      	beq.n	8007ee0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f042 0201 	orr.w	r2, r2, #1
 8007ecc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ece:	e007      	b.n	8007ee0 <HAL_TIM_Base_Start_IT+0xb4>
=======
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2202      	movs	r2, #2
 8007dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	68da      	ldr	r2, [r3, #12]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f042 0201 	orr.w	r2, r2, #1
 8007dda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a23      	ldr	r2, [pc, #140]	; (8007e70 <HAL_TIM_Base_Start_IT+0xc4>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d022      	beq.n	8007e2c <HAL_TIM_Base_Start_IT+0x80>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dee:	d01d      	beq.n	8007e2c <HAL_TIM_Base_Start_IT+0x80>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a1f      	ldr	r2, [pc, #124]	; (8007e74 <HAL_TIM_Base_Start_IT+0xc8>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d018      	beq.n	8007e2c <HAL_TIM_Base_Start_IT+0x80>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a1e      	ldr	r2, [pc, #120]	; (8007e78 <HAL_TIM_Base_Start_IT+0xcc>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d013      	beq.n	8007e2c <HAL_TIM_Base_Start_IT+0x80>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a1c      	ldr	r2, [pc, #112]	; (8007e7c <HAL_TIM_Base_Start_IT+0xd0>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d00e      	beq.n	8007e2c <HAL_TIM_Base_Start_IT+0x80>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a1b      	ldr	r2, [pc, #108]	; (8007e80 <HAL_TIM_Base_Start_IT+0xd4>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d009      	beq.n	8007e2c <HAL_TIM_Base_Start_IT+0x80>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a19      	ldr	r2, [pc, #100]	; (8007e84 <HAL_TIM_Base_Start_IT+0xd8>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d004      	beq.n	8007e2c <HAL_TIM_Base_Start_IT+0x80>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a18      	ldr	r2, [pc, #96]	; (8007e88 <HAL_TIM_Base_Start_IT+0xdc>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d111      	bne.n	8007e50 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	f003 0307 	and.w	r3, r3, #7
 8007e36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2b06      	cmp	r3, #6
 8007e3c:	d010      	beq.n	8007e60 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f042 0201 	orr.w	r2, r2, #1
 8007e4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e4e:	e007      	b.n	8007e60 <HAL_TIM_Base_Start_IT+0xb4>
>>>>>>> flight_hardware
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f042 0201 	orr.w	r2, r2, #1
 8007ede:	601a      	str	r2, [r3, #0]
=======
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f042 0201 	orr.w	r2, r2, #1
 8007e5e:	601a      	str	r2, [r3, #0]
>>>>>>> flight_hardware
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8007ee0:	2300      	movs	r3, #0
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3714      	adds	r7, #20
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr
 8007eee:	bf00      	nop
 8007ef0:	40010000 	.word	0x40010000
 8007ef4:	40000400 	.word	0x40000400
 8007ef8:	40000800 	.word	0x40000800
 8007efc:	40000c00 	.word	0x40000c00
 8007f00:	40010400 	.word	0x40010400
 8007f04:	40014000 	.word	0x40014000
 8007f08:	40001800 	.word	0x40001800

08007f0c <HAL_TIM_IRQHandler>:
=======
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3714      	adds	r7, #20
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr
 8007e6e:	bf00      	nop
 8007e70:	40010000 	.word	0x40010000
 8007e74:	40000400 	.word	0x40000400
 8007e78:	40000800 	.word	0x40000800
 8007e7c:	40000c00 	.word	0x40000c00
 8007e80:	40010400 	.word	0x40010400
 8007e84:	40014000 	.word	0x40014000
 8007e88:	40001800 	.word	0x40001800

08007e8c <HAL_TIM_IRQHandler>:
>>>>>>> flight_hardware
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	f003 0302 	and.w	r3, r3, #2
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d020      	beq.n	8007f70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f003 0302 	and.w	r3, r3, #2
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d01b      	beq.n	8007f70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f06f 0202 	mvn.w	r2, #2
 8007f40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2201      	movs	r2, #1
 8007f46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	699b      	ldr	r3, [r3, #24]
 8007f4e:	f003 0303 	and.w	r3, r3, #3
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d003      	beq.n	8007f5e <HAL_TIM_IRQHandler+0x52>
=======
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	f003 0302 	and.w	r3, r3, #2
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d020      	beq.n	8007ef0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f003 0302 	and.w	r3, r3, #2
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d01b      	beq.n	8007ef0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f06f 0202 	mvn.w	r2, #2
 8007ec0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	699b      	ldr	r3, [r3, #24]
 8007ece:	f003 0303 	and.w	r3, r3, #3
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d003      	beq.n	8007ede <HAL_TIM_IRQHandler+0x52>
>>>>>>> flight_hardware
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 f8dc 	bl	8008114 <HAL_TIM_IC_CaptureCallback>
 8007f5c:	e005      	b.n	8007f6a <HAL_TIM_IRQHandler+0x5e>
=======
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 f8dc 	bl	8008094 <HAL_TIM_IC_CaptureCallback>
 8007edc:	e005      	b.n	8007eea <HAL_TIM_IRQHandler+0x5e>
>>>>>>> flight_hardware
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f8ce 	bl	8008100 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 f8df 	bl	8008128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	771a      	strb	r2, [r3, #28]
=======
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 f8ce 	bl	8008080 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 f8df 	bl	80080a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	771a      	strb	r2, [r3, #28]
>>>>>>> flight_hardware
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
<<<<<<< HEAD
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	f003 0304 	and.w	r3, r3, #4
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d020      	beq.n	8007fbc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f003 0304 	and.w	r3, r3, #4
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d01b      	beq.n	8007fbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f06f 0204 	mvn.w	r2, #4
 8007f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2202      	movs	r2, #2
 8007f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	699b      	ldr	r3, [r3, #24]
 8007f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d003      	beq.n	8007faa <HAL_TIM_IRQHandler+0x9e>
=======
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	f003 0304 	and.w	r3, r3, #4
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d020      	beq.n	8007f3c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f003 0304 	and.w	r3, r3, #4
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d01b      	beq.n	8007f3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f06f 0204 	mvn.w	r2, #4
 8007f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2202      	movs	r2, #2
 8007f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	699b      	ldr	r3, [r3, #24]
 8007f1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d003      	beq.n	8007f2a <HAL_TIM_IRQHandler+0x9e>
>>>>>>> flight_hardware
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 f8b6 	bl	8008114 <HAL_TIM_IC_CaptureCallback>
 8007fa8:	e005      	b.n	8007fb6 <HAL_TIM_IRQHandler+0xaa>
=======
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 f8b6 	bl	8008094 <HAL_TIM_IC_CaptureCallback>
 8007f28:	e005      	b.n	8007f36 <HAL_TIM_IRQHandler+0xaa>
>>>>>>> flight_hardware
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 f8a8 	bl	8008100 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 f8b9 	bl	8008128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	771a      	strb	r2, [r3, #28]
=======
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 f8a8 	bl	8008080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 f8b9 	bl	80080a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	771a      	strb	r2, [r3, #28]
>>>>>>> flight_hardware
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
<<<<<<< HEAD
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	f003 0308 	and.w	r3, r3, #8
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d020      	beq.n	8008008 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f003 0308 	and.w	r3, r3, #8
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d01b      	beq.n	8008008 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f06f 0208 	mvn.w	r2, #8
 8007fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2204      	movs	r2, #4
 8007fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	69db      	ldr	r3, [r3, #28]
 8007fe6:	f003 0303 	and.w	r3, r3, #3
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d003      	beq.n	8007ff6 <HAL_TIM_IRQHandler+0xea>
=======
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	f003 0308 	and.w	r3, r3, #8
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d020      	beq.n	8007f88 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f003 0308 	and.w	r3, r3, #8
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d01b      	beq.n	8007f88 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f06f 0208 	mvn.w	r2, #8
 8007f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2204      	movs	r2, #4
 8007f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	69db      	ldr	r3, [r3, #28]
 8007f66:	f003 0303 	and.w	r3, r3, #3
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d003      	beq.n	8007f76 <HAL_TIM_IRQHandler+0xea>
>>>>>>> flight_hardware
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 f890 	bl	8008114 <HAL_TIM_IC_CaptureCallback>
 8007ff4:	e005      	b.n	8008002 <HAL_TIM_IRQHandler+0xf6>
=======
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 f890 	bl	8008094 <HAL_TIM_IC_CaptureCallback>
 8007f74:	e005      	b.n	8007f82 <HAL_TIM_IRQHandler+0xf6>
>>>>>>> flight_hardware
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f882 	bl	8008100 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 f893 	bl	8008128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	771a      	strb	r2, [r3, #28]
=======
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 f882 	bl	8008080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 f893 	bl	80080a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	771a      	strb	r2, [r3, #28]
>>>>>>> flight_hardware
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
<<<<<<< HEAD
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	f003 0310 	and.w	r3, r3, #16
 800800e:	2b00      	cmp	r3, #0
 8008010:	d020      	beq.n	8008054 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f003 0310 	and.w	r3, r3, #16
 8008018:	2b00      	cmp	r3, #0
 800801a:	d01b      	beq.n	8008054 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f06f 0210 	mvn.w	r2, #16
 8008024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2208      	movs	r2, #8
 800802a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	69db      	ldr	r3, [r3, #28]
 8008032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008036:	2b00      	cmp	r3, #0
 8008038:	d003      	beq.n	8008042 <HAL_TIM_IRQHandler+0x136>
=======
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	f003 0310 	and.w	r3, r3, #16
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d020      	beq.n	8007fd4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f003 0310 	and.w	r3, r3, #16
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d01b      	beq.n	8007fd4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f06f 0210 	mvn.w	r2, #16
 8007fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2208      	movs	r2, #8
 8007faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	69db      	ldr	r3, [r3, #28]
 8007fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d003      	beq.n	8007fc2 <HAL_TIM_IRQHandler+0x136>
>>>>>>> flight_hardware
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 f86a 	bl	8008114 <HAL_TIM_IC_CaptureCallback>
 8008040:	e005      	b.n	800804e <HAL_TIM_IRQHandler+0x142>
=======
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 f86a 	bl	8008094 <HAL_TIM_IC_CaptureCallback>
 8007fc0:	e005      	b.n	8007fce <HAL_TIM_IRQHandler+0x142>
>>>>>>> flight_hardware
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f85c 	bl	8008100 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 f86d 	bl	8008128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	771a      	strb	r2, [r3, #28]
=======
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 f85c 	bl	8008080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 f86d 	bl	80080a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	771a      	strb	r2, [r3, #28]
>>>>>>> flight_hardware
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
<<<<<<< HEAD
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	f003 0301 	and.w	r3, r3, #1
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00c      	beq.n	8008078 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f003 0301 	and.w	r3, r3, #1
 8008064:	2b00      	cmp	r3, #0
 8008066:	d007      	beq.n	8008078 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f06f 0201 	mvn.w	r2, #1
 8008070:	611a      	str	r2, [r3, #16]
=======
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	f003 0301 	and.w	r3, r3, #1
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00c      	beq.n	8007ff8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f003 0301 	and.w	r3, r3, #1
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d007      	beq.n	8007ff8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f06f 0201 	mvn.w	r2, #1
 8007ff0:	611a      	str	r2, [r3, #16]
>>>>>>> flight_hardware
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< HEAD
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 f83a 	bl	80080ec <HAL_TIM_PeriodElapsedCallback>
=======
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 f83a 	bl	800806c <HAL_TIM_PeriodElapsedCallback>
>>>>>>> flight_hardware
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
<<<<<<< HEAD
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00c      	beq.n	800809c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008088:	2b00      	cmp	r3, #0
 800808a:	d007      	beq.n	800809c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008094:	611a      	str	r2, [r3, #16]
=======
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d00c      	beq.n	800801c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008008:	2b00      	cmp	r3, #0
 800800a:	d007      	beq.n	800801c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008014:	611a      	str	r2, [r3, #16]
>>>>>>> flight_hardware
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< HEAD
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 f98c 	bl	80083b4 <HAL_TIMEx_BreakCallback>
=======
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 f98c 	bl	8008334 <HAL_TIMEx_BreakCallback>
>>>>>>> flight_hardware
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
<<<<<<< HEAD
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00c      	beq.n	80080c0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d007      	beq.n	80080c0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80080b8:	611a      	str	r2, [r3, #16]
=======
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008022:	2b00      	cmp	r3, #0
 8008024:	d00c      	beq.n	8008040 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800802c:	2b00      	cmp	r3, #0
 800802e:	d007      	beq.n	8008040 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008038:	611a      	str	r2, [r3, #16]
>>>>>>> flight_hardware
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< HEAD
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 f83e 	bl	800813c <HAL_TIM_TriggerCallback>
=======
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 f83e 	bl	80080bc <HAL_TIM_TriggerCallback>
>>>>>>> flight_hardware
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
<<<<<<< HEAD
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	f003 0320 	and.w	r3, r3, #32
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00c      	beq.n	80080e4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f003 0320 	and.w	r3, r3, #32
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d007      	beq.n	80080e4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f06f 0220 	mvn.w	r2, #32
 80080dc:	611a      	str	r2, [r3, #16]
=======
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	f003 0320 	and.w	r3, r3, #32
 8008046:	2b00      	cmp	r3, #0
 8008048:	d00c      	beq.n	8008064 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f003 0320 	and.w	r3, r3, #32
 8008050:	2b00      	cmp	r3, #0
 8008052:	d007      	beq.n	8008064 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f06f 0220 	mvn.w	r2, #32
 800805c:	611a      	str	r2, [r3, #16]
>>>>>>> flight_hardware
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< HEAD
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 f95e 	bl	80083a0 <HAL_TIMEx_CommutCallback>
=======
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 f95e 	bl	8008320 <HAL_TIMEx_CommutCallback>
>>>>>>> flight_hardware
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 80080e4:	bf00      	nop
 80080e6:	3710      	adds	r7, #16
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <HAL_TIM_PeriodElapsedCallback>:
=======
 8008064:	bf00      	nop
 8008066:	3710      	adds	r7, #16
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> flight_hardware
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
=======
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
>>>>>>> flight_hardware
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80080f4:	bf00      	nop
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <HAL_TIM_OC_DelayElapsedCallback>:
=======
 8008074:	bf00      	nop
 8008076:	370c      	adds	r7, #12
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr

08008080 <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> flight_hardware
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
=======
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
>>>>>>> flight_hardware
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8008108:	bf00      	nop
 800810a:	370c      	adds	r7, #12
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr

08008114 <HAL_TIM_IC_CaptureCallback>:
=======
 8008088:	bf00      	nop
 800808a:	370c      	adds	r7, #12
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <HAL_TIM_IC_CaptureCallback>:
>>>>>>> flight_hardware
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
=======
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
>>>>>>> flight_hardware
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800811c:	bf00      	nop
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 800809c:	bf00      	nop
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> flight_hardware
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
=======
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
>>>>>>> flight_hardware
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8008130:	bf00      	nop
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <HAL_TIM_TriggerCallback>:
=======
 80080b0:	bf00      	nop
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <HAL_TIM_TriggerCallback>:
>>>>>>> flight_hardware
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
=======
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
>>>>>>> flight_hardware
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8008144:	bf00      	nop
 8008146:	370c      	adds	r7, #12
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <TIM_Base_SetConfig>:
=======
 80080c4:	bf00      	nop
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <TIM_Base_SetConfig>:
>>>>>>> flight_hardware
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 8008150:	b480      	push	{r7}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	4a46      	ldr	r2, [pc, #280]	; (800827c <TIM_Base_SetConfig+0x12c>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d013      	beq.n	8008190 <TIM_Base_SetConfig+0x40>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800816e:	d00f      	beq.n	8008190 <TIM_Base_SetConfig+0x40>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	4a43      	ldr	r2, [pc, #268]	; (8008280 <TIM_Base_SetConfig+0x130>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d00b      	beq.n	8008190 <TIM_Base_SetConfig+0x40>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	4a42      	ldr	r2, [pc, #264]	; (8008284 <TIM_Base_SetConfig+0x134>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d007      	beq.n	8008190 <TIM_Base_SetConfig+0x40>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	4a41      	ldr	r2, [pc, #260]	; (8008288 <TIM_Base_SetConfig+0x138>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d003      	beq.n	8008190 <TIM_Base_SetConfig+0x40>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	4a40      	ldr	r2, [pc, #256]	; (800828c <TIM_Base_SetConfig+0x13c>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d108      	bne.n	80081a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008196:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	68fa      	ldr	r2, [r7, #12]
 800819e:	4313      	orrs	r3, r2
 80081a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	4a35      	ldr	r2, [pc, #212]	; (800827c <TIM_Base_SetConfig+0x12c>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d02b      	beq.n	8008202 <TIM_Base_SetConfig+0xb2>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081b0:	d027      	beq.n	8008202 <TIM_Base_SetConfig+0xb2>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	4a32      	ldr	r2, [pc, #200]	; (8008280 <TIM_Base_SetConfig+0x130>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d023      	beq.n	8008202 <TIM_Base_SetConfig+0xb2>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	4a31      	ldr	r2, [pc, #196]	; (8008284 <TIM_Base_SetConfig+0x134>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d01f      	beq.n	8008202 <TIM_Base_SetConfig+0xb2>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	4a30      	ldr	r2, [pc, #192]	; (8008288 <TIM_Base_SetConfig+0x138>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d01b      	beq.n	8008202 <TIM_Base_SetConfig+0xb2>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4a2f      	ldr	r2, [pc, #188]	; (800828c <TIM_Base_SetConfig+0x13c>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d017      	beq.n	8008202 <TIM_Base_SetConfig+0xb2>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	4a2e      	ldr	r2, [pc, #184]	; (8008290 <TIM_Base_SetConfig+0x140>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d013      	beq.n	8008202 <TIM_Base_SetConfig+0xb2>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a2d      	ldr	r2, [pc, #180]	; (8008294 <TIM_Base_SetConfig+0x144>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d00f      	beq.n	8008202 <TIM_Base_SetConfig+0xb2>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4a2c      	ldr	r2, [pc, #176]	; (8008298 <TIM_Base_SetConfig+0x148>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d00b      	beq.n	8008202 <TIM_Base_SetConfig+0xb2>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4a2b      	ldr	r2, [pc, #172]	; (800829c <TIM_Base_SetConfig+0x14c>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d007      	beq.n	8008202 <TIM_Base_SetConfig+0xb2>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	4a2a      	ldr	r2, [pc, #168]	; (80082a0 <TIM_Base_SetConfig+0x150>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d003      	beq.n	8008202 <TIM_Base_SetConfig+0xb2>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	4a29      	ldr	r2, [pc, #164]	; (80082a4 <TIM_Base_SetConfig+0x154>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d108      	bne.n	8008214 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008208:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	68fa      	ldr	r2, [r7, #12]
 8008210:	4313      	orrs	r3, r2
 8008212:	60fb      	str	r3, [r7, #12]
=======
 80080d0:	b480      	push	{r7}
 80080d2:	b085      	sub	sp, #20
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4a46      	ldr	r2, [pc, #280]	; (80081fc <TIM_Base_SetConfig+0x12c>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d013      	beq.n	8008110 <TIM_Base_SetConfig+0x40>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080ee:	d00f      	beq.n	8008110 <TIM_Base_SetConfig+0x40>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a43      	ldr	r2, [pc, #268]	; (8008200 <TIM_Base_SetConfig+0x130>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d00b      	beq.n	8008110 <TIM_Base_SetConfig+0x40>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a42      	ldr	r2, [pc, #264]	; (8008204 <TIM_Base_SetConfig+0x134>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d007      	beq.n	8008110 <TIM_Base_SetConfig+0x40>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4a41      	ldr	r2, [pc, #260]	; (8008208 <TIM_Base_SetConfig+0x138>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d003      	beq.n	8008110 <TIM_Base_SetConfig+0x40>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4a40      	ldr	r2, [pc, #256]	; (800820c <TIM_Base_SetConfig+0x13c>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d108      	bne.n	8008122 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008116:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	4313      	orrs	r3, r2
 8008120:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4a35      	ldr	r2, [pc, #212]	; (80081fc <TIM_Base_SetConfig+0x12c>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d02b      	beq.n	8008182 <TIM_Base_SetConfig+0xb2>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008130:	d027      	beq.n	8008182 <TIM_Base_SetConfig+0xb2>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a32      	ldr	r2, [pc, #200]	; (8008200 <TIM_Base_SetConfig+0x130>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d023      	beq.n	8008182 <TIM_Base_SetConfig+0xb2>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a31      	ldr	r2, [pc, #196]	; (8008204 <TIM_Base_SetConfig+0x134>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d01f      	beq.n	8008182 <TIM_Base_SetConfig+0xb2>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4a30      	ldr	r2, [pc, #192]	; (8008208 <TIM_Base_SetConfig+0x138>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d01b      	beq.n	8008182 <TIM_Base_SetConfig+0xb2>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4a2f      	ldr	r2, [pc, #188]	; (800820c <TIM_Base_SetConfig+0x13c>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d017      	beq.n	8008182 <TIM_Base_SetConfig+0xb2>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4a2e      	ldr	r2, [pc, #184]	; (8008210 <TIM_Base_SetConfig+0x140>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d013      	beq.n	8008182 <TIM_Base_SetConfig+0xb2>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4a2d      	ldr	r2, [pc, #180]	; (8008214 <TIM_Base_SetConfig+0x144>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d00f      	beq.n	8008182 <TIM_Base_SetConfig+0xb2>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4a2c      	ldr	r2, [pc, #176]	; (8008218 <TIM_Base_SetConfig+0x148>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d00b      	beq.n	8008182 <TIM_Base_SetConfig+0xb2>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4a2b      	ldr	r2, [pc, #172]	; (800821c <TIM_Base_SetConfig+0x14c>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d007      	beq.n	8008182 <TIM_Base_SetConfig+0xb2>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	4a2a      	ldr	r2, [pc, #168]	; (8008220 <TIM_Base_SetConfig+0x150>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d003      	beq.n	8008182 <TIM_Base_SetConfig+0xb2>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4a29      	ldr	r2, [pc, #164]	; (8008224 <TIM_Base_SetConfig+0x154>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d108      	bne.n	8008194 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008188:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	68db      	ldr	r3, [r3, #12]
 800818e:	68fa      	ldr	r2, [r7, #12]
 8008190:	4313      	orrs	r3, r2
 8008192:	60fb      	str	r3, [r7, #12]
>>>>>>> flight_hardware
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	695b      	ldr	r3, [r3, #20]
 800821e:	4313      	orrs	r3, r2
 8008220:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	68fa      	ldr	r2, [r7, #12]
 8008226:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	689a      	ldr	r2, [r3, #8]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4a10      	ldr	r2, [pc, #64]	; (800827c <TIM_Base_SetConfig+0x12c>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d003      	beq.n	8008248 <TIM_Base_SetConfig+0xf8>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4a12      	ldr	r2, [pc, #72]	; (800828c <TIM_Base_SetConfig+0x13c>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d103      	bne.n	8008250 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	691a      	ldr	r2, [r3, #16]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	695b      	ldr	r3, [r3, #20]
 800819e:	4313      	orrs	r3, r2
 80081a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	68fa      	ldr	r2, [r7, #12]
 80081a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	689a      	ldr	r2, [r3, #8]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	4a10      	ldr	r2, [pc, #64]	; (80081fc <TIM_Base_SetConfig+0x12c>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d003      	beq.n	80081c8 <TIM_Base_SetConfig+0xf8>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	4a12      	ldr	r2, [pc, #72]	; (800820c <TIM_Base_SetConfig+0x13c>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d103      	bne.n	80081d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	691a      	ldr	r2, [r3, #16]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> flight_hardware
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2201      	movs	r2, #1
 8008254:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	691b      	ldr	r3, [r3, #16]
 800825a:	f003 0301 	and.w	r3, r3, #1
 800825e:	2b01      	cmp	r3, #1
 8008260:	d105      	bne.n	800826e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	691b      	ldr	r3, [r3, #16]
 8008266:	f023 0201 	bic.w	r2, r3, #1
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	611a      	str	r2, [r3, #16]
  }
}
 800826e:	bf00      	nop
 8008270:	3714      	adds	r7, #20
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop
 800827c:	40010000 	.word	0x40010000
 8008280:	40000400 	.word	0x40000400
 8008284:	40000800 	.word	0x40000800
 8008288:	40000c00 	.word	0x40000c00
 800828c:	40010400 	.word	0x40010400
 8008290:	40014000 	.word	0x40014000
 8008294:	40014400 	.word	0x40014400
 8008298:	40014800 	.word	0x40014800
 800829c:	40001800 	.word	0x40001800
 80082a0:	40001c00 	.word	0x40001c00
 80082a4:	40002000 	.word	0x40002000

080082a8 <HAL_TIMEx_MasterConfigSynchronization>:
=======
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	f003 0301 	and.w	r3, r3, #1
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d105      	bne.n	80081ee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	691b      	ldr	r3, [r3, #16]
 80081e6:	f023 0201 	bic.w	r2, r3, #1
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	611a      	str	r2, [r3, #16]
  }
}
 80081ee:	bf00      	nop
 80081f0:	3714      	adds	r7, #20
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop
 80081fc:	40010000 	.word	0x40010000
 8008200:	40000400 	.word	0x40000400
 8008204:	40000800 	.word	0x40000800
 8008208:	40000c00 	.word	0x40000c00
 800820c:	40010400 	.word	0x40010400
 8008210:	40014000 	.word	0x40014000
 8008214:	40014400 	.word	0x40014400
 8008218:	40014800 	.word	0x40014800
 800821c:	40001800 	.word	0x40001800
 8008220:	40001c00 	.word	0x40001c00
 8008224:	40002000 	.word	0x40002000

08008228 <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> flight_hardware
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< HEAD
 80082a8:	b480      	push	{r7}
 80082aa:	b085      	sub	sp, #20
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
=======
 8008228:	b480      	push	{r7}
 800822a:	b085      	sub	sp, #20
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
>>>>>>> flight_hardware
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d101      	bne.n	80082c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80082bc:	2302      	movs	r3, #2
 80082be:	e05a      	b.n	8008376 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2202      	movs	r2, #2
 80082cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	68fa      	ldr	r2, [r7, #12]
 80082ee:	4313      	orrs	r3, r2
 80082f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	68fa      	ldr	r2, [r7, #12]
 80082f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a21      	ldr	r2, [pc, #132]	; (8008384 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d022      	beq.n	800834a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800830c:	d01d      	beq.n	800834a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a1d      	ldr	r2, [pc, #116]	; (8008388 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d018      	beq.n	800834a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a1b      	ldr	r2, [pc, #108]	; (800838c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d013      	beq.n	800834a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a1a      	ldr	r2, [pc, #104]	; (8008390 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d00e      	beq.n	800834a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a18      	ldr	r2, [pc, #96]	; (8008394 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d009      	beq.n	800834a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a17      	ldr	r2, [pc, #92]	; (8008398 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d004      	beq.n	800834a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a15      	ldr	r2, [pc, #84]	; (800839c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d10c      	bne.n	8008364 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008350:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	68ba      	ldr	r2, [r7, #8]
 8008358:	4313      	orrs	r3, r2
 800835a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	68ba      	ldr	r2, [r7, #8]
 8008362:	609a      	str	r2, [r3, #8]
=======
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008238:	2b01      	cmp	r3, #1
 800823a:	d101      	bne.n	8008240 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800823c:	2302      	movs	r3, #2
 800823e:	e05a      	b.n	80082f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2202      	movs	r2, #2
 800824c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008266:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	68fa      	ldr	r2, [r7, #12]
 800826e:	4313      	orrs	r3, r2
 8008270:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	68fa      	ldr	r2, [r7, #12]
 8008278:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a21      	ldr	r2, [pc, #132]	; (8008304 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d022      	beq.n	80082ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800828c:	d01d      	beq.n	80082ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a1d      	ldr	r2, [pc, #116]	; (8008308 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d018      	beq.n	80082ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a1b      	ldr	r2, [pc, #108]	; (800830c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d013      	beq.n	80082ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a1a      	ldr	r2, [pc, #104]	; (8008310 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d00e      	beq.n	80082ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a18      	ldr	r2, [pc, #96]	; (8008314 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d009      	beq.n	80082ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a17      	ldr	r2, [pc, #92]	; (8008318 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d004      	beq.n	80082ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a15      	ldr	r2, [pc, #84]	; (800831c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d10c      	bne.n	80082e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	68ba      	ldr	r2, [r7, #8]
 80082d8:	4313      	orrs	r3, r2
 80082da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	68ba      	ldr	r2, [r7, #8]
 80082e2:	609a      	str	r2, [r3, #8]
>>>>>>> flight_hardware
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	3714      	adds	r7, #20
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	40010000 	.word	0x40010000
 8008388:	40000400 	.word	0x40000400
 800838c:	40000800 	.word	0x40000800
 8008390:	40000c00 	.word	0x40000c00
 8008394:	40010400 	.word	0x40010400
 8008398:	40014000 	.word	0x40014000
 800839c:	40001800 	.word	0x40001800

080083a0 <HAL_TIMEx_CommutCallback>:
=======
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3714      	adds	r7, #20
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr
 8008302:	bf00      	nop
 8008304:	40010000 	.word	0x40010000
 8008308:	40000400 	.word	0x40000400
 800830c:	40000800 	.word	0x40000800
 8008310:	40000c00 	.word	0x40000c00
 8008314:	40010400 	.word	0x40010400
 8008318:	40014000 	.word	0x40014000
 800831c:	40001800 	.word	0x40001800

08008320 <HAL_TIMEx_CommutCallback>:
>>>>>>> flight_hardware
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
=======
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
>>>>>>> flight_hardware
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80083a8:	bf00      	nop
 80083aa:	370c      	adds	r7, #12
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr

080083b4 <HAL_TIMEx_BreakCallback>:
=======
 8008328:	bf00      	nop
 800832a:	370c      	adds	r7, #12
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr

08008334 <HAL_TIMEx_BreakCallback>:
>>>>>>> flight_hardware
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
=======
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
>>>>>>> flight_hardware
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80083bc:	bf00      	nop
 80083be:	370c      	adds	r7, #12
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <HAL_UART_Init>:
=======
 800833c:	bf00      	nop
 800833e:	370c      	adds	r7, #12
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <HAL_UART_Init>:
>>>>>>> flight_hardware
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d101      	bne.n	80083da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083d6:	2301      	movs	r3, #1
 80083d8:	e042      	b.n	8008460 <HAL_UART_Init+0x98>
=======
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d101      	bne.n	800835a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	e042      	b.n	80083e0 <HAL_UART_Init+0x98>
>>>>>>> flight_hardware
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d106      	bne.n	80083f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
=======
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008360:	b2db      	uxtb	r3, r3
 8008362:	2b00      	cmp	r3, #0
 8008364:	d106      	bne.n	8008374 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
>>>>>>> flight_hardware

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< HEAD
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f7fa fbfc 	bl	8002bec <HAL_UART_MspInit>
=======
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f7fa fbfc 	bl	8002b6c <HAL_UART_MspInit>
>>>>>>> flight_hardware
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2224      	movs	r2, #36	; 0x24
 80083f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	68da      	ldr	r2, [r3, #12]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800840a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 fdbd 	bl	8008f8c <UART_SetConfig>
=======
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2224      	movs	r2, #36	; 0x24
 8008378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	68da      	ldr	r2, [r3, #12]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800838a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 fdbd 	bl	8008f0c <UART_SetConfig>
>>>>>>> flight_hardware

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	691a      	ldr	r2, [r3, #16]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008420:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	695a      	ldr	r2, [r3, #20]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008430:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	68da      	ldr	r2, [r3, #12]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008440:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2220      	movs	r2, #32
 800844c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2220      	movs	r2, #32
 8008454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2200      	movs	r2, #0
 800845c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800845e:	2300      	movs	r3, #0
}
 8008460:	4618      	mov	r0, r3
 8008462:	3708      	adds	r7, #8
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <HAL_UART_Transmit>:
=======
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	691a      	ldr	r2, [r3, #16]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80083a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	695a      	ldr	r2, [r3, #20]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80083b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	68da      	ldr	r2, [r3, #12]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80083c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2220      	movs	r2, #32
 80083cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2220      	movs	r2, #32
 80083d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80083de:	2300      	movs	r3, #0
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3708      	adds	r7, #8
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <HAL_UART_Transmit>:
>>>>>>> flight_hardware
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 8008468:	b580      	push	{r7, lr}
 800846a:	b08a      	sub	sp, #40	; 0x28
 800846c:	af02      	add	r7, sp, #8
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	603b      	str	r3, [r7, #0]
 8008474:	4613      	mov	r3, r2
 8008476:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008478:	2300      	movs	r3, #0
 800847a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008482:	b2db      	uxtb	r3, r3
 8008484:	2b20      	cmp	r3, #32
 8008486:	d175      	bne.n	8008574 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d002      	beq.n	8008494 <HAL_UART_Transmit+0x2c>
 800848e:	88fb      	ldrh	r3, [r7, #6]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d101      	bne.n	8008498 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008494:	2301      	movs	r3, #1
 8008496:	e06e      	b.n	8008576 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2200      	movs	r2, #0
 800849c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2221      	movs	r2, #33	; 0x21
 80084a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80084a6:	f7fa fdd5 	bl	8003054 <HAL_GetTick>
 80084aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	88fa      	ldrh	r2, [r7, #6]
 80084b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	88fa      	ldrh	r2, [r7, #6]
 80084b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084c0:	d108      	bne.n	80084d4 <HAL_UART_Transmit+0x6c>
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d104      	bne.n	80084d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80084ca:	2300      	movs	r3, #0
 80084cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	61bb      	str	r3, [r7, #24]
 80084d2:	e003      	b.n	80084dc <HAL_UART_Transmit+0x74>
=======
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b08a      	sub	sp, #40	; 0x28
 80083ec:	af02      	add	r7, sp, #8
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	603b      	str	r3, [r7, #0]
 80083f4:	4613      	mov	r3, r2
 80083f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80083f8:	2300      	movs	r3, #0
 80083fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008402:	b2db      	uxtb	r3, r3
 8008404:	2b20      	cmp	r3, #32
 8008406:	d175      	bne.n	80084f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d002      	beq.n	8008414 <HAL_UART_Transmit+0x2c>
 800840e:	88fb      	ldrh	r3, [r7, #6]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d101      	bne.n	8008418 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	e06e      	b.n	80084f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2200      	movs	r2, #0
 800841c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2221      	movs	r2, #33	; 0x21
 8008422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008426:	f7fa fdd5 	bl	8002fd4 <HAL_GetTick>
 800842a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	88fa      	ldrh	r2, [r7, #6]
 8008430:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	88fa      	ldrh	r2, [r7, #6]
 8008436:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008440:	d108      	bne.n	8008454 <HAL_UART_Transmit+0x6c>
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	691b      	ldr	r3, [r3, #16]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d104      	bne.n	8008454 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800844a:	2300      	movs	r3, #0
 800844c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	61bb      	str	r3, [r7, #24]
 8008452:	e003      	b.n	800845c <HAL_UART_Transmit+0x74>
>>>>>>> flight_hardware
    }
    else
    {
      pdata8bits  = pData;
<<<<<<< HEAD
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80084d8:	2300      	movs	r3, #0
 80084da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80084dc:	e02e      	b.n	800853c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	9300      	str	r3, [sp, #0]
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	2200      	movs	r2, #0
 80084e6:	2180      	movs	r1, #128	; 0x80
 80084e8:	68f8      	ldr	r0, [r7, #12]
 80084ea:	f000 fb1f 	bl	8008b2c <UART_WaitOnFlagUntilTimeout>
 80084ee:	4603      	mov	r3, r0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d005      	beq.n	8008500 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2220      	movs	r2, #32
 80084f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
=======
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008458:	2300      	movs	r3, #0
 800845a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800845c:	e02e      	b.n	80084bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	9300      	str	r3, [sp, #0]
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	2200      	movs	r2, #0
 8008466:	2180      	movs	r1, #128	; 0x80
 8008468:	68f8      	ldr	r0, [r7, #12]
 800846a:	f000 fb1f 	bl	8008aac <UART_WaitOnFlagUntilTimeout>
 800846e:	4603      	mov	r3, r0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d005      	beq.n	8008480 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2220      	movs	r2, #32
 8008478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800847c:	2303      	movs	r3, #3
 800847e:	e03a      	b.n	80084f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008480:	69fb      	ldr	r3, [r7, #28]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d10b      	bne.n	800849e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008486:	69bb      	ldr	r3, [r7, #24]
 8008488:	881b      	ldrh	r3, [r3, #0]
 800848a:	461a      	mov	r2, r3
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008494:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008496:	69bb      	ldr	r3, [r7, #24]
 8008498:	3302      	adds	r3, #2
 800849a:	61bb      	str	r3, [r7, #24]
 800849c:	e007      	b.n	80084ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	781a      	ldrb	r2, [r3, #0]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80084a8:	69fb      	ldr	r3, [r7, #28]
 80084aa:	3301      	adds	r3, #1
 80084ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	3b01      	subs	r3, #1
 80084b6:	b29a      	uxth	r2, r3
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d1cb      	bne.n	800845e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	9300      	str	r3, [sp, #0]
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	2200      	movs	r2, #0
 80084ce:	2140      	movs	r1, #64	; 0x40
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f000 faeb 	bl	8008aac <UART_WaitOnFlagUntilTimeout>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d005      	beq.n	80084e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2220      	movs	r2, #32
 80084e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80084e4:	2303      	movs	r3, #3
 80084e6:	e006      	b.n	80084f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2220      	movs	r2, #32
 80084ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
>>>>>>> flight_hardware

        return HAL_TIMEOUT;
 80084fc:	2303      	movs	r3, #3
 80084fe:	e03a      	b.n	8008576 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008500:	69fb      	ldr	r3, [r7, #28]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d10b      	bne.n	800851e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	881b      	ldrh	r3, [r3, #0]
 800850a:	461a      	mov	r2, r3
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008514:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008516:	69bb      	ldr	r3, [r7, #24]
 8008518:	3302      	adds	r3, #2
 800851a:	61bb      	str	r3, [r7, #24]
 800851c:	e007      	b.n	800852e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	781a      	ldrb	r2, [r3, #0]
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	3301      	adds	r3, #1
 800852c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008532:	b29b      	uxth	r3, r3
 8008534:	3b01      	subs	r3, #1
 8008536:	b29a      	uxth	r2, r3
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008540:	b29b      	uxth	r3, r3
 8008542:	2b00      	cmp	r3, #0
 8008544:	d1cb      	bne.n	80084de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	9300      	str	r3, [sp, #0]
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	2200      	movs	r2, #0
 800854e:	2140      	movs	r1, #64	; 0x40
 8008550:	68f8      	ldr	r0, [r7, #12]
 8008552:	f000 faeb 	bl	8008b2c <UART_WaitOnFlagUntilTimeout>
 8008556:	4603      	mov	r3, r0
 8008558:	2b00      	cmp	r3, #0
 800855a:	d005      	beq.n	8008568 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2220      	movs	r2, #32
 8008560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8008564:	2303      	movs	r3, #3
 8008566:	e006      	b.n	8008576 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2220      	movs	r2, #32
 800856c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
<<<<<<< HEAD
 8008570:	2300      	movs	r3, #0
 8008572:	e000      	b.n	8008576 <HAL_UART_Transmit+0x10e>
=======
 80084f0:	2300      	movs	r3, #0
 80084f2:	e000      	b.n	80084f6 <HAL_UART_Transmit+0x10e>
>>>>>>> flight_hardware
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8008574:	2302      	movs	r3, #2
  }
}
 8008576:	4618      	mov	r0, r3
 8008578:	3720      	adds	r7, #32
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}

0800857e <HAL_UART_Receive_IT>:
=======
 80084f4:	2302      	movs	r3, #2
  }
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3720      	adds	r7, #32
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <HAL_UART_Receive_IT>:
>>>>>>> flight_hardware
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 800857e:	b580      	push	{r7, lr}
 8008580:	b084      	sub	sp, #16
 8008582:	af00      	add	r7, sp, #0
 8008584:	60f8      	str	r0, [r7, #12]
 8008586:	60b9      	str	r1, [r7, #8]
 8008588:	4613      	mov	r3, r2
 800858a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008592:	b2db      	uxtb	r3, r3
 8008594:	2b20      	cmp	r3, #32
 8008596:	d112      	bne.n	80085be <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d002      	beq.n	80085a4 <HAL_UART_Receive_IT+0x26>
 800859e:	88fb      	ldrh	r3, [r7, #6]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d101      	bne.n	80085a8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80085a4:	2301      	movs	r3, #1
 80085a6:	e00b      	b.n	80085c0 <HAL_UART_Receive_IT+0x42>
=======
 80084fe:	b580      	push	{r7, lr}
 8008500:	b084      	sub	sp, #16
 8008502:	af00      	add	r7, sp, #0
 8008504:	60f8      	str	r0, [r7, #12]
 8008506:	60b9      	str	r1, [r7, #8]
 8008508:	4613      	mov	r3, r2
 800850a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008512:	b2db      	uxtb	r3, r3
 8008514:	2b20      	cmp	r3, #32
 8008516:	d112      	bne.n	800853e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d002      	beq.n	8008524 <HAL_UART_Receive_IT+0x26>
 800851e:	88fb      	ldrh	r3, [r7, #6]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d101      	bne.n	8008528 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008524:	2301      	movs	r3, #1
 8008526:	e00b      	b.n	8008540 <HAL_UART_Receive_IT+0x42>
>>>>>>> flight_hardware
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
<<<<<<< HEAD
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2200      	movs	r2, #0
 80085ac:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80085ae:	88fb      	ldrh	r3, [r7, #6]
 80085b0:	461a      	mov	r2, r3
 80085b2:	68b9      	ldr	r1, [r7, #8]
 80085b4:	68f8      	ldr	r0, [r7, #12]
 80085b6:	f000 fb12 	bl	8008bde <UART_Start_Receive_IT>
 80085ba:	4603      	mov	r3, r0
 80085bc:	e000      	b.n	80085c0 <HAL_UART_Receive_IT+0x42>
=======
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2200      	movs	r2, #0
 800852c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800852e:	88fb      	ldrh	r3, [r7, #6]
 8008530:	461a      	mov	r2, r3
 8008532:	68b9      	ldr	r1, [r7, #8]
 8008534:	68f8      	ldr	r0, [r7, #12]
 8008536:	f000 fb12 	bl	8008b5e <UART_Start_Receive_IT>
 800853a:	4603      	mov	r3, r0
 800853c:	e000      	b.n	8008540 <HAL_UART_Receive_IT+0x42>
>>>>>>> flight_hardware
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 80085be:	2302      	movs	r3, #2
  }
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3710      	adds	r7, #16
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <HAL_UART_IRQHandler>:
=======
 800853e:	2302      	movs	r3, #2
  }
}
 8008540:	4618      	mov	r0, r3
 8008542:	3710      	adds	r7, #16
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <HAL_UART_IRQHandler>:
>>>>>>> flight_hardware
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b0ba      	sub	sp, #232	; 0xe8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	695b      	ldr	r3, [r3, #20]
 80085ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80085ee:	2300      	movs	r3, #0
 80085f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80085f4:	2300      	movs	r3, #0
 80085f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80085fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085fe:	f003 030f 	and.w	r3, r3, #15
 8008602:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008606:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800860a:	2b00      	cmp	r3, #0
 800860c:	d10f      	bne.n	800862e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800860e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008612:	f003 0320 	and.w	r3, r3, #32
 8008616:	2b00      	cmp	r3, #0
 8008618:	d009      	beq.n	800862e <HAL_UART_IRQHandler+0x66>
 800861a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800861e:	f003 0320 	and.w	r3, r3, #32
 8008622:	2b00      	cmp	r3, #0
 8008624:	d003      	beq.n	800862e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 fbf2 	bl	8008e10 <UART_Receive_IT>
      return;
 800862c:	e25b      	b.n	8008ae6 <HAL_UART_IRQHandler+0x51e>
=======
 8008548:	b580      	push	{r7, lr}
 800854a:	b0ba      	sub	sp, #232	; 0xe8
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	695b      	ldr	r3, [r3, #20]
 800856a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800856e:	2300      	movs	r3, #0
 8008570:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008574:	2300      	movs	r3, #0
 8008576:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800857a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800857e:	f003 030f 	and.w	r3, r3, #15
 8008582:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008586:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800858a:	2b00      	cmp	r3, #0
 800858c:	d10f      	bne.n	80085ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800858e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008592:	f003 0320 	and.w	r3, r3, #32
 8008596:	2b00      	cmp	r3, #0
 8008598:	d009      	beq.n	80085ae <HAL_UART_IRQHandler+0x66>
 800859a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800859e:	f003 0320 	and.w	r3, r3, #32
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d003      	beq.n	80085ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 fbf2 	bl	8008d90 <UART_Receive_IT>
      return;
 80085ac:	e25b      	b.n	8008a66 <HAL_UART_IRQHandler+0x51e>
>>>>>>> flight_hardware
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
<<<<<<< HEAD
 800862e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008632:	2b00      	cmp	r3, #0
 8008634:	f000 80de 	beq.w	80087f4 <HAL_UART_IRQHandler+0x22c>
 8008638:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800863c:	f003 0301 	and.w	r3, r3, #1
 8008640:	2b00      	cmp	r3, #0
 8008642:	d106      	bne.n	8008652 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008648:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800864c:	2b00      	cmp	r3, #0
 800864e:	f000 80d1 	beq.w	80087f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008656:	f003 0301 	and.w	r3, r3, #1
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00b      	beq.n	8008676 <HAL_UART_IRQHandler+0xae>
 800865e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008666:	2b00      	cmp	r3, #0
 8008668:	d005      	beq.n	8008676 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800866e:	f043 0201 	orr.w	r2, r3, #1
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	645a      	str	r2, [r3, #68]	; 0x44
=======
 80085ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	f000 80de 	beq.w	8008774 <HAL_UART_IRQHandler+0x22c>
 80085b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085bc:	f003 0301 	and.w	r3, r3, #1
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d106      	bne.n	80085d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80085c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	f000 80d1 	beq.w	8008774 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80085d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085d6:	f003 0301 	and.w	r3, r3, #1
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00b      	beq.n	80085f6 <HAL_UART_IRQHandler+0xae>
 80085de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d005      	beq.n	80085f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085ee:	f043 0201 	orr.w	r2, r3, #1
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> flight_hardware
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
<<<<<<< HEAD
 8008676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800867a:	f003 0304 	and.w	r3, r3, #4
 800867e:	2b00      	cmp	r3, #0
 8008680:	d00b      	beq.n	800869a <HAL_UART_IRQHandler+0xd2>
 8008682:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008686:	f003 0301 	and.w	r3, r3, #1
 800868a:	2b00      	cmp	r3, #0
 800868c:	d005      	beq.n	800869a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008692:	f043 0202 	orr.w	r2, r3, #2
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	645a      	str	r2, [r3, #68]	; 0x44
=======
 80085f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085fa:	f003 0304 	and.w	r3, r3, #4
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00b      	beq.n	800861a <HAL_UART_IRQHandler+0xd2>
 8008602:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008606:	f003 0301 	and.w	r3, r3, #1
 800860a:	2b00      	cmp	r3, #0
 800860c:	d005      	beq.n	800861a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008612:	f043 0202 	orr.w	r2, r3, #2
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> flight_hardware
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
<<<<<<< HEAD
 800869a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800869e:	f003 0302 	and.w	r3, r3, #2
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d00b      	beq.n	80086be <HAL_UART_IRQHandler+0xf6>
 80086a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086aa:	f003 0301 	and.w	r3, r3, #1
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d005      	beq.n	80086be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086b6:	f043 0204 	orr.w	r2, r3, #4
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	645a      	str	r2, [r3, #68]	; 0x44
=======
 800861a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800861e:	f003 0302 	and.w	r3, r3, #2
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00b      	beq.n	800863e <HAL_UART_IRQHandler+0xf6>
 8008626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800862a:	f003 0301 	and.w	r3, r3, #1
 800862e:	2b00      	cmp	r3, #0
 8008630:	d005      	beq.n	800863e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008636:	f043 0204 	orr.w	r2, r3, #4
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> flight_hardware
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
<<<<<<< HEAD
 80086be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086c2:	f003 0308 	and.w	r3, r3, #8
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d011      	beq.n	80086ee <HAL_UART_IRQHandler+0x126>
 80086ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086ce:	f003 0320 	and.w	r3, r3, #32
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d105      	bne.n	80086e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80086d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086da:	f003 0301 	and.w	r3, r3, #1
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d005      	beq.n	80086ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086e6:	f043 0208 	orr.w	r2, r3, #8
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	645a      	str	r2, [r3, #68]	; 0x44
=======
 800863e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008642:	f003 0308 	and.w	r3, r3, #8
 8008646:	2b00      	cmp	r3, #0
 8008648:	d011      	beq.n	800866e <HAL_UART_IRQHandler+0x126>
 800864a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800864e:	f003 0320 	and.w	r3, r3, #32
 8008652:	2b00      	cmp	r3, #0
 8008654:	d105      	bne.n	8008662 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008656:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800865a:	f003 0301 	and.w	r3, r3, #1
 800865e:	2b00      	cmp	r3, #0
 8008660:	d005      	beq.n	800866e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008666:	f043 0208 	orr.w	r2, r3, #8
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> flight_hardware
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< HEAD
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	f000 81f2 	beq.w	8008adc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80086f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086fc:	f003 0320 	and.w	r3, r3, #32
 8008700:	2b00      	cmp	r3, #0
 8008702:	d008      	beq.n	8008716 <HAL_UART_IRQHandler+0x14e>
 8008704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008708:	f003 0320 	and.w	r3, r3, #32
 800870c:	2b00      	cmp	r3, #0
 800870e:	d002      	beq.n	8008716 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 fb7d 	bl	8008e10 <UART_Receive_IT>
=======
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008672:	2b00      	cmp	r3, #0
 8008674:	f000 81f2 	beq.w	8008a5c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800867c:	f003 0320 	and.w	r3, r3, #32
 8008680:	2b00      	cmp	r3, #0
 8008682:	d008      	beq.n	8008696 <HAL_UART_IRQHandler+0x14e>
 8008684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008688:	f003 0320 	and.w	r3, r3, #32
 800868c:	2b00      	cmp	r3, #0
 800868e:	d002      	beq.n	8008696 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 fb7d 	bl	8008d90 <UART_Receive_IT>
>>>>>>> flight_hardware
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	695b      	ldr	r3, [r3, #20]
 800871c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008720:	2b40      	cmp	r3, #64	; 0x40
 8008722:	bf0c      	ite	eq
 8008724:	2301      	moveq	r3, #1
 8008726:	2300      	movne	r3, #0
 8008728:	b2db      	uxtb	r3, r3
 800872a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008732:	f003 0308 	and.w	r3, r3, #8
 8008736:	2b00      	cmp	r3, #0
 8008738:	d103      	bne.n	8008742 <HAL_UART_IRQHandler+0x17a>
 800873a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800873e:	2b00      	cmp	r3, #0
 8008740:	d04f      	beq.n	80087e2 <HAL_UART_IRQHandler+0x21a>
=======
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	695b      	ldr	r3, [r3, #20]
 800869c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086a0:	2b40      	cmp	r3, #64	; 0x40
 80086a2:	bf0c      	ite	eq
 80086a4:	2301      	moveq	r3, #1
 80086a6:	2300      	movne	r3, #0
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086b2:	f003 0308 	and.w	r3, r3, #8
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d103      	bne.n	80086c2 <HAL_UART_IRQHandler+0x17a>
 80086ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d04f      	beq.n	8008762 <HAL_UART_IRQHandler+0x21a>
>>>>>>> flight_hardware
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
<<<<<<< HEAD
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 fa85 	bl	8008c52 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	695b      	ldr	r3, [r3, #20]
 800874e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008752:	2b40      	cmp	r3, #64	; 0x40
 8008754:	d141      	bne.n	80087da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	3314      	adds	r3, #20
 800875c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008760:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008764:	e853 3f00 	ldrex	r3, [r3]
 8008768:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800876c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008770:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008774:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	3314      	adds	r3, #20
 800877e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008782:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008786:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800878e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008792:	e841 2300 	strex	r3, r2, [r1]
 8008796:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800879a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d1d9      	bne.n	8008756 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d013      	beq.n	80087d2 <HAL_UART_IRQHandler+0x20a>
=======
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 fa85 	bl	8008bd2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	695b      	ldr	r3, [r3, #20]
 80086ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086d2:	2b40      	cmp	r3, #64	; 0x40
 80086d4:	d141      	bne.n	800875a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	3314      	adds	r3, #20
 80086dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80086e4:	e853 3f00 	ldrex	r3, [r3]
 80086e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80086ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80086f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	3314      	adds	r3, #20
 80086fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008702:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008706:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800870a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800870e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008712:	e841 2300 	strex	r3, r2, [r1]
 8008716:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800871a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800871e:	2b00      	cmp	r3, #0
 8008720:	d1d9      	bne.n	80086d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008726:	2b00      	cmp	r3, #0
 8008728:	d013      	beq.n	8008752 <HAL_UART_IRQHandler+0x20a>
>>>>>>> flight_hardware
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
<<<<<<< HEAD
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087ae:	4a7e      	ldr	r2, [pc, #504]	; (80089a8 <HAL_UART_IRQHandler+0x3e0>)
 80087b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7fb fd6c 	bl	8004294 <HAL_DMA_Abort_IT>
 80087bc:	4603      	mov	r3, r0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d016      	beq.n	80087f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80087cc:	4610      	mov	r0, r2
 80087ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087d0:	e00e      	b.n	80087f0 <HAL_UART_IRQHandler+0x228>
=======
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800872e:	4a7e      	ldr	r2, [pc, #504]	; (8008928 <HAL_UART_IRQHandler+0x3e0>)
 8008730:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008736:	4618      	mov	r0, r3
 8008738:	f7fb fd6c 	bl	8004214 <HAL_DMA_Abort_IT>
 800873c:	4603      	mov	r3, r0
 800873e:	2b00      	cmp	r3, #0
 8008740:	d016      	beq.n	8008770 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800874c:	4610      	mov	r0, r2
 800874e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008750:	e00e      	b.n	8008770 <HAL_UART_IRQHandler+0x228>
>>>>>>> flight_hardware
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 f994 	bl	8008b00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087d8:	e00a      	b.n	80087f0 <HAL_UART_IRQHandler+0x228>
=======
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 f994 	bl	8008a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008758:	e00a      	b.n	8008770 <HAL_UART_IRQHandler+0x228>
>>>>>>> flight_hardware
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 f990 	bl	8008b00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087e0:	e006      	b.n	80087f0 <HAL_UART_IRQHandler+0x228>
=======
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 f990 	bl	8008a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008760:	e006      	b.n	8008770 <HAL_UART_IRQHandler+0x228>
>>>>>>> flight_hardware
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 f98c 	bl	8008b00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80087ee:	e175      	b.n	8008adc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087f0:	bf00      	nop
    return;
 80087f2:	e173      	b.n	8008adc <HAL_UART_IRQHandler+0x514>
=======
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 f98c 	bl	8008a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800876e:	e175      	b.n	8008a5c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008770:	bf00      	nop
    return;
 8008772:	e173      	b.n	8008a5c <HAL_UART_IRQHandler+0x514>
>>>>>>> flight_hardware
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	f040 814f 	bne.w	8008a9c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80087fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008802:	f003 0310 	and.w	r3, r3, #16
 8008806:	2b00      	cmp	r3, #0
 8008808:	f000 8148 	beq.w	8008a9c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800880c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008810:	f003 0310 	and.w	r3, r3, #16
 8008814:	2b00      	cmp	r3, #0
 8008816:	f000 8141 	beq.w	8008a9c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800881a:	2300      	movs	r3, #0
 800881c:	60bb      	str	r3, [r7, #8]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	60bb      	str	r3, [r7, #8]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	60bb      	str	r3, [r7, #8]
 800882e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	695b      	ldr	r3, [r3, #20]
 8008836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800883a:	2b40      	cmp	r3, #64	; 0x40
 800883c:	f040 80b6 	bne.w	80089ac <HAL_UART_IRQHandler+0x3e4>
=======
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008778:	2b01      	cmp	r3, #1
 800877a:	f040 814f 	bne.w	8008a1c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800877e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008782:	f003 0310 	and.w	r3, r3, #16
 8008786:	2b00      	cmp	r3, #0
 8008788:	f000 8148 	beq.w	8008a1c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800878c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008790:	f003 0310 	and.w	r3, r3, #16
 8008794:	2b00      	cmp	r3, #0
 8008796:	f000 8141 	beq.w	8008a1c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800879a:	2300      	movs	r3, #0
 800879c:	60bb      	str	r3, [r7, #8]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	60bb      	str	r3, [r7, #8]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	60bb      	str	r3, [r7, #8]
 80087ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	695b      	ldr	r3, [r3, #20]
 80087b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ba:	2b40      	cmp	r3, #64	; 0x40
 80087bc:	f040 80b6 	bne.w	800892c <HAL_UART_IRQHandler+0x3e4>
>>>>>>> flight_hardware
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
<<<<<<< HEAD
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800884c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008850:	2b00      	cmp	r3, #0
 8008852:	f000 8145 	beq.w	8008ae0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800885a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800885e:	429a      	cmp	r2, r3
 8008860:	f080 813e 	bcs.w	8008ae0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800886a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008870:	69db      	ldr	r3, [r3, #28]
 8008872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008876:	f000 8088 	beq.w	800898a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	330c      	adds	r3, #12
 8008880:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008884:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008888:	e853 3f00 	ldrex	r3, [r3]
 800888c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008890:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008894:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008898:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	330c      	adds	r3, #12
 80088a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80088a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80088aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80088b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80088b6:	e841 2300 	strex	r3, r2, [r1]
 80088ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80088be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d1d9      	bne.n	800887a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	3314      	adds	r3, #20
 80088cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088d0:	e853 3f00 	ldrex	r3, [r3]
 80088d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80088d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088d8:	f023 0301 	bic.w	r3, r3, #1
 80088dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	3314      	adds	r3, #20
 80088e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80088ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80088ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80088f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80088f6:	e841 2300 	strex	r3, r2, [r1]
 80088fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80088fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d1e1      	bne.n	80088c6 <HAL_UART_IRQHandler+0x2fe>
=======
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80087cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	f000 8145 	beq.w	8008a60 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80087da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80087de:	429a      	cmp	r2, r3
 80087e0:	f080 813e 	bcs.w	8008a60 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80087ea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087f0:	69db      	ldr	r3, [r3, #28]
 80087f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087f6:	f000 8088 	beq.w	800890a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	330c      	adds	r3, #12
 8008800:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008804:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008808:	e853 3f00 	ldrex	r3, [r3]
 800880c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008810:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008818:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	330c      	adds	r3, #12
 8008822:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008826:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800882a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800882e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008832:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008836:	e841 2300 	strex	r3, r2, [r1]
 800883a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800883e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1d9      	bne.n	80087fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	3314      	adds	r3, #20
 800884c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800884e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008850:	e853 3f00 	ldrex	r3, [r3]
 8008854:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008856:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008858:	f023 0301 	bic.w	r3, r3, #1
 800885c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	3314      	adds	r3, #20
 8008866:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800886a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800886e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008870:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008872:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008876:	e841 2300 	strex	r3, r2, [r1]
 800887a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800887c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800887e:	2b00      	cmp	r3, #0
 8008880:	d1e1      	bne.n	8008846 <HAL_UART_IRQHandler+0x2fe>
>>>>>>> flight_hardware

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	3314      	adds	r3, #20
 8008908:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800890c:	e853 3f00 	ldrex	r3, [r3]
 8008910:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008912:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008914:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008918:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	3314      	adds	r3, #20
 8008922:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008926:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008928:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800892a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800892c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800892e:	e841 2300 	strex	r3, r2, [r1]
 8008932:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008934:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008936:	2b00      	cmp	r3, #0
 8008938:	d1e3      	bne.n	8008902 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2220      	movs	r2, #32
 800893e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	330c      	adds	r3, #12
 800894e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008952:	e853 3f00 	ldrex	r3, [r3]
 8008956:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800895a:	f023 0310 	bic.w	r3, r3, #16
 800895e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	330c      	adds	r3, #12
 8008968:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800896c:	65ba      	str	r2, [r7, #88]	; 0x58
 800896e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008970:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008972:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008974:	e841 2300 	strex	r3, r2, [r1]
 8008978:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800897a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800897c:	2b00      	cmp	r3, #0
 800897e:	d1e3      	bne.n	8008948 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008984:	4618      	mov	r0, r3
 8008986:	f7fb fc15 	bl	80041b4 <HAL_DMA_Abort>
=======
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	3314      	adds	r3, #20
 8008888:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800888a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800888c:	e853 3f00 	ldrex	r3, [r3]
 8008890:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008894:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008898:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	3314      	adds	r3, #20
 80088a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80088a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80088a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80088ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80088ae:	e841 2300 	strex	r3, r2, [r1]
 80088b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80088b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d1e3      	bne.n	8008882 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2220      	movs	r2, #32
 80088be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	330c      	adds	r3, #12
 80088ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088d2:	e853 3f00 	ldrex	r3, [r3]
 80088d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80088d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088da:	f023 0310 	bic.w	r3, r3, #16
 80088de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	330c      	adds	r3, #12
 80088e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80088ec:	65ba      	str	r2, [r7, #88]	; 0x58
 80088ee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80088f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80088f4:	e841 2300 	strex	r3, r2, [r1]
 80088f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80088fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d1e3      	bne.n	80088c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008904:	4618      	mov	r0, r3
 8008906:	f7fb fc15 	bl	8004134 <HAL_DMA_Abort>
>>>>>>> flight_hardware
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
<<<<<<< HEAD
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2202      	movs	r2, #2
 800898e:	635a      	str	r2, [r3, #52]	; 0x34
=======
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2202      	movs	r2, #2
 800890e:	635a      	str	r2, [r3, #52]	; 0x34
>>>>>>> flight_hardware
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
<<<<<<< HEAD
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008998:	b29b      	uxth	r3, r3
 800899a:	1ad3      	subs	r3, r2, r3
 800899c:	b29b      	uxth	r3, r3
 800899e:	4619      	mov	r1, r3
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 f8b7 	bl	8008b14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80089a6:	e09b      	b.n	8008ae0 <HAL_UART_IRQHandler+0x518>
 80089a8:	08008d19 	.word	0x08008d19
=======
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008918:	b29b      	uxth	r3, r3
 800891a:	1ad3      	subs	r3, r2, r3
 800891c:	b29b      	uxth	r3, r3
 800891e:	4619      	mov	r1, r3
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 f8b7 	bl	8008a94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008926:	e09b      	b.n	8008a60 <HAL_UART_IRQHandler+0x518>
 8008928:	08008c99 	.word	0x08008c99
>>>>>>> flight_hardware
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
<<<<<<< HEAD
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	1ad3      	subs	r3, r2, r3
 80089b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	f000 808e 	beq.w	8008ae4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80089c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	f000 8089 	beq.w	8008ae4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	330c      	adds	r3, #12
 80089d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089dc:	e853 3f00 	ldrex	r3, [r3]
 80089e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80089e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80089e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	330c      	adds	r3, #12
 80089f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80089f6:	647a      	str	r2, [r7, #68]	; 0x44
 80089f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80089fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089fe:	e841 2300 	strex	r3, r2, [r1]
 8008a02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d1e3      	bne.n	80089d2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	3314      	adds	r3, #20
 8008a10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a14:	e853 3f00 	ldrex	r3, [r3]
 8008a18:	623b      	str	r3, [r7, #32]
   return(result);
 8008a1a:	6a3b      	ldr	r3, [r7, #32]
 8008a1c:	f023 0301 	bic.w	r3, r3, #1
 8008a20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	3314      	adds	r3, #20
 8008a2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008a2e:	633a      	str	r2, [r7, #48]	; 0x30
 8008a30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a36:	e841 2300 	strex	r3, r2, [r1]
 8008a3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d1e3      	bne.n	8008a0a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2220      	movs	r2, #32
 8008a46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	330c      	adds	r3, #12
 8008a56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	e853 3f00 	ldrex	r3, [r3]
 8008a5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f023 0310 	bic.w	r3, r3, #16
 8008a66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	330c      	adds	r3, #12
 8008a70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008a74:	61fa      	str	r2, [r7, #28]
 8008a76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a78:	69b9      	ldr	r1, [r7, #24]
 8008a7a:	69fa      	ldr	r2, [r7, #28]
 8008a7c:	e841 2300 	strex	r3, r2, [r1]
 8008a80:	617b      	str	r3, [r7, #20]
   return(result);
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d1e3      	bne.n	8008a50 <HAL_UART_IRQHandler+0x488>
=======
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008934:	b29b      	uxth	r3, r3
 8008936:	1ad3      	subs	r3, r2, r3
 8008938:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008940:	b29b      	uxth	r3, r3
 8008942:	2b00      	cmp	r3, #0
 8008944:	f000 808e 	beq.w	8008a64 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008948:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800894c:	2b00      	cmp	r3, #0
 800894e:	f000 8089 	beq.w	8008a64 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	330c      	adds	r3, #12
 8008958:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800895c:	e853 3f00 	ldrex	r3, [r3]
 8008960:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008964:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008968:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	330c      	adds	r3, #12
 8008972:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008976:	647a      	str	r2, [r7, #68]	; 0x44
 8008978:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800897a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800897c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800897e:	e841 2300 	strex	r3, r2, [r1]
 8008982:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008986:	2b00      	cmp	r3, #0
 8008988:	d1e3      	bne.n	8008952 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	3314      	adds	r3, #20
 8008990:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008994:	e853 3f00 	ldrex	r3, [r3]
 8008998:	623b      	str	r3, [r7, #32]
   return(result);
 800899a:	6a3b      	ldr	r3, [r7, #32]
 800899c:	f023 0301 	bic.w	r3, r3, #1
 80089a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	3314      	adds	r3, #20
 80089aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80089ae:	633a      	str	r2, [r7, #48]	; 0x30
 80089b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80089b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089b6:	e841 2300 	strex	r3, r2, [r1]
 80089ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80089bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d1e3      	bne.n	800898a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2220      	movs	r2, #32
 80089c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	330c      	adds	r3, #12
 80089d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	e853 3f00 	ldrex	r3, [r3]
 80089de:	60fb      	str	r3, [r7, #12]
   return(result);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f023 0310 	bic.w	r3, r3, #16
 80089e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	330c      	adds	r3, #12
 80089f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80089f4:	61fa      	str	r2, [r7, #28]
 80089f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f8:	69b9      	ldr	r1, [r7, #24]
 80089fa:	69fa      	ldr	r2, [r7, #28]
 80089fc:	e841 2300 	strex	r3, r2, [r1]
 8008a00:	617b      	str	r3, [r7, #20]
   return(result);
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d1e3      	bne.n	80089d0 <HAL_UART_IRQHandler+0x488>
>>>>>>> flight_hardware

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
<<<<<<< HEAD
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2202      	movs	r2, #2
 8008a8c:	635a      	str	r2, [r3, #52]	; 0x34
=======
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2202      	movs	r2, #2
 8008a0c:	635a      	str	r2, [r3, #52]	; 0x34
>>>>>>> flight_hardware
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
<<<<<<< HEAD
 8008a8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008a92:	4619      	mov	r1, r3
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 f83d 	bl	8008b14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008a9a:	e023      	b.n	8008ae4 <HAL_UART_IRQHandler+0x51c>
=======
 8008a0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008a12:	4619      	mov	r1, r3
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 f83d 	bl	8008a94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008a1a:	e023      	b.n	8008a64 <HAL_UART_IRQHandler+0x51c>
>>>>>>> flight_hardware
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
<<<<<<< HEAD
 8008a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d009      	beq.n	8008abc <HAL_UART_IRQHandler+0x4f4>
 8008aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d003      	beq.n	8008abc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 f943 	bl	8008d40 <UART_Transmit_IT>
    return;
 8008aba:	e014      	b.n	8008ae6 <HAL_UART_IRQHandler+0x51e>
=======
 8008a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d009      	beq.n	8008a3c <HAL_UART_IRQHandler+0x4f4>
 8008a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d003      	beq.n	8008a3c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f000 f943 	bl	8008cc0 <UART_Transmit_IT>
    return;
 8008a3a:	e014      	b.n	8008a66 <HAL_UART_IRQHandler+0x51e>
>>>>>>> flight_hardware
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
<<<<<<< HEAD
 8008abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d00e      	beq.n	8008ae6 <HAL_UART_IRQHandler+0x51e>
 8008ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d008      	beq.n	8008ae6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 f983 	bl	8008de0 <UART_EndTransmit_IT>
    return;
 8008ada:	e004      	b.n	8008ae6 <HAL_UART_IRQHandler+0x51e>
    return;
 8008adc:	bf00      	nop
 8008ade:	e002      	b.n	8008ae6 <HAL_UART_IRQHandler+0x51e>
      return;
 8008ae0:	bf00      	nop
 8008ae2:	e000      	b.n	8008ae6 <HAL_UART_IRQHandler+0x51e>
      return;
 8008ae4:	bf00      	nop
  }
}
 8008ae6:	37e8      	adds	r7, #232	; 0xe8
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <HAL_UART_TxCpltCallback>:
=======
 8008a3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00e      	beq.n	8008a66 <HAL_UART_IRQHandler+0x51e>
 8008a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d008      	beq.n	8008a66 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 f983 	bl	8008d60 <UART_EndTransmit_IT>
    return;
 8008a5a:	e004      	b.n	8008a66 <HAL_UART_IRQHandler+0x51e>
    return;
 8008a5c:	bf00      	nop
 8008a5e:	e002      	b.n	8008a66 <HAL_UART_IRQHandler+0x51e>
      return;
 8008a60:	bf00      	nop
 8008a62:	e000      	b.n	8008a66 <HAL_UART_IRQHandler+0x51e>
      return;
 8008a64:	bf00      	nop
  }
}
 8008a66:	37e8      	adds	r7, #232	; 0xe8
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <HAL_UART_TxCpltCallback>:
>>>>>>> flight_hardware
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8008aec:	b480      	push	{r7}
 8008aee:	b083      	sub	sp, #12
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
=======
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
>>>>>>> flight_hardware
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8008af4:	bf00      	nop
 8008af6:	370c      	adds	r7, #12
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr

08008b00 <HAL_UART_ErrorCallback>:
=======
 8008a74:	bf00      	nop
 8008a76:	370c      	adds	r7, #12
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr

08008a80 <HAL_UART_ErrorCallback>:
>>>>>>> flight_hardware
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8008b00:	b480      	push	{r7}
 8008b02:	b083      	sub	sp, #12
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
=======
 8008a80:	b480      	push	{r7}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
>>>>>>> flight_hardware
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8008b08:	bf00      	nop
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <HAL_UARTEx_RxEventCallback>:
=======
 8008a88:	bf00      	nop
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <HAL_UARTEx_RxEventCallback>:
>>>>>>> flight_hardware
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
<<<<<<< HEAD
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	807b      	strh	r3, [r7, #2]
=======
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	460b      	mov	r3, r1
 8008a9e:	807b      	strh	r3, [r7, #2]
>>>>>>> flight_hardware
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8008b20:	bf00      	nop
 8008b22:	370c      	adds	r7, #12
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr

08008b2c <UART_WaitOnFlagUntilTimeout>:
=======
 8008aa0:	bf00      	nop
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <UART_WaitOnFlagUntilTimeout>:
>>>>>>> flight_hardware
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< HEAD
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b086      	sub	sp, #24
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	60f8      	str	r0, [r7, #12]
 8008b34:	60b9      	str	r1, [r7, #8]
 8008b36:	603b      	str	r3, [r7, #0]
 8008b38:	4613      	mov	r3, r2
 8008b3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b3c:	e03b      	b.n	8008bb6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b3e:	6a3b      	ldr	r3, [r7, #32]
 8008b40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b44:	d037      	beq.n	8008bb6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b46:	f7fa fa85 	bl	8003054 <HAL_GetTick>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	1ad3      	subs	r3, r2, r3
 8008b50:	6a3a      	ldr	r2, [r7, #32]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d302      	bcc.n	8008b5c <UART_WaitOnFlagUntilTimeout+0x30>
 8008b56:	6a3b      	ldr	r3, [r7, #32]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d101      	bne.n	8008b60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008b5c:	2303      	movs	r3, #3
 8008b5e:	e03a      	b.n	8008bd6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	f003 0304 	and.w	r3, r3, #4
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d023      	beq.n	8008bb6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	2b80      	cmp	r3, #128	; 0x80
 8008b72:	d020      	beq.n	8008bb6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	2b40      	cmp	r3, #64	; 0x40
 8008b78:	d01d      	beq.n	8008bb6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f003 0308 	and.w	r3, r3, #8
 8008b84:	2b08      	cmp	r3, #8
 8008b86:	d116      	bne.n	8008bb6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008b88:	2300      	movs	r3, #0
 8008b8a:	617b      	str	r3, [r7, #20]
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	617b      	str	r3, [r7, #20]
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	617b      	str	r3, [r7, #20]
 8008b9c:	697b      	ldr	r3, [r7, #20]
=======
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b086      	sub	sp, #24
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	60b9      	str	r1, [r7, #8]
 8008ab6:	603b      	str	r3, [r7, #0]
 8008ab8:	4613      	mov	r3, r2
 8008aba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008abc:	e03b      	b.n	8008b36 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008abe:	6a3b      	ldr	r3, [r7, #32]
 8008ac0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ac4:	d037      	beq.n	8008b36 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ac6:	f7fa fa85 	bl	8002fd4 <HAL_GetTick>
 8008aca:	4602      	mov	r2, r0
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	1ad3      	subs	r3, r2, r3
 8008ad0:	6a3a      	ldr	r2, [r7, #32]
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d302      	bcc.n	8008adc <UART_WaitOnFlagUntilTimeout+0x30>
 8008ad6:	6a3b      	ldr	r3, [r7, #32]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d101      	bne.n	8008ae0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008adc:	2303      	movs	r3, #3
 8008ade:	e03a      	b.n	8008b56 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	68db      	ldr	r3, [r3, #12]
 8008ae6:	f003 0304 	and.w	r3, r3, #4
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d023      	beq.n	8008b36 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	2b80      	cmp	r3, #128	; 0x80
 8008af2:	d020      	beq.n	8008b36 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	2b40      	cmp	r3, #64	; 0x40
 8008af8:	d01d      	beq.n	8008b36 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f003 0308 	and.w	r3, r3, #8
 8008b04:	2b08      	cmp	r3, #8
 8008b06:	d116      	bne.n	8008b36 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008b08:	2300      	movs	r3, #0
 8008b0a:	617b      	str	r3, [r7, #20]
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	617b      	str	r3, [r7, #20]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	617b      	str	r3, [r7, #20]
 8008b1c:	697b      	ldr	r3, [r7, #20]
>>>>>>> flight_hardware

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
<<<<<<< HEAD
 8008b9e:	68f8      	ldr	r0, [r7, #12]
 8008ba0:	f000 f857 	bl	8008c52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2208      	movs	r2, #8
 8008ba8:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2200      	movs	r2, #0
 8008bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e00f      	b.n	8008bd6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	4013      	ands	r3, r2
 8008bc0:	68ba      	ldr	r2, [r7, #8]
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	bf0c      	ite	eq
 8008bc6:	2301      	moveq	r3, #1
 8008bc8:	2300      	movne	r3, #0
 8008bca:	b2db      	uxtb	r3, r3
 8008bcc:	461a      	mov	r2, r3
 8008bce:	79fb      	ldrb	r3, [r7, #7]
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d0b4      	beq.n	8008b3e <UART_WaitOnFlagUntilTimeout+0x12>
=======
 8008b1e:	68f8      	ldr	r0, [r7, #12]
 8008b20:	f000 f857 	bl	8008bd2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2208      	movs	r2, #8
 8008b28:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008b32:	2301      	movs	r3, #1
 8008b34:	e00f      	b.n	8008b56 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	4013      	ands	r3, r2
 8008b40:	68ba      	ldr	r2, [r7, #8]
 8008b42:	429a      	cmp	r2, r3
 8008b44:	bf0c      	ite	eq
 8008b46:	2301      	moveq	r3, #1
 8008b48:	2300      	movne	r3, #0
 8008b4a:	b2db      	uxtb	r3, r3
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	79fb      	ldrb	r3, [r7, #7]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d0b4      	beq.n	8008abe <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> flight_hardware
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8008bd4:	2300      	movs	r3, #0
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3718      	adds	r7, #24
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}

08008bde <UART_Start_Receive_IT>:
=======
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3718      	adds	r7, #24
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}

08008b5e <UART_Start_Receive_IT>:
>>>>>>> flight_hardware
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 8008bde:	b480      	push	{r7}
 8008be0:	b085      	sub	sp, #20
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	60f8      	str	r0, [r7, #12]
 8008be6:	60b9      	str	r1, [r7, #8]
 8008be8:	4613      	mov	r3, r2
 8008bea:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	68ba      	ldr	r2, [r7, #8]
 8008bf0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	88fa      	ldrh	r2, [r7, #6]
 8008bf6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	88fa      	ldrh	r2, [r7, #6]
 8008bfc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2200      	movs	r2, #0
 8008c02:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2222      	movs	r2, #34	; 0x22
 8008c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	691b      	ldr	r3, [r3, #16]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d007      	beq.n	8008c24 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	68da      	ldr	r2, [r3, #12]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c22:	60da      	str	r2, [r3, #12]
=======
 8008b5e:	b480      	push	{r7}
 8008b60:	b085      	sub	sp, #20
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	60f8      	str	r0, [r7, #12]
 8008b66:	60b9      	str	r1, [r7, #8]
 8008b68:	4613      	mov	r3, r2
 8008b6a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	68ba      	ldr	r2, [r7, #8]
 8008b70:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	88fa      	ldrh	r2, [r7, #6]
 8008b76:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	88fa      	ldrh	r2, [r7, #6]
 8008b7c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2200      	movs	r2, #0
 8008b82:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2222      	movs	r2, #34	; 0x22
 8008b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	691b      	ldr	r3, [r3, #16]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d007      	beq.n	8008ba4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	68da      	ldr	r2, [r3, #12]
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ba2:	60da      	str	r2, [r3, #12]
>>>>>>> flight_hardware
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
<<<<<<< HEAD
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	695a      	ldr	r2, [r3, #20]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f042 0201 	orr.w	r2, r2, #1
 8008c32:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	68da      	ldr	r2, [r3, #12]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f042 0220 	orr.w	r2, r2, #32
 8008c42:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008c44:	2300      	movs	r3, #0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3714      	adds	r7, #20
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr

08008c52 <UART_EndRxTransfer>:
=======
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	695a      	ldr	r2, [r3, #20]
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f042 0201 	orr.w	r2, r2, #1
 8008bb2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	68da      	ldr	r2, [r3, #12]
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f042 0220 	orr.w	r2, r2, #32
 8008bc2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008bc4:	2300      	movs	r3, #0
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3714      	adds	r7, #20
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr

08008bd2 <UART_EndRxTransfer>:
>>>>>>> flight_hardware
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8008c52:	b480      	push	{r7}
 8008c54:	b095      	sub	sp, #84	; 0x54
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	330c      	adds	r3, #12
 8008c60:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c64:	e853 3f00 	ldrex	r3, [r3]
 8008c68:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	330c      	adds	r3, #12
 8008c78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c7a:	643a      	str	r2, [r7, #64]	; 0x40
 8008c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c82:	e841 2300 	strex	r3, r2, [r1]
 8008c86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d1e5      	bne.n	8008c5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	3314      	adds	r3, #20
 8008c94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c96:	6a3b      	ldr	r3, [r7, #32]
 8008c98:	e853 3f00 	ldrex	r3, [r3]
 8008c9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c9e:	69fb      	ldr	r3, [r7, #28]
 8008ca0:	f023 0301 	bic.w	r3, r3, #1
 8008ca4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	3314      	adds	r3, #20
 8008cac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008cb0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cb6:	e841 2300 	strex	r3, r2, [r1]
 8008cba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d1e5      	bne.n	8008c8e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	d119      	bne.n	8008cfe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	330c      	adds	r3, #12
 8008cd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	e853 3f00 	ldrex	r3, [r3]
 8008cd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	f023 0310 	bic.w	r3, r3, #16
 8008ce0:	647b      	str	r3, [r7, #68]	; 0x44
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	330c      	adds	r3, #12
 8008ce8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008cea:	61ba      	str	r2, [r7, #24]
 8008cec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cee:	6979      	ldr	r1, [r7, #20]
 8008cf0:	69ba      	ldr	r2, [r7, #24]
 8008cf2:	e841 2300 	strex	r3, r2, [r1]
 8008cf6:	613b      	str	r3, [r7, #16]
   return(result);
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d1e5      	bne.n	8008cca <UART_EndRxTransfer+0x78>
=======
 8008bd2:	b480      	push	{r7}
 8008bd4:	b095      	sub	sp, #84	; 0x54
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	330c      	adds	r3, #12
 8008be0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008be4:	e853 3f00 	ldrex	r3, [r3]
 8008be8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008bf0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	330c      	adds	r3, #12
 8008bf8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008bfa:	643a      	str	r2, [r7, #64]	; 0x40
 8008bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bfe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c02:	e841 2300 	strex	r3, r2, [r1]
 8008c06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d1e5      	bne.n	8008bda <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	3314      	adds	r3, #20
 8008c14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c16:	6a3b      	ldr	r3, [r7, #32]
 8008c18:	e853 3f00 	ldrex	r3, [r3]
 8008c1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c1e:	69fb      	ldr	r3, [r7, #28]
 8008c20:	f023 0301 	bic.w	r3, r3, #1
 8008c24:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	3314      	adds	r3, #20
 8008c2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c36:	e841 2300 	strex	r3, r2, [r1]
 8008c3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d1e5      	bne.n	8008c0e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d119      	bne.n	8008c7e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	330c      	adds	r3, #12
 8008c50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	e853 3f00 	ldrex	r3, [r3]
 8008c58:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	f023 0310 	bic.w	r3, r3, #16
 8008c60:	647b      	str	r3, [r7, #68]	; 0x44
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	330c      	adds	r3, #12
 8008c68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c6a:	61ba      	str	r2, [r7, #24]
 8008c6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c6e:	6979      	ldr	r1, [r7, #20]
 8008c70:	69ba      	ldr	r2, [r7, #24]
 8008c72:	e841 2300 	strex	r3, r2, [r1]
 8008c76:	613b      	str	r3, [r7, #16]
   return(result);
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d1e5      	bne.n	8008c4a <UART_EndRxTransfer+0x78>
>>>>>>> flight_hardware
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2220      	movs	r2, #32
 8008d02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008d0c:	bf00      	nop
 8008d0e:	3754      	adds	r7, #84	; 0x54
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <UART_DMAAbortOnError>:
=======
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2220      	movs	r2, #32
 8008c82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008c8c:	bf00      	nop
 8008c8e:	3754      	adds	r7, #84	; 0x54
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr

08008c98 <UART_DMAAbortOnError>:
>>>>>>> flight_hardware
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b084      	sub	sp, #16
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	84da      	strh	r2, [r3, #38]	; 0x26
=======
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	84da      	strh	r2, [r3, #38]	; 0x26
>>>>>>> flight_hardware
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8008d32:	68f8      	ldr	r0, [r7, #12]
 8008d34:	f7ff fee4 	bl	8008b00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d38:	bf00      	nop
 8008d3a:	3710      	adds	r7, #16
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <UART_Transmit_IT>:
=======
 8008cb2:	68f8      	ldr	r0, [r7, #12]
 8008cb4:	f7ff fee4 	bl	8008a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cb8:	bf00      	nop
 8008cba:	3710      	adds	r7, #16
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <UART_Transmit_IT>:
>>>>>>> flight_hardware
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8008d40:	b480      	push	{r7}
 8008d42:	b085      	sub	sp, #20
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
=======
 8008cc0:	b480      	push	{r7}
 8008cc2:	b085      	sub	sp, #20
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
>>>>>>> flight_hardware
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
<<<<<<< HEAD
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	2b21      	cmp	r3, #33	; 0x21
 8008d52:	d13e      	bne.n	8008dd2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	689b      	ldr	r3, [r3, #8]
 8008d58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d5c:	d114      	bne.n	8008d88 <UART_Transmit_IT+0x48>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	691b      	ldr	r3, [r3, #16]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d110      	bne.n	8008d88 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6a1b      	ldr	r3, [r3, #32]
 8008d6a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	881b      	ldrh	r3, [r3, #0]
 8008d70:	461a      	mov	r2, r3
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d7a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6a1b      	ldr	r3, [r3, #32]
 8008d80:	1c9a      	adds	r2, r3, #2
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	621a      	str	r2, [r3, #32]
 8008d86:	e008      	b.n	8008d9a <UART_Transmit_IT+0x5a>
=======
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	2b21      	cmp	r3, #33	; 0x21
 8008cd2:	d13e      	bne.n	8008d52 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cdc:	d114      	bne.n	8008d08 <UART_Transmit_IT+0x48>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	691b      	ldr	r3, [r3, #16]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d110      	bne.n	8008d08 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6a1b      	ldr	r3, [r3, #32]
 8008cea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	881b      	ldrh	r3, [r3, #0]
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008cfa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6a1b      	ldr	r3, [r3, #32]
 8008d00:	1c9a      	adds	r2, r3, #2
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	621a      	str	r2, [r3, #32]
 8008d06:	e008      	b.n	8008d1a <UART_Transmit_IT+0x5a>
>>>>>>> flight_hardware
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
<<<<<<< HEAD
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6a1b      	ldr	r3, [r3, #32]
 8008d8c:	1c59      	adds	r1, r3, #1
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	6211      	str	r1, [r2, #32]
 8008d92:	781a      	ldrb	r2, [r3, #0]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	3b01      	subs	r3, #1
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	4619      	mov	r1, r3
 8008da8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d10f      	bne.n	8008dce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	68da      	ldr	r2, [r3, #12]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008dbc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	68da      	ldr	r2, [r3, #12]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008dcc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	e000      	b.n	8008dd4 <UART_Transmit_IT+0x94>
=======
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6a1b      	ldr	r3, [r3, #32]
 8008d0c:	1c59      	adds	r1, r3, #1
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	6211      	str	r1, [r2, #32]
 8008d12:	781a      	ldrb	r2, [r3, #0]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	3b01      	subs	r3, #1
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	687a      	ldr	r2, [r7, #4]
 8008d26:	4619      	mov	r1, r3
 8008d28:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d10f      	bne.n	8008d4e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	68da      	ldr	r2, [r3, #12]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d3c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	68da      	ldr	r2, [r3, #12]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d4c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	e000      	b.n	8008d54 <UART_Transmit_IT+0x94>
>>>>>>> flight_hardware
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8008dd2:	2302      	movs	r3, #2
  }
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3714      	adds	r7, #20
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dde:	4770      	bx	lr

08008de0 <UART_EndTransmit_IT>:
=======
 8008d52:	2302      	movs	r3, #2
  }
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3714      	adds	r7, #20
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr

08008d60 <UART_EndTransmit_IT>:
>>>>>>> flight_hardware
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	68da      	ldr	r2, [r3, #12]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008df6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2220      	movs	r2, #32
 8008dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
=======
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	68da      	ldr	r2, [r3, #12]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d76:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2220      	movs	r2, #32
 8008d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
>>>>>>> flight_hardware
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
<<<<<<< HEAD
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f7ff fe73 	bl	8008aec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008e06:	2300      	movs	r3, #0
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3708      	adds	r7, #8
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <UART_Receive_IT>:
=======
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f7ff fe73 	bl	8008a6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008d86:	2300      	movs	r3, #0
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3708      	adds	r7, #8
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <UART_Receive_IT>:
>>>>>>> flight_hardware
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b08c      	sub	sp, #48	; 0x30
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
=======
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b08c      	sub	sp, #48	; 0x30
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
>>>>>>> flight_hardware
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
<<<<<<< HEAD
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008e1e:	b2db      	uxtb	r3, r3
 8008e20:	2b22      	cmp	r3, #34	; 0x22
 8008e22:	f040 80ae 	bne.w	8008f82 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	689b      	ldr	r3, [r3, #8]
 8008e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e2e:	d117      	bne.n	8008e60 <UART_Receive_IT+0x50>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	691b      	ldr	r3, [r3, #16]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d113      	bne.n	8008e60 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e40:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e4e:	b29a      	uxth	r2, r3
 8008e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e52:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e58:	1c9a      	adds	r2, r3, #2
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	629a      	str	r2, [r3, #40]	; 0x28
 8008e5e:	e026      	b.n	8008eae <UART_Receive_IT+0x9e>
=======
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d9e:	b2db      	uxtb	r3, r3
 8008da0:	2b22      	cmp	r3, #34	; 0x22
 8008da2:	f040 80ae 	bne.w	8008f02 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dae:	d117      	bne.n	8008de0 <UART_Receive_IT+0x50>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	691b      	ldr	r3, [r3, #16]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d113      	bne.n	8008de0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008db8:	2300      	movs	r3, #0
 8008dba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dc0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dce:	b29a      	uxth	r2, r3
 8008dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd8:	1c9a      	adds	r2, r3, #2
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	629a      	str	r2, [r3, #40]	; 0x28
 8008dde:	e026      	b.n	8008e2e <UART_Receive_IT+0x9e>
>>>>>>> flight_hardware
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
<<<<<<< HEAD
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e64:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008e66:	2300      	movs	r3, #0
 8008e68:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e72:	d007      	beq.n	8008e84 <UART_Receive_IT+0x74>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d10a      	bne.n	8008e92 <UART_Receive_IT+0x82>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	691b      	ldr	r3, [r3, #16]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d106      	bne.n	8008e92 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	b2da      	uxtb	r2, r3
 8008e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e8e:	701a      	strb	r2, [r3, #0]
 8008e90:	e008      	b.n	8008ea4 <UART_Receive_IT+0x94>
=======
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008de4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008de6:	2300      	movs	r3, #0
 8008de8:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	689b      	ldr	r3, [r3, #8]
 8008dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008df2:	d007      	beq.n	8008e04 <UART_Receive_IT+0x74>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d10a      	bne.n	8008e12 <UART_Receive_IT+0x82>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	691b      	ldr	r3, [r3, #16]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d106      	bne.n	8008e12 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	b2da      	uxtb	r2, r3
 8008e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e0e:	701a      	strb	r2, [r3, #0]
 8008e10:	e008      	b.n	8008e24 <UART_Receive_IT+0x94>
>>>>>>> flight_hardware
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
<<<<<<< HEAD
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	b2db      	uxtb	r3, r3
 8008e9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e9e:	b2da      	uxtb	r2, r3
 8008ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ea8:	1c5a      	adds	r2, r3, #1
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	3b01      	subs	r3, #1
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	4619      	mov	r1, r3
 8008ebc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d15d      	bne.n	8008f7e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	68da      	ldr	r2, [r3, #12]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f022 0220 	bic.w	r2, r2, #32
 8008ed0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	68da      	ldr	r2, [r3, #12]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ee0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	695a      	ldr	r2, [r3, #20]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f022 0201 	bic.w	r2, r2, #1
 8008ef0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2220      	movs	r2, #32
 8008ef6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	635a      	str	r2, [r3, #52]	; 0x34
=======
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e1e:	b2da      	uxtb	r2, r3
 8008e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e22:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e28:	1c5a      	adds	r2, r3, #1
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	3b01      	subs	r3, #1
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d15d      	bne.n	8008efe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	68da      	ldr	r2, [r3, #12]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f022 0220 	bic.w	r2, r2, #32
 8008e50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	68da      	ldr	r2, [r3, #12]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008e60:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	695a      	ldr	r2, [r3, #20]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f022 0201 	bic.w	r2, r2, #1
 8008e70:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2220      	movs	r2, #32
 8008e76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	635a      	str	r2, [r3, #52]	; 0x34
>>>>>>> flight_hardware

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	d135      	bne.n	8008f74 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	330c      	adds	r3, #12
 8008f14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	e853 3f00 	ldrex	r3, [r3]
 8008f1c:	613b      	str	r3, [r7, #16]
   return(result);
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	f023 0310 	bic.w	r3, r3, #16
 8008f24:	627b      	str	r3, [r7, #36]	; 0x24
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	330c      	adds	r3, #12
 8008f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f2e:	623a      	str	r2, [r7, #32]
 8008f30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f32:	69f9      	ldr	r1, [r7, #28]
 8008f34:	6a3a      	ldr	r2, [r7, #32]
 8008f36:	e841 2300 	strex	r3, r2, [r1]
 8008f3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f3c:	69bb      	ldr	r3, [r7, #24]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d1e5      	bne.n	8008f0e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f003 0310 	and.w	r3, r3, #16
 8008f4c:	2b10      	cmp	r3, #16
 8008f4e:	d10a      	bne.n	8008f66 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008f50:	2300      	movs	r3, #0
 8008f52:	60fb      	str	r3, [r7, #12]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	60fb      	str	r3, [r7, #12]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	60fb      	str	r3, [r7, #12]
 8008f64:	68fb      	ldr	r3, [r7, #12]
=======
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d135      	bne.n	8008ef4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	330c      	adds	r3, #12
 8008e94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	e853 3f00 	ldrex	r3, [r3]
 8008e9c:	613b      	str	r3, [r7, #16]
   return(result);
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	f023 0310 	bic.w	r3, r3, #16
 8008ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	330c      	adds	r3, #12
 8008eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eae:	623a      	str	r2, [r7, #32]
 8008eb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb2:	69f9      	ldr	r1, [r7, #28]
 8008eb4:	6a3a      	ldr	r2, [r7, #32]
 8008eb6:	e841 2300 	strex	r3, r2, [r1]
 8008eba:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d1e5      	bne.n	8008e8e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f003 0310 	and.w	r3, r3, #16
 8008ecc:	2b10      	cmp	r3, #16
 8008ece:	d10a      	bne.n	8008ee6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	60fb      	str	r3, [r7, #12]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	60fb      	str	r3, [r7, #12]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	60fb      	str	r3, [r7, #12]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
>>>>>>> flight_hardware
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< HEAD
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f7ff fdd1 	bl	8008b14 <HAL_UARTEx_RxEventCallback>
 8008f72:	e002      	b.n	8008f7a <UART_Receive_IT+0x16a>
=======
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008eea:	4619      	mov	r1, r3
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f7ff fdd1 	bl	8008a94 <HAL_UARTEx_RxEventCallback>
 8008ef2:	e002      	b.n	8008efa <UART_Receive_IT+0x16a>
>>>>>>> flight_hardware
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
<<<<<<< HEAD
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f7f9 ff7b 	bl	8002e70 <HAL_UART_RxCpltCallback>
=======
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f7f9 ff7b 	bl	8002df0 <HAL_UART_RxCpltCallback>
>>>>>>> flight_hardware
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
<<<<<<< HEAD
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	e002      	b.n	8008f84 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	e000      	b.n	8008f84 <UART_Receive_IT+0x174>
=======
 8008efa:	2300      	movs	r3, #0
 8008efc:	e002      	b.n	8008f04 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008efe:	2300      	movs	r3, #0
 8008f00:	e000      	b.n	8008f04 <UART_Receive_IT+0x174>
>>>>>>> flight_hardware
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8008f82:	2302      	movs	r3, #2
  }
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3730      	adds	r7, #48	; 0x30
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <UART_SetConfig>:
=======
 8008f02:	2302      	movs	r3, #2
  }
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3730      	adds	r7, #48	; 0x30
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <UART_SetConfig>:
>>>>>>> flight_hardware
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8008f8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f90:	b0c0      	sub	sp, #256	; 0x100
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
=======
 8008f0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f10:	b0c0      	sub	sp, #256	; 0x100
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
>>>>>>> flight_hardware
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
 8008f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	691b      	ldr	r3, [r3, #16]
 8008fa0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fa8:	68d9      	ldr	r1, [r3, #12]
 8008faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	ea40 0301 	orr.w	r3, r0, r1
 8008fb4:	6113      	str	r3, [r2, #16]
=======
 8008f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	691b      	ldr	r3, [r3, #16]
 8008f20:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f28:	68d9      	ldr	r1, [r3, #12]
 8008f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	ea40 0301 	orr.w	r3, r0, r1
 8008f34:	6113      	str	r3, [r2, #16]
>>>>>>> flight_hardware
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
<<<<<<< HEAD
 8008fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fba:	689a      	ldr	r2, [r3, #8]
 8008fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fc0:	691b      	ldr	r3, [r3, #16]
 8008fc2:	431a      	orrs	r2, r3
 8008fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fc8:	695b      	ldr	r3, [r3, #20]
 8008fca:	431a      	orrs	r2, r3
 8008fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fd0:	69db      	ldr	r3, [r3, #28]
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	68db      	ldr	r3, [r3, #12]
 8008fe0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008fe4:	f021 010c 	bic.w	r1, r1, #12
 8008fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fec:	681a      	ldr	r2, [r3, #0]
 8008fee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008ff2:	430b      	orrs	r3, r1
 8008ff4:	60d3      	str	r3, [r2, #12]
=======
 8008f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f3a:	689a      	ldr	r2, [r3, #8]
 8008f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f40:	691b      	ldr	r3, [r3, #16]
 8008f42:	431a      	orrs	r2, r3
 8008f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f48:	695b      	ldr	r3, [r3, #20]
 8008f4a:	431a      	orrs	r2, r3
 8008f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f50:	69db      	ldr	r3, [r3, #28]
 8008f52:	4313      	orrs	r3, r2
 8008f54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008f64:	f021 010c 	bic.w	r1, r1, #12
 8008f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008f72:	430b      	orrs	r3, r1
 8008f74:	60d3      	str	r3, [r2, #12]
>>>>>>> flight_hardware
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
<<<<<<< HEAD
 8008ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	695b      	ldr	r3, [r3, #20]
 8008ffe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009006:	6999      	ldr	r1, [r3, #24]
 8009008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	ea40 0301 	orr.w	r3, r0, r1
 8009012:	6153      	str	r3, [r2, #20]
=======
 8008f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	695b      	ldr	r3, [r3, #20]
 8008f7e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f86:	6999      	ldr	r1, [r3, #24]
 8008f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	ea40 0301 	orr.w	r3, r0, r1
 8008f92:	6153      	str	r3, [r2, #20]
>>>>>>> flight_hardware
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
<<<<<<< HEAD
 8009014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	4b8f      	ldr	r3, [pc, #572]	; (8009258 <UART_SetConfig+0x2cc>)
 800901c:	429a      	cmp	r2, r3
 800901e:	d005      	beq.n	800902c <UART_SetConfig+0xa0>
 8009020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	4b8d      	ldr	r3, [pc, #564]	; (800925c <UART_SetConfig+0x2d0>)
 8009028:	429a      	cmp	r2, r3
 800902a:	d104      	bne.n	8009036 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800902c:	f7fd fab0 	bl	8006590 <HAL_RCC_GetPCLK2Freq>
 8009030:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009034:	e003      	b.n	800903e <UART_SetConfig+0xb2>
=======
 8008f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	4b8f      	ldr	r3, [pc, #572]	; (80091d8 <UART_SetConfig+0x2cc>)
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d005      	beq.n	8008fac <UART_SetConfig+0xa0>
 8008fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	4b8d      	ldr	r3, [pc, #564]	; (80091dc <UART_SetConfig+0x2d0>)
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d104      	bne.n	8008fb6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008fac:	f7fd fab0 	bl	8006510 <HAL_RCC_GetPCLK2Freq>
 8008fb0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008fb4:	e003      	b.n	8008fbe <UART_SetConfig+0xb2>
>>>>>>> flight_hardware
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
<<<<<<< HEAD
 8009036:	f7fd fa97 	bl	8006568 <HAL_RCC_GetPCLK1Freq>
 800903a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800903e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009042:	69db      	ldr	r3, [r3, #28]
 8009044:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009048:	f040 810c 	bne.w	8009264 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800904c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009050:	2200      	movs	r2, #0
 8009052:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009056:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800905a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800905e:	4622      	mov	r2, r4
 8009060:	462b      	mov	r3, r5
 8009062:	1891      	adds	r1, r2, r2
 8009064:	65b9      	str	r1, [r7, #88]	; 0x58
 8009066:	415b      	adcs	r3, r3
 8009068:	65fb      	str	r3, [r7, #92]	; 0x5c
 800906a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800906e:	4621      	mov	r1, r4
 8009070:	eb12 0801 	adds.w	r8, r2, r1
 8009074:	4629      	mov	r1, r5
 8009076:	eb43 0901 	adc.w	r9, r3, r1
 800907a:	f04f 0200 	mov.w	r2, #0
 800907e:	f04f 0300 	mov.w	r3, #0
 8009082:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009086:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800908a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800908e:	4690      	mov	r8, r2
 8009090:	4699      	mov	r9, r3
 8009092:	4623      	mov	r3, r4
 8009094:	eb18 0303 	adds.w	r3, r8, r3
 8009098:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800909c:	462b      	mov	r3, r5
 800909e:	eb49 0303 	adc.w	r3, r9, r3
 80090a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80090a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80090b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80090b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80090ba:	460b      	mov	r3, r1
 80090bc:	18db      	adds	r3, r3, r3
 80090be:	653b      	str	r3, [r7, #80]	; 0x50
 80090c0:	4613      	mov	r3, r2
 80090c2:	eb42 0303 	adc.w	r3, r2, r3
 80090c6:	657b      	str	r3, [r7, #84]	; 0x54
 80090c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80090cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80090d0:	f7f7 f894 	bl	80001fc <__aeabi_uldivmod>
 80090d4:	4602      	mov	r2, r0
 80090d6:	460b      	mov	r3, r1
 80090d8:	4b61      	ldr	r3, [pc, #388]	; (8009260 <UART_SetConfig+0x2d4>)
 80090da:	fba3 2302 	umull	r2, r3, r3, r2
 80090de:	095b      	lsrs	r3, r3, #5
 80090e0:	011c      	lsls	r4, r3, #4
 80090e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090e6:	2200      	movs	r2, #0
 80090e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80090ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80090f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80090f4:	4642      	mov	r2, r8
 80090f6:	464b      	mov	r3, r9
 80090f8:	1891      	adds	r1, r2, r2
 80090fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80090fc:	415b      	adcs	r3, r3
 80090fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009100:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009104:	4641      	mov	r1, r8
 8009106:	eb12 0a01 	adds.w	sl, r2, r1
 800910a:	4649      	mov	r1, r9
 800910c:	eb43 0b01 	adc.w	fp, r3, r1
 8009110:	f04f 0200 	mov.w	r2, #0
 8009114:	f04f 0300 	mov.w	r3, #0
 8009118:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800911c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009120:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009124:	4692      	mov	sl, r2
 8009126:	469b      	mov	fp, r3
 8009128:	4643      	mov	r3, r8
 800912a:	eb1a 0303 	adds.w	r3, sl, r3
 800912e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009132:	464b      	mov	r3, r9
 8009134:	eb4b 0303 	adc.w	r3, fp, r3
 8009138:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800913c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009148:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800914c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009150:	460b      	mov	r3, r1
 8009152:	18db      	adds	r3, r3, r3
 8009154:	643b      	str	r3, [r7, #64]	; 0x40
 8009156:	4613      	mov	r3, r2
 8009158:	eb42 0303 	adc.w	r3, r2, r3
 800915c:	647b      	str	r3, [r7, #68]	; 0x44
 800915e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009162:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009166:	f7f7 f849 	bl	80001fc <__aeabi_uldivmod>
 800916a:	4602      	mov	r2, r0
 800916c:	460b      	mov	r3, r1
 800916e:	4611      	mov	r1, r2
 8009170:	4b3b      	ldr	r3, [pc, #236]	; (8009260 <UART_SetConfig+0x2d4>)
 8009172:	fba3 2301 	umull	r2, r3, r3, r1
 8009176:	095b      	lsrs	r3, r3, #5
 8009178:	2264      	movs	r2, #100	; 0x64
 800917a:	fb02 f303 	mul.w	r3, r2, r3
 800917e:	1acb      	subs	r3, r1, r3
 8009180:	00db      	lsls	r3, r3, #3
 8009182:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009186:	4b36      	ldr	r3, [pc, #216]	; (8009260 <UART_SetConfig+0x2d4>)
 8009188:	fba3 2302 	umull	r2, r3, r3, r2
 800918c:	095b      	lsrs	r3, r3, #5
 800918e:	005b      	lsls	r3, r3, #1
 8009190:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009194:	441c      	add	r4, r3
 8009196:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800919a:	2200      	movs	r2, #0
 800919c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80091a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80091a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80091a8:	4642      	mov	r2, r8
 80091aa:	464b      	mov	r3, r9
 80091ac:	1891      	adds	r1, r2, r2
 80091ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80091b0:	415b      	adcs	r3, r3
 80091b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80091b8:	4641      	mov	r1, r8
 80091ba:	1851      	adds	r1, r2, r1
 80091bc:	6339      	str	r1, [r7, #48]	; 0x30
 80091be:	4649      	mov	r1, r9
 80091c0:	414b      	adcs	r3, r1
 80091c2:	637b      	str	r3, [r7, #52]	; 0x34
 80091c4:	f04f 0200 	mov.w	r2, #0
 80091c8:	f04f 0300 	mov.w	r3, #0
 80091cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80091d0:	4659      	mov	r1, fp
 80091d2:	00cb      	lsls	r3, r1, #3
 80091d4:	4651      	mov	r1, sl
 80091d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091da:	4651      	mov	r1, sl
 80091dc:	00ca      	lsls	r2, r1, #3
 80091de:	4610      	mov	r0, r2
 80091e0:	4619      	mov	r1, r3
 80091e2:	4603      	mov	r3, r0
 80091e4:	4642      	mov	r2, r8
 80091e6:	189b      	adds	r3, r3, r2
 80091e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80091ec:	464b      	mov	r3, r9
 80091ee:	460a      	mov	r2, r1
 80091f0:	eb42 0303 	adc.w	r3, r2, r3
 80091f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80091f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	2200      	movs	r2, #0
 8009200:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009204:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009208:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800920c:	460b      	mov	r3, r1
 800920e:	18db      	adds	r3, r3, r3
 8009210:	62bb      	str	r3, [r7, #40]	; 0x28
 8009212:	4613      	mov	r3, r2
 8009214:	eb42 0303 	adc.w	r3, r2, r3
 8009218:	62fb      	str	r3, [r7, #44]	; 0x2c
 800921a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800921e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009222:	f7f6 ffeb 	bl	80001fc <__aeabi_uldivmod>
 8009226:	4602      	mov	r2, r0
 8009228:	460b      	mov	r3, r1
 800922a:	4b0d      	ldr	r3, [pc, #52]	; (8009260 <UART_SetConfig+0x2d4>)
 800922c:	fba3 1302 	umull	r1, r3, r3, r2
 8009230:	095b      	lsrs	r3, r3, #5
 8009232:	2164      	movs	r1, #100	; 0x64
 8009234:	fb01 f303 	mul.w	r3, r1, r3
 8009238:	1ad3      	subs	r3, r2, r3
 800923a:	00db      	lsls	r3, r3, #3
 800923c:	3332      	adds	r3, #50	; 0x32
 800923e:	4a08      	ldr	r2, [pc, #32]	; (8009260 <UART_SetConfig+0x2d4>)
 8009240:	fba2 2303 	umull	r2, r3, r2, r3
 8009244:	095b      	lsrs	r3, r3, #5
 8009246:	f003 0207 	and.w	r2, r3, #7
 800924a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4422      	add	r2, r4
 8009252:	609a      	str	r2, [r3, #8]
=======
 8008fb6:	f7fd fa97 	bl	80064e8 <HAL_RCC_GetPCLK1Freq>
 8008fba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fc2:	69db      	ldr	r3, [r3, #28]
 8008fc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fc8:	f040 810c 	bne.w	80091e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008fcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008fd6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008fda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008fde:	4622      	mov	r2, r4
 8008fe0:	462b      	mov	r3, r5
 8008fe2:	1891      	adds	r1, r2, r2
 8008fe4:	65b9      	str	r1, [r7, #88]	; 0x58
 8008fe6:	415b      	adcs	r3, r3
 8008fe8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008fea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008fee:	4621      	mov	r1, r4
 8008ff0:	eb12 0801 	adds.w	r8, r2, r1
 8008ff4:	4629      	mov	r1, r5
 8008ff6:	eb43 0901 	adc.w	r9, r3, r1
 8008ffa:	f04f 0200 	mov.w	r2, #0
 8008ffe:	f04f 0300 	mov.w	r3, #0
 8009002:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009006:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800900a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800900e:	4690      	mov	r8, r2
 8009010:	4699      	mov	r9, r3
 8009012:	4623      	mov	r3, r4
 8009014:	eb18 0303 	adds.w	r3, r8, r3
 8009018:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800901c:	462b      	mov	r3, r5
 800901e:	eb49 0303 	adc.w	r3, r9, r3
 8009022:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009032:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009036:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800903a:	460b      	mov	r3, r1
 800903c:	18db      	adds	r3, r3, r3
 800903e:	653b      	str	r3, [r7, #80]	; 0x50
 8009040:	4613      	mov	r3, r2
 8009042:	eb42 0303 	adc.w	r3, r2, r3
 8009046:	657b      	str	r3, [r7, #84]	; 0x54
 8009048:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800904c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009050:	f7f7 f8d4 	bl	80001fc <__aeabi_uldivmod>
 8009054:	4602      	mov	r2, r0
 8009056:	460b      	mov	r3, r1
 8009058:	4b61      	ldr	r3, [pc, #388]	; (80091e0 <UART_SetConfig+0x2d4>)
 800905a:	fba3 2302 	umull	r2, r3, r3, r2
 800905e:	095b      	lsrs	r3, r3, #5
 8009060:	011c      	lsls	r4, r3, #4
 8009062:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009066:	2200      	movs	r2, #0
 8009068:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800906c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009070:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009074:	4642      	mov	r2, r8
 8009076:	464b      	mov	r3, r9
 8009078:	1891      	adds	r1, r2, r2
 800907a:	64b9      	str	r1, [r7, #72]	; 0x48
 800907c:	415b      	adcs	r3, r3
 800907e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009080:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009084:	4641      	mov	r1, r8
 8009086:	eb12 0a01 	adds.w	sl, r2, r1
 800908a:	4649      	mov	r1, r9
 800908c:	eb43 0b01 	adc.w	fp, r3, r1
 8009090:	f04f 0200 	mov.w	r2, #0
 8009094:	f04f 0300 	mov.w	r3, #0
 8009098:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800909c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80090a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80090a4:	4692      	mov	sl, r2
 80090a6:	469b      	mov	fp, r3
 80090a8:	4643      	mov	r3, r8
 80090aa:	eb1a 0303 	adds.w	r3, sl, r3
 80090ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80090b2:	464b      	mov	r3, r9
 80090b4:	eb4b 0303 	adc.w	r3, fp, r3
 80090b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80090bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	2200      	movs	r2, #0
 80090c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80090c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80090cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80090d0:	460b      	mov	r3, r1
 80090d2:	18db      	adds	r3, r3, r3
 80090d4:	643b      	str	r3, [r7, #64]	; 0x40
 80090d6:	4613      	mov	r3, r2
 80090d8:	eb42 0303 	adc.w	r3, r2, r3
 80090dc:	647b      	str	r3, [r7, #68]	; 0x44
 80090de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80090e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80090e6:	f7f7 f889 	bl	80001fc <__aeabi_uldivmod>
 80090ea:	4602      	mov	r2, r0
 80090ec:	460b      	mov	r3, r1
 80090ee:	4611      	mov	r1, r2
 80090f0:	4b3b      	ldr	r3, [pc, #236]	; (80091e0 <UART_SetConfig+0x2d4>)
 80090f2:	fba3 2301 	umull	r2, r3, r3, r1
 80090f6:	095b      	lsrs	r3, r3, #5
 80090f8:	2264      	movs	r2, #100	; 0x64
 80090fa:	fb02 f303 	mul.w	r3, r2, r3
 80090fe:	1acb      	subs	r3, r1, r3
 8009100:	00db      	lsls	r3, r3, #3
 8009102:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009106:	4b36      	ldr	r3, [pc, #216]	; (80091e0 <UART_SetConfig+0x2d4>)
 8009108:	fba3 2302 	umull	r2, r3, r3, r2
 800910c:	095b      	lsrs	r3, r3, #5
 800910e:	005b      	lsls	r3, r3, #1
 8009110:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009114:	441c      	add	r4, r3
 8009116:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800911a:	2200      	movs	r2, #0
 800911c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009120:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009124:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009128:	4642      	mov	r2, r8
 800912a:	464b      	mov	r3, r9
 800912c:	1891      	adds	r1, r2, r2
 800912e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009130:	415b      	adcs	r3, r3
 8009132:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009134:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009138:	4641      	mov	r1, r8
 800913a:	1851      	adds	r1, r2, r1
 800913c:	6339      	str	r1, [r7, #48]	; 0x30
 800913e:	4649      	mov	r1, r9
 8009140:	414b      	adcs	r3, r1
 8009142:	637b      	str	r3, [r7, #52]	; 0x34
 8009144:	f04f 0200 	mov.w	r2, #0
 8009148:	f04f 0300 	mov.w	r3, #0
 800914c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009150:	4659      	mov	r1, fp
 8009152:	00cb      	lsls	r3, r1, #3
 8009154:	4651      	mov	r1, sl
 8009156:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800915a:	4651      	mov	r1, sl
 800915c:	00ca      	lsls	r2, r1, #3
 800915e:	4610      	mov	r0, r2
 8009160:	4619      	mov	r1, r3
 8009162:	4603      	mov	r3, r0
 8009164:	4642      	mov	r2, r8
 8009166:	189b      	adds	r3, r3, r2
 8009168:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800916c:	464b      	mov	r3, r9
 800916e:	460a      	mov	r2, r1
 8009170:	eb42 0303 	adc.w	r3, r2, r3
 8009174:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	2200      	movs	r2, #0
 8009180:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009184:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009188:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800918c:	460b      	mov	r3, r1
 800918e:	18db      	adds	r3, r3, r3
 8009190:	62bb      	str	r3, [r7, #40]	; 0x28
 8009192:	4613      	mov	r3, r2
 8009194:	eb42 0303 	adc.w	r3, r2, r3
 8009198:	62fb      	str	r3, [r7, #44]	; 0x2c
 800919a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800919e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80091a2:	f7f7 f82b 	bl	80001fc <__aeabi_uldivmod>
 80091a6:	4602      	mov	r2, r0
 80091a8:	460b      	mov	r3, r1
 80091aa:	4b0d      	ldr	r3, [pc, #52]	; (80091e0 <UART_SetConfig+0x2d4>)
 80091ac:	fba3 1302 	umull	r1, r3, r3, r2
 80091b0:	095b      	lsrs	r3, r3, #5
 80091b2:	2164      	movs	r1, #100	; 0x64
 80091b4:	fb01 f303 	mul.w	r3, r1, r3
 80091b8:	1ad3      	subs	r3, r2, r3
 80091ba:	00db      	lsls	r3, r3, #3
 80091bc:	3332      	adds	r3, #50	; 0x32
 80091be:	4a08      	ldr	r2, [pc, #32]	; (80091e0 <UART_SetConfig+0x2d4>)
 80091c0:	fba2 2303 	umull	r2, r3, r2, r3
 80091c4:	095b      	lsrs	r3, r3, #5
 80091c6:	f003 0207 	and.w	r2, r3, #7
 80091ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4422      	add	r2, r4
 80091d2:	609a      	str	r2, [r3, #8]
>>>>>>> flight_hardware
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
<<<<<<< HEAD
 8009254:	e106      	b.n	8009464 <UART_SetConfig+0x4d8>
 8009256:	bf00      	nop
 8009258:	40011000 	.word	0x40011000
 800925c:	40011400 	.word	0x40011400
 8009260:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009264:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009268:	2200      	movs	r2, #0
 800926a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800926e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009272:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009276:	4642      	mov	r2, r8
 8009278:	464b      	mov	r3, r9
 800927a:	1891      	adds	r1, r2, r2
 800927c:	6239      	str	r1, [r7, #32]
 800927e:	415b      	adcs	r3, r3
 8009280:	627b      	str	r3, [r7, #36]	; 0x24
 8009282:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009286:	4641      	mov	r1, r8
 8009288:	1854      	adds	r4, r2, r1
 800928a:	4649      	mov	r1, r9
 800928c:	eb43 0501 	adc.w	r5, r3, r1
 8009290:	f04f 0200 	mov.w	r2, #0
 8009294:	f04f 0300 	mov.w	r3, #0
 8009298:	00eb      	lsls	r3, r5, #3
 800929a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800929e:	00e2      	lsls	r2, r4, #3
 80092a0:	4614      	mov	r4, r2
 80092a2:	461d      	mov	r5, r3
 80092a4:	4643      	mov	r3, r8
 80092a6:	18e3      	adds	r3, r4, r3
 80092a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80092ac:	464b      	mov	r3, r9
 80092ae:	eb45 0303 	adc.w	r3, r5, r3
 80092b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80092b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	2200      	movs	r2, #0
 80092be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80092c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80092c6:	f04f 0200 	mov.w	r2, #0
 80092ca:	f04f 0300 	mov.w	r3, #0
 80092ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80092d2:	4629      	mov	r1, r5
 80092d4:	008b      	lsls	r3, r1, #2
 80092d6:	4621      	mov	r1, r4
 80092d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80092dc:	4621      	mov	r1, r4
 80092de:	008a      	lsls	r2, r1, #2
 80092e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80092e4:	f7f6 ff8a 	bl	80001fc <__aeabi_uldivmod>
 80092e8:	4602      	mov	r2, r0
 80092ea:	460b      	mov	r3, r1
 80092ec:	4b60      	ldr	r3, [pc, #384]	; (8009470 <UART_SetConfig+0x4e4>)
 80092ee:	fba3 2302 	umull	r2, r3, r3, r2
 80092f2:	095b      	lsrs	r3, r3, #5
 80092f4:	011c      	lsls	r4, r3, #4
 80092f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092fa:	2200      	movs	r2, #0
 80092fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009300:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009304:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009308:	4642      	mov	r2, r8
 800930a:	464b      	mov	r3, r9
 800930c:	1891      	adds	r1, r2, r2
 800930e:	61b9      	str	r1, [r7, #24]
 8009310:	415b      	adcs	r3, r3
 8009312:	61fb      	str	r3, [r7, #28]
 8009314:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009318:	4641      	mov	r1, r8
 800931a:	1851      	adds	r1, r2, r1
 800931c:	6139      	str	r1, [r7, #16]
 800931e:	4649      	mov	r1, r9
 8009320:	414b      	adcs	r3, r1
 8009322:	617b      	str	r3, [r7, #20]
 8009324:	f04f 0200 	mov.w	r2, #0
 8009328:	f04f 0300 	mov.w	r3, #0
 800932c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009330:	4659      	mov	r1, fp
 8009332:	00cb      	lsls	r3, r1, #3
 8009334:	4651      	mov	r1, sl
 8009336:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800933a:	4651      	mov	r1, sl
 800933c:	00ca      	lsls	r2, r1, #3
 800933e:	4610      	mov	r0, r2
 8009340:	4619      	mov	r1, r3
 8009342:	4603      	mov	r3, r0
 8009344:	4642      	mov	r2, r8
 8009346:	189b      	adds	r3, r3, r2
 8009348:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800934c:	464b      	mov	r3, r9
 800934e:	460a      	mov	r2, r1
 8009350:	eb42 0303 	adc.w	r3, r2, r3
 8009354:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	2200      	movs	r2, #0
 8009360:	67bb      	str	r3, [r7, #120]	; 0x78
 8009362:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009364:	f04f 0200 	mov.w	r2, #0
 8009368:	f04f 0300 	mov.w	r3, #0
 800936c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009370:	4649      	mov	r1, r9
 8009372:	008b      	lsls	r3, r1, #2
 8009374:	4641      	mov	r1, r8
 8009376:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800937a:	4641      	mov	r1, r8
 800937c:	008a      	lsls	r2, r1, #2
 800937e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009382:	f7f6 ff3b 	bl	80001fc <__aeabi_uldivmod>
 8009386:	4602      	mov	r2, r0
 8009388:	460b      	mov	r3, r1
 800938a:	4611      	mov	r1, r2
 800938c:	4b38      	ldr	r3, [pc, #224]	; (8009470 <UART_SetConfig+0x4e4>)
 800938e:	fba3 2301 	umull	r2, r3, r3, r1
 8009392:	095b      	lsrs	r3, r3, #5
 8009394:	2264      	movs	r2, #100	; 0x64
 8009396:	fb02 f303 	mul.w	r3, r2, r3
 800939a:	1acb      	subs	r3, r1, r3
 800939c:	011b      	lsls	r3, r3, #4
 800939e:	3332      	adds	r3, #50	; 0x32
 80093a0:	4a33      	ldr	r2, [pc, #204]	; (8009470 <UART_SetConfig+0x4e4>)
 80093a2:	fba2 2303 	umull	r2, r3, r2, r3
 80093a6:	095b      	lsrs	r3, r3, #5
 80093a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093ac:	441c      	add	r4, r3
 80093ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093b2:	2200      	movs	r2, #0
 80093b4:	673b      	str	r3, [r7, #112]	; 0x70
 80093b6:	677a      	str	r2, [r7, #116]	; 0x74
 80093b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80093bc:	4642      	mov	r2, r8
 80093be:	464b      	mov	r3, r9
 80093c0:	1891      	adds	r1, r2, r2
 80093c2:	60b9      	str	r1, [r7, #8]
 80093c4:	415b      	adcs	r3, r3
 80093c6:	60fb      	str	r3, [r7, #12]
 80093c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80093cc:	4641      	mov	r1, r8
 80093ce:	1851      	adds	r1, r2, r1
 80093d0:	6039      	str	r1, [r7, #0]
 80093d2:	4649      	mov	r1, r9
 80093d4:	414b      	adcs	r3, r1
 80093d6:	607b      	str	r3, [r7, #4]
 80093d8:	f04f 0200 	mov.w	r2, #0
 80093dc:	f04f 0300 	mov.w	r3, #0
 80093e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80093e4:	4659      	mov	r1, fp
 80093e6:	00cb      	lsls	r3, r1, #3
 80093e8:	4651      	mov	r1, sl
 80093ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80093ee:	4651      	mov	r1, sl
 80093f0:	00ca      	lsls	r2, r1, #3
 80093f2:	4610      	mov	r0, r2
 80093f4:	4619      	mov	r1, r3
 80093f6:	4603      	mov	r3, r0
 80093f8:	4642      	mov	r2, r8
 80093fa:	189b      	adds	r3, r3, r2
 80093fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80093fe:	464b      	mov	r3, r9
 8009400:	460a      	mov	r2, r1
 8009402:	eb42 0303 	adc.w	r3, r2, r3
 8009406:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	2200      	movs	r2, #0
 8009410:	663b      	str	r3, [r7, #96]	; 0x60
 8009412:	667a      	str	r2, [r7, #100]	; 0x64
 8009414:	f04f 0200 	mov.w	r2, #0
 8009418:	f04f 0300 	mov.w	r3, #0
 800941c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009420:	4649      	mov	r1, r9
 8009422:	008b      	lsls	r3, r1, #2
 8009424:	4641      	mov	r1, r8
 8009426:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800942a:	4641      	mov	r1, r8
 800942c:	008a      	lsls	r2, r1, #2
 800942e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009432:	f7f6 fee3 	bl	80001fc <__aeabi_uldivmod>
 8009436:	4602      	mov	r2, r0
 8009438:	460b      	mov	r3, r1
 800943a:	4b0d      	ldr	r3, [pc, #52]	; (8009470 <UART_SetConfig+0x4e4>)
 800943c:	fba3 1302 	umull	r1, r3, r3, r2
 8009440:	095b      	lsrs	r3, r3, #5
 8009442:	2164      	movs	r1, #100	; 0x64
 8009444:	fb01 f303 	mul.w	r3, r1, r3
 8009448:	1ad3      	subs	r3, r2, r3
 800944a:	011b      	lsls	r3, r3, #4
 800944c:	3332      	adds	r3, #50	; 0x32
 800944e:	4a08      	ldr	r2, [pc, #32]	; (8009470 <UART_SetConfig+0x4e4>)
 8009450:	fba2 2303 	umull	r2, r3, r2, r3
 8009454:	095b      	lsrs	r3, r3, #5
 8009456:	f003 020f 	and.w	r2, r3, #15
 800945a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4422      	add	r2, r4
 8009462:	609a      	str	r2, [r3, #8]
}
 8009464:	bf00      	nop
 8009466:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800946a:	46bd      	mov	sp, r7
 800946c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009470:	51eb851f 	.word	0x51eb851f

08009474 <memset>:
 8009474:	4402      	add	r2, r0
 8009476:	4603      	mov	r3, r0
 8009478:	4293      	cmp	r3, r2
 800947a:	d100      	bne.n	800947e <memset+0xa>
 800947c:	4770      	bx	lr
 800947e:	f803 1b01 	strb.w	r1, [r3], #1
 8009482:	e7f9      	b.n	8009478 <memset+0x4>

08009484 <__libc_init_array>:
 8009484:	b570      	push	{r4, r5, r6, lr}
 8009486:	4d0d      	ldr	r5, [pc, #52]	; (80094bc <__libc_init_array+0x38>)
 8009488:	4c0d      	ldr	r4, [pc, #52]	; (80094c0 <__libc_init_array+0x3c>)
 800948a:	1b64      	subs	r4, r4, r5
 800948c:	10a4      	asrs	r4, r4, #2
 800948e:	2600      	movs	r6, #0
 8009490:	42a6      	cmp	r6, r4
 8009492:	d109      	bne.n	80094a8 <__libc_init_array+0x24>
 8009494:	4d0b      	ldr	r5, [pc, #44]	; (80094c4 <__libc_init_array+0x40>)
 8009496:	4c0c      	ldr	r4, [pc, #48]	; (80094c8 <__libc_init_array+0x44>)
 8009498:	f000 f818 	bl	80094cc <_init>
 800949c:	1b64      	subs	r4, r4, r5
 800949e:	10a4      	asrs	r4, r4, #2
 80094a0:	2600      	movs	r6, #0
 80094a2:	42a6      	cmp	r6, r4
 80094a4:	d105      	bne.n	80094b2 <__libc_init_array+0x2e>
 80094a6:	bd70      	pop	{r4, r5, r6, pc}
 80094a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80094ac:	4798      	blx	r3
 80094ae:	3601      	adds	r6, #1
 80094b0:	e7ee      	b.n	8009490 <__libc_init_array+0xc>
 80094b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80094b6:	4798      	blx	r3
 80094b8:	3601      	adds	r6, #1
 80094ba:	e7f2      	b.n	80094a2 <__libc_init_array+0x1e>
 80094bc:	080095a4 	.word	0x080095a4
 80094c0:	080095a4 	.word	0x080095a4
 80094c4:	080095a4 	.word	0x080095a4
 80094c8:	080095a8 	.word	0x080095a8

080094cc <_init>:
 80094cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ce:	bf00      	nop
 80094d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094d2:	bc08      	pop	{r3}
 80094d4:	469e      	mov	lr, r3
 80094d6:	4770      	bx	lr

080094d8 <_fini>:
 80094d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094da:	bf00      	nop
 80094dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094de:	bc08      	pop	{r3}
 80094e0:	469e      	mov	lr, r3
 80094e2:	4770      	bx	lr
=======
 80091d4:	e106      	b.n	80093e4 <UART_SetConfig+0x4d8>
 80091d6:	bf00      	nop
 80091d8:	40011000 	.word	0x40011000
 80091dc:	40011400 	.word	0x40011400
 80091e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80091e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091e8:	2200      	movs	r2, #0
 80091ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80091ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80091f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80091f6:	4642      	mov	r2, r8
 80091f8:	464b      	mov	r3, r9
 80091fa:	1891      	adds	r1, r2, r2
 80091fc:	6239      	str	r1, [r7, #32]
 80091fe:	415b      	adcs	r3, r3
 8009200:	627b      	str	r3, [r7, #36]	; 0x24
 8009202:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009206:	4641      	mov	r1, r8
 8009208:	1854      	adds	r4, r2, r1
 800920a:	4649      	mov	r1, r9
 800920c:	eb43 0501 	adc.w	r5, r3, r1
 8009210:	f04f 0200 	mov.w	r2, #0
 8009214:	f04f 0300 	mov.w	r3, #0
 8009218:	00eb      	lsls	r3, r5, #3
 800921a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800921e:	00e2      	lsls	r2, r4, #3
 8009220:	4614      	mov	r4, r2
 8009222:	461d      	mov	r5, r3
 8009224:	4643      	mov	r3, r8
 8009226:	18e3      	adds	r3, r4, r3
 8009228:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800922c:	464b      	mov	r3, r9
 800922e:	eb45 0303 	adc.w	r3, r5, r3
 8009232:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009242:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009246:	f04f 0200 	mov.w	r2, #0
 800924a:	f04f 0300 	mov.w	r3, #0
 800924e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009252:	4629      	mov	r1, r5
 8009254:	008b      	lsls	r3, r1, #2
 8009256:	4621      	mov	r1, r4
 8009258:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800925c:	4621      	mov	r1, r4
 800925e:	008a      	lsls	r2, r1, #2
 8009260:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009264:	f7f6 ffca 	bl	80001fc <__aeabi_uldivmod>
 8009268:	4602      	mov	r2, r0
 800926a:	460b      	mov	r3, r1
 800926c:	4b60      	ldr	r3, [pc, #384]	; (80093f0 <UART_SetConfig+0x4e4>)
 800926e:	fba3 2302 	umull	r2, r3, r3, r2
 8009272:	095b      	lsrs	r3, r3, #5
 8009274:	011c      	lsls	r4, r3, #4
 8009276:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800927a:	2200      	movs	r2, #0
 800927c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009280:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009284:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009288:	4642      	mov	r2, r8
 800928a:	464b      	mov	r3, r9
 800928c:	1891      	adds	r1, r2, r2
 800928e:	61b9      	str	r1, [r7, #24]
 8009290:	415b      	adcs	r3, r3
 8009292:	61fb      	str	r3, [r7, #28]
 8009294:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009298:	4641      	mov	r1, r8
 800929a:	1851      	adds	r1, r2, r1
 800929c:	6139      	str	r1, [r7, #16]
 800929e:	4649      	mov	r1, r9
 80092a0:	414b      	adcs	r3, r1
 80092a2:	617b      	str	r3, [r7, #20]
 80092a4:	f04f 0200 	mov.w	r2, #0
 80092a8:	f04f 0300 	mov.w	r3, #0
 80092ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80092b0:	4659      	mov	r1, fp
 80092b2:	00cb      	lsls	r3, r1, #3
 80092b4:	4651      	mov	r1, sl
 80092b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80092ba:	4651      	mov	r1, sl
 80092bc:	00ca      	lsls	r2, r1, #3
 80092be:	4610      	mov	r0, r2
 80092c0:	4619      	mov	r1, r3
 80092c2:	4603      	mov	r3, r0
 80092c4:	4642      	mov	r2, r8
 80092c6:	189b      	adds	r3, r3, r2
 80092c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80092cc:	464b      	mov	r3, r9
 80092ce:	460a      	mov	r2, r1
 80092d0:	eb42 0303 	adc.w	r3, r2, r3
 80092d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80092d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	2200      	movs	r2, #0
 80092e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80092e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80092e4:	f04f 0200 	mov.w	r2, #0
 80092e8:	f04f 0300 	mov.w	r3, #0
 80092ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80092f0:	4649      	mov	r1, r9
 80092f2:	008b      	lsls	r3, r1, #2
 80092f4:	4641      	mov	r1, r8
 80092f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80092fa:	4641      	mov	r1, r8
 80092fc:	008a      	lsls	r2, r1, #2
 80092fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009302:	f7f6 ff7b 	bl	80001fc <__aeabi_uldivmod>
 8009306:	4602      	mov	r2, r0
 8009308:	460b      	mov	r3, r1
 800930a:	4611      	mov	r1, r2
 800930c:	4b38      	ldr	r3, [pc, #224]	; (80093f0 <UART_SetConfig+0x4e4>)
 800930e:	fba3 2301 	umull	r2, r3, r3, r1
 8009312:	095b      	lsrs	r3, r3, #5
 8009314:	2264      	movs	r2, #100	; 0x64
 8009316:	fb02 f303 	mul.w	r3, r2, r3
 800931a:	1acb      	subs	r3, r1, r3
 800931c:	011b      	lsls	r3, r3, #4
 800931e:	3332      	adds	r3, #50	; 0x32
 8009320:	4a33      	ldr	r2, [pc, #204]	; (80093f0 <UART_SetConfig+0x4e4>)
 8009322:	fba2 2303 	umull	r2, r3, r2, r3
 8009326:	095b      	lsrs	r3, r3, #5
 8009328:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800932c:	441c      	add	r4, r3
 800932e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009332:	2200      	movs	r2, #0
 8009334:	673b      	str	r3, [r7, #112]	; 0x70
 8009336:	677a      	str	r2, [r7, #116]	; 0x74
 8009338:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800933c:	4642      	mov	r2, r8
 800933e:	464b      	mov	r3, r9
 8009340:	1891      	adds	r1, r2, r2
 8009342:	60b9      	str	r1, [r7, #8]
 8009344:	415b      	adcs	r3, r3
 8009346:	60fb      	str	r3, [r7, #12]
 8009348:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800934c:	4641      	mov	r1, r8
 800934e:	1851      	adds	r1, r2, r1
 8009350:	6039      	str	r1, [r7, #0]
 8009352:	4649      	mov	r1, r9
 8009354:	414b      	adcs	r3, r1
 8009356:	607b      	str	r3, [r7, #4]
 8009358:	f04f 0200 	mov.w	r2, #0
 800935c:	f04f 0300 	mov.w	r3, #0
 8009360:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009364:	4659      	mov	r1, fp
 8009366:	00cb      	lsls	r3, r1, #3
 8009368:	4651      	mov	r1, sl
 800936a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800936e:	4651      	mov	r1, sl
 8009370:	00ca      	lsls	r2, r1, #3
 8009372:	4610      	mov	r0, r2
 8009374:	4619      	mov	r1, r3
 8009376:	4603      	mov	r3, r0
 8009378:	4642      	mov	r2, r8
 800937a:	189b      	adds	r3, r3, r2
 800937c:	66bb      	str	r3, [r7, #104]	; 0x68
 800937e:	464b      	mov	r3, r9
 8009380:	460a      	mov	r2, r1
 8009382:	eb42 0303 	adc.w	r3, r2, r3
 8009386:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	2200      	movs	r2, #0
 8009390:	663b      	str	r3, [r7, #96]	; 0x60
 8009392:	667a      	str	r2, [r7, #100]	; 0x64
 8009394:	f04f 0200 	mov.w	r2, #0
 8009398:	f04f 0300 	mov.w	r3, #0
 800939c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80093a0:	4649      	mov	r1, r9
 80093a2:	008b      	lsls	r3, r1, #2
 80093a4:	4641      	mov	r1, r8
 80093a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80093aa:	4641      	mov	r1, r8
 80093ac:	008a      	lsls	r2, r1, #2
 80093ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80093b2:	f7f6 ff23 	bl	80001fc <__aeabi_uldivmod>
 80093b6:	4602      	mov	r2, r0
 80093b8:	460b      	mov	r3, r1
 80093ba:	4b0d      	ldr	r3, [pc, #52]	; (80093f0 <UART_SetConfig+0x4e4>)
 80093bc:	fba3 1302 	umull	r1, r3, r3, r2
 80093c0:	095b      	lsrs	r3, r3, #5
 80093c2:	2164      	movs	r1, #100	; 0x64
 80093c4:	fb01 f303 	mul.w	r3, r1, r3
 80093c8:	1ad3      	subs	r3, r2, r3
 80093ca:	011b      	lsls	r3, r3, #4
 80093cc:	3332      	adds	r3, #50	; 0x32
 80093ce:	4a08      	ldr	r2, [pc, #32]	; (80093f0 <UART_SetConfig+0x4e4>)
 80093d0:	fba2 2303 	umull	r2, r3, r2, r3
 80093d4:	095b      	lsrs	r3, r3, #5
 80093d6:	f003 020f 	and.w	r2, r3, #15
 80093da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4422      	add	r2, r4
 80093e2:	609a      	str	r2, [r3, #8]
}
 80093e4:	bf00      	nop
 80093e6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80093ea:	46bd      	mov	sp, r7
 80093ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80093f0:	51eb851f 	.word	0x51eb851f

080093f4 <memset>:
 80093f4:	4402      	add	r2, r0
 80093f6:	4603      	mov	r3, r0
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d100      	bne.n	80093fe <memset+0xa>
 80093fc:	4770      	bx	lr
 80093fe:	f803 1b01 	strb.w	r1, [r3], #1
 8009402:	e7f9      	b.n	80093f8 <memset+0x4>

08009404 <__libc_init_array>:
 8009404:	b570      	push	{r4, r5, r6, lr}
 8009406:	4d0d      	ldr	r5, [pc, #52]	; (800943c <__libc_init_array+0x38>)
 8009408:	4c0d      	ldr	r4, [pc, #52]	; (8009440 <__libc_init_array+0x3c>)
 800940a:	1b64      	subs	r4, r4, r5
 800940c:	10a4      	asrs	r4, r4, #2
 800940e:	2600      	movs	r6, #0
 8009410:	42a6      	cmp	r6, r4
 8009412:	d109      	bne.n	8009428 <__libc_init_array+0x24>
 8009414:	4d0b      	ldr	r5, [pc, #44]	; (8009444 <__libc_init_array+0x40>)
 8009416:	4c0c      	ldr	r4, [pc, #48]	; (8009448 <__libc_init_array+0x44>)
 8009418:	f000 f818 	bl	800944c <_init>
 800941c:	1b64      	subs	r4, r4, r5
 800941e:	10a4      	asrs	r4, r4, #2
 8009420:	2600      	movs	r6, #0
 8009422:	42a6      	cmp	r6, r4
 8009424:	d105      	bne.n	8009432 <__libc_init_array+0x2e>
 8009426:	bd70      	pop	{r4, r5, r6, pc}
 8009428:	f855 3b04 	ldr.w	r3, [r5], #4
 800942c:	4798      	blx	r3
 800942e:	3601      	adds	r6, #1
 8009430:	e7ee      	b.n	8009410 <__libc_init_array+0xc>
 8009432:	f855 3b04 	ldr.w	r3, [r5], #4
 8009436:	4798      	blx	r3
 8009438:	3601      	adds	r6, #1
 800943a:	e7f2      	b.n	8009422 <__libc_init_array+0x1e>
 800943c:	08009524 	.word	0x08009524
 8009440:	08009524 	.word	0x08009524
 8009444:	08009524 	.word	0x08009524
 8009448:	08009528 	.word	0x08009528

0800944c <_init>:
 800944c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800944e:	bf00      	nop
 8009450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009452:	bc08      	pop	{r3}
 8009454:	469e      	mov	lr, r3
 8009456:	4770      	bx	lr

08009458 <_fini>:
 8009458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800945a:	bf00      	nop
 800945c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800945e:	bc08      	pop	{r3}
 8009460:	469e      	mov	lr, r3
 8009462:	4770      	bx	lr
>>>>>>> flight_hardware
