
AuroraV_Payload_F439.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093c0  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800956c  0800956c  0000a56c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009624  08009624  0000b028  2**0
                  CONTENTS
  4 .ARM          00000008  08009624  08009624  0000a624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800962c  0800962c  0000b028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800962c  0800962c  0000a62c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009630  08009630  0000a630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08009634  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b028  2**0
                  CONTENTS
 10 .bss          00000610  20000028  20000028  0000b028  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000638  20000638  0000b028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b028  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d6c6  00000000  00000000  0000b058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040df  00000000  00000000  0002871e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017a0  00000000  00000000  0002c800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001257  00000000  00000000  0002dfa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002803a  00000000  00000000  0002f1f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e51f  00000000  00000000  00057231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea1f5  00000000  00000000  00075750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015f945  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000625c  00000000  00000000  0015f988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  00165be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000028 	.word	0x20000028
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08009554 	.word	0x08009554

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000002c 	.word	0x2000002c
 80001e8:	08009554 	.word	0x08009554

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <init_accel>:
uint8_t OUT_Y_L 				= 0x34;
uint8_t OUT_Y_H 				= 0x35;
uint8_t OUT_Z_L 				= 0x36;
uint8_t OUT_Z_H 				= 0x37;

HAL_StatusTypeDef init_accel(I2C_HandleTypeDef* hi2c) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;

	// Set standby mode
	ret = i2c_write_reg(hi2c, ADXL314_ADDR, &POWER_CTL_REG, 0x00);
 80004f4:	4b16      	ldr	r3, [pc, #88]	@ (8000550 <init_accel+0x64>)
 80004f6:	7819      	ldrb	r1, [r3, #0]
 80004f8:	2300      	movs	r3, #0
 80004fa:	4a16      	ldr	r2, [pc, #88]	@ (8000554 <init_accel+0x68>)
 80004fc:	6878      	ldr	r0, [r7, #4]
 80004fe:	f000 fc18 	bl	8000d32 <i2c_write_reg>
 8000502:	4603      	mov	r3, r0
 8000504:	73fb      	strb	r3, [r7, #15]

	// Set to 200G right justified
	ret = i2c_write_reg(hi2c, ADXL314_ADDR, &DATA_FORMAT_REG, RIGHT_JUST);
 8000506:	4b12      	ldr	r3, [pc, #72]	@ (8000550 <init_accel+0x64>)
 8000508:	7819      	ldrb	r1, [r3, #0]
 800050a:	230b      	movs	r3, #11
 800050c:	4a12      	ldr	r2, [pc, #72]	@ (8000558 <init_accel+0x6c>)
 800050e:	6878      	ldr	r0, [r7, #4]
 8000510:	f000 fc0f 	bl	8000d32 <i2c_write_reg>
 8000514:	4603      	mov	r3, r0
 8000516:	73fb      	strb	r3, [r7, #15]

	// Set to 1kHz ODR
	ret = i2c_write_reg(hi2c, ADXL314_ADDR, &BW_RATE_REG, MASK_1kHz);
 8000518:	4b0d      	ldr	r3, [pc, #52]	@ (8000550 <init_accel+0x64>)
 800051a:	7819      	ldrb	r1, [r3, #0]
 800051c:	230a      	movs	r3, #10
 800051e:	4a0f      	ldr	r2, [pc, #60]	@ (800055c <init_accel+0x70>)
 8000520:	6878      	ldr	r0, [r7, #4]
 8000522:	f000 fc06 	bl	8000d32 <i2c_write_reg>
 8000526:	4603      	mov	r3, r0
 8000528:	73fb      	strb	r3, [r7, #15]

	// Write the offset registers
	ret = writeOffset(hi2c);
 800052a:	6878      	ldr	r0, [r7, #4]
 800052c:	f000 f856 	bl	80005dc <writeOffset>
 8000530:	4603      	mov	r3, r0
 8000532:	73fb      	strb	r3, [r7, #15]

	// Start measuring
	ret = i2c_write_reg(hi2c, ADXL314_ADDR, &POWER_CTL_REG, START_MEAS);
 8000534:	4b06      	ldr	r3, [pc, #24]	@ (8000550 <init_accel+0x64>)
 8000536:	7819      	ldrb	r1, [r3, #0]
 8000538:	2308      	movs	r3, #8
 800053a:	4a06      	ldr	r2, [pc, #24]	@ (8000554 <init_accel+0x68>)
 800053c:	6878      	ldr	r0, [r7, #4]
 800053e:	f000 fbf8 	bl	8000d32 <i2c_write_reg>
 8000542:	4603      	mov	r3, r0
 8000544:	73fb      	strb	r3, [r7, #15]

	return ret;
 8000546:	7bfb      	ldrb	r3, [r7, #15]
}
 8000548:	4618      	mov	r0, r3
 800054a:	3710      	adds	r7, #16
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20000000 	.word	0x20000000
 8000554:	20000002 	.word	0x20000002
 8000558:	20000003 	.word	0x20000003
 800055c:	20000001 	.word	0x20000001

08000560 <readAccelerometer>:
void readAccelerometer(uint8_t values[6], I2C_HandleTypeDef* hi2c) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af02      	add	r7, sp, #8
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < 6; i++) {
 800056a:	2300      	movs	r3, #0
 800056c:	73fb      	strb	r3, [r7, #15]
 800056e:	e007      	b.n	8000580 <readAccelerometer+0x20>
		values[i] = 0x00;
 8000570:	7bfb      	ldrb	r3, [r7, #15]
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	4413      	add	r3, r2
 8000576:	2200      	movs	r2, #0
 8000578:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 6; i++) {
 800057a:	7bfb      	ldrb	r3, [r7, #15]
 800057c:	3301      	adds	r3, #1
 800057e:	73fb      	strb	r3, [r7, #15]
 8000580:	7bfb      	ldrb	r3, [r7, #15]
 8000582:	2b05      	cmp	r3, #5
 8000584:	d9f4      	bls.n	8000570 <readAccelerometer+0x10>
	}

	i2c_burst_read(hi2c, ADXL314_ADDR, OUT_X_L, 6, values);
 8000586:	4b07      	ldr	r3, [pc, #28]	@ (80005a4 <readAccelerometer+0x44>)
 8000588:	7819      	ldrb	r1, [r3, #0]
 800058a:	4b07      	ldr	r3, [pc, #28]	@ (80005a8 <readAccelerometer+0x48>)
 800058c:	781a      	ldrb	r2, [r3, #0]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2306      	movs	r3, #6
 8000594:	6838      	ldr	r0, [r7, #0]
 8000596:	f000 fb97 	bl	8000cc8 <i2c_burst_read>
}
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000000 	.word	0x20000000
 80005a8:	20000007 	.word	0x20000007

080005ac <readAccel_whoami>:

uint8_t readAccel_whoami(I2C_HandleTypeDef* hi2c) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	uint8_t data = 0x00;
 80005b4:	2300      	movs	r3, #0
 80005b6:	73fb      	strb	r3, [r7, #15]
	i2c_read_reg(hi2c, &data, ADXL314_ADDR, &WHOAMI);
 80005b8:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <readAccel_whoami+0x28>)
 80005ba:	781a      	ldrb	r2, [r3, #0]
 80005bc:	f107 010f 	add.w	r1, r7, #15
 80005c0:	4b05      	ldr	r3, [pc, #20]	@ (80005d8 <readAccel_whoami+0x2c>)
 80005c2:	6878      	ldr	r0, [r7, #4]
 80005c4:	f000 fb57 	bl	8000c76 <i2c_read_reg>

	return data;
 80005c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000000 	.word	0x20000000
 80005d8:	20000044 	.word	0x20000044

080005dc <writeOffset>:

HAL_StatusTypeDef writeOffset(I2C_HandleTypeDef* hi2c) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;

	ret = i2c_write_reg(hi2c, ADXL314_ADDR, &OFFSET_REG_X, OFFSETX);
 80005e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000624 <writeOffset+0x48>)
 80005e6:	7819      	ldrb	r1, [r3, #0]
 80005e8:	2302      	movs	r3, #2
 80005ea:	4a0f      	ldr	r2, [pc, #60]	@ (8000628 <writeOffset+0x4c>)
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f000 fba0 	bl	8000d32 <i2c_write_reg>
 80005f2:	4603      	mov	r3, r0
 80005f4:	73fb      	strb	r3, [r7, #15]
	ret = i2c_write_reg(hi2c, ADXL314_ADDR, &OFFSET_REG_Y, OFFSETY);
 80005f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000624 <writeOffset+0x48>)
 80005f8:	7819      	ldrb	r1, [r3, #0]
 80005fa:	2301      	movs	r3, #1
 80005fc:	4a0b      	ldr	r2, [pc, #44]	@ (800062c <writeOffset+0x50>)
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f000 fb97 	bl	8000d32 <i2c_write_reg>
 8000604:	4603      	mov	r3, r0
 8000606:	73fb      	strb	r3, [r7, #15]
	ret = i2c_write_reg(hi2c, ADXL314_ADDR, &OFFSET_REG_Z, OFFSETZ);
 8000608:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <writeOffset+0x48>)
 800060a:	7819      	ldrb	r1, [r3, #0]
 800060c:	2301      	movs	r3, #1
 800060e:	4a08      	ldr	r2, [pc, #32]	@ (8000630 <writeOffset+0x54>)
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f000 fb8e 	bl	8000d32 <i2c_write_reg>
 8000616:	4603      	mov	r3, r0
 8000618:	73fb      	strb	r3, [r7, #15]

	return ret;
 800061a:	7bfb      	ldrb	r3, [r7, #15]
}
 800061c:	4618      	mov	r0, r3
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000000 	.word	0x20000000
 8000628:	20000004 	.word	0x20000004
 800062c:	20000005 	.word	0x20000005
 8000630:	20000006 	.word	0x20000006

08000634 <init_bme280>:
uint8_t OUT_HUM_H 			= 0xFD;
uint8_t CALIB_ST_1			= 0x88;
uint8_t CALIB_ST_2			= 0xE1;


HAL_StatusTypeDef init_bme280(I2C_HandleTypeDef* hi2c, uint8_t bme) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	460b      	mov	r3, r1
 800063e:	70fb      	strb	r3, [r7, #3]
	uint8_t bme_addr = getBME280Config(bme).bme_addr;
 8000640:	78fb      	ldrb	r3, [r7, #3]
 8000642:	4618      	mov	r0, r3
 8000644:	f000 f8e0 	bl	8000808 <getBME280Config>
 8000648:	4603      	mov	r3, r0
 800064a:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef ret;
	uint8_t control_reg = 0x00;
 800064c:	2300      	movs	r3, #0
 800064e:	737b      	strb	r3, [r7, #13]

	// Reset the sensor
	ret =  i2c_write_reg(hi2c, bme_addr, &RST_REG, RST);
 8000650:	7bf9      	ldrb	r1, [r7, #15]
 8000652:	23b6      	movs	r3, #182	@ 0xb6
 8000654:	4a19      	ldr	r2, [pc, #100]	@ (80006bc <init_bme280+0x88>)
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	f000 fb6b 	bl	8000d32 <i2c_write_reg>
 800065c:	4603      	mov	r3, r0
 800065e:	73bb      	strb	r3, [r7, #14]

	// Set humidity control register
	i2c_read_reg(hi2c, &control_reg, bme_addr, &CTRL_HUM_REG);
 8000660:	7bfa      	ldrb	r2, [r7, #15]
 8000662:	f107 010d 	add.w	r1, r7, #13
 8000666:	4b16      	ldr	r3, [pc, #88]	@ (80006c0 <init_bme280+0x8c>)
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f000 fb04 	bl	8000c76 <i2c_read_reg>
	control_reg = control_reg & 0xF8;
 800066e:	7b7b      	ldrb	r3, [r7, #13]
 8000670:	f023 0307 	bic.w	r3, r3, #7
 8000674:	b2db      	uxtb	r3, r3
 8000676:	737b      	strb	r3, [r7, #13]
	control_reg = control_reg | CTRL_HUM_MSK;
 8000678:	7b7b      	ldrb	r3, [r7, #13]
 800067a:	f043 0301 	orr.w	r3, r3, #1
 800067e:	b2db      	uxtb	r3, r3
 8000680:	737b      	strb	r3, [r7, #13]
	ret = i2c_write_reg(hi2c, bme_addr, &CTRL_HUM_REG, control_reg);
 8000682:	7b7b      	ldrb	r3, [r7, #13]
 8000684:	7bf9      	ldrb	r1, [r7, #15]
 8000686:	4a0e      	ldr	r2, [pc, #56]	@ (80006c0 <init_bme280+0x8c>)
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f000 fb52 	bl	8000d32 <i2c_write_reg>
 800068e:	4603      	mov	r3, r0
 8000690:	73bb      	strb	r3, [r7, #14]

	// Set measure control register
	ret = i2c_write_reg(hi2c, bme_addr, &CTRL_MEAS_REG, CTRL_MEAS_MSK);
 8000692:	7bf9      	ldrb	r1, [r7, #15]
 8000694:	2327      	movs	r3, #39	@ 0x27
 8000696:	4a0b      	ldr	r2, [pc, #44]	@ (80006c4 <init_bme280+0x90>)
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f000 fb4a 	bl	8000d32 <i2c_write_reg>
 800069e:	4603      	mov	r3, r0
 80006a0:	73bb      	strb	r3, [r7, #14]

	// Set the config register
	ret = i2c_write_reg(hi2c, bme_addr, &CONF_REG, CONF_MSK);
 80006a2:	7bf9      	ldrb	r1, [r7, #15]
 80006a4:	2300      	movs	r3, #0
 80006a6:	4a08      	ldr	r2, [pc, #32]	@ (80006c8 <init_bme280+0x94>)
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f000 fb42 	bl	8000d32 <i2c_write_reg>
 80006ae:	4603      	mov	r3, r0
 80006b0:	73bb      	strb	r3, [r7, #14]

	return ret;
 80006b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3710      	adds	r7, #16
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000009 	.word	0x20000009
 80006c0:	2000000a 	.word	0x2000000a
 80006c4:	2000000b 	.word	0x2000000b
 80006c8:	2000000c 	.word	0x2000000c

080006cc <readTempHumPres>:

void readTempHumPres(uint8_t values[6], I2C_HandleTypeDef* hi2c, uint8_t bme) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	@ 0x28
 80006d0:	af02      	add	r7, sp, #8
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	4613      	mov	r3, r2
 80006d8:	71fb      	strb	r3, [r7, #7]
	uint8_t readings[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 80006da:	4a27      	ldr	r2, [pc, #156]	@ (8000778 <readTempHumPres+0xac>)
 80006dc:	f107 0314 	add.w	r3, r7, #20
 80006e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006e4:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t bme_addr = getBME280Config(bme).bme_addr;
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 f88c 	bl	8000808 <getBME280Config>
 80006f0:	4603      	mov	r3, r0
 80006f2:	777b      	strb	r3, [r7, #29]
	i2c_burst_read(hi2c, bme_addr, OUT_PRESS_H, 8, readings);
 80006f4:	4b21      	ldr	r3, [pc, #132]	@ (800077c <readTempHumPres+0xb0>)
 80006f6:	781a      	ldrb	r2, [r3, #0]
 80006f8:	7f79      	ldrb	r1, [r7, #29]
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	2308      	movs	r3, #8
 8000702:	68b8      	ldr	r0, [r7, #8]
 8000704:	f000 fae0 	bl	8000cc8 <i2c_burst_read>

	// Clear the 0 values on the xlsb registers
	uint8_t j = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	77fb      	strb	r3, [r7, #31]
    for(uint8_t i = 0; i < 8; i++) {
 800070c:	2300      	movs	r3, #0
 800070e:	77bb      	strb	r3, [r7, #30]
 8000710:	e014      	b.n	800073c <readTempHumPres+0x70>
        if(i != 2 && i != 5) {  // if the index is not 2 or 5
 8000712:	7fbb      	ldrb	r3, [r7, #30]
 8000714:	2b02      	cmp	r3, #2
 8000716:	d00e      	beq.n	8000736 <readTempHumPres+0x6a>
 8000718:	7fbb      	ldrb	r3, [r7, #30]
 800071a:	2b05      	cmp	r3, #5
 800071c:	d00b      	beq.n	8000736 <readTempHumPres+0x6a>
        	values[j] = readings[i];
 800071e:	7fba      	ldrb	r2, [r7, #30]
 8000720:	7ffb      	ldrb	r3, [r7, #31]
 8000722:	68f9      	ldr	r1, [r7, #12]
 8000724:	440b      	add	r3, r1
 8000726:	3220      	adds	r2, #32
 8000728:	443a      	add	r2, r7
 800072a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800072e:	701a      	strb	r2, [r3, #0]
            j++;
 8000730:	7ffb      	ldrb	r3, [r7, #31]
 8000732:	3301      	adds	r3, #1
 8000734:	77fb      	strb	r3, [r7, #31]
    for(uint8_t i = 0; i < 8; i++) {
 8000736:	7fbb      	ldrb	r3, [r7, #30]
 8000738:	3301      	adds	r3, #1
 800073a:	77bb      	strb	r3, [r7, #30]
 800073c:	7fbb      	ldrb	r3, [r7, #30]
 800073e:	2b07      	cmp	r3, #7
 8000740:	d9e7      	bls.n	8000712 <readTempHumPres+0x46>
        }
    }

    // Swap elements to make the array little endian
    swap(&values[0], &values[1]);
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	3301      	adds	r3, #1
 8000746:	4619      	mov	r1, r3
 8000748:	68f8      	ldr	r0, [r7, #12]
 800074a:	f000 f874 	bl	8000836 <swap>
    swap(&values[2], &values[3]);
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	1c9a      	adds	r2, r3, #2
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	3303      	adds	r3, #3
 8000756:	4619      	mov	r1, r3
 8000758:	4610      	mov	r0, r2
 800075a:	f000 f86c 	bl	8000836 <swap>
    swap(&values[4], &values[5]);
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	1d1a      	adds	r2, r3, #4
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	3305      	adds	r3, #5
 8000766:	4619      	mov	r1, r3
 8000768:	4610      	mov	r0, r2
 800076a:	f000 f864 	bl	8000836 <swap>
}
 800076e:	bf00      	nop
 8000770:	3720      	adds	r7, #32
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	0800956c 	.word	0x0800956c
 800077c:	2000000d 	.word	0x2000000d

08000780 <readBME280_id_reg>:

uint8_t readBME280_id_reg(I2C_HandleTypeDef* hi2c, uint8_t bme) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	460b      	mov	r3, r1
 800078a:	70fb      	strb	r3, [r7, #3]
	uint8_t bme_addr = getBME280Config(bme).bme_addr;
 800078c:	78fb      	ldrb	r3, [r7, #3]
 800078e:	4618      	mov	r0, r3
 8000790:	f000 f83a 	bl	8000808 <getBME280Config>
 8000794:	4603      	mov	r3, r0
 8000796:	73fb      	strb	r3, [r7, #15]
	uint8_t data = 0x00;
 8000798:	2300      	movs	r3, #0
 800079a:	73bb      	strb	r3, [r7, #14]
	i2c_read_reg(hi2c, &data, bme_addr, &ID_REG);
 800079c:	7bfa      	ldrb	r2, [r7, #15]
 800079e:	f107 010e 	add.w	r1, r7, #14
 80007a2:	4b04      	ldr	r3, [pc, #16]	@ (80007b4 <readBME280_id_reg+0x34>)
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f000 fa66 	bl	8000c76 <i2c_read_reg>

	return data;
 80007aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3710      	adds	r7, #16
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000008 	.word	0x20000008

080007b8 <readBME280_calib>:

void readBME280_calib(I2C_HandleTypeDef* hi2c, uint8_t bme, uint8_t calibration1[CALIB_CNT_1], uint8_t calibration2[CALIB_CNT_2]) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b088      	sub	sp, #32
 80007bc:	af02      	add	r7, sp, #8
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	607a      	str	r2, [r7, #4]
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	460b      	mov	r3, r1
 80007c6:	72fb      	strb	r3, [r7, #11]
	uint8_t bme_addr = getBME280Config(bme).bme_addr;
 80007c8:	7afb      	ldrb	r3, [r7, #11]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 f81c 	bl	8000808 <getBME280Config>
 80007d0:	4603      	mov	r3, r0
 80007d2:	75fb      	strb	r3, [r7, #23]
	i2c_burst_read(hi2c, bme_addr, CALIB_ST_1, CALIB_CNT_1, calibration1);
 80007d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000800 <readBME280_calib+0x48>)
 80007d6:	781a      	ldrb	r2, [r3, #0]
 80007d8:	7df9      	ldrb	r1, [r7, #23]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	9300      	str	r3, [sp, #0]
 80007de:	2319      	movs	r3, #25
 80007e0:	68f8      	ldr	r0, [r7, #12]
 80007e2:	f000 fa71 	bl	8000cc8 <i2c_burst_read>
	i2c_burst_read(hi2c, bme_addr, CALIB_ST_2, CALIB_CNT_2, calibration2);
 80007e6:	4b07      	ldr	r3, [pc, #28]	@ (8000804 <readBME280_calib+0x4c>)
 80007e8:	781a      	ldrb	r2, [r3, #0]
 80007ea:	7df9      	ldrb	r1, [r7, #23]
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	2307      	movs	r3, #7
 80007f2:	68f8      	ldr	r0, [r7, #12]
 80007f4:	f000 fa68 	bl	8000cc8 <i2c_burst_read>
}
 80007f8:	bf00      	nop
 80007fa:	3718      	adds	r7, #24
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	2000000e 	.word	0x2000000e
 8000804:	2000000f 	.word	0x2000000f

08000808 <getBME280Config>:

BME280_Config getBME280Config(uint8_t bme) {
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	71fb      	strb	r3, [r7, #7]
	BME280_Config config;
	if (bme == 0) {
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d102      	bne.n	800081e <getBME280Config+0x16>
		config.bme_addr = BME280_ADDR_0;
 8000818:	2376      	movs	r3, #118	@ 0x76
 800081a:	733b      	strb	r3, [r7, #12]
 800081c:	e004      	b.n	8000828 <getBME280Config+0x20>
	} else if (bme == 1) {
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d101      	bne.n	8000828 <getBME280Config+0x20>
		config.bme_addr = BME280_ADDR_1;
 8000824:	2377      	movs	r3, #119	@ 0x77
 8000826:	733b      	strb	r3, [r7, #12]
	}
    return config;
 8000828:	7b3b      	ldrb	r3, [r7, #12]
}
 800082a:	4618      	mov	r0, r3
 800082c:	3714      	adds	r7, #20
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr

08000836 <swap>:

void swap(uint8_t* a, uint8_t* b) {
 8000836:	b480      	push	{r7}
 8000838:	b085      	sub	sp, #20
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
 800083e:	6039      	str	r1, [r7, #0]
    uint8_t temp = *a;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	73fb      	strb	r3, [r7, #15]
    *a = *b;
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	781a      	ldrb	r2, [r3, #0]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	701a      	strb	r2, [r3, #0]
    *b = temp;
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	7bfa      	ldrb	r2, [r7, #15]
 8000852:	701a      	strb	r2, [r3, #0]
}
 8000854:	bf00      	nop
 8000856:	3714      	adds	r7, #20
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <sendCAN_TxMessage>:
 */

#include "can_driver.h"


void sendCAN_TxMessage(CAN_HandleTypeDef *hcan, uint8_t dataSize, uint8_t TxData[dataSize], uint32_t *CAN_TxMailbox, uint16_t payload_id) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b08a      	sub	sp, #40	@ 0x28
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	607a      	str	r2, [r7, #4]
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	460b      	mov	r3, r1
 800086e:	72fb      	strb	r3, [r7, #11]
	CAN_TxHeaderTypeDef TxHeader = configureTxHeader(payload_id, dataSize);
 8000870:	f107 0310 	add.w	r3, r7, #16
 8000874:	7afa      	ldrb	r2, [r7, #11]
 8000876:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8000878:	4618      	mov	r0, r3
 800087a:	f000 f80b 	bl	8000894 <configureTxHeader>
	HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, CAN_TxMailbox);
 800087e:	f107 0110 	add.w	r1, r7, #16
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	68f8      	ldr	r0, [r7, #12]
 8000888:	f002 fe78 	bl	800357c <HAL_CAN_AddTxMessage>
}
 800088c:	bf00      	nop
 800088e:	3728      	adds	r7, #40	@ 0x28
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <configureTxHeader>:

CAN_TxHeaderTypeDef configureTxHeader(uint16_t payload_id, uint8_t dataSize) {
 8000894:	b4b0      	push	{r4, r5, r7}
 8000896:	b089      	sub	sp, #36	@ 0x24
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	460b      	mov	r3, r1
 800089e:	807b      	strh	r3, [r7, #2]
 80008a0:	4613      	mov	r3, r2
 80008a2:	707b      	strb	r3, [r7, #1]
	CAN_TxHeaderTypeDef TxHeader;
	TxHeader.DLC = dataSize;
 80008a4:	787b      	ldrb	r3, [r7, #1]
 80008a6:	61bb      	str	r3, [r7, #24]
	TxHeader.IDE = CAN_ID_STD;
 80008a8:	2300      	movs	r3, #0
 80008aa:	613b      	str	r3, [r7, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]
	TxHeader.StdId = payload_id;
 80008b0:	887b      	ldrh	r3, [r7, #2]
 80008b2:	60bb      	str	r3, [r7, #8]
	TxHeader.TransmitGlobalTime = DISABLE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	773b      	strb	r3, [r7, #28]
	return TxHeader;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	461d      	mov	r5, r3
 80008bc:	f107 0408 	add.w	r4, r7, #8
 80008c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80008c8:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	3724      	adds	r7, #36	@ 0x24
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bcb0      	pop	{r4, r5, r7}
 80008d4:	4770      	bx	lr

080008d6 <check_busy>:
uint8_t FLASH_32K_ERS	= 0x52;			// Erase all memory within a 32K-byte block
uint8_t FLASH_ERASE		= 0xC7;			// Erase the entire chip
uint8_t RST_EN			= 0x66;			// Reset enable
uint8_t DEV_RST			= 0x99;			// Reset device

uint8_t check_busy(SPI_HandleTypeDef *hspi, GPIO_Config config, int timeout) {
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b088      	sub	sp, #32
 80008da:	af00      	add	r7, sp, #0
 80008dc:	60f8      	str	r0, [r7, #12]
 80008de:	1d38      	adds	r0, r7, #4
 80008e0:	e880 0006 	stmia.w	r0, {r1, r2}
 80008e4:	603b      	str	r3, [r7, #0]
	uint8_t ret_val = 0x00;
 80008e6:	2300      	movs	r3, #0
 80008e8:	77fb      	strb	r3, [r7, #31]

    // Get the current time
	uint32_t startTick = HAL_GetTick();
 80008ea:	f002 fbf7 	bl	80030dc <HAL_GetTick>
 80008ee:	61b8      	str	r0, [r7, #24]

	// Read the status register to ensure no write is currently in progress
	uint8_t busy = 0x01;
 80008f0:	2301      	movs	r3, #1
 80008f2:	77bb      	strb	r3, [r7, #30]
	while(busy) {
 80008f4:	e015      	b.n	8000922 <check_busy+0x4c>
		// Check if there is a write in progress
		busy = (check_status_register(hspi, config) & 0x01);
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80008fc:	68f8      	ldr	r0, [r7, #12]
 80008fe:	f000 f819 	bl	8000934 <check_status_register>
 8000902:	4603      	mov	r3, r0
 8000904:	f003 0301 	and.w	r3, r3, #1
 8000908:	77bb      	strb	r3, [r7, #30]

		uint32_t currTick = HAL_GetTick();
 800090a:	f002 fbe7 	bl	80030dc <HAL_GetTick>
 800090e:	6178      	str	r0, [r7, #20]

        // Check if the timeout has been reached
		if ((currTick - startTick) >= timeout) {
 8000910:	697a      	ldr	r2, [r7, #20]
 8000912:	69bb      	ldr	r3, [r7, #24]
 8000914:	1ad2      	subs	r2, r2, r3
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	429a      	cmp	r2, r3
 800091a:	d302      	bcc.n	8000922 <check_busy+0x4c>
        	ret_val = 0x01;
 800091c:	2301      	movs	r3, #1
 800091e:	77fb      	strb	r3, [r7, #31]
            break;
 8000920:	e002      	b.n	8000928 <check_busy+0x52>
	while(busy) {
 8000922:	7fbb      	ldrb	r3, [r7, #30]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d1e6      	bne.n	80008f6 <check_busy+0x20>
        }
	}

	return ret_val;
 8000928:	7ffb      	ldrb	r3, [r7, #31]
}
 800092a:	4618      	mov	r0, r3
 800092c:	3720      	adds	r7, #32
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <check_status_register>:

uint8_t check_status_register(SPI_HandleTypeDef *hspi, GPIO_Config config) {
 8000934:	b580      	push	{r7, lr}
 8000936:	b088      	sub	sp, #32
 8000938:	af02      	add	r7, sp, #8
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	e883 0006 	stmia.w	r3, {r1, r2}
	uint8_t status_reg = 0x00;
 8000942:	2300      	movs	r3, #0
 8000944:	75fb      	strb	r3, [r7, #23]
	spi_sendOp_readByte(&FLASH_READSR1, hspi, &status_reg, config.GPIOx, config.GPIO_Pin);
 8000946:	6879      	ldr	r1, [r7, #4]
 8000948:	893b      	ldrh	r3, [r7, #8]
 800094a:	f107 0217 	add.w	r2, r7, #23
 800094e:	9300      	str	r3, [sp, #0]
 8000950:	460b      	mov	r3, r1
 8000952:	68f9      	ldr	r1, [r7, #12]
 8000954:	4803      	ldr	r0, [pc, #12]	@ (8000964 <check_status_register+0x30>)
 8000956:	f001 fe23 	bl	80025a0 <spi_sendOp_readByte>
	return status_reg;
 800095a:	7dfb      	ldrb	r3, [r7, #23]
}
 800095c:	4618      	mov	r0, r3
 800095e:	3718      	adds	r7, #24
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000012 	.word	0x20000012

08000968 <erase_chip_spi>:
 *      Author: aidencontini
 */

#include "data_output_spi.h"

HAL_StatusTypeDef erase_chip_spi(SPI_HandleTypeDef *hspi, GPIO_Config config) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	e883 0006 	stmia.w	r3, {r1, r2}
	check_busy(hspi, config, BSY_TIMEOUT_MS);
 8000976:	2305      	movs	r3, #5
 8000978:	1d3a      	adds	r2, r7, #4
 800097a:	ca06      	ldmia	r2, {r1, r2}
 800097c:	68f8      	ldr	r0, [r7, #12]
 800097e:	f7ff ffaa 	bl	80008d6 <check_busy>

	write_enable_spi(hspi, config);
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000988:	68f8      	ldr	r0, [r7, #12]
 800098a:	f000 f815 	bl	80009b8 <write_enable_spi>
	perform_operation(&FLASH_ERASE, hspi, config.GPIOx, config.GPIO_Pin);
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	893b      	ldrh	r3, [r7, #8]
 8000992:	68f9      	ldr	r1, [r7, #12]
 8000994:	4806      	ldr	r0, [pc, #24]	@ (80009b0 <erase_chip_spi+0x48>)
 8000996:	f001 fe29 	bl	80025ec <perform_operation>

	check_busy(hspi, config, CHIP_ERASE_TO);
 800099a:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <erase_chip_spi+0x4c>)
 800099c:	1d3a      	adds	r2, r7, #4
 800099e:	ca06      	ldmia	r2, {r1, r2}
 80009a0:	68f8      	ldr	r0, [r7, #12]
 80009a2:	f7ff ff98 	bl	80008d6 <check_busy>

	return HAL_OK;
 80009a6:	2300      	movs	r3, #0
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3710      	adds	r7, #16
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000015 	.word	0x20000015
 80009b4:	00030d40 	.word	0x00030d40

080009b8 <write_enable_spi>:
	check_busy(hspi, config, BLK_ERS_32K_TO);

	return HAL_OK;
}

void write_enable_spi(SPI_HandleTypeDef *hspi, GPIO_Config config) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	e883 0006 	stmia.w	r3, {r1, r2}
	perform_operation(&FLASH_WREN, hspi, config.GPIOx, config.GPIO_Pin);
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	893b      	ldrh	r3, [r7, #8]
 80009ca:	68f9      	ldr	r1, [r7, #12]
 80009cc:	4803      	ldr	r0, [pc, #12]	@ (80009dc <write_enable_spi+0x24>)
 80009ce:	f001 fe0d 	bl	80025ec <perform_operation>
}
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000010 	.word	0x20000010

080009e0 <software_reset>:

void write_disable_spi(SPI_HandleTypeDef *hspi, GPIO_Config config) {
	perform_operation(&FLASH_WRDIS, hspi, config.GPIOx, config.GPIO_Pin);
}

void software_reset(SPI_HandleTypeDef *hspi, GPIO_Config config) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	e883 0006 	stmia.w	r3, {r1, r2}

	check_busy(hspi, config, BSY_TIMEOUT_MS);
 80009ee:	2305      	movs	r3, #5
 80009f0:	1d3a      	adds	r2, r7, #4
 80009f2:	ca06      	ldmia	r2, {r1, r2}
 80009f4:	68f8      	ldr	r0, [r7, #12]
 80009f6:	f7ff ff6e 	bl	80008d6 <check_busy>

	perform_operation(&RST_EN, hspi, config.GPIOx, config.GPIO_Pin);
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	893b      	ldrh	r3, [r7, #8]
 80009fe:	68f9      	ldr	r1, [r7, #12]
 8000a00:	4807      	ldr	r0, [pc, #28]	@ (8000a20 <software_reset+0x40>)
 8000a02:	f001 fdf3 	bl	80025ec <perform_operation>
	perform_operation(&DEV_RST, hspi, config.GPIOx, config.GPIO_Pin);
 8000a06:	687a      	ldr	r2, [r7, #4]
 8000a08:	893b      	ldrh	r3, [r7, #8]
 8000a0a:	68f9      	ldr	r1, [r7, #12]
 8000a0c:	4805      	ldr	r0, [pc, #20]	@ (8000a24 <software_reset+0x44>)
 8000a0e:	f001 fded 	bl	80025ec <perform_operation>

	HAL_Delay(5);
 8000a12:	2005      	movs	r0, #5
 8000a14:	f002 fb6e 	bl	80030f4 <HAL_Delay>
}
 8000a18:	bf00      	nop
 8000a1a:	3710      	adds	r7, #16
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000016 	.word	0x20000016
 8000a24:	20000017 	.word	0x20000017

08000a28 <write_data_spi_dma>:
	spi_write_data(&FLASH_PGWR, PAGE_SIZE, page, hspi, addr, config.GPIOx, config.GPIO_Pin);

	return 0;
}

uint8_t write_data_spi_dma(uint8_t page[PAGE_SIZE], SPI_HandleTypeDef *hspi, uint32_t addr, GPIO_Config config) {
 8000a28:	b082      	sub	sp, #8
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b088      	sub	sp, #32
 8000a2e:	af04      	add	r7, sp, #16
 8000a30:	60f8      	str	r0, [r7, #12]
 8000a32:	60b9      	str	r1, [r7, #8]
 8000a34:	607a      	str	r2, [r7, #4]
 8000a36:	61fb      	str	r3, [r7, #28]
	check_busy(hspi, config, BSY_TIMEOUT_MS);
 8000a38:	2305      	movs	r3, #5
 8000a3a:	f107 021c 	add.w	r2, r7, #28
 8000a3e:	ca06      	ldmia	r2, {r1, r2}
 8000a40:	68b8      	ldr	r0, [r7, #8]
 8000a42:	f7ff ff48 	bl	80008d6 <check_busy>

	// Send the write enable signal
	write_enable_spi(hspi, config);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000a4e:	68b8      	ldr	r0, [r7, #8]
 8000a50:	f7ff ffb2 	bl	80009b8 <write_enable_spi>
	spi_write_data_dma(&FLASH_PGWR, PAGE_SIZE, page, hspi, addr, config.GPIOx, config.GPIO_Pin);
 8000a54:	69fb      	ldr	r3, [r7, #28]
 8000a56:	8c3a      	ldrh	r2, [r7, #32]
 8000a58:	9202      	str	r2, [sp, #8]
 8000a5a:	9301      	str	r3, [sp, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	9300      	str	r3, [sp, #0]
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	68fa      	ldr	r2, [r7, #12]
 8000a64:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a68:	4805      	ldr	r0, [pc, #20]	@ (8000a80 <write_data_spi_dma+0x58>)
 8000a6a:	f001 fe26 	bl	80026ba <spi_write_data_dma>

	return 0;
 8000a6e:	2300      	movs	r3, #0
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3710      	adds	r7, #16
 8000a74:	46bd      	mov	sp, r7
 8000a76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a7a:	b002      	add	sp, #8
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	20000011 	.word	0x20000011

08000a84 <find_next_blank_page>:
 *      Author: aidencontini
 */

#include "data_read_spi.h"

uint32_t find_next_blank_page(SPI_HandleTypeDef *hspi, GPIO_PinState *end_of_flash_ptr, GPIO_Config config) {
 8000a84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000a88:	b091      	sub	sp, #68	@ 0x44
 8000a8a:	af04      	add	r7, sp, #16
 8000a8c:	60f8      	str	r0, [r7, #12]
 8000a8e:	60b9      	str	r1, [r7, #8]
 8000a90:	4639      	mov	r1, r7
 8000a92:	e881 000c 	stmia.w	r1, {r2, r3}
 8000a96:	466b      	mov	r3, sp
 8000a98:	461e      	mov	r6, r3
	uint8_t firstBytes = 4;
 8000a9a:	2304      	movs	r3, #4
 8000a9c:	77fb      	strb	r3, [r7, #31]

	uint8_t page_start[firstBytes];
 8000a9e:	7ff9      	ldrb	r1, [r7, #31]
 8000aa0:	460b      	mov	r3, r1
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	61bb      	str	r3, [r7, #24]
 8000aa6:	b2cb      	uxtb	r3, r1
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	4698      	mov	r8, r3
 8000aac:	4691      	mov	r9, r2
 8000aae:	f04f 0200 	mov.w	r2, #0
 8000ab2:	f04f 0300 	mov.w	r3, #0
 8000ab6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000aba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000abe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000ac2:	b2cb      	uxtb	r3, r1
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	461c      	mov	r4, r3
 8000ac8:	4615      	mov	r5, r2
 8000aca:	f04f 0200 	mov.w	r2, #0
 8000ace:	f04f 0300 	mov.w	r3, #0
 8000ad2:	00eb      	lsls	r3, r5, #3
 8000ad4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000ad8:	00e2      	lsls	r2, r4, #3
 8000ada:	460b      	mov	r3, r1
 8000adc:	3307      	adds	r3, #7
 8000ade:	08db      	lsrs	r3, r3, #3
 8000ae0:	00db      	lsls	r3, r3, #3
 8000ae2:	ebad 0d03 	sub.w	sp, sp, r3
 8000ae6:	ab04      	add	r3, sp, #16
 8000ae8:	3300      	adds	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < firstBytes; i++) {
 8000aec:	2300      	movs	r3, #0
 8000aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000af0:	e007      	b.n	8000b02 <find_next_blank_page+0x7e>
		page_start[i] = 0;
 8000af2:	697a      	ldr	r2, [r7, #20]
 8000af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000af6:	4413      	add	r3, r2
 8000af8:	2200      	movs	r2, #0
 8000afa:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < firstBytes; i++) {
 8000afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000afe:	3301      	adds	r3, #1
 8000b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b02:	7ffb      	ldrb	r3, [r7, #31]
 8000b04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000b06:	429a      	cmp	r2, r3
 8000b08:	dbf3      	blt.n	8000af2 <find_next_blank_page+0x6e>
	}

	uint32_t page_start_concat = (page_start[0] << 24) | (page_start[1] << 16) | (page_start[2] << 8) | page_start[3];
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	061a      	lsls	r2, r3, #24
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	785b      	ldrb	r3, [r3, #1]
 8000b14:	041b      	lsls	r3, r3, #16
 8000b16:	431a      	orrs	r2, r3
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	789b      	ldrb	r3, [r3, #2]
 8000b1c:	021b      	lsls	r3, r3, #8
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	697a      	ldr	r2, [r7, #20]
 8000b22:	78d2      	ldrb	r2, [r2, #3]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t temp = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t page_address = temp;
 8000b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b2e:	623b      	str	r3, [r7, #32]

	while ((page_start_concat != 0xFFFFFFFF) || (temp == NUM_OF_PAGES)) {
 8000b30:	e027      	b.n	8000b82 <find_next_blank_page+0xfe>
		page_address = temp;
 8000b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b34:	623b      	str	r3, [r7, #32]

		check_busy(hspi, config, BSY_TIMEOUT_MS);
 8000b36:	2305      	movs	r3, #5
 8000b38:	463a      	mov	r2, r7
 8000b3a:	ca06      	ldmia	r2, {r1, r2}
 8000b3c:	68f8      	ldr	r0, [r7, #12]
 8000b3e:	f7ff feca 	bl	80008d6 <check_busy>

		spi_read_data(&FLASH_READEN, firstBytes, page_start, hspi, page_address, config.GPIOx, config.GPIO_Pin);
 8000b42:	7ffb      	ldrb	r3, [r7, #31]
 8000b44:	b299      	uxth	r1, r3
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	88ba      	ldrh	r2, [r7, #4]
 8000b4a:	9202      	str	r2, [sp, #8]
 8000b4c:	9301      	str	r3, [sp, #4]
 8000b4e:	6a3b      	ldr	r3, [r7, #32]
 8000b50:	9300      	str	r3, [sp, #0]
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	697a      	ldr	r2, [r7, #20]
 8000b56:	4816      	ldr	r0, [pc, #88]	@ (8000bb0 <find_next_blank_page+0x12c>)
 8000b58:	f001 fd68 	bl	800262c <spi_read_data>

		page_start_concat = (page_start[0] << 24) | (page_start[1] << 16) | (page_start[2] << 8) | page_start[3];
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	061a      	lsls	r2, r3, #24
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	785b      	ldrb	r3, [r3, #1]
 8000b66:	041b      	lsls	r3, r3, #16
 8000b68:	431a      	orrs	r2, r3
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	789b      	ldrb	r3, [r3, #2]
 8000b6e:	021b      	lsls	r3, r3, #8
 8000b70:	4313      	orrs	r3, r2
 8000b72:	697a      	ldr	r2, [r7, #20]
 8000b74:	78d2      	ldrb	r2, [r2, #3]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	62bb      	str	r3, [r7, #40]	@ 0x28
		temp += PAGE_SIZE;
 8000b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b7c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000b80:	627b      	str	r3, [r7, #36]	@ 0x24
	while ((page_start_concat != 0xFFFFFFFF) || (temp == NUM_OF_PAGES)) {
 8000b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000b88:	d1d3      	bne.n	8000b32 <find_next_blank_page+0xae>
 8000b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000b90:	d0cf      	beq.n	8000b32 <find_next_blank_page+0xae>
	}

	if (page_address == (NUM_OF_PAGES * PAGE_SIZE)) {
 8000b92:	6a3b      	ldr	r3, [r7, #32]
 8000b94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b98:	d102      	bne.n	8000ba0 <find_next_blank_page+0x11c>
		*end_of_flash_ptr = GPIO_PIN_RESET;
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	701a      	strb	r2, [r3, #0]
	}
	return page_address;
 8000ba0:	6a3b      	ldr	r3, [r7, #32]
 8000ba2:	46b5      	mov	sp, r6
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3734      	adds	r7, #52	@ 0x34
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000013 	.word	0x20000013

08000bb4 <read_page_spi>:

void read_page_spi(uint8_t data_read[PAGE_SIZE], SPI_HandleTypeDef *hspi, uint32_t addr, GPIO_Config config) {
 8000bb4:	b082      	sub	sp, #8
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b088      	sub	sp, #32
 8000bba:	af04      	add	r7, sp, #16
 8000bbc:	60f8      	str	r0, [r7, #12]
 8000bbe:	60b9      	str	r1, [r7, #8]
 8000bc0:	607a      	str	r2, [r7, #4]
 8000bc2:	61fb      	str	r3, [r7, #28]

	// Read the status register to ensure no write is currently in progress
	check_busy(hspi, config, BSY_TIMEOUT_MS);
 8000bc4:	2305      	movs	r3, #5
 8000bc6:	f107 021c 	add.w	r2, r7, #28
 8000bca:	ca06      	ldmia	r2, {r1, r2}
 8000bcc:	68b8      	ldr	r0, [r7, #8]
 8000bce:	f7ff fe82 	bl	80008d6 <check_busy>
	spi_read_data(&FLASH_READEN, PAGE_SIZE, data_read, hspi, addr, config.GPIOx, config.GPIO_Pin);
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	8c3a      	ldrh	r2, [r7, #32]
 8000bd6:	9202      	str	r2, [sp, #8]
 8000bd8:	9301      	str	r3, [sp, #4]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	9300      	str	r3, [sp, #0]
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	68fa      	ldr	r2, [r7, #12]
 8000be2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000be6:	4805      	ldr	r0, [pc, #20]	@ (8000bfc <read_page_spi+0x48>)
 8000be8:	f001 fd20 	bl	800262c <spi_read_data>
}
 8000bec:	bf00      	nop
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bf6:	b002      	add	sp, #8
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	20000013 	.word	0x20000013

08000c00 <read_manufacturer_id>:

void read_manufacturer_id(uint8_t manu[2], SPI_HandleTypeDef *hspi, GPIO_Config config) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	@ 0x28
 8000c04:	af04      	add	r7, sp, #16
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	4639      	mov	r1, r7
 8000c0c:	e881 000c 	stmia.w	r1, {r2, r3}

	// Read the status register to ensure no write is currently in progress
	check_busy(hspi, config, BSY_TIMEOUT_MS);
 8000c10:	2305      	movs	r3, #5
 8000c12:	463a      	mov	r2, r7
 8000c14:	ca06      	ldmia	r2, {r1, r2}
 8000c16:	68b8      	ldr	r0, [r7, #8]
 8000c18:	f7ff fe5d 	bl	80008d6 <check_busy>

	// Read the entire contents of a page starting from the given address
	uint8_t addr = 0x00;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	75fb      	strb	r3, [r7, #23]
	spi_read_data(&FLASH_READ_MANU, 2, manu, hspi, addr, config.GPIOx, config.GPIO_Pin);
 8000c20:	7dfb      	ldrb	r3, [r7, #23]
 8000c22:	683a      	ldr	r2, [r7, #0]
 8000c24:	88b9      	ldrh	r1, [r7, #4]
 8000c26:	9102      	str	r1, [sp, #8]
 8000c28:	9201      	str	r2, [sp, #4]
 8000c2a:	9300      	str	r3, [sp, #0]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	68fa      	ldr	r2, [r7, #12]
 8000c30:	2102      	movs	r1, #2
 8000c32:	4803      	ldr	r0, [pc, #12]	@ (8000c40 <read_manufacturer_id+0x40>)
 8000c34:	f001 fcfa 	bl	800262c <spi_read_data>
}
 8000c38:	bf00      	nop
 8000c3a:	3718      	adds	r7, #24
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000014 	.word	0x20000014

08000c44 <create_GPIO_Config>:
 */

#include "gpio_struct.h"

// Function to initialize the GPIO_Config struct
GPIO_Config create_GPIO_Config(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8000c44:	b480      	push	{r7}
 8000c46:	b087      	sub	sp, #28
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	4613      	mov	r3, r2
 8000c50:	80fb      	strh	r3, [r7, #6]
    GPIO_Config new_config;
    new_config.GPIOx = GPIOx;
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	613b      	str	r3, [r7, #16]
    new_config.GPIO_Pin = GPIO_Pin;
 8000c56:	88fb      	ldrh	r3, [r7, #6]
 8000c58:	82bb      	strh	r3, [r7, #20]
    return new_config;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	f107 0310 	add.w	r3, r7, #16
 8000c62:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c66:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000c6a:	68f8      	ldr	r0, [r7, #12]
 8000c6c:	371c      	adds	r7, #28
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <i2c_read_reg>:
 *      Author: aidencontini
 */

#include "i2c_driver.h"

HAL_StatusTypeDef i2c_read_reg(I2C_HandleTypeDef* hi2c, uint8_t* data_ptr, uint8_t dev_addr, uint8_t* register_addr) {
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b088      	sub	sp, #32
 8000c7a:	af02      	add	r7, sp, #8
 8000c7c:	60f8      	str	r0, [r7, #12]
 8000c7e:	60b9      	str	r1, [r7, #8]
 8000c80:	603b      	str	r3, [r7, #0]
 8000c82:	4613      	mov	r3, r2
 8000c84:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(hi2c, (dev_addr << 1) & 0xFE, register_addr, 1, I2C_TIMEOUT_SML);
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	b299      	uxth	r1, r3
 8000c90:	2301      	movs	r3, #1
 8000c92:	9300      	str	r3, [sp, #0]
 8000c94:	2301      	movs	r3, #1
 8000c96:	683a      	ldr	r2, [r7, #0]
 8000c98:	68f8      	ldr	r0, [r7, #12]
 8000c9a:	f004 f91f 	bl	8004edc <HAL_I2C_Master_Transmit>
	HAL_StatusTypeDef hal_status = HAL_I2C_Master_Receive(hi2c, (dev_addr << 1) | 0x01, data_ptr, 1, I2C_TIMEOUT_SML);
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	b21b      	sxth	r3, r3
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	b21b      	sxth	r3, r3
 8000caa:	b299      	uxth	r1, r3
 8000cac:	2301      	movs	r3, #1
 8000cae:	9300      	str	r3, [sp, #0]
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	68ba      	ldr	r2, [r7, #8]
 8000cb4:	68f8      	ldr	r0, [r7, #12]
 8000cb6:	f004 fa0f 	bl	80050d8 <HAL_I2C_Master_Receive>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	75fb      	strb	r3, [r7, #23]
	return hal_status;
 8000cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <i2c_burst_read>:

HAL_StatusTypeDef i2c_burst_read(I2C_HandleTypeDef* hi2c, uint8_t dev_addr, uint8_t register_addr, uint8_t size, uint8_t data_buffer[size]) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af02      	add	r7, sp, #8
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	4608      	mov	r0, r1
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	70fb      	strb	r3, [r7, #3]
 8000cda:	460b      	mov	r3, r1
 8000cdc:	70bb      	strb	r3, [r7, #2]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	707b      	strb	r3, [r7, #1]
	// In order to read multiple bytes, it is necessary to assert the most significant bit of the sub-address field.
	uint8_t addr = register_addr | 0x80;
 8000ce2:	78bb      	ldrb	r3, [r7, #2]
 8000ce4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(hi2c, (dev_addr << 1) & 0xFE, &addr, 1, I2C_TIMEOUT_SML);
 8000cec:	78fb      	ldrb	r3, [r7, #3]
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	b299      	uxth	r1, r3
 8000cf6:	f107 020e 	add.w	r2, r7, #14
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	9300      	str	r3, [sp, #0]
 8000cfe:	2301      	movs	r3, #1
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f004 f8eb 	bl	8004edc <HAL_I2C_Master_Transmit>
	HAL_StatusTypeDef hal_status =  HAL_I2C_Master_Receive(hi2c, (dev_addr << 1) | 0x01, data_buffer, size, I2C_TIMEOUT_LRG);
 8000d06:	78fb      	ldrb	r3, [r7, #3]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	b21b      	sxth	r3, r3
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	b21b      	sxth	r3, r3
 8000d12:	b299      	uxth	r1, r3
 8000d14:	787b      	ldrb	r3, [r7, #1]
 8000d16:	b29b      	uxth	r3, r3
 8000d18:	220a      	movs	r2, #10
 8000d1a:	9200      	str	r2, [sp, #0]
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f004 f9da 	bl	80050d8 <HAL_I2C_Master_Receive>
 8000d24:	4603      	mov	r3, r0
 8000d26:	73fb      	strb	r3, [r7, #15]
	return hal_status;
 8000d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3710      	adds	r7, #16
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <i2c_write_reg>:
	HAL_I2C_Master_Transmit(hi2c, (dev_addr << 1) & 0xFE, &addr, 1, I2C_TIMEOUT_SML);
	HAL_StatusTypeDef hal_status =  HAL_I2C_Master_Receive(hi2c, (dev_addr << 1) | 0x01, data_buffer, size, I2C_TIMEOUT_LRG);
	return hal_status;
}

HAL_StatusTypeDef i2c_write_reg(I2C_HandleTypeDef* hi2c, uint8_t dev_addr, uint8_t* register_addr, uint8_t data) {
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b088      	sub	sp, #32
 8000d36:	af02      	add	r7, sp, #8
 8000d38:	60f8      	str	r0, [r7, #12]
 8000d3a:	607a      	str	r2, [r7, #4]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	460b      	mov	r3, r1
 8000d40:	72fb      	strb	r3, [r7, #11]
 8000d42:	4613      	mov	r3, r2
 8000d44:	72bb      	strb	r3, [r7, #10]
	uint8_t data_tx[2] = {*register_addr, data};
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	753b      	strb	r3, [r7, #20]
 8000d4c:	7abb      	ldrb	r3, [r7, #10]
 8000d4e:	757b      	strb	r3, [r7, #21]
	HAL_StatusTypeDef hal_status = HAL_I2C_Master_Transmit(hi2c, (dev_addr << 1) & 0xFE, data_tx, 2, I2C_TIMEOUT_SML);
 8000d50:	7afb      	ldrb	r3, [r7, #11]
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	b299      	uxth	r1, r3
 8000d5a:	f107 0214 	add.w	r2, r7, #20
 8000d5e:	2301      	movs	r3, #1
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	2302      	movs	r3, #2
 8000d64:	68f8      	ldr	r0, [r7, #12]
 8000d66:	f004 f8b9 	bl	8004edc <HAL_I2C_Master_Transmit>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	75fb      	strb	r3, [r7, #23]
	return hal_status;
 8000d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3718      	adds	r7, #24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d7e:	f002 f947 	bl	8003010 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d82:	f000 f915 	bl	8000fb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d86:	f000 fb95 	bl	80014b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d8a:	f000 fb5d 	bl	8001448 <MX_DMA_Init>
  MX_I2C1_Init();
 8000d8e:	f000 f9b3 	bl	80010f8 <MX_I2C1_Init>
  MX_RTC_Init();
 8000d92:	f000 fa31 	bl	80011f8 <MX_RTC_Init>
  MX_SPI1_Init();
 8000d96:	f000 fa55 	bl	8001244 <MX_SPI1_Init>
  MX_TIM6_Init();
 8000d9a:	f000 fabf 	bl	800131c <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8000d9e:	f000 fb29 	bl	80013f4 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000da2:	f000 fa85 	bl	80012b0 <MX_SPI2_Init>
  MX_CAN2_Init();
 8000da6:	f000 f96f 	bl	8001088 <MX_CAN2_Init>
  MX_TIM7_Init();
 8000daa:	f000 faed 	bl	8001388 <MX_TIM7_Init>
  MX_I2C3_Init();
 8000dae:	f000 f9e3 	bl	8001178 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  systemInit();
 8000db2:	f000 fc67 	bl	8001684 <systemInit>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // If the flight jumper has been removed (GPIO rising edge), reset the time to 0.
	  if(rtc_reset == FLAG_SET) {
 8000db6:	4b66      	ldr	r3, [pc, #408]	@ (8000f50 <main+0x1d8>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d105      	bne.n	8000dca <main+0x52>
		  initialise_rtc_default(&hrtc);
 8000dbe:	4865      	ldr	r0, [pc, #404]	@ (8000f54 <main+0x1dc>)
 8000dc0:	f001 fb64 	bl	800248c <initialise_rtc_default>
		  rtc_reset = FLAG_RESET;
 8000dc4:	4b62      	ldr	r3, [pc, #392]	@ (8000f50 <main+0x1d8>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	701a      	strb	r2, [r3, #0]
	  }

	  // Handle UART receive flag
	  if(uart2_rec_flag == FLAG_SET) {
 8000dca:	4b63      	ldr	r3, [pc, #396]	@ (8000f58 <main+0x1e0>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d104      	bne.n	8000ddc <main+0x64>
		  handleUART();
 8000dd2:	f000 fe61 	bl	8001a98 <handleUART>
		  uart2_rec_flag = FLAG_RESET;
 8000dd6:	4b60      	ldr	r3, [pc, #384]	@ (8000f58 <main+0x1e0>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]
	  }

	  // Handle CAN receive flag
	  if(CAN_RX_Flag == FLAG_SET) {
 8000ddc:	4b5f      	ldr	r3, [pc, #380]	@ (8000f5c <main+0x1e4>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d117      	bne.n	8000e14 <main+0x9c>
		  if((CAN_First_Msg == FLAG_SET) && (flight_state == GROUND)) {
 8000de4:	4b5e      	ldr	r3, [pc, #376]	@ (8000f60 <main+0x1e8>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d106      	bne.n	8000dfa <main+0x82>
 8000dec:	4b5d      	ldr	r3, [pc, #372]	@ (8000f64 <main+0x1ec>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d102      	bne.n	8000dfa <main+0x82>
			  flight_state = LOADED;
 8000df4:	4b5b      	ldr	r3, [pc, #364]	@ (8000f64 <main+0x1ec>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	701a      	strb	r2, [r3, #0]
		  }

		  handleCAN();
 8000dfa:	f000 fde3 	bl	80019c4 <handleCAN>
		  HAL_GPIO_TogglePin(led_green.GPIOx, led_green.GPIO_Pin);
 8000dfe:	4b5a      	ldr	r3, [pc, #360]	@ (8000f68 <main+0x1f0>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a59      	ldr	r2, [pc, #356]	@ (8000f68 <main+0x1f0>)
 8000e04:	8892      	ldrh	r2, [r2, #4]
 8000e06:	4611      	mov	r1, r2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f003 fef0 	bl	8004bee <HAL_GPIO_TogglePin>
		  CAN_RX_Flag = FLAG_RESET;
 8000e0e:	4b53      	ldr	r3, [pc, #332]	@ (8000f5c <main+0x1e4>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]
	  }

	  if (tim7_overflow_flag == FLAG_SET) {
 8000e14:	4b55      	ldr	r3, [pc, #340]	@ (8000f6c <main+0x1f4>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d122      	bne.n	8000e62 <main+0xea>
		  HAL_GPIO_TogglePin(led_orange.GPIOx, led_orange.GPIO_Pin);		// Toggle LED
 8000e1c:	4b54      	ldr	r3, [pc, #336]	@ (8000f70 <main+0x1f8>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a53      	ldr	r2, [pc, #332]	@ (8000f70 <main+0x1f8>)
 8000e22:	8892      	ldrh	r2, [r2, #4]
 8000e24:	4611      	mov	r1, r2
 8000e26:	4618      	mov	r0, r3
 8000e28:	f003 fee1 	bl	8004bee <HAL_GPIO_TogglePin>
		  sysStatus = systemStatus(&hspi1, &hspi2, i2c_bme280, i2c_accel);
 8000e2c:	4b51      	ldr	r3, [pc, #324]	@ (8000f74 <main+0x1fc>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b51      	ldr	r3, [pc, #324]	@ (8000f78 <main+0x200>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4951      	ldr	r1, [pc, #324]	@ (8000f7c <main+0x204>)
 8000e36:	4852      	ldr	r0, [pc, #328]	@ (8000f80 <main+0x208>)
 8000e38:	f000 fff8 	bl	8001e2c <systemStatus>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	461a      	mov	r2, r3
 8000e40:	4b50      	ldr	r3, [pc, #320]	@ (8000f84 <main+0x20c>)
 8000e42:	701a      	strb	r2, [r3, #0]

		  if(sysStatus == 0x00) {
 8000e44:	4b4f      	ldr	r3, [pc, #316]	@ (8000f84 <main+0x20c>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d107      	bne.n	8000e5c <main+0xe4>
			  HAL_GPIO_WritePin(status_led.GPIOx, status_led.GPIO_Pin, GPIO_PIN_SET);	// Turn LED off
 8000e4c:	4b4e      	ldr	r3, [pc, #312]	@ (8000f88 <main+0x210>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a4d      	ldr	r2, [pc, #308]	@ (8000f88 <main+0x210>)
 8000e52:	8891      	ldrh	r1, [r2, #4]
 8000e54:	2201      	movs	r2, #1
 8000e56:	4618      	mov	r0, r3
 8000e58:	f003 feb0 	bl	8004bbc <HAL_GPIO_WritePin>
		  }

		  tim7_overflow_flag = FLAG_RESET;
 8000e5c:	4b43      	ldr	r3, [pc, #268]	@ (8000f6c <main+0x1f4>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	701a      	strb	r2, [r3, #0]
	  }

	  // Handle Timer 6 overflow flag
	  if(tim6_overflow_flag == FLAG_SET) {
 8000e62:	4b4a      	ldr	r3, [pc, #296]	@ (8000f8c <main+0x214>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d10a      	bne.n	8000e80 <main+0x108>
		  readAllSensors(i2c_accel, i2c_bme280, &hrtc);
 8000e6a:	4b43      	ldr	r3, [pc, #268]	@ (8000f78 <main+0x200>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a41      	ldr	r2, [pc, #260]	@ (8000f74 <main+0x1fc>)
 8000e70:	6811      	ldr	r1, [r2, #0]
 8000e72:	4a38      	ldr	r2, [pc, #224]	@ (8000f54 <main+0x1dc>)
 8000e74:	4618      	mov	r0, r3
 8000e76:	f001 fa25 	bl	80022c4 <readAllSensors>
		  tim6_overflow_flag = FLAG_RESET;
 8000e7a:	4b44      	ldr	r3, [pc, #272]	@ (8000f8c <main+0x214>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	701a      	strb	r2, [r3, #0]
	  }

	  // Write data to flash when buffer is full
	  if(byte_tracker > (PAGE_SIZE - READ_SIZE)) {
 8000e80:	4b43      	ldr	r3, [pc, #268]	@ (8000f90 <main+0x218>)
 8000e82:	881b      	ldrh	r3, [r3, #0]
 8000e84:	2beb      	cmp	r3, #235	@ 0xeb
 8000e86:	d953      	bls.n	8000f30 <main+0x1b8>
		  GPIO_PinState flight_mode = HAL_GPIO_ReadPin(jmp_flight.GPIOx, jmp_flight.GPIO_Pin);
 8000e88:	4b42      	ldr	r3, [pc, #264]	@ (8000f94 <main+0x21c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a41      	ldr	r2, [pc, #260]	@ (8000f94 <main+0x21c>)
 8000e8e:	8892      	ldrh	r2, [r2, #4]
 8000e90:	b292      	uxth	r2, r2
 8000e92:	4611      	mov	r1, r2
 8000e94:	4618      	mov	r0, r3
 8000e96:	f003 fe79 	bl	8004b8c <HAL_GPIO_ReadPin>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
		  if((flight_mode & !(end_of_flash)) == FLAG_SET) {
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	4a3d      	ldr	r2, [pc, #244]	@ (8000f98 <main+0x220>)
 8000ea2:	7812      	ldrb	r2, [r2, #0]
 8000ea4:	2a00      	cmp	r2, #0
 8000ea6:	bf0c      	ite	eq
 8000ea8:	2201      	moveq	r2, #1
 8000eaa:	2200      	movne	r2, #0
 8000eac:	b2d2      	uxtb	r2, r2
 8000eae:	4013      	ands	r3, r2
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d133      	bne.n	8000f1c <main+0x1a4>
			  HAL_GPIO_WritePin(led_green.GPIOx, led_green.GPIO_Pin, GPIO_PIN_SET);		// Toggle LED when writing data
 8000eb4:	4b2c      	ldr	r3, [pc, #176]	@ (8000f68 <main+0x1f0>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a2b      	ldr	r2, [pc, #172]	@ (8000f68 <main+0x1f0>)
 8000eba:	8891      	ldrh	r1, [r2, #4]
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f003 fe7c 	bl	8004bbc <HAL_GPIO_WritePin>

			  write_data_spi_dma(data_buffer_tx[buffer_tracker], &hspi1, next_blank_page, cs_spi1);
 8000ec4:	4b35      	ldr	r3, [pc, #212]	@ (8000f9c <main+0x224>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	021b      	lsls	r3, r3, #8
 8000eca:	4a35      	ldr	r2, [pc, #212]	@ (8000fa0 <main+0x228>)
 8000ecc:	1898      	adds	r0, r3, r2
 8000ece:	4b35      	ldr	r3, [pc, #212]	@ (8000fa4 <main+0x22c>)
 8000ed0:	6819      	ldr	r1, [r3, #0]
 8000ed2:	4b35      	ldr	r3, [pc, #212]	@ (8000fa8 <main+0x230>)
 8000ed4:	685a      	ldr	r2, [r3, #4]
 8000ed6:	9200      	str	r2, [sp, #0]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	460a      	mov	r2, r1
 8000edc:	4928      	ldr	r1, [pc, #160]	@ (8000f80 <main+0x208>)
 8000ede:	f7ff fda3 	bl	8000a28 <write_data_spi_dma>
			  write_data_spi_dma(data_buffer_tx[buffer_tracker], &hspi2, next_blank_page, cs_spi2);
 8000ee2:	4b2e      	ldr	r3, [pc, #184]	@ (8000f9c <main+0x224>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	021b      	lsls	r3, r3, #8
 8000ee8:	4a2d      	ldr	r2, [pc, #180]	@ (8000fa0 <main+0x228>)
 8000eea:	1898      	adds	r0, r3, r2
 8000eec:	4b2d      	ldr	r3, [pc, #180]	@ (8000fa4 <main+0x22c>)
 8000eee:	6819      	ldr	r1, [r3, #0]
 8000ef0:	4b2e      	ldr	r3, [pc, #184]	@ (8000fac <main+0x234>)
 8000ef2:	685a      	ldr	r2, [r3, #4]
 8000ef4:	9200      	str	r2, [sp, #0]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	460a      	mov	r2, r1
 8000efa:	4920      	ldr	r1, [pc, #128]	@ (8000f7c <main+0x204>)
 8000efc:	f7ff fd94 	bl	8000a28 <write_data_spi_dma>
			  next_blank_page += PAGE_SIZE;
 8000f00:	4b28      	ldr	r3, [pc, #160]	@ (8000fa4 <main+0x22c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000f08:	4a26      	ldr	r2, [pc, #152]	@ (8000fa4 <main+0x22c>)
 8000f0a:	6013      	str	r3, [r2, #0]

			  HAL_GPIO_WritePin(led_green.GPIOx, led_green.GPIO_Pin, GPIO_PIN_RESET);		// Toggle LED when writing data
 8000f0c:	4b16      	ldr	r3, [pc, #88]	@ (8000f68 <main+0x1f0>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a15      	ldr	r2, [pc, #84]	@ (8000f68 <main+0x1f0>)
 8000f12:	8891      	ldrh	r1, [r2, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f003 fe50 	bl	8004bbc <HAL_GPIO_WritePin>
		  }

		// Reset the buffer trackers
		buffer_tracker = buffer_tracker ^ 0x01;
 8000f1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f9c <main+0x224>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	f083 0301 	eor.w	r3, r3, #1
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4b1d      	ldr	r3, [pc, #116]	@ (8000f9c <main+0x224>)
 8000f28:	701a      	strb	r2, [r3, #0]
		byte_tracker = 0;
 8000f2a:	4b19      	ldr	r3, [pc, #100]	@ (8000f90 <main+0x218>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	801a      	strh	r2, [r3, #0]
	  }

	  if(next_blank_page == (NUM_OF_PAGES*PAGE_SIZE)) {
 8000f30:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa4 <main+0x22c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f38:	f47f af3d 	bne.w	8000db6 <main+0x3e>
		  // TODO - Error Handle if SPI1 not found
		  next_blank_page = find_next_blank_page(&hspi1, &end_of_flash, cs_spi1);
 8000f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa8 <main+0x230>)
 8000f3e:	cb0c      	ldmia	r3, {r2, r3}
 8000f40:	4915      	ldr	r1, [pc, #84]	@ (8000f98 <main+0x220>)
 8000f42:	480f      	ldr	r0, [pc, #60]	@ (8000f80 <main+0x208>)
 8000f44:	f7ff fd9e 	bl	8000a84 <find_next_blank_page>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	4a16      	ldr	r2, [pc, #88]	@ (8000fa4 <main+0x22c>)
 8000f4c:	6013      	str	r3, [r2, #0]
	  if(rtc_reset == FLAG_SET) {
 8000f4e:	e732      	b.n	8000db6 <main+0x3e>
 8000f50:	2000061c 	.word	0x2000061c
 8000f54:	20000118 	.word	0x20000118
 8000f58:	2000038a 	.word	0x2000038a
 8000f5c:	200003b4 	.word	0x200003b4
 8000f60:	200003b5 	.word	0x200003b5
 8000f64:	2000061e 	.word	0x2000061e
 8000f68:	200005e4 	.word	0x200005e4
 8000f6c:	200003b7 	.word	0x200003b7
 8000f70:	200005dc 	.word	0x200005dc
 8000f74:	20000384 	.word	0x20000384
 8000f78:	20000380 	.word	0x20000380
 8000f7c:	20000190 	.word	0x20000190
 8000f80:	20000138 	.word	0x20000138
 8000f84:	2000061d 	.word	0x2000061d
 8000f88:	200005ec 	.word	0x200005ec
 8000f8c:	200003b6 	.word	0x200003b6
 8000f90:	200005d8 	.word	0x200005d8
 8000f94:	20000614 	.word	0x20000614
 8000f98:	200005da 	.word	0x200005da
 8000f9c:	200005b8 	.word	0x200005b8
 8000fa0:	200003b8 	.word	0x200003b8
 8000fa4:	200005d4 	.word	0x200005d4
 8000fa8:	200005f4 	.word	0x200005f4
 8000fac:	20000604 	.word	0x20000604

08000fb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b094      	sub	sp, #80	@ 0x50
 8000fb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb6:	f107 0320 	add.w	r3, r7, #32
 8000fba:	2230      	movs	r2, #48	@ 0x30
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f008 fa9c 	bl	80094fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	4b29      	ldr	r3, [pc, #164]	@ (8001080 <SystemClock_Config+0xd0>)
 8000fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fdc:	4a28      	ldr	r2, [pc, #160]	@ (8001080 <SystemClock_Config+0xd0>)
 8000fde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fe2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fe4:	4b26      	ldr	r3, [pc, #152]	@ (8001080 <SystemClock_Config+0xd0>)
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	4b23      	ldr	r3, [pc, #140]	@ (8001084 <SystemClock_Config+0xd4>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a22      	ldr	r2, [pc, #136]	@ (8001084 <SystemClock_Config+0xd4>)
 8000ffa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ffe:	6013      	str	r3, [r2, #0]
 8001000:	4b20      	ldr	r3, [pc, #128]	@ (8001084 <SystemClock_Config+0xd4>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800100c:	230a      	movs	r3, #10
 800100e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001010:	2301      	movs	r3, #1
 8001012:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001014:	2310      	movs	r3, #16
 8001016:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001018:	2301      	movs	r3, #1
 800101a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800101c:	2302      	movs	r3, #2
 800101e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001020:	2300      	movs	r3, #0
 8001022:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001024:	2310      	movs	r3, #16
 8001026:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001028:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800102c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800102e:	2302      	movs	r3, #2
 8001030:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001032:	2304      	movs	r3, #4
 8001034:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001036:	f107 0320 	add.w	r3, r7, #32
 800103a:	4618      	mov	r0, r3
 800103c:	f004 fea8 	bl	8005d90 <HAL_RCC_OscConfig>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001046:	f000 feeb 	bl	8001e20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800104a:	230f      	movs	r3, #15
 800104c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800104e:	2302      	movs	r3, #2
 8001050:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001056:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800105a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800105c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001060:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001062:	f107 030c 	add.w	r3, r7, #12
 8001066:	2105      	movs	r1, #5
 8001068:	4618      	mov	r0, r3
 800106a:	f005 f909 	bl	8006280 <HAL_RCC_ClockConfig>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001074:	f000 fed4 	bl	8001e20 <Error_Handler>
  }
}
 8001078:	bf00      	nop
 800107a:	3750      	adds	r7, #80	@ 0x50
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40023800 	.word	0x40023800
 8001084:	40007000 	.word	0x40007000

08001088 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800108c:	4b18      	ldr	r3, [pc, #96]	@ (80010f0 <MX_CAN2_Init+0x68>)
 800108e:	4a19      	ldr	r2, [pc, #100]	@ (80010f4 <MX_CAN2_Init+0x6c>)
 8001090:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 24;
 8001092:	4b17      	ldr	r3, [pc, #92]	@ (80010f0 <MX_CAN2_Init+0x68>)
 8001094:	2218      	movs	r2, #24
 8001096:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001098:	4b15      	ldr	r3, [pc, #84]	@ (80010f0 <MX_CAN2_Init+0x68>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800109e:	4b14      	ldr	r3, [pc, #80]	@ (80010f0 <MX_CAN2_Init+0x68>)
 80010a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80010a4:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_11TQ;
 80010a6:	4b12      	ldr	r3, [pc, #72]	@ (80010f0 <MX_CAN2_Init+0x68>)
 80010a8:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 80010ac:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 80010ae:	4b10      	ldr	r3, [pc, #64]	@ (80010f0 <MX_CAN2_Init+0x68>)
 80010b0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80010b4:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80010b6:	4b0e      	ldr	r3, [pc, #56]	@ (80010f0 <MX_CAN2_Init+0x68>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80010bc:	4b0c      	ldr	r3, [pc, #48]	@ (80010f0 <MX_CAN2_Init+0x68>)
 80010be:	2200      	movs	r2, #0
 80010c0:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80010c2:	4b0b      	ldr	r3, [pc, #44]	@ (80010f0 <MX_CAN2_Init+0x68>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80010c8:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <MX_CAN2_Init+0x68>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80010ce:	4b08      	ldr	r3, [pc, #32]	@ (80010f0 <MX_CAN2_Init+0x68>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80010d4:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <MX_CAN2_Init+0x68>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80010da:	4805      	ldr	r0, [pc, #20]	@ (80010f0 <MX_CAN2_Init+0x68>)
 80010dc:	f002 f82e 	bl	800313c <HAL_CAN_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 80010e6:	f000 fe9b 	bl	8001e20 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000048 	.word	0x20000048
 80010f4:	40006800 	.word	0x40006800

080010f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010fc:	4b1b      	ldr	r3, [pc, #108]	@ (800116c <MX_I2C1_Init+0x74>)
 80010fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001170 <MX_I2C1_Init+0x78>)
 8001100:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001102:	4b1a      	ldr	r3, [pc, #104]	@ (800116c <MX_I2C1_Init+0x74>)
 8001104:	4a1b      	ldr	r2, [pc, #108]	@ (8001174 <MX_I2C1_Init+0x7c>)
 8001106:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001108:	4b18      	ldr	r3, [pc, #96]	@ (800116c <MX_I2C1_Init+0x74>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800110e:	4b17      	ldr	r3, [pc, #92]	@ (800116c <MX_I2C1_Init+0x74>)
 8001110:	2200      	movs	r2, #0
 8001112:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001114:	4b15      	ldr	r3, [pc, #84]	@ (800116c <MX_I2C1_Init+0x74>)
 8001116:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800111a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800111c:	4b13      	ldr	r3, [pc, #76]	@ (800116c <MX_I2C1_Init+0x74>)
 800111e:	2200      	movs	r2, #0
 8001120:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001122:	4b12      	ldr	r3, [pc, #72]	@ (800116c <MX_I2C1_Init+0x74>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001128:	4b10      	ldr	r3, [pc, #64]	@ (800116c <MX_I2C1_Init+0x74>)
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800112e:	4b0f      	ldr	r3, [pc, #60]	@ (800116c <MX_I2C1_Init+0x74>)
 8001130:	2200      	movs	r2, #0
 8001132:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001134:	480d      	ldr	r0, [pc, #52]	@ (800116c <MX_I2C1_Init+0x74>)
 8001136:	f003 fd8d 	bl	8004c54 <HAL_I2C_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001140:	f000 fe6e 	bl	8001e20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001144:	2100      	movs	r1, #0
 8001146:	4809      	ldr	r0, [pc, #36]	@ (800116c <MX_I2C1_Init+0x74>)
 8001148:	f004 fd7e 	bl	8005c48 <HAL_I2CEx_ConfigAnalogFilter>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001152:	f000 fe65 	bl	8001e20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001156:	2100      	movs	r1, #0
 8001158:	4804      	ldr	r0, [pc, #16]	@ (800116c <MX_I2C1_Init+0x74>)
 800115a:	f004 fdb1 	bl	8005cc0 <HAL_I2CEx_ConfigDigitalFilter>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001164:	f000 fe5c 	bl	8001e20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000070 	.word	0x20000070
 8001170:	40005400 	.word	0x40005400
 8001174:	000186a0 	.word	0x000186a0

08001178 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800117c:	4b1b      	ldr	r3, [pc, #108]	@ (80011ec <MX_I2C3_Init+0x74>)
 800117e:	4a1c      	ldr	r2, [pc, #112]	@ (80011f0 <MX_I2C3_Init+0x78>)
 8001180:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001182:	4b1a      	ldr	r3, [pc, #104]	@ (80011ec <MX_I2C3_Init+0x74>)
 8001184:	4a1b      	ldr	r2, [pc, #108]	@ (80011f4 <MX_I2C3_Init+0x7c>)
 8001186:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001188:	4b18      	ldr	r3, [pc, #96]	@ (80011ec <MX_I2C3_Init+0x74>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800118e:	4b17      	ldr	r3, [pc, #92]	@ (80011ec <MX_I2C3_Init+0x74>)
 8001190:	2200      	movs	r2, #0
 8001192:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001194:	4b15      	ldr	r3, [pc, #84]	@ (80011ec <MX_I2C3_Init+0x74>)
 8001196:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800119a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800119c:	4b13      	ldr	r3, [pc, #76]	@ (80011ec <MX_I2C3_Init+0x74>)
 800119e:	2200      	movs	r2, #0
 80011a0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80011a2:	4b12      	ldr	r3, [pc, #72]	@ (80011ec <MX_I2C3_Init+0x74>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011a8:	4b10      	ldr	r3, [pc, #64]	@ (80011ec <MX_I2C3_Init+0x74>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ae:	4b0f      	ldr	r3, [pc, #60]	@ (80011ec <MX_I2C3_Init+0x74>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80011b4:	480d      	ldr	r0, [pc, #52]	@ (80011ec <MX_I2C3_Init+0x74>)
 80011b6:	f003 fd4d 	bl	8004c54 <HAL_I2C_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80011c0:	f000 fe2e 	bl	8001e20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011c4:	2100      	movs	r1, #0
 80011c6:	4809      	ldr	r0, [pc, #36]	@ (80011ec <MX_I2C3_Init+0x74>)
 80011c8:	f004 fd3e 	bl	8005c48 <HAL_I2CEx_ConfigAnalogFilter>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80011d2:	f000 fe25 	bl	8001e20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80011d6:	2100      	movs	r1, #0
 80011d8:	4804      	ldr	r0, [pc, #16]	@ (80011ec <MX_I2C3_Init+0x74>)
 80011da:	f004 fd71 	bl	8005cc0 <HAL_I2CEx_ConfigDigitalFilter>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80011e4:	f000 fe1c 	bl	8001e20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	200000c4 	.word	0x200000c4
 80011f0:	40005c00 	.word	0x40005c00
 80011f4:	000186a0 	.word	0x000186a0

080011f8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80011fc:	4b0f      	ldr	r3, [pc, #60]	@ (800123c <MX_RTC_Init+0x44>)
 80011fe:	4a10      	ldr	r2, [pc, #64]	@ (8001240 <MX_RTC_Init+0x48>)
 8001200:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001202:	4b0e      	ldr	r3, [pc, #56]	@ (800123c <MX_RTC_Init+0x44>)
 8001204:	2200      	movs	r2, #0
 8001206:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001208:	4b0c      	ldr	r3, [pc, #48]	@ (800123c <MX_RTC_Init+0x44>)
 800120a:	227f      	movs	r2, #127	@ 0x7f
 800120c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800120e:	4b0b      	ldr	r3, [pc, #44]	@ (800123c <MX_RTC_Init+0x44>)
 8001210:	22ff      	movs	r2, #255	@ 0xff
 8001212:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001214:	4b09      	ldr	r3, [pc, #36]	@ (800123c <MX_RTC_Init+0x44>)
 8001216:	2200      	movs	r2, #0
 8001218:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800121a:	4b08      	ldr	r3, [pc, #32]	@ (800123c <MX_RTC_Init+0x44>)
 800121c:	2200      	movs	r2, #0
 800121e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001220:	4b06      	ldr	r3, [pc, #24]	@ (800123c <MX_RTC_Init+0x44>)
 8001222:	2200      	movs	r2, #0
 8001224:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001226:	4805      	ldr	r0, [pc, #20]	@ (800123c <MX_RTC_Init+0x44>)
 8001228:	f005 fbca 	bl	80069c0 <HAL_RTC_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001232:	f000 fdf5 	bl	8001e20 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000118 	.word	0x20000118
 8001240:	40002800 	.word	0x40002800

08001244 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001248:	4b17      	ldr	r3, [pc, #92]	@ (80012a8 <MX_SPI1_Init+0x64>)
 800124a:	4a18      	ldr	r2, [pc, #96]	@ (80012ac <MX_SPI1_Init+0x68>)
 800124c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800124e:	4b16      	ldr	r3, [pc, #88]	@ (80012a8 <MX_SPI1_Init+0x64>)
 8001250:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001254:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001256:	4b14      	ldr	r3, [pc, #80]	@ (80012a8 <MX_SPI1_Init+0x64>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800125c:	4b12      	ldr	r3, [pc, #72]	@ (80012a8 <MX_SPI1_Init+0x64>)
 800125e:	2200      	movs	r2, #0
 8001260:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001262:	4b11      	ldr	r3, [pc, #68]	@ (80012a8 <MX_SPI1_Init+0x64>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001268:	4b0f      	ldr	r3, [pc, #60]	@ (80012a8 <MX_SPI1_Init+0x64>)
 800126a:	2200      	movs	r2, #0
 800126c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800126e:	4b0e      	ldr	r3, [pc, #56]	@ (80012a8 <MX_SPI1_Init+0x64>)
 8001270:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001274:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001276:	4b0c      	ldr	r3, [pc, #48]	@ (80012a8 <MX_SPI1_Init+0x64>)
 8001278:	2208      	movs	r2, #8
 800127a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800127c:	4b0a      	ldr	r3, [pc, #40]	@ (80012a8 <MX_SPI1_Init+0x64>)
 800127e:	2200      	movs	r2, #0
 8001280:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001282:	4b09      	ldr	r3, [pc, #36]	@ (80012a8 <MX_SPI1_Init+0x64>)
 8001284:	2200      	movs	r2, #0
 8001286:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001288:	4b07      	ldr	r3, [pc, #28]	@ (80012a8 <MX_SPI1_Init+0x64>)
 800128a:	2200      	movs	r2, #0
 800128c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800128e:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <MX_SPI1_Init+0x64>)
 8001290:	220a      	movs	r2, #10
 8001292:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001294:	4804      	ldr	r0, [pc, #16]	@ (80012a8 <MX_SPI1_Init+0x64>)
 8001296:	f005 fe9f 	bl	8006fd8 <HAL_SPI_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012a0:	f000 fdbe 	bl	8001e20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000138 	.word	0x20000138
 80012ac:	40013000 	.word	0x40013000

080012b0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80012b4:	4b17      	ldr	r3, [pc, #92]	@ (8001314 <MX_SPI2_Init+0x64>)
 80012b6:	4a18      	ldr	r2, [pc, #96]	@ (8001318 <MX_SPI2_Init+0x68>)
 80012b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012ba:	4b16      	ldr	r3, [pc, #88]	@ (8001314 <MX_SPI2_Init+0x64>)
 80012bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012c2:	4b14      	ldr	r3, [pc, #80]	@ (8001314 <MX_SPI2_Init+0x64>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80012c8:	4b12      	ldr	r3, [pc, #72]	@ (8001314 <MX_SPI2_Init+0x64>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012ce:	4b11      	ldr	r3, [pc, #68]	@ (8001314 <MX_SPI2_Init+0x64>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001314 <MX_SPI2_Init+0x64>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80012da:	4b0e      	ldr	r3, [pc, #56]	@ (8001314 <MX_SPI2_Init+0x64>)
 80012dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012e0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001314 <MX_SPI2_Init+0x64>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001314 <MX_SPI2_Init+0x64>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012ee:	4b09      	ldr	r3, [pc, #36]	@ (8001314 <MX_SPI2_Init+0x64>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012f4:	4b07      	ldr	r3, [pc, #28]	@ (8001314 <MX_SPI2_Init+0x64>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80012fa:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <MX_SPI2_Init+0x64>)
 80012fc:	220a      	movs	r2, #10
 80012fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001300:	4804      	ldr	r0, [pc, #16]	@ (8001314 <MX_SPI2_Init+0x64>)
 8001302:	f005 fe69 	bl	8006fd8 <HAL_SPI_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800130c:	f000 fd88 	bl	8001e20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000190 	.word	0x20000190
 8001318:	40003800 	.word	0x40003800

0800131c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001322:	463b      	mov	r3, r7
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800132a:	4b15      	ldr	r3, [pc, #84]	@ (8001380 <MX_TIM6_Init+0x64>)
 800132c:	4a15      	ldr	r2, [pc, #84]	@ (8001384 <MX_TIM6_Init+0x68>)
 800132e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 20999;
 8001330:	4b13      	ldr	r3, [pc, #76]	@ (8001380 <MX_TIM6_Init+0x64>)
 8001332:	f245 2207 	movw	r2, #20999	@ 0x5207
 8001336:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001338:	4b11      	ldr	r3, [pc, #68]	@ (8001380 <MX_TIM6_Init+0x64>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 80;
 800133e:	4b10      	ldr	r3, [pc, #64]	@ (8001380 <MX_TIM6_Init+0x64>)
 8001340:	2250      	movs	r2, #80	@ 0x50
 8001342:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001344:	4b0e      	ldr	r3, [pc, #56]	@ (8001380 <MX_TIM6_Init+0x64>)
 8001346:	2200      	movs	r2, #0
 8001348:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800134a:	480d      	ldr	r0, [pc, #52]	@ (8001380 <MX_TIM6_Init+0x64>)
 800134c:	f006 fd62 	bl	8007e14 <HAL_TIM_Base_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001356:	f000 fd63 	bl	8001e20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135a:	2300      	movs	r3, #0
 800135c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001362:	463b      	mov	r3, r7
 8001364:	4619      	mov	r1, r3
 8001366:	4806      	ldr	r0, [pc, #24]	@ (8001380 <MX_TIM6_Init+0x64>)
 8001368:	f006 ffe2 	bl	8008330 <HAL_TIMEx_MasterConfigSynchronization>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001372:	f000 fd55 	bl	8001e20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200002a8 	.word	0x200002a8
 8001384:	40001000 	.word	0x40001000

08001388 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800138e:	463b      	mov	r3, r7
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001396:	4b15      	ldr	r3, [pc, #84]	@ (80013ec <MX_TIM7_Init+0x64>)
 8001398:	4a15      	ldr	r2, [pc, #84]	@ (80013f0 <MX_TIM7_Init+0x68>)
 800139a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 20999;
 800139c:	4b13      	ldr	r3, [pc, #76]	@ (80013ec <MX_TIM7_Init+0x64>)
 800139e:	f245 2207 	movw	r2, #20999	@ 0x5207
 80013a2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a4:	4b11      	ldr	r3, [pc, #68]	@ (80013ec <MX_TIM7_Init+0x64>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 4000;
 80013aa:	4b10      	ldr	r3, [pc, #64]	@ (80013ec <MX_TIM7_Init+0x64>)
 80013ac:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80013b0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	@ (80013ec <MX_TIM7_Init+0x64>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80013b8:	480c      	ldr	r0, [pc, #48]	@ (80013ec <MX_TIM7_Init+0x64>)
 80013ba:	f006 fd2b 	bl	8007e14 <HAL_TIM_Base_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80013c4:	f000 fd2c 	bl	8001e20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c8:	2300      	movs	r3, #0
 80013ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80013d0:	463b      	mov	r3, r7
 80013d2:	4619      	mov	r1, r3
 80013d4:	4805      	ldr	r0, [pc, #20]	@ (80013ec <MX_TIM7_Init+0x64>)
 80013d6:	f006 ffab 	bl	8008330 <HAL_TIMEx_MasterConfigSynchronization>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80013e0:	f000 fd1e 	bl	8001e20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	200002f0 	.word	0x200002f0
 80013f0:	40001400 	.word	0x40001400

080013f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013f8:	4b11      	ldr	r3, [pc, #68]	@ (8001440 <MX_USART2_UART_Init+0x4c>)
 80013fa:	4a12      	ldr	r2, [pc, #72]	@ (8001444 <MX_USART2_UART_Init+0x50>)
 80013fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013fe:	4b10      	ldr	r3, [pc, #64]	@ (8001440 <MX_USART2_UART_Init+0x4c>)
 8001400:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001404:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001406:	4b0e      	ldr	r3, [pc, #56]	@ (8001440 <MX_USART2_UART_Init+0x4c>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800140c:	4b0c      	ldr	r3, [pc, #48]	@ (8001440 <MX_USART2_UART_Init+0x4c>)
 800140e:	2200      	movs	r2, #0
 8001410:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001412:	4b0b      	ldr	r3, [pc, #44]	@ (8001440 <MX_USART2_UART_Init+0x4c>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001418:	4b09      	ldr	r3, [pc, #36]	@ (8001440 <MX_USART2_UART_Init+0x4c>)
 800141a:	220c      	movs	r2, #12
 800141c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141e:	4b08      	ldr	r3, [pc, #32]	@ (8001440 <MX_USART2_UART_Init+0x4c>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001424:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <MX_USART2_UART_Init+0x4c>)
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800142a:	4805      	ldr	r0, [pc, #20]	@ (8001440 <MX_USART2_UART_Init+0x4c>)
 800142c:	f007 f810 	bl	8008450 <HAL_UART_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001436:	f000 fcf3 	bl	8001e20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000338 	.word	0x20000338
 8001444:	40004400 	.word	0x40004400

08001448 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	4b17      	ldr	r3, [pc, #92]	@ (80014b0 <MX_DMA_Init+0x68>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	4a16      	ldr	r2, [pc, #88]	@ (80014b0 <MX_DMA_Init+0x68>)
 8001458:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800145c:	6313      	str	r3, [r2, #48]	@ 0x30
 800145e:	4b14      	ldr	r3, [pc, #80]	@ (80014b0 <MX_DMA_Init+0x68>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	603b      	str	r3, [r7, #0]
 800146e:	4b10      	ldr	r3, [pc, #64]	@ (80014b0 <MX_DMA_Init+0x68>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001472:	4a0f      	ldr	r2, [pc, #60]	@ (80014b0 <MX_DMA_Init+0x68>)
 8001474:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001478:	6313      	str	r3, [r2, #48]	@ 0x30
 800147a:	4b0d      	ldr	r3, [pc, #52]	@ (80014b0 <MX_DMA_Init+0x68>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001482:	603b      	str	r3, [r7, #0]
 8001484:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	2100      	movs	r1, #0
 800148a:	200f      	movs	r0, #15
 800148c:	f002 fd99 	bl	8003fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001490:	200f      	movs	r0, #15
 8001492:	f002 fdb2 	bl	8003ffa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2100      	movs	r1, #0
 800149a:	203b      	movs	r0, #59	@ 0x3b
 800149c:	f002 fd91 	bl	8003fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80014a0:	203b      	movs	r0, #59	@ 0x3b
 80014a2:	f002 fdaa 	bl	8003ffa <HAL_NVIC_EnableIRQ>

}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40023800 	.word	0x40023800

080014b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08a      	sub	sp, #40	@ 0x28
 80014b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
 80014c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	4b5b      	ldr	r3, [pc, #364]	@ (800163c <MX_GPIO_Init+0x188>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d2:	4a5a      	ldr	r2, [pc, #360]	@ (800163c <MX_GPIO_Init+0x188>)
 80014d4:	f043 0304 	orr.w	r3, r3, #4
 80014d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014da:	4b58      	ldr	r3, [pc, #352]	@ (800163c <MX_GPIO_Init+0x188>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	f003 0304 	and.w	r3, r3, #4
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	4b54      	ldr	r3, [pc, #336]	@ (800163c <MX_GPIO_Init+0x188>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	4a53      	ldr	r2, [pc, #332]	@ (800163c <MX_GPIO_Init+0x188>)
 80014f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f6:	4b51      	ldr	r3, [pc, #324]	@ (800163c <MX_GPIO_Init+0x188>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	4b4d      	ldr	r3, [pc, #308]	@ (800163c <MX_GPIO_Init+0x188>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	4a4c      	ldr	r2, [pc, #304]	@ (800163c <MX_GPIO_Init+0x188>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6313      	str	r3, [r2, #48]	@ 0x30
 8001512:	4b4a      	ldr	r3, [pc, #296]	@ (800163c <MX_GPIO_Init+0x188>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	4b46      	ldr	r3, [pc, #280]	@ (800163c <MX_GPIO_Init+0x188>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	4a45      	ldr	r2, [pc, #276]	@ (800163c <MX_GPIO_Init+0x188>)
 8001528:	f043 0302 	orr.w	r3, r3, #2
 800152c:	6313      	str	r3, [r2, #48]	@ 0x30
 800152e:	4b43      	ldr	r3, [pc, #268]	@ (800163c <MX_GPIO_Init+0x188>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	603b      	str	r3, [r7, #0]
 800153e:	4b3f      	ldr	r3, [pc, #252]	@ (800163c <MX_GPIO_Init+0x188>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001542:	4a3e      	ldr	r2, [pc, #248]	@ (800163c <MX_GPIO_Init+0x188>)
 8001544:	f043 0308 	orr.w	r3, r3, #8
 8001548:	6313      	str	r3, [r2, #48]	@ 0x30
 800154a:	4b3c      	ldr	r3, [pc, #240]	@ (800163c <MX_GPIO_Init+0x188>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154e:	f003 0308 	and.w	r3, r3, #8
 8001552:	603b      	str	r3, [r7, #0]
 8001554:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI2_WP_Pin|SPI2_CS_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8001556:	2200      	movs	r2, #0
 8001558:	2113      	movs	r1, #19
 800155a:	4839      	ldr	r0, [pc, #228]	@ (8001640 <MX_GPIO_Init+0x18c>)
 800155c:	f003 fb2e 	bl	8004bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_WP_GPIO_Port, SPI1_WP_Pin, GPIO_PIN_RESET);
 8001560:	2200      	movs	r2, #0
 8001562:	2110      	movs	r1, #16
 8001564:	4837      	ldr	r0, [pc, #220]	@ (8001644 <MX_GPIO_Init+0x190>)
 8001566:	f003 fb29 	bl	8004bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 8001570:	4835      	ldr	r0, [pc, #212]	@ (8001648 <MX_GPIO_Init+0x194>)
 8001572:	f003 fb23 	bl	8004bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI2_WP_Pin */
  GPIO_InitStruct.Pin = SPI2_WP_Pin;
 8001576:	2301      	movs	r3, #1
 8001578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157a:	2301      	movs	r3, #1
 800157c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800157e:	2301      	movs	r3, #1
 8001580:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2300      	movs	r3, #0
 8001584:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_WP_GPIO_Port, &GPIO_InitStruct);
 8001586:	f107 0314 	add.w	r3, r7, #20
 800158a:	4619      	mov	r1, r3
 800158c:	482c      	ldr	r0, [pc, #176]	@ (8001640 <MX_GPIO_Init+0x18c>)
 800158e:	f003 f951 	bl	8004834 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_CS_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin|SPI1_CS_Pin;
 8001592:	2312      	movs	r3, #18
 8001594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001596:	2301      	movs	r3, #1
 8001598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	2300      	movs	r3, #0
 80015a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	4619      	mov	r1, r3
 80015a8:	4825      	ldr	r0, [pc, #148]	@ (8001640 <MX_GPIO_Init+0x18c>)
 80015aa:	f003 f943 	bl	8004834 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_WP_Pin */
  GPIO_InitStruct.Pin = SPI1_WP_Pin;
 80015ae:	2310      	movs	r3, #16
 80015b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b2:	2301      	movs	r3, #1
 80015b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015b6:	2301      	movs	r3, #1
 80015b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ba:	2300      	movs	r3, #0
 80015bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_WP_GPIO_Port, &GPIO_InitStruct);
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	4619      	mov	r1, r3
 80015c4:	481f      	ldr	r0, [pc, #124]	@ (8001644 <MX_GPIO_Init+0x190>)
 80015c6:	f003 f935 	bl	8004834 <HAL_GPIO_Init>

  /*Configure GPIO pin : Flight_JMP_Pin */
  GPIO_InitStruct.Pin = Flight_JMP_Pin;
 80015ca:	2302      	movs	r3, #2
 80015cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015ce:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Flight_JMP_GPIO_Port, &GPIO_InitStruct);
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	4619      	mov	r1, r3
 80015de:	481a      	ldr	r0, [pc, #104]	@ (8001648 <MX_GPIO_Init+0x194>)
 80015e0:	f003 f928 	bl	8004834 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED1_Pin|LED2_Pin;
 80015e4:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80015e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ea:	2301      	movs	r3, #1
 80015ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015ee:	2302      	movs	r3, #2
 80015f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	2300      	movs	r3, #0
 80015f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	4812      	ldr	r0, [pc, #72]	@ (8001648 <MX_GPIO_Init+0x194>)
 80015fe:	f003 f919 	bl	8004834 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001602:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001608:	2302      	movs	r3, #2
 800160a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001610:	2303      	movs	r3, #3
 8001612:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001614:	2309      	movs	r3, #9
 8001616:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	4619      	mov	r1, r3
 800161e:	4809      	ldr	r0, [pc, #36]	@ (8001644 <MX_GPIO_Init+0x190>)
 8001620:	f003 f908 	bl	8004834 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001624:	2200      	movs	r2, #0
 8001626:	2100      	movs	r1, #0
 8001628:	2007      	movs	r0, #7
 800162a:	f002 fcca 	bl	8003fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800162e:	2007      	movs	r0, #7
 8001630:	f002 fce3 	bl	8003ffa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001634:	bf00      	nop
 8001636:	3728      	adds	r7, #40	@ 0x28
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40023800 	.word	0x40023800
 8001640:	40020800 	.word	0x40020800
 8001644:	40020000 	.word	0x40020000
 8001648:	40020400 	.word	0x40020400

0800164c <clean_data_buffer>:

/* USER CODE BEGIN 4 */
void clean_data_buffer(uint16_t array_size, uint8_t data_array[array_size]) {
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	6039      	str	r1, [r7, #0]
 8001656:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < array_size; ++i) {
 8001658:	2300      	movs	r3, #0
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	e007      	b.n	800166e <clean_data_buffer+0x22>
    	data_array[i] = 0xFF;  // Initialize each element to 0xFF
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	4413      	add	r3, r2
 8001664:	22ff      	movs	r2, #255	@ 0xff
 8001666:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < array_size; ++i) {
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	3301      	adds	r3, #1
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	88fb      	ldrh	r3, [r7, #6]
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	429a      	cmp	r2, r3
 8001674:	dbf3      	blt.n	800165e <clean_data_buffer+0x12>
    }
}
 8001676:	bf00      	nop
 8001678:	bf00      	nop
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <systemInit>:

void systemInit() {
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
	i2c_accel = &hi2c3;
 800168a:	4b67      	ldr	r3, [pc, #412]	@ (8001828 <systemInit+0x1a4>)
 800168c:	4a67      	ldr	r2, [pc, #412]	@ (800182c <systemInit+0x1a8>)
 800168e:	601a      	str	r2, [r3, #0]
	i2c_bme280 = &hi2c1;
 8001690:	4b67      	ldr	r3, [pc, #412]	@ (8001830 <systemInit+0x1ac>)
 8001692:	4a68      	ldr	r2, [pc, #416]	@ (8001834 <systemInit+0x1b0>)
 8001694:	601a      	str	r2, [r3, #0]

	configureCAN();
 8001696:	f000 fb9f 	bl	8001dd8 <configureCAN>
	CAN_TxMailbox = 0;
 800169a:	4b67      	ldr	r3, [pc, #412]	@ (8001838 <systemInit+0x1b4>)
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
	CAN_First_Msg = FLAG_RESET;
 80016a0:	4b66      	ldr	r3, [pc, #408]	@ (800183c <systemInit+0x1b8>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	701a      	strb	r2, [r3, #0]
	clean_data_buffer(8, CAN_RxData);
 80016a6:	4966      	ldr	r1, [pc, #408]	@ (8001840 <systemInit+0x1bc>)
 80016a8:	2008      	movs	r0, #8
 80016aa:	f7ff ffcf 	bl	800164c <clean_data_buffer>

	gpio_set_config();
 80016ae:	f000 f901 	bl	80018b4 <gpio_set_config>
	HAL_GPIO_WritePin(led_orange.GPIOx, led_orange.GPIO_Pin, GPIO_PIN_RESET);	// Turn LED off
 80016b2:	4b64      	ldr	r3, [pc, #400]	@ (8001844 <systemInit+0x1c0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a63      	ldr	r2, [pc, #396]	@ (8001844 <systemInit+0x1c0>)
 80016b8:	8891      	ldrh	r1, [r2, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	4618      	mov	r0, r3
 80016be:	f003 fa7d 	bl	8004bbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(status_led.GPIOx, status_led.GPIO_Pin, GPIO_PIN_RESET);	// Turn LED off
 80016c2:	4b61      	ldr	r3, [pc, #388]	@ (8001848 <systemInit+0x1c4>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a60      	ldr	r2, [pc, #384]	@ (8001848 <systemInit+0x1c4>)
 80016c8:	8891      	ldrh	r1, [r2, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	4618      	mov	r0, r3
 80016ce:	f003 fa75 	bl	8004bbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(cs_spi1.GPIOx, cs_spi1.GPIO_Pin, GPIO_PIN_SET);		// SET SPI CS High to disable bus 1
 80016d2:	4b5e      	ldr	r3, [pc, #376]	@ (800184c <systemInit+0x1c8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a5d      	ldr	r2, [pc, #372]	@ (800184c <systemInit+0x1c8>)
 80016d8:	8891      	ldrh	r1, [r2, #4]
 80016da:	2201      	movs	r2, #1
 80016dc:	4618      	mov	r0, r3
 80016de:	f003 fa6d 	bl	8004bbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(cs_spi2.GPIOx, cs_spi2.GPIO_Pin, GPIO_PIN_SET);		// SET SPI CS High to disable bus 2
 80016e2:	4b5b      	ldr	r3, [pc, #364]	@ (8001850 <systemInit+0x1cc>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a5a      	ldr	r2, [pc, #360]	@ (8001850 <systemInit+0x1cc>)
 80016e8:	8891      	ldrh	r1, [r2, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	4618      	mov	r0, r3
 80016ee:	f003 fa65 	bl	8004bbc <HAL_GPIO_WritePin>

	// Clean the data buffer and set all values to 0xFF
	clean_data_buffer(PAGE_SIZE, data_buffer_tx[0]);
 80016f2:	4958      	ldr	r1, [pc, #352]	@ (8001854 <systemInit+0x1d0>)
 80016f4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80016f8:	f7ff ffa8 	bl	800164c <clean_data_buffer>
	clean_data_buffer(PAGE_SIZE, data_buffer_tx[1]);
 80016fc:	4956      	ldr	r1, [pc, #344]	@ (8001858 <systemInit+0x1d4>)
 80016fe:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001702:	f7ff ffa3 	bl	800164c <clean_data_buffer>

	for (uint8_t i = 0; i < 6; i++) {
 8001706:	2300      	movs	r3, #0
 8001708:	73fb      	strb	r3, [r7, #15]
 800170a:	e00e      	b.n	800172a <systemInit+0xa6>
		accel_data[i] = 0x00;
 800170c:	7bfb      	ldrb	r3, [r7, #15]
 800170e:	4a53      	ldr	r2, [pc, #332]	@ (800185c <systemInit+0x1d8>)
 8001710:	2100      	movs	r1, #0
 8001712:	54d1      	strb	r1, [r2, r3]
		bme280_data_0[i] = 0x00;
 8001714:	7bfb      	ldrb	r3, [r7, #15]
 8001716:	4a52      	ldr	r2, [pc, #328]	@ (8001860 <systemInit+0x1dc>)
 8001718:	2100      	movs	r1, #0
 800171a:	54d1      	strb	r1, [r2, r3]
		bme280_data_1[i] = 0x00;
 800171c:	7bfb      	ldrb	r3, [r7, #15]
 800171e:	4a51      	ldr	r2, [pc, #324]	@ (8001864 <systemInit+0x1e0>)
 8001720:	2100      	movs	r1, #0
 8001722:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 6; i++) {
 8001724:	7bfb      	ldrb	r3, [r7, #15]
 8001726:	3301      	adds	r3, #1
 8001728:	73fb      	strb	r3, [r7, #15]
 800172a:	7bfb      	ldrb	r3, [r7, #15]
 800172c:	2b05      	cmp	r3, #5
 800172e:	d9ed      	bls.n	800170c <systemInit+0x88>
	}

	// Initialise the peripherals
	init_accel(i2c_accel);
 8001730:	4b3d      	ldr	r3, [pc, #244]	@ (8001828 <systemInit+0x1a4>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4618      	mov	r0, r3
 8001736:	f7fe fed9 	bl	80004ec <init_accel>
	init_bme280(i2c_bme280, 0);
 800173a:	4b3d      	ldr	r3, [pc, #244]	@ (8001830 <systemInit+0x1ac>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2100      	movs	r1, #0
 8001740:	4618      	mov	r0, r3
 8001742:	f7fe ff77 	bl	8000634 <init_bme280>
	init_bme280(i2c_bme280, 1);
 8001746:	4b3a      	ldr	r3, [pc, #232]	@ (8001830 <systemInit+0x1ac>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2101      	movs	r1, #1
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe ff71 	bl	8000634 <init_bme280>
	software_reset(&hspi1, cs_spi1);
 8001752:	4b3e      	ldr	r3, [pc, #248]	@ (800184c <systemInit+0x1c8>)
 8001754:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001758:	4843      	ldr	r0, [pc, #268]	@ (8001868 <systemInit+0x1e4>)
 800175a:	f7ff f941 	bl	80009e0 <software_reset>
	software_reset(&hspi2, cs_spi2);
 800175e:	4b3c      	ldr	r3, [pc, #240]	@ (8001850 <systemInit+0x1cc>)
 8001760:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001764:	4841      	ldr	r0, [pc, #260]	@ (800186c <systemInit+0x1e8>)
 8001766:	f7ff f93b 	bl	80009e0 <software_reset>

	int next_blank_page0 = find_next_blank_page(&hspi1, &end_of_flash, cs_spi1);
 800176a:	4b38      	ldr	r3, [pc, #224]	@ (800184c <systemInit+0x1c8>)
 800176c:	cb0c      	ldmia	r3, {r2, r3}
 800176e:	4940      	ldr	r1, [pc, #256]	@ (8001870 <systemInit+0x1ec>)
 8001770:	483d      	ldr	r0, [pc, #244]	@ (8001868 <systemInit+0x1e4>)
 8001772:	f7ff f987 	bl	8000a84 <find_next_blank_page>
 8001776:	4603      	mov	r3, r0
 8001778:	60bb      	str	r3, [r7, #8]
	int next_blank_page1 = find_next_blank_page(&hspi2, &end_of_flash, cs_spi2);
 800177a:	4b35      	ldr	r3, [pc, #212]	@ (8001850 <systemInit+0x1cc>)
 800177c:	cb0c      	ldmia	r3, {r2, r3}
 800177e:	493c      	ldr	r1, [pc, #240]	@ (8001870 <systemInit+0x1ec>)
 8001780:	483a      	ldr	r0, [pc, #232]	@ (800186c <systemInit+0x1e8>)
 8001782:	f7ff f97f 	bl	8000a84 <find_next_blank_page>
 8001786:	4603      	mov	r3, r0
 8001788:	607b      	str	r3, [r7, #4]

	// Assign the value of next_blank_page to the larger of next_blank_page0 and next_blank_page1
	next_blank_page = (next_blank_page0 > next_blank_page1) ? next_blank_page0 : next_blank_page1;
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	4293      	cmp	r3, r2
 8001790:	bfb8      	it	lt
 8001792:	4613      	movlt	r3, r2
 8001794:	461a      	mov	r2, r3
 8001796:	4b37      	ldr	r3, [pc, #220]	@ (8001874 <systemInit+0x1f0>)
 8001798:	601a      	str	r2, [r3, #0]

	buffer_ref = 0;
 800179a:	4b37      	ldr	r3, [pc, #220]	@ (8001878 <systemInit+0x1f4>)
 800179c:	2200      	movs	r2, #0
 800179e:	701a      	strb	r2, [r3, #0]
	byte_tracker = 0;
 80017a0:	4b36      	ldr	r3, [pc, #216]	@ (800187c <systemInit+0x1f8>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	801a      	strh	r2, [r3, #0]
	end_of_flash = FLAG_RESET;
 80017a6:	4b32      	ldr	r3, [pc, #200]	@ (8001870 <systemInit+0x1ec>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	701a      	strb	r2, [r3, #0]
	uart2_rec_flag = FLAG_RESET;
 80017ac:	4b34      	ldr	r3, [pc, #208]	@ (8001880 <systemInit+0x1fc>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]
	CAN_RX_Flag = FLAG_RESET;
 80017b2:	4b34      	ldr	r3, [pc, #208]	@ (8001884 <systemInit+0x200>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]
	tim6_overflow_flag = FLAG_RESET;
 80017b8:	4b33      	ldr	r3, [pc, #204]	@ (8001888 <systemInit+0x204>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	701a      	strb	r2, [r3, #0]
	tim7_overflow_flag = FLAG_RESET;
 80017be:	4b33      	ldr	r3, [pc, #204]	@ (800188c <systemInit+0x208>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	701a      	strb	r2, [r3, #0]
	flight_state = GROUND;
 80017c4:	4b32      	ldr	r3, [pc, #200]	@ (8001890 <systemInit+0x20c>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	701a      	strb	r2, [r3, #0]
	rtc_reset = FLAG_RESET;
 80017ca:	4b32      	ldr	r3, [pc, #200]	@ (8001894 <systemInit+0x210>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	701a      	strb	r2, [r3, #0]

	sysStatus = systemStatus(&hspi1, &hspi2, i2c_bme280, i2c_accel);
 80017d0:	4b17      	ldr	r3, [pc, #92]	@ (8001830 <systemInit+0x1ac>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4b14      	ldr	r3, [pc, #80]	@ (8001828 <systemInit+0x1a4>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4924      	ldr	r1, [pc, #144]	@ (800186c <systemInit+0x1e8>)
 80017da:	4823      	ldr	r0, [pc, #140]	@ (8001868 <systemInit+0x1e4>)
 80017dc:	f000 fb26 	bl	8001e2c <systemStatus>
 80017e0:	4603      	mov	r3, r0
 80017e2:	461a      	mov	r2, r3
 80017e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001898 <systemInit+0x214>)
 80017e6:	701a      	strb	r2, [r3, #0]

	send_uart_hex(&huart2, sysStatus);
 80017e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001898 <systemInit+0x214>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	4619      	mov	r1, r3
 80017ee:	482b      	ldr	r0, [pc, #172]	@ (800189c <systemInit+0x218>)
 80017f0:	f001 fbcf 	bl	8002f92 <send_uart_hex>

	// Initiate clocks, interrupts, CAN and DMA
	HAL_UART_Receive_IT(&huart2, UARTRxData, 2);
 80017f4:	2202      	movs	r2, #2
 80017f6:	492a      	ldr	r1, [pc, #168]	@ (80018a0 <systemInit+0x21c>)
 80017f8:	4828      	ldr	r0, [pc, #160]	@ (800189c <systemInit+0x218>)
 80017fa:	f006 ff04 	bl	8008606 <HAL_UART_Receive_IT>
	HAL_CAN_Start(&hcan2);
 80017fe:	4829      	ldr	r0, [pc, #164]	@ (80018a4 <systemInit+0x220>)
 8001800:	f001 fe78 	bl	80034f4 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001804:	2102      	movs	r1, #2
 8001806:	4827      	ldr	r0, [pc, #156]	@ (80018a4 <systemInit+0x220>)
 8001808:	f002 f8aa 	bl	8003960 <HAL_CAN_ActivateNotification>
	initialise_rtc_default(&hrtc);
 800180c:	4826      	ldr	r0, [pc, #152]	@ (80018a8 <systemInit+0x224>)
 800180e:	f000 fe3d 	bl	800248c <initialise_rtc_default>
	HAL_TIM_Base_Start_IT(&htim6);
 8001812:	4826      	ldr	r0, [pc, #152]	@ (80018ac <systemInit+0x228>)
 8001814:	f006 fb4e 	bl	8007eb4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8001818:	4825      	ldr	r0, [pc, #148]	@ (80018b0 <systemInit+0x22c>)
 800181a:	f006 fb4b 	bl	8007eb4 <HAL_TIM_Base_Start_IT>
}
 800181e:	bf00      	nop
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000380 	.word	0x20000380
 800182c:	200000c4 	.word	0x200000c4
 8001830:	20000384 	.word	0x20000384
 8001834:	20000070 	.word	0x20000070
 8001838:	2000038c 	.word	0x2000038c
 800183c:	200003b5 	.word	0x200003b5
 8001840:	200003ac 	.word	0x200003ac
 8001844:	200005dc 	.word	0x200005dc
 8001848:	200005ec 	.word	0x200005ec
 800184c:	200005f4 	.word	0x200005f4
 8001850:	20000604 	.word	0x20000604
 8001854:	200003b8 	.word	0x200003b8
 8001858:	200004b8 	.word	0x200004b8
 800185c:	200005bc 	.word	0x200005bc
 8001860:	200005c4 	.word	0x200005c4
 8001864:	200005cc 	.word	0x200005cc
 8001868:	20000138 	.word	0x20000138
 800186c:	20000190 	.word	0x20000190
 8001870:	200005da 	.word	0x200005da
 8001874:	200005d4 	.word	0x200005d4
 8001878:	200005d2 	.word	0x200005d2
 800187c:	200005d8 	.word	0x200005d8
 8001880:	2000038a 	.word	0x2000038a
 8001884:	200003b4 	.word	0x200003b4
 8001888:	200003b6 	.word	0x200003b6
 800188c:	200003b7 	.word	0x200003b7
 8001890:	2000061e 	.word	0x2000061e
 8001894:	2000061c 	.word	0x2000061c
 8001898:	2000061d 	.word	0x2000061d
 800189c:	20000338 	.word	0x20000338
 80018a0:	20000388 	.word	0x20000388
 80018a4:	20000048 	.word	0x20000048
 80018a8:	20000118 	.word	0x20000118
 80018ac:	200002a8 	.word	0x200002a8
 80018b0:	200002f0 	.word	0x200002f0

080018b4 <gpio_set_config>:

void gpio_set_config() {
 80018b4:	b590      	push	{r4, r7, lr}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
	// Set LED gpio
	led_orange = create_GPIO_Config(GPIOB, GPIO_PIN_14);	// Orange LED (Heartbeat LED)
 80018ba:	4c37      	ldr	r4, [pc, #220]	@ (8001998 <gpio_set_config+0xe4>)
 80018bc:	463b      	mov	r3, r7
 80018be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80018c2:	4936      	ldr	r1, [pc, #216]	@ (800199c <gpio_set_config+0xe8>)
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff f9bd 	bl	8000c44 <create_GPIO_Config>
 80018ca:	4622      	mov	r2, r4
 80018cc:	463b      	mov	r3, r7
 80018ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018d2:	e882 0003 	stmia.w	r2, {r0, r1}
	led_green = create_GPIO_Config(GPIOB, GPIO_PIN_13);		// Green LED (Hard Drive LED)
 80018d6:	4c32      	ldr	r4, [pc, #200]	@ (80019a0 <gpio_set_config+0xec>)
 80018d8:	463b      	mov	r3, r7
 80018da:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018de:	492f      	ldr	r1, [pc, #188]	@ (800199c <gpio_set_config+0xe8>)
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff f9af 	bl	8000c44 <create_GPIO_Config>
 80018e6:	4622      	mov	r2, r4
 80018e8:	463b      	mov	r3, r7
 80018ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018ee:	e882 0003 	stmia.w	r2, {r0, r1}
	status_led = create_GPIO_Config(GPIOB, GPIO_PIN_12);	// Status LED
 80018f2:	4c2c      	ldr	r4, [pc, #176]	@ (80019a4 <gpio_set_config+0xf0>)
 80018f4:	463b      	mov	r3, r7
 80018f6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80018fa:	4928      	ldr	r1, [pc, #160]	@ (800199c <gpio_set_config+0xe8>)
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff f9a1 	bl	8000c44 <create_GPIO_Config>
 8001902:	4622      	mov	r2, r4
 8001904:	463b      	mov	r3, r7
 8001906:	e893 0003 	ldmia.w	r3, {r0, r1}
 800190a:	e882 0003 	stmia.w	r2, {r0, r1}

	// SPI Flash 0 CS and WP
	cs_spi1 = create_GPIO_Config(GPIOC, GPIO_PIN_4);		// Change for SRAD
 800190e:	4c26      	ldr	r4, [pc, #152]	@ (80019a8 <gpio_set_config+0xf4>)
 8001910:	463b      	mov	r3, r7
 8001912:	2210      	movs	r2, #16
 8001914:	4925      	ldr	r1, [pc, #148]	@ (80019ac <gpio_set_config+0xf8>)
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff f994 	bl	8000c44 <create_GPIO_Config>
 800191c:	4622      	mov	r2, r4
 800191e:	463b      	mov	r3, r7
 8001920:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001924:	e882 0003 	stmia.w	r2, {r0, r1}
	wp_spi1 = create_GPIO_Config(GPIOA, GPIO_PIN_4);
 8001928:	4c21      	ldr	r4, [pc, #132]	@ (80019b0 <gpio_set_config+0xfc>)
 800192a:	463b      	mov	r3, r7
 800192c:	2210      	movs	r2, #16
 800192e:	4921      	ldr	r1, [pc, #132]	@ (80019b4 <gpio_set_config+0x100>)
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff f987 	bl	8000c44 <create_GPIO_Config>
 8001936:	4622      	mov	r2, r4
 8001938:	463b      	mov	r3, r7
 800193a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800193e:	e882 0003 	stmia.w	r2, {r0, r1}

	// SPI Flash 1 CS and WP
	cs_spi2 = create_GPIO_Config(GPIOC, GPIO_PIN_1);		// Change for SRAD
 8001942:	4c1d      	ldr	r4, [pc, #116]	@ (80019b8 <gpio_set_config+0x104>)
 8001944:	463b      	mov	r3, r7
 8001946:	2202      	movs	r2, #2
 8001948:	4918      	ldr	r1, [pc, #96]	@ (80019ac <gpio_set_config+0xf8>)
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff f97a 	bl	8000c44 <create_GPIO_Config>
 8001950:	4622      	mov	r2, r4
 8001952:	463b      	mov	r3, r7
 8001954:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001958:	e882 0003 	stmia.w	r2, {r0, r1}
	wp_spi2 = create_GPIO_Config(GPIOC, GPIO_PIN_0);
 800195c:	4c17      	ldr	r4, [pc, #92]	@ (80019bc <gpio_set_config+0x108>)
 800195e:	463b      	mov	r3, r7
 8001960:	2201      	movs	r2, #1
 8001962:	4912      	ldr	r1, [pc, #72]	@ (80019ac <gpio_set_config+0xf8>)
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff f96d 	bl	8000c44 <create_GPIO_Config>
 800196a:	4622      	mov	r2, r4
 800196c:	463b      	mov	r3, r7
 800196e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001972:	e882 0003 	stmia.w	r2, {r0, r1}

	// Flight Jumper GPIO Input
	jmp_flight = create_GPIO_Config(GPIOB, GPIO_PIN_1);
 8001976:	4c12      	ldr	r4, [pc, #72]	@ (80019c0 <gpio_set_config+0x10c>)
 8001978:	463b      	mov	r3, r7
 800197a:	2202      	movs	r2, #2
 800197c:	4907      	ldr	r1, [pc, #28]	@ (800199c <gpio_set_config+0xe8>)
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff f960 	bl	8000c44 <create_GPIO_Config>
 8001984:	4622      	mov	r2, r4
 8001986:	463b      	mov	r3, r7
 8001988:	e893 0003 	ldmia.w	r3, {r0, r1}
 800198c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	bd90      	pop	{r4, r7, pc}
 8001998:	200005dc 	.word	0x200005dc
 800199c:	40020400 	.word	0x40020400
 80019a0:	200005e4 	.word	0x200005e4
 80019a4:	200005ec 	.word	0x200005ec
 80019a8:	200005f4 	.word	0x200005f4
 80019ac:	40020800 	.word	0x40020800
 80019b0:	200005fc 	.word	0x200005fc
 80019b4:	40020000 	.word	0x40020000
 80019b8:	20000604 	.word	0x20000604
 80019bc:	2000060c 	.word	0x2000060c
 80019c0:	20000614 	.word	0x20000614

080019c4 <handleCAN>:

void handleCAN() {
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af02      	add	r7, sp, #8
	// Process "clock-sync". Change flight-state to "rocket_loaded"
	if(CAN_RxHeader.StdId == CLK_SYNC_ID) {
 80019ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001a74 <handleCAN+0xb0>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d10e      	bne.n	80019f4 <handleCAN+0x30>
		flight_state = LOADED;
 80019d6:	4b28      	ldr	r3, [pc, #160]	@ (8001a78 <handleCAN+0xb4>)
 80019d8:	2201      	movs	r2, #1
 80019da:	701a      	strb	r2, [r3, #0]
		uint8_t TxData[1] = {0x00};
 80019dc:	2300      	movs	r3, #0
 80019de:	713b      	strb	r3, [r7, #4]
		sendCAN_TxMessage(&hcan2, 1, TxData, &CAN_TxMailbox, CLK_SYNC_ID);
 80019e0:	1d3a      	adds	r2, r7, #4
 80019e2:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	4b24      	ldr	r3, [pc, #144]	@ (8001a7c <handleCAN+0xb8>)
 80019ea:	2101      	movs	r1, #1
 80019ec:	4824      	ldr	r0, [pc, #144]	@ (8001a80 <handleCAN+0xbc>)
 80019ee:	f7fe ff37 	bl	8000860 <sendCAN_TxMessage>

	// Transmit values from accelerometer
	else if(CAN_RxHeader.StdId == DUMMY_ID) {
		send_uart_hex(&huart2, sysStatus);
	}
}
 80019f2:	e03a      	b.n	8001a6a <handleCAN+0xa6>
	else if(CAN_RxHeader.StdId == TX_BME280_0) {
 80019f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a74 <handleCAN+0xb0>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f240 5201 	movw	r2, #1281	@ 0x501
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d109      	bne.n	8001a14 <handleCAN+0x50>
		sendCAN_TxMessage(&hcan2, 6, bme280_data_0, &CAN_TxMailbox, TX_BME280_0);
 8001a00:	f240 5301 	movw	r3, #1281	@ 0x501
 8001a04:	9300      	str	r3, [sp, #0]
 8001a06:	4b1d      	ldr	r3, [pc, #116]	@ (8001a7c <handleCAN+0xb8>)
 8001a08:	4a1e      	ldr	r2, [pc, #120]	@ (8001a84 <handleCAN+0xc0>)
 8001a0a:	2106      	movs	r1, #6
 8001a0c:	481c      	ldr	r0, [pc, #112]	@ (8001a80 <handleCAN+0xbc>)
 8001a0e:	f7fe ff27 	bl	8000860 <sendCAN_TxMessage>
}
 8001a12:	e02a      	b.n	8001a6a <handleCAN+0xa6>
	else if(CAN_RxHeader.StdId == TX_BME280_1) {
 8001a14:	4b17      	ldr	r3, [pc, #92]	@ (8001a74 <handleCAN+0xb0>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f240 5202 	movw	r2, #1282	@ 0x502
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d109      	bne.n	8001a34 <handleCAN+0x70>
		sendCAN_TxMessage(&hcan2, 6, bme280_data_1, &CAN_TxMailbox, TX_BME280_1);
 8001a20:	f240 5302 	movw	r3, #1282	@ 0x502
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	4b15      	ldr	r3, [pc, #84]	@ (8001a7c <handleCAN+0xb8>)
 8001a28:	4a17      	ldr	r2, [pc, #92]	@ (8001a88 <handleCAN+0xc4>)
 8001a2a:	2106      	movs	r1, #6
 8001a2c:	4814      	ldr	r0, [pc, #80]	@ (8001a80 <handleCAN+0xbc>)
 8001a2e:	f7fe ff17 	bl	8000860 <sendCAN_TxMessage>
}
 8001a32:	e01a      	b.n	8001a6a <handleCAN+0xa6>
	else if(CAN_RxHeader.StdId == TX_ACCEL) {
 8001a34:	4b0f      	ldr	r3, [pc, #60]	@ (8001a74 <handleCAN+0xb0>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f240 5203 	movw	r2, #1283	@ 0x503
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d109      	bne.n	8001a54 <handleCAN+0x90>
		sendCAN_TxMessage(&hcan2, 6, accel_data, &CAN_TxMailbox, TX_ACCEL);
 8001a40:	f240 5303 	movw	r3, #1283	@ 0x503
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	4b0d      	ldr	r3, [pc, #52]	@ (8001a7c <handleCAN+0xb8>)
 8001a48:	4a10      	ldr	r2, [pc, #64]	@ (8001a8c <handleCAN+0xc8>)
 8001a4a:	2106      	movs	r1, #6
 8001a4c:	480c      	ldr	r0, [pc, #48]	@ (8001a80 <handleCAN+0xbc>)
 8001a4e:	f7fe ff07 	bl	8000860 <sendCAN_TxMessage>
}
 8001a52:	e00a      	b.n	8001a6a <handleCAN+0xa6>
	else if(CAN_RxHeader.StdId == DUMMY_ID) {
 8001a54:	4b07      	ldr	r3, [pc, #28]	@ (8001a74 <handleCAN+0xb0>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001a5c:	d105      	bne.n	8001a6a <handleCAN+0xa6>
		send_uart_hex(&huart2, sysStatus);
 8001a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a90 <handleCAN+0xcc>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	4619      	mov	r1, r3
 8001a64:	480b      	ldr	r0, [pc, #44]	@ (8001a94 <handleCAN+0xd0>)
 8001a66:	f001 fa94 	bl	8002f92 <send_uart_hex>
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000390 	.word	0x20000390
 8001a78:	2000061e 	.word	0x2000061e
 8001a7c:	2000038c 	.word	0x2000038c
 8001a80:	20000048 	.word	0x20000048
 8001a84:	200005c4 	.word	0x200005c4
 8001a88:	200005cc 	.word	0x200005cc
 8001a8c:	200005bc 	.word	0x200005bc
 8001a90:	2000061d 	.word	0x2000061d
 8001a94:	20000338 	.word	0x20000338

08001a98 <handleUART>:

void handleUART() {
 8001a98:	b590      	push	{r4, r7, lr}
 8001a9a:	b087      	sub	sp, #28
 8001a9c:	af02      	add	r7, sp, #8
	UART_HandleTypeDef *huart = &huart2;
 8001a9e:	4b95      	ldr	r3, [pc, #596]	@ (8001cf4 <handleUART+0x25c>)
 8001aa0:	60fb      	str	r3, [r7, #12]

	// Send Heartbeat to UART (data_rx[0] = "h")
	if (UARTRxData[0] == 0x68) {
 8001aa2:	4b95      	ldr	r3, [pc, #596]	@ (8001cf8 <handleUART+0x260>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b68      	cmp	r3, #104	@ 0x68
 8001aa8:	d109      	bne.n	8001abe <handleUART+0x26>
		heartbeatUART(huart);
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f000 fa10 	bl	8001ed0 <heartbeatUART>
		send_uart_hex(huart, sysStatus);
 8001ab0:	4b92      	ldr	r3, [pc, #584]	@ (8001cfc <handleUART+0x264>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f001 fa6b 	bl	8002f92 <send_uart_hex>
 8001abc:	e142      	b.n	8001d44 <handleUART+0x2ac>
	}

/***************************** SPI Flash ************************************************/
	// Erase specified flash chip (data_rx[0]  = "e")
	else if (UARTRxData[0] == 0x65) {
 8001abe:	4b8e      	ldr	r3, [pc, #568]	@ (8001cf8 <handleUART+0x260>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b65      	cmp	r3, #101	@ 0x65
 8001ac4:	d145      	bne.n	8001b52 <handleUART+0xba>
		HAL_GPIO_WritePin(led_green.GPIOx, led_green.GPIO_Pin, GPIO_PIN_SET);		// Activate the "write out" LED
 8001ac6:	4b8e      	ldr	r3, [pc, #568]	@ (8001d00 <handleUART+0x268>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a8d      	ldr	r2, [pc, #564]	@ (8001d00 <handleUART+0x268>)
 8001acc:	8891      	ldrh	r1, [r2, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f003 f873 	bl	8004bbc <HAL_GPIO_WritePin>
		if(decodeASCII(UARTRxData[1]) == 0) {
 8001ad6:	4b88      	ldr	r3, [pc, #544]	@ (8001cf8 <handleUART+0x260>)
 8001ad8:	785b      	ldrb	r3, [r3, #1]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f000 f942 	bl	8001d64 <decodeASCII>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d106      	bne.n	8001af4 <handleUART+0x5c>
			eraseFlashSPI(&hspi1, huart, cs_spi1);
 8001ae6:	4b87      	ldr	r3, [pc, #540]	@ (8001d04 <handleUART+0x26c>)
 8001ae8:	cb0c      	ldmia	r3, {r2, r3}
 8001aea:	68f9      	ldr	r1, [r7, #12]
 8001aec:	4886      	ldr	r0, [pc, #536]	@ (8001d08 <handleUART+0x270>)
 8001aee:	f000 f9fb 	bl	8001ee8 <eraseFlashSPI>
 8001af2:	e00d      	b.n	8001b10 <handleUART+0x78>
		} else if (decodeASCII(UARTRxData[1]) == 1) {
 8001af4:	4b80      	ldr	r3, [pc, #512]	@ (8001cf8 <handleUART+0x260>)
 8001af6:	785b      	ldrb	r3, [r3, #1]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f000 f933 	bl	8001d64 <decodeASCII>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d105      	bne.n	8001b10 <handleUART+0x78>
			eraseFlashSPI(&hspi2, huart, cs_spi2);
 8001b04:	4b81      	ldr	r3, [pc, #516]	@ (8001d0c <handleUART+0x274>)
 8001b06:	cb0c      	ldmia	r3, {r2, r3}
 8001b08:	68f9      	ldr	r1, [r7, #12]
 8001b0a:	4881      	ldr	r0, [pc, #516]	@ (8001d10 <handleUART+0x278>)
 8001b0c:	f000 f9ec 	bl	8001ee8 <eraseFlashSPI>
		}
		int next_blank_page0 = find_next_blank_page(&hspi1, &end_of_flash, cs_spi1);
 8001b10:	4b7c      	ldr	r3, [pc, #496]	@ (8001d04 <handleUART+0x26c>)
 8001b12:	cb0c      	ldmia	r3, {r2, r3}
 8001b14:	497f      	ldr	r1, [pc, #508]	@ (8001d14 <handleUART+0x27c>)
 8001b16:	487c      	ldr	r0, [pc, #496]	@ (8001d08 <handleUART+0x270>)
 8001b18:	f7fe ffb4 	bl	8000a84 <find_next_blank_page>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	60bb      	str	r3, [r7, #8]
		int next_blank_page1 = find_next_blank_page(&hspi2, &end_of_flash, cs_spi2);
 8001b20:	4b7a      	ldr	r3, [pc, #488]	@ (8001d0c <handleUART+0x274>)
 8001b22:	cb0c      	ldmia	r3, {r2, r3}
 8001b24:	497b      	ldr	r1, [pc, #492]	@ (8001d14 <handleUART+0x27c>)
 8001b26:	487a      	ldr	r0, [pc, #488]	@ (8001d10 <handleUART+0x278>)
 8001b28:	f7fe ffac 	bl	8000a84 <find_next_blank_page>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	607b      	str	r3, [r7, #4]

		// Assign the value of next_blank_page to the larger of next_blank_page0 and next_blank_page1
		next_blank_page = (next_blank_page0 > next_blank_page1) ? next_blank_page0 : next_blank_page1;
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	4293      	cmp	r3, r2
 8001b36:	bfb8      	it	lt
 8001b38:	4613      	movlt	r3, r2
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	4b76      	ldr	r3, [pc, #472]	@ (8001d18 <handleUART+0x280>)
 8001b3e:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(led_green.GPIOx, led_green.GPIO_Pin,GPIO_PIN_RESET);	// Deactivate the "write out" LED
 8001b40:	4b6f      	ldr	r3, [pc, #444]	@ (8001d00 <handleUART+0x268>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a6e      	ldr	r2, [pc, #440]	@ (8001d00 <handleUART+0x268>)
 8001b46:	8891      	ldrh	r1, [r2, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f003 f836 	bl	8004bbc <HAL_GPIO_WritePin>
 8001b50:	e0f8      	b.n	8001d44 <handleUART+0x2ac>
	}

	// Read data from specified flash chip (data_rx[0] = "r")
	else if (UARTRxData[0] == 0x72) {
 8001b52:	4b69      	ldr	r3, [pc, #420]	@ (8001cf8 <handleUART+0x260>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b72      	cmp	r3, #114	@ 0x72
 8001b58:	d11e      	bne.n	8001b98 <handleUART+0x100>
		if(decodeASCII(UARTRxData[1]) == 0) {
 8001b5a:	4b67      	ldr	r3, [pc, #412]	@ (8001cf8 <handleUART+0x260>)
 8001b5c:	785b      	ldrb	r3, [r3, #1]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f000 f900 	bl	8001d64 <decodeASCII>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d106      	bne.n	8001b78 <handleUART+0xe0>
			readFlashToUART(&hspi1, huart, cs_spi1);
 8001b6a:	4b66      	ldr	r3, [pc, #408]	@ (8001d04 <handleUART+0x26c>)
 8001b6c:	cb0c      	ldmia	r3, {r2, r3}
 8001b6e:	68f9      	ldr	r1, [r7, #12]
 8001b70:	4865      	ldr	r0, [pc, #404]	@ (8001d08 <handleUART+0x270>)
 8001b72:	f000 f9db 	bl	8001f2c <readFlashToUART>
 8001b76:	e0e5      	b.n	8001d44 <handleUART+0x2ac>
		} else if (decodeASCII(UARTRxData[1]) == 1) {
 8001b78:	4b5f      	ldr	r3, [pc, #380]	@ (8001cf8 <handleUART+0x260>)
 8001b7a:	785b      	ldrb	r3, [r3, #1]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f000 f8f1 	bl	8001d64 <decodeASCII>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	f040 80dd 	bne.w	8001d44 <handleUART+0x2ac>
			readFlashToUART(&hspi2, huart, cs_spi2);
 8001b8a:	4b60      	ldr	r3, [pc, #384]	@ (8001d0c <handleUART+0x274>)
 8001b8c:	cb0c      	ldmia	r3, {r2, r3}
 8001b8e:	68f9      	ldr	r1, [r7, #12]
 8001b90:	485f      	ldr	r0, [pc, #380]	@ (8001d10 <handleUART+0x278>)
 8001b92:	f000 f9cb 	bl	8001f2c <readFlashToUART>
 8001b96:	e0d5      	b.n	8001d44 <handleUART+0x2ac>
		}
	}

	// Read Manufacturer over SPI (data_rx[0] = "m")
	else if (UARTRxData[0] == 0x6d) {
 8001b98:	4b57      	ldr	r3, [pc, #348]	@ (8001cf8 <handleUART+0x260>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b6d      	cmp	r3, #109	@ 0x6d
 8001b9e:	d11e      	bne.n	8001bde <handleUART+0x146>
		if(decodeASCII(UARTRxData[1]) == 0) {
 8001ba0:	4b55      	ldr	r3, [pc, #340]	@ (8001cf8 <handleUART+0x260>)
 8001ba2:	785b      	ldrb	r3, [r3, #1]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f000 f8dd 	bl	8001d64 <decodeASCII>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d106      	bne.n	8001bbe <handleUART+0x126>
			readFlashManuSPI(&hspi1, huart, cs_spi1);
 8001bb0:	4b54      	ldr	r3, [pc, #336]	@ (8001d04 <handleUART+0x26c>)
 8001bb2:	cb0c      	ldmia	r3, {r2, r3}
 8001bb4:	68f9      	ldr	r1, [r7, #12]
 8001bb6:	4854      	ldr	r0, [pc, #336]	@ (8001d08 <handleUART+0x270>)
 8001bb8:	f000 fa24 	bl	8002004 <readFlashManuSPI>
 8001bbc:	e0c2      	b.n	8001d44 <handleUART+0x2ac>
		} else if (decodeASCII(UARTRxData[1]) == 1) {
 8001bbe:	4b4e      	ldr	r3, [pc, #312]	@ (8001cf8 <handleUART+0x260>)
 8001bc0:	785b      	ldrb	r3, [r3, #1]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f000 f8ce 	bl	8001d64 <decodeASCII>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	f040 80ba 	bne.w	8001d44 <handleUART+0x2ac>
			readFlashManuSPI(&hspi2, huart, cs_spi2);
 8001bd0:	4b4e      	ldr	r3, [pc, #312]	@ (8001d0c <handleUART+0x274>)
 8001bd2:	cb0c      	ldmia	r3, {r2, r3}
 8001bd4:	68f9      	ldr	r1, [r7, #12]
 8001bd6:	484e      	ldr	r0, [pc, #312]	@ (8001d10 <handleUART+0x278>)
 8001bd8:	f000 fa14 	bl	8002004 <readFlashManuSPI>
 8001bdc:	e0b2      	b.n	8001d44 <handleUART+0x2ac>
		}
	}

	// Write a page over SPI (data_rx[0] = "w")
	else if (UARTRxData[0] == 0x77) {
 8001bde:	4b46      	ldr	r3, [pc, #280]	@ (8001cf8 <handleUART+0x260>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b77      	cmp	r3, #119	@ 0x77
 8001be4:	d11e      	bne.n	8001c24 <handleUART+0x18c>
		if(decodeASCII(UARTRxData[1]) == 0) {
 8001be6:	4b44      	ldr	r3, [pc, #272]	@ (8001cf8 <handleUART+0x260>)
 8001be8:	785b      	ldrb	r3, [r3, #1]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f000 f8ba 	bl	8001d64 <decodeASCII>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d106      	bne.n	8001c04 <handleUART+0x16c>
			writePageSPI_W(&hspi1, huart, cs_spi1);
 8001bf6:	4b43      	ldr	r3, [pc, #268]	@ (8001d04 <handleUART+0x26c>)
 8001bf8:	cb0c      	ldmia	r3, {r2, r3}
 8001bfa:	68f9      	ldr	r1, [r7, #12]
 8001bfc:	4842      	ldr	r0, [pc, #264]	@ (8001d08 <handleUART+0x270>)
 8001bfe:	f000 fa21 	bl	8002044 <writePageSPI_W>
 8001c02:	e09f      	b.n	8001d44 <handleUART+0x2ac>
		} else if (decodeASCII(UARTRxData[1]) == 1) {
 8001c04:	4b3c      	ldr	r3, [pc, #240]	@ (8001cf8 <handleUART+0x260>)
 8001c06:	785b      	ldrb	r3, [r3, #1]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f000 f8ab 	bl	8001d64 <decodeASCII>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	f040 8097 	bne.w	8001d44 <handleUART+0x2ac>
			writePageSPI_W(&hspi2, huart, cs_spi2);
 8001c16:	4b3d      	ldr	r3, [pc, #244]	@ (8001d0c <handleUART+0x274>)
 8001c18:	cb0c      	ldmia	r3, {r2, r3}
 8001c1a:	68f9      	ldr	r1, [r7, #12]
 8001c1c:	483c      	ldr	r0, [pc, #240]	@ (8001d10 <handleUART+0x278>)
 8001c1e:	f000 fa11 	bl	8002044 <writePageSPI_W>
 8001c22:	e08f      	b.n	8001d44 <handleUART+0x2ac>
		}
	}

	// Software reset flash chip over SPI (data_rx[0] = "x")
	else if (UARTRxData[0] == 0x78) {
 8001c24:	4b34      	ldr	r3, [pc, #208]	@ (8001cf8 <handleUART+0x260>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b78      	cmp	r3, #120	@ 0x78
 8001c2a:	d11d      	bne.n	8001c68 <handleUART+0x1d0>
		if(decodeASCII(UARTRxData[1]) == 0) {
 8001c2c:	4b32      	ldr	r3, [pc, #200]	@ (8001cf8 <handleUART+0x260>)
 8001c2e:	785b      	ldrb	r3, [r3, #1]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f000 f897 	bl	8001d64 <decodeASCII>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d106      	bne.n	8001c4a <handleUART+0x1b2>
			resetSPIFlash(&hspi1, huart, cs_spi1);
 8001c3c:	4b31      	ldr	r3, [pc, #196]	@ (8001d04 <handleUART+0x26c>)
 8001c3e:	cb0c      	ldmia	r3, {r2, r3}
 8001c40:	68f9      	ldr	r1, [r7, #12]
 8001c42:	4831      	ldr	r0, [pc, #196]	@ (8001d08 <handleUART+0x270>)
 8001c44:	f000 fa52 	bl	80020ec <resetSPIFlash>
 8001c48:	e07c      	b.n	8001d44 <handleUART+0x2ac>
		} else if (decodeASCII(UARTRxData[1]) == 1) {
 8001c4a:	4b2b      	ldr	r3, [pc, #172]	@ (8001cf8 <handleUART+0x260>)
 8001c4c:	785b      	ldrb	r3, [r3, #1]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f000 f888 	bl	8001d64 <decodeASCII>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d174      	bne.n	8001d44 <handleUART+0x2ac>
			resetSPIFlash(&hspi2, huart, cs_spi2);
 8001c5a:	4b2c      	ldr	r3, [pc, #176]	@ (8001d0c <handleUART+0x274>)
 8001c5c:	cb0c      	ldmia	r3, {r2, r3}
 8001c5e:	68f9      	ldr	r1, [r7, #12]
 8001c60:	482b      	ldr	r0, [pc, #172]	@ (8001d10 <handleUART+0x278>)
 8001c62:	f000 fa43 	bl	80020ec <resetSPIFlash>
 8001c66:	e06d      	b.n	8001d44 <handleUART+0x2ac>
		}
	}

/*********************************** I2C Accelerometer ***********************************/
	// Read Accelerometer WhoAmI (data_rx[0] = "c")
	else if (UARTRxData[0] == 0x63) {
 8001c68:	4b23      	ldr	r3, [pc, #140]	@ (8001cf8 <handleUART+0x260>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b63      	cmp	r3, #99	@ 0x63
 8001c6e:	d106      	bne.n	8001c7e <handleUART+0x1e6>
		checkAccelWhoAmI(i2c_accel, huart);
 8001c70:	4b2a      	ldr	r3, [pc, #168]	@ (8001d1c <handleUART+0x284>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68f9      	ldr	r1, [r7, #12]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 fa50 	bl	800211c <checkAccelWhoAmI>
 8001c7c:	e062      	b.n	8001d44 <handleUART+0x2ac>
	}

	// Read the accelerometer and print to the UART[0] (data_rx [0] = "a")
	else if (UARTRxData[0] == 0x61) {
 8001c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf8 <handleUART+0x260>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	2b61      	cmp	r3, #97	@ 0x61
 8001c84:	d103      	bne.n	8001c8e <handleUART+0x1f6>
		accelToUART(huart);
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f000 fa5c 	bl	8002144 <accelToUART>
 8001c8c:	e05a      	b.n	8001d44 <handleUART+0x2ac>
	}

/********************************** I2C BME280 *******************************************/
	// Read the temp sensor ID and print to the UART[0] (data_rx [0]= "b")
	else if (UARTRxData[0] == 0x62) {
 8001c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf8 <handleUART+0x260>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b62      	cmp	r3, #98	@ 0x62
 8001c94:	d10d      	bne.n	8001cb2 <handleUART+0x21a>
		readTempSensorID(i2c_bme280, huart, decodeASCII(UARTRxData[1]));
 8001c96:	4b22      	ldr	r3, [pc, #136]	@ (8001d20 <handleUART+0x288>)
 8001c98:	681c      	ldr	r4, [r3, #0]
 8001c9a:	4b17      	ldr	r3, [pc, #92]	@ (8001cf8 <handleUART+0x260>)
 8001c9c:	785b      	ldrb	r3, [r3, #1]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f000 f860 	bl	8001d64 <decodeASCII>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	68f9      	ldr	r1, [r7, #12]
 8001caa:	4620      	mov	r0, r4
 8001cac:	f000 fa66 	bl	800217c <readTempSensorID>
 8001cb0:	e048      	b.n	8001d44 <handleUART+0x2ac>
	}

	// Read the temp sensor calibration registers and print to the UART (data_rx[0] = "p")
	else if (UARTRxData[0] == 0x70) {
 8001cb2:	4b11      	ldr	r3, [pc, #68]	@ (8001cf8 <handleUART+0x260>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b70      	cmp	r3, #112	@ 0x70
 8001cb8:	d10d      	bne.n	8001cd6 <handleUART+0x23e>
		readTempCalibration(i2c_bme280, huart, decodeASCII(UARTRxData[1]));
 8001cba:	4b19      	ldr	r3, [pc, #100]	@ (8001d20 <handleUART+0x288>)
 8001cbc:	681c      	ldr	r4, [r3, #0]
 8001cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf8 <handleUART+0x260>)
 8001cc0:	785b      	ldrb	r3, [r3, #1]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f000 f84e 	bl	8001d64 <decodeASCII>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	461a      	mov	r2, r3
 8001ccc:	68f9      	ldr	r1, [r7, #12]
 8001cce:	4620      	mov	r0, r4
 8001cd0:	f000 fa69 	bl	80021a6 <readTempCalibration>
 8001cd4:	e036      	b.n	8001d44 <handleUART+0x2ac>
	}

	// Read the temp sensor and print to the UART[0] (data_rx [0]= "t")
	else if (UARTRxData[0] == 0x74) {
 8001cd6:	4b08      	ldr	r3, [pc, #32]	@ (8001cf8 <handleUART+0x260>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	2b74      	cmp	r3, #116	@ 0x74
 8001cdc:	d122      	bne.n	8001d24 <handleUART+0x28c>
		readTempSensor(huart, decodeASCII(UARTRxData[1]));
 8001cde:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <handleUART+0x260>)
 8001ce0:	785b      	ldrb	r3, [r3, #1]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f000 f83e 	bl	8001d64 <decodeASCII>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	4619      	mov	r1, r3
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f000 fab1 	bl	8002254 <readTempSensor>
 8001cf2:	e027      	b.n	8001d44 <handleUART+0x2ac>
 8001cf4:	20000338 	.word	0x20000338
 8001cf8:	20000388 	.word	0x20000388
 8001cfc:	2000061d 	.word	0x2000061d
 8001d00:	200005e4 	.word	0x200005e4
 8001d04:	200005f4 	.word	0x200005f4
 8001d08:	20000138 	.word	0x20000138
 8001d0c:	20000604 	.word	0x20000604
 8001d10:	20000190 	.word	0x20000190
 8001d14:	200005da 	.word	0x200005da
 8001d18:	200005d4 	.word	0x200005d4
 8001d1c:	20000380 	.word	0x20000380
 8001d20:	20000384 	.word	0x20000384
	}

	/********************************** CAN Bus *******************************************/
	// Send the second byte received over the CAN bus as a payload with id 0x700 (data_rx [0]= "n")
	else if (UARTRxData[0] == 0x6E) {
 8001d24:	4b0c      	ldr	r3, [pc, #48]	@ (8001d58 <handleUART+0x2c0>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b6e      	cmp	r3, #110	@ 0x6e
 8001d2a:	d10b      	bne.n	8001d44 <handleUART+0x2ac>
		uint8_t TxData[1] = {UARTRxData[1]};
 8001d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d58 <handleUART+0x2c0>)
 8001d2e:	785b      	ldrb	r3, [r3, #1]
 8001d30:	703b      	strb	r3, [r7, #0]
		sendCAN_TxMessage(&hcan2, 1, TxData, &CAN_TxMailbox, DUMMY_ID);
 8001d32:	463a      	mov	r2, r7
 8001d34:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001d38:	9300      	str	r3, [sp, #0]
 8001d3a:	4b08      	ldr	r3, [pc, #32]	@ (8001d5c <handleUART+0x2c4>)
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	4808      	ldr	r0, [pc, #32]	@ (8001d60 <handleUART+0x2c8>)
 8001d40:	f7fe fd8e 	bl	8000860 <sendCAN_TxMessage>
	}

	UARTRxData[0] = 0x00;
 8001d44:	4b04      	ldr	r3, [pc, #16]	@ (8001d58 <handleUART+0x2c0>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	701a      	strb	r2, [r3, #0]
	UARTRxData[1] = 0x00;
 8001d4a:	4b03      	ldr	r3, [pc, #12]	@ (8001d58 <handleUART+0x2c0>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	705a      	strb	r2, [r3, #1]
}
 8001d50:	bf00      	nop
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd90      	pop	{r4, r7, pc}
 8001d58:	20000388 	.word	0x20000388
 8001d5c:	2000038c 	.word	0x2000038c
 8001d60:	20000048 	.word	0x20000048

08001d64 <decodeASCII>:

uint8_t decodeASCII(uint8_t asciiVal) {
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
	int returnVal = -1;
 8001d6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d72:	60fb      	str	r3, [r7, #12]
	if ((asciiVal >= 48) && (asciiVal <= 57)) {
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	2b2f      	cmp	r3, #47	@ 0x2f
 8001d78:	d905      	bls.n	8001d86 <decodeASCII+0x22>
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	2b39      	cmp	r3, #57	@ 0x39
 8001d7e:	d802      	bhi.n	8001d86 <decodeASCII+0x22>
		returnVal = asciiVal - 48;
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	3b30      	subs	r3, #48	@ 0x30
 8001d84:	60fb      	str	r3, [r7, #12]
	}
	return returnVal;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	b2db      	uxtb	r3, r3
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <combine_system_status>:

uint8_t combine_system_status() {
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
    // Mask status to use only bits 4:0
    uint8_t masked_status = sysStatus & 0x1F; 			// 0001 1111b
 8001d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd0 <combine_system_status+0x38>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	f003 031f 	and.w	r3, r3, #31
 8001da6:	71fb      	strb	r3, [r7, #7]

    // Mask flight_state to use only bits 2:0
    uint8_t masked_flight_state = flight_state & 0x07; 	// 0000 0111b
 8001da8:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd4 <combine_system_status+0x3c>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	71bb      	strb	r3, [r7, #6]
    // Shift flight_state to the correct position (bits 7:5)
    uint8_t shifted_flight_state = masked_flight_state << 5;
 8001db2:	79bb      	ldrb	r3, [r7, #6]
 8001db4:	015b      	lsls	r3, r3, #5
 8001db6:	717b      	strb	r3, [r7, #5]

    // Combine the masked_status and shifted_flight_state
    uint8_t combined_value = masked_status | shifted_flight_state;
 8001db8:	79fa      	ldrb	r2, [r7, #7]
 8001dba:	797b      	ldrb	r3, [r7, #5]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	713b      	strb	r3, [r7, #4]

    return combined_value;
 8001dc0:	793b      	ldrb	r3, [r7, #4]
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	2000061d 	.word	0x2000061d
 8001dd4:	2000061e 	.word	0x2000061e

08001dd8 <configureCAN>:

void configureCAN() {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08a      	sub	sp, #40	@ 0x28
 8001ddc:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef canFilterConfig;

	canFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8001dde:	2301      	movs	r3, #1
 8001de0:	623b      	str	r3, [r7, #32]
	canFilterConfig.FilterBank = 10;
 8001de2:	230a      	movs	r3, #10
 8001de4:	617b      	str	r3, [r7, #20]
	canFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	613b      	str	r3, [r7, #16]
	canFilterConfig.FilterIdHigh = 0x500 << 5;				// Filter only messages with ID 1X1XXXXXXXXb
 8001dea:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8001dee:	603b      	str	r3, [r7, #0]
	canFilterConfig.FilterIdLow = 0x0000;
 8001df0:	2300      	movs	r3, #0
 8001df2:	607b      	str	r3, [r7, #4]
	canFilterConfig.FilterMaskIdHigh = 0x500 << 5;
 8001df4:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8001df8:	60bb      	str	r3, [r7, #8]
	canFilterConfig.FilterMaskIdLow = 0x0000;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
	canFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61bb      	str	r3, [r7, #24]
	canFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001e02:	2301      	movs	r3, #1
 8001e04:	61fb      	str	r3, [r7, #28]
	canFilterConfig.SlaveStartFilterBank = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	627b      	str	r3, [r7, #36]	@ 0x24

	HAL_CAN_ConfigFilter(&hcan2, &canFilterConfig);
 8001e0a:	463b      	mov	r3, r7
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4803      	ldr	r0, [pc, #12]	@ (8001e1c <configureCAN+0x44>)
 8001e10:	f001 fa90 	bl	8003334 <HAL_CAN_ConfigFilter>
}
 8001e14:	bf00      	nop
 8001e16:	3728      	adds	r7, #40	@ 0x28
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20000048 	.word	0x20000048

08001e20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e24:	b672      	cpsid	i
}
 8001e26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e28:	bf00      	nop
 8001e2a:	e7fd      	b.n	8001e28 <Error_Handler+0x8>

08001e2c <systemStatus>:

#include "peripheral_driver.h"
/***************************************************************************************************************
 * Generic Functions
 */
uint8_t systemStatus(SPI_HandleTypeDef *hspi1, SPI_HandleTypeDef *hspi2, I2C_HandleTypeDef* hi2c1, I2C_HandleTypeDef* hi2c2) {
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
 8001e38:	603b      	str	r3, [r7, #0]
	uint8_t retVal = 0x00;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	75fb      	strb	r3, [r7, #23]

	// Check BME280_1
	if(readBME280_id_reg(hi2c1, 1) != 0x60) {			// Expected 0x60
 8001e3e:	2101      	movs	r1, #1
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7fe fc9d 	bl	8000780 <readBME280_id_reg>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b60      	cmp	r3, #96	@ 0x60
 8001e4a:	d003      	beq.n	8001e54 <systemStatus+0x28>
		retVal  = retVal | 0x10;
 8001e4c:	7dfb      	ldrb	r3, [r7, #23]
 8001e4e:	f043 0310 	orr.w	r3, r3, #16
 8001e52:	75fb      	strb	r3, [r7, #23]
	}

	// Check BME280_0
	if(readBME280_id_reg(hi2c1, 0) != 0x60) {			// Expected 0x60
 8001e54:	2100      	movs	r1, #0
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7fe fc92 	bl	8000780 <readBME280_id_reg>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b60      	cmp	r3, #96	@ 0x60
 8001e60:	d003      	beq.n	8001e6a <systemStatus+0x3e>
		retVal  = retVal | 0x08;
 8001e62:	7dfb      	ldrb	r3, [r7, #23]
 8001e64:	f043 0308 	orr.w	r3, r3, #8
 8001e68:	75fb      	strb	r3, [r7, #23]
	}

	// Check Accelerometer
	if(readAccel_whoami(hi2c2) != 0xE5) {				// Expected 0xE5
 8001e6a:	6838      	ldr	r0, [r7, #0]
 8001e6c:	f7fe fb9e 	bl	80005ac <readAccel_whoami>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2be5      	cmp	r3, #229	@ 0xe5
 8001e74:	d003      	beq.n	8001e7e <systemStatus+0x52>
		retVal  = retVal | 0x04;
 8001e76:	7dfb      	ldrb	r3, [r7, #23]
 8001e78:	f043 0304 	orr.w	r3, r3, #4
 8001e7c:	75fb      	strb	r3, [r7, #23]
	}

	// Check SPIFlash_1
	uint8_t manu[2] = {0, 0};
 8001e7e:	2300      	movs	r3, #0
 8001e80:	82bb      	strh	r3, [r7, #20]
	read_manufacturer_id(manu, hspi2, cs_spi2);
 8001e82:	4b11      	ldr	r3, [pc, #68]	@ (8001ec8 <systemStatus+0x9c>)
 8001e84:	f107 0014 	add.w	r0, r7, #20
 8001e88:	cb0c      	ldmia	r3, {r2, r3}
 8001e8a:	68b9      	ldr	r1, [r7, #8]
 8001e8c:	f7fe feb8 	bl	8000c00 <read_manufacturer_id>
	if(manu[0] != 0xEF) {								// Expected 0xEF
 8001e90:	7d3b      	ldrb	r3, [r7, #20]
 8001e92:	2bef      	cmp	r3, #239	@ 0xef
 8001e94:	d003      	beq.n	8001e9e <systemStatus+0x72>
		retVal  = retVal | 0x02;
 8001e96:	7dfb      	ldrb	r3, [r7, #23]
 8001e98:	f043 0302 	orr.w	r3, r3, #2
 8001e9c:	75fb      	strb	r3, [r7, #23]
	}

	// Check SPIFlash_0
	uint8_t manu0[2] = {0, 0};
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	823b      	strh	r3, [r7, #16]
	read_manufacturer_id(manu0, hspi1, cs_spi1);
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ecc <systemStatus+0xa0>)
 8001ea4:	f107 0010 	add.w	r0, r7, #16
 8001ea8:	cb0c      	ldmia	r3, {r2, r3}
 8001eaa:	68f9      	ldr	r1, [r7, #12]
 8001eac:	f7fe fea8 	bl	8000c00 <read_manufacturer_id>
	if(manu0[0] != 0xEF) {								// Expected 0xEF
 8001eb0:	7c3b      	ldrb	r3, [r7, #16]
 8001eb2:	2bef      	cmp	r3, #239	@ 0xef
 8001eb4:	d003      	beq.n	8001ebe <systemStatus+0x92>
		retVal  = retVal | 0x01;
 8001eb6:	7dfb      	ldrb	r3, [r7, #23]
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	75fb      	strb	r3, [r7, #23]
	}
	return retVal;
 8001ebe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20000604 	.word	0x20000604
 8001ecc:	200005f4 	.word	0x200005f4

08001ed0 <heartbeatUART>:

void heartbeatUART(UART_HandleTypeDef *huart) {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	send_uart_hex(huart, 0x51);			// Transmit the heartbeat as device ID (0x51 = Q)
 8001ed8:	2151      	movs	r1, #81	@ 0x51
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f001 f859 	bl	8002f92 <send_uart_hex>
}
 8001ee0:	bf00      	nop
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <eraseFlashSPI>:

/***************************************************************************************************************
 * SPI Flash Functions
 */
void eraseFlashSPI(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, GPIO_Config chip_select) {
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	4639      	mov	r1, r7
 8001ef4:	e881 000c 	stmia.w	r1, {r2, r3}
	if (erase_chip_spi(hspi, chip_select) == HAL_OK) {
 8001ef8:	463b      	mov	r3, r7
 8001efa:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f7fe fd32 	bl	8000968 <erase_chip_spi>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d104      	bne.n	8001f14 <eraseFlashSPI+0x2c>
		send_uart_string(huart, "Successful Chip Erase\r\n");
 8001f0a:	4906      	ldr	r1, [pc, #24]	@ (8001f24 <eraseFlashSPI+0x3c>)
 8001f0c:	68b8      	ldr	r0, [r7, #8]
 8001f0e:	f001 f82c 	bl	8002f6a <send_uart_string>
	} else {
		send_uart_string(huart, "Error during chip erase. Please check the connection and try again.\r\n");
	}
}
 8001f12:	e003      	b.n	8001f1c <eraseFlashSPI+0x34>
		send_uart_string(huart, "Error during chip erase. Please check the connection and try again.\r\n");
 8001f14:	4904      	ldr	r1, [pc, #16]	@ (8001f28 <eraseFlashSPI+0x40>)
 8001f16:	68b8      	ldr	r0, [r7, #8]
 8001f18:	f001 f827 	bl	8002f6a <send_uart_string>
}
 8001f1c:	bf00      	nop
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	08009574 	.word	0x08009574
 8001f28:	0800958c 	.word	0x0800958c

08001f2c <readFlashToUART>:

void readFlashToUART(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, GPIO_Config config) {
 8001f2c:	b590      	push	{r4, r7, lr}
 8001f2e:	b0cb      	sub	sp, #300	@ 0x12c
 8001f30:	af02      	add	r7, sp, #8
 8001f32:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 8001f36:	f5a4 748a 	sub.w	r4, r4, #276	@ 0x114
 8001f3a:	6020      	str	r0, [r4, #0]
 8001f3c:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8001f40:	f5a0 708c 	sub.w	r0, r0, #280	@ 0x118
 8001f44:	6001      	str	r1, [r0, #0]
 8001f46:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8001f4a:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 8001f4e:	e881 000c 	stmia.w	r1, {r2, r3}
	uint32_t num_of_pages = next_blank_page;
 8001f52:	4b2a      	ldr	r3, [pc, #168]	@ (8001ffc <readFlashToUART+0xd0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	if(num_of_pages == 0) {
 8001f5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d103      	bne.n	8001f6a <readFlashToUART+0x3e>
		num_of_pages = PAGE_SIZE;
 8001f62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f66:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	}
	num_of_pages = num_of_pages/PAGE_SIZE;
 8001f6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001f6e:	0a1b      	lsrs	r3, r3, #8
 8001f70:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	uint32_t address = 0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET);		// Activate the "write out" LED
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	2180      	movs	r1, #128	@ 0x80
 8001f7e:	4820      	ldr	r0, [pc, #128]	@ (8002000 <readFlashToUART+0xd4>)
 8001f80:	f002 fe1c 	bl	8004bbc <HAL_GPIO_WritePin>

	for (int i = 0; i < (num_of_pages); i++) {
 8001f84:	2300      	movs	r3, #0
 8001f86:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8001f8a:	e026      	b.n	8001fda <readFlashToUART+0xae>
		uint8_t page[PAGE_SIZE];
		read_page_spi(page, hspi, address, config);
 8001f8c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001f90:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001f94:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001f98:	f5a2 718a 	sub.w	r1, r2, #276	@ 0x114
 8001f9c:	f107 0014 	add.w	r0, r7, #20
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	9200      	str	r2, [sp, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001faa:	6809      	ldr	r1, [r1, #0]
 8001fac:	f7fe fe02 	bl	8000bb4 <read_page_spi>
		uart_transmit_page(huart, page);						// Transmit the data//
 8001fb0:	f107 0214 	add.w	r2, r7, #20
 8001fb4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001fb8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001fbc:	4611      	mov	r1, r2
 8001fbe:	6818      	ldr	r0, [r3, #0]
 8001fc0:	f000 ffc2 	bl	8002f48 <uart_transmit_page>
		address += PAGE_SIZE;
 8001fc4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001fc8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001fcc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	for (int i = 0; i < (num_of_pages); i++) {
 8001fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8001fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001fde:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d8d2      	bhi.n	8001f8c <readFlashToUART+0x60>
	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);	// Deactivate the "write out" LED
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	2180      	movs	r1, #128	@ 0x80
 8001fea:	4805      	ldr	r0, [pc, #20]	@ (8002000 <readFlashToUART+0xd4>)
 8001fec:	f002 fde6 	bl	8004bbc <HAL_GPIO_WritePin>
}
 8001ff0:	bf00      	nop
 8001ff2:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd90      	pop	{r4, r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	200005d4 	.word	0x200005d4
 8002000:	40020400 	.word	0x40020400

08002004 <readFlashManuSPI>:

void readFlashManuSPI(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, GPIO_Config config) {
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	4639      	mov	r1, r7
 8002010:	e881 000c 	stmia.w	r1, {r2, r3}
	uint8_t manu[2] = {0, 0};
 8002014:	2300      	movs	r3, #0
 8002016:	82bb      	strh	r3, [r7, #20]
	read_manufacturer_id(manu, hspi, config);
 8002018:	f107 0014 	add.w	r0, r7, #20
 800201c:	463b      	mov	r3, r7
 800201e:	cb0c      	ldmia	r3, {r2, r3}
 8002020:	68f9      	ldr	r1, [r7, #12]
 8002022:	f7fe fded 	bl	8000c00 <read_manufacturer_id>
	send_uart_hex(huart, manu[0]);
 8002026:	7d3b      	ldrb	r3, [r7, #20]
 8002028:	4619      	mov	r1, r3
 800202a:	68b8      	ldr	r0, [r7, #8]
 800202c:	f000 ffb1 	bl	8002f92 <send_uart_hex>
	send_uart_hex(huart, manu[1]);
 8002030:	7d7b      	ldrb	r3, [r7, #21]
 8002032:	4619      	mov	r1, r3
 8002034:	68b8      	ldr	r0, [r7, #8]
 8002036:	f000 ffac 	bl	8002f92 <send_uart_hex>
}
 800203a:	bf00      	nop
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <writePageSPI_W>:

void writePageSPI_W(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, GPIO_Config config) {
 8002044:	b590      	push	{r4, r7, lr}
 8002046:	b0c9      	sub	sp, #292	@ 0x124
 8002048:	af02      	add	r7, sp, #8
 800204a:	f507 748c 	add.w	r4, r7, #280	@ 0x118
 800204e:	f5a4 7486 	sub.w	r4, r4, #268	@ 0x10c
 8002052:	6020      	str	r0, [r4, #0]
 8002054:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 8002058:	f5a0 7088 	sub.w	r0, r0, #272	@ 0x110
 800205c:	6001      	str	r1, [r0, #0]
 800205e:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8002062:	f5a1 718c 	sub.w	r1, r1, #280	@ 0x118
 8002066:	e881 000c 	stmia.w	r1, {r2, r3}
	uint8_t data_out[PAGE_SIZE];
	for (int i = 0; i < PAGE_SIZE; i++) {
 800206a:	2300      	movs	r3, #0
 800206c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002070:	e00d      	b.n	800208e <writePageSPI_W+0x4a>
		data_out[i] = 0x77;		// Make all data in the page 'w'
 8002072:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002076:	f5a3 7282 	sub.w	r2, r3, #260	@ 0x104
 800207a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800207e:	4413      	add	r3, r2
 8002080:	2277      	movs	r2, #119	@ 0x77
 8002082:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < PAGE_SIZE; i++) {
 8002084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002088:	3301      	adds	r3, #1
 800208a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800208e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002092:	2bff      	cmp	r3, #255	@ 0xff
 8002094:	dded      	ble.n	8002072 <writePageSPI_W+0x2e>
	}
	write_data_spi_dma(data_out, hspi, next_blank_page, config);
 8002096:	4b13      	ldr	r3, [pc, #76]	@ (80020e4 <writePageSPI_W+0xa0>)
 8002098:	681c      	ldr	r4, [r3, #0]
 800209a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800209e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80020a2:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80020a6:	f5a2 7186 	sub.w	r1, r2, #268	@ 0x10c
 80020aa:	f107 0014 	add.w	r0, r7, #20
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	9200      	str	r2, [sp, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4622      	mov	r2, r4
 80020b6:	6809      	ldr	r1, [r1, #0]
 80020b8:	f7fe fcb6 	bl	8000a28 <write_data_spi_dma>
	next_blank_page += PAGE_SIZE;
 80020bc:	4b09      	ldr	r3, [pc, #36]	@ (80020e4 <writePageSPI_W+0xa0>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80020c4:	4a07      	ldr	r2, [pc, #28]	@ (80020e4 <writePageSPI_W+0xa0>)
 80020c6:	6013      	str	r3, [r2, #0]

	send_uart_string(huart, "Successful Page Written\r\n");
 80020c8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80020cc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80020d0:	4905      	ldr	r1, [pc, #20]	@ (80020e8 <writePageSPI_W+0xa4>)
 80020d2:	6818      	ldr	r0, [r3, #0]
 80020d4:	f000 ff49 	bl	8002f6a <send_uart_string>
}
 80020d8:	bf00      	nop
 80020da:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd90      	pop	{r4, r7, pc}
 80020e2:	bf00      	nop
 80020e4:	200005d4 	.word	0x200005d4
 80020e8:	080095d4 	.word	0x080095d4

080020ec <resetSPIFlash>:

void resetSPIFlash(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, GPIO_Config config) {
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	4639      	mov	r1, r7
 80020f8:	e881 000c 	stmia.w	r1, {r2, r3}
	software_reset(hspi, config);
 80020fc:	463b      	mov	r3, r7
 80020fe:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f7fe fc6c 	bl	80009e0 <software_reset>
	send_uart_string(huart, "Flash Chip Reset\r\n");
 8002108:	4903      	ldr	r1, [pc, #12]	@ (8002118 <resetSPIFlash+0x2c>)
 800210a:	68b8      	ldr	r0, [r7, #8]
 800210c:	f000 ff2d 	bl	8002f6a <send_uart_string>
}
 8002110:	bf00      	nop
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	080095f0 	.word	0x080095f0

0800211c <checkAccelWhoAmI>:
/***************************************************************************************************************
 * I2C Accelerometer Functions
 */
void checkAccelWhoAmI(I2C_HandleTypeDef* hi2c, UART_HandleTypeDef *huart) {
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
	uint8_t whoami = readAccel_whoami(hi2c);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7fe fa40 	bl	80005ac <readAccel_whoami>
 800212c:	4603      	mov	r3, r0
 800212e:	73fb      	strb	r3, [r7, #15]
	send_uart_hex(huart, whoami);
 8002130:	7bfb      	ldrb	r3, [r7, #15]
 8002132:	4619      	mov	r1, r3
 8002134:	6838      	ldr	r0, [r7, #0]
 8002136:	f000 ff2c 	bl	8002f92 <send_uart_hex>
}
 800213a:	bf00      	nop
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
	...

08002144 <accelToUART>:

void accelToUART(UART_HandleTypeDef *huart) {
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 6; i++) {
 800214c:	2300      	movs	r3, #0
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	e00a      	b.n	8002168 <accelToUART+0x24>
		send_uart_hex(huart, accel_data[i]);
 8002152:	4a09      	ldr	r2, [pc, #36]	@ (8002178 <accelToUART+0x34>)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4413      	add	r3, r2
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	4619      	mov	r1, r3
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 ff18 	bl	8002f92 <send_uart_hex>
	for (int i = 0; i < 6; i++) {
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	3301      	adds	r3, #1
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2b05      	cmp	r3, #5
 800216c:	ddf1      	ble.n	8002152 <accelToUART+0xe>
	}
}
 800216e:	bf00      	nop
 8002170:	bf00      	nop
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	200005bc 	.word	0x200005bc

0800217c <readTempSensorID>:

/***************************************************************************************************************
 * I2C BME280 Sensor Functions
 */
void readTempSensorID(I2C_HandleTypeDef* hi2c, UART_HandleTypeDef *huart, uint8_t tempNo) {
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	4613      	mov	r3, r2
 8002188:	71fb      	strb	r3, [r7, #7]
	send_uart_hex(huart, readBME280_id_reg(hi2c, tempNo));
 800218a:	79fb      	ldrb	r3, [r7, #7]
 800218c:	4619      	mov	r1, r3
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f7fe faf6 	bl	8000780 <readBME280_id_reg>
 8002194:	4603      	mov	r3, r0
 8002196:	4619      	mov	r1, r3
 8002198:	68b8      	ldr	r0, [r7, #8]
 800219a:	f000 fefa 	bl	8002f92 <send_uart_hex>
}
 800219e:	bf00      	nop
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <readTempCalibration>:

void readTempCalibration(I2C_HandleTypeDef* hi2c, UART_HandleTypeDef *huart, uint8_t tempNo) {
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b090      	sub	sp, #64	@ 0x40
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	60f8      	str	r0, [r7, #12]
 80021ae:	60b9      	str	r1, [r7, #8]
 80021b0:	4613      	mov	r3, r2
 80021b2:	71fb      	strb	r3, [r7, #7]
	uint8_t calibration1[25];
	uint8_t calibration2[7];

	for (uint8_t i = 0; i < CALIB_CNT_1; i++) {
 80021b4:	2300      	movs	r3, #0
 80021b6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80021ba:	e016      	b.n	80021ea <readTempCalibration+0x44>
		calibration1[i] = 0x00;
 80021bc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80021c0:	3340      	adds	r3, #64	@ 0x40
 80021c2:	443b      	add	r3, r7
 80021c4:	2200      	movs	r2, #0
 80021c6:	f803 2c28 	strb.w	r2, [r3, #-40]
		if (i < CALIB_CNT_2) {
 80021ca:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80021ce:	2b06      	cmp	r3, #6
 80021d0:	d806      	bhi.n	80021e0 <readTempCalibration+0x3a>
			calibration2[i] = 0x00;
 80021d2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80021d6:	3340      	adds	r3, #64	@ 0x40
 80021d8:	443b      	add	r3, r7
 80021da:	2200      	movs	r2, #0
 80021dc:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (uint8_t i = 0; i < CALIB_CNT_1; i++) {
 80021e0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80021e4:	3301      	adds	r3, #1
 80021e6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80021ea:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80021ee:	2b18      	cmp	r3, #24
 80021f0:	d9e4      	bls.n	80021bc <readTempCalibration+0x16>
		}
	}

	readBME280_calib(hi2c, tempNo, calibration1, calibration2);
 80021f2:	f107 0310 	add.w	r3, r7, #16
 80021f6:	f107 0218 	add.w	r2, r7, #24
 80021fa:	79f9      	ldrb	r1, [r7, #7]
 80021fc:	68f8      	ldr	r0, [r7, #12]
 80021fe:	f7fe fadb 	bl	80007b8 <readBME280_calib>

	for (int i = 0; i < 25; i++) {
 8002202:	2300      	movs	r3, #0
 8002204:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002206:	e00b      	b.n	8002220 <readTempCalibration+0x7a>
	  send_uart_hex(huart, calibration1[i]);
 8002208:	f107 0218 	add.w	r2, r7, #24
 800220c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800220e:	4413      	add	r3, r2
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	4619      	mov	r1, r3
 8002214:	68b8      	ldr	r0, [r7, #8]
 8002216:	f000 febc 	bl	8002f92 <send_uart_hex>
	for (int i = 0; i < 25; i++) {
 800221a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800221c:	3301      	adds	r3, #1
 800221e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002222:	2b18      	cmp	r3, #24
 8002224:	ddf0      	ble.n	8002208 <readTempCalibration+0x62>
	}

	for (int i = 0; i < 7; i++) {
 8002226:	2300      	movs	r3, #0
 8002228:	637b      	str	r3, [r7, #52]	@ 0x34
 800222a:	e00b      	b.n	8002244 <readTempCalibration+0x9e>
	  send_uart_hex(huart, calibration2[i]);
 800222c:	f107 0210 	add.w	r2, r7, #16
 8002230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002232:	4413      	add	r3, r2
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	4619      	mov	r1, r3
 8002238:	68b8      	ldr	r0, [r7, #8]
 800223a:	f000 feaa 	bl	8002f92 <send_uart_hex>
	for (int i = 0; i < 7; i++) {
 800223e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002240:	3301      	adds	r3, #1
 8002242:	637b      	str	r3, [r7, #52]	@ 0x34
 8002244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002246:	2b06      	cmp	r3, #6
 8002248:	ddf0      	ble.n	800222c <readTempCalibration+0x86>
	}
}
 800224a:	bf00      	nop
 800224c:	bf00      	nop
 800224e:	3740      	adds	r7, #64	@ 0x40
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <readTempSensor>:

void readTempSensor(UART_HandleTypeDef *huart, uint8_t tempNo) {
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	460b      	mov	r3, r1
 800225e:	70fb      	strb	r3, [r7, #3]
	if (tempNo == 0) {
 8002260:	78fb      	ldrb	r3, [r7, #3]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d111      	bne.n	800228a <readTempSensor+0x36>
		for (int i = 0; i < 6; i++) {
 8002266:	2300      	movs	r3, #0
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	e00a      	b.n	8002282 <readTempSensor+0x2e>
			send_uart_hex(huart, bme280_data_0[i]);
 800226c:	4a13      	ldr	r2, [pc, #76]	@ (80022bc <readTempSensor+0x68>)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	4413      	add	r3, r2
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	4619      	mov	r1, r3
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 fe8b 	bl	8002f92 <send_uart_hex>
		for (int i = 0; i < 6; i++) {
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	3301      	adds	r3, #1
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2b05      	cmp	r3, #5
 8002286:	ddf1      	ble.n	800226c <readTempSensor+0x18>
	} else if (tempNo == 1) {
		for (int i = 0; i < 6; i++) {
			send_uart_hex(huart, bme280_data_1[i]);
		}
	}
}
 8002288:	e013      	b.n	80022b2 <readTempSensor+0x5e>
	} else if (tempNo == 1) {
 800228a:	78fb      	ldrb	r3, [r7, #3]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d110      	bne.n	80022b2 <readTempSensor+0x5e>
		for (int i = 0; i < 6; i++) {
 8002290:	2300      	movs	r3, #0
 8002292:	60bb      	str	r3, [r7, #8]
 8002294:	e00a      	b.n	80022ac <readTempSensor+0x58>
			send_uart_hex(huart, bme280_data_1[i]);
 8002296:	4a0a      	ldr	r2, [pc, #40]	@ (80022c0 <readTempSensor+0x6c>)
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	4413      	add	r3, r2
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	4619      	mov	r1, r3
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 fe76 	bl	8002f92 <send_uart_hex>
		for (int i = 0; i < 6; i++) {
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	3301      	adds	r3, #1
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	2b05      	cmp	r3, #5
 80022b0:	ddf1      	ble.n	8002296 <readTempSensor+0x42>
}
 80022b2:	bf00      	nop
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	200005c4 	.word	0x200005c4
 80022c0:	200005cc 	.word	0x200005cc

080022c4 <readAllSensors>:

/***************************************************************************************************************
 * Process All Sensors
 */
void readAllSensors(I2C_HandleTypeDef* hi2c_accel, I2C_HandleTypeDef* hi2c_temp, RTC_HandleTypeDef* hrtc) {
 80022c4:	b5b0      	push	{r4, r5, r7, lr}
 80022c6:	b08a      	sub	sp, #40	@ 0x28
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
	// Read Accelerometer Data
	readAccelerometer(accel_data, hi2c_accel);
 80022d0:	68f9      	ldr	r1, [r7, #12]
 80022d2:	4868      	ldr	r0, [pc, #416]	@ (8002474 <readAllSensors+0x1b0>)
 80022d4:	f7fe f944 	bl	8000560 <readAccelerometer>

	// Read BME280 Data
	readTempHumPres(bme280_data_0, hi2c_temp, 0);
 80022d8:	2200      	movs	r2, #0
 80022da:	68b9      	ldr	r1, [r7, #8]
 80022dc:	4866      	ldr	r0, [pc, #408]	@ (8002478 <readAllSensors+0x1b4>)
 80022de:	f7fe f9f5 	bl	80006cc <readTempHumPres>
	readTempHumPres(bme280_data_1, hi2c_temp, 1);
 80022e2:	2201      	movs	r2, #1
 80022e4:	68b9      	ldr	r1, [r7, #8]
 80022e6:	4865      	ldr	r0, [pc, #404]	@ (800247c <readAllSensors+0x1b8>)
 80022e8:	f7fe f9f0 	bl	80006cc <readTempHumPres>

	uint16_t time = getTimestampMilliseconds(hrtc);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f903 	bl	80024f8 <getTimestampMilliseconds>
 80022f2:	4603      	mov	r3, r0
 80022f4:	82fb      	strh	r3, [r7, #22]
	uint8_t array_ptr = 0;
 80022f6:	2300      	movs	r3, #0
 80022f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	// Store the new read in the buffer if there is space
	if (byte_tracker < (PAGE_SIZE - READ_SIZE)) {
 80022fc:	4b60      	ldr	r3, [pc, #384]	@ (8002480 <readAllSensors+0x1bc>)
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	2bea      	cmp	r3, #234	@ 0xea
 8002302:	f200 80b2 	bhi.w	800246a <readAllSensors+0x1a6>
		// Store the timestamp in the buffer (Little Endian)
		data_buffer_tx[buffer_tracker][byte_tracker + array_ptr] = (uint8_t) (time & 0xFF); 		// Least significant byte (LSB)
 8002306:	4b5f      	ldr	r3, [pc, #380]	@ (8002484 <readAllSensors+0x1c0>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	461a      	mov	r2, r3
 800230c:	4b5c      	ldr	r3, [pc, #368]	@ (8002480 <readAllSensors+0x1bc>)
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	4619      	mov	r1, r3
 8002312:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002316:	440b      	add	r3, r1
 8002318:	8af9      	ldrh	r1, [r7, #22]
 800231a:	b2c8      	uxtb	r0, r1
 800231c:	495a      	ldr	r1, [pc, #360]	@ (8002488 <readAllSensors+0x1c4>)
 800231e:	0212      	lsls	r2, r2, #8
 8002320:	440a      	add	r2, r1
 8002322:	4413      	add	r3, r2
 8002324:	4602      	mov	r2, r0
 8002326:	701a      	strb	r2, [r3, #0]
		array_ptr += 1;
 8002328:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800232c:	3301      	adds	r3, #1
 800232e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		data_buffer_tx[buffer_tracker][byte_tracker + array_ptr] = (uint8_t) ((time >> 8) & 0xFF); // Most significant byte (MSB)
 8002332:	8afb      	ldrh	r3, [r7, #22]
 8002334:	0a1b      	lsrs	r3, r3, #8
 8002336:	b299      	uxth	r1, r3
 8002338:	4b52      	ldr	r3, [pc, #328]	@ (8002484 <readAllSensors+0x1c0>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	461a      	mov	r2, r3
 800233e:	4b50      	ldr	r3, [pc, #320]	@ (8002480 <readAllSensors+0x1bc>)
 8002340:	881b      	ldrh	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002348:	4403      	add	r3, r0
 800234a:	b2c8      	uxtb	r0, r1
 800234c:	494e      	ldr	r1, [pc, #312]	@ (8002488 <readAllSensors+0x1c4>)
 800234e:	0212      	lsls	r2, r2, #8
 8002350:	440a      	add	r2, r1
 8002352:	4413      	add	r3, r2
 8002354:	4602      	mov	r2, r0
 8002356:	701a      	strb	r2, [r3, #0]
		array_ptr += 1;
 8002358:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800235c:	3301      	adds	r3, #1
 800235e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		// Store the accelerometer data
		for (int i = 0; i < 6; i++) {
 8002362:	2300      	movs	r3, #0
 8002364:	623b      	str	r3, [r7, #32]
 8002366:	e01a      	b.n	800239e <readAllSensors+0xda>
		  data_buffer_tx[buffer_tracker][byte_tracker + array_ptr] = accel_data[i];
 8002368:	4b46      	ldr	r3, [pc, #280]	@ (8002484 <readAllSensors+0x1c0>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	461c      	mov	r4, r3
 800236e:	4b44      	ldr	r3, [pc, #272]	@ (8002480 <readAllSensors+0x1bc>)
 8002370:	881b      	ldrh	r3, [r3, #0]
 8002372:	461a      	mov	r2, r3
 8002374:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002378:	4413      	add	r3, r2
 800237a:	493e      	ldr	r1, [pc, #248]	@ (8002474 <readAllSensors+0x1b0>)
 800237c:	6a3a      	ldr	r2, [r7, #32]
 800237e:	440a      	add	r2, r1
 8002380:	7810      	ldrb	r0, [r2, #0]
 8002382:	4941      	ldr	r1, [pc, #260]	@ (8002488 <readAllSensors+0x1c4>)
 8002384:	0222      	lsls	r2, r4, #8
 8002386:	440a      	add	r2, r1
 8002388:	4413      	add	r3, r2
 800238a:	4602      	mov	r2, r0
 800238c:	701a      	strb	r2, [r3, #0]
		  array_ptr += 1;
 800238e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002392:	3301      	adds	r3, #1
 8002394:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		for (int i = 0; i < 6; i++) {
 8002398:	6a3b      	ldr	r3, [r7, #32]
 800239a:	3301      	adds	r3, #1
 800239c:	623b      	str	r3, [r7, #32]
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	2b05      	cmp	r3, #5
 80023a2:	dde1      	ble.n	8002368 <readAllSensors+0xa4>
		}

		// Store the BME280_0 Data
		for (int i = 0; i < 6; i++) {
 80023a4:	2300      	movs	r3, #0
 80023a6:	61fb      	str	r3, [r7, #28]
 80023a8:	e01a      	b.n	80023e0 <readAllSensors+0x11c>
		  data_buffer_tx[buffer_tracker][byte_tracker + array_ptr] = bme280_data_0[i];
 80023aa:	4b36      	ldr	r3, [pc, #216]	@ (8002484 <readAllSensors+0x1c0>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	461c      	mov	r4, r3
 80023b0:	4b33      	ldr	r3, [pc, #204]	@ (8002480 <readAllSensors+0x1bc>)
 80023b2:	881b      	ldrh	r3, [r3, #0]
 80023b4:	461a      	mov	r2, r3
 80023b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80023ba:	4413      	add	r3, r2
 80023bc:	492e      	ldr	r1, [pc, #184]	@ (8002478 <readAllSensors+0x1b4>)
 80023be:	69fa      	ldr	r2, [r7, #28]
 80023c0:	440a      	add	r2, r1
 80023c2:	7810      	ldrb	r0, [r2, #0]
 80023c4:	4930      	ldr	r1, [pc, #192]	@ (8002488 <readAllSensors+0x1c4>)
 80023c6:	0222      	lsls	r2, r4, #8
 80023c8:	440a      	add	r2, r1
 80023ca:	4413      	add	r3, r2
 80023cc:	4602      	mov	r2, r0
 80023ce:	701a      	strb	r2, [r3, #0]
		  array_ptr += 1;
 80023d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80023d4:	3301      	adds	r3, #1
 80023d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		for (int i = 0; i < 6; i++) {
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3301      	adds	r3, #1
 80023de:	61fb      	str	r3, [r7, #28]
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	2b05      	cmp	r3, #5
 80023e4:	dde1      	ble.n	80023aa <readAllSensors+0xe6>
		}

		// Store the BME280_1 Data
		for (int i = 0; i < 6; i++) {
 80023e6:	2300      	movs	r3, #0
 80023e8:	61bb      	str	r3, [r7, #24]
 80023ea:	e01a      	b.n	8002422 <readAllSensors+0x15e>
		  data_buffer_tx[buffer_tracker][byte_tracker + array_ptr] = bme280_data_1[i];
 80023ec:	4b25      	ldr	r3, [pc, #148]	@ (8002484 <readAllSensors+0x1c0>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	461c      	mov	r4, r3
 80023f2:	4b23      	ldr	r3, [pc, #140]	@ (8002480 <readAllSensors+0x1bc>)
 80023f4:	881b      	ldrh	r3, [r3, #0]
 80023f6:	461a      	mov	r2, r3
 80023f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80023fc:	4413      	add	r3, r2
 80023fe:	491f      	ldr	r1, [pc, #124]	@ (800247c <readAllSensors+0x1b8>)
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	440a      	add	r2, r1
 8002404:	7810      	ldrb	r0, [r2, #0]
 8002406:	4920      	ldr	r1, [pc, #128]	@ (8002488 <readAllSensors+0x1c4>)
 8002408:	0222      	lsls	r2, r4, #8
 800240a:	440a      	add	r2, r1
 800240c:	4413      	add	r3, r2
 800240e:	4602      	mov	r2, r0
 8002410:	701a      	strb	r2, [r3, #0]
		  array_ptr += 1;
 8002412:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002416:	3301      	adds	r3, #1
 8002418:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		for (int i = 0; i < 6; i++) {
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	3301      	adds	r3, #1
 8002420:	61bb      	str	r3, [r7, #24]
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	2b05      	cmp	r3, #5
 8002426:	dde1      	ble.n	80023ec <readAllSensors+0x128>
		}

		// Store the flight state and peripheral status in the final byte
		data_buffer_tx[buffer_tracker][byte_tracker + array_ptr] = combine_system_status();
 8002428:	4b16      	ldr	r3, [pc, #88]	@ (8002484 <readAllSensors+0x1c0>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	461d      	mov	r5, r3
 800242e:	4b14      	ldr	r3, [pc, #80]	@ (8002480 <readAllSensors+0x1bc>)
 8002430:	881b      	ldrh	r3, [r3, #0]
 8002432:	461a      	mov	r2, r3
 8002434:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002438:	18d4      	adds	r4, r2, r3
 800243a:	f7ff fcad 	bl	8001d98 <combine_system_status>
 800243e:	4603      	mov	r3, r0
 8002440:	4619      	mov	r1, r3
 8002442:	4a11      	ldr	r2, [pc, #68]	@ (8002488 <readAllSensors+0x1c4>)
 8002444:	022b      	lsls	r3, r5, #8
 8002446:	4413      	add	r3, r2
 8002448:	4423      	add	r3, r4
 800244a:	460a      	mov	r2, r1
 800244c:	701a      	strb	r2, [r3, #0]
		array_ptr += 1;
 800244e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002452:	3301      	adds	r3, #1
 8002454:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		byte_tracker = byte_tracker + (array_ptr);
 8002458:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800245c:	b29a      	uxth	r2, r3
 800245e:	4b08      	ldr	r3, [pc, #32]	@ (8002480 <readAllSensors+0x1bc>)
 8002460:	881b      	ldrh	r3, [r3, #0]
 8002462:	4413      	add	r3, r2
 8002464:	b29a      	uxth	r2, r3
 8002466:	4b06      	ldr	r3, [pc, #24]	@ (8002480 <readAllSensors+0x1bc>)
 8002468:	801a      	strh	r2, [r3, #0]
	}
}
 800246a:	bf00      	nop
 800246c:	3728      	adds	r7, #40	@ 0x28
 800246e:	46bd      	mov	sp, r7
 8002470:	bdb0      	pop	{r4, r5, r7, pc}
 8002472:	bf00      	nop
 8002474:	200005bc 	.word	0x200005bc
 8002478:	200005c4 	.word	0x200005c4
 800247c:	200005cc 	.word	0x200005cc
 8002480:	200005d8 	.word	0x200005d8
 8002484:	200005b8 	.word	0x200005b8
 8002488:	200003b8 	.word	0x200003b8

0800248c <initialise_rtc_default>:
    .Month = RTC_MONTH_JANUARY, // Set default month (e.g., January)
    .Date = 1, // Set default day of the month
    .Year = 24 // Set default year (e.g., 2021)
};

void initialise_rtc_default(RTC_HandleTypeDef* hrtc) {
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
    // Enable access to the backup domain
    __HAL_RCC_PWR_CLK_ENABLE();
 8002494:	2300      	movs	r3, #0
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	4b13      	ldr	r3, [pc, #76]	@ (80024e8 <initialise_rtc_default+0x5c>)
 800249a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249c:	4a12      	ldr	r2, [pc, #72]	@ (80024e8 <initialise_rtc_default+0x5c>)
 800249e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80024a4:	4b10      	ldr	r3, [pc, #64]	@ (80024e8 <initialise_rtc_default+0x5c>)
 80024a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	68fb      	ldr	r3, [r7, #12]
    HAL_PWR_EnableBkUpAccess();
 80024b0:	f003 fc46 	bl	8005d40 <HAL_PWR_EnableBkUpAccess>

    // Reset the RTC
    __HAL_RCC_BACKUPRESET_FORCE();
 80024b4:	4b0d      	ldr	r3, [pc, #52]	@ (80024ec <initialise_rtc_default+0x60>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	601a      	str	r2, [r3, #0]
    __HAL_RCC_BACKUPRESET_RELEASE();
 80024ba:	4b0c      	ldr	r3, [pc, #48]	@ (80024ec <initialise_rtc_default+0x60>)
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]

    // Initialize RTC hardware
    HAL_RTC_MspInit(hrtc);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 fa61 	bl	8002988 <HAL_RTC_MspInit>

    // Set default time and date
    HAL_RTC_SetTime(hrtc, &defaultTime, RTC_FORMAT_BIN);
 80024c6:	2200      	movs	r2, #0
 80024c8:	4909      	ldr	r1, [pc, #36]	@ (80024f0 <initialise_rtc_default+0x64>)
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f004 fafb 	bl	8006ac6 <HAL_RTC_SetTime>
    HAL_RTC_SetDate(hrtc, &defaultDate, RTC_FORMAT_BIN);
 80024d0:	2200      	movs	r2, #0
 80024d2:	4908      	ldr	r1, [pc, #32]	@ (80024f4 <initialise_rtc_default+0x68>)
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f004 fbee 	bl	8006cb6 <HAL_RTC_SetDate>

    // Disable access to the backup domain
    HAL_PWR_DisableBkUpAccess();
 80024da:	f003 fc45 	bl	8005d68 <HAL_PWR_DisableBkUpAccess>
}
 80024de:	bf00      	nop
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40023800 	.word	0x40023800
 80024ec:	42470e40 	.word	0x42470e40
 80024f0:	20000620 	.word	0x20000620
 80024f4:	20000018 	.word	0x20000018

080024f8 <getTimestampMilliseconds>:

uint32_t getTimestampMilliseconds(RTC_HandleTypeDef* hrtc) {
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08c      	sub	sp, #48	@ 0x30
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
    RTC_TimeTypeDef rtcTime;
    RTC_DateTypeDef rtcDate;

    // Read RTC time and date
    HAL_RTC_GetTime(hrtc, &rtcTime, RTC_FORMAT_BIN);
 8002500:	f107 0310 	add.w	r3, r7, #16
 8002504:	2200      	movs	r2, #0
 8002506:	4619      	mov	r1, r3
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f004 fb76 	bl	8006bfa <HAL_RTC_GetTime>
    HAL_RTC_GetDate(hrtc, &rtcDate, RTC_FORMAT_BIN);
 800250e:	f107 030c 	add.w	r3, r7, #12
 8002512:	2200      	movs	r2, #0
 8002514:	4619      	mov	r1, r3
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f004 fc51 	bl	8006dbe <HAL_RTC_GetDate>

    // Calculate timestamp in milliseconds
    uint32_t timestampSeconds = rtcTime.Seconds + rtcTime.Minutes * 60 + rtcTime.Hours * 3600;
 800251c:	7cbb      	ldrb	r3, [r7, #18]
 800251e:	4619      	mov	r1, r3
 8002520:	7c7b      	ldrb	r3, [r7, #17]
 8002522:	461a      	mov	r2, r3
 8002524:	4613      	mov	r3, r2
 8002526:	011b      	lsls	r3, r3, #4
 8002528:	1a9b      	subs	r3, r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	18ca      	adds	r2, r1, r3
 800252e:	7c3b      	ldrb	r3, [r7, #16]
 8002530:	4619      	mov	r1, r3
 8002532:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8002536:	fb01 f303 	mul.w	r3, r1, r3
 800253a:	4413      	add	r3, r2
 800253c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t timestampMilliseconds = timestampSeconds * 1000;
 800253e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002540:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002544:	fb02 f303 	mul.w	r3, r2, r3
 8002548:	62bb      	str	r3, [r7, #40]	@ 0x28
    float subsecondsFraction = (float)(rtcTime.SecondFraction - rtcTime.SubSeconds) / (rtcTime.SecondFraction + 1);
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	ee07 3a90 	vmov	s15, r3
 8002554:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	3301      	adds	r3, #1
 800255c:	ee07 3a90 	vmov	s15, r3
 8002560:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002564:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002568:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    timestampMilliseconds += subsecondsFraction * 1000;
 800256c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800256e:	ee07 3a90 	vmov	s15, r3
 8002572:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002576:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800257a:	eddf 6a08 	vldr	s13, [pc, #32]	@ 800259c <getTimestampMilliseconds+0xa4>
 800257e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002582:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002586:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800258a:	ee17 3a90 	vmov	r3, s15
 800258e:	62bb      	str	r3, [r7, #40]	@ 0x28

    return timestampMilliseconds;
 8002590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8002592:	4618      	mov	r0, r3
 8002594:	3730      	adds	r7, #48	@ 0x30
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	447a0000 	.word	0x447a0000

080025a0 <spi_sendOp_readByte>:
#ifndef SRC_SPI_DRIVER_C_
#define SRC_SPI_DRIVER_C_

#include "spi_driver.h"

HAL_StatusTypeDef spi_sendOp_readByte(uint8_t* opcode, SPI_HandleTypeDef *hspi, uint8_t* data_ptr, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
 80025ac:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status;
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);	// Set the chip select pin to low to initiate SPI comms
 80025ae:	8c3b      	ldrh	r3, [r7, #32]
 80025b0:	2200      	movs	r2, #0
 80025b2:	4619      	mov	r1, r3
 80025b4:	6838      	ldr	r0, [r7, #0]
 80025b6:	f002 fb01 	bl	8004bbc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, opcode, 1, TIMEOUT_SML);			// Write the write enable value to the Flash to initial reading
 80025ba:	2302      	movs	r3, #2
 80025bc:	2201      	movs	r2, #1
 80025be:	68f9      	ldr	r1, [r7, #12]
 80025c0:	68b8      	ldr	r0, [r7, #8]
 80025c2:	f004 fd92 	bl	80070ea <HAL_SPI_Transmit>
	status = HAL_SPI_Receive(hspi, data_ptr, 1, TIMEOUT_SML);
 80025c6:	2302      	movs	r3, #2
 80025c8:	2201      	movs	r2, #1
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	68b8      	ldr	r0, [r7, #8]
 80025ce:	f004 fecf 	bl	8007370 <HAL_SPI_Receive>
 80025d2:	4603      	mov	r3, r0
 80025d4:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);
 80025d6:	8c3b      	ldrh	r3, [r7, #32]
 80025d8:	2201      	movs	r2, #1
 80025da:	4619      	mov	r1, r3
 80025dc:	6838      	ldr	r0, [r7, #0]
 80025de:	f002 faed 	bl	8004bbc <HAL_GPIO_WritePin>
	return status;
 80025e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <perform_operation>:

HAL_StatusTypeDef perform_operation(uint8_t* opcode, SPI_HandleTypeDef *hspi, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
 80025f8:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef status;
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);				// Set the chip select pin to low to initiate SPI comms
 80025fa:	887b      	ldrh	r3, [r7, #2]
 80025fc:	2200      	movs	r2, #0
 80025fe:	4619      	mov	r1, r3
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f002 fadb 	bl	8004bbc <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(hspi, opcode, 1, TIMEOUT_SML);				// Write the opcode value
 8002606:	2302      	movs	r3, #2
 8002608:	2201      	movs	r2, #1
 800260a:	68f9      	ldr	r1, [r7, #12]
 800260c:	68b8      	ldr	r0, [r7, #8]
 800260e:	f004 fd6c 	bl	80070ea <HAL_SPI_Transmit>
 8002612:	4603      	mov	r3, r0
 8002614:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);
 8002616:	887b      	ldrh	r3, [r7, #2]
 8002618:	2201      	movs	r2, #1
 800261a:	4619      	mov	r1, r3
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f002 facd 	bl	8004bbc <HAL_GPIO_WritePin>

	return status;
 8002622:	7dfb      	ldrb	r3, [r7, #23]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3718      	adds	r7, #24
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <spi_read_data>:

HAL_StatusTypeDef spi_read_data(uint8_t* opcode, uint16_t data_size, uint8_t data_read[data_size], SPI_HandleTypeDef *hspi, uint32_t addr, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	607a      	str	r2, [r7, #4]
 8002636:	603b      	str	r3, [r7, #0]
 8002638:	460b      	mov	r3, r1
 800263a:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef status;

	// Split the 24 bit address into three 8 bit ints
	uint8_t addrL = addr & 0xFF;  // Get the low byte
 800263c:	6a3b      	ldr	r3, [r7, #32]
 800263e:	b2db      	uxtb	r3, r3
 8002640:	75bb      	strb	r3, [r7, #22]
	uint8_t addrM = (addr >> 8) & 0xFF;  // Get the middle byte
 8002642:	6a3b      	ldr	r3, [r7, #32]
 8002644:	0a1b      	lsrs	r3, r3, #8
 8002646:	b2db      	uxtb	r3, r3
 8002648:	757b      	strb	r3, [r7, #21]
	uint8_t addrH = (addr >> 16) & 0xFF;  // Get the high byte
 800264a:	6a3b      	ldr	r3, [r7, #32]
 800264c:	0c1b      	lsrs	r3, r3, #16
 800264e:	b2db      	uxtb	r3, r3
 8002650:	753b      	strb	r3, [r7, #20]

	// Read the data denoted by the given address
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);
 8002652:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002654:	2200      	movs	r2, #0
 8002656:	4619      	mov	r1, r3
 8002658:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800265a:	f002 faaf 	bl	8004bbc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, opcode, 1, TIMEOUT_SML);	// Write the read enable value
 800265e:	2302      	movs	r3, #2
 8002660:	2201      	movs	r2, #1
 8002662:	68f9      	ldr	r1, [r7, #12]
 8002664:	6838      	ldr	r0, [r7, #0]
 8002666:	f004 fd40 	bl	80070ea <HAL_SPI_Transmit>

	// Transmit the 24 bit address of the page to initialise read from
	HAL_SPI_Transmit(hspi, &addrH, 1, TIMEOUT_SML);
 800266a:	f107 0114 	add.w	r1, r7, #20
 800266e:	2302      	movs	r3, #2
 8002670:	2201      	movs	r2, #1
 8002672:	6838      	ldr	r0, [r7, #0]
 8002674:	f004 fd39 	bl	80070ea <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &addrM, 1, TIMEOUT_SML);
 8002678:	f107 0115 	add.w	r1, r7, #21
 800267c:	2302      	movs	r3, #2
 800267e:	2201      	movs	r2, #1
 8002680:	6838      	ldr	r0, [r7, #0]
 8002682:	f004 fd32 	bl	80070ea <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &addrL, 1, TIMEOUT_SML);
 8002686:	f107 0116 	add.w	r1, r7, #22
 800268a:	2302      	movs	r3, #2
 800268c:	2201      	movs	r2, #1
 800268e:	6838      	ldr	r0, [r7, #0]
 8002690:	f004 fd2b 	bl	80070ea <HAL_SPI_Transmit>

	status = HAL_SPI_Receive(hspi, data_read, data_size, TIMEOUT_LRG);
 8002694:	897a      	ldrh	r2, [r7, #10]
 8002696:	2364      	movs	r3, #100	@ 0x64
 8002698:	6879      	ldr	r1, [r7, #4]
 800269a:	6838      	ldr	r0, [r7, #0]
 800269c:	f004 fe68 	bl	8007370 <HAL_SPI_Receive>
 80026a0:	4603      	mov	r3, r0
 80026a2:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);
 80026a4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80026a6:	2201      	movs	r2, #1
 80026a8:	4619      	mov	r1, r3
 80026aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80026ac:	f002 fa86 	bl	8004bbc <HAL_GPIO_WritePin>

	return status;
 80026b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <spi_write_data_dma>:
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);	// Set the chip select pin to high to remove the Flash from the SPI bus

	return status;
}

HAL_StatusTypeDef spi_write_data_dma(uint8_t* opcode, uint16_t data_size, uint8_t data_write[data_size], SPI_HandleTypeDef *hspi, uint32_t addr, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b086      	sub	sp, #24
 80026be:	af00      	add	r7, sp, #0
 80026c0:	60f8      	str	r0, [r7, #12]
 80026c2:	607a      	str	r2, [r7, #4]
 80026c4:	603b      	str	r3, [r7, #0]
 80026c6:	460b      	mov	r3, r1
 80026c8:	817b      	strh	r3, [r7, #10]
    HAL_StatusTypeDef status;

    // Split the 24 bit address into three 8 bit ints
    uint8_t addrL = addr & 0xFF;  			// Get the low byte
 80026ca:	6a3b      	ldr	r3, [r7, #32]
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	75bb      	strb	r3, [r7, #22]
    uint8_t addrM = (addr >> 8) & 0xFF;  	// Get the middle byte
 80026d0:	6a3b      	ldr	r3, [r7, #32]
 80026d2:	0a1b      	lsrs	r3, r3, #8
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	757b      	strb	r3, [r7, #21]
    uint8_t addrH = (addr >> 16) & 0xFF;  	// Get the high byte
 80026d8:	6a3b      	ldr	r3, [r7, #32]
 80026da:	0c1b      	lsrs	r3, r3, #16
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	753b      	strb	r3, [r7, #20]

    // Send the PageWrite command
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);	// Set the chip select pin to low to initiate SPI comms
 80026e0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80026e2:	2200      	movs	r2, #0
 80026e4:	4619      	mov	r1, r3
 80026e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80026e8:	f002 fa68 	bl	8004bbc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(hspi, opcode, 1, TIMEOUT_SML);					// Write the write enable value to the Flash to initial writing
 80026ec:	2302      	movs	r3, #2
 80026ee:	2201      	movs	r2, #1
 80026f0:	68f9      	ldr	r1, [r7, #12]
 80026f2:	6838      	ldr	r0, [r7, #0]
 80026f4:	f004 fcf9 	bl	80070ea <HAL_SPI_Transmit>

    // Transmit the 24 bit address of the page to write to
    HAL_SPI_Transmit(hspi, &addrH, 1, TIMEOUT_SML);
 80026f8:	f107 0114 	add.w	r1, r7, #20
 80026fc:	2302      	movs	r3, #2
 80026fe:	2201      	movs	r2, #1
 8002700:	6838      	ldr	r0, [r7, #0]
 8002702:	f004 fcf2 	bl	80070ea <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hspi, &addrM, 1, TIMEOUT_SML);
 8002706:	f107 0115 	add.w	r1, r7, #21
 800270a:	2302      	movs	r3, #2
 800270c:	2201      	movs	r2, #1
 800270e:	6838      	ldr	r0, [r7, #0]
 8002710:	f004 fceb 	bl	80070ea <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hspi, &addrL, 1, TIMEOUT_SML);
 8002714:	f107 0116 	add.w	r1, r7, #22
 8002718:	2302      	movs	r3, #2
 800271a:	2201      	movs	r2, #1
 800271c:	6838      	ldr	r0, [r7, #0]
 800271e:	f004 fce4 	bl	80070ea <HAL_SPI_Transmit>

    // Start the DMA transfer
    status = HAL_SPI_Transmit_DMA(hspi, data_write, data_size);
 8002722:	897b      	ldrh	r3, [r7, #10]
 8002724:	461a      	mov	r2, r3
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	6838      	ldr	r0, [r7, #0]
 800272a:	f005 f8e9 	bl	8007900 <HAL_SPI_Transmit_DMA>
 800272e:	4603      	mov	r3, r0
 8002730:	75fb      	strb	r3, [r7, #23]

    return status;
 8002732:	7dfb      	ldrb	r3, [r7, #23]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	607b      	str	r3, [r7, #4]
 8002746:	4b10      	ldr	r3, [pc, #64]	@ (8002788 <HAL_MspInit+0x4c>)
 8002748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800274a:	4a0f      	ldr	r2, [pc, #60]	@ (8002788 <HAL_MspInit+0x4c>)
 800274c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002750:	6453      	str	r3, [r2, #68]	@ 0x44
 8002752:	4b0d      	ldr	r3, [pc, #52]	@ (8002788 <HAL_MspInit+0x4c>)
 8002754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002756:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800275a:	607b      	str	r3, [r7, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	603b      	str	r3, [r7, #0]
 8002762:	4b09      	ldr	r3, [pc, #36]	@ (8002788 <HAL_MspInit+0x4c>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002766:	4a08      	ldr	r2, [pc, #32]	@ (8002788 <HAL_MspInit+0x4c>)
 8002768:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800276c:	6413      	str	r3, [r2, #64]	@ 0x40
 800276e:	4b06      	ldr	r3, [pc, #24]	@ (8002788 <HAL_MspInit+0x4c>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002772:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002776:	603b      	str	r3, [r7, #0]
 8002778:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	40023800 	.word	0x40023800

0800278c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b08a      	sub	sp, #40	@ 0x28
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002794:	f107 0314 	add.w	r3, r7, #20
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	605a      	str	r2, [r3, #4]
 800279e:	609a      	str	r2, [r3, #8]
 80027a0:	60da      	str	r2, [r3, #12]
 80027a2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a24      	ldr	r2, [pc, #144]	@ (800283c <HAL_CAN_MspInit+0xb0>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d141      	bne.n	8002832 <HAL_CAN_MspInit+0xa6>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	613b      	str	r3, [r7, #16]
 80027b2:	4b23      	ldr	r3, [pc, #140]	@ (8002840 <HAL_CAN_MspInit+0xb4>)
 80027b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b6:	4a22      	ldr	r2, [pc, #136]	@ (8002840 <HAL_CAN_MspInit+0xb4>)
 80027b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80027bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80027be:	4b20      	ldr	r3, [pc, #128]	@ (8002840 <HAL_CAN_MspInit+0xb4>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80027c6:	613b      	str	r3, [r7, #16]
 80027c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002840 <HAL_CAN_MspInit+0xb4>)
 80027d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d2:	4a1b      	ldr	r2, [pc, #108]	@ (8002840 <HAL_CAN_MspInit+0xb4>)
 80027d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80027da:	4b19      	ldr	r3, [pc, #100]	@ (8002840 <HAL_CAN_MspInit+0xb4>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	4b15      	ldr	r3, [pc, #84]	@ (8002840 <HAL_CAN_MspInit+0xb4>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ee:	4a14      	ldr	r2, [pc, #80]	@ (8002840 <HAL_CAN_MspInit+0xb4>)
 80027f0:	f043 0302 	orr.w	r3, r3, #2
 80027f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027f6:	4b12      	ldr	r3, [pc, #72]	@ (8002840 <HAL_CAN_MspInit+0xb4>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	60bb      	str	r3, [r7, #8]
 8002800:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB5     ------> CAN2_RX
    PB6     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002802:	2360      	movs	r3, #96	@ 0x60
 8002804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002806:	2302      	movs	r3, #2
 8002808:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280a:	2300      	movs	r3, #0
 800280c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800280e:	2303      	movs	r3, #3
 8002810:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002812:	2309      	movs	r3, #9
 8002814:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002816:	f107 0314 	add.w	r3, r7, #20
 800281a:	4619      	mov	r1, r3
 800281c:	4809      	ldr	r0, [pc, #36]	@ (8002844 <HAL_CAN_MspInit+0xb8>)
 800281e:	f002 f809 	bl	8004834 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8002822:	2200      	movs	r2, #0
 8002824:	2100      	movs	r1, #0
 8002826:	2040      	movs	r0, #64	@ 0x40
 8002828:	f001 fbcb 	bl	8003fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800282c:	2040      	movs	r0, #64	@ 0x40
 800282e:	f001 fbe4 	bl	8003ffa <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN2_MspInit 1 */

  }

}
 8002832:	bf00      	nop
 8002834:	3728      	adds	r7, #40	@ 0x28
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40006800 	.word	0x40006800
 8002840:	40023800 	.word	0x40023800
 8002844:	40020400 	.word	0x40020400

08002848 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b08c      	sub	sp, #48	@ 0x30
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002850:	f107 031c 	add.w	r3, r7, #28
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	605a      	str	r2, [r3, #4]
 800285a:	609a      	str	r2, [r3, #8]
 800285c:	60da      	str	r2, [r3, #12]
 800285e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a42      	ldr	r2, [pc, #264]	@ (8002970 <HAL_I2C_MspInit+0x128>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d12d      	bne.n	80028c6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	61bb      	str	r3, [r7, #24]
 800286e:	4b41      	ldr	r3, [pc, #260]	@ (8002974 <HAL_I2C_MspInit+0x12c>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002872:	4a40      	ldr	r2, [pc, #256]	@ (8002974 <HAL_I2C_MspInit+0x12c>)
 8002874:	f043 0302 	orr.w	r3, r3, #2
 8002878:	6313      	str	r3, [r2, #48]	@ 0x30
 800287a:	4b3e      	ldr	r3, [pc, #248]	@ (8002974 <HAL_I2C_MspInit+0x12c>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	61bb      	str	r3, [r7, #24]
 8002884:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002886:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800288a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800288c:	2312      	movs	r3, #18
 800288e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002890:	2300      	movs	r3, #0
 8002892:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002894:	2303      	movs	r3, #3
 8002896:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002898:	2304      	movs	r3, #4
 800289a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800289c:	f107 031c 	add.w	r3, r7, #28
 80028a0:	4619      	mov	r1, r3
 80028a2:	4835      	ldr	r0, [pc, #212]	@ (8002978 <HAL_I2C_MspInit+0x130>)
 80028a4:	f001 ffc6 	bl	8004834 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028a8:	2300      	movs	r3, #0
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	4b31      	ldr	r3, [pc, #196]	@ (8002974 <HAL_I2C_MspInit+0x12c>)
 80028ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b0:	4a30      	ldr	r2, [pc, #192]	@ (8002974 <HAL_I2C_MspInit+0x12c>)
 80028b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80028b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80028b8:	4b2e      	ldr	r3, [pc, #184]	@ (8002974 <HAL_I2C_MspInit+0x12c>)
 80028ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028c0:	617b      	str	r3, [r7, #20]
 80028c2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80028c4:	e050      	b.n	8002968 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a2c      	ldr	r2, [pc, #176]	@ (800297c <HAL_I2C_MspInit+0x134>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d14b      	bne.n	8002968 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028d0:	2300      	movs	r3, #0
 80028d2:	613b      	str	r3, [r7, #16]
 80028d4:	4b27      	ldr	r3, [pc, #156]	@ (8002974 <HAL_I2C_MspInit+0x12c>)
 80028d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d8:	4a26      	ldr	r2, [pc, #152]	@ (8002974 <HAL_I2C_MspInit+0x12c>)
 80028da:	f043 0304 	orr.w	r3, r3, #4
 80028de:	6313      	str	r3, [r2, #48]	@ 0x30
 80028e0:	4b24      	ldr	r3, [pc, #144]	@ (8002974 <HAL_I2C_MspInit+0x12c>)
 80028e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	613b      	str	r3, [r7, #16]
 80028ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ec:	2300      	movs	r3, #0
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	4b20      	ldr	r3, [pc, #128]	@ (8002974 <HAL_I2C_MspInit+0x12c>)
 80028f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f4:	4a1f      	ldr	r2, [pc, #124]	@ (8002974 <HAL_I2C_MspInit+0x12c>)
 80028f6:	f043 0301 	orr.w	r3, r3, #1
 80028fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80028fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002974 <HAL_I2C_MspInit+0x12c>)
 80028fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002908:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800290c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800290e:	2312      	movs	r3, #18
 8002910:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002912:	2300      	movs	r3, #0
 8002914:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002916:	2303      	movs	r3, #3
 8002918:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800291a:	2304      	movs	r3, #4
 800291c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800291e:	f107 031c 	add.w	r3, r7, #28
 8002922:	4619      	mov	r1, r3
 8002924:	4816      	ldr	r0, [pc, #88]	@ (8002980 <HAL_I2C_MspInit+0x138>)
 8002926:	f001 ff85 	bl	8004834 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800292a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800292e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002930:	2312      	movs	r3, #18
 8002932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002934:	2300      	movs	r3, #0
 8002936:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002938:	2303      	movs	r3, #3
 800293a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800293c:	2304      	movs	r3, #4
 800293e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002940:	f107 031c 	add.w	r3, r7, #28
 8002944:	4619      	mov	r1, r3
 8002946:	480f      	ldr	r0, [pc, #60]	@ (8002984 <HAL_I2C_MspInit+0x13c>)
 8002948:	f001 ff74 	bl	8004834 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800294c:	2300      	movs	r3, #0
 800294e:	60bb      	str	r3, [r7, #8]
 8002950:	4b08      	ldr	r3, [pc, #32]	@ (8002974 <HAL_I2C_MspInit+0x12c>)
 8002952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002954:	4a07      	ldr	r2, [pc, #28]	@ (8002974 <HAL_I2C_MspInit+0x12c>)
 8002956:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800295a:	6413      	str	r3, [r2, #64]	@ 0x40
 800295c:	4b05      	ldr	r3, [pc, #20]	@ (8002974 <HAL_I2C_MspInit+0x12c>)
 800295e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002960:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002964:	60bb      	str	r3, [r7, #8]
 8002966:	68bb      	ldr	r3, [r7, #8]
}
 8002968:	bf00      	nop
 800296a:	3730      	adds	r7, #48	@ 0x30
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40005400 	.word	0x40005400
 8002974:	40023800 	.word	0x40023800
 8002978:	40020400 	.word	0x40020400
 800297c:	40005c00 	.word	0x40005c00
 8002980:	40020800 	.word	0x40020800
 8002984:	40020000 	.word	0x40020000

08002988 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b08e      	sub	sp, #56	@ 0x38
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002990:	f107 0308 	add.w	r3, r7, #8
 8002994:	2230      	movs	r2, #48	@ 0x30
 8002996:	2100      	movs	r1, #0
 8002998:	4618      	mov	r0, r3
 800299a:	f006 fdaf 	bl	80094fc <memset>
  if(hrtc->Instance==RTC)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a0c      	ldr	r2, [pc, #48]	@ (80029d4 <HAL_RTC_MspInit+0x4c>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d111      	bne.n	80029cc <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80029a8:	2320      	movs	r3, #32
 80029aa:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80029ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80029b0:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029b2:	f107 0308 	add.w	r3, r7, #8
 80029b6:	4618      	mov	r0, r3
 80029b8:	f003 fe42 	bl	8006640 <HAL_RCCEx_PeriphCLKConfig>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80029c2:	f7ff fa2d 	bl	8001e20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80029c6:	4b04      	ldr	r3, [pc, #16]	@ (80029d8 <HAL_RTC_MspInit+0x50>)
 80029c8:	2201      	movs	r2, #1
 80029ca:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80029cc:	bf00      	nop
 80029ce:	3738      	adds	r7, #56	@ 0x38
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40002800 	.word	0x40002800
 80029d8:	42470e3c 	.word	0x42470e3c

080029dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b08c      	sub	sp, #48	@ 0x30
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e4:	f107 031c 	add.w	r3, r7, #28
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	609a      	str	r2, [r3, #8]
 80029f0:	60da      	str	r2, [r3, #12]
 80029f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a6f      	ldr	r2, [pc, #444]	@ (8002bb8 <HAL_SPI_MspInit+0x1dc>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d15b      	bne.n	8002ab6 <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	61bb      	str	r3, [r7, #24]
 8002a02:	4b6e      	ldr	r3, [pc, #440]	@ (8002bbc <HAL_SPI_MspInit+0x1e0>)
 8002a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a06:	4a6d      	ldr	r2, [pc, #436]	@ (8002bbc <HAL_SPI_MspInit+0x1e0>)
 8002a08:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a0e:	4b6b      	ldr	r3, [pc, #428]	@ (8002bbc <HAL_SPI_MspInit+0x1e0>)
 8002a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a16:	61bb      	str	r3, [r7, #24]
 8002a18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	617b      	str	r3, [r7, #20]
 8002a1e:	4b67      	ldr	r3, [pc, #412]	@ (8002bbc <HAL_SPI_MspInit+0x1e0>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a22:	4a66      	ldr	r2, [pc, #408]	@ (8002bbc <HAL_SPI_MspInit+0x1e0>)
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a2a:	4b64      	ldr	r3, [pc, #400]	@ (8002bbc <HAL_SPI_MspInit+0x1e0>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002a36:	23e0      	movs	r3, #224	@ 0xe0
 8002a38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a42:	2303      	movs	r3, #3
 8002a44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a46:	2305      	movs	r3, #5
 8002a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a4a:	f107 031c 	add.w	r3, r7, #28
 8002a4e:	4619      	mov	r1, r3
 8002a50:	485b      	ldr	r0, [pc, #364]	@ (8002bc0 <HAL_SPI_MspInit+0x1e4>)
 8002a52:	f001 feef 	bl	8004834 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8002a56:	4b5b      	ldr	r3, [pc, #364]	@ (8002bc4 <HAL_SPI_MspInit+0x1e8>)
 8002a58:	4a5b      	ldr	r2, [pc, #364]	@ (8002bc8 <HAL_SPI_MspInit+0x1ec>)
 8002a5a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002a5c:	4b59      	ldr	r3, [pc, #356]	@ (8002bc4 <HAL_SPI_MspInit+0x1e8>)
 8002a5e:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002a62:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a64:	4b57      	ldr	r3, [pc, #348]	@ (8002bc4 <HAL_SPI_MspInit+0x1e8>)
 8002a66:	2240      	movs	r2, #64	@ 0x40
 8002a68:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a6a:	4b56      	ldr	r3, [pc, #344]	@ (8002bc4 <HAL_SPI_MspInit+0x1e8>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a70:	4b54      	ldr	r3, [pc, #336]	@ (8002bc4 <HAL_SPI_MspInit+0x1e8>)
 8002a72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a76:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a78:	4b52      	ldr	r3, [pc, #328]	@ (8002bc4 <HAL_SPI_MspInit+0x1e8>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a7e:	4b51      	ldr	r3, [pc, #324]	@ (8002bc4 <HAL_SPI_MspInit+0x1e8>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002a84:	4b4f      	ldr	r3, [pc, #316]	@ (8002bc4 <HAL_SPI_MspInit+0x1e8>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002a8a:	4b4e      	ldr	r3, [pc, #312]	@ (8002bc4 <HAL_SPI_MspInit+0x1e8>)
 8002a8c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002a90:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a92:	4b4c      	ldr	r3, [pc, #304]	@ (8002bc4 <HAL_SPI_MspInit+0x1e8>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002a98:	484a      	ldr	r0, [pc, #296]	@ (8002bc4 <HAL_SPI_MspInit+0x1e8>)
 8002a9a:	f001 fac9 	bl	8004030 <HAL_DMA_Init>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8002aa4:	f7ff f9bc 	bl	8001e20 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a46      	ldr	r2, [pc, #280]	@ (8002bc4 <HAL_SPI_MspInit+0x1e8>)
 8002aac:	649a      	str	r2, [r3, #72]	@ 0x48
 8002aae:	4a45      	ldr	r2, [pc, #276]	@ (8002bc4 <HAL_SPI_MspInit+0x1e8>)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002ab4:	e07c      	b.n	8002bb0 <HAL_SPI_MspInit+0x1d4>
  else if(hspi->Instance==SPI2)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a44      	ldr	r2, [pc, #272]	@ (8002bcc <HAL_SPI_MspInit+0x1f0>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d177      	bne.n	8002bb0 <HAL_SPI_MspInit+0x1d4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	613b      	str	r3, [r7, #16]
 8002ac4:	4b3d      	ldr	r3, [pc, #244]	@ (8002bbc <HAL_SPI_MspInit+0x1e0>)
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac8:	4a3c      	ldr	r2, [pc, #240]	@ (8002bbc <HAL_SPI_MspInit+0x1e0>)
 8002aca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ace:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ad0:	4b3a      	ldr	r3, [pc, #232]	@ (8002bbc <HAL_SPI_MspInit+0x1e0>)
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ad8:	613b      	str	r3, [r7, #16]
 8002ada:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002adc:	2300      	movs	r3, #0
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	4b36      	ldr	r3, [pc, #216]	@ (8002bbc <HAL_SPI_MspInit+0x1e0>)
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae4:	4a35      	ldr	r2, [pc, #212]	@ (8002bbc <HAL_SPI_MspInit+0x1e0>)
 8002ae6:	f043 0304 	orr.w	r3, r3, #4
 8002aea:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aec:	4b33      	ldr	r3, [pc, #204]	@ (8002bbc <HAL_SPI_MspInit+0x1e0>)
 8002aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	60fb      	str	r3, [r7, #12]
 8002af6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002af8:	2300      	movs	r3, #0
 8002afa:	60bb      	str	r3, [r7, #8]
 8002afc:	4b2f      	ldr	r3, [pc, #188]	@ (8002bbc <HAL_SPI_MspInit+0x1e0>)
 8002afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b00:	4a2e      	ldr	r2, [pc, #184]	@ (8002bbc <HAL_SPI_MspInit+0x1e0>)
 8002b02:	f043 0308 	orr.w	r3, r3, #8
 8002b06:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b08:	4b2c      	ldr	r3, [pc, #176]	@ (8002bbc <HAL_SPI_MspInit+0x1e0>)
 8002b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0c:	f003 0308 	and.w	r3, r3, #8
 8002b10:	60bb      	str	r3, [r7, #8]
 8002b12:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002b14:	230c      	movs	r3, #12
 8002b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b18:	2302      	movs	r3, #2
 8002b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b20:	2303      	movs	r3, #3
 8002b22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b24:	2305      	movs	r3, #5
 8002b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b28:	f107 031c 	add.w	r3, r7, #28
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4828      	ldr	r0, [pc, #160]	@ (8002bd0 <HAL_SPI_MspInit+0x1f4>)
 8002b30:	f001 fe80 	bl	8004834 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b34:	2308      	movs	r3, #8
 8002b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b38:	2302      	movs	r3, #2
 8002b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b40:	2303      	movs	r3, #3
 8002b42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b44:	2305      	movs	r3, #5
 8002b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b48:	f107 031c 	add.w	r3, r7, #28
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4821      	ldr	r0, [pc, #132]	@ (8002bd4 <HAL_SPI_MspInit+0x1f8>)
 8002b50:	f001 fe70 	bl	8004834 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8002b54:	4b20      	ldr	r3, [pc, #128]	@ (8002bd8 <HAL_SPI_MspInit+0x1fc>)
 8002b56:	4a21      	ldr	r2, [pc, #132]	@ (8002bdc <HAL_SPI_MspInit+0x200>)
 8002b58:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8002b5a:	4b1f      	ldr	r3, [pc, #124]	@ (8002bd8 <HAL_SPI_MspInit+0x1fc>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b60:	4b1d      	ldr	r3, [pc, #116]	@ (8002bd8 <HAL_SPI_MspInit+0x1fc>)
 8002b62:	2240      	movs	r2, #64	@ 0x40
 8002b64:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b66:	4b1c      	ldr	r3, [pc, #112]	@ (8002bd8 <HAL_SPI_MspInit+0x1fc>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b6c:	4b1a      	ldr	r3, [pc, #104]	@ (8002bd8 <HAL_SPI_MspInit+0x1fc>)
 8002b6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b72:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b74:	4b18      	ldr	r3, [pc, #96]	@ (8002bd8 <HAL_SPI_MspInit+0x1fc>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b7a:	4b17      	ldr	r3, [pc, #92]	@ (8002bd8 <HAL_SPI_MspInit+0x1fc>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002b80:	4b15      	ldr	r3, [pc, #84]	@ (8002bd8 <HAL_SPI_MspInit+0x1fc>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002b86:	4b14      	ldr	r3, [pc, #80]	@ (8002bd8 <HAL_SPI_MspInit+0x1fc>)
 8002b88:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002b8c:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b8e:	4b12      	ldr	r3, [pc, #72]	@ (8002bd8 <HAL_SPI_MspInit+0x1fc>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002b94:	4810      	ldr	r0, [pc, #64]	@ (8002bd8 <HAL_SPI_MspInit+0x1fc>)
 8002b96:	f001 fa4b 	bl	8004030 <HAL_DMA_Init>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <HAL_SPI_MspInit+0x1c8>
      Error_Handler();
 8002ba0:	f7ff f93e 	bl	8001e20 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a0c      	ldr	r2, [pc, #48]	@ (8002bd8 <HAL_SPI_MspInit+0x1fc>)
 8002ba8:	649a      	str	r2, [r3, #72]	@ 0x48
 8002baa:	4a0b      	ldr	r2, [pc, #44]	@ (8002bd8 <HAL_SPI_MspInit+0x1fc>)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002bb0:	bf00      	nop
 8002bb2:	3730      	adds	r7, #48	@ 0x30
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40013000 	.word	0x40013000
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	40020000 	.word	0x40020000
 8002bc4:	200001e8 	.word	0x200001e8
 8002bc8:	40026458 	.word	0x40026458
 8002bcc:	40003800 	.word	0x40003800
 8002bd0:	40020800 	.word	0x40020800
 8002bd4:	40020c00 	.word	0x40020c00
 8002bd8:	20000248 	.word	0x20000248
 8002bdc:	40026070 	.word	0x40026070

08002be0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a1c      	ldr	r2, [pc, #112]	@ (8002c60 <HAL_TIM_Base_MspInit+0x80>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d116      	bne.n	8002c20 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	4b1b      	ldr	r3, [pc, #108]	@ (8002c64 <HAL_TIM_Base_MspInit+0x84>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfa:	4a1a      	ldr	r2, [pc, #104]	@ (8002c64 <HAL_TIM_Base_MspInit+0x84>)
 8002bfc:	f043 0310 	orr.w	r3, r3, #16
 8002c00:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c02:	4b18      	ldr	r3, [pc, #96]	@ (8002c64 <HAL_TIM_Base_MspInit+0x84>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c06:	f003 0310 	and.w	r3, r3, #16
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002c0e:	2200      	movs	r2, #0
 8002c10:	2100      	movs	r1, #0
 8002c12:	2036      	movs	r0, #54	@ 0x36
 8002c14:	f001 f9d5 	bl	8003fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002c18:	2036      	movs	r0, #54	@ 0x36
 8002c1a:	f001 f9ee 	bl	8003ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002c1e:	e01a      	b.n	8002c56 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a10      	ldr	r2, [pc, #64]	@ (8002c68 <HAL_TIM_Base_MspInit+0x88>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d115      	bne.n	8002c56 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c64 <HAL_TIM_Base_MspInit+0x84>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c32:	4a0c      	ldr	r2, [pc, #48]	@ (8002c64 <HAL_TIM_Base_MspInit+0x84>)
 8002c34:	f043 0320 	orr.w	r3, r3, #32
 8002c38:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c64 <HAL_TIM_Base_MspInit+0x84>)
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3e:	f003 0320 	and.w	r3, r3, #32
 8002c42:	60bb      	str	r3, [r7, #8]
 8002c44:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002c46:	2200      	movs	r2, #0
 8002c48:	2100      	movs	r1, #0
 8002c4a:	2037      	movs	r0, #55	@ 0x37
 8002c4c:	f001 f9b9 	bl	8003fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002c50:	2037      	movs	r0, #55	@ 0x37
 8002c52:	f001 f9d2 	bl	8003ffa <HAL_NVIC_EnableIRQ>
}
 8002c56:	bf00      	nop
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40001000 	.word	0x40001000
 8002c64:	40023800 	.word	0x40023800
 8002c68:	40001400 	.word	0x40001400

08002c6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b08a      	sub	sp, #40	@ 0x28
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c74:	f107 0314 	add.w	r3, r7, #20
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	605a      	str	r2, [r3, #4]
 8002c7e:	609a      	str	r2, [r3, #8]
 8002c80:	60da      	str	r2, [r3, #12]
 8002c82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a1d      	ldr	r2, [pc, #116]	@ (8002d00 <HAL_UART_MspInit+0x94>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d133      	bne.n	8002cf6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c8e:	2300      	movs	r3, #0
 8002c90:	613b      	str	r3, [r7, #16]
 8002c92:	4b1c      	ldr	r3, [pc, #112]	@ (8002d04 <HAL_UART_MspInit+0x98>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c96:	4a1b      	ldr	r2, [pc, #108]	@ (8002d04 <HAL_UART_MspInit+0x98>)
 8002c98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c9e:	4b19      	ldr	r3, [pc, #100]	@ (8002d04 <HAL_UART_MspInit+0x98>)
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ca6:	613b      	str	r3, [r7, #16]
 8002ca8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002caa:	2300      	movs	r3, #0
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	4b15      	ldr	r3, [pc, #84]	@ (8002d04 <HAL_UART_MspInit+0x98>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb2:	4a14      	ldr	r2, [pc, #80]	@ (8002d04 <HAL_UART_MspInit+0x98>)
 8002cb4:	f043 0308 	orr.w	r3, r3, #8
 8002cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cba:	4b12      	ldr	r3, [pc, #72]	@ (8002d04 <HAL_UART_MspInit+0x98>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cbe:	f003 0308 	and.w	r3, r3, #8
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002cc6:	2360      	movs	r3, #96	@ 0x60
 8002cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cca:	2302      	movs	r3, #2
 8002ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002cd6:	2307      	movs	r3, #7
 8002cd8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cda:	f107 0314 	add.w	r3, r7, #20
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4809      	ldr	r0, [pc, #36]	@ (8002d08 <HAL_UART_MspInit+0x9c>)
 8002ce2:	f001 fda7 	bl	8004834 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	2100      	movs	r1, #0
 8002cea:	2026      	movs	r0, #38	@ 0x26
 8002cec:	f001 f969 	bl	8003fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002cf0:	2026      	movs	r0, #38	@ 0x26
 8002cf2:	f001 f982 	bl	8003ffa <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002cf6:	bf00      	nop
 8002cf8:	3728      	adds	r7, #40	@ 0x28
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40004400 	.word	0x40004400
 8002d04:	40023800 	.word	0x40023800
 8002d08:	40020c00 	.word	0x40020c00

08002d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d10:	bf00      	nop
 8002d12:	e7fd      	b.n	8002d10 <NMI_Handler+0x4>

08002d14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d18:	bf00      	nop
 8002d1a:	e7fd      	b.n	8002d18 <HardFault_Handler+0x4>

08002d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d20:	bf00      	nop
 8002d22:	e7fd      	b.n	8002d20 <MemManage_Handler+0x4>

08002d24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d28:	bf00      	nop
 8002d2a:	e7fd      	b.n	8002d28 <BusFault_Handler+0x4>

08002d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d30:	bf00      	nop
 8002d32:	e7fd      	b.n	8002d30 <UsageFault_Handler+0x4>

08002d34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d38:	bf00      	nop
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d42:	b480      	push	{r7}
 8002d44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d46:	bf00      	nop
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d54:	bf00      	nop
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d62:	f000 f9a7 	bl	80030b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d66:	bf00      	nop
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Flight_JMP_Pin);
 8002d6e:	2002      	movs	r0, #2
 8002d70:	f001 ff58 	bl	8004c24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002d74:	bf00      	nop
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002d7c:	4802      	ldr	r0, [pc, #8]	@ (8002d88 <DMA1_Stream4_IRQHandler+0x10>)
 8002d7e:	f001 faef 	bl	8004360 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002d82:	bf00      	nop
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	20000248 	.word	0x20000248

08002d8c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002d90:	4802      	ldr	r0, [pc, #8]	@ (8002d9c <USART2_IRQHandler+0x10>)
 8002d92:	f005 fc5d 	bl	8008650 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002d96:	bf00      	nop
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	20000338 	.word	0x20000338

08002da0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002da4:	4803      	ldr	r0, [pc, #12]	@ (8002db4 <TIM6_DAC_IRQHandler+0x14>)
 8002da6:	f005 f8f5 	bl	8007f94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  tim6_overflow_flag = FLAG_SET;
 8002daa:	4b03      	ldr	r3, [pc, #12]	@ (8002db8 <TIM6_DAC_IRQHandler+0x18>)
 8002dac:	2201      	movs	r2, #1
 8002dae:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002db0:	bf00      	nop
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	200002a8 	.word	0x200002a8
 8002db8:	200003b6 	.word	0x200003b6

08002dbc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002dc0:	4803      	ldr	r0, [pc, #12]	@ (8002dd0 <TIM7_IRQHandler+0x14>)
 8002dc2:	f005 f8e7 	bl	8007f94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  tim7_overflow_flag = FLAG_SET;
 8002dc6:	4b03      	ldr	r3, [pc, #12]	@ (8002dd4 <TIM7_IRQHandler+0x18>)
 8002dc8:	2201      	movs	r2, #1
 8002dca:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM7_IRQn 1 */
}
 8002dcc:	bf00      	nop
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	200002f0 	.word	0x200002f0
 8002dd4:	200003b7 	.word	0x200003b7

08002dd8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002ddc:	4802      	ldr	r0, [pc, #8]	@ (8002de8 <DMA2_Stream3_IRQHandler+0x10>)
 8002dde:	f001 fabf 	bl	8004360 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002de2:	bf00      	nop
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	200001e8 	.word	0x200001e8

08002dec <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002df0:	4802      	ldr	r0, [pc, #8]	@ (8002dfc <CAN2_RX0_IRQHandler+0x10>)
 8002df2:	f000 fddb 	bl	80039ac <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002df6:	bf00      	nop
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	20000048 	.word	0x20000048

08002e00 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 1 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CAN_RxHeader, CAN_RxData);
 8002e08:	4b09      	ldr	r3, [pc, #36]	@ (8002e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8002e0a:	4a0a      	ldr	r2, [pc, #40]	@ (8002e34 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 fc84 	bl	800371c <HAL_CAN_GetRxMessage>
	CAN_RX_Flag = FLAG_SET;
 8002e14:	4b08      	ldr	r3, [pc, #32]	@ (8002e38 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8002e16:	2201      	movs	r2, #1
 8002e18:	701a      	strb	r2, [r3, #0]

	if(CAN_First_Msg == FLAG_RESET) {
 8002e1a:	4b08      	ldr	r3, [pc, #32]	@ (8002e3c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d102      	bne.n	8002e28 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
		CAN_First_Msg = FLAG_SET;
 8002e22:	4b06      	ldr	r3, [pc, #24]	@ (8002e3c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8002e24:	2201      	movs	r2, #1
 8002e26:	701a      	strb	r2, [r3, #0]
	}
}
 8002e28:	bf00      	nop
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	200003ac 	.word	0x200003ac
 8002e34:	20000390 	.word	0x20000390
 8002e38:	200003b4 	.word	0x200003b4
 8002e3c:	200003b5 	.word	0x200003b5

08002e40 <HAL_GPIO_EXTI_Callback>:

// Set the reset RTC flag on the rising edge of the jumper flight input pin
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	4603      	mov	r3, r0
 8002e48:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == jmp_flight.GPIO_Pin) {
 8002e4a:	4b07      	ldr	r3, [pc, #28]	@ (8002e68 <HAL_GPIO_EXTI_Callback+0x28>)
 8002e4c:	889b      	ldrh	r3, [r3, #4]
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	88fa      	ldrh	r2, [r7, #6]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d102      	bne.n	8002e5c <HAL_GPIO_EXTI_Callback+0x1c>
		rtc_reset = FLAG_SET;
 8002e56:	4b05      	ldr	r3, [pc, #20]	@ (8002e6c <HAL_GPIO_EXTI_Callback+0x2c>)
 8002e58:	2201      	movs	r2, #1
 8002e5a:	701a      	strb	r2, [r3, #0]
	}
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	20000614 	.word	0x20000614
 8002e6c:	2000061c 	.word	0x2000061c

08002e70 <HAL_SPI_TxCpltCallback>:


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
	// Pull CS pin high to deselect the device
    if (hspi->Instance == SPI1) {
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a18      	ldr	r2, [pc, #96]	@ (8002ee0 <HAL_SPI_TxCpltCallback+0x70>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d108      	bne.n	8002e94 <HAL_SPI_TxCpltCallback+0x24>
        // Pull CS pin high for SPI1 to deselect the device
    	HAL_GPIO_WritePin(cs_spi1.GPIOx, cs_spi1.GPIO_Pin, GPIO_PIN_SET);
 8002e82:	4b18      	ldr	r3, [pc, #96]	@ (8002ee4 <HAL_SPI_TxCpltCallback+0x74>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a17      	ldr	r2, [pc, #92]	@ (8002ee4 <HAL_SPI_TxCpltCallback+0x74>)
 8002e88:	8891      	ldrh	r1, [r2, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f001 fe95 	bl	8004bbc <HAL_GPIO_WritePin>
 8002e92:	e00c      	b.n	8002eae <HAL_SPI_TxCpltCallback+0x3e>
    } else if (hspi->Instance == SPI2) {
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a13      	ldr	r2, [pc, #76]	@ (8002ee8 <HAL_SPI_TxCpltCallback+0x78>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d107      	bne.n	8002eae <HAL_SPI_TxCpltCallback+0x3e>
        // Pull CS pin high for SPI2 to deselect the device
    	HAL_GPIO_WritePin(cs_spi2.GPIOx, cs_spi2.GPIO_Pin, GPIO_PIN_SET);
 8002e9e:	4b13      	ldr	r3, [pc, #76]	@ (8002eec <HAL_SPI_TxCpltCallback+0x7c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a12      	ldr	r2, [pc, #72]	@ (8002eec <HAL_SPI_TxCpltCallback+0x7c>)
 8002ea4:	8891      	ldrh	r1, [r2, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f001 fe87 	bl	8004bbc <HAL_GPIO_WritePin>
    }

    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 0202 	bic.w	r2, r2, #2
 8002ebc:	605a      	str	r2, [r3, #4]
    clean_data_buffer(PAGE_SIZE, data_buffer_tx[buffer_tracker ^ 0x01]);
 8002ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8002ef0 <HAL_SPI_TxCpltCallback+0x80>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	f083 0301 	eor.w	r3, r3, #1
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	021b      	lsls	r3, r3, #8
 8002eca:	4a0a      	ldr	r2, [pc, #40]	@ (8002ef4 <HAL_SPI_TxCpltCallback+0x84>)
 8002ecc:	4413      	add	r3, r2
 8002ece:	4619      	mov	r1, r3
 8002ed0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002ed4:	f7fe fbba 	bl	800164c <clean_data_buffer>
}
 8002ed8:	bf00      	nop
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40013000 	.word	0x40013000
 8002ee4:	200005f4 	.word	0x200005f4
 8002ee8:	40003800 	.word	0x40003800
 8002eec:	20000604 	.word	0x20000604
 8002ef0:	200005b8 	.word	0x200005b8
 8002ef4:	200003b8 	.word	0x200003b8

08002ef8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
	uart2_rec_flag = FLAG_SET;
 8002f00:	4b05      	ldr	r3, [pc, #20]	@ (8002f18 <HAL_UART_RxCpltCallback+0x20>)
 8002f02:	2201      	movs	r2, #1
 8002f04:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, UARTRxData, 2);
 8002f06:	2202      	movs	r2, #2
 8002f08:	4904      	ldr	r1, [pc, #16]	@ (8002f1c <HAL_UART_RxCpltCallback+0x24>)
 8002f0a:	4805      	ldr	r0, [pc, #20]	@ (8002f20 <HAL_UART_RxCpltCallback+0x28>)
 8002f0c:	f005 fb7b 	bl	8008606 <HAL_UART_Receive_IT>
}
 8002f10:	bf00      	nop
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	2000038a 	.word	0x2000038a
 8002f1c:	20000388 	.word	0x20000388
 8002f20:	20000338 	.word	0x20000338

08002f24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f28:	4b06      	ldr	r3, [pc, #24]	@ (8002f44 <SystemInit+0x20>)
 8002f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f2e:	4a05      	ldr	r2, [pc, #20]	@ (8002f44 <SystemInit+0x20>)
 8002f30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f38:	bf00      	nop
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	e000ed00 	.word	0xe000ed00

08002f48 <uart_transmit_page>:

#include "uart_transmit.h"
/**
 * Transmit one single page over the UART interface
 */
void uart_transmit_page(UART_HandleTypeDef *huart, uint8_t page[PAGE_SIZE]) {
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huart, page, PAGE_SIZE, HAL_MAX_DELAY);
 8002f52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f56:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f5a:	6839      	ldr	r1, [r7, #0]
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f005 fac7 	bl	80084f0 <HAL_UART_Transmit>
}
 8002f62:	bf00      	nop
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <send_uart_string>:

void send_uart_string(UART_HandleTypeDef *huart, const char *str) {
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8002f74:	6838      	ldr	r0, [r7, #0]
 8002f76:	f7fd f939 	bl	80001ec <strlen>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f82:	6839      	ldr	r1, [r7, #0]
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f005 fab3 	bl	80084f0 <HAL_UART_Transmit>
}
 8002f8a:	bf00      	nop
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <send_uart_hex>:
	// Call the send_uart_string function to send the value to UART
	send_uart_string(huart, value_str);
	send_uart_string(huart, "\r\n");
}

void send_uart_hex(UART_HandleTypeDef *huart, uint8_t value) {
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b084      	sub	sp, #16
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	70fb      	strb	r3, [r7, #3]
	uint8_t buffer[1];
	buffer[0] = value;
 8002f9e:	78fb      	ldrb	r3, [r7, #3]
 8002fa0:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(huart, buffer, 1, HAL_MAX_DELAY);
 8002fa2:	f107 010c 	add.w	r1, r7, #12
 8002fa6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002faa:	2201      	movs	r2, #1
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f005 fa9f 	bl	80084f0 <HAL_UART_Transmit>
}
 8002fb2:	bf00      	nop
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
	...

08002fbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002fbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ff4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002fc0:	f7ff ffb0 	bl	8002f24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fc4:	480c      	ldr	r0, [pc, #48]	@ (8002ff8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002fc6:	490d      	ldr	r1, [pc, #52]	@ (8002ffc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002fc8:	4a0d      	ldr	r2, [pc, #52]	@ (8003000 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fcc:	e002      	b.n	8002fd4 <LoopCopyDataInit>

08002fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fd2:	3304      	adds	r3, #4

08002fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fd8:	d3f9      	bcc.n	8002fce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fda:	4a0a      	ldr	r2, [pc, #40]	@ (8003004 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002fdc:	4c0a      	ldr	r4, [pc, #40]	@ (8003008 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fe0:	e001      	b.n	8002fe6 <LoopFillZerobss>

08002fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fe4:	3204      	adds	r2, #4

08002fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fe8:	d3fb      	bcc.n	8002fe2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002fea:	f006 fa8f 	bl	800950c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fee:	f7fd fec3 	bl	8000d78 <main>
  bx  lr    
 8002ff2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ff4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ffc:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8003000:	08009634 	.word	0x08009634
  ldr r2, =_sbss
 8003004:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8003008:	20000638 	.word	0x20000638

0800300c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800300c:	e7fe      	b.n	800300c <ADC_IRQHandler>
	...

08003010 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003014:	4b0e      	ldr	r3, [pc, #56]	@ (8003050 <HAL_Init+0x40>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a0d      	ldr	r2, [pc, #52]	@ (8003050 <HAL_Init+0x40>)
 800301a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800301e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003020:	4b0b      	ldr	r3, [pc, #44]	@ (8003050 <HAL_Init+0x40>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a0a      	ldr	r2, [pc, #40]	@ (8003050 <HAL_Init+0x40>)
 8003026:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800302a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800302c:	4b08      	ldr	r3, [pc, #32]	@ (8003050 <HAL_Init+0x40>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a07      	ldr	r2, [pc, #28]	@ (8003050 <HAL_Init+0x40>)
 8003032:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003036:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003038:	2003      	movs	r0, #3
 800303a:	f000 ffb7 	bl	8003fac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800303e:	200f      	movs	r0, #15
 8003040:	f000 f808 	bl	8003054 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003044:	f7ff fb7a 	bl	800273c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40023c00 	.word	0x40023c00

08003054 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800305c:	4b12      	ldr	r3, [pc, #72]	@ (80030a8 <HAL_InitTick+0x54>)
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	4b12      	ldr	r3, [pc, #72]	@ (80030ac <HAL_InitTick+0x58>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	4619      	mov	r1, r3
 8003066:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800306a:	fbb3 f3f1 	udiv	r3, r3, r1
 800306e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003072:	4618      	mov	r0, r3
 8003074:	f000 ffcf 	bl	8004016 <HAL_SYSTICK_Config>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e00e      	b.n	80030a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b0f      	cmp	r3, #15
 8003086:	d80a      	bhi.n	800309e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003088:	2200      	movs	r2, #0
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003090:	f000 ff97 	bl	8003fc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003094:	4a06      	ldr	r2, [pc, #24]	@ (80030b0 <HAL_InitTick+0x5c>)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800309a:	2300      	movs	r3, #0
 800309c:	e000      	b.n	80030a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	2000001c 	.word	0x2000001c
 80030ac:	20000024 	.word	0x20000024
 80030b0:	20000020 	.word	0x20000020

080030b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030b8:	4b06      	ldr	r3, [pc, #24]	@ (80030d4 <HAL_IncTick+0x20>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	461a      	mov	r2, r3
 80030be:	4b06      	ldr	r3, [pc, #24]	@ (80030d8 <HAL_IncTick+0x24>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4413      	add	r3, r2
 80030c4:	4a04      	ldr	r2, [pc, #16]	@ (80030d8 <HAL_IncTick+0x24>)
 80030c6:	6013      	str	r3, [r2, #0]
}
 80030c8:	bf00      	nop
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	20000024 	.word	0x20000024
 80030d8:	20000634 	.word	0x20000634

080030dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  return uwTick;
 80030e0:	4b03      	ldr	r3, [pc, #12]	@ (80030f0 <HAL_GetTick+0x14>)
 80030e2:	681b      	ldr	r3, [r3, #0]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	20000634 	.word	0x20000634

080030f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030fc:	f7ff ffee 	bl	80030dc <HAL_GetTick>
 8003100:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800310c:	d005      	beq.n	800311a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800310e:	4b0a      	ldr	r3, [pc, #40]	@ (8003138 <HAL_Delay+0x44>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	461a      	mov	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	4413      	add	r3, r2
 8003118:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800311a:	bf00      	nop
 800311c:	f7ff ffde 	bl	80030dc <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	429a      	cmp	r2, r3
 800312a:	d8f7      	bhi.n	800311c <HAL_Delay+0x28>
  {
  }
}
 800312c:	bf00      	nop
 800312e:	bf00      	nop
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	20000024 	.word	0x20000024

0800313c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e0ed      	b.n	800332a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d102      	bne.n	8003160 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7ff fb16 	bl	800278c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0201 	orr.w	r2, r2, #1
 800316e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003170:	f7ff ffb4 	bl	80030dc <HAL_GetTick>
 8003174:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003176:	e012      	b.n	800319e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003178:	f7ff ffb0 	bl	80030dc <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b0a      	cmp	r3, #10
 8003184:	d90b      	bls.n	800319e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2205      	movs	r2, #5
 8003196:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e0c5      	b.n	800332a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0e5      	beq.n	8003178 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0202 	bic.w	r2, r2, #2
 80031ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031bc:	f7ff ff8e 	bl	80030dc <HAL_GetTick>
 80031c0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80031c2:	e012      	b.n	80031ea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031c4:	f7ff ff8a 	bl	80030dc <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b0a      	cmp	r3, #10
 80031d0:	d90b      	bls.n	80031ea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2205      	movs	r2, #5
 80031e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e09f      	b.n	800332a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1e5      	bne.n	80031c4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	7e1b      	ldrb	r3, [r3, #24]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d108      	bne.n	8003212 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	e007      	b.n	8003222 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003220:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	7e5b      	ldrb	r3, [r3, #25]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d108      	bne.n	800323c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	e007      	b.n	800324c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800324a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	7e9b      	ldrb	r3, [r3, #26]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d108      	bne.n	8003266 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0220 	orr.w	r2, r2, #32
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	e007      	b.n	8003276 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 0220 	bic.w	r2, r2, #32
 8003274:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	7edb      	ldrb	r3, [r3, #27]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d108      	bne.n	8003290 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0210 	bic.w	r2, r2, #16
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	e007      	b.n	80032a0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0210 	orr.w	r2, r2, #16
 800329e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	7f1b      	ldrb	r3, [r3, #28]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d108      	bne.n	80032ba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 0208 	orr.w	r2, r2, #8
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	e007      	b.n	80032ca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 0208 	bic.w	r2, r2, #8
 80032c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	7f5b      	ldrb	r3, [r3, #29]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d108      	bne.n	80032e4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f042 0204 	orr.w	r2, r2, #4
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	e007      	b.n	80032f4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 0204 	bic.w	r2, r2, #4
 80032f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	431a      	orrs	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	ea42 0103 	orr.w	r1, r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	1e5a      	subs	r2, r3, #1
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
	...

08003334 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003334:	b480      	push	{r7}
 8003336:	b087      	sub	sp, #28
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 3020 	ldrb.w	r3, [r3, #32]
 800334a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800334c:	7cfb      	ldrb	r3, [r7, #19]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d003      	beq.n	800335a <HAL_CAN_ConfigFilter+0x26>
 8003352:	7cfb      	ldrb	r3, [r7, #19]
 8003354:	2b02      	cmp	r3, #2
 8003356:	f040 80be 	bne.w	80034d6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800335a:	4b65      	ldr	r3, [pc, #404]	@ (80034f0 <HAL_CAN_ConfigFilter+0x1bc>)
 800335c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003364:	f043 0201 	orr.w	r2, r3, #1
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003374:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003388:	021b      	lsls	r3, r3, #8
 800338a:	431a      	orrs	r2, r3
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	f003 031f 	and.w	r3, r3, #31
 800339a:	2201      	movs	r2, #1
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	43db      	mvns	r3, r3
 80033ac:	401a      	ands	r2, r3
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d123      	bne.n	8003404 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	43db      	mvns	r3, r3
 80033c6:	401a      	ands	r2, r3
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80033de:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	3248      	adds	r2, #72	@ 0x48
 80033e4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033f8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033fa:	6979      	ldr	r1, [r7, #20]
 80033fc:	3348      	adds	r3, #72	@ 0x48
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	440b      	add	r3, r1
 8003402:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	69db      	ldr	r3, [r3, #28]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d122      	bne.n	8003452 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	431a      	orrs	r2, r3
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800342c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	3248      	adds	r2, #72	@ 0x48
 8003432:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003446:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003448:	6979      	ldr	r1, [r7, #20]
 800344a:	3348      	adds	r3, #72	@ 0x48
 800344c:	00db      	lsls	r3, r3, #3
 800344e:	440b      	add	r3, r1
 8003450:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d109      	bne.n	800346e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	43db      	mvns	r3, r3
 8003464:	401a      	ands	r2, r3
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800346c:	e007      	b.n	800347e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	431a      	orrs	r2, r3
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d109      	bne.n	800349a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	43db      	mvns	r3, r3
 8003490:	401a      	ands	r2, r3
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8003498:	e007      	b.n	80034aa <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	431a      	orrs	r2, r3
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d107      	bne.n	80034c2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	431a      	orrs	r2, r3
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80034c8:	f023 0201 	bic.w	r2, r3, #1
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80034d2:	2300      	movs	r3, #0
 80034d4:	e006      	b.n	80034e4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034da:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
  }
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	371c      	adds	r7, #28
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	40006400 	.word	0x40006400

080034f4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b01      	cmp	r3, #1
 8003506:	d12e      	bne.n	8003566 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2202      	movs	r2, #2
 800350c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 0201 	bic.w	r2, r2, #1
 800351e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003520:	f7ff fddc 	bl	80030dc <HAL_GetTick>
 8003524:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003526:	e012      	b.n	800354e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003528:	f7ff fdd8 	bl	80030dc <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b0a      	cmp	r3, #10
 8003534:	d90b      	bls.n	800354e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2205      	movs	r2, #5
 8003546:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e012      	b.n	8003574 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1e5      	bne.n	8003528 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8003562:	2300      	movs	r3, #0
 8003564:	e006      	b.n	8003574 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
  }
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800357c:	b480      	push	{r7}
 800357e:	b089      	sub	sp, #36	@ 0x24
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
 8003588:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003590:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800359a:	7ffb      	ldrb	r3, [r7, #31]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d003      	beq.n	80035a8 <HAL_CAN_AddTxMessage+0x2c>
 80035a0:	7ffb      	ldrb	r3, [r7, #31]
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	f040 80ad 	bne.w	8003702 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10a      	bne.n	80035c8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d105      	bne.n	80035c8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 8095 	beq.w	80036f2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	0e1b      	lsrs	r3, r3, #24
 80035cc:	f003 0303 	and.w	r3, r3, #3
 80035d0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80035d2:	2201      	movs	r2, #1
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	409a      	lsls	r2, r3
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10d      	bne.n	8003600 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80035ee:	68f9      	ldr	r1, [r7, #12]
 80035f0:	6809      	ldr	r1, [r1, #0]
 80035f2:	431a      	orrs	r2, r3
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	3318      	adds	r3, #24
 80035f8:	011b      	lsls	r3, r3, #4
 80035fa:	440b      	add	r3, r1
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	e00f      	b.n	8003620 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800360a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003610:	68f9      	ldr	r1, [r7, #12]
 8003612:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003614:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	3318      	adds	r3, #24
 800361a:	011b      	lsls	r3, r3, #4
 800361c:	440b      	add	r3, r1
 800361e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6819      	ldr	r1, [r3, #0]
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	691a      	ldr	r2, [r3, #16]
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	3318      	adds	r3, #24
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	440b      	add	r3, r1
 8003630:	3304      	adds	r3, #4
 8003632:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	7d1b      	ldrb	r3, [r3, #20]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d111      	bne.n	8003660 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	3318      	adds	r3, #24
 8003644:	011b      	lsls	r3, r3, #4
 8003646:	4413      	add	r3, r2
 8003648:	3304      	adds	r3, #4
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	6811      	ldr	r1, [r2, #0]
 8003650:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	3318      	adds	r3, #24
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	440b      	add	r3, r1
 800365c:	3304      	adds	r3, #4
 800365e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3307      	adds	r3, #7
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	061a      	lsls	r2, r3, #24
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3306      	adds	r3, #6
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	041b      	lsls	r3, r3, #16
 8003670:	431a      	orrs	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	3305      	adds	r3, #5
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	021b      	lsls	r3, r3, #8
 800367a:	4313      	orrs	r3, r2
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	3204      	adds	r2, #4
 8003680:	7812      	ldrb	r2, [r2, #0]
 8003682:	4610      	mov	r0, r2
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	6811      	ldr	r1, [r2, #0]
 8003688:	ea43 0200 	orr.w	r2, r3, r0
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	011b      	lsls	r3, r3, #4
 8003690:	440b      	add	r3, r1
 8003692:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8003696:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3303      	adds	r3, #3
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	061a      	lsls	r2, r3, #24
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3302      	adds	r3, #2
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	041b      	lsls	r3, r3, #16
 80036a8:	431a      	orrs	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	3301      	adds	r3, #1
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	021b      	lsls	r3, r3, #8
 80036b2:	4313      	orrs	r3, r2
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	7812      	ldrb	r2, [r2, #0]
 80036b8:	4610      	mov	r0, r2
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	6811      	ldr	r1, [r2, #0]
 80036be:	ea43 0200 	orr.w	r2, r3, r0
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	011b      	lsls	r3, r3, #4
 80036c6:	440b      	add	r3, r1
 80036c8:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80036cc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	3318      	adds	r3, #24
 80036d6:	011b      	lsls	r3, r3, #4
 80036d8:	4413      	add	r3, r2
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	6811      	ldr	r1, [r2, #0]
 80036e0:	f043 0201 	orr.w	r2, r3, #1
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	3318      	adds	r3, #24
 80036e8:	011b      	lsls	r3, r3, #4
 80036ea:	440b      	add	r3, r1
 80036ec:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80036ee:	2300      	movs	r3, #0
 80036f0:	e00e      	b.n	8003710 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e006      	b.n	8003710 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003706:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
  }
}
 8003710:	4618      	mov	r0, r3
 8003712:	3724      	adds	r7, #36	@ 0x24
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800371c:	b480      	push	{r7}
 800371e:	b087      	sub	sp, #28
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
 8003728:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003730:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003732:	7dfb      	ldrb	r3, [r7, #23]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d003      	beq.n	8003740 <HAL_CAN_GetRxMessage+0x24>
 8003738:	7dfb      	ldrb	r3, [r7, #23]
 800373a:	2b02      	cmp	r3, #2
 800373c:	f040 8103 	bne.w	8003946 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d10e      	bne.n	8003764 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f003 0303 	and.w	r3, r3, #3
 8003750:	2b00      	cmp	r3, #0
 8003752:	d116      	bne.n	8003782 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003758:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e0f7      	b.n	8003954 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	f003 0303 	and.w	r3, r3, #3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d107      	bne.n	8003782 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003776:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e0e8      	b.n	8003954 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	331b      	adds	r3, #27
 800378a:	011b      	lsls	r3, r3, #4
 800378c:	4413      	add	r3, r2
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0204 	and.w	r2, r3, #4
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10c      	bne.n	80037ba <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	331b      	adds	r3, #27
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	4413      	add	r3, r2
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	0d5b      	lsrs	r3, r3, #21
 80037b0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	e00b      	b.n	80037d2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	331b      	adds	r3, #27
 80037c2:	011b      	lsls	r3, r3, #4
 80037c4:	4413      	add	r3, r2
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	08db      	lsrs	r3, r3, #3
 80037ca:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	331b      	adds	r3, #27
 80037da:	011b      	lsls	r3, r3, #4
 80037dc:	4413      	add	r3, r2
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0202 	and.w	r2, r3, #2
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	331b      	adds	r3, #27
 80037f0:	011b      	lsls	r3, r3, #4
 80037f2:	4413      	add	r3, r2
 80037f4:	3304      	adds	r3, #4
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0308 	and.w	r3, r3, #8
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d003      	beq.n	8003808 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2208      	movs	r2, #8
 8003804:	611a      	str	r2, [r3, #16]
 8003806:	e00b      	b.n	8003820 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	331b      	adds	r3, #27
 8003810:	011b      	lsls	r3, r3, #4
 8003812:	4413      	add	r3, r2
 8003814:	3304      	adds	r3, #4
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 020f 	and.w	r2, r3, #15
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	331b      	adds	r3, #27
 8003828:	011b      	lsls	r3, r3, #4
 800382a:	4413      	add	r3, r2
 800382c:	3304      	adds	r3, #4
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	0a1b      	lsrs	r3, r3, #8
 8003832:	b2da      	uxtb	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	331b      	adds	r3, #27
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	4413      	add	r3, r2
 8003844:	3304      	adds	r3, #4
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	0c1b      	lsrs	r3, r3, #16
 800384a:	b29a      	uxth	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	011b      	lsls	r3, r3, #4
 8003858:	4413      	add	r3, r2
 800385a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	b2da      	uxtb	r2, r3
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	011b      	lsls	r3, r3, #4
 800386e:	4413      	add	r3, r2
 8003870:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	0a1a      	lsrs	r2, r3, #8
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	3301      	adds	r3, #1
 800387c:	b2d2      	uxtb	r2, r2
 800387e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	011b      	lsls	r3, r3, #4
 8003888:	4413      	add	r3, r2
 800388a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	0c1a      	lsrs	r2, r3, #16
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	3302      	adds	r3, #2
 8003896:	b2d2      	uxtb	r2, r2
 8003898:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	011b      	lsls	r3, r3, #4
 80038a2:	4413      	add	r3, r2
 80038a4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	0e1a      	lsrs	r2, r3, #24
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	3303      	adds	r3, #3
 80038b0:	b2d2      	uxtb	r2, r2
 80038b2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	011b      	lsls	r3, r3, #4
 80038bc:	4413      	add	r3, r2
 80038be:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	3304      	adds	r3, #4
 80038c8:	b2d2      	uxtb	r2, r2
 80038ca:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	4413      	add	r3, r2
 80038d6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	0a1a      	lsrs	r2, r3, #8
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	3305      	adds	r3, #5
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	011b      	lsls	r3, r3, #4
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	0c1a      	lsrs	r2, r3, #16
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	3306      	adds	r3, #6
 80038fc:	b2d2      	uxtb	r2, r2
 80038fe:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	011b      	lsls	r3, r3, #4
 8003908:	4413      	add	r3, r2
 800390a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	0e1a      	lsrs	r2, r3, #24
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	3307      	adds	r3, #7
 8003916:	b2d2      	uxtb	r2, r2
 8003918:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d108      	bne.n	8003932 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68da      	ldr	r2, [r3, #12]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f042 0220 	orr.w	r2, r2, #32
 800392e:	60da      	str	r2, [r3, #12]
 8003930:	e007      	b.n	8003942 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	691a      	ldr	r2, [r3, #16]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f042 0220 	orr.w	r2, r2, #32
 8003940:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003942:	2300      	movs	r3, #0
 8003944:	e006      	b.n	8003954 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
  }
}
 8003954:	4618      	mov	r0, r3
 8003956:	371c      	adds	r7, #28
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003970:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003972:	7bfb      	ldrb	r3, [r7, #15]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d002      	beq.n	800397e <HAL_CAN_ActivateNotification+0x1e>
 8003978:	7bfb      	ldrb	r3, [r7, #15]
 800397a:	2b02      	cmp	r3, #2
 800397c:	d109      	bne.n	8003992 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6959      	ldr	r1, [r3, #20]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800398e:	2300      	movs	r3, #0
 8003990:	e006      	b.n	80039a0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003996:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
  }
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3714      	adds	r7, #20
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b08a      	sub	sp, #40	@ 0x28
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80039b4:	2300      	movs	r3, #0
 80039b6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80039e8:	6a3b      	ldr	r3, [r7, #32]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d07c      	beq.n	8003aec <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d023      	beq.n	8003a44 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2201      	movs	r2, #1
 8003a02:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f983 	bl	8003d1a <HAL_CAN_TxMailbox0CompleteCallback>
 8003a14:	e016      	b.n	8003a44 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d004      	beq.n	8003a2a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a22:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003a26:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a28:	e00c      	b.n	8003a44 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	f003 0308 	and.w	r3, r3, #8
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d004      	beq.n	8003a3e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a36:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003a3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a3c:	e002      	b.n	8003a44 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f989 	bl	8003d56 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d024      	beq.n	8003a98 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a56:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f963 	bl	8003d2e <HAL_CAN_TxMailbox1CompleteCallback>
 8003a68:	e016      	b.n	8003a98 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d004      	beq.n	8003a7e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a76:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003a7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a7c:	e00c      	b.n	8003a98 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d004      	beq.n	8003a92 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a90:	e002      	b.n	8003a98 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f969 	bl	8003d6a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d024      	beq.n	8003aec <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003aaa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f943 	bl	8003d42 <HAL_CAN_TxMailbox2CompleteCallback>
 8003abc:	e016      	b.n	8003aec <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d004      	beq.n	8003ad2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ace:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ad0:	e00c      	b.n	8003aec <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d004      	beq.n	8003ae6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ade:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ae2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ae4:	e002      	b.n	8003aec <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 f949 	bl	8003d7e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003aec:	6a3b      	ldr	r3, [r7, #32]
 8003aee:	f003 0308 	and.w	r3, r3, #8
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00c      	beq.n	8003b10 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f003 0310 	and.w	r3, r3, #16
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d007      	beq.n	8003b10 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b06:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2210      	movs	r2, #16
 8003b0e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	f003 0304 	and.w	r3, r3, #4
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00b      	beq.n	8003b32 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	f003 0308 	and.w	r3, r3, #8
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d006      	beq.n	8003b32 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2208      	movs	r2, #8
 8003b2a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 f930 	bl	8003d92 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003b32:	6a3b      	ldr	r3, [r7, #32]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d009      	beq.n	8003b50 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	f003 0303 	and.w	r3, r3, #3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d002      	beq.n	8003b50 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f7ff f958 	bl	8002e00 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003b50:	6a3b      	ldr	r3, [r7, #32]
 8003b52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00c      	beq.n	8003b74 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	f003 0310 	and.w	r3, r3, #16
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d007      	beq.n	8003b74 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b6a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2210      	movs	r2, #16
 8003b72:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	f003 0320 	and.w	r3, r3, #32
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00b      	beq.n	8003b96 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	f003 0308 	and.w	r3, r3, #8
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d006      	beq.n	8003b96 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2208      	movs	r2, #8
 8003b8e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f912 	bl	8003dba <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003b96:	6a3b      	ldr	r3, [r7, #32]
 8003b98:	f003 0310 	and.w	r3, r3, #16
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d009      	beq.n	8003bb4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	f003 0303 	and.w	r3, r3, #3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d002      	beq.n	8003bb4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f8f9 	bl	8003da6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00b      	beq.n	8003bd6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	f003 0310 	and.w	r3, r3, #16
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d006      	beq.n	8003bd6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2210      	movs	r2, #16
 8003bce:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 f8fc 	bl	8003dce <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00b      	beq.n	8003bf8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	f003 0308 	and.w	r3, r3, #8
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d006      	beq.n	8003bf8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2208      	movs	r2, #8
 8003bf0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f8f5 	bl	8003de2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003bf8:	6a3b      	ldr	r3, [r7, #32]
 8003bfa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d07b      	beq.n	8003cfa <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	f003 0304 	and.w	r3, r3, #4
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d072      	beq.n	8003cf2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003c0c:	6a3b      	ldr	r3, [r7, #32]
 8003c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d008      	beq.n	8003c28 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d003      	beq.n	8003c28 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c22:	f043 0301 	orr.w	r3, r3, #1
 8003c26:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003c28:	6a3b      	ldr	r3, [r7, #32]
 8003c2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d008      	beq.n	8003c44 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d003      	beq.n	8003c44 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3e:	f043 0302 	orr.w	r3, r3, #2
 8003c42:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003c44:	6a3b      	ldr	r3, [r7, #32]
 8003c46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d008      	beq.n	8003c60 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d003      	beq.n	8003c60 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5a:	f043 0304 	orr.w	r3, r3, #4
 8003c5e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003c60:	6a3b      	ldr	r3, [r7, #32]
 8003c62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d043      	beq.n	8003cf2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d03e      	beq.n	8003cf2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003c7a:	2b60      	cmp	r3, #96	@ 0x60
 8003c7c:	d02b      	beq.n	8003cd6 <HAL_CAN_IRQHandler+0x32a>
 8003c7e:	2b60      	cmp	r3, #96	@ 0x60
 8003c80:	d82e      	bhi.n	8003ce0 <HAL_CAN_IRQHandler+0x334>
 8003c82:	2b50      	cmp	r3, #80	@ 0x50
 8003c84:	d022      	beq.n	8003ccc <HAL_CAN_IRQHandler+0x320>
 8003c86:	2b50      	cmp	r3, #80	@ 0x50
 8003c88:	d82a      	bhi.n	8003ce0 <HAL_CAN_IRQHandler+0x334>
 8003c8a:	2b40      	cmp	r3, #64	@ 0x40
 8003c8c:	d019      	beq.n	8003cc2 <HAL_CAN_IRQHandler+0x316>
 8003c8e:	2b40      	cmp	r3, #64	@ 0x40
 8003c90:	d826      	bhi.n	8003ce0 <HAL_CAN_IRQHandler+0x334>
 8003c92:	2b30      	cmp	r3, #48	@ 0x30
 8003c94:	d010      	beq.n	8003cb8 <HAL_CAN_IRQHandler+0x30c>
 8003c96:	2b30      	cmp	r3, #48	@ 0x30
 8003c98:	d822      	bhi.n	8003ce0 <HAL_CAN_IRQHandler+0x334>
 8003c9a:	2b10      	cmp	r3, #16
 8003c9c:	d002      	beq.n	8003ca4 <HAL_CAN_IRQHandler+0x2f8>
 8003c9e:	2b20      	cmp	r3, #32
 8003ca0:	d005      	beq.n	8003cae <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003ca2:	e01d      	b.n	8003ce0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca6:	f043 0308 	orr.w	r3, r3, #8
 8003caa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003cac:	e019      	b.n	8003ce2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb0:	f043 0310 	orr.w	r3, r3, #16
 8003cb4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003cb6:	e014      	b.n	8003ce2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cba:	f043 0320 	orr.w	r3, r3, #32
 8003cbe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003cc0:	e00f      	b.n	8003ce2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cc8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003cca:	e00a      	b.n	8003ce2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cd2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003cd4:	e005      	b.n	8003ce2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cdc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003cde:	e000      	b.n	8003ce2 <HAL_CAN_IRQHandler+0x336>
            break;
 8003ce0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	699a      	ldr	r2, [r3, #24]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003cf0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2204      	movs	r2, #4
 8003cf8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d008      	beq.n	8003d12 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d06:	431a      	orrs	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 f872 	bl	8003df6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003d12:	bf00      	nop
 8003d14:	3728      	adds	r7, #40	@ 0x28
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b083      	sub	sp, #12
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b083      	sub	sp, #12
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003d36:	bf00      	nop
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003d42:	b480      	push	{r7}
 8003d44:	b083      	sub	sp, #12
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003d4a:	bf00      	nop
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr

08003d56 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003d56:	b480      	push	{r7}
 8003d58:	b083      	sub	sp, #12
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003d5e:	bf00      	nop
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003d72:	bf00      	nop
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr

08003d7e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003d7e:	b480      	push	{r7}
 8003d80:	b083      	sub	sp, #12
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003d86:	bf00      	nop
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b083      	sub	sp, #12
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003d9a:	bf00      	nop
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b083      	sub	sp, #12
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003dae:	bf00      	nop
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b083      	sub	sp, #12
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003dc2:	bf00      	nop
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b083      	sub	sp, #12
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003de2:	b480      	push	{r7}
 8003de4:	b083      	sub	sp, #12
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003dea:	bf00      	nop
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003df6:	b480      	push	{r7}
 8003df8:	b083      	sub	sp, #12
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003dfe:	bf00      	nop
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
	...

08003e0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f003 0307 	and.w	r3, r3, #7
 8003e1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e50 <__NVIC_SetPriorityGrouping+0x44>)
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e22:	68ba      	ldr	r2, [r7, #8]
 8003e24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e28:	4013      	ands	r3, r2
 8003e2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003e38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e3e:	4a04      	ldr	r2, [pc, #16]	@ (8003e50 <__NVIC_SetPriorityGrouping+0x44>)
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	60d3      	str	r3, [r2, #12]
}
 8003e44:	bf00      	nop
 8003e46:	3714      	adds	r7, #20
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr
 8003e50:	e000ed00 	.word	0xe000ed00

08003e54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e58:	4b04      	ldr	r3, [pc, #16]	@ (8003e6c <__NVIC_GetPriorityGrouping+0x18>)
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	0a1b      	lsrs	r3, r3, #8
 8003e5e:	f003 0307 	and.w	r3, r3, #7
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	e000ed00 	.word	0xe000ed00

08003e70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	4603      	mov	r3, r0
 8003e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	db0b      	blt.n	8003e9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e82:	79fb      	ldrb	r3, [r7, #7]
 8003e84:	f003 021f 	and.w	r2, r3, #31
 8003e88:	4907      	ldr	r1, [pc, #28]	@ (8003ea8 <__NVIC_EnableIRQ+0x38>)
 8003e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e8e:	095b      	lsrs	r3, r3, #5
 8003e90:	2001      	movs	r0, #1
 8003e92:	fa00 f202 	lsl.w	r2, r0, r2
 8003e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e9a:	bf00      	nop
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	e000e100 	.word	0xe000e100

08003eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	6039      	str	r1, [r7, #0]
 8003eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	db0a      	blt.n	8003ed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	490c      	ldr	r1, [pc, #48]	@ (8003ef8 <__NVIC_SetPriority+0x4c>)
 8003ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eca:	0112      	lsls	r2, r2, #4
 8003ecc:	b2d2      	uxtb	r2, r2
 8003ece:	440b      	add	r3, r1
 8003ed0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ed4:	e00a      	b.n	8003eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	b2da      	uxtb	r2, r3
 8003eda:	4908      	ldr	r1, [pc, #32]	@ (8003efc <__NVIC_SetPriority+0x50>)
 8003edc:	79fb      	ldrb	r3, [r7, #7]
 8003ede:	f003 030f 	and.w	r3, r3, #15
 8003ee2:	3b04      	subs	r3, #4
 8003ee4:	0112      	lsls	r2, r2, #4
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	440b      	add	r3, r1
 8003eea:	761a      	strb	r2, [r3, #24]
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	e000e100 	.word	0xe000e100
 8003efc:	e000ed00 	.word	0xe000ed00

08003f00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b089      	sub	sp, #36	@ 0x24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f003 0307 	and.w	r3, r3, #7
 8003f12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	f1c3 0307 	rsb	r3, r3, #7
 8003f1a:	2b04      	cmp	r3, #4
 8003f1c:	bf28      	it	cs
 8003f1e:	2304      	movcs	r3, #4
 8003f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	3304      	adds	r3, #4
 8003f26:	2b06      	cmp	r3, #6
 8003f28:	d902      	bls.n	8003f30 <NVIC_EncodePriority+0x30>
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	3b03      	subs	r3, #3
 8003f2e:	e000      	b.n	8003f32 <NVIC_EncodePriority+0x32>
 8003f30:	2300      	movs	r3, #0
 8003f32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3e:	43da      	mvns	r2, r3
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	401a      	ands	r2, r3
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f48:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f52:	43d9      	mvns	r1, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f58:	4313      	orrs	r3, r2
         );
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3724      	adds	r7, #36	@ 0x24
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
	...

08003f68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	3b01      	subs	r3, #1
 8003f74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f78:	d301      	bcc.n	8003f7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e00f      	b.n	8003f9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8003fa8 <SysTick_Config+0x40>)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	3b01      	subs	r3, #1
 8003f84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f86:	210f      	movs	r1, #15
 8003f88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003f8c:	f7ff ff8e 	bl	8003eac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f90:	4b05      	ldr	r3, [pc, #20]	@ (8003fa8 <SysTick_Config+0x40>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f96:	4b04      	ldr	r3, [pc, #16]	@ (8003fa8 <SysTick_Config+0x40>)
 8003f98:	2207      	movs	r2, #7
 8003f9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	e000e010 	.word	0xe000e010

08003fac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f7ff ff29 	bl	8003e0c <__NVIC_SetPriorityGrouping>
}
 8003fba:	bf00      	nop
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b086      	sub	sp, #24
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	4603      	mov	r3, r0
 8003fca:	60b9      	str	r1, [r7, #8]
 8003fcc:	607a      	str	r2, [r7, #4]
 8003fce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003fd4:	f7ff ff3e 	bl	8003e54 <__NVIC_GetPriorityGrouping>
 8003fd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	68b9      	ldr	r1, [r7, #8]
 8003fde:	6978      	ldr	r0, [r7, #20]
 8003fe0:	f7ff ff8e 	bl	8003f00 <NVIC_EncodePriority>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fea:	4611      	mov	r1, r2
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7ff ff5d 	bl	8003eac <__NVIC_SetPriority>
}
 8003ff2:	bf00      	nop
 8003ff4:	3718      	adds	r7, #24
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b082      	sub	sp, #8
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	4603      	mov	r3, r0
 8004002:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004008:	4618      	mov	r0, r3
 800400a:	f7ff ff31 	bl	8003e70 <__NVIC_EnableIRQ>
}
 800400e:	bf00      	nop
 8004010:	3708      	adds	r7, #8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b082      	sub	sp, #8
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7ff ffa2 	bl	8003f68 <SysTick_Config>
 8004024:	4603      	mov	r3, r0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
	...

08004030 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004038:	2300      	movs	r3, #0
 800403a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800403c:	f7ff f84e 	bl	80030dc <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d101      	bne.n	800404c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e099      	b.n	8004180 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0201 	bic.w	r2, r2, #1
 800406a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800406c:	e00f      	b.n	800408e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800406e:	f7ff f835 	bl	80030dc <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b05      	cmp	r3, #5
 800407a:	d908      	bls.n	800408e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2220      	movs	r2, #32
 8004080:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2203      	movs	r2, #3
 8004086:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e078      	b.n	8004180 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1e8      	bne.n	800406e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	4b38      	ldr	r3, [pc, #224]	@ (8004188 <HAL_DMA_Init+0x158>)
 80040a8:	4013      	ands	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	4313      	orrs	r3, r2
 80040de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e4:	2b04      	cmp	r3, #4
 80040e6:	d107      	bne.n	80040f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f0:	4313      	orrs	r3, r2
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	f023 0307 	bic.w	r3, r3, #7
 800410e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	4313      	orrs	r3, r2
 8004118:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411e:	2b04      	cmp	r3, #4
 8004120:	d117      	bne.n	8004152 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	4313      	orrs	r3, r2
 800412a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00e      	beq.n	8004152 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 fb01 	bl	800473c <DMA_CheckFifoParam>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d008      	beq.n	8004152 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2240      	movs	r2, #64	@ 0x40
 8004144:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800414e:	2301      	movs	r3, #1
 8004150:	e016      	b.n	8004180 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 fab8 	bl	80046d0 <DMA_CalcBaseAndBitshift>
 8004160:	4603      	mov	r3, r0
 8004162:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004168:	223f      	movs	r2, #63	@ 0x3f
 800416a:	409a      	lsls	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3718      	adds	r7, #24
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	f010803f 	.word	0xf010803f

0800418c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
 8004198:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800419a:	2300      	movs	r3, #0
 800419c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d101      	bne.n	80041b2 <HAL_DMA_Start_IT+0x26>
 80041ae:	2302      	movs	r3, #2
 80041b0:	e040      	b.n	8004234 <HAL_DMA_Start_IT+0xa8>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d12f      	bne.n	8004226 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2202      	movs	r2, #2
 80041ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	68b9      	ldr	r1, [r7, #8]
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f000 fa4a 	bl	8004674 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041e4:	223f      	movs	r2, #63	@ 0x3f
 80041e6:	409a      	lsls	r2, r3
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f042 0216 	orr.w	r2, r2, #22
 80041fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004200:	2b00      	cmp	r3, #0
 8004202:	d007      	beq.n	8004214 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f042 0208 	orr.w	r2, r2, #8
 8004212:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f042 0201 	orr.w	r2, r2, #1
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	e005      	b.n	8004232 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800422e:	2302      	movs	r3, #2
 8004230:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004232:	7dfb      	ldrb	r3, [r7, #23]
}
 8004234:	4618      	mov	r0, r3
 8004236:	3718      	adds	r7, #24
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004248:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800424a:	f7fe ff47 	bl	80030dc <HAL_GetTick>
 800424e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d008      	beq.n	800426e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2280      	movs	r2, #128	@ 0x80
 8004260:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e052      	b.n	8004314 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 0216 	bic.w	r2, r2, #22
 800427c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	695a      	ldr	r2, [r3, #20]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800428c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004292:	2b00      	cmp	r3, #0
 8004294:	d103      	bne.n	800429e <HAL_DMA_Abort+0x62>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800429a:	2b00      	cmp	r3, #0
 800429c:	d007      	beq.n	80042ae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 0208 	bic.w	r2, r2, #8
 80042ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f022 0201 	bic.w	r2, r2, #1
 80042bc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042be:	e013      	b.n	80042e8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042c0:	f7fe ff0c 	bl	80030dc <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b05      	cmp	r3, #5
 80042cc:	d90c      	bls.n	80042e8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2220      	movs	r2, #32
 80042d2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2203      	movs	r2, #3
 80042d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e015      	b.n	8004314 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1e4      	bne.n	80042c0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042fa:	223f      	movs	r2, #63	@ 0x3f
 80042fc:	409a      	lsls	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d004      	beq.n	800433a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2280      	movs	r2, #128	@ 0x80
 8004334:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e00c      	b.n	8004354 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2205      	movs	r2, #5
 800433e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 0201 	bic.w	r2, r2, #1
 8004350:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800436c:	4b8e      	ldr	r3, [pc, #568]	@ (80045a8 <HAL_DMA_IRQHandler+0x248>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a8e      	ldr	r2, [pc, #568]	@ (80045ac <HAL_DMA_IRQHandler+0x24c>)
 8004372:	fba2 2303 	umull	r2, r3, r2, r3
 8004376:	0a9b      	lsrs	r3, r3, #10
 8004378:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800437e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800438a:	2208      	movs	r2, #8
 800438c:	409a      	lsls	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	4013      	ands	r3, r2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d01a      	beq.n	80043cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0304 	and.w	r3, r3, #4
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d013      	beq.n	80043cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f022 0204 	bic.w	r2, r2, #4
 80043b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043b8:	2208      	movs	r2, #8
 80043ba:	409a      	lsls	r2, r3
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043c4:	f043 0201 	orr.w	r2, r3, #1
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043d0:	2201      	movs	r2, #1
 80043d2:	409a      	lsls	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	4013      	ands	r3, r2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d012      	beq.n	8004402 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00b      	beq.n	8004402 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ee:	2201      	movs	r2, #1
 80043f0:	409a      	lsls	r2, r3
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043fa:	f043 0202 	orr.w	r2, r3, #2
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004406:	2204      	movs	r2, #4
 8004408:	409a      	lsls	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	4013      	ands	r3, r2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d012      	beq.n	8004438 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00b      	beq.n	8004438 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004424:	2204      	movs	r2, #4
 8004426:	409a      	lsls	r2, r3
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004430:	f043 0204 	orr.w	r2, r3, #4
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800443c:	2210      	movs	r2, #16
 800443e:	409a      	lsls	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	4013      	ands	r3, r2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d043      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0308 	and.w	r3, r3, #8
 8004452:	2b00      	cmp	r3, #0
 8004454:	d03c      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800445a:	2210      	movs	r2, #16
 800445c:	409a      	lsls	r2, r3
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d018      	beq.n	80044a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d108      	bne.n	8004490 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004482:	2b00      	cmp	r3, #0
 8004484:	d024      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	4798      	blx	r3
 800448e:	e01f      	b.n	80044d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004494:	2b00      	cmp	r3, #0
 8004496:	d01b      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	4798      	blx	r3
 80044a0:	e016      	b.n	80044d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d107      	bne.n	80044c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 0208 	bic.w	r2, r2, #8
 80044be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d003      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044d4:	2220      	movs	r2, #32
 80044d6:	409a      	lsls	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4013      	ands	r3, r2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f000 808f 	beq.w	8004600 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0310 	and.w	r3, r3, #16
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 8087 	beq.w	8004600 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044f6:	2220      	movs	r2, #32
 80044f8:	409a      	lsls	r2, r3
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b05      	cmp	r3, #5
 8004508:	d136      	bne.n	8004578 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 0216 	bic.w	r2, r2, #22
 8004518:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	695a      	ldr	r2, [r3, #20]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004528:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452e:	2b00      	cmp	r3, #0
 8004530:	d103      	bne.n	800453a <HAL_DMA_IRQHandler+0x1da>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004536:	2b00      	cmp	r3, #0
 8004538:	d007      	beq.n	800454a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 0208 	bic.w	r2, r2, #8
 8004548:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800454e:	223f      	movs	r2, #63	@ 0x3f
 8004550:	409a      	lsls	r2, r3
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800456a:	2b00      	cmp	r3, #0
 800456c:	d07e      	beq.n	800466c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	4798      	blx	r3
        }
        return;
 8004576:	e079      	b.n	800466c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d01d      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10d      	bne.n	80045b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004598:	2b00      	cmp	r3, #0
 800459a:	d031      	beq.n	8004600 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	4798      	blx	r3
 80045a4:	e02c      	b.n	8004600 <HAL_DMA_IRQHandler+0x2a0>
 80045a6:	bf00      	nop
 80045a8:	2000001c 	.word	0x2000001c
 80045ac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d023      	beq.n	8004600 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	4798      	blx	r3
 80045c0:	e01e      	b.n	8004600 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d10f      	bne.n	80045f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0210 	bic.w	r2, r2, #16
 80045de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d003      	beq.n	8004600 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004604:	2b00      	cmp	r3, #0
 8004606:	d032      	beq.n	800466e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b00      	cmp	r3, #0
 8004612:	d022      	beq.n	800465a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2205      	movs	r2, #5
 8004618:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f022 0201 	bic.w	r2, r2, #1
 800462a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	3301      	adds	r3, #1
 8004630:	60bb      	str	r3, [r7, #8]
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	429a      	cmp	r2, r3
 8004636:	d307      	bcc.n	8004648 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1f2      	bne.n	800462c <HAL_DMA_IRQHandler+0x2cc>
 8004646:	e000      	b.n	800464a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004648:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800465e:	2b00      	cmp	r3, #0
 8004660:	d005      	beq.n	800466e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	4798      	blx	r3
 800466a:	e000      	b.n	800466e <HAL_DMA_IRQHandler+0x30e>
        return;
 800466c:	bf00      	nop
    }
  }
}
 800466e:	3718      	adds	r7, #24
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
 8004680:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004690:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	2b40      	cmp	r3, #64	@ 0x40
 80046a0:	d108      	bne.n	80046b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80046b2:	e007      	b.n	80046c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68ba      	ldr	r2, [r7, #8]
 80046ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	60da      	str	r2, [r3, #12]
}
 80046c4:	bf00      	nop
 80046c6:	3714      	adds	r7, #20
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	3b10      	subs	r3, #16
 80046e0:	4a14      	ldr	r2, [pc, #80]	@ (8004734 <DMA_CalcBaseAndBitshift+0x64>)
 80046e2:	fba2 2303 	umull	r2, r3, r2, r3
 80046e6:	091b      	lsrs	r3, r3, #4
 80046e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80046ea:	4a13      	ldr	r2, [pc, #76]	@ (8004738 <DMA_CalcBaseAndBitshift+0x68>)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	4413      	add	r3, r2
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	461a      	mov	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2b03      	cmp	r3, #3
 80046fc:	d909      	bls.n	8004712 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004706:	f023 0303 	bic.w	r3, r3, #3
 800470a:	1d1a      	adds	r2, r3, #4
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004710:	e007      	b.n	8004722 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800471a:	f023 0303 	bic.w	r3, r3, #3
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004726:	4618      	mov	r0, r3
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	aaaaaaab 	.word	0xaaaaaaab
 8004738:	0800961c 	.word	0x0800961c

0800473c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004744:	2300      	movs	r3, #0
 8004746:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800474c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d11f      	bne.n	8004796 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	2b03      	cmp	r3, #3
 800475a:	d856      	bhi.n	800480a <DMA_CheckFifoParam+0xce>
 800475c:	a201      	add	r2, pc, #4	@ (adr r2, 8004764 <DMA_CheckFifoParam+0x28>)
 800475e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004762:	bf00      	nop
 8004764:	08004775 	.word	0x08004775
 8004768:	08004787 	.word	0x08004787
 800476c:	08004775 	.word	0x08004775
 8004770:	0800480b 	.word	0x0800480b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004778:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d046      	beq.n	800480e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004784:	e043      	b.n	800480e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800478a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800478e:	d140      	bne.n	8004812 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004794:	e03d      	b.n	8004812 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800479e:	d121      	bne.n	80047e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	2b03      	cmp	r3, #3
 80047a4:	d837      	bhi.n	8004816 <DMA_CheckFifoParam+0xda>
 80047a6:	a201      	add	r2, pc, #4	@ (adr r2, 80047ac <DMA_CheckFifoParam+0x70>)
 80047a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ac:	080047bd 	.word	0x080047bd
 80047b0:	080047c3 	.word	0x080047c3
 80047b4:	080047bd 	.word	0x080047bd
 80047b8:	080047d5 	.word	0x080047d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	73fb      	strb	r3, [r7, #15]
      break;
 80047c0:	e030      	b.n	8004824 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d025      	beq.n	800481a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047d2:	e022      	b.n	800481a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80047dc:	d11f      	bne.n	800481e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80047e2:	e01c      	b.n	800481e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d903      	bls.n	80047f2 <DMA_CheckFifoParam+0xb6>
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	2b03      	cmp	r3, #3
 80047ee:	d003      	beq.n	80047f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80047f0:	e018      	b.n	8004824 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	73fb      	strb	r3, [r7, #15]
      break;
 80047f6:	e015      	b.n	8004824 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00e      	beq.n	8004822 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	73fb      	strb	r3, [r7, #15]
      break;
 8004808:	e00b      	b.n	8004822 <DMA_CheckFifoParam+0xe6>
      break;
 800480a:	bf00      	nop
 800480c:	e00a      	b.n	8004824 <DMA_CheckFifoParam+0xe8>
      break;
 800480e:	bf00      	nop
 8004810:	e008      	b.n	8004824 <DMA_CheckFifoParam+0xe8>
      break;
 8004812:	bf00      	nop
 8004814:	e006      	b.n	8004824 <DMA_CheckFifoParam+0xe8>
      break;
 8004816:	bf00      	nop
 8004818:	e004      	b.n	8004824 <DMA_CheckFifoParam+0xe8>
      break;
 800481a:	bf00      	nop
 800481c:	e002      	b.n	8004824 <DMA_CheckFifoParam+0xe8>
      break;   
 800481e:	bf00      	nop
 8004820:	e000      	b.n	8004824 <DMA_CheckFifoParam+0xe8>
      break;
 8004822:	bf00      	nop
    }
  } 
  
  return status; 
 8004824:	7bfb      	ldrb	r3, [r7, #15]
}
 8004826:	4618      	mov	r0, r3
 8004828:	3714      	adds	r7, #20
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop

08004834 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004834:	b480      	push	{r7}
 8004836:	b089      	sub	sp, #36	@ 0x24
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800483e:	2300      	movs	r3, #0
 8004840:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004842:	2300      	movs	r3, #0
 8004844:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004846:	2300      	movs	r3, #0
 8004848:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800484a:	2300      	movs	r3, #0
 800484c:	61fb      	str	r3, [r7, #28]
 800484e:	e177      	b.n	8004b40 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004850:	2201      	movs	r2, #1
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	fa02 f303 	lsl.w	r3, r2, r3
 8004858:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	4013      	ands	r3, r2
 8004862:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	429a      	cmp	r2, r3
 800486a:	f040 8166 	bne.w	8004b3a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f003 0303 	and.w	r3, r3, #3
 8004876:	2b01      	cmp	r3, #1
 8004878:	d005      	beq.n	8004886 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004882:	2b02      	cmp	r3, #2
 8004884:	d130      	bne.n	80048e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	005b      	lsls	r3, r3, #1
 8004890:	2203      	movs	r2, #3
 8004892:	fa02 f303 	lsl.w	r3, r2, r3
 8004896:	43db      	mvns	r3, r3
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	4013      	ands	r3, r2
 800489c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	68da      	ldr	r2, [r3, #12]
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	fa02 f303 	lsl.w	r3, r2, r3
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048bc:	2201      	movs	r2, #1
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	fa02 f303 	lsl.w	r3, r2, r3
 80048c4:	43db      	mvns	r3, r3
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	4013      	ands	r3, r2
 80048ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	091b      	lsrs	r3, r3, #4
 80048d2:	f003 0201 	and.w	r2, r3, #1
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	fa02 f303 	lsl.w	r3, r2, r3
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	4313      	orrs	r3, r2
 80048e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f003 0303 	and.w	r3, r3, #3
 80048f0:	2b03      	cmp	r3, #3
 80048f2:	d017      	beq.n	8004924 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	2203      	movs	r2, #3
 8004900:	fa02 f303 	lsl.w	r3, r2, r3
 8004904:	43db      	mvns	r3, r3
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	4013      	ands	r3, r2
 800490a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	005b      	lsls	r3, r3, #1
 8004914:	fa02 f303 	lsl.w	r3, r2, r3
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	4313      	orrs	r3, r2
 800491c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f003 0303 	and.w	r3, r3, #3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d123      	bne.n	8004978 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	08da      	lsrs	r2, r3, #3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	3208      	adds	r2, #8
 8004938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800493c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	f003 0307 	and.w	r3, r3, #7
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	220f      	movs	r2, #15
 8004948:	fa02 f303 	lsl.w	r3, r2, r3
 800494c:	43db      	mvns	r3, r3
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	4013      	ands	r3, r2
 8004952:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	691a      	ldr	r2, [r3, #16]
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	f003 0307 	and.w	r3, r3, #7
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	fa02 f303 	lsl.w	r3, r2, r3
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	4313      	orrs	r3, r2
 8004968:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	08da      	lsrs	r2, r3, #3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	3208      	adds	r2, #8
 8004972:	69b9      	ldr	r1, [r7, #24]
 8004974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	005b      	lsls	r3, r3, #1
 8004982:	2203      	movs	r2, #3
 8004984:	fa02 f303 	lsl.w	r3, r2, r3
 8004988:	43db      	mvns	r3, r3
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	4013      	ands	r3, r2
 800498e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f003 0203 	and.w	r2, r3, #3
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	005b      	lsls	r3, r3, #1
 800499c:	fa02 f303 	lsl.w	r3, r2, r3
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 80c0 	beq.w	8004b3a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049ba:	2300      	movs	r3, #0
 80049bc:	60fb      	str	r3, [r7, #12]
 80049be:	4b66      	ldr	r3, [pc, #408]	@ (8004b58 <HAL_GPIO_Init+0x324>)
 80049c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049c2:	4a65      	ldr	r2, [pc, #404]	@ (8004b58 <HAL_GPIO_Init+0x324>)
 80049c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80049c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80049ca:	4b63      	ldr	r3, [pc, #396]	@ (8004b58 <HAL_GPIO_Init+0x324>)
 80049cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049d2:	60fb      	str	r3, [r7, #12]
 80049d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049d6:	4a61      	ldr	r2, [pc, #388]	@ (8004b5c <HAL_GPIO_Init+0x328>)
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	089b      	lsrs	r3, r3, #2
 80049dc:	3302      	adds	r3, #2
 80049de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	f003 0303 	and.w	r3, r3, #3
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	220f      	movs	r2, #15
 80049ee:	fa02 f303 	lsl.w	r3, r2, r3
 80049f2:	43db      	mvns	r3, r3
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	4013      	ands	r3, r2
 80049f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a58      	ldr	r2, [pc, #352]	@ (8004b60 <HAL_GPIO_Init+0x32c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d037      	beq.n	8004a72 <HAL_GPIO_Init+0x23e>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a57      	ldr	r2, [pc, #348]	@ (8004b64 <HAL_GPIO_Init+0x330>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d031      	beq.n	8004a6e <HAL_GPIO_Init+0x23a>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a56      	ldr	r2, [pc, #344]	@ (8004b68 <HAL_GPIO_Init+0x334>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d02b      	beq.n	8004a6a <HAL_GPIO_Init+0x236>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a55      	ldr	r2, [pc, #340]	@ (8004b6c <HAL_GPIO_Init+0x338>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d025      	beq.n	8004a66 <HAL_GPIO_Init+0x232>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a54      	ldr	r2, [pc, #336]	@ (8004b70 <HAL_GPIO_Init+0x33c>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d01f      	beq.n	8004a62 <HAL_GPIO_Init+0x22e>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a53      	ldr	r2, [pc, #332]	@ (8004b74 <HAL_GPIO_Init+0x340>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d019      	beq.n	8004a5e <HAL_GPIO_Init+0x22a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a52      	ldr	r2, [pc, #328]	@ (8004b78 <HAL_GPIO_Init+0x344>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d013      	beq.n	8004a5a <HAL_GPIO_Init+0x226>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a51      	ldr	r2, [pc, #324]	@ (8004b7c <HAL_GPIO_Init+0x348>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d00d      	beq.n	8004a56 <HAL_GPIO_Init+0x222>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a50      	ldr	r2, [pc, #320]	@ (8004b80 <HAL_GPIO_Init+0x34c>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d007      	beq.n	8004a52 <HAL_GPIO_Init+0x21e>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a4f      	ldr	r2, [pc, #316]	@ (8004b84 <HAL_GPIO_Init+0x350>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d101      	bne.n	8004a4e <HAL_GPIO_Init+0x21a>
 8004a4a:	2309      	movs	r3, #9
 8004a4c:	e012      	b.n	8004a74 <HAL_GPIO_Init+0x240>
 8004a4e:	230a      	movs	r3, #10
 8004a50:	e010      	b.n	8004a74 <HAL_GPIO_Init+0x240>
 8004a52:	2308      	movs	r3, #8
 8004a54:	e00e      	b.n	8004a74 <HAL_GPIO_Init+0x240>
 8004a56:	2307      	movs	r3, #7
 8004a58:	e00c      	b.n	8004a74 <HAL_GPIO_Init+0x240>
 8004a5a:	2306      	movs	r3, #6
 8004a5c:	e00a      	b.n	8004a74 <HAL_GPIO_Init+0x240>
 8004a5e:	2305      	movs	r3, #5
 8004a60:	e008      	b.n	8004a74 <HAL_GPIO_Init+0x240>
 8004a62:	2304      	movs	r3, #4
 8004a64:	e006      	b.n	8004a74 <HAL_GPIO_Init+0x240>
 8004a66:	2303      	movs	r3, #3
 8004a68:	e004      	b.n	8004a74 <HAL_GPIO_Init+0x240>
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	e002      	b.n	8004a74 <HAL_GPIO_Init+0x240>
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e000      	b.n	8004a74 <HAL_GPIO_Init+0x240>
 8004a72:	2300      	movs	r3, #0
 8004a74:	69fa      	ldr	r2, [r7, #28]
 8004a76:	f002 0203 	and.w	r2, r2, #3
 8004a7a:	0092      	lsls	r2, r2, #2
 8004a7c:	4093      	lsls	r3, r2
 8004a7e:	69ba      	ldr	r2, [r7, #24]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a84:	4935      	ldr	r1, [pc, #212]	@ (8004b5c <HAL_GPIO_Init+0x328>)
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	089b      	lsrs	r3, r3, #2
 8004a8a:	3302      	adds	r3, #2
 8004a8c:	69ba      	ldr	r2, [r7, #24]
 8004a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a92:	4b3d      	ldr	r3, [pc, #244]	@ (8004b88 <HAL_GPIO_Init+0x354>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	43db      	mvns	r3, r3
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004aae:	69ba      	ldr	r2, [r7, #24]
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ab6:	4a34      	ldr	r2, [pc, #208]	@ (8004b88 <HAL_GPIO_Init+0x354>)
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004abc:	4b32      	ldr	r3, [pc, #200]	@ (8004b88 <HAL_GPIO_Init+0x354>)
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	43db      	mvns	r3, r3
 8004ac6:	69ba      	ldr	r2, [r7, #24]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d003      	beq.n	8004ae0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ae0:	4a29      	ldr	r2, [pc, #164]	@ (8004b88 <HAL_GPIO_Init+0x354>)
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004ae6:	4b28      	ldr	r3, [pc, #160]	@ (8004b88 <HAL_GPIO_Init+0x354>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	43db      	mvns	r3, r3
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	4013      	ands	r3, r2
 8004af4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004b02:	69ba      	ldr	r2, [r7, #24]
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b0a:	4a1f      	ldr	r2, [pc, #124]	@ (8004b88 <HAL_GPIO_Init+0x354>)
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b10:	4b1d      	ldr	r3, [pc, #116]	@ (8004b88 <HAL_GPIO_Init+0x354>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	43db      	mvns	r3, r3
 8004b1a:	69ba      	ldr	r2, [r7, #24]
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d003      	beq.n	8004b34 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b34:	4a14      	ldr	r2, [pc, #80]	@ (8004b88 <HAL_GPIO_Init+0x354>)
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	61fb      	str	r3, [r7, #28]
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	2b0f      	cmp	r3, #15
 8004b44:	f67f ae84 	bls.w	8004850 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b48:	bf00      	nop
 8004b4a:	bf00      	nop
 8004b4c:	3724      	adds	r7, #36	@ 0x24
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	40023800 	.word	0x40023800
 8004b5c:	40013800 	.word	0x40013800
 8004b60:	40020000 	.word	0x40020000
 8004b64:	40020400 	.word	0x40020400
 8004b68:	40020800 	.word	0x40020800
 8004b6c:	40020c00 	.word	0x40020c00
 8004b70:	40021000 	.word	0x40021000
 8004b74:	40021400 	.word	0x40021400
 8004b78:	40021800 	.word	0x40021800
 8004b7c:	40021c00 	.word	0x40021c00
 8004b80:	40022000 	.word	0x40022000
 8004b84:	40022400 	.word	0x40022400
 8004b88:	40013c00 	.word	0x40013c00

08004b8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	460b      	mov	r3, r1
 8004b96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	691a      	ldr	r2, [r3, #16]
 8004b9c:	887b      	ldrh	r3, [r7, #2]
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d002      	beq.n	8004baa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	73fb      	strb	r3, [r7, #15]
 8004ba8:	e001      	b.n	8004bae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004baa:	2300      	movs	r3, #0
 8004bac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	807b      	strh	r3, [r7, #2]
 8004bc8:	4613      	mov	r3, r2
 8004bca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004bcc:	787b      	ldrb	r3, [r7, #1]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bd2:	887a      	ldrh	r2, [r7, #2]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004bd8:	e003      	b.n	8004be2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004bda:	887b      	ldrh	r3, [r7, #2]
 8004bdc:	041a      	lsls	r2, r3, #16
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	619a      	str	r2, [r3, #24]
}
 8004be2:	bf00      	nop
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr

08004bee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	b085      	sub	sp, #20
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c00:	887a      	ldrh	r2, [r7, #2]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	4013      	ands	r3, r2
 8004c06:	041a      	lsls	r2, r3, #16
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	43d9      	mvns	r1, r3
 8004c0c:	887b      	ldrh	r3, [r7, #2]
 8004c0e:	400b      	ands	r3, r1
 8004c10:	431a      	orrs	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	619a      	str	r2, [r3, #24]
}
 8004c16:	bf00      	nop
 8004c18:	3714      	adds	r7, #20
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
	...

08004c24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004c2e:	4b08      	ldr	r3, [pc, #32]	@ (8004c50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c30:	695a      	ldr	r2, [r3, #20]
 8004c32:	88fb      	ldrh	r3, [r7, #6]
 8004c34:	4013      	ands	r3, r2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d006      	beq.n	8004c48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c3a:	4a05      	ldr	r2, [pc, #20]	@ (8004c50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c3c:	88fb      	ldrh	r3, [r7, #6]
 8004c3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c40:	88fb      	ldrh	r3, [r7, #6]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7fe f8fc 	bl	8002e40 <HAL_GPIO_EXTI_Callback>
  }
}
 8004c48:	bf00      	nop
 8004c4a:	3708      	adds	r7, #8
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	40013c00 	.word	0x40013c00

08004c54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e12b      	b.n	8004ebe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d106      	bne.n	8004c80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7fd fde4 	bl	8002848 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2224      	movs	r2, #36	@ 0x24
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f022 0201 	bic.w	r2, r2, #1
 8004c96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ca6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004cb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004cb8:	f001 fc9a 	bl	80065f0 <HAL_RCC_GetPCLK1Freq>
 8004cbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	4a81      	ldr	r2, [pc, #516]	@ (8004ec8 <HAL_I2C_Init+0x274>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d807      	bhi.n	8004cd8 <HAL_I2C_Init+0x84>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	4a80      	ldr	r2, [pc, #512]	@ (8004ecc <HAL_I2C_Init+0x278>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	bf94      	ite	ls
 8004cd0:	2301      	movls	r3, #1
 8004cd2:	2300      	movhi	r3, #0
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	e006      	b.n	8004ce6 <HAL_I2C_Init+0x92>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	4a7d      	ldr	r2, [pc, #500]	@ (8004ed0 <HAL_I2C_Init+0x27c>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	bf94      	ite	ls
 8004ce0:	2301      	movls	r3, #1
 8004ce2:	2300      	movhi	r3, #0
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d001      	beq.n	8004cee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e0e7      	b.n	8004ebe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	4a78      	ldr	r2, [pc, #480]	@ (8004ed4 <HAL_I2C_Init+0x280>)
 8004cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf6:	0c9b      	lsrs	r3, r3, #18
 8004cf8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68ba      	ldr	r2, [r7, #8]
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	4a6a      	ldr	r2, [pc, #424]	@ (8004ec8 <HAL_I2C_Init+0x274>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d802      	bhi.n	8004d28 <HAL_I2C_Init+0xd4>
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	3301      	adds	r3, #1
 8004d26:	e009      	b.n	8004d3c <HAL_I2C_Init+0xe8>
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004d2e:	fb02 f303 	mul.w	r3, r2, r3
 8004d32:	4a69      	ldr	r2, [pc, #420]	@ (8004ed8 <HAL_I2C_Init+0x284>)
 8004d34:	fba2 2303 	umull	r2, r3, r2, r3
 8004d38:	099b      	lsrs	r3, r3, #6
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	6812      	ldr	r2, [r2, #0]
 8004d40:	430b      	orrs	r3, r1
 8004d42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004d4e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	495c      	ldr	r1, [pc, #368]	@ (8004ec8 <HAL_I2C_Init+0x274>)
 8004d58:	428b      	cmp	r3, r1
 8004d5a:	d819      	bhi.n	8004d90 <HAL_I2C_Init+0x13c>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	1e59      	subs	r1, r3, #1
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	005b      	lsls	r3, r3, #1
 8004d66:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d6a:	1c59      	adds	r1, r3, #1
 8004d6c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004d70:	400b      	ands	r3, r1
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00a      	beq.n	8004d8c <HAL_I2C_Init+0x138>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	1e59      	subs	r1, r3, #1
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	005b      	lsls	r3, r3, #1
 8004d80:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d84:	3301      	adds	r3, #1
 8004d86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d8a:	e051      	b.n	8004e30 <HAL_I2C_Init+0x1dc>
 8004d8c:	2304      	movs	r3, #4
 8004d8e:	e04f      	b.n	8004e30 <HAL_I2C_Init+0x1dc>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d111      	bne.n	8004dbc <HAL_I2C_Init+0x168>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	1e58      	subs	r0, r3, #1
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6859      	ldr	r1, [r3, #4]
 8004da0:	460b      	mov	r3, r1
 8004da2:	005b      	lsls	r3, r3, #1
 8004da4:	440b      	add	r3, r1
 8004da6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004daa:	3301      	adds	r3, #1
 8004dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	bf0c      	ite	eq
 8004db4:	2301      	moveq	r3, #1
 8004db6:	2300      	movne	r3, #0
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	e012      	b.n	8004de2 <HAL_I2C_Init+0x18e>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	1e58      	subs	r0, r3, #1
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6859      	ldr	r1, [r3, #4]
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	440b      	add	r3, r1
 8004dca:	0099      	lsls	r1, r3, #2
 8004dcc:	440b      	add	r3, r1
 8004dce:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	bf0c      	ite	eq
 8004ddc:	2301      	moveq	r3, #1
 8004dde:	2300      	movne	r3, #0
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <HAL_I2C_Init+0x196>
 8004de6:	2301      	movs	r3, #1
 8004de8:	e022      	b.n	8004e30 <HAL_I2C_Init+0x1dc>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10e      	bne.n	8004e10 <HAL_I2C_Init+0x1bc>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	1e58      	subs	r0, r3, #1
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6859      	ldr	r1, [r3, #4]
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	440b      	add	r3, r1
 8004e00:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e04:	3301      	adds	r3, #1
 8004e06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e0e:	e00f      	b.n	8004e30 <HAL_I2C_Init+0x1dc>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	1e58      	subs	r0, r3, #1
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6859      	ldr	r1, [r3, #4]
 8004e18:	460b      	mov	r3, r1
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	440b      	add	r3, r1
 8004e1e:	0099      	lsls	r1, r3, #2
 8004e20:	440b      	add	r3, r1
 8004e22:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e26:	3301      	adds	r3, #1
 8004e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e2c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e30:	6879      	ldr	r1, [r7, #4]
 8004e32:	6809      	ldr	r1, [r1, #0]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	69da      	ldr	r2, [r3, #28]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	430a      	orrs	r2, r1
 8004e52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004e5e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	6911      	ldr	r1, [r2, #16]
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	68d2      	ldr	r2, [r2, #12]
 8004e6a:	4311      	orrs	r1, r2
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	6812      	ldr	r2, [r2, #0]
 8004e70:	430b      	orrs	r3, r1
 8004e72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	695a      	ldr	r2, [r3, #20]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	431a      	orrs	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f042 0201 	orr.w	r2, r2, #1
 8004e9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	000186a0 	.word	0x000186a0
 8004ecc:	001e847f 	.word	0x001e847f
 8004ed0:	003d08ff 	.word	0x003d08ff
 8004ed4:	431bde83 	.word	0x431bde83
 8004ed8:	10624dd3 	.word	0x10624dd3

08004edc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b088      	sub	sp, #32
 8004ee0:	af02      	add	r7, sp, #8
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	607a      	str	r2, [r7, #4]
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	460b      	mov	r3, r1
 8004eea:	817b      	strh	r3, [r7, #10]
 8004eec:	4613      	mov	r3, r2
 8004eee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ef0:	f7fe f8f4 	bl	80030dc <HAL_GetTick>
 8004ef4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b20      	cmp	r3, #32
 8004f00:	f040 80e0 	bne.w	80050c4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	9300      	str	r3, [sp, #0]
 8004f08:	2319      	movs	r3, #25
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	4970      	ldr	r1, [pc, #448]	@ (80050d0 <HAL_I2C_Master_Transmit+0x1f4>)
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f000 fc64 	bl	80057dc <I2C_WaitOnFlagUntilTimeout>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	e0d3      	b.n	80050c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d101      	bne.n	8004f2c <HAL_I2C_Master_Transmit+0x50>
 8004f28:	2302      	movs	r3, #2
 8004f2a:	e0cc      	b.n	80050c6 <HAL_I2C_Master_Transmit+0x1ea>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d007      	beq.n	8004f52 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f042 0201 	orr.w	r2, r2, #1
 8004f50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f60:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2221      	movs	r2, #33	@ 0x21
 8004f66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2210      	movs	r2, #16
 8004f6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	893a      	ldrh	r2, [r7, #8]
 8004f82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	4a50      	ldr	r2, [pc, #320]	@ (80050d4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004f92:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004f94:	8979      	ldrh	r1, [r7, #10]
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	6a3a      	ldr	r2, [r7, #32]
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f000 face 	bl	800553c <I2C_MasterRequestWrite>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d001      	beq.n	8004faa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e08d      	b.n	80050c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004faa:	2300      	movs	r3, #0
 8004fac:	613b      	str	r3, [r7, #16]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	695b      	ldr	r3, [r3, #20]
 8004fb4:	613b      	str	r3, [r7, #16]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	613b      	str	r3, [r7, #16]
 8004fbe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004fc0:	e066      	b.n	8005090 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	6a39      	ldr	r1, [r7, #32]
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	f000 fd22 	bl	8005a10 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00d      	beq.n	8004fee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd6:	2b04      	cmp	r3, #4
 8004fd8:	d107      	bne.n	8004fea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fe8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e06b      	b.n	80050c6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff2:	781a      	ldrb	r2, [r3, #0]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffe:	1c5a      	adds	r2, r3, #1
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005008:	b29b      	uxth	r3, r3
 800500a:	3b01      	subs	r3, #1
 800500c:	b29a      	uxth	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005016:	3b01      	subs	r3, #1
 8005018:	b29a      	uxth	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	695b      	ldr	r3, [r3, #20]
 8005024:	f003 0304 	and.w	r3, r3, #4
 8005028:	2b04      	cmp	r3, #4
 800502a:	d11b      	bne.n	8005064 <HAL_I2C_Master_Transmit+0x188>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005030:	2b00      	cmp	r3, #0
 8005032:	d017      	beq.n	8005064 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005038:	781a      	ldrb	r2, [r3, #0]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005044:	1c5a      	adds	r2, r3, #1
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800504e:	b29b      	uxth	r3, r3
 8005050:	3b01      	subs	r3, #1
 8005052:	b29a      	uxth	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800505c:	3b01      	subs	r3, #1
 800505e:	b29a      	uxth	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	6a39      	ldr	r1, [r7, #32]
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f000 fd19 	bl	8005aa0 <I2C_WaitOnBTFFlagUntilTimeout>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00d      	beq.n	8005090 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005078:	2b04      	cmp	r3, #4
 800507a:	d107      	bne.n	800508c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800508a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e01a      	b.n	80050c6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005094:	2b00      	cmp	r3, #0
 8005096:	d194      	bne.n	8004fc2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2220      	movs	r2, #32
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80050c0:	2300      	movs	r3, #0
 80050c2:	e000      	b.n	80050c6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80050c4:	2302      	movs	r3, #2
  }
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3718      	adds	r7, #24
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	00100002 	.word	0x00100002
 80050d4:	ffff0000 	.word	0xffff0000

080050d8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b08c      	sub	sp, #48	@ 0x30
 80050dc:	af02      	add	r7, sp, #8
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	607a      	str	r2, [r7, #4]
 80050e2:	461a      	mov	r2, r3
 80050e4:	460b      	mov	r3, r1
 80050e6:	817b      	strh	r3, [r7, #10]
 80050e8:	4613      	mov	r3, r2
 80050ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050ec:	f7fd fff6 	bl	80030dc <HAL_GetTick>
 80050f0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b20      	cmp	r3, #32
 80050fc:	f040 8217 	bne.w	800552e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005102:	9300      	str	r3, [sp, #0]
 8005104:	2319      	movs	r3, #25
 8005106:	2201      	movs	r2, #1
 8005108:	497c      	ldr	r1, [pc, #496]	@ (80052fc <HAL_I2C_Master_Receive+0x224>)
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f000 fb66 	bl	80057dc <I2C_WaitOnFlagUntilTimeout>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d001      	beq.n	800511a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005116:	2302      	movs	r3, #2
 8005118:	e20a      	b.n	8005530 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005120:	2b01      	cmp	r3, #1
 8005122:	d101      	bne.n	8005128 <HAL_I2C_Master_Receive+0x50>
 8005124:	2302      	movs	r3, #2
 8005126:	e203      	b.n	8005530 <HAL_I2C_Master_Receive+0x458>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b01      	cmp	r3, #1
 800513c:	d007      	beq.n	800514e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f042 0201 	orr.w	r2, r2, #1
 800514c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800515c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2222      	movs	r2, #34	@ 0x22
 8005162:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2210      	movs	r2, #16
 800516a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	893a      	ldrh	r2, [r7, #8]
 800517e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005184:	b29a      	uxth	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	4a5c      	ldr	r2, [pc, #368]	@ (8005300 <HAL_I2C_Master_Receive+0x228>)
 800518e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005190:	8979      	ldrh	r1, [r7, #10]
 8005192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005194:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f000 fa52 	bl	8005640 <I2C_MasterRequestRead>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d001      	beq.n	80051a6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e1c4      	b.n	8005530 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d113      	bne.n	80051d6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051ae:	2300      	movs	r3, #0
 80051b0:	623b      	str	r3, [r7, #32]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	623b      	str	r3, [r7, #32]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	623b      	str	r3, [r7, #32]
 80051c2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051d2:	601a      	str	r2, [r3, #0]
 80051d4:	e198      	b.n	8005508 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d11b      	bne.n	8005216 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051ee:	2300      	movs	r3, #0
 80051f0:	61fb      	str	r3, [r7, #28]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	695b      	ldr	r3, [r3, #20]
 80051f8:	61fb      	str	r3, [r7, #28]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	61fb      	str	r3, [r7, #28]
 8005202:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005212:	601a      	str	r2, [r3, #0]
 8005214:	e178      	b.n	8005508 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800521a:	2b02      	cmp	r3, #2
 800521c:	d11b      	bne.n	8005256 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800522c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800523c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800523e:	2300      	movs	r3, #0
 8005240:	61bb      	str	r3, [r7, #24]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	695b      	ldr	r3, [r3, #20]
 8005248:	61bb      	str	r3, [r7, #24]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	61bb      	str	r3, [r7, #24]
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	e158      	b.n	8005508 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005264:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005266:	2300      	movs	r3, #0
 8005268:	617b      	str	r3, [r7, #20]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	617b      	str	r3, [r7, #20]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	617b      	str	r3, [r7, #20]
 800527a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800527c:	e144      	b.n	8005508 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005282:	2b03      	cmp	r3, #3
 8005284:	f200 80f1 	bhi.w	800546a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800528c:	2b01      	cmp	r3, #1
 800528e:	d123      	bne.n	80052d8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005290:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005292:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f000 fc4b 	bl	8005b30 <I2C_WaitOnRXNEFlagUntilTimeout>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d001      	beq.n	80052a4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e145      	b.n	8005530 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	691a      	ldr	r2, [r3, #16]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b6:	1c5a      	adds	r2, r3, #1
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052c0:	3b01      	subs	r3, #1
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	3b01      	subs	r3, #1
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80052d6:	e117      	b.n	8005508 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d14e      	bne.n	800537e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e6:	2200      	movs	r2, #0
 80052e8:	4906      	ldr	r1, [pc, #24]	@ (8005304 <HAL_I2C_Master_Receive+0x22c>)
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f000 fa76 	bl	80057dc <I2C_WaitOnFlagUntilTimeout>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d008      	beq.n	8005308 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e11a      	b.n	8005530 <HAL_I2C_Master_Receive+0x458>
 80052fa:	bf00      	nop
 80052fc:	00100002 	.word	0x00100002
 8005300:	ffff0000 	.word	0xffff0000
 8005304:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005316:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	691a      	ldr	r2, [r3, #16]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005322:	b2d2      	uxtb	r2, r2
 8005324:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800532a:	1c5a      	adds	r2, r3, #1
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005334:	3b01      	subs	r3, #1
 8005336:	b29a      	uxth	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005340:	b29b      	uxth	r3, r3
 8005342:	3b01      	subs	r3, #1
 8005344:	b29a      	uxth	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	691a      	ldr	r2, [r3, #16]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005354:	b2d2      	uxtb	r2, r2
 8005356:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800535c:	1c5a      	adds	r2, r3, #1
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005366:	3b01      	subs	r3, #1
 8005368:	b29a      	uxth	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005372:	b29b      	uxth	r3, r3
 8005374:	3b01      	subs	r3, #1
 8005376:	b29a      	uxth	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800537c:	e0c4      	b.n	8005508 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800537e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005380:	9300      	str	r3, [sp, #0]
 8005382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005384:	2200      	movs	r2, #0
 8005386:	496c      	ldr	r1, [pc, #432]	@ (8005538 <HAL_I2C_Master_Receive+0x460>)
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f000 fa27 	bl	80057dc <I2C_WaitOnFlagUntilTimeout>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d001      	beq.n	8005398 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e0cb      	b.n	8005530 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	691a      	ldr	r2, [r3, #16]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b2:	b2d2      	uxtb	r2, r2
 80053b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ba:	1c5a      	adds	r2, r3, #1
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053c4:	3b01      	subs	r3, #1
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	3b01      	subs	r3, #1
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e0:	2200      	movs	r2, #0
 80053e2:	4955      	ldr	r1, [pc, #340]	@ (8005538 <HAL_I2C_Master_Receive+0x460>)
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f000 f9f9 	bl	80057dc <I2C_WaitOnFlagUntilTimeout>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d001      	beq.n	80053f4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e09d      	b.n	8005530 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005402:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	691a      	ldr	r2, [r3, #16]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800540e:	b2d2      	uxtb	r2, r2
 8005410:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005416:	1c5a      	adds	r2, r3, #1
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005420:	3b01      	subs	r3, #1
 8005422:	b29a      	uxth	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800542c:	b29b      	uxth	r3, r3
 800542e:	3b01      	subs	r3, #1
 8005430:	b29a      	uxth	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	691a      	ldr	r2, [r3, #16]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005440:	b2d2      	uxtb	r2, r2
 8005442:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005448:	1c5a      	adds	r2, r3, #1
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005452:	3b01      	subs	r3, #1
 8005454:	b29a      	uxth	r2, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800545e:	b29b      	uxth	r3, r3
 8005460:	3b01      	subs	r3, #1
 8005462:	b29a      	uxth	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005468:	e04e      	b.n	8005508 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800546a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800546c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f000 fb5e 	bl	8005b30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d001      	beq.n	800547e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e058      	b.n	8005530 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	691a      	ldr	r2, [r3, #16]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005488:	b2d2      	uxtb	r2, r2
 800548a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005490:	1c5a      	adds	r2, r3, #1
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800549a:	3b01      	subs	r3, #1
 800549c:	b29a      	uxth	r2, r3
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	3b01      	subs	r3, #1
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	f003 0304 	and.w	r3, r3, #4
 80054ba:	2b04      	cmp	r3, #4
 80054bc:	d124      	bne.n	8005508 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054c2:	2b03      	cmp	r3, #3
 80054c4:	d107      	bne.n	80054d6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054d4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	691a      	ldr	r2, [r3, #16]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e0:	b2d2      	uxtb	r2, r2
 80054e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e8:	1c5a      	adds	r2, r3, #1
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054f2:	3b01      	subs	r3, #1
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054fe:	b29b      	uxth	r3, r3
 8005500:	3b01      	subs	r3, #1
 8005502:	b29a      	uxth	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800550c:	2b00      	cmp	r3, #0
 800550e:	f47f aeb6 	bne.w	800527e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2220      	movs	r2, #32
 8005516:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800552a:	2300      	movs	r3, #0
 800552c:	e000      	b.n	8005530 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800552e:	2302      	movs	r3, #2
  }
}
 8005530:	4618      	mov	r0, r3
 8005532:	3728      	adds	r7, #40	@ 0x28
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	00010004 	.word	0x00010004

0800553c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b088      	sub	sp, #32
 8005540:	af02      	add	r7, sp, #8
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	607a      	str	r2, [r7, #4]
 8005546:	603b      	str	r3, [r7, #0]
 8005548:	460b      	mov	r3, r1
 800554a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005550:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	2b08      	cmp	r3, #8
 8005556:	d006      	beq.n	8005566 <I2C_MasterRequestWrite+0x2a>
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d003      	beq.n	8005566 <I2C_MasterRequestWrite+0x2a>
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005564:	d108      	bne.n	8005578 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005574:	601a      	str	r2, [r3, #0]
 8005576:	e00b      	b.n	8005590 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800557c:	2b12      	cmp	r3, #18
 800557e:	d107      	bne.n	8005590 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800558e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	9300      	str	r3, [sp, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f000 f91d 	bl	80057dc <I2C_WaitOnFlagUntilTimeout>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00d      	beq.n	80055c4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055b6:	d103      	bne.n	80055c0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055be:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e035      	b.n	8005630 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055cc:	d108      	bne.n	80055e0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055ce:	897b      	ldrh	r3, [r7, #10]
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	461a      	mov	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80055dc:	611a      	str	r2, [r3, #16]
 80055de:	e01b      	b.n	8005618 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80055e0:	897b      	ldrh	r3, [r7, #10]
 80055e2:	11db      	asrs	r3, r3, #7
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	f003 0306 	and.w	r3, r3, #6
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	f063 030f 	orn	r3, r3, #15
 80055f0:	b2da      	uxtb	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	490e      	ldr	r1, [pc, #56]	@ (8005638 <I2C_MasterRequestWrite+0xfc>)
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	f000 f966 	bl	80058d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d001      	beq.n	800560e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e010      	b.n	8005630 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800560e:	897b      	ldrh	r3, [r7, #10]
 8005610:	b2da      	uxtb	r2, r3
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	4907      	ldr	r1, [pc, #28]	@ (800563c <I2C_MasterRequestWrite+0x100>)
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	f000 f956 	bl	80058d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d001      	beq.n	800562e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e000      	b.n	8005630 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3718      	adds	r7, #24
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	00010008 	.word	0x00010008
 800563c:	00010002 	.word	0x00010002

08005640 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b088      	sub	sp, #32
 8005644:	af02      	add	r7, sp, #8
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	607a      	str	r2, [r7, #4]
 800564a:	603b      	str	r3, [r7, #0]
 800564c:	460b      	mov	r3, r1
 800564e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005654:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005664:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	2b08      	cmp	r3, #8
 800566a:	d006      	beq.n	800567a <I2C_MasterRequestRead+0x3a>
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d003      	beq.n	800567a <I2C_MasterRequestRead+0x3a>
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005678:	d108      	bne.n	800568c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005688:	601a      	str	r2, [r3, #0]
 800568a:	e00b      	b.n	80056a4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005690:	2b11      	cmp	r3, #17
 8005692:	d107      	bne.n	80056a4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80056a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	9300      	str	r3, [sp, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f000 f893 	bl	80057dc <I2C_WaitOnFlagUntilTimeout>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00d      	beq.n	80056d8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056ca:	d103      	bne.n	80056d4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e079      	b.n	80057cc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056e0:	d108      	bne.n	80056f4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80056e2:	897b      	ldrh	r3, [r7, #10]
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	f043 0301 	orr.w	r3, r3, #1
 80056ea:	b2da      	uxtb	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	611a      	str	r2, [r3, #16]
 80056f2:	e05f      	b.n	80057b4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80056f4:	897b      	ldrh	r3, [r7, #10]
 80056f6:	11db      	asrs	r3, r3, #7
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	f003 0306 	and.w	r3, r3, #6
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	f063 030f 	orn	r3, r3, #15
 8005704:	b2da      	uxtb	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	4930      	ldr	r1, [pc, #192]	@ (80057d4 <I2C_MasterRequestRead+0x194>)
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f000 f8dc 	bl	80058d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d001      	beq.n	8005722 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e054      	b.n	80057cc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005722:	897b      	ldrh	r3, [r7, #10]
 8005724:	b2da      	uxtb	r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	4929      	ldr	r1, [pc, #164]	@ (80057d8 <I2C_MasterRequestRead+0x198>)
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	f000 f8cc 	bl	80058d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d001      	beq.n	8005742 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e044      	b.n	80057cc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005742:	2300      	movs	r3, #0
 8005744:	613b      	str	r3, [r7, #16]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	695b      	ldr	r3, [r3, #20]
 800574c:	613b      	str	r3, [r7, #16]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	613b      	str	r3, [r7, #16]
 8005756:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005766:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	9300      	str	r3, [sp, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f000 f831 	bl	80057dc <I2C_WaitOnFlagUntilTimeout>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00d      	beq.n	800579c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800578a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800578e:	d103      	bne.n	8005798 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005796:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e017      	b.n	80057cc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800579c:	897b      	ldrh	r3, [r7, #10]
 800579e:	11db      	asrs	r3, r3, #7
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	f003 0306 	and.w	r3, r3, #6
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	f063 030e 	orn	r3, r3, #14
 80057ac:	b2da      	uxtb	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	4907      	ldr	r1, [pc, #28]	@ (80057d8 <I2C_MasterRequestRead+0x198>)
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f000 f888 	bl	80058d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d001      	beq.n	80057ca <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e000      	b.n	80057cc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3718      	adds	r7, #24
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	00010008 	.word	0x00010008
 80057d8:	00010002 	.word	0x00010002

080057dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	603b      	str	r3, [r7, #0]
 80057e8:	4613      	mov	r3, r2
 80057ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057ec:	e048      	b.n	8005880 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80057f4:	d044      	beq.n	8005880 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057f6:	f7fd fc71 	bl	80030dc <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	683a      	ldr	r2, [r7, #0]
 8005802:	429a      	cmp	r2, r3
 8005804:	d302      	bcc.n	800580c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d139      	bne.n	8005880 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	0c1b      	lsrs	r3, r3, #16
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b01      	cmp	r3, #1
 8005814:	d10d      	bne.n	8005832 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	43da      	mvns	r2, r3
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	4013      	ands	r3, r2
 8005822:	b29b      	uxth	r3, r3
 8005824:	2b00      	cmp	r3, #0
 8005826:	bf0c      	ite	eq
 8005828:	2301      	moveq	r3, #1
 800582a:	2300      	movne	r3, #0
 800582c:	b2db      	uxtb	r3, r3
 800582e:	461a      	mov	r2, r3
 8005830:	e00c      	b.n	800584c <I2C_WaitOnFlagUntilTimeout+0x70>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	699b      	ldr	r3, [r3, #24]
 8005838:	43da      	mvns	r2, r3
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	4013      	ands	r3, r2
 800583e:	b29b      	uxth	r3, r3
 8005840:	2b00      	cmp	r3, #0
 8005842:	bf0c      	ite	eq
 8005844:	2301      	moveq	r3, #1
 8005846:	2300      	movne	r3, #0
 8005848:	b2db      	uxtb	r3, r3
 800584a:	461a      	mov	r2, r3
 800584c:	79fb      	ldrb	r3, [r7, #7]
 800584e:	429a      	cmp	r2, r3
 8005850:	d116      	bne.n	8005880 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2220      	movs	r2, #32
 800585c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800586c:	f043 0220 	orr.w	r2, r3, #32
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e023      	b.n	80058c8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	0c1b      	lsrs	r3, r3, #16
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b01      	cmp	r3, #1
 8005888:	d10d      	bne.n	80058a6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	43da      	mvns	r2, r3
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	4013      	ands	r3, r2
 8005896:	b29b      	uxth	r3, r3
 8005898:	2b00      	cmp	r3, #0
 800589a:	bf0c      	ite	eq
 800589c:	2301      	moveq	r3, #1
 800589e:	2300      	movne	r3, #0
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	461a      	mov	r2, r3
 80058a4:	e00c      	b.n	80058c0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	43da      	mvns	r2, r3
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	4013      	ands	r3, r2
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	bf0c      	ite	eq
 80058b8:	2301      	moveq	r3, #1
 80058ba:	2300      	movne	r3, #0
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	461a      	mov	r2, r3
 80058c0:	79fb      	ldrb	r3, [r7, #7]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d093      	beq.n	80057ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
 80058dc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80058de:	e071      	b.n	80059c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058ee:	d123      	bne.n	8005938 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058fe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005908:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2220      	movs	r2, #32
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005924:	f043 0204 	orr.w	r2, r3, #4
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e067      	b.n	8005a08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800593e:	d041      	beq.n	80059c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005940:	f7fd fbcc 	bl	80030dc <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	429a      	cmp	r2, r3
 800594e:	d302      	bcc.n	8005956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d136      	bne.n	80059c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	0c1b      	lsrs	r3, r3, #16
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b01      	cmp	r3, #1
 800595e:	d10c      	bne.n	800597a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	43da      	mvns	r2, r3
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	4013      	ands	r3, r2
 800596c:	b29b      	uxth	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	bf14      	ite	ne
 8005972:	2301      	movne	r3, #1
 8005974:	2300      	moveq	r3, #0
 8005976:	b2db      	uxtb	r3, r3
 8005978:	e00b      	b.n	8005992 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	43da      	mvns	r2, r3
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	4013      	ands	r3, r2
 8005986:	b29b      	uxth	r3, r3
 8005988:	2b00      	cmp	r3, #0
 800598a:	bf14      	ite	ne
 800598c:	2301      	movne	r3, #1
 800598e:	2300      	moveq	r3, #0
 8005990:	b2db      	uxtb	r3, r3
 8005992:	2b00      	cmp	r3, #0
 8005994:	d016      	beq.n	80059c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2220      	movs	r2, #32
 80059a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b0:	f043 0220 	orr.w	r2, r3, #32
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e021      	b.n	8005a08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	0c1b      	lsrs	r3, r3, #16
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d10c      	bne.n	80059e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	43da      	mvns	r2, r3
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	4013      	ands	r3, r2
 80059da:	b29b      	uxth	r3, r3
 80059dc:	2b00      	cmp	r3, #0
 80059de:	bf14      	ite	ne
 80059e0:	2301      	movne	r3, #1
 80059e2:	2300      	moveq	r3, #0
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	e00b      	b.n	8005a00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	43da      	mvns	r2, r3
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	4013      	ands	r3, r2
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	bf14      	ite	ne
 80059fa:	2301      	movne	r3, #1
 80059fc:	2300      	moveq	r3, #0
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f47f af6d 	bne.w	80058e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a1c:	e034      	b.n	8005a88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f000 f8e3 	bl	8005bea <I2C_IsAcknowledgeFailed>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d001      	beq.n	8005a2e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e034      	b.n	8005a98 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a34:	d028      	beq.n	8005a88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a36:	f7fd fb51 	bl	80030dc <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d302      	bcc.n	8005a4c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d11d      	bne.n	8005a88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a56:	2b80      	cmp	r3, #128	@ 0x80
 8005a58:	d016      	beq.n	8005a88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2220      	movs	r2, #32
 8005a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a74:	f043 0220 	orr.w	r2, r3, #32
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e007      	b.n	8005a98 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a92:	2b80      	cmp	r3, #128	@ 0x80
 8005a94:	d1c3      	bne.n	8005a1e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005aac:	e034      	b.n	8005b18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f000 f89b 	bl	8005bea <I2C_IsAcknowledgeFailed>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d001      	beq.n	8005abe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e034      	b.n	8005b28 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ac4:	d028      	beq.n	8005b18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ac6:	f7fd fb09 	bl	80030dc <HAL_GetTick>
 8005aca:	4602      	mov	r2, r0
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	68ba      	ldr	r2, [r7, #8]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d302      	bcc.n	8005adc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d11d      	bne.n	8005b18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	f003 0304 	and.w	r3, r3, #4
 8005ae6:	2b04      	cmp	r3, #4
 8005ae8:	d016      	beq.n	8005b18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2220      	movs	r2, #32
 8005af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b04:	f043 0220 	orr.w	r2, r3, #32
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e007      	b.n	8005b28 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	f003 0304 	and.w	r3, r3, #4
 8005b22:	2b04      	cmp	r3, #4
 8005b24:	d1c3      	bne.n	8005aae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b3c:	e049      	b.n	8005bd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	695b      	ldr	r3, [r3, #20]
 8005b44:	f003 0310 	and.w	r3, r3, #16
 8005b48:	2b10      	cmp	r3, #16
 8005b4a:	d119      	bne.n	8005b80 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f06f 0210 	mvn.w	r2, #16
 8005b54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2220      	movs	r2, #32
 8005b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e030      	b.n	8005be2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b80:	f7fd faac 	bl	80030dc <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d302      	bcc.n	8005b96 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d11d      	bne.n	8005bd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ba0:	2b40      	cmp	r3, #64	@ 0x40
 8005ba2:	d016      	beq.n	8005bd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2220      	movs	r2, #32
 8005bae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bbe:	f043 0220 	orr.w	r2, r3, #32
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e007      	b.n	8005be2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	695b      	ldr	r3, [r3, #20]
 8005bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bdc:	2b40      	cmp	r3, #64	@ 0x40
 8005bde:	d1ae      	bne.n	8005b3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3710      	adds	r7, #16
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b083      	sub	sp, #12
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	695b      	ldr	r3, [r3, #20]
 8005bf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c00:	d11b      	bne.n	8005c3a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005c0a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2220      	movs	r2, #32
 8005c16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c26:	f043 0204 	orr.w	r2, r3, #4
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e000      	b.n	8005c3c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b20      	cmp	r3, #32
 8005c5c:	d129      	bne.n	8005cb2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2224      	movs	r2, #36	@ 0x24
 8005c62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f022 0201 	bic.w	r2, r2, #1
 8005c74:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f022 0210 	bic.w	r2, r2, #16
 8005c84:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	683a      	ldr	r2, [r7, #0]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f042 0201 	orr.w	r2, r2, #1
 8005ca4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2220      	movs	r2, #32
 8005caa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	e000      	b.n	8005cb4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005cb2:	2302      	movs	r3, #2
  }
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	2b20      	cmp	r3, #32
 8005cd8:	d12a      	bne.n	8005d30 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2224      	movs	r2, #36	@ 0x24
 8005cde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f022 0201 	bic.w	r2, r2, #1
 8005cf0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005cfa:	89fb      	ldrh	r3, [r7, #14]
 8005cfc:	f023 030f 	bic.w	r3, r3, #15
 8005d00:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	89fb      	ldrh	r3, [r7, #14]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	89fa      	ldrh	r2, [r7, #14]
 8005d12:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f042 0201 	orr.w	r2, r2, #1
 8005d22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2220      	movs	r2, #32
 8005d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	e000      	b.n	8005d32 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005d30:	2302      	movs	r3, #2
  }
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
	...

08005d40 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005d46:	4b06      	ldr	r3, [pc, #24]	@ (8005d60 <HAL_PWR_EnableBkUpAccess+0x20>)
 8005d48:	2201      	movs	r2, #1
 8005d4a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8005d4c:	4b05      	ldr	r3, [pc, #20]	@ (8005d64 <HAL_PWR_EnableBkUpAccess+0x24>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8005d52:	687b      	ldr	r3, [r7, #4]
}
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr
 8005d60:	420e0020 	.word	0x420e0020
 8005d64:	40007000 	.word	0x40007000

08005d68 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8005d6e:	4b06      	ldr	r3, [pc, #24]	@ (8005d88 <HAL_PWR_DisableBkUpAccess+0x20>)
 8005d70:	2200      	movs	r2, #0
 8005d72:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8005d74:	4b05      	ldr	r3, [pc, #20]	@ (8005d8c <HAL_PWR_DisableBkUpAccess+0x24>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8005d7a:	687b      	ldr	r3, [r7, #4]
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr
 8005d88:	420e0020 	.word	0x420e0020
 8005d8c:	40007000 	.word	0x40007000

08005d90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b086      	sub	sp, #24
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e267      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d075      	beq.n	8005e9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005dae:	4b88      	ldr	r3, [pc, #544]	@ (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f003 030c 	and.w	r3, r3, #12
 8005db6:	2b04      	cmp	r3, #4
 8005db8:	d00c      	beq.n	8005dd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dba:	4b85      	ldr	r3, [pc, #532]	@ (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005dc2:	2b08      	cmp	r3, #8
 8005dc4:	d112      	bne.n	8005dec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dc6:	4b82      	ldr	r3, [pc, #520]	@ (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005dd2:	d10b      	bne.n	8005dec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dd4:	4b7e      	ldr	r3, [pc, #504]	@ (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d05b      	beq.n	8005e98 <HAL_RCC_OscConfig+0x108>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d157      	bne.n	8005e98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e242      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005df4:	d106      	bne.n	8005e04 <HAL_RCC_OscConfig+0x74>
 8005df6:	4b76      	ldr	r3, [pc, #472]	@ (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a75      	ldr	r2, [pc, #468]	@ (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005dfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e00:	6013      	str	r3, [r2, #0]
 8005e02:	e01d      	b.n	8005e40 <HAL_RCC_OscConfig+0xb0>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e0c:	d10c      	bne.n	8005e28 <HAL_RCC_OscConfig+0x98>
 8005e0e:	4b70      	ldr	r3, [pc, #448]	@ (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a6f      	ldr	r2, [pc, #444]	@ (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005e14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e18:	6013      	str	r3, [r2, #0]
 8005e1a:	4b6d      	ldr	r3, [pc, #436]	@ (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a6c      	ldr	r2, [pc, #432]	@ (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005e20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e24:	6013      	str	r3, [r2, #0]
 8005e26:	e00b      	b.n	8005e40 <HAL_RCC_OscConfig+0xb0>
 8005e28:	4b69      	ldr	r3, [pc, #420]	@ (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a68      	ldr	r2, [pc, #416]	@ (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005e2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e32:	6013      	str	r3, [r2, #0]
 8005e34:	4b66      	ldr	r3, [pc, #408]	@ (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a65      	ldr	r2, [pc, #404]	@ (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005e3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d013      	beq.n	8005e70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e48:	f7fd f948 	bl	80030dc <HAL_GetTick>
 8005e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e4e:	e008      	b.n	8005e62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e50:	f7fd f944 	bl	80030dc <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	2b64      	cmp	r3, #100	@ 0x64
 8005e5c:	d901      	bls.n	8005e62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e207      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e62:	4b5b      	ldr	r3, [pc, #364]	@ (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d0f0      	beq.n	8005e50 <HAL_RCC_OscConfig+0xc0>
 8005e6e:	e014      	b.n	8005e9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e70:	f7fd f934 	bl	80030dc <HAL_GetTick>
 8005e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e76:	e008      	b.n	8005e8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e78:	f7fd f930 	bl	80030dc <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	2b64      	cmp	r3, #100	@ 0x64
 8005e84:	d901      	bls.n	8005e8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e1f3      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e8a:	4b51      	ldr	r3, [pc, #324]	@ (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1f0      	bne.n	8005e78 <HAL_RCC_OscConfig+0xe8>
 8005e96:	e000      	b.n	8005e9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d063      	beq.n	8005f6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ea6:	4b4a      	ldr	r3, [pc, #296]	@ (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	f003 030c 	and.w	r3, r3, #12
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00b      	beq.n	8005eca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005eb2:	4b47      	ldr	r3, [pc, #284]	@ (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005eba:	2b08      	cmp	r3, #8
 8005ebc:	d11c      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ebe:	4b44      	ldr	r3, [pc, #272]	@ (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d116      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005eca:	4b41      	ldr	r3, [pc, #260]	@ (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 0302 	and.w	r3, r3, #2
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d005      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x152>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d001      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e1c7      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ee2:	4b3b      	ldr	r3, [pc, #236]	@ (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	00db      	lsls	r3, r3, #3
 8005ef0:	4937      	ldr	r1, [pc, #220]	@ (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ef6:	e03a      	b.n	8005f6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d020      	beq.n	8005f42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f00:	4b34      	ldr	r3, [pc, #208]	@ (8005fd4 <HAL_RCC_OscConfig+0x244>)
 8005f02:	2201      	movs	r2, #1
 8005f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f06:	f7fd f8e9 	bl	80030dc <HAL_GetTick>
 8005f0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f0c:	e008      	b.n	8005f20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f0e:	f7fd f8e5 	bl	80030dc <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d901      	bls.n	8005f20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e1a8      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f20:	4b2b      	ldr	r3, [pc, #172]	@ (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0302 	and.w	r3, r3, #2
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d0f0      	beq.n	8005f0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f2c:	4b28      	ldr	r3, [pc, #160]	@ (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	00db      	lsls	r3, r3, #3
 8005f3a:	4925      	ldr	r1, [pc, #148]	@ (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	600b      	str	r3, [r1, #0]
 8005f40:	e015      	b.n	8005f6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f42:	4b24      	ldr	r3, [pc, #144]	@ (8005fd4 <HAL_RCC_OscConfig+0x244>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f48:	f7fd f8c8 	bl	80030dc <HAL_GetTick>
 8005f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f4e:	e008      	b.n	8005f62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f50:	f7fd f8c4 	bl	80030dc <HAL_GetTick>
 8005f54:	4602      	mov	r2, r0
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d901      	bls.n	8005f62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e187      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f62:	4b1b      	ldr	r3, [pc, #108]	@ (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1f0      	bne.n	8005f50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0308 	and.w	r3, r3, #8
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d036      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d016      	beq.n	8005fb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f82:	4b15      	ldr	r3, [pc, #84]	@ (8005fd8 <HAL_RCC_OscConfig+0x248>)
 8005f84:	2201      	movs	r2, #1
 8005f86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f88:	f7fd f8a8 	bl	80030dc <HAL_GetTick>
 8005f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f8e:	e008      	b.n	8005fa2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f90:	f7fd f8a4 	bl	80030dc <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d901      	bls.n	8005fa2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e167      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8005fd0 <HAL_RCC_OscConfig+0x240>)
 8005fa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fa6:	f003 0302 	and.w	r3, r3, #2
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d0f0      	beq.n	8005f90 <HAL_RCC_OscConfig+0x200>
 8005fae:	e01b      	b.n	8005fe8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fb0:	4b09      	ldr	r3, [pc, #36]	@ (8005fd8 <HAL_RCC_OscConfig+0x248>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fb6:	f7fd f891 	bl	80030dc <HAL_GetTick>
 8005fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fbc:	e00e      	b.n	8005fdc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fbe:	f7fd f88d 	bl	80030dc <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d907      	bls.n	8005fdc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e150      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
 8005fd0:	40023800 	.word	0x40023800
 8005fd4:	42470000 	.word	0x42470000
 8005fd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fdc:	4b88      	ldr	r3, [pc, #544]	@ (8006200 <HAL_RCC_OscConfig+0x470>)
 8005fde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fe0:	f003 0302 	and.w	r3, r3, #2
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1ea      	bne.n	8005fbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0304 	and.w	r3, r3, #4
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f000 8097 	beq.w	8006124 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ffa:	4b81      	ldr	r3, [pc, #516]	@ (8006200 <HAL_RCC_OscConfig+0x470>)
 8005ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d10f      	bne.n	8006026 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006006:	2300      	movs	r3, #0
 8006008:	60bb      	str	r3, [r7, #8]
 800600a:	4b7d      	ldr	r3, [pc, #500]	@ (8006200 <HAL_RCC_OscConfig+0x470>)
 800600c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800600e:	4a7c      	ldr	r2, [pc, #496]	@ (8006200 <HAL_RCC_OscConfig+0x470>)
 8006010:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006014:	6413      	str	r3, [r2, #64]	@ 0x40
 8006016:	4b7a      	ldr	r3, [pc, #488]	@ (8006200 <HAL_RCC_OscConfig+0x470>)
 8006018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800601a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800601e:	60bb      	str	r3, [r7, #8]
 8006020:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006022:	2301      	movs	r3, #1
 8006024:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006026:	4b77      	ldr	r3, [pc, #476]	@ (8006204 <HAL_RCC_OscConfig+0x474>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800602e:	2b00      	cmp	r3, #0
 8006030:	d118      	bne.n	8006064 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006032:	4b74      	ldr	r3, [pc, #464]	@ (8006204 <HAL_RCC_OscConfig+0x474>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a73      	ldr	r2, [pc, #460]	@ (8006204 <HAL_RCC_OscConfig+0x474>)
 8006038:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800603c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800603e:	f7fd f84d 	bl	80030dc <HAL_GetTick>
 8006042:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006044:	e008      	b.n	8006058 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006046:	f7fd f849 	bl	80030dc <HAL_GetTick>
 800604a:	4602      	mov	r2, r0
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	2b02      	cmp	r3, #2
 8006052:	d901      	bls.n	8006058 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e10c      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006058:	4b6a      	ldr	r3, [pc, #424]	@ (8006204 <HAL_RCC_OscConfig+0x474>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006060:	2b00      	cmp	r3, #0
 8006062:	d0f0      	beq.n	8006046 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	2b01      	cmp	r3, #1
 800606a:	d106      	bne.n	800607a <HAL_RCC_OscConfig+0x2ea>
 800606c:	4b64      	ldr	r3, [pc, #400]	@ (8006200 <HAL_RCC_OscConfig+0x470>)
 800606e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006070:	4a63      	ldr	r2, [pc, #396]	@ (8006200 <HAL_RCC_OscConfig+0x470>)
 8006072:	f043 0301 	orr.w	r3, r3, #1
 8006076:	6713      	str	r3, [r2, #112]	@ 0x70
 8006078:	e01c      	b.n	80060b4 <HAL_RCC_OscConfig+0x324>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	2b05      	cmp	r3, #5
 8006080:	d10c      	bne.n	800609c <HAL_RCC_OscConfig+0x30c>
 8006082:	4b5f      	ldr	r3, [pc, #380]	@ (8006200 <HAL_RCC_OscConfig+0x470>)
 8006084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006086:	4a5e      	ldr	r2, [pc, #376]	@ (8006200 <HAL_RCC_OscConfig+0x470>)
 8006088:	f043 0304 	orr.w	r3, r3, #4
 800608c:	6713      	str	r3, [r2, #112]	@ 0x70
 800608e:	4b5c      	ldr	r3, [pc, #368]	@ (8006200 <HAL_RCC_OscConfig+0x470>)
 8006090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006092:	4a5b      	ldr	r2, [pc, #364]	@ (8006200 <HAL_RCC_OscConfig+0x470>)
 8006094:	f043 0301 	orr.w	r3, r3, #1
 8006098:	6713      	str	r3, [r2, #112]	@ 0x70
 800609a:	e00b      	b.n	80060b4 <HAL_RCC_OscConfig+0x324>
 800609c:	4b58      	ldr	r3, [pc, #352]	@ (8006200 <HAL_RCC_OscConfig+0x470>)
 800609e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060a0:	4a57      	ldr	r2, [pc, #348]	@ (8006200 <HAL_RCC_OscConfig+0x470>)
 80060a2:	f023 0301 	bic.w	r3, r3, #1
 80060a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80060a8:	4b55      	ldr	r3, [pc, #340]	@ (8006200 <HAL_RCC_OscConfig+0x470>)
 80060aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ac:	4a54      	ldr	r2, [pc, #336]	@ (8006200 <HAL_RCC_OscConfig+0x470>)
 80060ae:	f023 0304 	bic.w	r3, r3, #4
 80060b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d015      	beq.n	80060e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060bc:	f7fd f80e 	bl	80030dc <HAL_GetTick>
 80060c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060c2:	e00a      	b.n	80060da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060c4:	f7fd f80a 	bl	80030dc <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d901      	bls.n	80060da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e0cb      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060da:	4b49      	ldr	r3, [pc, #292]	@ (8006200 <HAL_RCC_OscConfig+0x470>)
 80060dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d0ee      	beq.n	80060c4 <HAL_RCC_OscConfig+0x334>
 80060e6:	e014      	b.n	8006112 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060e8:	f7fc fff8 	bl	80030dc <HAL_GetTick>
 80060ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060ee:	e00a      	b.n	8006106 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060f0:	f7fc fff4 	bl	80030dc <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060fe:	4293      	cmp	r3, r2
 8006100:	d901      	bls.n	8006106 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e0b5      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006106:	4b3e      	ldr	r3, [pc, #248]	@ (8006200 <HAL_RCC_OscConfig+0x470>)
 8006108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800610a:	f003 0302 	and.w	r3, r3, #2
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1ee      	bne.n	80060f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006112:	7dfb      	ldrb	r3, [r7, #23]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d105      	bne.n	8006124 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006118:	4b39      	ldr	r3, [pc, #228]	@ (8006200 <HAL_RCC_OscConfig+0x470>)
 800611a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800611c:	4a38      	ldr	r2, [pc, #224]	@ (8006200 <HAL_RCC_OscConfig+0x470>)
 800611e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006122:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	2b00      	cmp	r3, #0
 800612a:	f000 80a1 	beq.w	8006270 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800612e:	4b34      	ldr	r3, [pc, #208]	@ (8006200 <HAL_RCC_OscConfig+0x470>)
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f003 030c 	and.w	r3, r3, #12
 8006136:	2b08      	cmp	r3, #8
 8006138:	d05c      	beq.n	80061f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	2b02      	cmp	r3, #2
 8006140:	d141      	bne.n	80061c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006142:	4b31      	ldr	r3, [pc, #196]	@ (8006208 <HAL_RCC_OscConfig+0x478>)
 8006144:	2200      	movs	r2, #0
 8006146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006148:	f7fc ffc8 	bl	80030dc <HAL_GetTick>
 800614c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800614e:	e008      	b.n	8006162 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006150:	f7fc ffc4 	bl	80030dc <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	2b02      	cmp	r3, #2
 800615c:	d901      	bls.n	8006162 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e087      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006162:	4b27      	ldr	r3, [pc, #156]	@ (8006200 <HAL_RCC_OscConfig+0x470>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1f0      	bne.n	8006150 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	69da      	ldr	r2, [r3, #28]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	431a      	orrs	r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800617c:	019b      	lsls	r3, r3, #6
 800617e:	431a      	orrs	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006184:	085b      	lsrs	r3, r3, #1
 8006186:	3b01      	subs	r3, #1
 8006188:	041b      	lsls	r3, r3, #16
 800618a:	431a      	orrs	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006190:	061b      	lsls	r3, r3, #24
 8006192:	491b      	ldr	r1, [pc, #108]	@ (8006200 <HAL_RCC_OscConfig+0x470>)
 8006194:	4313      	orrs	r3, r2
 8006196:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006198:	4b1b      	ldr	r3, [pc, #108]	@ (8006208 <HAL_RCC_OscConfig+0x478>)
 800619a:	2201      	movs	r2, #1
 800619c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800619e:	f7fc ff9d 	bl	80030dc <HAL_GetTick>
 80061a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061a4:	e008      	b.n	80061b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061a6:	f7fc ff99 	bl	80030dc <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d901      	bls.n	80061b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e05c      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061b8:	4b11      	ldr	r3, [pc, #68]	@ (8006200 <HAL_RCC_OscConfig+0x470>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d0f0      	beq.n	80061a6 <HAL_RCC_OscConfig+0x416>
 80061c4:	e054      	b.n	8006270 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061c6:	4b10      	ldr	r3, [pc, #64]	@ (8006208 <HAL_RCC_OscConfig+0x478>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061cc:	f7fc ff86 	bl	80030dc <HAL_GetTick>
 80061d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061d2:	e008      	b.n	80061e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061d4:	f7fc ff82 	bl	80030dc <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d901      	bls.n	80061e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e045      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061e6:	4b06      	ldr	r3, [pc, #24]	@ (8006200 <HAL_RCC_OscConfig+0x470>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d1f0      	bne.n	80061d4 <HAL_RCC_OscConfig+0x444>
 80061f2:	e03d      	b.n	8006270 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	699b      	ldr	r3, [r3, #24]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d107      	bne.n	800620c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e038      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
 8006200:	40023800 	.word	0x40023800
 8006204:	40007000 	.word	0x40007000
 8006208:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800620c:	4b1b      	ldr	r3, [pc, #108]	@ (800627c <HAL_RCC_OscConfig+0x4ec>)
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	699b      	ldr	r3, [r3, #24]
 8006216:	2b01      	cmp	r3, #1
 8006218:	d028      	beq.n	800626c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006224:	429a      	cmp	r2, r3
 8006226:	d121      	bne.n	800626c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006232:	429a      	cmp	r2, r3
 8006234:	d11a      	bne.n	800626c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800623c:	4013      	ands	r3, r2
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006242:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006244:	4293      	cmp	r3, r2
 8006246:	d111      	bne.n	800626c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006252:	085b      	lsrs	r3, r3, #1
 8006254:	3b01      	subs	r3, #1
 8006256:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006258:	429a      	cmp	r2, r3
 800625a:	d107      	bne.n	800626c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006266:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006268:	429a      	cmp	r2, r3
 800626a:	d001      	beq.n	8006270 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e000      	b.n	8006272 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3718      	adds	r7, #24
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	40023800 	.word	0x40023800

08006280 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d101      	bne.n	8006294 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e0cc      	b.n	800642e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006294:	4b68      	ldr	r3, [pc, #416]	@ (8006438 <HAL_RCC_ClockConfig+0x1b8>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 030f 	and.w	r3, r3, #15
 800629c:	683a      	ldr	r2, [r7, #0]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d90c      	bls.n	80062bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062a2:	4b65      	ldr	r3, [pc, #404]	@ (8006438 <HAL_RCC_ClockConfig+0x1b8>)
 80062a4:	683a      	ldr	r2, [r7, #0]
 80062a6:	b2d2      	uxtb	r2, r2
 80062a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062aa:	4b63      	ldr	r3, [pc, #396]	@ (8006438 <HAL_RCC_ClockConfig+0x1b8>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 030f 	and.w	r3, r3, #15
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d001      	beq.n	80062bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e0b8      	b.n	800642e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0302 	and.w	r3, r3, #2
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d020      	beq.n	800630a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0304 	and.w	r3, r3, #4
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d005      	beq.n	80062e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062d4:	4b59      	ldr	r3, [pc, #356]	@ (800643c <HAL_RCC_ClockConfig+0x1bc>)
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	4a58      	ldr	r2, [pc, #352]	@ (800643c <HAL_RCC_ClockConfig+0x1bc>)
 80062da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80062de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0308 	and.w	r3, r3, #8
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d005      	beq.n	80062f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062ec:	4b53      	ldr	r3, [pc, #332]	@ (800643c <HAL_RCC_ClockConfig+0x1bc>)
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	4a52      	ldr	r2, [pc, #328]	@ (800643c <HAL_RCC_ClockConfig+0x1bc>)
 80062f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80062f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062f8:	4b50      	ldr	r3, [pc, #320]	@ (800643c <HAL_RCC_ClockConfig+0x1bc>)
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	494d      	ldr	r1, [pc, #308]	@ (800643c <HAL_RCC_ClockConfig+0x1bc>)
 8006306:	4313      	orrs	r3, r2
 8006308:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0301 	and.w	r3, r3, #1
 8006312:	2b00      	cmp	r3, #0
 8006314:	d044      	beq.n	80063a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d107      	bne.n	800632e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800631e:	4b47      	ldr	r3, [pc, #284]	@ (800643c <HAL_RCC_ClockConfig+0x1bc>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d119      	bne.n	800635e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e07f      	b.n	800642e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	2b02      	cmp	r3, #2
 8006334:	d003      	beq.n	800633e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800633a:	2b03      	cmp	r3, #3
 800633c:	d107      	bne.n	800634e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800633e:	4b3f      	ldr	r3, [pc, #252]	@ (800643c <HAL_RCC_ClockConfig+0x1bc>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d109      	bne.n	800635e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e06f      	b.n	800642e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800634e:	4b3b      	ldr	r3, [pc, #236]	@ (800643c <HAL_RCC_ClockConfig+0x1bc>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 0302 	and.w	r3, r3, #2
 8006356:	2b00      	cmp	r3, #0
 8006358:	d101      	bne.n	800635e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e067      	b.n	800642e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800635e:	4b37      	ldr	r3, [pc, #220]	@ (800643c <HAL_RCC_ClockConfig+0x1bc>)
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	f023 0203 	bic.w	r2, r3, #3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	4934      	ldr	r1, [pc, #208]	@ (800643c <HAL_RCC_ClockConfig+0x1bc>)
 800636c:	4313      	orrs	r3, r2
 800636e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006370:	f7fc feb4 	bl	80030dc <HAL_GetTick>
 8006374:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006376:	e00a      	b.n	800638e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006378:	f7fc feb0 	bl	80030dc <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006386:	4293      	cmp	r3, r2
 8006388:	d901      	bls.n	800638e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e04f      	b.n	800642e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800638e:	4b2b      	ldr	r3, [pc, #172]	@ (800643c <HAL_RCC_ClockConfig+0x1bc>)
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f003 020c 	and.w	r2, r3, #12
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	429a      	cmp	r2, r3
 800639e:	d1eb      	bne.n	8006378 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80063a0:	4b25      	ldr	r3, [pc, #148]	@ (8006438 <HAL_RCC_ClockConfig+0x1b8>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 030f 	and.w	r3, r3, #15
 80063a8:	683a      	ldr	r2, [r7, #0]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d20c      	bcs.n	80063c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063ae:	4b22      	ldr	r3, [pc, #136]	@ (8006438 <HAL_RCC_ClockConfig+0x1b8>)
 80063b0:	683a      	ldr	r2, [r7, #0]
 80063b2:	b2d2      	uxtb	r2, r2
 80063b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063b6:	4b20      	ldr	r3, [pc, #128]	@ (8006438 <HAL_RCC_ClockConfig+0x1b8>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 030f 	and.w	r3, r3, #15
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d001      	beq.n	80063c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e032      	b.n	800642e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0304 	and.w	r3, r3, #4
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d008      	beq.n	80063e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063d4:	4b19      	ldr	r3, [pc, #100]	@ (800643c <HAL_RCC_ClockConfig+0x1bc>)
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	4916      	ldr	r1, [pc, #88]	@ (800643c <HAL_RCC_ClockConfig+0x1bc>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0308 	and.w	r3, r3, #8
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d009      	beq.n	8006406 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063f2:	4b12      	ldr	r3, [pc, #72]	@ (800643c <HAL_RCC_ClockConfig+0x1bc>)
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	00db      	lsls	r3, r3, #3
 8006400:	490e      	ldr	r1, [pc, #56]	@ (800643c <HAL_RCC_ClockConfig+0x1bc>)
 8006402:	4313      	orrs	r3, r2
 8006404:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006406:	f000 f821 	bl	800644c <HAL_RCC_GetSysClockFreq>
 800640a:	4602      	mov	r2, r0
 800640c:	4b0b      	ldr	r3, [pc, #44]	@ (800643c <HAL_RCC_ClockConfig+0x1bc>)
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	091b      	lsrs	r3, r3, #4
 8006412:	f003 030f 	and.w	r3, r3, #15
 8006416:	490a      	ldr	r1, [pc, #40]	@ (8006440 <HAL_RCC_ClockConfig+0x1c0>)
 8006418:	5ccb      	ldrb	r3, [r1, r3]
 800641a:	fa22 f303 	lsr.w	r3, r2, r3
 800641e:	4a09      	ldr	r2, [pc, #36]	@ (8006444 <HAL_RCC_ClockConfig+0x1c4>)
 8006420:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006422:	4b09      	ldr	r3, [pc, #36]	@ (8006448 <HAL_RCC_ClockConfig+0x1c8>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4618      	mov	r0, r3
 8006428:	f7fc fe14 	bl	8003054 <HAL_InitTick>

  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	40023c00 	.word	0x40023c00
 800643c:	40023800 	.word	0x40023800
 8006440:	08009604 	.word	0x08009604
 8006444:	2000001c 	.word	0x2000001c
 8006448:	20000020 	.word	0x20000020

0800644c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800644c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006450:	b090      	sub	sp, #64	@ 0x40
 8006452:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006454:	2300      	movs	r3, #0
 8006456:	637b      	str	r3, [r7, #52]	@ 0x34
 8006458:	2300      	movs	r3, #0
 800645a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800645c:	2300      	movs	r3, #0
 800645e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006460:	2300      	movs	r3, #0
 8006462:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006464:	4b59      	ldr	r3, [pc, #356]	@ (80065cc <HAL_RCC_GetSysClockFreq+0x180>)
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f003 030c 	and.w	r3, r3, #12
 800646c:	2b08      	cmp	r3, #8
 800646e:	d00d      	beq.n	800648c <HAL_RCC_GetSysClockFreq+0x40>
 8006470:	2b08      	cmp	r3, #8
 8006472:	f200 80a1 	bhi.w	80065b8 <HAL_RCC_GetSysClockFreq+0x16c>
 8006476:	2b00      	cmp	r3, #0
 8006478:	d002      	beq.n	8006480 <HAL_RCC_GetSysClockFreq+0x34>
 800647a:	2b04      	cmp	r3, #4
 800647c:	d003      	beq.n	8006486 <HAL_RCC_GetSysClockFreq+0x3a>
 800647e:	e09b      	b.n	80065b8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006480:	4b53      	ldr	r3, [pc, #332]	@ (80065d0 <HAL_RCC_GetSysClockFreq+0x184>)
 8006482:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8006484:	e09b      	b.n	80065be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006486:	4b53      	ldr	r3, [pc, #332]	@ (80065d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006488:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800648a:	e098      	b.n	80065be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800648c:	4b4f      	ldr	r3, [pc, #316]	@ (80065cc <HAL_RCC_GetSysClockFreq+0x180>)
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006494:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006496:	4b4d      	ldr	r3, [pc, #308]	@ (80065cc <HAL_RCC_GetSysClockFreq+0x180>)
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d028      	beq.n	80064f4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064a2:	4b4a      	ldr	r3, [pc, #296]	@ (80065cc <HAL_RCC_GetSysClockFreq+0x180>)
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	099b      	lsrs	r3, r3, #6
 80064a8:	2200      	movs	r2, #0
 80064aa:	623b      	str	r3, [r7, #32]
 80064ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80064ae:	6a3b      	ldr	r3, [r7, #32]
 80064b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80064b4:	2100      	movs	r1, #0
 80064b6:	4b47      	ldr	r3, [pc, #284]	@ (80065d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80064b8:	fb03 f201 	mul.w	r2, r3, r1
 80064bc:	2300      	movs	r3, #0
 80064be:	fb00 f303 	mul.w	r3, r0, r3
 80064c2:	4413      	add	r3, r2
 80064c4:	4a43      	ldr	r2, [pc, #268]	@ (80065d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80064c6:	fba0 1202 	umull	r1, r2, r0, r2
 80064ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064cc:	460a      	mov	r2, r1
 80064ce:	62ba      	str	r2, [r7, #40]	@ 0x28
 80064d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064d2:	4413      	add	r3, r2
 80064d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064d8:	2200      	movs	r2, #0
 80064da:	61bb      	str	r3, [r7, #24]
 80064dc:	61fa      	str	r2, [r7, #28]
 80064de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80064e6:	f7f9 fe89 	bl	80001fc <__aeabi_uldivmod>
 80064ea:	4602      	mov	r2, r0
 80064ec:	460b      	mov	r3, r1
 80064ee:	4613      	mov	r3, r2
 80064f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064f2:	e053      	b.n	800659c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064f4:	4b35      	ldr	r3, [pc, #212]	@ (80065cc <HAL_RCC_GetSysClockFreq+0x180>)
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	099b      	lsrs	r3, r3, #6
 80064fa:	2200      	movs	r2, #0
 80064fc:	613b      	str	r3, [r7, #16]
 80064fe:	617a      	str	r2, [r7, #20]
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006506:	f04f 0b00 	mov.w	fp, #0
 800650a:	4652      	mov	r2, sl
 800650c:	465b      	mov	r3, fp
 800650e:	f04f 0000 	mov.w	r0, #0
 8006512:	f04f 0100 	mov.w	r1, #0
 8006516:	0159      	lsls	r1, r3, #5
 8006518:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800651c:	0150      	lsls	r0, r2, #5
 800651e:	4602      	mov	r2, r0
 8006520:	460b      	mov	r3, r1
 8006522:	ebb2 080a 	subs.w	r8, r2, sl
 8006526:	eb63 090b 	sbc.w	r9, r3, fp
 800652a:	f04f 0200 	mov.w	r2, #0
 800652e:	f04f 0300 	mov.w	r3, #0
 8006532:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006536:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800653a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800653e:	ebb2 0408 	subs.w	r4, r2, r8
 8006542:	eb63 0509 	sbc.w	r5, r3, r9
 8006546:	f04f 0200 	mov.w	r2, #0
 800654a:	f04f 0300 	mov.w	r3, #0
 800654e:	00eb      	lsls	r3, r5, #3
 8006550:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006554:	00e2      	lsls	r2, r4, #3
 8006556:	4614      	mov	r4, r2
 8006558:	461d      	mov	r5, r3
 800655a:	eb14 030a 	adds.w	r3, r4, sl
 800655e:	603b      	str	r3, [r7, #0]
 8006560:	eb45 030b 	adc.w	r3, r5, fp
 8006564:	607b      	str	r3, [r7, #4]
 8006566:	f04f 0200 	mov.w	r2, #0
 800656a:	f04f 0300 	mov.w	r3, #0
 800656e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006572:	4629      	mov	r1, r5
 8006574:	028b      	lsls	r3, r1, #10
 8006576:	4621      	mov	r1, r4
 8006578:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800657c:	4621      	mov	r1, r4
 800657e:	028a      	lsls	r2, r1, #10
 8006580:	4610      	mov	r0, r2
 8006582:	4619      	mov	r1, r3
 8006584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006586:	2200      	movs	r2, #0
 8006588:	60bb      	str	r3, [r7, #8]
 800658a:	60fa      	str	r2, [r7, #12]
 800658c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006590:	f7f9 fe34 	bl	80001fc <__aeabi_uldivmod>
 8006594:	4602      	mov	r2, r0
 8006596:	460b      	mov	r3, r1
 8006598:	4613      	mov	r3, r2
 800659a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800659c:	4b0b      	ldr	r3, [pc, #44]	@ (80065cc <HAL_RCC_GetSysClockFreq+0x180>)
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	0c1b      	lsrs	r3, r3, #16
 80065a2:	f003 0303 	and.w	r3, r3, #3
 80065a6:	3301      	adds	r3, #1
 80065a8:	005b      	lsls	r3, r3, #1
 80065aa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80065ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80065ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065b4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80065b6:	e002      	b.n	80065be <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80065b8:	4b05      	ldr	r3, [pc, #20]	@ (80065d0 <HAL_RCC_GetSysClockFreq+0x184>)
 80065ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80065bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3740      	adds	r7, #64	@ 0x40
 80065c4:	46bd      	mov	sp, r7
 80065c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065ca:	bf00      	nop
 80065cc:	40023800 	.word	0x40023800
 80065d0:	00f42400 	.word	0x00f42400
 80065d4:	017d7840 	.word	0x017d7840

080065d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065d8:	b480      	push	{r7}
 80065da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065dc:	4b03      	ldr	r3, [pc, #12]	@ (80065ec <HAL_RCC_GetHCLKFreq+0x14>)
 80065de:	681b      	ldr	r3, [r3, #0]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	2000001c 	.word	0x2000001c

080065f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80065f4:	f7ff fff0 	bl	80065d8 <HAL_RCC_GetHCLKFreq>
 80065f8:	4602      	mov	r2, r0
 80065fa:	4b05      	ldr	r3, [pc, #20]	@ (8006610 <HAL_RCC_GetPCLK1Freq+0x20>)
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	0a9b      	lsrs	r3, r3, #10
 8006600:	f003 0307 	and.w	r3, r3, #7
 8006604:	4903      	ldr	r1, [pc, #12]	@ (8006614 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006606:	5ccb      	ldrb	r3, [r1, r3]
 8006608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800660c:	4618      	mov	r0, r3
 800660e:	bd80      	pop	{r7, pc}
 8006610:	40023800 	.word	0x40023800
 8006614:	08009614 	.word	0x08009614

08006618 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800661c:	f7ff ffdc 	bl	80065d8 <HAL_RCC_GetHCLKFreq>
 8006620:	4602      	mov	r2, r0
 8006622:	4b05      	ldr	r3, [pc, #20]	@ (8006638 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	0b5b      	lsrs	r3, r3, #13
 8006628:	f003 0307 	and.w	r3, r3, #7
 800662c:	4903      	ldr	r1, [pc, #12]	@ (800663c <HAL_RCC_GetPCLK2Freq+0x24>)
 800662e:	5ccb      	ldrb	r3, [r1, r3]
 8006630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006634:	4618      	mov	r0, r3
 8006636:	bd80      	pop	{r7, pc}
 8006638:	40023800 	.word	0x40023800
 800663c:	08009614 	.word	0x08009614

08006640 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006648:	2300      	movs	r3, #0
 800664a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800664c:	2300      	movs	r3, #0
 800664e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 0301 	and.w	r3, r3, #1
 8006658:	2b00      	cmp	r3, #0
 800665a:	d10b      	bne.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006664:	2b00      	cmp	r3, #0
 8006666:	d105      	bne.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006670:	2b00      	cmp	r3, #0
 8006672:	d075      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006674:	4b91      	ldr	r3, [pc, #580]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006676:	2200      	movs	r2, #0
 8006678:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800667a:	f7fc fd2f 	bl	80030dc <HAL_GetTick>
 800667e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006680:	e008      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006682:	f7fc fd2b 	bl	80030dc <HAL_GetTick>
 8006686:	4602      	mov	r2, r0
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	2b02      	cmp	r3, #2
 800668e:	d901      	bls.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	e189      	b.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006694:	4b8a      	ldr	r3, [pc, #552]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1f0      	bne.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0301 	and.w	r3, r3, #1
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d009      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	019a      	lsls	r2, r3, #6
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	071b      	lsls	r3, r3, #28
 80066b8:	4981      	ldr	r1, [pc, #516]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066ba:	4313      	orrs	r3, r2
 80066bc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 0302 	and.w	r3, r3, #2
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d01f      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80066cc:	4b7c      	ldr	r3, [pc, #496]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066d2:	0f1b      	lsrs	r3, r3, #28
 80066d4:	f003 0307 	and.w	r3, r3, #7
 80066d8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	019a      	lsls	r2, r3, #6
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	061b      	lsls	r3, r3, #24
 80066e6:	431a      	orrs	r2, r3
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	071b      	lsls	r3, r3, #28
 80066ec:	4974      	ldr	r1, [pc, #464]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066ee:	4313      	orrs	r3, r2
 80066f0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80066f4:	4b72      	ldr	r3, [pc, #456]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066fa:	f023 021f 	bic.w	r2, r3, #31
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	69db      	ldr	r3, [r3, #28]
 8006702:	3b01      	subs	r3, #1
 8006704:	496e      	ldr	r1, [pc, #440]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006706:	4313      	orrs	r3, r2
 8006708:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00d      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	019a      	lsls	r2, r3, #6
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	061b      	lsls	r3, r3, #24
 8006724:	431a      	orrs	r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	071b      	lsls	r3, r3, #28
 800672c:	4964      	ldr	r1, [pc, #400]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800672e:	4313      	orrs	r3, r2
 8006730:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006734:	4b61      	ldr	r3, [pc, #388]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006736:	2201      	movs	r2, #1
 8006738:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800673a:	f7fc fccf 	bl	80030dc <HAL_GetTick>
 800673e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006740:	e008      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006742:	f7fc fccb 	bl	80030dc <HAL_GetTick>
 8006746:	4602      	mov	r2, r0
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	2b02      	cmp	r3, #2
 800674e:	d901      	bls.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006750:	2303      	movs	r3, #3
 8006752:	e129      	b.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006754:	4b5a      	ldr	r3, [pc, #360]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800675c:	2b00      	cmp	r3, #0
 800675e:	d0f0      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 0304 	and.w	r3, r3, #4
 8006768:	2b00      	cmp	r3, #0
 800676a:	d105      	bne.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006774:	2b00      	cmp	r3, #0
 8006776:	d079      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006778:	4b52      	ldr	r3, [pc, #328]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800677a:	2200      	movs	r2, #0
 800677c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800677e:	f7fc fcad 	bl	80030dc <HAL_GetTick>
 8006782:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006784:	e008      	b.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006786:	f7fc fca9 	bl	80030dc <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	2b02      	cmp	r3, #2
 8006792:	d901      	bls.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e107      	b.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006798:	4b49      	ldr	r3, [pc, #292]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80067a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067a4:	d0ef      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0304 	and.w	r3, r3, #4
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d020      	beq.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80067b2:	4b43      	ldr	r3, [pc, #268]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067b8:	0f1b      	lsrs	r3, r3, #28
 80067ba:	f003 0307 	and.w	r3, r3, #7
 80067be:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	019a      	lsls	r2, r3, #6
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	695b      	ldr	r3, [r3, #20]
 80067ca:	061b      	lsls	r3, r3, #24
 80067cc:	431a      	orrs	r2, r3
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	071b      	lsls	r3, r3, #28
 80067d2:	493b      	ldr	r1, [pc, #236]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067d4:	4313      	orrs	r3, r2
 80067d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80067da:	4b39      	ldr	r3, [pc, #228]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067e0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a1b      	ldr	r3, [r3, #32]
 80067e8:	3b01      	subs	r3, #1
 80067ea:	021b      	lsls	r3, r3, #8
 80067ec:	4934      	ldr	r1, [pc, #208]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067ee:	4313      	orrs	r3, r2
 80067f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0308 	and.w	r3, r3, #8
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d01e      	beq.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006800:	4b2f      	ldr	r3, [pc, #188]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006806:	0e1b      	lsrs	r3, r3, #24
 8006808:	f003 030f 	and.w	r3, r3, #15
 800680c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	019a      	lsls	r2, r3, #6
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	061b      	lsls	r3, r3, #24
 8006818:	431a      	orrs	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	071b      	lsls	r3, r3, #28
 8006820:	4927      	ldr	r1, [pc, #156]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006822:	4313      	orrs	r3, r2
 8006824:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006828:	4b25      	ldr	r3, [pc, #148]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800682a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800682e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006836:	4922      	ldr	r1, [pc, #136]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006838:	4313      	orrs	r3, r2
 800683a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800683e:	4b21      	ldr	r3, [pc, #132]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006840:	2201      	movs	r2, #1
 8006842:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006844:	f7fc fc4a 	bl	80030dc <HAL_GetTick>
 8006848:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800684a:	e008      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800684c:	f7fc fc46 	bl	80030dc <HAL_GetTick>
 8006850:	4602      	mov	r2, r0
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	2b02      	cmp	r3, #2
 8006858:	d901      	bls.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e0a4      	b.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800685e:	4b18      	ldr	r3, [pc, #96]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006866:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800686a:	d1ef      	bne.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 0320 	and.w	r3, r3, #32
 8006874:	2b00      	cmp	r3, #0
 8006876:	f000 808b 	beq.w	8006990 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800687a:	2300      	movs	r3, #0
 800687c:	60fb      	str	r3, [r7, #12]
 800687e:	4b10      	ldr	r3, [pc, #64]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006882:	4a0f      	ldr	r2, [pc, #60]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006884:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006888:	6413      	str	r3, [r2, #64]	@ 0x40
 800688a:	4b0d      	ldr	r3, [pc, #52]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800688c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800688e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006892:	60fb      	str	r3, [r7, #12]
 8006894:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006896:	4b0c      	ldr	r3, [pc, #48]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a0b      	ldr	r2, [pc, #44]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800689c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068a0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80068a2:	f7fc fc1b 	bl	80030dc <HAL_GetTick>
 80068a6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80068a8:	e010      	b.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80068aa:	f7fc fc17 	bl	80030dc <HAL_GetTick>
 80068ae:	4602      	mov	r2, r0
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d909      	bls.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e075      	b.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80068bc:	42470068 	.word	0x42470068
 80068c0:	40023800 	.word	0x40023800
 80068c4:	42470070 	.word	0x42470070
 80068c8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80068cc:	4b38      	ldr	r3, [pc, #224]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d0e8      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80068d8:	4b36      	ldr	r3, [pc, #216]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80068da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068e0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d02f      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068f0:	693a      	ldr	r2, [r7, #16]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d028      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80068f6:	4b2f      	ldr	r3, [pc, #188]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80068f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068fe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006900:	4b2d      	ldr	r3, [pc, #180]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006902:	2201      	movs	r2, #1
 8006904:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006906:	4b2c      	ldr	r3, [pc, #176]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006908:	2200      	movs	r2, #0
 800690a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800690c:	4a29      	ldr	r2, [pc, #164]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006912:	4b28      	ldr	r3, [pc, #160]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006916:	f003 0301 	and.w	r3, r3, #1
 800691a:	2b01      	cmp	r3, #1
 800691c:	d114      	bne.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800691e:	f7fc fbdd 	bl	80030dc <HAL_GetTick>
 8006922:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006924:	e00a      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006926:	f7fc fbd9 	bl	80030dc <HAL_GetTick>
 800692a:	4602      	mov	r2, r0
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006934:	4293      	cmp	r3, r2
 8006936:	d901      	bls.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006938:	2303      	movs	r3, #3
 800693a:	e035      	b.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800693c:	4b1d      	ldr	r3, [pc, #116]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800693e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006940:	f003 0302 	and.w	r3, r3, #2
 8006944:	2b00      	cmp	r3, #0
 8006946:	d0ee      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800694c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006950:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006954:	d10d      	bne.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006956:	4b17      	ldr	r3, [pc, #92]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006962:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006966:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800696a:	4912      	ldr	r1, [pc, #72]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800696c:	4313      	orrs	r3, r2
 800696e:	608b      	str	r3, [r1, #8]
 8006970:	e005      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006972:	4b10      	ldr	r3, [pc, #64]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	4a0f      	ldr	r2, [pc, #60]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006978:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800697c:	6093      	str	r3, [r2, #8]
 800697e:	4b0d      	ldr	r3, [pc, #52]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006980:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006986:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800698a:	490a      	ldr	r1, [pc, #40]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800698c:	4313      	orrs	r3, r2
 800698e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0310 	and.w	r3, r3, #16
 8006998:	2b00      	cmp	r3, #0
 800699a:	d004      	beq.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80069a2:	4b06      	ldr	r3, [pc, #24]	@ (80069bc <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80069a4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3718      	adds	r7, #24
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	40007000 	.word	0x40007000
 80069b4:	40023800 	.word	0x40023800
 80069b8:	42470e40 	.word	0x42470e40
 80069bc:	424711e0 	.word	0x424711e0

080069c0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d101      	bne.n	80069d6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e073      	b.n	8006abe <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	7f5b      	ldrb	r3, [r3, #29]
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d105      	bne.n	80069ec <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f7fb ffce 	bl	8002988 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2202      	movs	r2, #2
 80069f0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	f003 0310 	and.w	r3, r3, #16
 80069fc:	2b10      	cmp	r3, #16
 80069fe:	d055      	beq.n	8006aac <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	22ca      	movs	r2, #202	@ 0xca
 8006a06:	625a      	str	r2, [r3, #36]	@ 0x24
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2253      	movs	r2, #83	@ 0x53
 8006a0e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 fa49 	bl	8006ea8 <RTC_EnterInitMode>
 8006a16:	4603      	mov	r3, r0
 8006a18:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006a1a:	7bfb      	ldrb	r3, [r7, #15]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d12c      	bne.n	8006a7a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	6812      	ldr	r2, [r2, #0]
 8006a2a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006a2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a32:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	6899      	ldr	r1, [r3, #8]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	685a      	ldr	r2, [r3, #4]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	431a      	orrs	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	695b      	ldr	r3, [r3, #20]
 8006a48:	431a      	orrs	r2, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	430a      	orrs	r2, r1
 8006a50:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	68d2      	ldr	r2, [r2, #12]
 8006a5a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6919      	ldr	r1, [r3, #16]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	041a      	lsls	r2, r3, #16
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	430a      	orrs	r2, r1
 8006a6e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 fa50 	bl	8006f16 <RTC_ExitInitMode>
 8006a76:	4603      	mov	r3, r0
 8006a78:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006a7a:	7bfb      	ldrb	r3, [r7, #15]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d110      	bne.n	8006aa2 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006a8e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	699a      	ldr	r2, [r3, #24]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	430a      	orrs	r2, r1
 8006aa0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	22ff      	movs	r2, #255	@ 0xff
 8006aa8:	625a      	str	r2, [r3, #36]	@ 0x24
 8006aaa:	e001      	b.n	8006ab0 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8006aac:	2300      	movs	r3, #0
 8006aae:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006ab0:	7bfb      	ldrb	r3, [r7, #15]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d102      	bne.n	8006abc <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8006abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3710      	adds	r7, #16
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}

08006ac6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006ac6:	b590      	push	{r4, r7, lr}
 8006ac8:	b087      	sub	sp, #28
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	60f8      	str	r0, [r7, #12]
 8006ace:	60b9      	str	r1, [r7, #8]
 8006ad0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	7f1b      	ldrb	r3, [r3, #28]
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d101      	bne.n	8006ae2 <HAL_RTC_SetTime+0x1c>
 8006ade:	2302      	movs	r3, #2
 8006ae0:	e087      	b.n	8006bf2 <HAL_RTC_SetTime+0x12c>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2202      	movs	r2, #2
 8006aec:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d126      	bne.n	8006b42 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d102      	bne.n	8006b08 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	2200      	movs	r2, #0
 8006b06:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f000 fa27 	bl	8006f60 <RTC_ByteToBcd2>
 8006b12:	4603      	mov	r3, r0
 8006b14:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	785b      	ldrb	r3, [r3, #1]
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 fa20 	bl	8006f60 <RTC_ByteToBcd2>
 8006b20:	4603      	mov	r3, r0
 8006b22:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006b24:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	789b      	ldrb	r3, [r3, #2]
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f000 fa18 	bl	8006f60 <RTC_ByteToBcd2>
 8006b30:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006b32:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	78db      	ldrb	r3, [r3, #3]
 8006b3a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	617b      	str	r3, [r7, #20]
 8006b40:	e018      	b.n	8006b74 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d102      	bne.n	8006b56 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	2200      	movs	r2, #0
 8006b54:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	785b      	ldrb	r3, [r3, #1]
 8006b60:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006b62:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006b64:	68ba      	ldr	r2, [r7, #8]
 8006b66:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006b68:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	78db      	ldrb	r3, [r3, #3]
 8006b6e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006b70:	4313      	orrs	r3, r2
 8006b72:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	22ca      	movs	r2, #202	@ 0xca
 8006b7a:	625a      	str	r2, [r3, #36]	@ 0x24
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2253      	movs	r2, #83	@ 0x53
 8006b82:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f000 f98f 	bl	8006ea8 <RTC_EnterInitMode>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006b8e:	7cfb      	ldrb	r3, [r7, #19]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d120      	bne.n	8006bd6 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8006b9e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006ba2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	689a      	ldr	r2, [r3, #8]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006bb2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6899      	ldr	r1, [r3, #8]
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	68da      	ldr	r2, [r3, #12]
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	431a      	orrs	r2, r3
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	430a      	orrs	r2, r1
 8006bca:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f000 f9a2 	bl	8006f16 <RTC_ExitInitMode>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006bd6:	7cfb      	ldrb	r3, [r7, #19]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d102      	bne.n	8006be2 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2201      	movs	r2, #1
 8006be0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	22ff      	movs	r2, #255	@ 0xff
 8006be8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2200      	movs	r2, #0
 8006bee:	771a      	strb	r2, [r3, #28]

  return status;
 8006bf0:	7cfb      	ldrb	r3, [r7, #19]
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	371c      	adds	r7, #28
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd90      	pop	{r4, r7, pc}

08006bfa <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b086      	sub	sp, #24
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	60f8      	str	r0, [r7, #12]
 8006c02:	60b9      	str	r1, [r7, #8]
 8006c04:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006c06:	2300      	movs	r3, #0
 8006c08:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8006c2c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006c30:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	0c1b      	lsrs	r3, r3, #16
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c3c:	b2da      	uxtb	r2, r3
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	0a1b      	lsrs	r3, r3, #8
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c4c:	b2da      	uxtb	r2, r3
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c5a:	b2da      	uxtb	r2, r3
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	0d9b      	lsrs	r3, r3, #22
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	f003 0301 	and.w	r3, r3, #1
 8006c6a:	b2da      	uxtb	r2, r3
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d11a      	bne.n	8006cac <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 f98e 	bl	8006f9c <RTC_Bcd2ToByte>
 8006c80:	4603      	mov	r3, r0
 8006c82:	461a      	mov	r2, r3
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	785b      	ldrb	r3, [r3, #1]
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f000 f985 	bl	8006f9c <RTC_Bcd2ToByte>
 8006c92:	4603      	mov	r3, r0
 8006c94:	461a      	mov	r2, r3
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	789b      	ldrb	r3, [r3, #2]
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f000 f97c 	bl	8006f9c <RTC_Bcd2ToByte>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3718      	adds	r7, #24
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}

08006cb6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006cb6:	b590      	push	{r4, r7, lr}
 8006cb8:	b087      	sub	sp, #28
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	60f8      	str	r0, [r7, #12]
 8006cbe:	60b9      	str	r1, [r7, #8]
 8006cc0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	7f1b      	ldrb	r3, [r3, #28]
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d101      	bne.n	8006cd2 <HAL_RTC_SetDate+0x1c>
 8006cce:	2302      	movs	r3, #2
 8006cd0:	e071      	b.n	8006db6 <HAL_RTC_SetDate+0x100>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2202      	movs	r2, #2
 8006cdc:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d10e      	bne.n	8006d02 <HAL_RTC_SetDate+0x4c>
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	785b      	ldrb	r3, [r3, #1]
 8006ce8:	f003 0310 	and.w	r3, r3, #16
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d008      	beq.n	8006d02 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	785b      	ldrb	r3, [r3, #1]
 8006cf4:	f023 0310 	bic.w	r3, r3, #16
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	330a      	adds	r3, #10
 8006cfc:	b2da      	uxtb	r2, r3
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d11c      	bne.n	8006d42 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	78db      	ldrb	r3, [r3, #3]
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f000 f927 	bl	8006f60 <RTC_ByteToBcd2>
 8006d12:	4603      	mov	r3, r0
 8006d14:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	785b      	ldrb	r3, [r3, #1]
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f000 f920 	bl	8006f60 <RTC_ByteToBcd2>
 8006d20:	4603      	mov	r3, r0
 8006d22:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006d24:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	789b      	ldrb	r3, [r3, #2]
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f000 f918 	bl	8006f60 <RTC_ByteToBcd2>
 8006d30:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006d32:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	617b      	str	r3, [r7, #20]
 8006d40:	e00e      	b.n	8006d60 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	78db      	ldrb	r3, [r3, #3]
 8006d46:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	785b      	ldrb	r3, [r3, #1]
 8006d4c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006d4e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006d50:	68ba      	ldr	r2, [r7, #8]
 8006d52:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006d54:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	22ca      	movs	r2, #202	@ 0xca
 8006d66:	625a      	str	r2, [r3, #36]	@ 0x24
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2253      	movs	r2, #83	@ 0x53
 8006d6e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	f000 f899 	bl	8006ea8 <RTC_EnterInitMode>
 8006d76:	4603      	mov	r3, r0
 8006d78:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006d7a:	7cfb      	ldrb	r3, [r7, #19]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d10c      	bne.n	8006d9a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006d8a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006d8e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	f000 f8c0 	bl	8006f16 <RTC_ExitInitMode>
 8006d96:	4603      	mov	r3, r0
 8006d98:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006d9a:	7cfb      	ldrb	r3, [r7, #19]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d102      	bne.n	8006da6 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2201      	movs	r2, #1
 8006da4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	22ff      	movs	r2, #255	@ 0xff
 8006dac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2200      	movs	r2, #0
 8006db2:	771a      	strb	r2, [r3, #28]

  return status;
 8006db4:	7cfb      	ldrb	r3, [r7, #19]
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	371c      	adds	r7, #28
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd90      	pop	{r4, r7, pc}

08006dbe <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b086      	sub	sp, #24
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	60f8      	str	r0, [r7, #12]
 8006dc6:	60b9      	str	r1, [r7, #8]
 8006dc8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006dd8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006ddc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	0c1b      	lsrs	r3, r3, #16
 8006de2:	b2da      	uxtb	r2, r3
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	0a1b      	lsrs	r3, r3, #8
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	f003 031f 	and.w	r3, r3, #31
 8006df2:	b2da      	uxtb	r2, r3
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e00:	b2da      	uxtb	r2, r3
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	0b5b      	lsrs	r3, r3, #13
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	f003 0307 	and.w	r3, r3, #7
 8006e10:	b2da      	uxtb	r2, r3
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d11a      	bne.n	8006e52 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	78db      	ldrb	r3, [r3, #3]
 8006e20:	4618      	mov	r0, r3
 8006e22:	f000 f8bb 	bl	8006f9c <RTC_Bcd2ToByte>
 8006e26:	4603      	mov	r3, r0
 8006e28:	461a      	mov	r2, r3
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	785b      	ldrb	r3, [r3, #1]
 8006e32:	4618      	mov	r0, r3
 8006e34:	f000 f8b2 	bl	8006f9c <RTC_Bcd2ToByte>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	789b      	ldrb	r3, [r3, #2]
 8006e44:	4618      	mov	r0, r3
 8006e46:	f000 f8a9 	bl	8006f9c <RTC_Bcd2ToByte>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3718      	adds	r7, #24
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e64:	2300      	movs	r3, #0
 8006e66:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a0d      	ldr	r2, [pc, #52]	@ (8006ea4 <HAL_RTC_WaitForSynchro+0x48>)
 8006e6e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e70:	f7fc f934 	bl	80030dc <HAL_GetTick>
 8006e74:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006e76:	e009      	b.n	8006e8c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006e78:	f7fc f930 	bl	80030dc <HAL_GetTick>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006e86:	d901      	bls.n	8006e8c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	e007      	b.n	8006e9c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	f003 0320 	and.w	r3, r3, #32
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d0ee      	beq.n	8006e78 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3710      	adds	r7, #16
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	00017f5f 	.word	0x00017f5f

08006ea8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d122      	bne.n	8006f0c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68da      	ldr	r2, [r3, #12]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006ed4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006ed6:	f7fc f901 	bl	80030dc <HAL_GetTick>
 8006eda:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006edc:	e00c      	b.n	8006ef8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006ede:	f7fc f8fd 	bl	80030dc <HAL_GetTick>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006eec:	d904      	bls.n	8006ef8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2204      	movs	r2, #4
 8006ef2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d102      	bne.n	8006f0c <RTC_EnterInitMode+0x64>
 8006f06:	7bfb      	ldrb	r3, [r7, #15]
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d1e8      	bne.n	8006ede <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3710      	adds	r7, #16
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b084      	sub	sp, #16
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68da      	ldr	r2, [r3, #12]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006f30:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	f003 0320 	and.w	r3, r3, #32
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d10a      	bne.n	8006f56 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f7ff ff8b 	bl	8006e5c <HAL_RTC_WaitForSynchro>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d004      	beq.n	8006f56 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2204      	movs	r2, #4
 8006f50:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3710      	adds	r7, #16
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b085      	sub	sp, #20
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	4603      	mov	r3, r0
 8006f68:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8006f6e:	e005      	b.n	8006f7c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	3301      	adds	r3, #1
 8006f74:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8006f76:	79fb      	ldrb	r3, [r7, #7]
 8006f78:	3b0a      	subs	r3, #10
 8006f7a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006f7c:	79fb      	ldrb	r3, [r7, #7]
 8006f7e:	2b09      	cmp	r3, #9
 8006f80:	d8f6      	bhi.n	8006f70 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	011b      	lsls	r3, r3, #4
 8006f88:	b2da      	uxtb	r2, r3
 8006f8a:	79fb      	ldrb	r3, [r7, #7]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	b2db      	uxtb	r3, r3
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3714      	adds	r7, #20
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b085      	sub	sp, #20
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8006faa:	79fb      	ldrb	r3, [r7, #7]
 8006fac:	091b      	lsrs	r3, r3, #4
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	4413      	add	r3, r2
 8006fb8:	005b      	lsls	r3, r3, #1
 8006fba:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	b2da      	uxtb	r2, r3
 8006fc0:	79fb      	ldrb	r3, [r7, #7]
 8006fc2:	f003 030f 	and.w	r3, r3, #15
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	4413      	add	r3, r2
 8006fca:	b2db      	uxtb	r3, r3
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3714      	adds	r7, #20
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d101      	bne.n	8006fea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e07b      	b.n	80070e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d108      	bne.n	8007004 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ffa:	d009      	beq.n	8007010 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	61da      	str	r2, [r3, #28]
 8007002:	e005      	b.n	8007010 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800701c:	b2db      	uxtb	r3, r3
 800701e:	2b00      	cmp	r3, #0
 8007020:	d106      	bne.n	8007030 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f7fb fcd6 	bl	80029dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2202      	movs	r2, #2
 8007034:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007046:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007058:	431a      	orrs	r2, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007062:	431a      	orrs	r2, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	f003 0302 	and.w	r3, r3, #2
 800706c:	431a      	orrs	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	695b      	ldr	r3, [r3, #20]
 8007072:	f003 0301 	and.w	r3, r3, #1
 8007076:	431a      	orrs	r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007080:	431a      	orrs	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	69db      	ldr	r3, [r3, #28]
 8007086:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800708a:	431a      	orrs	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6a1b      	ldr	r3, [r3, #32]
 8007090:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007094:	ea42 0103 	orr.w	r1, r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800709c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	430a      	orrs	r2, r1
 80070a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	699b      	ldr	r3, [r3, #24]
 80070ac:	0c1b      	lsrs	r3, r3, #16
 80070ae:	f003 0104 	and.w	r1, r3, #4
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070b6:	f003 0210 	and.w	r2, r3, #16
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	430a      	orrs	r2, r1
 80070c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	69da      	ldr	r2, [r3, #28]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80070d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3708      	adds	r7, #8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}

080070ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b088      	sub	sp, #32
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	60f8      	str	r0, [r7, #12]
 80070f2:	60b9      	str	r1, [r7, #8]
 80070f4:	603b      	str	r3, [r7, #0]
 80070f6:	4613      	mov	r3, r2
 80070f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80070fa:	2300      	movs	r3, #0
 80070fc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007104:	2b01      	cmp	r3, #1
 8007106:	d101      	bne.n	800710c <HAL_SPI_Transmit+0x22>
 8007108:	2302      	movs	r3, #2
 800710a:	e12d      	b.n	8007368 <HAL_SPI_Transmit+0x27e>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007114:	f7fb ffe2 	bl	80030dc <HAL_GetTick>
 8007118:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800711a:	88fb      	ldrh	r3, [r7, #6]
 800711c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007124:	b2db      	uxtb	r3, r3
 8007126:	2b01      	cmp	r3, #1
 8007128:	d002      	beq.n	8007130 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800712a:	2302      	movs	r3, #2
 800712c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800712e:	e116      	b.n	800735e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d002      	beq.n	800713c <HAL_SPI_Transmit+0x52>
 8007136:	88fb      	ldrh	r3, [r7, #6]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d102      	bne.n	8007142 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007140:	e10d      	b.n	800735e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2203      	movs	r2, #3
 8007146:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2200      	movs	r2, #0
 800714e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	68ba      	ldr	r2, [r7, #8]
 8007154:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	88fa      	ldrh	r2, [r7, #6]
 800715a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	88fa      	ldrh	r2, [r7, #6]
 8007160:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2200      	movs	r2, #0
 8007166:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007188:	d10f      	bne.n	80071aa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007198:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80071a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071b4:	2b40      	cmp	r3, #64	@ 0x40
 80071b6:	d007      	beq.n	80071c8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80071c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071d0:	d14f      	bne.n	8007272 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d002      	beq.n	80071e0 <HAL_SPI_Transmit+0xf6>
 80071da:	8afb      	ldrh	r3, [r7, #22]
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d142      	bne.n	8007266 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071e4:	881a      	ldrh	r2, [r3, #0]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071f0:	1c9a      	adds	r2, r3, #2
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	3b01      	subs	r3, #1
 80071fe:	b29a      	uxth	r2, r3
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007204:	e02f      	b.n	8007266 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	f003 0302 	and.w	r3, r3, #2
 8007210:	2b02      	cmp	r3, #2
 8007212:	d112      	bne.n	800723a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007218:	881a      	ldrh	r2, [r3, #0]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007224:	1c9a      	adds	r2, r3, #2
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800722e:	b29b      	uxth	r3, r3
 8007230:	3b01      	subs	r3, #1
 8007232:	b29a      	uxth	r2, r3
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007238:	e015      	b.n	8007266 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800723a:	f7fb ff4f 	bl	80030dc <HAL_GetTick>
 800723e:	4602      	mov	r2, r0
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	1ad3      	subs	r3, r2, r3
 8007244:	683a      	ldr	r2, [r7, #0]
 8007246:	429a      	cmp	r2, r3
 8007248:	d803      	bhi.n	8007252 <HAL_SPI_Transmit+0x168>
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007250:	d102      	bne.n	8007258 <HAL_SPI_Transmit+0x16e>
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d106      	bne.n	8007266 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8007258:	2303      	movs	r3, #3
 800725a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007264:	e07b      	b.n	800735e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800726a:	b29b      	uxth	r3, r3
 800726c:	2b00      	cmp	r3, #0
 800726e:	d1ca      	bne.n	8007206 <HAL_SPI_Transmit+0x11c>
 8007270:	e050      	b.n	8007314 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d002      	beq.n	8007280 <HAL_SPI_Transmit+0x196>
 800727a:	8afb      	ldrh	r3, [r7, #22]
 800727c:	2b01      	cmp	r3, #1
 800727e:	d144      	bne.n	800730a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	330c      	adds	r3, #12
 800728a:	7812      	ldrb	r2, [r2, #0]
 800728c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007292:	1c5a      	adds	r2, r3, #1
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800729c:	b29b      	uxth	r3, r3
 800729e:	3b01      	subs	r3, #1
 80072a0:	b29a      	uxth	r2, r3
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80072a6:	e030      	b.n	800730a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	f003 0302 	and.w	r3, r3, #2
 80072b2:	2b02      	cmp	r3, #2
 80072b4:	d113      	bne.n	80072de <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	330c      	adds	r3, #12
 80072c0:	7812      	ldrb	r2, [r2, #0]
 80072c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072c8:	1c5a      	adds	r2, r3, #1
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	3b01      	subs	r3, #1
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	86da      	strh	r2, [r3, #54]	@ 0x36
 80072dc:	e015      	b.n	800730a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072de:	f7fb fefd 	bl	80030dc <HAL_GetTick>
 80072e2:	4602      	mov	r2, r0
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	683a      	ldr	r2, [r7, #0]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d803      	bhi.n	80072f6 <HAL_SPI_Transmit+0x20c>
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80072f4:	d102      	bne.n	80072fc <HAL_SPI_Transmit+0x212>
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d106      	bne.n	800730a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80072fc:	2303      	movs	r3, #3
 80072fe:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007308:	e029      	b.n	800735e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800730e:	b29b      	uxth	r3, r3
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1c9      	bne.n	80072a8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007314:	69ba      	ldr	r2, [r7, #24]
 8007316:	6839      	ldr	r1, [r7, #0]
 8007318:	68f8      	ldr	r0, [r7, #12]
 800731a:	f000 fd27 	bl	8007d6c <SPI_EndRxTxTransaction>
 800731e:	4603      	mov	r3, r0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d002      	beq.n	800732a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2220      	movs	r2, #32
 8007328:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d10a      	bne.n	8007348 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007332:	2300      	movs	r3, #0
 8007334:	613b      	str	r3, [r7, #16]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	613b      	str	r3, [r7, #16]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	613b      	str	r3, [r7, #16]
 8007346:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800734c:	2b00      	cmp	r3, #0
 800734e:	d002      	beq.n	8007356 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	77fb      	strb	r3, [r7, #31]
 8007354:	e003      	b.n	800735e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2201      	movs	r2, #1
 800735a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2200      	movs	r2, #0
 8007362:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007366:	7ffb      	ldrb	r3, [r7, #31]
}
 8007368:	4618      	mov	r0, r3
 800736a:	3720      	adds	r7, #32
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b088      	sub	sp, #32
 8007374:	af02      	add	r7, sp, #8
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	603b      	str	r3, [r7, #0]
 800737c:	4613      	mov	r3, r2
 800737e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007380:	2300      	movs	r3, #0
 8007382:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800738a:	b2db      	uxtb	r3, r3
 800738c:	2b01      	cmp	r3, #1
 800738e:	d002      	beq.n	8007396 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8007390:	2302      	movs	r3, #2
 8007392:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007394:	e0fb      	b.n	800758e <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800739e:	d112      	bne.n	80073c6 <HAL_SPI_Receive+0x56>
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d10e      	bne.n	80073c6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2204      	movs	r2, #4
 80073ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80073b0:	88fa      	ldrh	r2, [r7, #6]
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	9300      	str	r3, [sp, #0]
 80073b6:	4613      	mov	r3, r2
 80073b8:	68ba      	ldr	r2, [r7, #8]
 80073ba:	68b9      	ldr	r1, [r7, #8]
 80073bc:	68f8      	ldr	r0, [r7, #12]
 80073be:	f000 f8ef 	bl	80075a0 <HAL_SPI_TransmitReceive>
 80073c2:	4603      	mov	r3, r0
 80073c4:	e0e8      	b.n	8007598 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d101      	bne.n	80073d4 <HAL_SPI_Receive+0x64>
 80073d0:	2302      	movs	r3, #2
 80073d2:	e0e1      	b.n	8007598 <HAL_SPI_Receive+0x228>
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073dc:	f7fb fe7e 	bl	80030dc <HAL_GetTick>
 80073e0:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d002      	beq.n	80073ee <HAL_SPI_Receive+0x7e>
 80073e8:	88fb      	ldrh	r3, [r7, #6]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d102      	bne.n	80073f4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80073f2:	e0cc      	b.n	800758e <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2204      	movs	r2, #4
 80073f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2200      	movs	r2, #0
 8007400:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	68ba      	ldr	r2, [r7, #8]
 8007406:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	88fa      	ldrh	r2, [r7, #6]
 800740c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	88fa      	ldrh	r2, [r7, #6]
 8007412:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2200      	movs	r2, #0
 8007424:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2200      	movs	r2, #0
 800742a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2200      	movs	r2, #0
 8007430:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800743a:	d10f      	bne.n	800745c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800744a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800745a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007466:	2b40      	cmp	r3, #64	@ 0x40
 8007468:	d007      	beq.n	800747a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007478:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d16a      	bne.n	8007558 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007482:	e032      	b.n	80074ea <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	f003 0301 	and.w	r3, r3, #1
 800748e:	2b01      	cmp	r3, #1
 8007490:	d115      	bne.n	80074be <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f103 020c 	add.w	r2, r3, #12
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800749e:	7812      	ldrb	r2, [r2, #0]
 80074a0:	b2d2      	uxtb	r2, r2
 80074a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074a8:	1c5a      	adds	r2, r3, #1
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	3b01      	subs	r3, #1
 80074b6:	b29a      	uxth	r2, r3
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80074bc:	e015      	b.n	80074ea <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074be:	f7fb fe0d 	bl	80030dc <HAL_GetTick>
 80074c2:	4602      	mov	r2, r0
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	1ad3      	subs	r3, r2, r3
 80074c8:	683a      	ldr	r2, [r7, #0]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d803      	bhi.n	80074d6 <HAL_SPI_Receive+0x166>
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80074d4:	d102      	bne.n	80074dc <HAL_SPI_Receive+0x16c>
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d106      	bne.n	80074ea <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80074dc:	2303      	movs	r3, #3
 80074de:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80074e8:	e051      	b.n	800758e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d1c7      	bne.n	8007484 <HAL_SPI_Receive+0x114>
 80074f4:	e035      	b.n	8007562 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	f003 0301 	and.w	r3, r3, #1
 8007500:	2b01      	cmp	r3, #1
 8007502:	d113      	bne.n	800752c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68da      	ldr	r2, [r3, #12]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800750e:	b292      	uxth	r2, r2
 8007510:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007516:	1c9a      	adds	r2, r3, #2
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007520:	b29b      	uxth	r3, r3
 8007522:	3b01      	subs	r3, #1
 8007524:	b29a      	uxth	r2, r3
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800752a:	e015      	b.n	8007558 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800752c:	f7fb fdd6 	bl	80030dc <HAL_GetTick>
 8007530:	4602      	mov	r2, r0
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	1ad3      	subs	r3, r2, r3
 8007536:	683a      	ldr	r2, [r7, #0]
 8007538:	429a      	cmp	r2, r3
 800753a:	d803      	bhi.n	8007544 <HAL_SPI_Receive+0x1d4>
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007542:	d102      	bne.n	800754a <HAL_SPI_Receive+0x1da>
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d106      	bne.n	8007558 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800754a:	2303      	movs	r3, #3
 800754c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2201      	movs	r2, #1
 8007552:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007556:	e01a      	b.n	800758e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800755c:	b29b      	uxth	r3, r3
 800755e:	2b00      	cmp	r3, #0
 8007560:	d1c9      	bne.n	80074f6 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007562:	693a      	ldr	r2, [r7, #16]
 8007564:	6839      	ldr	r1, [r7, #0]
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f000 fb9a 	bl	8007ca0 <SPI_EndRxTransaction>
 800756c:	4603      	mov	r3, r0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d002      	beq.n	8007578 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2220      	movs	r2, #32
 8007576:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800757c:	2b00      	cmp	r3, #0
 800757e:	d002      	beq.n	8007586 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	75fb      	strb	r3, [r7, #23]
 8007584:	e003      	b.n	800758e <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2201      	movs	r2, #1
 800758a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2200      	movs	r2, #0
 8007592:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007596:	7dfb      	ldrb	r3, [r7, #23]
}
 8007598:	4618      	mov	r0, r3
 800759a:	3718      	adds	r7, #24
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b08c      	sub	sp, #48	@ 0x30
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	607a      	str	r2, [r7, #4]
 80075ac:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80075ae:	2301      	movs	r3, #1
 80075b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80075b2:	2300      	movs	r3, #0
 80075b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d101      	bne.n	80075c6 <HAL_SPI_TransmitReceive+0x26>
 80075c2:	2302      	movs	r3, #2
 80075c4:	e198      	b.n	80078f8 <HAL_SPI_TransmitReceive+0x358>
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2201      	movs	r2, #1
 80075ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075ce:	f7fb fd85 	bl	80030dc <HAL_GetTick>
 80075d2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80075da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80075e4:	887b      	ldrh	r3, [r7, #2]
 80075e6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80075e8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d00f      	beq.n	8007610 <HAL_SPI_TransmitReceive+0x70>
 80075f0:	69fb      	ldr	r3, [r7, #28]
 80075f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80075f6:	d107      	bne.n	8007608 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d103      	bne.n	8007608 <HAL_SPI_TransmitReceive+0x68>
 8007600:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007604:	2b04      	cmp	r3, #4
 8007606:	d003      	beq.n	8007610 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007608:	2302      	movs	r3, #2
 800760a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800760e:	e16d      	b.n	80078ec <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d005      	beq.n	8007622 <HAL_SPI_TransmitReceive+0x82>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d002      	beq.n	8007622 <HAL_SPI_TransmitReceive+0x82>
 800761c:	887b      	ldrh	r3, [r7, #2]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d103      	bne.n	800762a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007628:	e160      	b.n	80078ec <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007630:	b2db      	uxtb	r3, r3
 8007632:	2b04      	cmp	r3, #4
 8007634:	d003      	beq.n	800763e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2205      	movs	r2, #5
 800763a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	887a      	ldrh	r2, [r7, #2]
 800764e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	887a      	ldrh	r2, [r7, #2]
 8007654:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	68ba      	ldr	r2, [r7, #8]
 800765a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	887a      	ldrh	r2, [r7, #2]
 8007660:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	887a      	ldrh	r2, [r7, #2]
 8007666:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2200      	movs	r2, #0
 800766c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2200      	movs	r2, #0
 8007672:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800767e:	2b40      	cmp	r3, #64	@ 0x40
 8007680:	d007      	beq.n	8007692 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007690:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800769a:	d17c      	bne.n	8007796 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d002      	beq.n	80076aa <HAL_SPI_TransmitReceive+0x10a>
 80076a4:	8b7b      	ldrh	r3, [r7, #26]
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d16a      	bne.n	8007780 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076ae:	881a      	ldrh	r2, [r3, #0]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076ba:	1c9a      	adds	r2, r3, #2
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	3b01      	subs	r3, #1
 80076c8:	b29a      	uxth	r2, r3
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076ce:	e057      	b.n	8007780 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	f003 0302 	and.w	r3, r3, #2
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d11b      	bne.n	8007716 <HAL_SPI_TransmitReceive+0x176>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d016      	beq.n	8007716 <HAL_SPI_TransmitReceive+0x176>
 80076e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d113      	bne.n	8007716 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076f2:	881a      	ldrh	r2, [r3, #0]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076fe:	1c9a      	adds	r2, r3, #2
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007708:	b29b      	uxth	r3, r3
 800770a:	3b01      	subs	r3, #1
 800770c:	b29a      	uxth	r2, r3
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007712:	2300      	movs	r3, #0
 8007714:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	f003 0301 	and.w	r3, r3, #1
 8007720:	2b01      	cmp	r3, #1
 8007722:	d119      	bne.n	8007758 <HAL_SPI_TransmitReceive+0x1b8>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007728:	b29b      	uxth	r3, r3
 800772a:	2b00      	cmp	r3, #0
 800772c:	d014      	beq.n	8007758 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	68da      	ldr	r2, [r3, #12]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007738:	b292      	uxth	r2, r2
 800773a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007740:	1c9a      	adds	r2, r3, #2
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800774a:	b29b      	uxth	r3, r3
 800774c:	3b01      	subs	r3, #1
 800774e:	b29a      	uxth	r2, r3
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007754:	2301      	movs	r3, #1
 8007756:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007758:	f7fb fcc0 	bl	80030dc <HAL_GetTick>
 800775c:	4602      	mov	r2, r0
 800775e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007764:	429a      	cmp	r2, r3
 8007766:	d80b      	bhi.n	8007780 <HAL_SPI_TransmitReceive+0x1e0>
 8007768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800776a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800776e:	d007      	beq.n	8007780 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8007770:	2303      	movs	r3, #3
 8007772:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2201      	movs	r2, #1
 800777a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800777e:	e0b5      	b.n	80078ec <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007784:	b29b      	uxth	r3, r3
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1a2      	bne.n	80076d0 <HAL_SPI_TransmitReceive+0x130>
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800778e:	b29b      	uxth	r3, r3
 8007790:	2b00      	cmp	r3, #0
 8007792:	d19d      	bne.n	80076d0 <HAL_SPI_TransmitReceive+0x130>
 8007794:	e080      	b.n	8007898 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d002      	beq.n	80077a4 <HAL_SPI_TransmitReceive+0x204>
 800779e:	8b7b      	ldrh	r3, [r7, #26]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d16f      	bne.n	8007884 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	330c      	adds	r3, #12
 80077ae:	7812      	ldrb	r2, [r2, #0]
 80077b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077b6:	1c5a      	adds	r2, r3, #1
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	3b01      	subs	r3, #1
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077ca:	e05b      	b.n	8007884 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	f003 0302 	and.w	r3, r3, #2
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	d11c      	bne.n	8007814 <HAL_SPI_TransmitReceive+0x274>
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077de:	b29b      	uxth	r3, r3
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d017      	beq.n	8007814 <HAL_SPI_TransmitReceive+0x274>
 80077e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d114      	bne.n	8007814 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	330c      	adds	r3, #12
 80077f4:	7812      	ldrb	r2, [r2, #0]
 80077f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077fc:	1c5a      	adds	r2, r3, #1
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007806:	b29b      	uxth	r3, r3
 8007808:	3b01      	subs	r3, #1
 800780a:	b29a      	uxth	r2, r3
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007810:	2300      	movs	r3, #0
 8007812:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	f003 0301 	and.w	r3, r3, #1
 800781e:	2b01      	cmp	r3, #1
 8007820:	d119      	bne.n	8007856 <HAL_SPI_TransmitReceive+0x2b6>
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007826:	b29b      	uxth	r3, r3
 8007828:	2b00      	cmp	r3, #0
 800782a:	d014      	beq.n	8007856 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	68da      	ldr	r2, [r3, #12]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007836:	b2d2      	uxtb	r2, r2
 8007838:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800783e:	1c5a      	adds	r2, r3, #1
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007848:	b29b      	uxth	r3, r3
 800784a:	3b01      	subs	r3, #1
 800784c:	b29a      	uxth	r2, r3
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007852:	2301      	movs	r3, #1
 8007854:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007856:	f7fb fc41 	bl	80030dc <HAL_GetTick>
 800785a:	4602      	mov	r2, r0
 800785c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800785e:	1ad3      	subs	r3, r2, r3
 8007860:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007862:	429a      	cmp	r2, r3
 8007864:	d803      	bhi.n	800786e <HAL_SPI_TransmitReceive+0x2ce>
 8007866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007868:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800786c:	d102      	bne.n	8007874 <HAL_SPI_TransmitReceive+0x2d4>
 800786e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007870:	2b00      	cmp	r3, #0
 8007872:	d107      	bne.n	8007884 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8007874:	2303      	movs	r3, #3
 8007876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2201      	movs	r2, #1
 800787e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8007882:	e033      	b.n	80078ec <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007888:	b29b      	uxth	r3, r3
 800788a:	2b00      	cmp	r3, #0
 800788c:	d19e      	bne.n	80077cc <HAL_SPI_TransmitReceive+0x22c>
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007892:	b29b      	uxth	r3, r3
 8007894:	2b00      	cmp	r3, #0
 8007896:	d199      	bne.n	80077cc <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007898:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800789a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	f000 fa65 	bl	8007d6c <SPI_EndRxTxTransaction>
 80078a2:	4603      	mov	r3, r0
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d006      	beq.n	80078b6 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2220      	movs	r2, #32
 80078b2:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80078b4:	e01a      	b.n	80078ec <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d10a      	bne.n	80078d4 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80078be:	2300      	movs	r3, #0
 80078c0:	617b      	str	r3, [r7, #20]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	617b      	str	r3, [r7, #20]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	617b      	str	r3, [r7, #20]
 80078d2:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d003      	beq.n	80078e4 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078e2:	e003      	b.n	80078ec <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80078f4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3730      	adds	r7, #48	@ 0x30
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b086      	sub	sp, #24
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	4613      	mov	r3, r2
 800790c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800790e:	2300      	movs	r3, #0
 8007910:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007918:	2b01      	cmp	r3, #1
 800791a:	d101      	bne.n	8007920 <HAL_SPI_Transmit_DMA+0x20>
 800791c:	2302      	movs	r3, #2
 800791e:	e097      	b.n	8007a50 <HAL_SPI_Transmit_DMA+0x150>
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800792e:	b2db      	uxtb	r3, r3
 8007930:	2b01      	cmp	r3, #1
 8007932:	d002      	beq.n	800793a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8007934:	2302      	movs	r3, #2
 8007936:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007938:	e085      	b.n	8007a46 <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d002      	beq.n	8007946 <HAL_SPI_Transmit_DMA+0x46>
 8007940:	88fb      	ldrh	r3, [r7, #6]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d102      	bne.n	800794c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	75fb      	strb	r3, [r7, #23]
    goto error;
 800794a:	e07c      	b.n	8007a46 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2203      	movs	r2, #3
 8007950:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2200      	movs	r2, #0
 8007958:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	68ba      	ldr	r2, [r7, #8]
 800795e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	88fa      	ldrh	r2, [r7, #6]
 8007964:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	88fa      	ldrh	r2, [r7, #6]
 800796a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2200      	movs	r2, #0
 8007970:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2200      	movs	r2, #0
 8007976:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2200      	movs	r2, #0
 800797c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2200      	movs	r2, #0
 8007982:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2200      	movs	r2, #0
 8007988:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007992:	d10f      	bne.n	80079b4 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80079b2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079b8:	4a27      	ldr	r2, [pc, #156]	@ (8007a58 <HAL_SPI_Transmit_DMA+0x158>)
 80079ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079c0:	4a26      	ldr	r2, [pc, #152]	@ (8007a5c <HAL_SPI_Transmit_DMA+0x15c>)
 80079c2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079c8:	4a25      	ldr	r2, [pc, #148]	@ (8007a60 <HAL_SPI_Transmit_DMA+0x160>)
 80079ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079d0:	2200      	movs	r2, #0
 80079d2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079dc:	4619      	mov	r1, r3
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	330c      	adds	r3, #12
 80079e4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079ea:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80079ec:	f7fc fbce 	bl	800418c <HAL_DMA_Start_IT>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d008      	beq.n	8007a08 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079fa:	f043 0210 	orr.w	r2, r3, #16
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	75fb      	strb	r3, [r7, #23]

    goto error;
 8007a06:	e01e      	b.n	8007a46 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a12:	2b40      	cmp	r3, #64	@ 0x40
 8007a14:	d007      	beq.n	8007a26 <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a24:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	685a      	ldr	r2, [r3, #4]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f042 0220 	orr.w	r2, r2, #32
 8007a34:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	685a      	ldr	r2, [r3, #4]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f042 0202 	orr.w	r2, r2, #2
 8007a44:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3718      	adds	r7, #24
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	08007b35 	.word	0x08007b35
 8007a5c:	08007a8d 	.word	0x08007a8d
 8007a60:	08007b51 	.word	0x08007b51

08007a64 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007a6c:	bf00      	nop
 8007a6e:	370c      	adds	r7, #12
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007a80:	bf00      	nop
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b086      	sub	sp, #24
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a98:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a9a:	f7fb fb1f 	bl	80030dc <HAL_GetTick>
 8007a9e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007aaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007aae:	d03b      	beq.n	8007b28 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	685a      	ldr	r2, [r3, #4]
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f022 0220 	bic.w	r2, r2, #32
 8007abe:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	685a      	ldr	r2, [r3, #4]
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f022 0202 	bic.w	r2, r2, #2
 8007ace:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007ad0:	693a      	ldr	r2, [r7, #16]
 8007ad2:	2164      	movs	r1, #100	@ 0x64
 8007ad4:	6978      	ldr	r0, [r7, #20]
 8007ad6:	f000 f949 	bl	8007d6c <SPI_EndRxTxTransaction>
 8007ada:	4603      	mov	r3, r0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d005      	beq.n	8007aec <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ae4:	f043 0220 	orr.w	r2, r3, #32
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d10a      	bne.n	8007b0a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007af4:	2300      	movs	r3, #0
 8007af6:	60fb      	str	r3, [r7, #12]
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	60fb      	str	r3, [r7, #12]
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	60fb      	str	r3, [r7, #12]
 8007b08:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	2201      	movs	r2, #1
 8007b14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d003      	beq.n	8007b28 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007b20:	6978      	ldr	r0, [r7, #20]
 8007b22:	f7ff ffa9 	bl	8007a78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007b26:	e002      	b.n	8007b2e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007b28:	6978      	ldr	r0, [r7, #20]
 8007b2a:	f7fb f9a1 	bl	8002e70 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007b2e:	3718      	adds	r7, #24
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b40:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007b42:	68f8      	ldr	r0, [r7, #12]
 8007b44:	f7ff ff8e 	bl	8007a64 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007b48:	bf00      	nop
 8007b4a:	3710      	adds	r7, #16
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b5c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	685a      	ldr	r2, [r3, #4]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f022 0203 	bic.w	r2, r2, #3
 8007b6c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b72:	f043 0210 	orr.w	r2, r3, #16
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007b82:	68f8      	ldr	r0, [r7, #12]
 8007b84:	f7ff ff78 	bl	8007a78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007b88:	bf00      	nop
 8007b8a:	3710      	adds	r7, #16
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b088      	sub	sp, #32
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	603b      	str	r3, [r7, #0]
 8007b9c:	4613      	mov	r3, r2
 8007b9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007ba0:	f7fb fa9c 	bl	80030dc <HAL_GetTick>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ba8:	1a9b      	subs	r3, r3, r2
 8007baa:	683a      	ldr	r2, [r7, #0]
 8007bac:	4413      	add	r3, r2
 8007bae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007bb0:	f7fb fa94 	bl	80030dc <HAL_GetTick>
 8007bb4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007bb6:	4b39      	ldr	r3, [pc, #228]	@ (8007c9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	015b      	lsls	r3, r3, #5
 8007bbc:	0d1b      	lsrs	r3, r3, #20
 8007bbe:	69fa      	ldr	r2, [r7, #28]
 8007bc0:	fb02 f303 	mul.w	r3, r2, r3
 8007bc4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007bc6:	e054      	b.n	8007c72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007bce:	d050      	beq.n	8007c72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007bd0:	f7fb fa84 	bl	80030dc <HAL_GetTick>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	1ad3      	subs	r3, r2, r3
 8007bda:	69fa      	ldr	r2, [r7, #28]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d902      	bls.n	8007be6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d13d      	bne.n	8007c62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	685a      	ldr	r2, [r3, #4]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007bf4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007bfe:	d111      	bne.n	8007c24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c08:	d004      	beq.n	8007c14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c12:	d107      	bne.n	8007c24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c2c:	d10f      	bne.n	8007c4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007c3c:	601a      	str	r2, [r3, #0]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007c4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2201      	movs	r2, #1
 8007c52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	e017      	b.n	8007c92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d101      	bne.n	8007c6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	3b01      	subs	r3, #1
 8007c70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	689a      	ldr	r2, [r3, #8]
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	4013      	ands	r3, r2
 8007c7c:	68ba      	ldr	r2, [r7, #8]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	bf0c      	ite	eq
 8007c82:	2301      	moveq	r3, #1
 8007c84:	2300      	movne	r3, #0
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	461a      	mov	r2, r3
 8007c8a:	79fb      	ldrb	r3, [r7, #7]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d19b      	bne.n	8007bc8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3720      	adds	r7, #32
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	2000001c 	.word	0x2000001c

08007ca0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b086      	sub	sp, #24
 8007ca4:	af02      	add	r7, sp, #8
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	60b9      	str	r1, [r7, #8]
 8007caa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007cb4:	d111      	bne.n	8007cda <SPI_EndRxTransaction+0x3a>
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cbe:	d004      	beq.n	8007cca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cc8:	d107      	bne.n	8007cda <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007cd8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ce2:	d12a      	bne.n	8007d3a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cec:	d012      	beq.n	8007d14 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	9300      	str	r3, [sp, #0]
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	2180      	movs	r1, #128	@ 0x80
 8007cf8:	68f8      	ldr	r0, [r7, #12]
 8007cfa:	f7ff ff49 	bl	8007b90 <SPI_WaitFlagStateUntilTimeout>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d02d      	beq.n	8007d60 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d08:	f043 0220 	orr.w	r2, r3, #32
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007d10:	2303      	movs	r3, #3
 8007d12:	e026      	b.n	8007d62 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	9300      	str	r3, [sp, #0]
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	2101      	movs	r1, #1
 8007d1e:	68f8      	ldr	r0, [r7, #12]
 8007d20:	f7ff ff36 	bl	8007b90 <SPI_WaitFlagStateUntilTimeout>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d01a      	beq.n	8007d60 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d2e:	f043 0220 	orr.w	r2, r3, #32
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007d36:	2303      	movs	r3, #3
 8007d38:	e013      	b.n	8007d62 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	9300      	str	r3, [sp, #0]
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	2200      	movs	r2, #0
 8007d42:	2101      	movs	r1, #1
 8007d44:	68f8      	ldr	r0, [r7, #12]
 8007d46:	f7ff ff23 	bl	8007b90 <SPI_WaitFlagStateUntilTimeout>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d007      	beq.n	8007d60 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d54:	f043 0220 	orr.w	r2, r3, #32
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007d5c:	2303      	movs	r3, #3
 8007d5e:	e000      	b.n	8007d62 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
	...

08007d6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b088      	sub	sp, #32
 8007d70:	af02      	add	r7, sp, #8
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	60b9      	str	r1, [r7, #8]
 8007d76:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	9300      	str	r3, [sp, #0]
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	2102      	movs	r1, #2
 8007d82:	68f8      	ldr	r0, [r7, #12]
 8007d84:	f7ff ff04 	bl	8007b90 <SPI_WaitFlagStateUntilTimeout>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d007      	beq.n	8007d9e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d92:	f043 0220 	orr.w	r2, r3, #32
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007d9a:	2303      	movs	r3, #3
 8007d9c:	e032      	b.n	8007e04 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007d9e:	4b1b      	ldr	r3, [pc, #108]	@ (8007e0c <SPI_EndRxTxTransaction+0xa0>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a1b      	ldr	r2, [pc, #108]	@ (8007e10 <SPI_EndRxTxTransaction+0xa4>)
 8007da4:	fba2 2303 	umull	r2, r3, r2, r3
 8007da8:	0d5b      	lsrs	r3, r3, #21
 8007daa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007dae:	fb02 f303 	mul.w	r3, r2, r3
 8007db2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007dbc:	d112      	bne.n	8007de4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	9300      	str	r3, [sp, #0]
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	2180      	movs	r1, #128	@ 0x80
 8007dc8:	68f8      	ldr	r0, [r7, #12]
 8007dca:	f7ff fee1 	bl	8007b90 <SPI_WaitFlagStateUntilTimeout>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d016      	beq.n	8007e02 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dd8:	f043 0220 	orr.w	r2, r3, #32
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007de0:	2303      	movs	r3, #3
 8007de2:	e00f      	b.n	8007e04 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00a      	beq.n	8007e00 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	3b01      	subs	r3, #1
 8007dee:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dfa:	2b80      	cmp	r3, #128	@ 0x80
 8007dfc:	d0f2      	beq.n	8007de4 <SPI_EndRxTxTransaction+0x78>
 8007dfe:	e000      	b.n	8007e02 <SPI_EndRxTxTransaction+0x96>
        break;
 8007e00:	bf00      	nop
  }

  return HAL_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3718      	adds	r7, #24
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	2000001c 	.word	0x2000001c
 8007e10:	165e9f81 	.word	0x165e9f81

08007e14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b082      	sub	sp, #8
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d101      	bne.n	8007e26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	e041      	b.n	8007eaa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d106      	bne.n	8007e40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f7fa fed0 	bl	8002be0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2202      	movs	r2, #2
 8007e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	3304      	adds	r3, #4
 8007e50:	4619      	mov	r1, r3
 8007e52:	4610      	mov	r0, r2
 8007e54:	f000 f9c0 	bl	80081d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3708      	adds	r7, #8
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
	...

08007eb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d001      	beq.n	8007ecc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e04e      	b.n	8007f6a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2202      	movs	r2, #2
 8007ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	68da      	ldr	r2, [r3, #12]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f042 0201 	orr.w	r2, r2, #1
 8007ee2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a23      	ldr	r2, [pc, #140]	@ (8007f78 <HAL_TIM_Base_Start_IT+0xc4>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d022      	beq.n	8007f34 <HAL_TIM_Base_Start_IT+0x80>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ef6:	d01d      	beq.n	8007f34 <HAL_TIM_Base_Start_IT+0x80>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a1f      	ldr	r2, [pc, #124]	@ (8007f7c <HAL_TIM_Base_Start_IT+0xc8>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d018      	beq.n	8007f34 <HAL_TIM_Base_Start_IT+0x80>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a1e      	ldr	r2, [pc, #120]	@ (8007f80 <HAL_TIM_Base_Start_IT+0xcc>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d013      	beq.n	8007f34 <HAL_TIM_Base_Start_IT+0x80>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a1c      	ldr	r2, [pc, #112]	@ (8007f84 <HAL_TIM_Base_Start_IT+0xd0>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d00e      	beq.n	8007f34 <HAL_TIM_Base_Start_IT+0x80>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a1b      	ldr	r2, [pc, #108]	@ (8007f88 <HAL_TIM_Base_Start_IT+0xd4>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d009      	beq.n	8007f34 <HAL_TIM_Base_Start_IT+0x80>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a19      	ldr	r2, [pc, #100]	@ (8007f8c <HAL_TIM_Base_Start_IT+0xd8>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d004      	beq.n	8007f34 <HAL_TIM_Base_Start_IT+0x80>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a18      	ldr	r2, [pc, #96]	@ (8007f90 <HAL_TIM_Base_Start_IT+0xdc>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d111      	bne.n	8007f58 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	f003 0307 	and.w	r3, r3, #7
 8007f3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2b06      	cmp	r3, #6
 8007f44:	d010      	beq.n	8007f68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f042 0201 	orr.w	r2, r2, #1
 8007f54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f56:	e007      	b.n	8007f68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f042 0201 	orr.w	r2, r2, #1
 8007f66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f68:	2300      	movs	r3, #0
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3714      	adds	r7, #20
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr
 8007f76:	bf00      	nop
 8007f78:	40010000 	.word	0x40010000
 8007f7c:	40000400 	.word	0x40000400
 8007f80:	40000800 	.word	0x40000800
 8007f84:	40000c00 	.word	0x40000c00
 8007f88:	40010400 	.word	0x40010400
 8007f8c:	40014000 	.word	0x40014000
 8007f90:	40001800 	.word	0x40001800

08007f94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	f003 0302 	and.w	r3, r3, #2
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d020      	beq.n	8007ff8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f003 0302 	and.w	r3, r3, #2
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d01b      	beq.n	8007ff8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f06f 0202 	mvn.w	r2, #2
 8007fc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	699b      	ldr	r3, [r3, #24]
 8007fd6:	f003 0303 	and.w	r3, r3, #3
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d003      	beq.n	8007fe6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 f8dc 	bl	800819c <HAL_TIM_IC_CaptureCallback>
 8007fe4:	e005      	b.n	8007ff2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 f8ce 	bl	8008188 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 f8df 	bl	80081b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	f003 0304 	and.w	r3, r3, #4
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d020      	beq.n	8008044 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f003 0304 	and.w	r3, r3, #4
 8008008:	2b00      	cmp	r3, #0
 800800a:	d01b      	beq.n	8008044 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f06f 0204 	mvn.w	r2, #4
 8008014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2202      	movs	r2, #2
 800801a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	699b      	ldr	r3, [r3, #24]
 8008022:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008026:	2b00      	cmp	r3, #0
 8008028:	d003      	beq.n	8008032 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 f8b6 	bl	800819c <HAL_TIM_IC_CaptureCallback>
 8008030:	e005      	b.n	800803e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 f8a8 	bl	8008188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 f8b9 	bl	80081b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	f003 0308 	and.w	r3, r3, #8
 800804a:	2b00      	cmp	r3, #0
 800804c:	d020      	beq.n	8008090 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f003 0308 	and.w	r3, r3, #8
 8008054:	2b00      	cmp	r3, #0
 8008056:	d01b      	beq.n	8008090 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f06f 0208 	mvn.w	r2, #8
 8008060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2204      	movs	r2, #4
 8008066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	69db      	ldr	r3, [r3, #28]
 800806e:	f003 0303 	and.w	r3, r3, #3
 8008072:	2b00      	cmp	r3, #0
 8008074:	d003      	beq.n	800807e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 f890 	bl	800819c <HAL_TIM_IC_CaptureCallback>
 800807c:	e005      	b.n	800808a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f882 	bl	8008188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 f893 	bl	80081b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	f003 0310 	and.w	r3, r3, #16
 8008096:	2b00      	cmp	r3, #0
 8008098:	d020      	beq.n	80080dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f003 0310 	and.w	r3, r3, #16
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d01b      	beq.n	80080dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f06f 0210 	mvn.w	r2, #16
 80080ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2208      	movs	r2, #8
 80080b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	69db      	ldr	r3, [r3, #28]
 80080ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d003      	beq.n	80080ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 f86a 	bl	800819c <HAL_TIM_IC_CaptureCallback>
 80080c8:	e005      	b.n	80080d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 f85c 	bl	8008188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 f86d 	bl	80081b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2200      	movs	r2, #0
 80080da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	f003 0301 	and.w	r3, r3, #1
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d00c      	beq.n	8008100 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f003 0301 	and.w	r3, r3, #1
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d007      	beq.n	8008100 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f06f 0201 	mvn.w	r2, #1
 80080f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 f83a 	bl	8008174 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00c      	beq.n	8008124 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008110:	2b00      	cmp	r3, #0
 8008112:	d007      	beq.n	8008124 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800811c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 f98c 	bl	800843c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00c      	beq.n	8008148 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008134:	2b00      	cmp	r3, #0
 8008136:	d007      	beq.n	8008148 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 f83e 	bl	80081c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	f003 0320 	and.w	r3, r3, #32
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00c      	beq.n	800816c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f003 0320 	and.w	r3, r3, #32
 8008158:	2b00      	cmp	r3, #0
 800815a:	d007      	beq.n	800816c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f06f 0220 	mvn.w	r2, #32
 8008164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f95e 	bl	8008428 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800816c:	bf00      	nop
 800816e:	3710      	adds	r7, #16
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800817c:	bf00      	nop
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008190:	bf00      	nop
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80081a4:	bf00      	nop
 80081a6:	370c      	adds	r7, #12
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081b8:	bf00      	nop
 80081ba:	370c      	adds	r7, #12
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80081cc:	bf00      	nop
 80081ce:	370c      	adds	r7, #12
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	4a46      	ldr	r2, [pc, #280]	@ (8008304 <TIM_Base_SetConfig+0x12c>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d013      	beq.n	8008218 <TIM_Base_SetConfig+0x40>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081f6:	d00f      	beq.n	8008218 <TIM_Base_SetConfig+0x40>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4a43      	ldr	r2, [pc, #268]	@ (8008308 <TIM_Base_SetConfig+0x130>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d00b      	beq.n	8008218 <TIM_Base_SetConfig+0x40>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4a42      	ldr	r2, [pc, #264]	@ (800830c <TIM_Base_SetConfig+0x134>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d007      	beq.n	8008218 <TIM_Base_SetConfig+0x40>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a41      	ldr	r2, [pc, #260]	@ (8008310 <TIM_Base_SetConfig+0x138>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d003      	beq.n	8008218 <TIM_Base_SetConfig+0x40>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4a40      	ldr	r2, [pc, #256]	@ (8008314 <TIM_Base_SetConfig+0x13c>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d108      	bne.n	800822a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800821e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	68fa      	ldr	r2, [r7, #12]
 8008226:	4313      	orrs	r3, r2
 8008228:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	4a35      	ldr	r2, [pc, #212]	@ (8008304 <TIM_Base_SetConfig+0x12c>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d02b      	beq.n	800828a <TIM_Base_SetConfig+0xb2>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008238:	d027      	beq.n	800828a <TIM_Base_SetConfig+0xb2>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4a32      	ldr	r2, [pc, #200]	@ (8008308 <TIM_Base_SetConfig+0x130>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d023      	beq.n	800828a <TIM_Base_SetConfig+0xb2>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4a31      	ldr	r2, [pc, #196]	@ (800830c <TIM_Base_SetConfig+0x134>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d01f      	beq.n	800828a <TIM_Base_SetConfig+0xb2>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	4a30      	ldr	r2, [pc, #192]	@ (8008310 <TIM_Base_SetConfig+0x138>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d01b      	beq.n	800828a <TIM_Base_SetConfig+0xb2>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	4a2f      	ldr	r2, [pc, #188]	@ (8008314 <TIM_Base_SetConfig+0x13c>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d017      	beq.n	800828a <TIM_Base_SetConfig+0xb2>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4a2e      	ldr	r2, [pc, #184]	@ (8008318 <TIM_Base_SetConfig+0x140>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d013      	beq.n	800828a <TIM_Base_SetConfig+0xb2>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a2d      	ldr	r2, [pc, #180]	@ (800831c <TIM_Base_SetConfig+0x144>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d00f      	beq.n	800828a <TIM_Base_SetConfig+0xb2>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4a2c      	ldr	r2, [pc, #176]	@ (8008320 <TIM_Base_SetConfig+0x148>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d00b      	beq.n	800828a <TIM_Base_SetConfig+0xb2>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a2b      	ldr	r2, [pc, #172]	@ (8008324 <TIM_Base_SetConfig+0x14c>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d007      	beq.n	800828a <TIM_Base_SetConfig+0xb2>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a2a      	ldr	r2, [pc, #168]	@ (8008328 <TIM_Base_SetConfig+0x150>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d003      	beq.n	800828a <TIM_Base_SetConfig+0xb2>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4a29      	ldr	r2, [pc, #164]	@ (800832c <TIM_Base_SetConfig+0x154>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d108      	bne.n	800829c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008290:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	68fa      	ldr	r2, [r7, #12]
 8008298:	4313      	orrs	r3, r2
 800829a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	695b      	ldr	r3, [r3, #20]
 80082a6:	4313      	orrs	r3, r2
 80082a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	689a      	ldr	r2, [r3, #8]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	4a10      	ldr	r2, [pc, #64]	@ (8008304 <TIM_Base_SetConfig+0x12c>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d003      	beq.n	80082d0 <TIM_Base_SetConfig+0xf8>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4a12      	ldr	r2, [pc, #72]	@ (8008314 <TIM_Base_SetConfig+0x13c>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d103      	bne.n	80082d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	691a      	ldr	r2, [r3, #16]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2201      	movs	r2, #1
 80082dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	f003 0301 	and.w	r3, r3, #1
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d105      	bne.n	80082f6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	691b      	ldr	r3, [r3, #16]
 80082ee:	f023 0201 	bic.w	r2, r3, #1
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	611a      	str	r2, [r3, #16]
  }
}
 80082f6:	bf00      	nop
 80082f8:	3714      	adds	r7, #20
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr
 8008302:	bf00      	nop
 8008304:	40010000 	.word	0x40010000
 8008308:	40000400 	.word	0x40000400
 800830c:	40000800 	.word	0x40000800
 8008310:	40000c00 	.word	0x40000c00
 8008314:	40010400 	.word	0x40010400
 8008318:	40014000 	.word	0x40014000
 800831c:	40014400 	.word	0x40014400
 8008320:	40014800 	.word	0x40014800
 8008324:	40001800 	.word	0x40001800
 8008328:	40001c00 	.word	0x40001c00
 800832c:	40002000 	.word	0x40002000

08008330 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008330:	b480      	push	{r7}
 8008332:	b085      	sub	sp, #20
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008340:	2b01      	cmp	r3, #1
 8008342:	d101      	bne.n	8008348 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008344:	2302      	movs	r3, #2
 8008346:	e05a      	b.n	80083fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2202      	movs	r2, #2
 8008354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800836e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	68fa      	ldr	r2, [r7, #12]
 8008376:	4313      	orrs	r3, r2
 8008378:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68fa      	ldr	r2, [r7, #12]
 8008380:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a21      	ldr	r2, [pc, #132]	@ (800840c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d022      	beq.n	80083d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008394:	d01d      	beq.n	80083d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a1d      	ldr	r2, [pc, #116]	@ (8008410 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d018      	beq.n	80083d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a1b      	ldr	r2, [pc, #108]	@ (8008414 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d013      	beq.n	80083d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a1a      	ldr	r2, [pc, #104]	@ (8008418 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d00e      	beq.n	80083d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a18      	ldr	r2, [pc, #96]	@ (800841c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d009      	beq.n	80083d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a17      	ldr	r2, [pc, #92]	@ (8008420 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d004      	beq.n	80083d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a15      	ldr	r2, [pc, #84]	@ (8008424 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d10c      	bne.n	80083ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	68ba      	ldr	r2, [r7, #8]
 80083e0:	4313      	orrs	r3, r2
 80083e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	68ba      	ldr	r2, [r7, #8]
 80083ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3714      	adds	r7, #20
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr
 800840a:	bf00      	nop
 800840c:	40010000 	.word	0x40010000
 8008410:	40000400 	.word	0x40000400
 8008414:	40000800 	.word	0x40000800
 8008418:	40000c00 	.word	0x40000c00
 800841c:	40010400 	.word	0x40010400
 8008420:	40014000 	.word	0x40014000
 8008424:	40001800 	.word	0x40001800

08008428 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008430:	bf00      	nop
 8008432:	370c      	adds	r7, #12
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008444:	bf00      	nop
 8008446:	370c      	adds	r7, #12
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d101      	bne.n	8008462 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	e042      	b.n	80084e8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008468:	b2db      	uxtb	r3, r3
 800846a:	2b00      	cmp	r3, #0
 800846c:	d106      	bne.n	800847c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2200      	movs	r2, #0
 8008472:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f7fa fbf8 	bl	8002c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2224      	movs	r2, #36	@ 0x24
 8008480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	68da      	ldr	r2, [r3, #12]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008492:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f000 fdbd 	bl	8009014 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	691a      	ldr	r2, [r3, #16]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80084a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	695a      	ldr	r2, [r3, #20]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80084b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	68da      	ldr	r2, [r3, #12]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80084c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2220      	movs	r2, #32
 80084d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2220      	movs	r2, #32
 80084dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80084e6:	2300      	movs	r3, #0
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3708      	adds	r7, #8
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b08a      	sub	sp, #40	@ 0x28
 80084f4:	af02      	add	r7, sp, #8
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	603b      	str	r3, [r7, #0]
 80084fc:	4613      	mov	r3, r2
 80084fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008500:	2300      	movs	r3, #0
 8008502:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800850a:	b2db      	uxtb	r3, r3
 800850c:	2b20      	cmp	r3, #32
 800850e:	d175      	bne.n	80085fc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d002      	beq.n	800851c <HAL_UART_Transmit+0x2c>
 8008516:	88fb      	ldrh	r3, [r7, #6]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d101      	bne.n	8008520 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800851c:	2301      	movs	r3, #1
 800851e:	e06e      	b.n	80085fe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2200      	movs	r2, #0
 8008524:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2221      	movs	r2, #33	@ 0x21
 800852a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800852e:	f7fa fdd5 	bl	80030dc <HAL_GetTick>
 8008532:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	88fa      	ldrh	r2, [r7, #6]
 8008538:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	88fa      	ldrh	r2, [r7, #6]
 800853e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008548:	d108      	bne.n	800855c <HAL_UART_Transmit+0x6c>
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d104      	bne.n	800855c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008552:	2300      	movs	r3, #0
 8008554:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	61bb      	str	r3, [r7, #24]
 800855a:	e003      	b.n	8008564 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008560:	2300      	movs	r3, #0
 8008562:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008564:	e02e      	b.n	80085c4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	9300      	str	r3, [sp, #0]
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	2200      	movs	r2, #0
 800856e:	2180      	movs	r1, #128	@ 0x80
 8008570:	68f8      	ldr	r0, [r7, #12]
 8008572:	f000 fb1f 	bl	8008bb4 <UART_WaitOnFlagUntilTimeout>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d005      	beq.n	8008588 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2220      	movs	r2, #32
 8008580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008584:	2303      	movs	r3, #3
 8008586:	e03a      	b.n	80085fe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d10b      	bne.n	80085a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800858e:	69bb      	ldr	r3, [r7, #24]
 8008590:	881b      	ldrh	r3, [r3, #0]
 8008592:	461a      	mov	r2, r3
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800859c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800859e:	69bb      	ldr	r3, [r7, #24]
 80085a0:	3302      	adds	r3, #2
 80085a2:	61bb      	str	r3, [r7, #24]
 80085a4:	e007      	b.n	80085b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80085a6:	69fb      	ldr	r3, [r7, #28]
 80085a8:	781a      	ldrb	r2, [r3, #0]
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	3301      	adds	r3, #1
 80085b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	3b01      	subs	r3, #1
 80085be:	b29a      	uxth	r2, r3
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d1cb      	bne.n	8008566 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	9300      	str	r3, [sp, #0]
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	2200      	movs	r2, #0
 80085d6:	2140      	movs	r1, #64	@ 0x40
 80085d8:	68f8      	ldr	r0, [r7, #12]
 80085da:	f000 faeb 	bl	8008bb4 <UART_WaitOnFlagUntilTimeout>
 80085de:	4603      	mov	r3, r0
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d005      	beq.n	80085f0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2220      	movs	r2, #32
 80085e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80085ec:	2303      	movs	r3, #3
 80085ee:	e006      	b.n	80085fe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2220      	movs	r2, #32
 80085f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80085f8:	2300      	movs	r3, #0
 80085fa:	e000      	b.n	80085fe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80085fc:	2302      	movs	r3, #2
  }
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3720      	adds	r7, #32
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b084      	sub	sp, #16
 800860a:	af00      	add	r7, sp, #0
 800860c:	60f8      	str	r0, [r7, #12]
 800860e:	60b9      	str	r1, [r7, #8]
 8008610:	4613      	mov	r3, r2
 8008612:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800861a:	b2db      	uxtb	r3, r3
 800861c:	2b20      	cmp	r3, #32
 800861e:	d112      	bne.n	8008646 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d002      	beq.n	800862c <HAL_UART_Receive_IT+0x26>
 8008626:	88fb      	ldrh	r3, [r7, #6]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d101      	bne.n	8008630 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800862c:	2301      	movs	r3, #1
 800862e:	e00b      	b.n	8008648 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2200      	movs	r2, #0
 8008634:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008636:	88fb      	ldrh	r3, [r7, #6]
 8008638:	461a      	mov	r2, r3
 800863a:	68b9      	ldr	r1, [r7, #8]
 800863c:	68f8      	ldr	r0, [r7, #12]
 800863e:	f000 fb12 	bl	8008c66 <UART_Start_Receive_IT>
 8008642:	4603      	mov	r3, r0
 8008644:	e000      	b.n	8008648 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008646:	2302      	movs	r3, #2
  }
}
 8008648:	4618      	mov	r0, r3
 800864a:	3710      	adds	r7, #16
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b0ba      	sub	sp, #232	@ 0xe8
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	695b      	ldr	r3, [r3, #20]
 8008672:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008676:	2300      	movs	r3, #0
 8008678:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800867c:	2300      	movs	r3, #0
 800867e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008686:	f003 030f 	and.w	r3, r3, #15
 800868a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800868e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008692:	2b00      	cmp	r3, #0
 8008694:	d10f      	bne.n	80086b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800869a:	f003 0320 	and.w	r3, r3, #32
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d009      	beq.n	80086b6 <HAL_UART_IRQHandler+0x66>
 80086a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086a6:	f003 0320 	and.w	r3, r3, #32
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d003      	beq.n	80086b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 fbf2 	bl	8008e98 <UART_Receive_IT>
      return;
 80086b4:	e25b      	b.n	8008b6e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80086b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	f000 80de 	beq.w	800887c <HAL_UART_IRQHandler+0x22c>
 80086c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086c4:	f003 0301 	and.w	r3, r3, #1
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d106      	bne.n	80086da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80086cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086d0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	f000 80d1 	beq.w	800887c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80086da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086de:	f003 0301 	and.w	r3, r3, #1
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d00b      	beq.n	80086fe <HAL_UART_IRQHandler+0xae>
 80086e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d005      	beq.n	80086fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086f6:	f043 0201 	orr.w	r2, r3, #1
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80086fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008702:	f003 0304 	and.w	r3, r3, #4
 8008706:	2b00      	cmp	r3, #0
 8008708:	d00b      	beq.n	8008722 <HAL_UART_IRQHandler+0xd2>
 800870a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800870e:	f003 0301 	and.w	r3, r3, #1
 8008712:	2b00      	cmp	r3, #0
 8008714:	d005      	beq.n	8008722 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800871a:	f043 0202 	orr.w	r2, r3, #2
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008726:	f003 0302 	and.w	r3, r3, #2
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00b      	beq.n	8008746 <HAL_UART_IRQHandler+0xf6>
 800872e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008732:	f003 0301 	and.w	r3, r3, #1
 8008736:	2b00      	cmp	r3, #0
 8008738:	d005      	beq.n	8008746 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800873e:	f043 0204 	orr.w	r2, r3, #4
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800874a:	f003 0308 	and.w	r3, r3, #8
 800874e:	2b00      	cmp	r3, #0
 8008750:	d011      	beq.n	8008776 <HAL_UART_IRQHandler+0x126>
 8008752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008756:	f003 0320 	and.w	r3, r3, #32
 800875a:	2b00      	cmp	r3, #0
 800875c:	d105      	bne.n	800876a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800875e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008762:	f003 0301 	and.w	r3, r3, #1
 8008766:	2b00      	cmp	r3, #0
 8008768:	d005      	beq.n	8008776 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800876e:	f043 0208 	orr.w	r2, r3, #8
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800877a:	2b00      	cmp	r3, #0
 800877c:	f000 81f2 	beq.w	8008b64 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008784:	f003 0320 	and.w	r3, r3, #32
 8008788:	2b00      	cmp	r3, #0
 800878a:	d008      	beq.n	800879e <HAL_UART_IRQHandler+0x14e>
 800878c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008790:	f003 0320 	and.w	r3, r3, #32
 8008794:	2b00      	cmp	r3, #0
 8008796:	d002      	beq.n	800879e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 fb7d 	bl	8008e98 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	695b      	ldr	r3, [r3, #20]
 80087a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087a8:	2b40      	cmp	r3, #64	@ 0x40
 80087aa:	bf0c      	ite	eq
 80087ac:	2301      	moveq	r3, #1
 80087ae:	2300      	movne	r3, #0
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087ba:	f003 0308 	and.w	r3, r3, #8
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d103      	bne.n	80087ca <HAL_UART_IRQHandler+0x17a>
 80087c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d04f      	beq.n	800886a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 fa85 	bl	8008cda <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	695b      	ldr	r3, [r3, #20]
 80087d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087da:	2b40      	cmp	r3, #64	@ 0x40
 80087dc:	d141      	bne.n	8008862 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	3314      	adds	r3, #20
 80087e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80087ec:	e853 3f00 	ldrex	r3, [r3]
 80087f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80087f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80087f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	3314      	adds	r3, #20
 8008806:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800880a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800880e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008812:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008816:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800881a:	e841 2300 	strex	r3, r2, [r1]
 800881e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008822:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008826:	2b00      	cmp	r3, #0
 8008828:	d1d9      	bne.n	80087de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800882e:	2b00      	cmp	r3, #0
 8008830:	d013      	beq.n	800885a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008836:	4a7e      	ldr	r2, [pc, #504]	@ (8008a30 <HAL_UART_IRQHandler+0x3e0>)
 8008838:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800883e:	4618      	mov	r0, r3
 8008840:	f7fb fd6c 	bl	800431c <HAL_DMA_Abort_IT>
 8008844:	4603      	mov	r3, r0
 8008846:	2b00      	cmp	r3, #0
 8008848:	d016      	beq.n	8008878 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800884e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008854:	4610      	mov	r0, r2
 8008856:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008858:	e00e      	b.n	8008878 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 f994 	bl	8008b88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008860:	e00a      	b.n	8008878 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 f990 	bl	8008b88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008868:	e006      	b.n	8008878 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 f98c 	bl	8008b88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008876:	e175      	b.n	8008b64 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008878:	bf00      	nop
    return;
 800887a:	e173      	b.n	8008b64 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008880:	2b01      	cmp	r3, #1
 8008882:	f040 814f 	bne.w	8008b24 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800888a:	f003 0310 	and.w	r3, r3, #16
 800888e:	2b00      	cmp	r3, #0
 8008890:	f000 8148 	beq.w	8008b24 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008898:	f003 0310 	and.w	r3, r3, #16
 800889c:	2b00      	cmp	r3, #0
 800889e:	f000 8141 	beq.w	8008b24 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80088a2:	2300      	movs	r3, #0
 80088a4:	60bb      	str	r3, [r7, #8]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	60bb      	str	r3, [r7, #8]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	60bb      	str	r3, [r7, #8]
 80088b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	695b      	ldr	r3, [r3, #20]
 80088be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088c2:	2b40      	cmp	r3, #64	@ 0x40
 80088c4:	f040 80b6 	bne.w	8008a34 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80088d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80088d8:	2b00      	cmp	r3, #0
 80088da:	f000 8145 	beq.w	8008b68 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80088e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80088e6:	429a      	cmp	r2, r3
 80088e8:	f080 813e 	bcs.w	8008b68 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80088f2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088f8:	69db      	ldr	r3, [r3, #28]
 80088fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088fe:	f000 8088 	beq.w	8008a12 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	330c      	adds	r3, #12
 8008908:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008910:	e853 3f00 	ldrex	r3, [r3]
 8008914:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008918:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800891c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008920:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	330c      	adds	r3, #12
 800892a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800892e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008932:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008936:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800893a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800893e:	e841 2300 	strex	r3, r2, [r1]
 8008942:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008946:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800894a:	2b00      	cmp	r3, #0
 800894c:	d1d9      	bne.n	8008902 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	3314      	adds	r3, #20
 8008954:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008956:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008958:	e853 3f00 	ldrex	r3, [r3]
 800895c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800895e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008960:	f023 0301 	bic.w	r3, r3, #1
 8008964:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	3314      	adds	r3, #20
 800896e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008972:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008976:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008978:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800897a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800897e:	e841 2300 	strex	r3, r2, [r1]
 8008982:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008984:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008986:	2b00      	cmp	r3, #0
 8008988:	d1e1      	bne.n	800894e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	3314      	adds	r3, #20
 8008990:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008992:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008994:	e853 3f00 	ldrex	r3, [r3]
 8008998:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800899a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800899c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	3314      	adds	r3, #20
 80089aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80089ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80089b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80089b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80089b6:	e841 2300 	strex	r3, r2, [r1]
 80089ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80089bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d1e3      	bne.n	800898a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2220      	movs	r2, #32
 80089c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	330c      	adds	r3, #12
 80089d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089da:	e853 3f00 	ldrex	r3, [r3]
 80089de:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80089e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80089e2:	f023 0310 	bic.w	r3, r3, #16
 80089e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	330c      	adds	r3, #12
 80089f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80089f4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80089f6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80089fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80089fc:	e841 2300 	strex	r3, r2, [r1]
 8008a00:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008a02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d1e3      	bne.n	80089d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f7fb fc15 	bl	800423c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2202      	movs	r2, #2
 8008a16:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	1ad3      	subs	r3, r2, r3
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	4619      	mov	r1, r3
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 f8b7 	bl	8008b9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008a2e:	e09b      	b.n	8008b68 <HAL_UART_IRQHandler+0x518>
 8008a30:	08008da1 	.word	0x08008da1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	1ad3      	subs	r3, r2, r3
 8008a40:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	f000 808e 	beq.w	8008b6c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008a50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	f000 8089 	beq.w	8008b6c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	330c      	adds	r3, #12
 8008a60:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a64:	e853 3f00 	ldrex	r3, [r3]
 8008a68:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a70:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	330c      	adds	r3, #12
 8008a7a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008a7e:	647a      	str	r2, [r7, #68]	@ 0x44
 8008a80:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a82:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a84:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a86:	e841 2300 	strex	r3, r2, [r1]
 8008a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008a8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d1e3      	bne.n	8008a5a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	3314      	adds	r3, #20
 8008a98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a9c:	e853 3f00 	ldrex	r3, [r3]
 8008aa0:	623b      	str	r3, [r7, #32]
   return(result);
 8008aa2:	6a3b      	ldr	r3, [r7, #32]
 8008aa4:	f023 0301 	bic.w	r3, r3, #1
 8008aa8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	3314      	adds	r3, #20
 8008ab2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008ab6:	633a      	str	r2, [r7, #48]	@ 0x30
 8008ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008abc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008abe:	e841 2300 	strex	r3, r2, [r1]
 8008ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d1e3      	bne.n	8008a92 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2220      	movs	r2, #32
 8008ace:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	330c      	adds	r3, #12
 8008ade:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	e853 3f00 	ldrex	r3, [r3]
 8008ae6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f023 0310 	bic.w	r3, r3, #16
 8008aee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	330c      	adds	r3, #12
 8008af8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008afc:	61fa      	str	r2, [r7, #28]
 8008afe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b00:	69b9      	ldr	r1, [r7, #24]
 8008b02:	69fa      	ldr	r2, [r7, #28]
 8008b04:	e841 2300 	strex	r3, r2, [r1]
 8008b08:	617b      	str	r3, [r7, #20]
   return(result);
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d1e3      	bne.n	8008ad8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2202      	movs	r2, #2
 8008b14:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008b16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 f83d 	bl	8008b9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008b22:	e023      	b.n	8008b6c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d009      	beq.n	8008b44 <HAL_UART_IRQHandler+0x4f4>
 8008b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d003      	beq.n	8008b44 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 f943 	bl	8008dc8 <UART_Transmit_IT>
    return;
 8008b42:	e014      	b.n	8008b6e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d00e      	beq.n	8008b6e <HAL_UART_IRQHandler+0x51e>
 8008b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d008      	beq.n	8008b6e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 f983 	bl	8008e68 <UART_EndTransmit_IT>
    return;
 8008b62:	e004      	b.n	8008b6e <HAL_UART_IRQHandler+0x51e>
    return;
 8008b64:	bf00      	nop
 8008b66:	e002      	b.n	8008b6e <HAL_UART_IRQHandler+0x51e>
      return;
 8008b68:	bf00      	nop
 8008b6a:	e000      	b.n	8008b6e <HAL_UART_IRQHandler+0x51e>
      return;
 8008b6c:	bf00      	nop
  }
}
 8008b6e:	37e8      	adds	r7, #232	@ 0xe8
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008b7c:	bf00      	nop
 8008b7e:	370c      	adds	r7, #12
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008b90:	bf00      	nop
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ba8:	bf00      	nop
 8008baa:	370c      	adds	r7, #12
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b086      	sub	sp, #24
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	603b      	str	r3, [r7, #0]
 8008bc0:	4613      	mov	r3, r2
 8008bc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bc4:	e03b      	b.n	8008c3e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008bc6:	6a3b      	ldr	r3, [r7, #32]
 8008bc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008bcc:	d037      	beq.n	8008c3e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bce:	f7fa fa85 	bl	80030dc <HAL_GetTick>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	1ad3      	subs	r3, r2, r3
 8008bd8:	6a3a      	ldr	r2, [r7, #32]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d302      	bcc.n	8008be4 <UART_WaitOnFlagUntilTimeout+0x30>
 8008bde:	6a3b      	ldr	r3, [r7, #32]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d101      	bne.n	8008be8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008be4:	2303      	movs	r3, #3
 8008be6:	e03a      	b.n	8008c5e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	68db      	ldr	r3, [r3, #12]
 8008bee:	f003 0304 	and.w	r3, r3, #4
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d023      	beq.n	8008c3e <UART_WaitOnFlagUntilTimeout+0x8a>
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	2b80      	cmp	r3, #128	@ 0x80
 8008bfa:	d020      	beq.n	8008c3e <UART_WaitOnFlagUntilTimeout+0x8a>
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	2b40      	cmp	r3, #64	@ 0x40
 8008c00:	d01d      	beq.n	8008c3e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f003 0308 	and.w	r3, r3, #8
 8008c0c:	2b08      	cmp	r3, #8
 8008c0e:	d116      	bne.n	8008c3e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008c10:	2300      	movs	r3, #0
 8008c12:	617b      	str	r3, [r7, #20]
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	617b      	str	r3, [r7, #20]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	617b      	str	r3, [r7, #20]
 8008c24:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c26:	68f8      	ldr	r0, [r7, #12]
 8008c28:	f000 f857 	bl	8008cda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2208      	movs	r2, #8
 8008c30:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2200      	movs	r2, #0
 8008c36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e00f      	b.n	8008c5e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	681a      	ldr	r2, [r3, #0]
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	4013      	ands	r3, r2
 8008c48:	68ba      	ldr	r2, [r7, #8]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	bf0c      	ite	eq
 8008c4e:	2301      	moveq	r3, #1
 8008c50:	2300      	movne	r3, #0
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	461a      	mov	r2, r3
 8008c56:	79fb      	ldrb	r3, [r7, #7]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d0b4      	beq.n	8008bc6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c5c:	2300      	movs	r3, #0
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3718      	adds	r7, #24
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c66:	b480      	push	{r7}
 8008c68:	b085      	sub	sp, #20
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	60f8      	str	r0, [r7, #12]
 8008c6e:	60b9      	str	r1, [r7, #8]
 8008c70:	4613      	mov	r3, r2
 8008c72:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	68ba      	ldr	r2, [r7, #8]
 8008c78:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	88fa      	ldrh	r2, [r7, #6]
 8008c7e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	88fa      	ldrh	r2, [r7, #6]
 8008c84:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2222      	movs	r2, #34	@ 0x22
 8008c90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	691b      	ldr	r3, [r3, #16]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d007      	beq.n	8008cac <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	68da      	ldr	r2, [r3, #12]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008caa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	695a      	ldr	r2, [r3, #20]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f042 0201 	orr.w	r2, r2, #1
 8008cba:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	68da      	ldr	r2, [r3, #12]
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f042 0220 	orr.w	r2, r2, #32
 8008cca:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008ccc:	2300      	movs	r3, #0
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3714      	adds	r7, #20
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr

08008cda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008cda:	b480      	push	{r7}
 8008cdc:	b095      	sub	sp, #84	@ 0x54
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	330c      	adds	r3, #12
 8008ce8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cec:	e853 3f00 	ldrex	r3, [r3]
 8008cf0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cf4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008cf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	330c      	adds	r3, #12
 8008d00:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008d02:	643a      	str	r2, [r7, #64]	@ 0x40
 8008d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d06:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008d08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008d0a:	e841 2300 	strex	r3, r2, [r1]
 8008d0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d1e5      	bne.n	8008ce2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	3314      	adds	r3, #20
 8008d1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d1e:	6a3b      	ldr	r3, [r7, #32]
 8008d20:	e853 3f00 	ldrex	r3, [r3]
 8008d24:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	f023 0301 	bic.w	r3, r3, #1
 8008d2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	3314      	adds	r3, #20
 8008d34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008d38:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d3e:	e841 2300 	strex	r3, r2, [r1]
 8008d42:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d1e5      	bne.n	8008d16 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d119      	bne.n	8008d86 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	330c      	adds	r3, #12
 8008d58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	e853 3f00 	ldrex	r3, [r3]
 8008d60:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	f023 0310 	bic.w	r3, r3, #16
 8008d68:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	330c      	adds	r3, #12
 8008d70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d72:	61ba      	str	r2, [r7, #24]
 8008d74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d76:	6979      	ldr	r1, [r7, #20]
 8008d78:	69ba      	ldr	r2, [r7, #24]
 8008d7a:	e841 2300 	strex	r3, r2, [r1]
 8008d7e:	613b      	str	r3, [r7, #16]
   return(result);
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d1e5      	bne.n	8008d52 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2220      	movs	r2, #32
 8008d8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2200      	movs	r2, #0
 8008d92:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008d94:	bf00      	nop
 8008d96:	3754      	adds	r7, #84	@ 0x54
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2200      	movs	r2, #0
 8008db2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2200      	movs	r2, #0
 8008db8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008dba:	68f8      	ldr	r0, [r7, #12]
 8008dbc:	f7ff fee4 	bl	8008b88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008dc0:	bf00      	nop
 8008dc2:	3710      	adds	r7, #16
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b085      	sub	sp, #20
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	2b21      	cmp	r3, #33	@ 0x21
 8008dda:	d13e      	bne.n	8008e5a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008de4:	d114      	bne.n	8008e10 <UART_Transmit_IT+0x48>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	691b      	ldr	r3, [r3, #16]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d110      	bne.n	8008e10 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6a1b      	ldr	r3, [r3, #32]
 8008df2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	881b      	ldrh	r3, [r3, #0]
 8008df8:	461a      	mov	r2, r3
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e02:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6a1b      	ldr	r3, [r3, #32]
 8008e08:	1c9a      	adds	r2, r3, #2
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	621a      	str	r2, [r3, #32]
 8008e0e:	e008      	b.n	8008e22 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6a1b      	ldr	r3, [r3, #32]
 8008e14:	1c59      	adds	r1, r3, #1
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	6211      	str	r1, [r2, #32]
 8008e1a:	781a      	ldrb	r2, [r3, #0]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	3b01      	subs	r3, #1
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	4619      	mov	r1, r3
 8008e30:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d10f      	bne.n	8008e56 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	68da      	ldr	r2, [r3, #12]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008e44:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	68da      	ldr	r2, [r3, #12]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e54:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008e56:	2300      	movs	r3, #0
 8008e58:	e000      	b.n	8008e5c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008e5a:	2302      	movs	r3, #2
  }
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3714      	adds	r7, #20
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	68da      	ldr	r2, [r3, #12]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e7e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2220      	movs	r2, #32
 8008e84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f7ff fe73 	bl	8008b74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3708      	adds	r7, #8
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b08c      	sub	sp, #48	@ 0x30
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	2b22      	cmp	r3, #34	@ 0x22
 8008eaa:	f040 80ae 	bne.w	800900a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	689b      	ldr	r3, [r3, #8]
 8008eb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008eb6:	d117      	bne.n	8008ee8 <UART_Receive_IT+0x50>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	691b      	ldr	r3, [r3, #16]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d113      	bne.n	8008ee8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ed6:	b29a      	uxth	r2, r3
 8008ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eda:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ee0:	1c9a      	adds	r2, r3, #2
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	629a      	str	r2, [r3, #40]	@ 0x28
 8008ee6:	e026      	b.n	8008f36 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	689b      	ldr	r3, [r3, #8]
 8008ef6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008efa:	d007      	beq.n	8008f0c <UART_Receive_IT+0x74>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d10a      	bne.n	8008f1a <UART_Receive_IT+0x82>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	691b      	ldr	r3, [r3, #16]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d106      	bne.n	8008f1a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	b2da      	uxtb	r2, r3
 8008f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f16:	701a      	strb	r2, [r3, #0]
 8008f18:	e008      	b.n	8008f2c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f26:	b2da      	uxtb	r2, r3
 8008f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f2a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f30:	1c5a      	adds	r2, r3, #1
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	4619      	mov	r1, r3
 8008f44:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d15d      	bne.n	8009006 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	68da      	ldr	r2, [r3, #12]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f022 0220 	bic.w	r2, r2, #32
 8008f58:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	68da      	ldr	r2, [r3, #12]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008f68:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	695a      	ldr	r2, [r3, #20]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f022 0201 	bic.w	r2, r2, #1
 8008f78:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2220      	movs	r2, #32
 8008f7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2200      	movs	r2, #0
 8008f86:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d135      	bne.n	8008ffc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	330c      	adds	r3, #12
 8008f9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	e853 3f00 	ldrex	r3, [r3]
 8008fa4:	613b      	str	r3, [r7, #16]
   return(result);
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	f023 0310 	bic.w	r3, r3, #16
 8008fac:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	330c      	adds	r3, #12
 8008fb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fb6:	623a      	str	r2, [r7, #32]
 8008fb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fba:	69f9      	ldr	r1, [r7, #28]
 8008fbc:	6a3a      	ldr	r2, [r7, #32]
 8008fbe:	e841 2300 	strex	r3, r2, [r1]
 8008fc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8008fc4:	69bb      	ldr	r3, [r7, #24]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d1e5      	bne.n	8008f96 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f003 0310 	and.w	r3, r3, #16
 8008fd4:	2b10      	cmp	r3, #16
 8008fd6:	d10a      	bne.n	8008fee <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008fd8:	2300      	movs	r3, #0
 8008fda:	60fb      	str	r3, [r7, #12]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	60fb      	str	r3, [r7, #12]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	60fb      	str	r3, [r7, #12]
 8008fec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008ff2:	4619      	mov	r1, r3
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f7ff fdd1 	bl	8008b9c <HAL_UARTEx_RxEventCallback>
 8008ffa:	e002      	b.n	8009002 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f7f9 ff7b 	bl	8002ef8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009002:	2300      	movs	r3, #0
 8009004:	e002      	b.n	800900c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009006:	2300      	movs	r3, #0
 8009008:	e000      	b.n	800900c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800900a:	2302      	movs	r3, #2
  }
}
 800900c:	4618      	mov	r0, r3
 800900e:	3730      	adds	r7, #48	@ 0x30
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009014:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009018:	b0c0      	sub	sp, #256	@ 0x100
 800901a:	af00      	add	r7, sp, #0
 800901c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	691b      	ldr	r3, [r3, #16]
 8009028:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800902c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009030:	68d9      	ldr	r1, [r3, #12]
 8009032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	ea40 0301 	orr.w	r3, r0, r1
 800903c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800903e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009042:	689a      	ldr	r2, [r3, #8]
 8009044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009048:	691b      	ldr	r3, [r3, #16]
 800904a:	431a      	orrs	r2, r3
 800904c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009050:	695b      	ldr	r3, [r3, #20]
 8009052:	431a      	orrs	r2, r3
 8009054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009058:	69db      	ldr	r3, [r3, #28]
 800905a:	4313      	orrs	r3, r2
 800905c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	68db      	ldr	r3, [r3, #12]
 8009068:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800906c:	f021 010c 	bic.w	r1, r1, #12
 8009070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800907a:	430b      	orrs	r3, r1
 800907c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800907e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	695b      	ldr	r3, [r3, #20]
 8009086:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800908a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800908e:	6999      	ldr	r1, [r3, #24]
 8009090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009094:	681a      	ldr	r2, [r3, #0]
 8009096:	ea40 0301 	orr.w	r3, r0, r1
 800909a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800909c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	4b8f      	ldr	r3, [pc, #572]	@ (80092e0 <UART_SetConfig+0x2cc>)
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d005      	beq.n	80090b4 <UART_SetConfig+0xa0>
 80090a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	4b8d      	ldr	r3, [pc, #564]	@ (80092e4 <UART_SetConfig+0x2d0>)
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d104      	bne.n	80090be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80090b4:	f7fd fab0 	bl	8006618 <HAL_RCC_GetPCLK2Freq>
 80090b8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80090bc:	e003      	b.n	80090c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80090be:	f7fd fa97 	bl	80065f0 <HAL_RCC_GetPCLK1Freq>
 80090c2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090ca:	69db      	ldr	r3, [r3, #28]
 80090cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090d0:	f040 810c 	bne.w	80092ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80090d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80090d8:	2200      	movs	r2, #0
 80090da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80090de:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80090e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80090e6:	4622      	mov	r2, r4
 80090e8:	462b      	mov	r3, r5
 80090ea:	1891      	adds	r1, r2, r2
 80090ec:	65b9      	str	r1, [r7, #88]	@ 0x58
 80090ee:	415b      	adcs	r3, r3
 80090f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80090f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80090f6:	4621      	mov	r1, r4
 80090f8:	eb12 0801 	adds.w	r8, r2, r1
 80090fc:	4629      	mov	r1, r5
 80090fe:	eb43 0901 	adc.w	r9, r3, r1
 8009102:	f04f 0200 	mov.w	r2, #0
 8009106:	f04f 0300 	mov.w	r3, #0
 800910a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800910e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009112:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009116:	4690      	mov	r8, r2
 8009118:	4699      	mov	r9, r3
 800911a:	4623      	mov	r3, r4
 800911c:	eb18 0303 	adds.w	r3, r8, r3
 8009120:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009124:	462b      	mov	r3, r5
 8009126:	eb49 0303 	adc.w	r3, r9, r3
 800912a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800912e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	2200      	movs	r2, #0
 8009136:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800913a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800913e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009142:	460b      	mov	r3, r1
 8009144:	18db      	adds	r3, r3, r3
 8009146:	653b      	str	r3, [r7, #80]	@ 0x50
 8009148:	4613      	mov	r3, r2
 800914a:	eb42 0303 	adc.w	r3, r2, r3
 800914e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009150:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009154:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009158:	f7f7 f850 	bl	80001fc <__aeabi_uldivmod>
 800915c:	4602      	mov	r2, r0
 800915e:	460b      	mov	r3, r1
 8009160:	4b61      	ldr	r3, [pc, #388]	@ (80092e8 <UART_SetConfig+0x2d4>)
 8009162:	fba3 2302 	umull	r2, r3, r3, r2
 8009166:	095b      	lsrs	r3, r3, #5
 8009168:	011c      	lsls	r4, r3, #4
 800916a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800916e:	2200      	movs	r2, #0
 8009170:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009174:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009178:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800917c:	4642      	mov	r2, r8
 800917e:	464b      	mov	r3, r9
 8009180:	1891      	adds	r1, r2, r2
 8009182:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009184:	415b      	adcs	r3, r3
 8009186:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009188:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800918c:	4641      	mov	r1, r8
 800918e:	eb12 0a01 	adds.w	sl, r2, r1
 8009192:	4649      	mov	r1, r9
 8009194:	eb43 0b01 	adc.w	fp, r3, r1
 8009198:	f04f 0200 	mov.w	r2, #0
 800919c:	f04f 0300 	mov.w	r3, #0
 80091a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80091a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80091a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80091ac:	4692      	mov	sl, r2
 80091ae:	469b      	mov	fp, r3
 80091b0:	4643      	mov	r3, r8
 80091b2:	eb1a 0303 	adds.w	r3, sl, r3
 80091b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80091ba:	464b      	mov	r3, r9
 80091bc:	eb4b 0303 	adc.w	r3, fp, r3
 80091c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80091c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	2200      	movs	r2, #0
 80091cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80091d0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80091d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80091d8:	460b      	mov	r3, r1
 80091da:	18db      	adds	r3, r3, r3
 80091dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80091de:	4613      	mov	r3, r2
 80091e0:	eb42 0303 	adc.w	r3, r2, r3
 80091e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80091e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80091ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80091ee:	f7f7 f805 	bl	80001fc <__aeabi_uldivmod>
 80091f2:	4602      	mov	r2, r0
 80091f4:	460b      	mov	r3, r1
 80091f6:	4611      	mov	r1, r2
 80091f8:	4b3b      	ldr	r3, [pc, #236]	@ (80092e8 <UART_SetConfig+0x2d4>)
 80091fa:	fba3 2301 	umull	r2, r3, r3, r1
 80091fe:	095b      	lsrs	r3, r3, #5
 8009200:	2264      	movs	r2, #100	@ 0x64
 8009202:	fb02 f303 	mul.w	r3, r2, r3
 8009206:	1acb      	subs	r3, r1, r3
 8009208:	00db      	lsls	r3, r3, #3
 800920a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800920e:	4b36      	ldr	r3, [pc, #216]	@ (80092e8 <UART_SetConfig+0x2d4>)
 8009210:	fba3 2302 	umull	r2, r3, r3, r2
 8009214:	095b      	lsrs	r3, r3, #5
 8009216:	005b      	lsls	r3, r3, #1
 8009218:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800921c:	441c      	add	r4, r3
 800921e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009222:	2200      	movs	r2, #0
 8009224:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009228:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800922c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009230:	4642      	mov	r2, r8
 8009232:	464b      	mov	r3, r9
 8009234:	1891      	adds	r1, r2, r2
 8009236:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009238:	415b      	adcs	r3, r3
 800923a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800923c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009240:	4641      	mov	r1, r8
 8009242:	1851      	adds	r1, r2, r1
 8009244:	6339      	str	r1, [r7, #48]	@ 0x30
 8009246:	4649      	mov	r1, r9
 8009248:	414b      	adcs	r3, r1
 800924a:	637b      	str	r3, [r7, #52]	@ 0x34
 800924c:	f04f 0200 	mov.w	r2, #0
 8009250:	f04f 0300 	mov.w	r3, #0
 8009254:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009258:	4659      	mov	r1, fp
 800925a:	00cb      	lsls	r3, r1, #3
 800925c:	4651      	mov	r1, sl
 800925e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009262:	4651      	mov	r1, sl
 8009264:	00ca      	lsls	r2, r1, #3
 8009266:	4610      	mov	r0, r2
 8009268:	4619      	mov	r1, r3
 800926a:	4603      	mov	r3, r0
 800926c:	4642      	mov	r2, r8
 800926e:	189b      	adds	r3, r3, r2
 8009270:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009274:	464b      	mov	r3, r9
 8009276:	460a      	mov	r2, r1
 8009278:	eb42 0303 	adc.w	r3, r2, r3
 800927c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800928c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009290:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009294:	460b      	mov	r3, r1
 8009296:	18db      	adds	r3, r3, r3
 8009298:	62bb      	str	r3, [r7, #40]	@ 0x28
 800929a:	4613      	mov	r3, r2
 800929c:	eb42 0303 	adc.w	r3, r2, r3
 80092a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80092a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80092a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80092aa:	f7f6 ffa7 	bl	80001fc <__aeabi_uldivmod>
 80092ae:	4602      	mov	r2, r0
 80092b0:	460b      	mov	r3, r1
 80092b2:	4b0d      	ldr	r3, [pc, #52]	@ (80092e8 <UART_SetConfig+0x2d4>)
 80092b4:	fba3 1302 	umull	r1, r3, r3, r2
 80092b8:	095b      	lsrs	r3, r3, #5
 80092ba:	2164      	movs	r1, #100	@ 0x64
 80092bc:	fb01 f303 	mul.w	r3, r1, r3
 80092c0:	1ad3      	subs	r3, r2, r3
 80092c2:	00db      	lsls	r3, r3, #3
 80092c4:	3332      	adds	r3, #50	@ 0x32
 80092c6:	4a08      	ldr	r2, [pc, #32]	@ (80092e8 <UART_SetConfig+0x2d4>)
 80092c8:	fba2 2303 	umull	r2, r3, r2, r3
 80092cc:	095b      	lsrs	r3, r3, #5
 80092ce:	f003 0207 	and.w	r2, r3, #7
 80092d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4422      	add	r2, r4
 80092da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80092dc:	e106      	b.n	80094ec <UART_SetConfig+0x4d8>
 80092de:	bf00      	nop
 80092e0:	40011000 	.word	0x40011000
 80092e4:	40011400 	.word	0x40011400
 80092e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80092ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80092f0:	2200      	movs	r2, #0
 80092f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80092f6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80092fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80092fe:	4642      	mov	r2, r8
 8009300:	464b      	mov	r3, r9
 8009302:	1891      	adds	r1, r2, r2
 8009304:	6239      	str	r1, [r7, #32]
 8009306:	415b      	adcs	r3, r3
 8009308:	627b      	str	r3, [r7, #36]	@ 0x24
 800930a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800930e:	4641      	mov	r1, r8
 8009310:	1854      	adds	r4, r2, r1
 8009312:	4649      	mov	r1, r9
 8009314:	eb43 0501 	adc.w	r5, r3, r1
 8009318:	f04f 0200 	mov.w	r2, #0
 800931c:	f04f 0300 	mov.w	r3, #0
 8009320:	00eb      	lsls	r3, r5, #3
 8009322:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009326:	00e2      	lsls	r2, r4, #3
 8009328:	4614      	mov	r4, r2
 800932a:	461d      	mov	r5, r3
 800932c:	4643      	mov	r3, r8
 800932e:	18e3      	adds	r3, r4, r3
 8009330:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009334:	464b      	mov	r3, r9
 8009336:	eb45 0303 	adc.w	r3, r5, r3
 800933a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800933e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	2200      	movs	r2, #0
 8009346:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800934a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800934e:	f04f 0200 	mov.w	r2, #0
 8009352:	f04f 0300 	mov.w	r3, #0
 8009356:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800935a:	4629      	mov	r1, r5
 800935c:	008b      	lsls	r3, r1, #2
 800935e:	4621      	mov	r1, r4
 8009360:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009364:	4621      	mov	r1, r4
 8009366:	008a      	lsls	r2, r1, #2
 8009368:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800936c:	f7f6 ff46 	bl	80001fc <__aeabi_uldivmod>
 8009370:	4602      	mov	r2, r0
 8009372:	460b      	mov	r3, r1
 8009374:	4b60      	ldr	r3, [pc, #384]	@ (80094f8 <UART_SetConfig+0x4e4>)
 8009376:	fba3 2302 	umull	r2, r3, r3, r2
 800937a:	095b      	lsrs	r3, r3, #5
 800937c:	011c      	lsls	r4, r3, #4
 800937e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009382:	2200      	movs	r2, #0
 8009384:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009388:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800938c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009390:	4642      	mov	r2, r8
 8009392:	464b      	mov	r3, r9
 8009394:	1891      	adds	r1, r2, r2
 8009396:	61b9      	str	r1, [r7, #24]
 8009398:	415b      	adcs	r3, r3
 800939a:	61fb      	str	r3, [r7, #28]
 800939c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80093a0:	4641      	mov	r1, r8
 80093a2:	1851      	adds	r1, r2, r1
 80093a4:	6139      	str	r1, [r7, #16]
 80093a6:	4649      	mov	r1, r9
 80093a8:	414b      	adcs	r3, r1
 80093aa:	617b      	str	r3, [r7, #20]
 80093ac:	f04f 0200 	mov.w	r2, #0
 80093b0:	f04f 0300 	mov.w	r3, #0
 80093b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80093b8:	4659      	mov	r1, fp
 80093ba:	00cb      	lsls	r3, r1, #3
 80093bc:	4651      	mov	r1, sl
 80093be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80093c2:	4651      	mov	r1, sl
 80093c4:	00ca      	lsls	r2, r1, #3
 80093c6:	4610      	mov	r0, r2
 80093c8:	4619      	mov	r1, r3
 80093ca:	4603      	mov	r3, r0
 80093cc:	4642      	mov	r2, r8
 80093ce:	189b      	adds	r3, r3, r2
 80093d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80093d4:	464b      	mov	r3, r9
 80093d6:	460a      	mov	r2, r1
 80093d8:	eb42 0303 	adc.w	r3, r2, r3
 80093dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80093e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	2200      	movs	r2, #0
 80093e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80093ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80093ec:	f04f 0200 	mov.w	r2, #0
 80093f0:	f04f 0300 	mov.w	r3, #0
 80093f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80093f8:	4649      	mov	r1, r9
 80093fa:	008b      	lsls	r3, r1, #2
 80093fc:	4641      	mov	r1, r8
 80093fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009402:	4641      	mov	r1, r8
 8009404:	008a      	lsls	r2, r1, #2
 8009406:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800940a:	f7f6 fef7 	bl	80001fc <__aeabi_uldivmod>
 800940e:	4602      	mov	r2, r0
 8009410:	460b      	mov	r3, r1
 8009412:	4611      	mov	r1, r2
 8009414:	4b38      	ldr	r3, [pc, #224]	@ (80094f8 <UART_SetConfig+0x4e4>)
 8009416:	fba3 2301 	umull	r2, r3, r3, r1
 800941a:	095b      	lsrs	r3, r3, #5
 800941c:	2264      	movs	r2, #100	@ 0x64
 800941e:	fb02 f303 	mul.w	r3, r2, r3
 8009422:	1acb      	subs	r3, r1, r3
 8009424:	011b      	lsls	r3, r3, #4
 8009426:	3332      	adds	r3, #50	@ 0x32
 8009428:	4a33      	ldr	r2, [pc, #204]	@ (80094f8 <UART_SetConfig+0x4e4>)
 800942a:	fba2 2303 	umull	r2, r3, r2, r3
 800942e:	095b      	lsrs	r3, r3, #5
 8009430:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009434:	441c      	add	r4, r3
 8009436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800943a:	2200      	movs	r2, #0
 800943c:	673b      	str	r3, [r7, #112]	@ 0x70
 800943e:	677a      	str	r2, [r7, #116]	@ 0x74
 8009440:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009444:	4642      	mov	r2, r8
 8009446:	464b      	mov	r3, r9
 8009448:	1891      	adds	r1, r2, r2
 800944a:	60b9      	str	r1, [r7, #8]
 800944c:	415b      	adcs	r3, r3
 800944e:	60fb      	str	r3, [r7, #12]
 8009450:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009454:	4641      	mov	r1, r8
 8009456:	1851      	adds	r1, r2, r1
 8009458:	6039      	str	r1, [r7, #0]
 800945a:	4649      	mov	r1, r9
 800945c:	414b      	adcs	r3, r1
 800945e:	607b      	str	r3, [r7, #4]
 8009460:	f04f 0200 	mov.w	r2, #0
 8009464:	f04f 0300 	mov.w	r3, #0
 8009468:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800946c:	4659      	mov	r1, fp
 800946e:	00cb      	lsls	r3, r1, #3
 8009470:	4651      	mov	r1, sl
 8009472:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009476:	4651      	mov	r1, sl
 8009478:	00ca      	lsls	r2, r1, #3
 800947a:	4610      	mov	r0, r2
 800947c:	4619      	mov	r1, r3
 800947e:	4603      	mov	r3, r0
 8009480:	4642      	mov	r2, r8
 8009482:	189b      	adds	r3, r3, r2
 8009484:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009486:	464b      	mov	r3, r9
 8009488:	460a      	mov	r2, r1
 800948a:	eb42 0303 	adc.w	r3, r2, r3
 800948e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	663b      	str	r3, [r7, #96]	@ 0x60
 800949a:	667a      	str	r2, [r7, #100]	@ 0x64
 800949c:	f04f 0200 	mov.w	r2, #0
 80094a0:	f04f 0300 	mov.w	r3, #0
 80094a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80094a8:	4649      	mov	r1, r9
 80094aa:	008b      	lsls	r3, r1, #2
 80094ac:	4641      	mov	r1, r8
 80094ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094b2:	4641      	mov	r1, r8
 80094b4:	008a      	lsls	r2, r1, #2
 80094b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80094ba:	f7f6 fe9f 	bl	80001fc <__aeabi_uldivmod>
 80094be:	4602      	mov	r2, r0
 80094c0:	460b      	mov	r3, r1
 80094c2:	4b0d      	ldr	r3, [pc, #52]	@ (80094f8 <UART_SetConfig+0x4e4>)
 80094c4:	fba3 1302 	umull	r1, r3, r3, r2
 80094c8:	095b      	lsrs	r3, r3, #5
 80094ca:	2164      	movs	r1, #100	@ 0x64
 80094cc:	fb01 f303 	mul.w	r3, r1, r3
 80094d0:	1ad3      	subs	r3, r2, r3
 80094d2:	011b      	lsls	r3, r3, #4
 80094d4:	3332      	adds	r3, #50	@ 0x32
 80094d6:	4a08      	ldr	r2, [pc, #32]	@ (80094f8 <UART_SetConfig+0x4e4>)
 80094d8:	fba2 2303 	umull	r2, r3, r2, r3
 80094dc:	095b      	lsrs	r3, r3, #5
 80094de:	f003 020f 	and.w	r2, r3, #15
 80094e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4422      	add	r2, r4
 80094ea:	609a      	str	r2, [r3, #8]
}
 80094ec:	bf00      	nop
 80094ee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80094f2:	46bd      	mov	sp, r7
 80094f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80094f8:	51eb851f 	.word	0x51eb851f

080094fc <memset>:
 80094fc:	4402      	add	r2, r0
 80094fe:	4603      	mov	r3, r0
 8009500:	4293      	cmp	r3, r2
 8009502:	d100      	bne.n	8009506 <memset+0xa>
 8009504:	4770      	bx	lr
 8009506:	f803 1b01 	strb.w	r1, [r3], #1
 800950a:	e7f9      	b.n	8009500 <memset+0x4>

0800950c <__libc_init_array>:
 800950c:	b570      	push	{r4, r5, r6, lr}
 800950e:	4d0d      	ldr	r5, [pc, #52]	@ (8009544 <__libc_init_array+0x38>)
 8009510:	4c0d      	ldr	r4, [pc, #52]	@ (8009548 <__libc_init_array+0x3c>)
 8009512:	1b64      	subs	r4, r4, r5
 8009514:	10a4      	asrs	r4, r4, #2
 8009516:	2600      	movs	r6, #0
 8009518:	42a6      	cmp	r6, r4
 800951a:	d109      	bne.n	8009530 <__libc_init_array+0x24>
 800951c:	4d0b      	ldr	r5, [pc, #44]	@ (800954c <__libc_init_array+0x40>)
 800951e:	4c0c      	ldr	r4, [pc, #48]	@ (8009550 <__libc_init_array+0x44>)
 8009520:	f000 f818 	bl	8009554 <_init>
 8009524:	1b64      	subs	r4, r4, r5
 8009526:	10a4      	asrs	r4, r4, #2
 8009528:	2600      	movs	r6, #0
 800952a:	42a6      	cmp	r6, r4
 800952c:	d105      	bne.n	800953a <__libc_init_array+0x2e>
 800952e:	bd70      	pop	{r4, r5, r6, pc}
 8009530:	f855 3b04 	ldr.w	r3, [r5], #4
 8009534:	4798      	blx	r3
 8009536:	3601      	adds	r6, #1
 8009538:	e7ee      	b.n	8009518 <__libc_init_array+0xc>
 800953a:	f855 3b04 	ldr.w	r3, [r5], #4
 800953e:	4798      	blx	r3
 8009540:	3601      	adds	r6, #1
 8009542:	e7f2      	b.n	800952a <__libc_init_array+0x1e>
 8009544:	0800962c 	.word	0x0800962c
 8009548:	0800962c 	.word	0x0800962c
 800954c:	0800962c 	.word	0x0800962c
 8009550:	08009630 	.word	0x08009630

08009554 <_init>:
 8009554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009556:	bf00      	nop
 8009558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800955a:	bc08      	pop	{r3}
 800955c:	469e      	mov	lr, r3
 800955e:	4770      	bx	lr

08009560 <_fini>:
 8009560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009562:	bf00      	nop
 8009564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009566:	bc08      	pop	{r3}
 8009568:	469e      	mov	lr, r3
 800956a:	4770      	bx	lr
