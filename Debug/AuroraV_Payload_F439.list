
AuroraV_Payload_F439.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009138  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080092e4  080092e4  000192e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800939c  0800939c  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  0800939c  0800939c  0001939c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093a4  080093a4  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093a4  080093a4  000193a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093a8  080093a8  000193a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  080093ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
 10 .bss          00000608  20000028  20000028  00020028  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000630  20000630  00020028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001cd05  00000000  00000000  0002009b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003ee3  00000000  00000000  0003cda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000016f0  00000000  00000000  00040c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000011d6  00000000  00000000  00042378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027dc5  00000000  00000000  0004354e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001d984  00000000  00000000  0006b313  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e9ea2  00000000  00000000  00088c97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005fb4  00000000  00000000  00172b3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  00178af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000028 	.word	0x20000028
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080092cc 	.word	0x080092cc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000002c 	.word	0x2000002c
 80001e8:	080092cc 	.word	0x080092cc

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <init_accel>:
uint8_t OUT_Y_L 				= 0x34;
uint8_t OUT_Y_H 				= 0x35;
uint8_t OUT_Z_L 				= 0x36;
uint8_t OUT_Z_H 				= 0x37;

HAL_StatusTypeDef init_accel(I2C_HandleTypeDef* hi2c) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;

	// Set standby mode
	ret = i2c_write_reg(hi2c, ADXL314_ADDR, &POWER_CTL_REG, 0x00);
 8000500:	4b14      	ldr	r3, [pc, #80]	; (8000554 <init_accel+0x5c>)
 8000502:	7819      	ldrb	r1, [r3, #0]
 8000504:	2300      	movs	r3, #0
 8000506:	4a14      	ldr	r2, [pc, #80]	; (8000558 <init_accel+0x60>)
 8000508:	6878      	ldr	r0, [r7, #4]
 800050a:	f000 fbe8 	bl	8000cde <i2c_write_reg>
 800050e:	4603      	mov	r3, r0
 8000510:	73fb      	strb	r3, [r7, #15]

	// Set to 200G right justified
	ret = i2c_write_reg(hi2c, ADXL314_ADDR, &DATA_FORMAT_REG, RIGHT_JUST);
 8000512:	4b10      	ldr	r3, [pc, #64]	; (8000554 <init_accel+0x5c>)
 8000514:	7819      	ldrb	r1, [r3, #0]
 8000516:	230b      	movs	r3, #11
 8000518:	4a10      	ldr	r2, [pc, #64]	; (800055c <init_accel+0x64>)
 800051a:	6878      	ldr	r0, [r7, #4]
 800051c:	f000 fbdf 	bl	8000cde <i2c_write_reg>
 8000520:	4603      	mov	r3, r0
 8000522:	73fb      	strb	r3, [r7, #15]

	// Set to 1kHz ODR
	ret = i2c_write_reg(hi2c, ADXL314_ADDR, &BW_RATE_REG, MASK_1kHz);
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <init_accel+0x5c>)
 8000526:	7819      	ldrb	r1, [r3, #0]
 8000528:	230a      	movs	r3, #10
 800052a:	4a0d      	ldr	r2, [pc, #52]	; (8000560 <init_accel+0x68>)
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	f000 fbd6 	bl	8000cde <i2c_write_reg>
 8000532:	4603      	mov	r3, r0
 8000534:	73fb      	strb	r3, [r7, #15]

	// Write the offset registers
//	ret = writeOffset(hi2c);

	// Start measuring
	ret = i2c_write_reg(hi2c, ADXL314_ADDR, &POWER_CTL_REG, START_MEAS);
 8000536:	4b07      	ldr	r3, [pc, #28]	; (8000554 <init_accel+0x5c>)
 8000538:	7819      	ldrb	r1, [r3, #0]
 800053a:	2308      	movs	r3, #8
 800053c:	4a06      	ldr	r2, [pc, #24]	; (8000558 <init_accel+0x60>)
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f000 fbcd 	bl	8000cde <i2c_write_reg>
 8000544:	4603      	mov	r3, r0
 8000546:	73fb      	strb	r3, [r7, #15]

	return ret;
 8000548:	7bfb      	ldrb	r3, [r7, #15]
}
 800054a:	4618      	mov	r0, r3
 800054c:	3710      	adds	r7, #16
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	20000000 	.word	0x20000000
 8000558:	20000002 	.word	0x20000002
 800055c:	20000003 	.word	0x20000003
 8000560:	20000001 	.word	0x20000001

08000564 <readAccelerometer>:
void readAccelerometer(uint8_t values[6], I2C_HandleTypeDef* hi2c) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af02      	add	r7, sp, #8
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < 6; i++) {
 800056e:	2300      	movs	r3, #0
 8000570:	73fb      	strb	r3, [r7, #15]
 8000572:	e007      	b.n	8000584 <readAccelerometer+0x20>
		values[i] = 0x00;
 8000574:	7bfb      	ldrb	r3, [r7, #15]
 8000576:	687a      	ldr	r2, [r7, #4]
 8000578:	4413      	add	r3, r2
 800057a:	2200      	movs	r2, #0
 800057c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 6; i++) {
 800057e:	7bfb      	ldrb	r3, [r7, #15]
 8000580:	3301      	adds	r3, #1
 8000582:	73fb      	strb	r3, [r7, #15]
 8000584:	7bfb      	ldrb	r3, [r7, #15]
 8000586:	2b05      	cmp	r3, #5
 8000588:	d9f4      	bls.n	8000574 <readAccelerometer+0x10>
	}

	i2c_burst_read(hi2c, ADXL314_ADDR, OUT_X_L, 6, values);
 800058a:	4b07      	ldr	r3, [pc, #28]	; (80005a8 <readAccelerometer+0x44>)
 800058c:	7819      	ldrb	r1, [r3, #0]
 800058e:	4b07      	ldr	r3, [pc, #28]	; (80005ac <readAccelerometer+0x48>)
 8000590:	781a      	ldrb	r2, [r3, #0]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	2306      	movs	r3, #6
 8000598:	6838      	ldr	r0, [r7, #0]
 800059a:	f000 fb6b 	bl	8000c74 <i2c_burst_read>
}
 800059e:	bf00      	nop
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000000 	.word	0x20000000
 80005ac:	20000004 	.word	0x20000004

080005b0 <readAccel_whoami>:

uint8_t readAccel_whoami(I2C_HandleTypeDef* hi2c) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	uint8_t data = 0x00;
 80005b8:	2300      	movs	r3, #0
 80005ba:	73fb      	strb	r3, [r7, #15]
	i2c_read_reg(hi2c, &data, ADXL314_ADDR, &WHOAMI);
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <readAccel_whoami+0x28>)
 80005be:	781a      	ldrb	r2, [r3, #0]
 80005c0:	f107 010f 	add.w	r1, r7, #15
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <readAccel_whoami+0x2c>)
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	f000 fb2b 	bl	8000c22 <i2c_read_reg>

	return data;
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	3710      	adds	r7, #16
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000000 	.word	0x20000000
 80005dc:	20000044 	.word	0x20000044

080005e0 <init_bme280>:
uint8_t OUT_HUM_H 			= 0xFD;
uint8_t CALIB_ST_1			= 0x88;
uint8_t CALIB_ST_2			= 0xE1;


HAL_StatusTypeDef init_bme280(I2C_HandleTypeDef* hi2c, uint8_t bme) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	460b      	mov	r3, r1
 80005ea:	70fb      	strb	r3, [r7, #3]
	uint8_t bme_addr = getBME280Config(bme).bme_addr;
 80005ec:	78fb      	ldrb	r3, [r7, #3]
 80005ee:	4618      	mov	r0, r3
 80005f0:	f000 f8e0 	bl	80007b4 <getBME280Config>
 80005f4:	4603      	mov	r3, r0
 80005f6:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef ret;
	uint8_t control_reg = 0x00;
 80005f8:	2300      	movs	r3, #0
 80005fa:	737b      	strb	r3, [r7, #13]

	// Reset the sensor
	ret =  i2c_write_reg(hi2c, bme_addr, &RST_REG, RST);
 80005fc:	7bf9      	ldrb	r1, [r7, #15]
 80005fe:	23b6      	movs	r3, #182	; 0xb6
 8000600:	4a19      	ldr	r2, [pc, #100]	; (8000668 <init_bme280+0x88>)
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f000 fb6b 	bl	8000cde <i2c_write_reg>
 8000608:	4603      	mov	r3, r0
 800060a:	73bb      	strb	r3, [r7, #14]

	// Set humidity control register
	i2c_read_reg(hi2c, &control_reg, bme_addr, &CTRL_HUM_REG);
 800060c:	7bfa      	ldrb	r2, [r7, #15]
 800060e:	f107 010d 	add.w	r1, r7, #13
 8000612:	4b16      	ldr	r3, [pc, #88]	; (800066c <init_bme280+0x8c>)
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f000 fb04 	bl	8000c22 <i2c_read_reg>
	control_reg = control_reg & 0xF8;
 800061a:	7b7b      	ldrb	r3, [r7, #13]
 800061c:	f023 0307 	bic.w	r3, r3, #7
 8000620:	b2db      	uxtb	r3, r3
 8000622:	737b      	strb	r3, [r7, #13]
	control_reg = control_reg | CTRL_HUM_MSK;
 8000624:	7b7b      	ldrb	r3, [r7, #13]
 8000626:	f043 0301 	orr.w	r3, r3, #1
 800062a:	b2db      	uxtb	r3, r3
 800062c:	737b      	strb	r3, [r7, #13]
	ret = i2c_write_reg(hi2c, bme_addr, &CTRL_HUM_REG, control_reg);
 800062e:	7b7b      	ldrb	r3, [r7, #13]
 8000630:	7bf9      	ldrb	r1, [r7, #15]
 8000632:	4a0e      	ldr	r2, [pc, #56]	; (800066c <init_bme280+0x8c>)
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f000 fb52 	bl	8000cde <i2c_write_reg>
 800063a:	4603      	mov	r3, r0
 800063c:	73bb      	strb	r3, [r7, #14]

	// Set measure control register
	ret = i2c_write_reg(hi2c, bme_addr, &CTRL_MEAS_REG, CTRL_MEAS_MSK);
 800063e:	7bf9      	ldrb	r1, [r7, #15]
 8000640:	2327      	movs	r3, #39	; 0x27
 8000642:	4a0b      	ldr	r2, [pc, #44]	; (8000670 <init_bme280+0x90>)
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	f000 fb4a 	bl	8000cde <i2c_write_reg>
 800064a:	4603      	mov	r3, r0
 800064c:	73bb      	strb	r3, [r7, #14]

	// Set the config register
	ret = i2c_write_reg(hi2c, bme_addr, &CONF_REG, CONF_MSK);
 800064e:	7bf9      	ldrb	r1, [r7, #15]
 8000650:	2300      	movs	r3, #0
 8000652:	4a08      	ldr	r2, [pc, #32]	; (8000674 <init_bme280+0x94>)
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f000 fb42 	bl	8000cde <i2c_write_reg>
 800065a:	4603      	mov	r3, r0
 800065c:	73bb      	strb	r3, [r7, #14]

	return ret;
 800065e:	7bbb      	ldrb	r3, [r7, #14]
}
 8000660:	4618      	mov	r0, r3
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000006 	.word	0x20000006
 800066c:	20000007 	.word	0x20000007
 8000670:	20000008 	.word	0x20000008
 8000674:	20000009 	.word	0x20000009

08000678 <readTempHumPres>:

void readTempHumPres(uint8_t values[6], I2C_HandleTypeDef* hi2c, uint8_t bme) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b08a      	sub	sp, #40	; 0x28
 800067c:	af02      	add	r7, sp, #8
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	4613      	mov	r3, r2
 8000684:	71fb      	strb	r3, [r7, #7]
	uint8_t readings[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 8000686:	4a27      	ldr	r2, [pc, #156]	; (8000724 <readTempHumPres+0xac>)
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000690:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t bme_addr = getBME280Config(bme).bme_addr;
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	4618      	mov	r0, r3
 8000698:	f000 f88c 	bl	80007b4 <getBME280Config>
 800069c:	4603      	mov	r3, r0
 800069e:	777b      	strb	r3, [r7, #29]
	i2c_burst_read(hi2c, bme_addr, OUT_PRESS_H, 8, readings);
 80006a0:	4b21      	ldr	r3, [pc, #132]	; (8000728 <readTempHumPres+0xb0>)
 80006a2:	781a      	ldrb	r2, [r3, #0]
 80006a4:	7f79      	ldrb	r1, [r7, #29]
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	2308      	movs	r3, #8
 80006ae:	68b8      	ldr	r0, [r7, #8]
 80006b0:	f000 fae0 	bl	8000c74 <i2c_burst_read>

	// Clear the 0 values on the xlsb registers
	uint8_t j = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	77fb      	strb	r3, [r7, #31]
    for(uint8_t i = 0; i < 8; i++) {
 80006b8:	2300      	movs	r3, #0
 80006ba:	77bb      	strb	r3, [r7, #30]
 80006bc:	e014      	b.n	80006e8 <readTempHumPres+0x70>
        if(i != 2 && i != 5) {  // if the index is not 2 or 5
 80006be:	7fbb      	ldrb	r3, [r7, #30]
 80006c0:	2b02      	cmp	r3, #2
 80006c2:	d00e      	beq.n	80006e2 <readTempHumPres+0x6a>
 80006c4:	7fbb      	ldrb	r3, [r7, #30]
 80006c6:	2b05      	cmp	r3, #5
 80006c8:	d00b      	beq.n	80006e2 <readTempHumPres+0x6a>
        	values[j] = readings[i];
 80006ca:	7fba      	ldrb	r2, [r7, #30]
 80006cc:	7ffb      	ldrb	r3, [r7, #31]
 80006ce:	68f9      	ldr	r1, [r7, #12]
 80006d0:	440b      	add	r3, r1
 80006d2:	3220      	adds	r2, #32
 80006d4:	443a      	add	r2, r7
 80006d6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80006da:	701a      	strb	r2, [r3, #0]
            j++;
 80006dc:	7ffb      	ldrb	r3, [r7, #31]
 80006de:	3301      	adds	r3, #1
 80006e0:	77fb      	strb	r3, [r7, #31]
    for(uint8_t i = 0; i < 8; i++) {
 80006e2:	7fbb      	ldrb	r3, [r7, #30]
 80006e4:	3301      	adds	r3, #1
 80006e6:	77bb      	strb	r3, [r7, #30]
 80006e8:	7fbb      	ldrb	r3, [r7, #30]
 80006ea:	2b07      	cmp	r3, #7
 80006ec:	d9e7      	bls.n	80006be <readTempHumPres+0x46>
        }
    }

    // Swap elements to make the array little endian
    swap(&values[0], &values[1]);
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	3301      	adds	r3, #1
 80006f2:	4619      	mov	r1, r3
 80006f4:	68f8      	ldr	r0, [r7, #12]
 80006f6:	f000 f874 	bl	80007e2 <swap>
    swap(&values[2], &values[3]);
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	1c9a      	adds	r2, r3, #2
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	3303      	adds	r3, #3
 8000702:	4619      	mov	r1, r3
 8000704:	4610      	mov	r0, r2
 8000706:	f000 f86c 	bl	80007e2 <swap>
    swap(&values[4], &values[5]);
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	1d1a      	adds	r2, r3, #4
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	3305      	adds	r3, #5
 8000712:	4619      	mov	r1, r3
 8000714:	4610      	mov	r0, r2
 8000716:	f000 f864 	bl	80007e2 <swap>
}
 800071a:	bf00      	nop
 800071c:	3720      	adds	r7, #32
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	080092e4 	.word	0x080092e4
 8000728:	2000000a 	.word	0x2000000a

0800072c <readBME280_id_reg>:

uint8_t readBME280_id_reg(I2C_HandleTypeDef* hi2c, uint8_t bme) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	460b      	mov	r3, r1
 8000736:	70fb      	strb	r3, [r7, #3]
	uint8_t bme_addr = getBME280Config(bme).bme_addr;
 8000738:	78fb      	ldrb	r3, [r7, #3]
 800073a:	4618      	mov	r0, r3
 800073c:	f000 f83a 	bl	80007b4 <getBME280Config>
 8000740:	4603      	mov	r3, r0
 8000742:	73fb      	strb	r3, [r7, #15]
	uint8_t data = 0x00;
 8000744:	2300      	movs	r3, #0
 8000746:	73bb      	strb	r3, [r7, #14]
	i2c_read_reg(hi2c, &data, bme_addr, &ID_REG);
 8000748:	7bfa      	ldrb	r2, [r7, #15]
 800074a:	f107 010e 	add.w	r1, r7, #14
 800074e:	4b04      	ldr	r3, [pc, #16]	; (8000760 <readBME280_id_reg+0x34>)
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f000 fa66 	bl	8000c22 <i2c_read_reg>

	return data;
 8000756:	7bbb      	ldrb	r3, [r7, #14]
}
 8000758:	4618      	mov	r0, r3
 800075a:	3710      	adds	r7, #16
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000005 	.word	0x20000005

08000764 <readBME280_calib>:

void readBME280_calib(I2C_HandleTypeDef* hi2c, uint8_t bme, uint8_t calibration1[CALIB_CNT_1], uint8_t calibration2[CALIB_CNT_2]) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b088      	sub	sp, #32
 8000768:	af02      	add	r7, sp, #8
 800076a:	60f8      	str	r0, [r7, #12]
 800076c:	607a      	str	r2, [r7, #4]
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	460b      	mov	r3, r1
 8000772:	72fb      	strb	r3, [r7, #11]
	uint8_t bme_addr = getBME280Config(bme).bme_addr;
 8000774:	7afb      	ldrb	r3, [r7, #11]
 8000776:	4618      	mov	r0, r3
 8000778:	f000 f81c 	bl	80007b4 <getBME280Config>
 800077c:	4603      	mov	r3, r0
 800077e:	75fb      	strb	r3, [r7, #23]
	i2c_burst_read(hi2c, bme_addr, CALIB_ST_1, CALIB_CNT_1, calibration1);
 8000780:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <readBME280_calib+0x48>)
 8000782:	781a      	ldrb	r2, [r3, #0]
 8000784:	7df9      	ldrb	r1, [r7, #23]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	2319      	movs	r3, #25
 800078c:	68f8      	ldr	r0, [r7, #12]
 800078e:	f000 fa71 	bl	8000c74 <i2c_burst_read>
	i2c_burst_read(hi2c, bme_addr, CALIB_ST_2, CALIB_CNT_2, calibration2);
 8000792:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <readBME280_calib+0x4c>)
 8000794:	781a      	ldrb	r2, [r3, #0]
 8000796:	7df9      	ldrb	r1, [r7, #23]
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	2307      	movs	r3, #7
 800079e:	68f8      	ldr	r0, [r7, #12]
 80007a0:	f000 fa68 	bl	8000c74 <i2c_burst_read>
}
 80007a4:	bf00      	nop
 80007a6:	3718      	adds	r7, #24
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	2000000b 	.word	0x2000000b
 80007b0:	2000000c 	.word	0x2000000c

080007b4 <getBME280Config>:

BME280_Config getBME280Config(uint8_t bme) {
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
	BME280_Config config;
	if (bme == 0) {
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d102      	bne.n	80007ca <getBME280Config+0x16>
		config.bme_addr = BME280_ADDR_0;
 80007c4:	2376      	movs	r3, #118	; 0x76
 80007c6:	733b      	strb	r3, [r7, #12]
 80007c8:	e004      	b.n	80007d4 <getBME280Config+0x20>
	} else if (bme == 1) {
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d101      	bne.n	80007d4 <getBME280Config+0x20>
		config.bme_addr = BME280_ADDR_1;
 80007d0:	2377      	movs	r3, #119	; 0x77
 80007d2:	733b      	strb	r3, [r7, #12]
	}
    return config;
 80007d4:	7b3b      	ldrb	r3, [r7, #12]
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3714      	adds	r7, #20
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr

080007e2 <swap>:

void swap(uint8_t* a, uint8_t* b) {
 80007e2:	b480      	push	{r7}
 80007e4:	b085      	sub	sp, #20
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
 80007ea:	6039      	str	r1, [r7, #0]
    uint8_t temp = *a;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	73fb      	strb	r3, [r7, #15]
    *a = *b;
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	781a      	ldrb	r2, [r3, #0]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	701a      	strb	r2, [r3, #0]
    *b = temp;
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	7bfa      	ldrb	r2, [r7, #15]
 80007fe:	701a      	strb	r2, [r3, #0]
}
 8000800:	bf00      	nop
 8000802:	3714      	adds	r7, #20
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr

0800080c <sendCAN_TxMessage>:
 */

#include "can_driver.h"


void sendCAN_TxMessage(CAN_HandleTypeDef *hcan, uint8_t dataSize, uint8_t TxData[dataSize], uint32_t *CAN_TxMailbox, uint16_t payload_id) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	; 0x28
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	607a      	str	r2, [r7, #4]
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	460b      	mov	r3, r1
 800081a:	72fb      	strb	r3, [r7, #11]
	CAN_TxHeaderTypeDef TxHeader = configureTxHeader(payload_id, dataSize);
 800081c:	f107 0310 	add.w	r3, r7, #16
 8000820:	7afa      	ldrb	r2, [r7, #11]
 8000822:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8000824:	4618      	mov	r0, r3
 8000826:	f000 f80b 	bl	8000840 <configureTxHeader>
	HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, CAN_TxMailbox);
 800082a:	f107 0110 	add.w	r1, r7, #16
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	687a      	ldr	r2, [r7, #4]
 8000832:	68f8      	ldr	r0, [r7, #12]
 8000834:	f002 fd9e 	bl	8003374 <HAL_CAN_AddTxMessage>
}
 8000838:	bf00      	nop
 800083a:	3728      	adds	r7, #40	; 0x28
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <configureTxHeader>:

CAN_TxHeaderTypeDef configureTxHeader(uint16_t payload_id, uint8_t dataSize) {
 8000840:	b4b0      	push	{r4, r5, r7}
 8000842:	b089      	sub	sp, #36	; 0x24
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	460b      	mov	r3, r1
 800084a:	807b      	strh	r3, [r7, #2]
 800084c:	4613      	mov	r3, r2
 800084e:	707b      	strb	r3, [r7, #1]
	CAN_TxHeaderTypeDef TxHeader;
	TxHeader.DLC = dataSize;
 8000850:	787b      	ldrb	r3, [r7, #1]
 8000852:	61bb      	str	r3, [r7, #24]
	TxHeader.IDE = CAN_ID_STD;
 8000854:	2300      	movs	r3, #0
 8000856:	613b      	str	r3, [r7, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
	TxHeader.StdId = payload_id;
 800085c:	887b      	ldrh	r3, [r7, #2]
 800085e:	60bb      	str	r3, [r7, #8]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000860:	2300      	movs	r3, #0
 8000862:	773b      	strb	r3, [r7, #28]
	return TxHeader;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	461d      	mov	r5, r3
 8000868:	f107 0408 	add.w	r4, r7, #8
 800086c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800086e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000870:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000874:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	3724      	adds	r7, #36	; 0x24
 800087c:	46bd      	mov	sp, r7
 800087e:	bcb0      	pop	{r4, r5, r7}
 8000880:	4770      	bx	lr

08000882 <check_busy>:
uint8_t FLASH_32K_ERS	= 0x52;			// Erase all memory within a 32K-byte block
uint8_t FLASH_ERASE		= 0xC7;			// Erase the entire chip
uint8_t RST_EN			= 0x66;			// Reset enable
uint8_t DEV_RST			= 0x99;			// Reset device

uint8_t check_busy(SPI_HandleTypeDef *hspi, GPIO_Config config, int timeout) {
 8000882:	b580      	push	{r7, lr}
 8000884:	b088      	sub	sp, #32
 8000886:	af00      	add	r7, sp, #0
 8000888:	60f8      	str	r0, [r7, #12]
 800088a:	1d38      	adds	r0, r7, #4
 800088c:	e880 0006 	stmia.w	r0, {r1, r2}
 8000890:	603b      	str	r3, [r7, #0]
	uint8_t ret_val = 0x00;
 8000892:	2300      	movs	r3, #0
 8000894:	77fb      	strb	r3, [r7, #31]

    // Get the current time
	uint32_t startTick = HAL_GetTick();
 8000896:	f002 fb1d 	bl	8002ed4 <HAL_GetTick>
 800089a:	61b8      	str	r0, [r7, #24]

	// Read the status register to ensure no write is currently in progress
	uint8_t busy = 0x01;
 800089c:	2301      	movs	r3, #1
 800089e:	77bb      	strb	r3, [r7, #30]
	while(busy) {
 80008a0:	e015      	b.n	80008ce <check_busy+0x4c>
		// Check if there is a write in progress
		busy = (check_status_register(hspi, config) & 0x01);
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80008a8:	68f8      	ldr	r0, [r7, #12]
 80008aa:	f000 f819 	bl	80008e0 <check_status_register>
 80008ae:	4603      	mov	r3, r0
 80008b0:	f003 0301 	and.w	r3, r3, #1
 80008b4:	77bb      	strb	r3, [r7, #30]

		uint32_t currTick = HAL_GetTick();
 80008b6:	f002 fb0d 	bl	8002ed4 <HAL_GetTick>
 80008ba:	6178      	str	r0, [r7, #20]

        // Check if the timeout has been reached
		if ((currTick - startTick) >= timeout) {
 80008bc:	697a      	ldr	r2, [r7, #20]
 80008be:	69bb      	ldr	r3, [r7, #24]
 80008c0:	1ad2      	subs	r2, r2, r3
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d302      	bcc.n	80008ce <check_busy+0x4c>
        	ret_val = 0x01;
 80008c8:	2301      	movs	r3, #1
 80008ca:	77fb      	strb	r3, [r7, #31]
            break;
 80008cc:	e002      	b.n	80008d4 <check_busy+0x52>
	while(busy) {
 80008ce:	7fbb      	ldrb	r3, [r7, #30]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d1e6      	bne.n	80008a2 <check_busy+0x20>
        }
	}

	return ret_val;
 80008d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3720      	adds	r7, #32
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <check_status_register>:

uint8_t check_status_register(SPI_HandleTypeDef *hspi, GPIO_Config config) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b088      	sub	sp, #32
 80008e4:	af02      	add	r7, sp, #8
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	e883 0006 	stmia.w	r3, {r1, r2}
	uint8_t status_reg = 0x00;
 80008ee:	2300      	movs	r3, #0
 80008f0:	75fb      	strb	r3, [r7, #23]
	spi_sendOp_readByte(&FLASH_READSR1, hspi, &status_reg, config.GPIOx, config.GPIO_Pin);
 80008f2:	6879      	ldr	r1, [r7, #4]
 80008f4:	893b      	ldrh	r3, [r7, #8]
 80008f6:	f107 0217 	add.w	r2, r7, #23
 80008fa:	9300      	str	r3, [sp, #0]
 80008fc:	460b      	mov	r3, r1
 80008fe:	68f9      	ldr	r1, [r7, #12]
 8000900:	4803      	ldr	r0, [pc, #12]	; (8000910 <check_status_register+0x30>)
 8000902:	f001 fd97 	bl	8002434 <spi_sendOp_readByte>
	return status_reg;
 8000906:	7dfb      	ldrb	r3, [r7, #23]
}
 8000908:	4618      	mov	r0, r3
 800090a:	3718      	adds	r7, #24
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	2000000f 	.word	0x2000000f

08000914 <erase_chip_spi>:
 *      Author: aidencontini
 */

#include "data_output_spi.h"

HAL_StatusTypeDef erase_chip_spi(SPI_HandleTypeDef *hspi, GPIO_Config config) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	e883 0006 	stmia.w	r3, {r1, r2}
	check_busy(hspi, config, BSY_TIMEOUT_MS);
 8000922:	2305      	movs	r3, #5
 8000924:	1d3a      	adds	r2, r7, #4
 8000926:	ca06      	ldmia	r2, {r1, r2}
 8000928:	68f8      	ldr	r0, [r7, #12]
 800092a:	f7ff ffaa 	bl	8000882 <check_busy>

	write_enable_spi(hspi, config);
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000934:	68f8      	ldr	r0, [r7, #12]
 8000936:	f000 f815 	bl	8000964 <write_enable_spi>
	perform_operation(&FLASH_ERASE, hspi, config.GPIOx, config.GPIO_Pin);
 800093a:	687a      	ldr	r2, [r7, #4]
 800093c:	893b      	ldrh	r3, [r7, #8]
 800093e:	68f9      	ldr	r1, [r7, #12]
 8000940:	4806      	ldr	r0, [pc, #24]	; (800095c <erase_chip_spi+0x48>)
 8000942:	f001 fd9d 	bl	8002480 <perform_operation>

	check_busy(hspi, config, CHIP_ERASE_TO);
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <erase_chip_spi+0x4c>)
 8000948:	1d3a      	adds	r2, r7, #4
 800094a:	ca06      	ldmia	r2, {r1, r2}
 800094c:	68f8      	ldr	r0, [r7, #12]
 800094e:	f7ff ff98 	bl	8000882 <check_busy>

	return HAL_OK;
 8000952:	2300      	movs	r3, #0
}
 8000954:	4618      	mov	r0, r3
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000012 	.word	0x20000012
 8000960:	00030d40 	.word	0x00030d40

08000964 <write_enable_spi>:
	check_busy(hspi, config, BLK_ERS_32K_TO);

	return HAL_OK;
}

void write_enable_spi(SPI_HandleTypeDef *hspi, GPIO_Config config) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	e883 0006 	stmia.w	r3, {r1, r2}
	perform_operation(&FLASH_WREN, hspi, config.GPIOx, config.GPIO_Pin);
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	893b      	ldrh	r3, [r7, #8]
 8000976:	68f9      	ldr	r1, [r7, #12]
 8000978:	4803      	ldr	r0, [pc, #12]	; (8000988 <write_enable_spi+0x24>)
 800097a:	f001 fd81 	bl	8002480 <perform_operation>
}
 800097e:	bf00      	nop
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	2000000d 	.word	0x2000000d

0800098c <software_reset>:

void write_disable_spi(SPI_HandleTypeDef *hspi, GPIO_Config config) {
	perform_operation(&FLASH_WRDIS, hspi, config.GPIOx, config.GPIO_Pin);
}

void software_reset(SPI_HandleTypeDef *hspi, GPIO_Config config) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	e883 0006 	stmia.w	r3, {r1, r2}

	check_busy(hspi, config, BSY_TIMEOUT_MS);
 800099a:	2305      	movs	r3, #5
 800099c:	1d3a      	adds	r2, r7, #4
 800099e:	ca06      	ldmia	r2, {r1, r2}
 80009a0:	68f8      	ldr	r0, [r7, #12]
 80009a2:	f7ff ff6e 	bl	8000882 <check_busy>

	perform_operation(&RST_EN, hspi, config.GPIOx, config.GPIO_Pin);
 80009a6:	687a      	ldr	r2, [r7, #4]
 80009a8:	893b      	ldrh	r3, [r7, #8]
 80009aa:	68f9      	ldr	r1, [r7, #12]
 80009ac:	4807      	ldr	r0, [pc, #28]	; (80009cc <software_reset+0x40>)
 80009ae:	f001 fd67 	bl	8002480 <perform_operation>
	perform_operation(&DEV_RST, hspi, config.GPIOx, config.GPIO_Pin);
 80009b2:	687a      	ldr	r2, [r7, #4]
 80009b4:	893b      	ldrh	r3, [r7, #8]
 80009b6:	68f9      	ldr	r1, [r7, #12]
 80009b8:	4805      	ldr	r0, [pc, #20]	; (80009d0 <software_reset+0x44>)
 80009ba:	f001 fd61 	bl	8002480 <perform_operation>

	HAL_Delay(5);
 80009be:	2005      	movs	r0, #5
 80009c0:	f002 fa94 	bl	8002eec <HAL_Delay>
}
 80009c4:	bf00      	nop
 80009c6:	3710      	adds	r7, #16
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000013 	.word	0x20000013
 80009d0:	20000014 	.word	0x20000014

080009d4 <write_data_spi_dma>:
	spi_write_data(&FLASH_PGWR, PAGE_SIZE, page, hspi, addr, config.GPIOx, config.GPIO_Pin);

	return 0;
}

uint8_t write_data_spi_dma(uint8_t page[PAGE_SIZE], SPI_HandleTypeDef *hspi, uint32_t addr, GPIO_Config config) {
 80009d4:	b082      	sub	sp, #8
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b088      	sub	sp, #32
 80009da:	af04      	add	r7, sp, #16
 80009dc:	60f8      	str	r0, [r7, #12]
 80009de:	60b9      	str	r1, [r7, #8]
 80009e0:	607a      	str	r2, [r7, #4]
 80009e2:	61fb      	str	r3, [r7, #28]
	check_busy(hspi, config, BSY_TIMEOUT_MS);
 80009e4:	2305      	movs	r3, #5
 80009e6:	f107 021c 	add.w	r2, r7, #28
 80009ea:	ca06      	ldmia	r2, {r1, r2}
 80009ec:	68b8      	ldr	r0, [r7, #8]
 80009ee:	f7ff ff48 	bl	8000882 <check_busy>

	// Send the write enable signal
	write_enable_spi(hspi, config);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80009fa:	68b8      	ldr	r0, [r7, #8]
 80009fc:	f7ff ffb2 	bl	8000964 <write_enable_spi>
	spi_write_data_dma(&FLASH_PGWR, PAGE_SIZE, page, hspi, addr, config.GPIOx, config.GPIO_Pin);
 8000a00:	69fb      	ldr	r3, [r7, #28]
 8000a02:	8c3a      	ldrh	r2, [r7, #32]
 8000a04:	9202      	str	r2, [sp, #8]
 8000a06:	9301      	str	r3, [sp, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	9300      	str	r3, [sp, #0]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	68fa      	ldr	r2, [r7, #12]
 8000a10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <write_data_spi_dma+0x58>)
 8000a16:	f001 fd9a 	bl	800254e <spi_write_data_dma>

	return 0;
 8000a1a:	2300      	movs	r3, #0
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3710      	adds	r7, #16
 8000a20:	46bd      	mov	sp, r7
 8000a22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a26:	b002      	add	sp, #8
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	2000000e 	.word	0x2000000e

08000a30 <find_next_blank_page>:
 *      Author: aidencontini
 */

#include "data_read_spi.h"

uint32_t find_next_blank_page(SPI_HandleTypeDef *hspi, GPIO_PinState *end_of_flash_ptr, GPIO_Config config) {
 8000a30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000a34:	b091      	sub	sp, #68	; 0x44
 8000a36:	af04      	add	r7, sp, #16
 8000a38:	60f8      	str	r0, [r7, #12]
 8000a3a:	60b9      	str	r1, [r7, #8]
 8000a3c:	4639      	mov	r1, r7
 8000a3e:	e881 000c 	stmia.w	r1, {r2, r3}
 8000a42:	466b      	mov	r3, sp
 8000a44:	461e      	mov	r6, r3
	uint8_t firstBytes = 4;
 8000a46:	2304      	movs	r3, #4
 8000a48:	77fb      	strb	r3, [r7, #31]

	uint8_t page_start[firstBytes];
 8000a4a:	7ff9      	ldrb	r1, [r7, #31]
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	61bb      	str	r3, [r7, #24]
 8000a52:	b2cb      	uxtb	r3, r1
 8000a54:	2200      	movs	r2, #0
 8000a56:	4698      	mov	r8, r3
 8000a58:	4691      	mov	r9, r2
 8000a5a:	f04f 0200 	mov.w	r2, #0
 8000a5e:	f04f 0300 	mov.w	r3, #0
 8000a62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000a66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000a6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000a6e:	b2cb      	uxtb	r3, r1
 8000a70:	2200      	movs	r2, #0
 8000a72:	461c      	mov	r4, r3
 8000a74:	4615      	mov	r5, r2
 8000a76:	f04f 0200 	mov.w	r2, #0
 8000a7a:	f04f 0300 	mov.w	r3, #0
 8000a7e:	00eb      	lsls	r3, r5, #3
 8000a80:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000a84:	00e2      	lsls	r2, r4, #3
 8000a86:	460b      	mov	r3, r1
 8000a88:	3307      	adds	r3, #7
 8000a8a:	08db      	lsrs	r3, r3, #3
 8000a8c:	00db      	lsls	r3, r3, #3
 8000a8e:	ebad 0d03 	sub.w	sp, sp, r3
 8000a92:	ab04      	add	r3, sp, #16
 8000a94:	3300      	adds	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < firstBytes; i++) {
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a9c:	e007      	b.n	8000aae <find_next_blank_page+0x7e>
		page_start[i] = 0;
 8000a9e:	697a      	ldr	r2, [r7, #20]
 8000aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aa2:	4413      	add	r3, r2
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < firstBytes; i++) {
 8000aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aaa:	3301      	adds	r3, #1
 8000aac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000aae:	7ffb      	ldrb	r3, [r7, #31]
 8000ab0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	dbf3      	blt.n	8000a9e <find_next_blank_page+0x6e>
	}

	uint32_t page_start_concat = (page_start[0] << 24) | (page_start[1] << 16) | (page_start[2] << 8) | page_start[3];
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	061a      	lsls	r2, r3, #24
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	785b      	ldrb	r3, [r3, #1]
 8000ac0:	041b      	lsls	r3, r3, #16
 8000ac2:	431a      	orrs	r2, r3
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	789b      	ldrb	r3, [r3, #2]
 8000ac8:	021b      	lsls	r3, r3, #8
 8000aca:	4313      	orrs	r3, r2
 8000acc:	697a      	ldr	r2, [r7, #20]
 8000ace:	78d2      	ldrb	r2, [r2, #3]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t temp = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t page_address = temp;
 8000ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ada:	623b      	str	r3, [r7, #32]

	while ((page_start_concat != 0xFFFFFFFF) || (temp == NUM_OF_PAGES)) {
 8000adc:	e027      	b.n	8000b2e <find_next_blank_page+0xfe>
		page_address = temp;
 8000ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae0:	623b      	str	r3, [r7, #32]

		check_busy(hspi, config, BSY_TIMEOUT_MS);
 8000ae2:	2305      	movs	r3, #5
 8000ae4:	463a      	mov	r2, r7
 8000ae6:	ca06      	ldmia	r2, {r1, r2}
 8000ae8:	68f8      	ldr	r0, [r7, #12]
 8000aea:	f7ff feca 	bl	8000882 <check_busy>

		spi_read_data(&FLASH_READEN, firstBytes, page_start, hspi, page_address, config.GPIOx, config.GPIO_Pin);
 8000aee:	7ffb      	ldrb	r3, [r7, #31]
 8000af0:	b299      	uxth	r1, r3
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	88ba      	ldrh	r2, [r7, #4]
 8000af6:	9202      	str	r2, [sp, #8]
 8000af8:	9301      	str	r3, [sp, #4]
 8000afa:	6a3b      	ldr	r3, [r7, #32]
 8000afc:	9300      	str	r3, [sp, #0]
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	697a      	ldr	r2, [r7, #20]
 8000b02:	4816      	ldr	r0, [pc, #88]	; (8000b5c <find_next_blank_page+0x12c>)
 8000b04:	f001 fcdc 	bl	80024c0 <spi_read_data>

		page_start_concat = (page_start[0] << 24) | (page_start[1] << 16) | (page_start[2] << 8) | page_start[3];
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	061a      	lsls	r2, r3, #24
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	785b      	ldrb	r3, [r3, #1]
 8000b12:	041b      	lsls	r3, r3, #16
 8000b14:	431a      	orrs	r2, r3
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	789b      	ldrb	r3, [r3, #2]
 8000b1a:	021b      	lsls	r3, r3, #8
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	697a      	ldr	r2, [r7, #20]
 8000b20:	78d2      	ldrb	r2, [r2, #3]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
		temp += PAGE_SIZE;
 8000b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b28:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
	while ((page_start_concat != 0xFFFFFFFF) || (temp == NUM_OF_PAGES)) {
 8000b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b34:	d1d3      	bne.n	8000ade <find_next_blank_page+0xae>
 8000b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b3c:	d0cf      	beq.n	8000ade <find_next_blank_page+0xae>
	}

	if (page_address == (NUM_OF_PAGES * PAGE_SIZE)) {
 8000b3e:	6a3b      	ldr	r3, [r7, #32]
 8000b40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b44:	d102      	bne.n	8000b4c <find_next_blank_page+0x11c>
		*end_of_flash_ptr = GPIO_PIN_RESET;
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	701a      	strb	r2, [r3, #0]
	}
	return page_address;
 8000b4c:	6a3b      	ldr	r3, [r7, #32]
 8000b4e:	46b5      	mov	sp, r6
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3734      	adds	r7, #52	; 0x34
 8000b54:	46bd      	mov	sp, r7
 8000b56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000010 	.word	0x20000010

08000b60 <read_page_spi>:

void read_page_spi(uint8_t data_read[PAGE_SIZE], SPI_HandleTypeDef *hspi, uint32_t addr, GPIO_Config config) {
 8000b60:	b082      	sub	sp, #8
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b088      	sub	sp, #32
 8000b66:	af04      	add	r7, sp, #16
 8000b68:	60f8      	str	r0, [r7, #12]
 8000b6a:	60b9      	str	r1, [r7, #8]
 8000b6c:	607a      	str	r2, [r7, #4]
 8000b6e:	61fb      	str	r3, [r7, #28]

	// Read the status register to ensure no write is currently in progress
	check_busy(hspi, config, BSY_TIMEOUT_MS);
 8000b70:	2305      	movs	r3, #5
 8000b72:	f107 021c 	add.w	r2, r7, #28
 8000b76:	ca06      	ldmia	r2, {r1, r2}
 8000b78:	68b8      	ldr	r0, [r7, #8]
 8000b7a:	f7ff fe82 	bl	8000882 <check_busy>
	spi_read_data(&FLASH_READEN, PAGE_SIZE, data_read, hspi, addr, config.GPIOx, config.GPIO_Pin);
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	8c3a      	ldrh	r2, [r7, #32]
 8000b82:	9202      	str	r2, [sp, #8]
 8000b84:	9301      	str	r3, [sp, #4]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	9300      	str	r3, [sp, #0]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	68fa      	ldr	r2, [r7, #12]
 8000b8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b92:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <read_page_spi+0x48>)
 8000b94:	f001 fc94 	bl	80024c0 <spi_read_data>
}
 8000b98:	bf00      	nop
 8000b9a:	3710      	adds	r7, #16
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ba2:	b002      	add	sp, #8
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	20000010 	.word	0x20000010

08000bac <read_manufacturer_id>:

void read_manufacturer_id(uint8_t manu[2], SPI_HandleTypeDef *hspi, GPIO_Config config) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	; 0x28
 8000bb0:	af04      	add	r7, sp, #16
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	4639      	mov	r1, r7
 8000bb8:	e881 000c 	stmia.w	r1, {r2, r3}

	// Read the status register to ensure no write is currently in progress
	check_busy(hspi, config, BSY_TIMEOUT_MS);
 8000bbc:	2305      	movs	r3, #5
 8000bbe:	463a      	mov	r2, r7
 8000bc0:	ca06      	ldmia	r2, {r1, r2}
 8000bc2:	68b8      	ldr	r0, [r7, #8]
 8000bc4:	f7ff fe5d 	bl	8000882 <check_busy>

	// Read the entire contents of a page starting from the given address
	uint8_t addr = 0x00;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	75fb      	strb	r3, [r7, #23]
	spi_read_data(&FLASH_READ_MANU, 2, manu, hspi, addr, config.GPIOx, config.GPIO_Pin);
 8000bcc:	7dfb      	ldrb	r3, [r7, #23]
 8000bce:	683a      	ldr	r2, [r7, #0]
 8000bd0:	88b9      	ldrh	r1, [r7, #4]
 8000bd2:	9102      	str	r1, [sp, #8]
 8000bd4:	9201      	str	r2, [sp, #4]
 8000bd6:	9300      	str	r3, [sp, #0]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	2102      	movs	r1, #2
 8000bde:	4803      	ldr	r0, [pc, #12]	; (8000bec <read_manufacturer_id+0x40>)
 8000be0:	f001 fc6e 	bl	80024c0 <spi_read_data>
}
 8000be4:	bf00      	nop
 8000be6:	3718      	adds	r7, #24
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000011 	.word	0x20000011

08000bf0 <create_GPIO_Config>:
 */

#include "gpio_struct.h"

// Function to initialize the GPIO_Config struct
GPIO_Config create_GPIO_Config(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8000bf0:	b480      	push	{r7}
 8000bf2:	b087      	sub	sp, #28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	80fb      	strh	r3, [r7, #6]
    GPIO_Config new_config;
    new_config.GPIOx = GPIOx;
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	613b      	str	r3, [r7, #16]
    new_config.GPIO_Pin = GPIO_Pin;
 8000c02:	88fb      	ldrh	r3, [r7, #6]
 8000c04:	82bb      	strh	r3, [r7, #20]
    return new_config;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	f107 0310 	add.w	r3, r7, #16
 8000c0e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c12:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000c16:	68f8      	ldr	r0, [r7, #12]
 8000c18:	371c      	adds	r7, #28
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <i2c_read_reg>:
 *      Author: aidencontini
 */

#include "i2c_driver.h"

HAL_StatusTypeDef i2c_read_reg(I2C_HandleTypeDef* hi2c, uint8_t* data_ptr, uint8_t dev_addr, uint8_t* register_addr) {
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b088      	sub	sp, #32
 8000c26:	af02      	add	r7, sp, #8
 8000c28:	60f8      	str	r0, [r7, #12]
 8000c2a:	60b9      	str	r1, [r7, #8]
 8000c2c:	603b      	str	r3, [r7, #0]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(hi2c, (dev_addr << 1) & 0xFE, register_addr, 1, I2C_TIMEOUT_SML);
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	b299      	uxth	r1, r3
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	9300      	str	r3, [sp, #0]
 8000c40:	2301      	movs	r3, #1
 8000c42:	683a      	ldr	r2, [r7, #0]
 8000c44:	68f8      	ldr	r0, [r7, #12]
 8000c46:	f004 f82d 	bl	8004ca4 <HAL_I2C_Master_Transmit>
	HAL_StatusTypeDef hal_status = HAL_I2C_Master_Receive(hi2c, (dev_addr << 1) | 0x01, data_ptr, 1, I2C_TIMEOUT_SML);
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	b21b      	sxth	r3, r3
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	b21b      	sxth	r3, r3
 8000c56:	b299      	uxth	r1, r3
 8000c58:	2301      	movs	r3, #1
 8000c5a:	9300      	str	r3, [sp, #0]
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	68ba      	ldr	r2, [r7, #8]
 8000c60:	68f8      	ldr	r0, [r7, #12]
 8000c62:	f004 f91d 	bl	8004ea0 <HAL_I2C_Master_Receive>
 8000c66:	4603      	mov	r3, r0
 8000c68:	75fb      	strb	r3, [r7, #23]
	return hal_status;
 8000c6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3718      	adds	r7, #24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <i2c_burst_read>:

HAL_StatusTypeDef i2c_burst_read(I2C_HandleTypeDef* hi2c, uint8_t dev_addr, uint8_t register_addr, uint8_t size, uint8_t data_buffer[size]) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af02      	add	r7, sp, #8
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	4608      	mov	r0, r1
 8000c7e:	4611      	mov	r1, r2
 8000c80:	461a      	mov	r2, r3
 8000c82:	4603      	mov	r3, r0
 8000c84:	70fb      	strb	r3, [r7, #3]
 8000c86:	460b      	mov	r3, r1
 8000c88:	70bb      	strb	r3, [r7, #2]
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	707b      	strb	r3, [r7, #1]
	// In order to read multiple bytes, it is necessary to assert the most significant bit of the sub-address field.
	uint8_t addr = register_addr | 0x80;
 8000c8e:	78bb      	ldrb	r3, [r7, #2]
 8000c90:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(hi2c, (dev_addr << 1) & 0xFE, &addr, 1, I2C_TIMEOUT_SML);
 8000c98:	78fb      	ldrb	r3, [r7, #3]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	b299      	uxth	r1, r3
 8000ca2:	f107 020e 	add.w	r2, r7, #14
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	9300      	str	r3, [sp, #0]
 8000caa:	2301      	movs	r3, #1
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f003 fff9 	bl	8004ca4 <HAL_I2C_Master_Transmit>
	HAL_StatusTypeDef hal_status =  HAL_I2C_Master_Receive(hi2c, (dev_addr << 1) | 0x01, data_buffer, size, I2C_TIMEOUT_LRG);
 8000cb2:	78fb      	ldrb	r3, [r7, #3]
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	b21b      	sxth	r3, r3
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	b21b      	sxth	r3, r3
 8000cbe:	b299      	uxth	r1, r3
 8000cc0:	787b      	ldrb	r3, [r7, #1]
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	220a      	movs	r2, #10
 8000cc6:	9200      	str	r2, [sp, #0]
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f004 f8e8 	bl	8004ea0 <HAL_I2C_Master_Receive>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	73fb      	strb	r3, [r7, #15]
	return hal_status;
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <i2c_write_reg>:
	HAL_I2C_Master_Transmit(hi2c, (dev_addr << 1) & 0xFE, &addr, 1, I2C_TIMEOUT_SML);
	HAL_StatusTypeDef hal_status =  HAL_I2C_Master_Receive(hi2c, (dev_addr << 1) | 0x01, data_buffer, size, I2C_TIMEOUT_LRG);
	return hal_status;
}

HAL_StatusTypeDef i2c_write_reg(I2C_HandleTypeDef* hi2c, uint8_t dev_addr, uint8_t* register_addr, uint8_t data) {
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b088      	sub	sp, #32
 8000ce2:	af02      	add	r7, sp, #8
 8000ce4:	60f8      	str	r0, [r7, #12]
 8000ce6:	607a      	str	r2, [r7, #4]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	460b      	mov	r3, r1
 8000cec:	72fb      	strb	r3, [r7, #11]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	72bb      	strb	r3, [r7, #10]
	uint8_t data_tx[2] = {*register_addr, data};
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	753b      	strb	r3, [r7, #20]
 8000cf8:	7abb      	ldrb	r3, [r7, #10]
 8000cfa:	757b      	strb	r3, [r7, #21]
	HAL_StatusTypeDef hal_status = HAL_I2C_Master_Transmit(hi2c, (dev_addr << 1) & 0xFE, data_tx, 2, I2C_TIMEOUT_SML);
 8000cfc:	7afb      	ldrb	r3, [r7, #11]
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	b299      	uxth	r1, r3
 8000d06:	f107 0214 	add.w	r2, r7, #20
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	2302      	movs	r3, #2
 8000d10:	68f8      	ldr	r0, [r7, #12]
 8000d12:	f003 ffc7 	bl	8004ca4 <HAL_I2C_Master_Transmit>
 8000d16:	4603      	mov	r3, r0
 8000d18:	75fb      	strb	r3, [r7, #23]
	return hal_status;
 8000d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3718      	adds	r7, #24
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d2a:	f002 f86d 	bl	8002e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d2e:	f000 f8eb 	bl	8000f08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d32:	f000 fb6b 	bl	800140c <MX_GPIO_Init>
  MX_DMA_Init();
 8000d36:	f000 fb33 	bl	80013a0 <MX_DMA_Init>
  MX_I2C1_Init();
 8000d3a:	f000 f989 	bl	8001050 <MX_I2C1_Init>
  MX_RTC_Init();
 8000d3e:	f000 fa07 	bl	8001150 <MX_RTC_Init>
  MX_SPI1_Init();
 8000d42:	f000 fa2b 	bl	800119c <MX_SPI1_Init>
  MX_TIM6_Init();
 8000d46:	f000 fa95 	bl	8001274 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8000d4a:	f000 faff 	bl	800134c <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8000d4e:	f000 f9bf 	bl	80010d0 <MX_I2C2_Init>
  MX_SPI2_Init();
 8000d52:	f000 fa59 	bl	8001208 <MX_SPI2_Init>
  MX_CAN2_Init();
 8000d56:	f000 f943 	bl	8000fe0 <MX_CAN2_Init>
  MX_TIM7_Init();
 8000d5a:	f000 fac1 	bl	80012e0 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  systemInit();
 8000d5e:	f000 fc35 	bl	80015cc <systemInit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Handle UART receive flag
	  if(uart2_rec_flag == FLAG_SET) {
 8000d62:	4b55      	ldr	r3, [pc, #340]	; (8000eb8 <main+0x194>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d104      	bne.n	8000d74 <main+0x50>
		  handleUART();
 8000d6a:	f000 fe05 	bl	8001978 <handleUART>
		  uart2_rec_flag = FLAG_RESET;
 8000d6e:	4b52      	ldr	r3, [pc, #328]	; (8000eb8 <main+0x194>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
	  }

	  // Handle CAN receive flag
	  if(CAN_RX_Flag == FLAG_SET) {
 8000d74:	4b51      	ldr	r3, [pc, #324]	; (8000ebc <main+0x198>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d10c      	bne.n	8000d96 <main+0x72>
		  handleCAN();
 8000d7c:	f000 fda2 	bl	80018c4 <handleCAN>
		  HAL_GPIO_TogglePin(led_green.GPIOx, led_green.GPIO_Pin);
 8000d80:	4b4f      	ldr	r3, [pc, #316]	; (8000ec0 <main+0x19c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a4e      	ldr	r2, [pc, #312]	; (8000ec0 <main+0x19c>)
 8000d86:	8892      	ldrh	r2, [r2, #4]
 8000d88:	4611      	mov	r1, r2
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f003 fe2b 	bl	80049e6 <HAL_GPIO_TogglePin>
		  CAN_RX_Flag = FLAG_RESET;
 8000d90:	4b4a      	ldr	r3, [pc, #296]	; (8000ebc <main+0x198>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	701a      	strb	r2, [r3, #0]
	  }

	  if (tim7_overflow_flag == FLAG_SET) {
 8000d96:	4b4b      	ldr	r3, [pc, #300]	; (8000ec4 <main+0x1a0>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d116      	bne.n	8000dcc <main+0xa8>
		  HAL_GPIO_TogglePin(led_orange.GPIOx, led_orange.GPIO_Pin);		// Toggle LED
 8000d9e:	4b4a      	ldr	r3, [pc, #296]	; (8000ec8 <main+0x1a4>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a49      	ldr	r2, [pc, #292]	; (8000ec8 <main+0x1a4>)
 8000da4:	8892      	ldrh	r2, [r2, #4]
 8000da6:	4611      	mov	r1, r2
 8000da8:	4618      	mov	r0, r3
 8000daa:	f003 fe1c 	bl	80049e6 <HAL_GPIO_TogglePin>
		  sysStatus = systemStatus(&hspi1, &hspi2, i2c_bme280, i2c_accel);
 8000dae:	4b47      	ldr	r3, [pc, #284]	; (8000ecc <main+0x1a8>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	4b47      	ldr	r3, [pc, #284]	; (8000ed0 <main+0x1ac>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4947      	ldr	r1, [pc, #284]	; (8000ed4 <main+0x1b0>)
 8000db8:	4847      	ldr	r0, [pc, #284]	; (8000ed8 <main+0x1b4>)
 8000dba:	f000 ff81 	bl	8001cc0 <systemStatus>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b46      	ldr	r3, [pc, #280]	; (8000edc <main+0x1b8>)
 8000dc4:	701a      	strb	r2, [r3, #0]
		  tim7_overflow_flag = FLAG_RESET;
 8000dc6:	4b3f      	ldr	r3, [pc, #252]	; (8000ec4 <main+0x1a0>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	701a      	strb	r2, [r3, #0]
	  }

	  // Handle Timer 6 overflow flag
	  if(tim6_overflow_flag == FLAG_SET) {
 8000dcc:	4b44      	ldr	r3, [pc, #272]	; (8000ee0 <main+0x1bc>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d10a      	bne.n	8000dea <main+0xc6>
		  readAllSensors(i2c_accel, i2c_bme280, &hrtc);
 8000dd4:	4b3e      	ldr	r3, [pc, #248]	; (8000ed0 <main+0x1ac>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a3c      	ldr	r2, [pc, #240]	; (8000ecc <main+0x1a8>)
 8000dda:	6811      	ldr	r1, [r2, #0]
 8000ddc:	4a41      	ldr	r2, [pc, #260]	; (8000ee4 <main+0x1c0>)
 8000dde:	4618      	mov	r0, r3
 8000de0:	f001 f9d4 	bl	800218c <readAllSensors>
		  tim6_overflow_flag = FLAG_RESET;
 8000de4:	4b3e      	ldr	r3, [pc, #248]	; (8000ee0 <main+0x1bc>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	701a      	strb	r2, [r3, #0]
	  }

	  // Write data to flash when buffer is full
	  if(byte_tracker > (PAGE_SIZE - READ_SIZE)) {
 8000dea:	4b3f      	ldr	r3, [pc, #252]	; (8000ee8 <main+0x1c4>)
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	2beb      	cmp	r3, #235	; 0xeb
 8000df0:	d952      	bls.n	8000e98 <main+0x174>
		  GPIO_PinState flight_mode = HAL_GPIO_ReadPin(jmp_flight.GPIOx, jmp_flight.GPIO_Pin);
 8000df2:	4b3e      	ldr	r3, [pc, #248]	; (8000eec <main+0x1c8>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a3d      	ldr	r2, [pc, #244]	; (8000eec <main+0x1c8>)
 8000df8:	8892      	ldrh	r2, [r2, #4]
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f003 fdc1 	bl	8004984 <HAL_GPIO_ReadPin>
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]
		  if((flight_mode & !(end_of_flash)) == FLAG_SET) {
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	4a39      	ldr	r2, [pc, #228]	; (8000ef0 <main+0x1cc>)
 8000e0a:	7812      	ldrb	r2, [r2, #0]
 8000e0c:	2a00      	cmp	r2, #0
 8000e0e:	bf0c      	ite	eq
 8000e10:	2201      	moveq	r2, #1
 8000e12:	2200      	movne	r2, #0
 8000e14:	b2d2      	uxtb	r2, r2
 8000e16:	4013      	ands	r3, r2
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d133      	bne.n	8000e84 <main+0x160>
			  HAL_GPIO_WritePin(led_green.GPIOx, led_green.GPIO_Pin, GPIO_PIN_SET);		// Toggle LED when writing data
 8000e1c:	4b28      	ldr	r3, [pc, #160]	; (8000ec0 <main+0x19c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a27      	ldr	r2, [pc, #156]	; (8000ec0 <main+0x19c>)
 8000e22:	8891      	ldrh	r1, [r2, #4]
 8000e24:	2201      	movs	r2, #1
 8000e26:	4618      	mov	r0, r3
 8000e28:	f003 fdc4 	bl	80049b4 <HAL_GPIO_WritePin>

			  write_data_spi_dma(data_buffer_tx[buffer_tracker], &hspi1, next_blank_page, cs_spi1);
 8000e2c:	4b31      	ldr	r3, [pc, #196]	; (8000ef4 <main+0x1d0>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	021b      	lsls	r3, r3, #8
 8000e32:	4a31      	ldr	r2, [pc, #196]	; (8000ef8 <main+0x1d4>)
 8000e34:	1898      	adds	r0, r3, r2
 8000e36:	4b31      	ldr	r3, [pc, #196]	; (8000efc <main+0x1d8>)
 8000e38:	6819      	ldr	r1, [r3, #0]
 8000e3a:	4b31      	ldr	r3, [pc, #196]	; (8000f00 <main+0x1dc>)
 8000e3c:	685a      	ldr	r2, [r3, #4]
 8000e3e:	9200      	str	r2, [sp, #0]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	460a      	mov	r2, r1
 8000e44:	4924      	ldr	r1, [pc, #144]	; (8000ed8 <main+0x1b4>)
 8000e46:	f7ff fdc5 	bl	80009d4 <write_data_spi_dma>
			  write_data_spi_dma(data_buffer_tx[buffer_tracker], &hspi2, next_blank_page, cs_spi2);
 8000e4a:	4b2a      	ldr	r3, [pc, #168]	; (8000ef4 <main+0x1d0>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	021b      	lsls	r3, r3, #8
 8000e50:	4a29      	ldr	r2, [pc, #164]	; (8000ef8 <main+0x1d4>)
 8000e52:	1898      	adds	r0, r3, r2
 8000e54:	4b29      	ldr	r3, [pc, #164]	; (8000efc <main+0x1d8>)
 8000e56:	6819      	ldr	r1, [r3, #0]
 8000e58:	4b2a      	ldr	r3, [pc, #168]	; (8000f04 <main+0x1e0>)
 8000e5a:	685a      	ldr	r2, [r3, #4]
 8000e5c:	9200      	str	r2, [sp, #0]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	460a      	mov	r2, r1
 8000e62:	491c      	ldr	r1, [pc, #112]	; (8000ed4 <main+0x1b0>)
 8000e64:	f7ff fdb6 	bl	80009d4 <write_data_spi_dma>
			  next_blank_page += PAGE_SIZE;
 8000e68:	4b24      	ldr	r3, [pc, #144]	; (8000efc <main+0x1d8>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000e70:	4a22      	ldr	r2, [pc, #136]	; (8000efc <main+0x1d8>)
 8000e72:	6013      	str	r3, [r2, #0]

			  HAL_GPIO_WritePin(led_green.GPIOx, led_green.GPIO_Pin, GPIO_PIN_RESET);		// Toggle LED when writing data
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <main+0x19c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a11      	ldr	r2, [pc, #68]	; (8000ec0 <main+0x19c>)
 8000e7a:	8891      	ldrh	r1, [r2, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f003 fd98 	bl	80049b4 <HAL_GPIO_WritePin>
		  }

		// Reset the buffer trackers
		buffer_tracker = buffer_tracker ^ 0x01;
 8000e84:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <main+0x1d0>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	f083 0301 	eor.w	r3, r3, #1
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <main+0x1d0>)
 8000e90:	701a      	strb	r2, [r3, #0]
		byte_tracker = 0;
 8000e92:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <main+0x1c4>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	801a      	strh	r2, [r3, #0]
	  }

	  if(next_blank_page == (NUM_OF_PAGES*PAGE_SIZE)) {
 8000e98:	4b18      	ldr	r3, [pc, #96]	; (8000efc <main+0x1d8>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ea0:	f47f af5f 	bne.w	8000d62 <main+0x3e>
		  next_blank_page = find_next_blank_page(&hspi1, &end_of_flash, cs_spi1);
 8000ea4:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <main+0x1dc>)
 8000ea6:	cb0c      	ldmia	r3, {r2, r3}
 8000ea8:	4911      	ldr	r1, [pc, #68]	; (8000ef0 <main+0x1cc>)
 8000eaa:	480b      	ldr	r0, [pc, #44]	; (8000ed8 <main+0x1b4>)
 8000eac:	f7ff fdc0 	bl	8000a30 <find_next_blank_page>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	4a12      	ldr	r2, [pc, #72]	; (8000efc <main+0x1d8>)
 8000eb4:	6013      	str	r3, [r2, #0]
	  if(uart2_rec_flag == FLAG_SET) {
 8000eb6:	e754      	b.n	8000d62 <main+0x3e>
 8000eb8:	2000038a 	.word	0x2000038a
 8000ebc:	200003b4 	.word	0x200003b4
 8000ec0:	200005e4 	.word	0x200005e4
 8000ec4:	200003b6 	.word	0x200003b6
 8000ec8:	200005dc 	.word	0x200005dc
 8000ecc:	20000384 	.word	0x20000384
 8000ed0:	20000380 	.word	0x20000380
 8000ed4:	20000190 	.word	0x20000190
 8000ed8:	20000138 	.word	0x20000138
 8000edc:	20000614 	.word	0x20000614
 8000ee0:	200003b5 	.word	0x200003b5
 8000ee4:	20000118 	.word	0x20000118
 8000ee8:	200005d8 	.word	0x200005d8
 8000eec:	2000060c 	.word	0x2000060c
 8000ef0:	200005da 	.word	0x200005da
 8000ef4:	200005b8 	.word	0x200005b8
 8000ef8:	200003b8 	.word	0x200003b8
 8000efc:	200005d4 	.word	0x200005d4
 8000f00:	200005ec 	.word	0x200005ec
 8000f04:	200005fc 	.word	0x200005fc

08000f08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b094      	sub	sp, #80	; 0x50
 8000f0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f0e:	f107 0320 	add.w	r3, r7, #32
 8000f12:	2230      	movs	r2, #48	; 0x30
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f008 f9ac 	bl	8009274 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	4b29      	ldr	r3, [pc, #164]	; (8000fd8 <SystemClock_Config+0xd0>)
 8000f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f34:	4a28      	ldr	r2, [pc, #160]	; (8000fd8 <SystemClock_Config+0xd0>)
 8000f36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3c:	4b26      	ldr	r3, [pc, #152]	; (8000fd8 <SystemClock_Config+0xd0>)
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f48:	2300      	movs	r3, #0
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	4b23      	ldr	r3, [pc, #140]	; (8000fdc <SystemClock_Config+0xd4>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a22      	ldr	r2, [pc, #136]	; (8000fdc <SystemClock_Config+0xd4>)
 8000f52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f56:	6013      	str	r3, [r2, #0]
 8000f58:	4b20      	ldr	r3, [pc, #128]	; (8000fdc <SystemClock_Config+0xd4>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000f64:	2309      	movs	r3, #9
 8000f66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f72:	2302      	movs	r3, #2
 8000f74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000f7c:	2319      	movs	r3, #25
 8000f7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f80:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f84:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f86:	2302      	movs	r3, #2
 8000f88:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f8e:	f107 0320 	add.w	r3, r7, #32
 8000f92:	4618      	mov	r0, r3
 8000f94:	f004 fdb8 	bl	8005b08 <HAL_RCC_OscConfig>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f9e:	f000 fe89 	bl	8001cb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa2:	230f      	movs	r3, #15
 8000fa4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fb2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fba:	f107 030c 	add.w	r3, r7, #12
 8000fbe:	2105      	movs	r1, #5
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f005 f819 	bl	8005ff8 <HAL_RCC_ClockConfig>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000fcc:	f000 fe72 	bl	8001cb4 <Error_Handler>
  }
}
 8000fd0:	bf00      	nop
 8000fd2:	3750      	adds	r7, #80	; 0x50
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40007000 	.word	0x40007000

08000fe0 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000fe4:	4b18      	ldr	r3, [pc, #96]	; (8001048 <MX_CAN2_Init+0x68>)
 8000fe6:	4a19      	ldr	r2, [pc, #100]	; (800104c <MX_CAN2_Init+0x6c>)
 8000fe8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 24;
 8000fea:	4b17      	ldr	r3, [pc, #92]	; (8001048 <MX_CAN2_Init+0x68>)
 8000fec:	2218      	movs	r2, #24
 8000fee:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <MX_CAN2_Init+0x68>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000ff6:	4b14      	ldr	r3, [pc, #80]	; (8001048 <MX_CAN2_Init+0x68>)
 8000ff8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000ffc:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000ffe:	4b12      	ldr	r3, [pc, #72]	; (8001048 <MX_CAN2_Init+0x68>)
 8001000:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8001004:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001006:	4b10      	ldr	r3, [pc, #64]	; (8001048 <MX_CAN2_Init+0x68>)
 8001008:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800100c:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <MX_CAN2_Init+0x68>)
 8001010:	2200      	movs	r2, #0
 8001012:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <MX_CAN2_Init+0x68>)
 8001016:	2200      	movs	r2, #0
 8001018:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800101a:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <MX_CAN2_Init+0x68>)
 800101c:	2200      	movs	r2, #0
 800101e:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001020:	4b09      	ldr	r3, [pc, #36]	; (8001048 <MX_CAN2_Init+0x68>)
 8001022:	2200      	movs	r2, #0
 8001024:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <MX_CAN2_Init+0x68>)
 8001028:	2200      	movs	r2, #0
 800102a:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <MX_CAN2_Init+0x68>)
 800102e:	2200      	movs	r2, #0
 8001030:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <MX_CAN2_Init+0x68>)
 8001034:	f001 ff7e 	bl	8002f34 <HAL_CAN_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 800103e:	f000 fe39 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000048 	.word	0x20000048
 800104c:	40006800 	.word	0x40006800

08001050 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001054:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <MX_I2C1_Init+0x74>)
 8001056:	4a1c      	ldr	r2, [pc, #112]	; (80010c8 <MX_I2C1_Init+0x78>)
 8001058:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800105a:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <MX_I2C1_Init+0x74>)
 800105c:	4a1b      	ldr	r2, [pc, #108]	; (80010cc <MX_I2C1_Init+0x7c>)
 800105e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001060:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <MX_I2C1_Init+0x74>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001066:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <MX_I2C1_Init+0x74>)
 8001068:	2200      	movs	r2, #0
 800106a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800106c:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <MX_I2C1_Init+0x74>)
 800106e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001072:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001074:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <MX_I2C1_Init+0x74>)
 8001076:	2200      	movs	r2, #0
 8001078:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800107a:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <MX_I2C1_Init+0x74>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001080:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <MX_I2C1_Init+0x74>)
 8001082:	2200      	movs	r2, #0
 8001084:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001086:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <MX_I2C1_Init+0x74>)
 8001088:	2200      	movs	r2, #0
 800108a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800108c:	480d      	ldr	r0, [pc, #52]	; (80010c4 <MX_I2C1_Init+0x74>)
 800108e:	f003 fcc5 	bl	8004a1c <HAL_I2C_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001098:	f000 fe0c 	bl	8001cb4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800109c:	2100      	movs	r1, #0
 800109e:	4809      	ldr	r0, [pc, #36]	; (80010c4 <MX_I2C1_Init+0x74>)
 80010a0:	f004 fcb6 	bl	8005a10 <HAL_I2CEx_ConfigAnalogFilter>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80010aa:	f000 fe03 	bl	8001cb4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010ae:	2100      	movs	r1, #0
 80010b0:	4804      	ldr	r0, [pc, #16]	; (80010c4 <MX_I2C1_Init+0x74>)
 80010b2:	f004 fce9 	bl	8005a88 <HAL_I2CEx_ConfigDigitalFilter>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80010bc:	f000 fdfa 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000070 	.word	0x20000070
 80010c8:	40005400 	.word	0x40005400
 80010cc:	000186a0 	.word	0x000186a0

080010d0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010d4:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <MX_I2C2_Init+0x74>)
 80010d6:	4a1c      	ldr	r2, [pc, #112]	; (8001148 <MX_I2C2_Init+0x78>)
 80010d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80010da:	4b1a      	ldr	r3, [pc, #104]	; (8001144 <MX_I2C2_Init+0x74>)
 80010dc:	4a1b      	ldr	r2, [pc, #108]	; (800114c <MX_I2C2_Init+0x7c>)
 80010de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010e0:	4b18      	ldr	r3, [pc, #96]	; (8001144 <MX_I2C2_Init+0x74>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80010e6:	4b17      	ldr	r3, [pc, #92]	; (8001144 <MX_I2C2_Init+0x74>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ec:	4b15      	ldr	r3, [pc, #84]	; (8001144 <MX_I2C2_Init+0x74>)
 80010ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010f2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010f4:	4b13      	ldr	r3, [pc, #76]	; (8001144 <MX_I2C2_Init+0x74>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80010fa:	4b12      	ldr	r3, [pc, #72]	; (8001144 <MX_I2C2_Init+0x74>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001100:	4b10      	ldr	r3, [pc, #64]	; (8001144 <MX_I2C2_Init+0x74>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001106:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <MX_I2C2_Init+0x74>)
 8001108:	2200      	movs	r2, #0
 800110a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800110c:	480d      	ldr	r0, [pc, #52]	; (8001144 <MX_I2C2_Init+0x74>)
 800110e:	f003 fc85 	bl	8004a1c <HAL_I2C_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001118:	f000 fdcc 	bl	8001cb4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800111c:	2100      	movs	r1, #0
 800111e:	4809      	ldr	r0, [pc, #36]	; (8001144 <MX_I2C2_Init+0x74>)
 8001120:	f004 fc76 	bl	8005a10 <HAL_I2CEx_ConfigAnalogFilter>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800112a:	f000 fdc3 	bl	8001cb4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800112e:	2100      	movs	r1, #0
 8001130:	4804      	ldr	r0, [pc, #16]	; (8001144 <MX_I2C2_Init+0x74>)
 8001132:	f004 fca9 	bl	8005a88 <HAL_I2CEx_ConfigDigitalFilter>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800113c:	f000 fdba 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}
 8001144:	200000c4 	.word	0x200000c4
 8001148:	40005800 	.word	0x40005800
 800114c:	000186a0 	.word	0x000186a0

08001150 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <MX_RTC_Init+0x44>)
 8001156:	4a10      	ldr	r2, [pc, #64]	; (8001198 <MX_RTC_Init+0x48>)
 8001158:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <MX_RTC_Init+0x44>)
 800115c:	2200      	movs	r2, #0
 800115e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <MX_RTC_Init+0x44>)
 8001162:	227f      	movs	r2, #127	; 0x7f
 8001164:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001166:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <MX_RTC_Init+0x44>)
 8001168:	22ff      	movs	r2, #255	; 0xff
 800116a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800116c:	4b09      	ldr	r3, [pc, #36]	; (8001194 <MX_RTC_Init+0x44>)
 800116e:	2200      	movs	r2, #0
 8001170:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001172:	4b08      	ldr	r3, [pc, #32]	; (8001194 <MX_RTC_Init+0x44>)
 8001174:	2200      	movs	r2, #0
 8001176:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <MX_RTC_Init+0x44>)
 800117a:	2200      	movs	r2, #0
 800117c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800117e:	4805      	ldr	r0, [pc, #20]	; (8001194 <MX_RTC_Init+0x44>)
 8001180:	f005 fada 	bl	8006738 <HAL_RTC_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800118a:	f000 fd93 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000118 	.word	0x20000118
 8001198:	40002800 	.word	0x40002800

0800119c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011a0:	4b17      	ldr	r3, [pc, #92]	; (8001200 <MX_SPI1_Init+0x64>)
 80011a2:	4a18      	ldr	r2, [pc, #96]	; (8001204 <MX_SPI1_Init+0x68>)
 80011a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011a6:	4b16      	ldr	r3, [pc, #88]	; (8001200 <MX_SPI1_Init+0x64>)
 80011a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ae:	4b14      	ldr	r3, [pc, #80]	; (8001200 <MX_SPI1_Init+0x64>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011b4:	4b12      	ldr	r3, [pc, #72]	; (8001200 <MX_SPI1_Init+0x64>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <MX_SPI1_Init+0x64>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011c0:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <MX_SPI1_Init+0x64>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <MX_SPI1_Init+0x64>)
 80011c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011ce:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <MX_SPI1_Init+0x64>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011d4:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <MX_SPI1_Init+0x64>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <MX_SPI1_Init+0x64>)
 80011dc:	2200      	movs	r2, #0
 80011de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011e0:	4b07      	ldr	r3, [pc, #28]	; (8001200 <MX_SPI1_Init+0x64>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <MX_SPI1_Init+0x64>)
 80011e8:	220a      	movs	r2, #10
 80011ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011ec:	4804      	ldr	r0, [pc, #16]	; (8001200 <MX_SPI1_Init+0x64>)
 80011ee:	f005 fdaf 	bl	8006d50 <HAL_SPI_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011f8:	f000 fd5c 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000138 	.word	0x20000138
 8001204:	40013000 	.word	0x40013000

08001208 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800120c:	4b17      	ldr	r3, [pc, #92]	; (800126c <MX_SPI2_Init+0x64>)
 800120e:	4a18      	ldr	r2, [pc, #96]	; (8001270 <MX_SPI2_Init+0x68>)
 8001210:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001212:	4b16      	ldr	r3, [pc, #88]	; (800126c <MX_SPI2_Init+0x64>)
 8001214:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001218:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800121a:	4b14      	ldr	r3, [pc, #80]	; (800126c <MX_SPI2_Init+0x64>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <MX_SPI2_Init+0x64>)
 8001222:	2200      	movs	r2, #0
 8001224:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <MX_SPI2_Init+0x64>)
 8001228:	2200      	movs	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800122c:	4b0f      	ldr	r3, [pc, #60]	; (800126c <MX_SPI2_Init+0x64>)
 800122e:	2200      	movs	r2, #0
 8001230:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <MX_SPI2_Init+0x64>)
 8001234:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001238:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800123a:	4b0c      	ldr	r3, [pc, #48]	; (800126c <MX_SPI2_Init+0x64>)
 800123c:	2200      	movs	r2, #0
 800123e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001240:	4b0a      	ldr	r3, [pc, #40]	; (800126c <MX_SPI2_Init+0x64>)
 8001242:	2200      	movs	r2, #0
 8001244:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <MX_SPI2_Init+0x64>)
 8001248:	2200      	movs	r2, #0
 800124a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800124c:	4b07      	ldr	r3, [pc, #28]	; (800126c <MX_SPI2_Init+0x64>)
 800124e:	2200      	movs	r2, #0
 8001250:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <MX_SPI2_Init+0x64>)
 8001254:	220a      	movs	r2, #10
 8001256:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001258:	4804      	ldr	r0, [pc, #16]	; (800126c <MX_SPI2_Init+0x64>)
 800125a:	f005 fd79 	bl	8006d50 <HAL_SPI_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001264:	f000 fd26 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000190 	.word	0x20000190
 8001270:	40003800 	.word	0x40003800

08001274 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800127a:	463b      	mov	r3, r7
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <MX_TIM6_Init+0x64>)
 8001284:	4a15      	ldr	r2, [pc, #84]	; (80012dc <MX_TIM6_Init+0x68>)
 8001286:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 20999;
 8001288:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <MX_TIM6_Init+0x64>)
 800128a:	f245 2207 	movw	r2, #20999	; 0x5207
 800128e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001290:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <MX_TIM6_Init+0x64>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 80;
 8001296:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <MX_TIM6_Init+0x64>)
 8001298:	2250      	movs	r2, #80	; 0x50
 800129a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129c:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <MX_TIM6_Init+0x64>)
 800129e:	2200      	movs	r2, #0
 80012a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80012a2:	480d      	ldr	r0, [pc, #52]	; (80012d8 <MX_TIM6_Init+0x64>)
 80012a4:	f006 fc72 	bl	8007b8c <HAL_TIM_Base_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80012ae:	f000 fd01 	bl	8001cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b2:	2300      	movs	r3, #0
 80012b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80012ba:	463b      	mov	r3, r7
 80012bc:	4619      	mov	r1, r3
 80012be:	4806      	ldr	r0, [pc, #24]	; (80012d8 <MX_TIM6_Init+0x64>)
 80012c0:	f006 fef2 	bl	80080a8 <HAL_TIMEx_MasterConfigSynchronization>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80012ca:	f000 fcf3 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	200002a8 	.word	0x200002a8
 80012dc:	40001000 	.word	0x40001000

080012e0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e6:	463b      	mov	r3, r7
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <MX_TIM7_Init+0x64>)
 80012f0:	4a15      	ldr	r2, [pc, #84]	; (8001348 <MX_TIM7_Init+0x68>)
 80012f2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 20999;
 80012f4:	4b13      	ldr	r3, [pc, #76]	; (8001344 <MX_TIM7_Init+0x64>)
 80012f6:	f245 2207 	movw	r2, #20999	; 0x5207
 80012fa:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fc:	4b11      	ldr	r3, [pc, #68]	; (8001344 <MX_TIM7_Init+0x64>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 4000;
 8001302:	4b10      	ldr	r3, [pc, #64]	; (8001344 <MX_TIM7_Init+0x64>)
 8001304:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001308:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <MX_TIM7_Init+0x64>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001310:	480c      	ldr	r0, [pc, #48]	; (8001344 <MX_TIM7_Init+0x64>)
 8001312:	f006 fc3b 	bl	8007b8c <HAL_TIM_Base_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800131c:	f000 fcca 	bl	8001cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001320:	2300      	movs	r3, #0
 8001322:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001324:	2300      	movs	r3, #0
 8001326:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001328:	463b      	mov	r3, r7
 800132a:	4619      	mov	r1, r3
 800132c:	4805      	ldr	r0, [pc, #20]	; (8001344 <MX_TIM7_Init+0x64>)
 800132e:	f006 febb 	bl	80080a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001338:	f000 fcbc 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	200002f0 	.word	0x200002f0
 8001348:	40001400 	.word	0x40001400

0800134c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <MX_USART2_UART_Init+0x4c>)
 8001352:	4a12      	ldr	r2, [pc, #72]	; (800139c <MX_USART2_UART_Init+0x50>)
 8001354:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <MX_USART2_UART_Init+0x4c>)
 8001358:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800135c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <MX_USART2_UART_Init+0x4c>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <MX_USART2_UART_Init+0x4c>)
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <MX_USART2_UART_Init+0x4c>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001370:	4b09      	ldr	r3, [pc, #36]	; (8001398 <MX_USART2_UART_Init+0x4c>)
 8001372:	220c      	movs	r2, #12
 8001374:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001376:	4b08      	ldr	r3, [pc, #32]	; (8001398 <MX_USART2_UART_Init+0x4c>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <MX_USART2_UART_Init+0x4c>)
 800137e:	2200      	movs	r2, #0
 8001380:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001382:	4805      	ldr	r0, [pc, #20]	; (8001398 <MX_USART2_UART_Init+0x4c>)
 8001384:	f006 ff20 	bl	80081c8 <HAL_UART_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800138e:	f000 fc91 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000338 	.word	0x20000338
 800139c:	40004400 	.word	0x40004400

080013a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	4b17      	ldr	r3, [pc, #92]	; (8001408 <MX_DMA_Init+0x68>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a16      	ldr	r2, [pc, #88]	; (8001408 <MX_DMA_Init+0x68>)
 80013b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b14      	ldr	r3, [pc, #80]	; (8001408 <MX_DMA_Init+0x68>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	603b      	str	r3, [r7, #0]
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <MX_DMA_Init+0x68>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a0f      	ldr	r2, [pc, #60]	; (8001408 <MX_DMA_Init+0x68>)
 80013cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <MX_DMA_Init+0x68>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013da:	603b      	str	r3, [r7, #0]
 80013dc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	2100      	movs	r1, #0
 80013e2:	200f      	movs	r0, #15
 80013e4:	f002 fce9 	bl	8003dba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80013e8:	200f      	movs	r0, #15
 80013ea:	f002 fd02 	bl	8003df2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2100      	movs	r1, #0
 80013f2:	203b      	movs	r0, #59	; 0x3b
 80013f4:	f002 fce1 	bl	8003dba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80013f8:	203b      	movs	r0, #59	; 0x3b
 80013fa:	f002 fcfa 	bl	8003df2 <HAL_NVIC_EnableIRQ>

}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40023800 	.word	0x40023800

0800140c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08a      	sub	sp, #40	; 0x28
 8001410:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
 8001420:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
 8001426:	4b57      	ldr	r3, [pc, #348]	; (8001584 <MX_GPIO_Init+0x178>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a56      	ldr	r2, [pc, #344]	; (8001584 <MX_GPIO_Init+0x178>)
 800142c:	f043 0304 	orr.w	r3, r3, #4
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b54      	ldr	r3, [pc, #336]	; (8001584 <MX_GPIO_Init+0x178>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f003 0304 	and.w	r3, r3, #4
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	4b50      	ldr	r3, [pc, #320]	; (8001584 <MX_GPIO_Init+0x178>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a4f      	ldr	r2, [pc, #316]	; (8001584 <MX_GPIO_Init+0x178>)
 8001448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b4d      	ldr	r3, [pc, #308]	; (8001584 <MX_GPIO_Init+0x178>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	4b49      	ldr	r3, [pc, #292]	; (8001584 <MX_GPIO_Init+0x178>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a48      	ldr	r2, [pc, #288]	; (8001584 <MX_GPIO_Init+0x178>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b46      	ldr	r3, [pc, #280]	; (8001584 <MX_GPIO_Init+0x178>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	4b42      	ldr	r3, [pc, #264]	; (8001584 <MX_GPIO_Init+0x178>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a41      	ldr	r2, [pc, #260]	; (8001584 <MX_GPIO_Init+0x178>)
 8001480:	f043 0302 	orr.w	r3, r3, #2
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b3f      	ldr	r3, [pc, #252]	; (8001584 <MX_GPIO_Init+0x178>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	603b      	str	r3, [r7, #0]
 8001496:	4b3b      	ldr	r3, [pc, #236]	; (8001584 <MX_GPIO_Init+0x178>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a3a      	ldr	r2, [pc, #232]	; (8001584 <MX_GPIO_Init+0x178>)
 800149c:	f043 0308 	orr.w	r3, r3, #8
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b38      	ldr	r3, [pc, #224]	; (8001584 <MX_GPIO_Init+0x178>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0308 	and.w	r3, r3, #8
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI2_WP_Pin|SPI2_CS_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2113      	movs	r1, #19
 80014b2:	4835      	ldr	r0, [pc, #212]	; (8001588 <MX_GPIO_Init+0x17c>)
 80014b4:	f003 fa7e 	bl	80049b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_WP_GPIO_Port, SPI1_WP_Pin, GPIO_PIN_RESET);
 80014b8:	2200      	movs	r2, #0
 80014ba:	2110      	movs	r1, #16
 80014bc:	4833      	ldr	r0, [pc, #204]	; (800158c <MX_GPIO_Init+0x180>)
 80014be:	f003 fa79 	bl	80049b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 80014c2:	2200      	movs	r2, #0
 80014c4:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80014c8:	4831      	ldr	r0, [pc, #196]	; (8001590 <MX_GPIO_Init+0x184>)
 80014ca:	f003 fa73 	bl	80049b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI2_WP_Pin */
  GPIO_InitStruct.Pin = SPI2_WP_Pin;
 80014ce:	2301      	movs	r3, #1
 80014d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d2:	2301      	movs	r3, #1
 80014d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014d6:	2301      	movs	r3, #1
 80014d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014da:	2300      	movs	r3, #0
 80014dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_WP_GPIO_Port, &GPIO_InitStruct);
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	4619      	mov	r1, r3
 80014e4:	4828      	ldr	r0, [pc, #160]	; (8001588 <MX_GPIO_Init+0x17c>)
 80014e6:	f003 f8a1 	bl	800462c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_CS_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin|SPI1_CS_Pin;
 80014ea:	2312      	movs	r3, #18
 80014ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ee:	2301      	movs	r3, #1
 80014f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	2300      	movs	r3, #0
 80014f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	4619      	mov	r1, r3
 8001500:	4821      	ldr	r0, [pc, #132]	; (8001588 <MX_GPIO_Init+0x17c>)
 8001502:	f003 f893 	bl	800462c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_WP_Pin */
  GPIO_InitStruct.Pin = SPI1_WP_Pin;
 8001506:	2310      	movs	r3, #16
 8001508:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150a:	2301      	movs	r3, #1
 800150c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800150e:	2301      	movs	r3, #1
 8001510:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2300      	movs	r3, #0
 8001514:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_WP_GPIO_Port, &GPIO_InitStruct);
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	4619      	mov	r1, r3
 800151c:	481b      	ldr	r0, [pc, #108]	; (800158c <MX_GPIO_Init+0x180>)
 800151e:	f003 f885 	bl	800462c <HAL_GPIO_Init>

  /*Configure GPIO pin : JMP_Flight_Pin */
  GPIO_InitStruct.Pin = JMP_Flight_Pin;
 8001522:	2302      	movs	r3, #2
 8001524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001526:	2300      	movs	r3, #0
 8001528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(JMP_Flight_GPIO_Port, &GPIO_InitStruct);
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	4619      	mov	r1, r3
 8001534:	4816      	ldr	r0, [pc, #88]	; (8001590 <MX_GPIO_Init+0x184>)
 8001536:	f003 f879 	bl	800462c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 800153a:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800153e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001540:	2301      	movs	r3, #1
 8001542:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001544:	2302      	movs	r3, #2
 8001546:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001548:	2300      	movs	r3, #0
 800154a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	4619      	mov	r1, r3
 8001552:	480f      	ldr	r0, [pc, #60]	; (8001590 <MX_GPIO_Init+0x184>)
 8001554:	f003 f86a 	bl	800462c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001558:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800155c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155e:	2302      	movs	r3, #2
 8001560:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001566:	2303      	movs	r3, #3
 8001568:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800156a:	2309      	movs	r3, #9
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	4619      	mov	r1, r3
 8001574:	4805      	ldr	r0, [pc, #20]	; (800158c <MX_GPIO_Init+0x180>)
 8001576:	f003 f859 	bl	800462c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800157a:	bf00      	nop
 800157c:	3728      	adds	r7, #40	; 0x28
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40023800 	.word	0x40023800
 8001588:	40020800 	.word	0x40020800
 800158c:	40020000 	.word	0x40020000
 8001590:	40020400 	.word	0x40020400

08001594 <clean_data_buffer>:

/* USER CODE BEGIN 4 */
void clean_data_buffer(uint16_t array_size, uint8_t data_array[array_size]) {
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	6039      	str	r1, [r7, #0]
 800159e:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < array_size; ++i) {
 80015a0:	2300      	movs	r3, #0
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	e007      	b.n	80015b6 <clean_data_buffer+0x22>
    	data_array[i] = 0xFF;  // Initialize each element to 0xFF
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	4413      	add	r3, r2
 80015ac:	22ff      	movs	r2, #255	; 0xff
 80015ae:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < array_size; ++i) {
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	3301      	adds	r3, #1
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	88fb      	ldrh	r3, [r7, #6]
 80015b8:	68fa      	ldr	r2, [r7, #12]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	dbf3      	blt.n	80015a6 <clean_data_buffer+0x12>
    }
}
 80015be:	bf00      	nop
 80015c0:	bf00      	nop
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <systemInit>:

void systemInit() {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
	i2c_accel = &hi2c2;
 80015d2:	4b60      	ldr	r3, [pc, #384]	; (8001754 <systemInit+0x188>)
 80015d4:	4a60      	ldr	r2, [pc, #384]	; (8001758 <systemInit+0x18c>)
 80015d6:	601a      	str	r2, [r3, #0]
	i2c_bme280 = &hi2c1;
 80015d8:	4b60      	ldr	r3, [pc, #384]	; (800175c <systemInit+0x190>)
 80015da:	4a61      	ldr	r2, [pc, #388]	; (8001760 <systemInit+0x194>)
 80015dc:	601a      	str	r2, [r3, #0]

	configureCAN();
 80015de:	f000 fb45 	bl	8001c6c <configureCAN>
	CAN_TxMailbox = 0;
 80015e2:	4b60      	ldr	r3, [pc, #384]	; (8001764 <systemInit+0x198>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
	clean_data_buffer(8, CAN_RxData);
 80015e8:	495f      	ldr	r1, [pc, #380]	; (8001768 <systemInit+0x19c>)
 80015ea:	2008      	movs	r0, #8
 80015ec:	f7ff ffd2 	bl	8001594 <clean_data_buffer>

	gpio_set_config();
 80015f0:	f000 f8f0 	bl	80017d4 <gpio_set_config>
	HAL_GPIO_WritePin(led_orange.GPIOx, led_orange.GPIO_Pin, GPIO_PIN_RESET);	// Turn LED off
 80015f4:	4b5d      	ldr	r3, [pc, #372]	; (800176c <systemInit+0x1a0>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a5c      	ldr	r2, [pc, #368]	; (800176c <systemInit+0x1a0>)
 80015fa:	8891      	ldrh	r1, [r2, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	f003 f9d8 	bl	80049b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(cs_spi1.GPIOx, cs_spi1.GPIO_Pin, GPIO_PIN_SET);		// SET SPI CS High to disable bus 1
 8001604:	4b5a      	ldr	r3, [pc, #360]	; (8001770 <systemInit+0x1a4>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a59      	ldr	r2, [pc, #356]	; (8001770 <systemInit+0x1a4>)
 800160a:	8891      	ldrh	r1, [r2, #4]
 800160c:	2201      	movs	r2, #1
 800160e:	4618      	mov	r0, r3
 8001610:	f003 f9d0 	bl	80049b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(cs_spi2.GPIOx, cs_spi2.GPIO_Pin, GPIO_PIN_SET);		// SET SPI CS High to disable bus 2
 8001614:	4b57      	ldr	r3, [pc, #348]	; (8001774 <systemInit+0x1a8>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a56      	ldr	r2, [pc, #344]	; (8001774 <systemInit+0x1a8>)
 800161a:	8891      	ldrh	r1, [r2, #4]
 800161c:	2201      	movs	r2, #1
 800161e:	4618      	mov	r0, r3
 8001620:	f003 f9c8 	bl	80049b4 <HAL_GPIO_WritePin>

	// Clean the data buffer and set all values to 0xFF
	clean_data_buffer(PAGE_SIZE, data_buffer_tx[0]);
 8001624:	4954      	ldr	r1, [pc, #336]	; (8001778 <systemInit+0x1ac>)
 8001626:	f44f 7080 	mov.w	r0, #256	; 0x100
 800162a:	f7ff ffb3 	bl	8001594 <clean_data_buffer>
	clean_data_buffer(PAGE_SIZE, data_buffer_tx[1]);
 800162e:	4953      	ldr	r1, [pc, #332]	; (800177c <systemInit+0x1b0>)
 8001630:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001634:	f7ff ffae 	bl	8001594 <clean_data_buffer>

	for (uint8_t i = 0; i < 6; i++) {
 8001638:	2300      	movs	r3, #0
 800163a:	73fb      	strb	r3, [r7, #15]
 800163c:	e00e      	b.n	800165c <systemInit+0x90>
		accel_data[i] = 0x00;
 800163e:	7bfb      	ldrb	r3, [r7, #15]
 8001640:	4a4f      	ldr	r2, [pc, #316]	; (8001780 <systemInit+0x1b4>)
 8001642:	2100      	movs	r1, #0
 8001644:	54d1      	strb	r1, [r2, r3]
		bme280_data_0[i] = 0x00;
 8001646:	7bfb      	ldrb	r3, [r7, #15]
 8001648:	4a4e      	ldr	r2, [pc, #312]	; (8001784 <systemInit+0x1b8>)
 800164a:	2100      	movs	r1, #0
 800164c:	54d1      	strb	r1, [r2, r3]
		bme280_data_1[i] = 0x00;
 800164e:	7bfb      	ldrb	r3, [r7, #15]
 8001650:	4a4d      	ldr	r2, [pc, #308]	; (8001788 <systemInit+0x1bc>)
 8001652:	2100      	movs	r1, #0
 8001654:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 6; i++) {
 8001656:	7bfb      	ldrb	r3, [r7, #15]
 8001658:	3301      	adds	r3, #1
 800165a:	73fb      	strb	r3, [r7, #15]
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	2b05      	cmp	r3, #5
 8001660:	d9ed      	bls.n	800163e <systemInit+0x72>
	}

	// Initialise the peripherals
	init_accel(i2c_accel);
 8001662:	4b3c      	ldr	r3, [pc, #240]	; (8001754 <systemInit+0x188>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe ff46 	bl	80004f8 <init_accel>
	init_bme280(i2c_bme280, 0);
 800166c:	4b3b      	ldr	r3, [pc, #236]	; (800175c <systemInit+0x190>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2100      	movs	r1, #0
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe ffb4 	bl	80005e0 <init_bme280>
	init_bme280(i2c_bme280, 1);
 8001678:	4b38      	ldr	r3, [pc, #224]	; (800175c <systemInit+0x190>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2101      	movs	r1, #1
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe ffae 	bl	80005e0 <init_bme280>
	software_reset(&hspi1, cs_spi1);
 8001684:	4b3a      	ldr	r3, [pc, #232]	; (8001770 <systemInit+0x1a4>)
 8001686:	e893 0006 	ldmia.w	r3, {r1, r2}
 800168a:	4840      	ldr	r0, [pc, #256]	; (800178c <systemInit+0x1c0>)
 800168c:	f7ff f97e 	bl	800098c <software_reset>
	software_reset(&hspi2, cs_spi2);
 8001690:	4b38      	ldr	r3, [pc, #224]	; (8001774 <systemInit+0x1a8>)
 8001692:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001696:	483e      	ldr	r0, [pc, #248]	; (8001790 <systemInit+0x1c4>)
 8001698:	f7ff f978 	bl	800098c <software_reset>

	int next_blank_page0 = find_next_blank_page(&hspi1, &end_of_flash, cs_spi1);
 800169c:	4b34      	ldr	r3, [pc, #208]	; (8001770 <systemInit+0x1a4>)
 800169e:	cb0c      	ldmia	r3, {r2, r3}
 80016a0:	493c      	ldr	r1, [pc, #240]	; (8001794 <systemInit+0x1c8>)
 80016a2:	483a      	ldr	r0, [pc, #232]	; (800178c <systemInit+0x1c0>)
 80016a4:	f7ff f9c4 	bl	8000a30 <find_next_blank_page>
 80016a8:	4603      	mov	r3, r0
 80016aa:	60bb      	str	r3, [r7, #8]
	int next_blank_page1 = find_next_blank_page(&hspi2, &end_of_flash, cs_spi2);
 80016ac:	4b31      	ldr	r3, [pc, #196]	; (8001774 <systemInit+0x1a8>)
 80016ae:	cb0c      	ldmia	r3, {r2, r3}
 80016b0:	4938      	ldr	r1, [pc, #224]	; (8001794 <systemInit+0x1c8>)
 80016b2:	4837      	ldr	r0, [pc, #220]	; (8001790 <systemInit+0x1c4>)
 80016b4:	f7ff f9bc 	bl	8000a30 <find_next_blank_page>
 80016b8:	4603      	mov	r3, r0
 80016ba:	607b      	str	r3, [r7, #4]

	// Assign the value of next_blank_page to the larger of next_blank_page0 and next_blank_page1
	next_blank_page = (next_blank_page0 > next_blank_page1) ? next_blank_page0 : next_blank_page1;
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	4293      	cmp	r3, r2
 80016c2:	bfb8      	it	lt
 80016c4:	4613      	movlt	r3, r2
 80016c6:	461a      	mov	r2, r3
 80016c8:	4b33      	ldr	r3, [pc, #204]	; (8001798 <systemInit+0x1cc>)
 80016ca:	601a      	str	r2, [r3, #0]

	buffer_ref = 0;
 80016cc:	4b33      	ldr	r3, [pc, #204]	; (800179c <systemInit+0x1d0>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	701a      	strb	r2, [r3, #0]
	byte_tracker = 0;
 80016d2:	4b33      	ldr	r3, [pc, #204]	; (80017a0 <systemInit+0x1d4>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	801a      	strh	r2, [r3, #0]
	end_of_flash = FLAG_RESET;
 80016d8:	4b2e      	ldr	r3, [pc, #184]	; (8001794 <systemInit+0x1c8>)
 80016da:	2200      	movs	r2, #0
 80016dc:	701a      	strb	r2, [r3, #0]
	uart2_rec_flag = FLAG_RESET;
 80016de:	4b31      	ldr	r3, [pc, #196]	; (80017a4 <systemInit+0x1d8>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	701a      	strb	r2, [r3, #0]
	CAN_RX_Flag = FLAG_RESET;
 80016e4:	4b30      	ldr	r3, [pc, #192]	; (80017a8 <systemInit+0x1dc>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	701a      	strb	r2, [r3, #0]
	tim6_overflow_flag = FLAG_RESET;
 80016ea:	4b30      	ldr	r3, [pc, #192]	; (80017ac <systemInit+0x1e0>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	701a      	strb	r2, [r3, #0]
	tim7_overflow_flag = FLAG_RESET;
 80016f0:	4b2f      	ldr	r3, [pc, #188]	; (80017b0 <systemInit+0x1e4>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	701a      	strb	r2, [r3, #0]
	flight_state = GROUND;
 80016f6:	4b2f      	ldr	r3, [pc, #188]	; (80017b4 <systemInit+0x1e8>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	701a      	strb	r2, [r3, #0]

	sysStatus = systemStatus(&hspi1, &hspi2, i2c_bme280, i2c_accel);
 80016fc:	4b17      	ldr	r3, [pc, #92]	; (800175c <systemInit+0x190>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b14      	ldr	r3, [pc, #80]	; (8001754 <systemInit+0x188>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4922      	ldr	r1, [pc, #136]	; (8001790 <systemInit+0x1c4>)
 8001706:	4821      	ldr	r0, [pc, #132]	; (800178c <systemInit+0x1c0>)
 8001708:	f000 fada 	bl	8001cc0 <systemStatus>
 800170c:	4603      	mov	r3, r0
 800170e:	461a      	mov	r2, r3
 8001710:	4b29      	ldr	r3, [pc, #164]	; (80017b8 <systemInit+0x1ec>)
 8001712:	701a      	strb	r2, [r3, #0]

	send_uart_hex(&huart2, sysStatus);
 8001714:	4b28      	ldr	r3, [pc, #160]	; (80017b8 <systemInit+0x1ec>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	4619      	mov	r1, r3
 800171a:	4828      	ldr	r0, [pc, #160]	; (80017bc <systemInit+0x1f0>)
 800171c:	f001 fb35 	bl	8002d8a <send_uart_hex>

	// Initiate clocks, interrupts, CAN and DMA
	HAL_UART_Receive_IT(&huart2, UARTRxData, 2);
 8001720:	2202      	movs	r2, #2
 8001722:	4927      	ldr	r1, [pc, #156]	; (80017c0 <systemInit+0x1f4>)
 8001724:	4825      	ldr	r0, [pc, #148]	; (80017bc <systemInit+0x1f0>)
 8001726:	f006 fe2a 	bl	800837e <HAL_UART_Receive_IT>
	HAL_CAN_Start(&hcan2);
 800172a:	4826      	ldr	r0, [pc, #152]	; (80017c4 <systemInit+0x1f8>)
 800172c:	f001 fdde 	bl	80032ec <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001730:	2102      	movs	r1, #2
 8001732:	4824      	ldr	r0, [pc, #144]	; (80017c4 <systemInit+0x1f8>)
 8001734:	f002 f810 	bl	8003758 <HAL_CAN_ActivateNotification>
	initialise_rtc_default(&hrtc);
 8001738:	4823      	ldr	r0, [pc, #140]	; (80017c8 <systemInit+0x1fc>)
 800173a:	f000 fe0d 	bl	8002358 <initialise_rtc_default>
	HAL_TIM_Base_Start_IT(&htim6);
 800173e:	4823      	ldr	r0, [pc, #140]	; (80017cc <systemInit+0x200>)
 8001740:	f006 fa74 	bl	8007c2c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8001744:	4822      	ldr	r0, [pc, #136]	; (80017d0 <systemInit+0x204>)
 8001746:	f006 fa71 	bl	8007c2c <HAL_TIM_Base_Start_IT>
}
 800174a:	bf00      	nop
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000380 	.word	0x20000380
 8001758:	200000c4 	.word	0x200000c4
 800175c:	20000384 	.word	0x20000384
 8001760:	20000070 	.word	0x20000070
 8001764:	2000038c 	.word	0x2000038c
 8001768:	200003ac 	.word	0x200003ac
 800176c:	200005dc 	.word	0x200005dc
 8001770:	200005ec 	.word	0x200005ec
 8001774:	200005fc 	.word	0x200005fc
 8001778:	200003b8 	.word	0x200003b8
 800177c:	200004b8 	.word	0x200004b8
 8001780:	200005bc 	.word	0x200005bc
 8001784:	200005c4 	.word	0x200005c4
 8001788:	200005cc 	.word	0x200005cc
 800178c:	20000138 	.word	0x20000138
 8001790:	20000190 	.word	0x20000190
 8001794:	200005da 	.word	0x200005da
 8001798:	200005d4 	.word	0x200005d4
 800179c:	200005d2 	.word	0x200005d2
 80017a0:	200005d8 	.word	0x200005d8
 80017a4:	2000038a 	.word	0x2000038a
 80017a8:	200003b4 	.word	0x200003b4
 80017ac:	200003b5 	.word	0x200003b5
 80017b0:	200003b6 	.word	0x200003b6
 80017b4:	20000615 	.word	0x20000615
 80017b8:	20000614 	.word	0x20000614
 80017bc:	20000338 	.word	0x20000338
 80017c0:	20000388 	.word	0x20000388
 80017c4:	20000048 	.word	0x20000048
 80017c8:	20000118 	.word	0x20000118
 80017cc:	200002a8 	.word	0x200002a8
 80017d0:	200002f0 	.word	0x200002f0

080017d4 <gpio_set_config>:

void gpio_set_config() {
 80017d4:	b590      	push	{r4, r7, lr}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
	// Set LED gpio
	led_orange = create_GPIO_Config(GPIOB, GPIO_PIN_14);	// Orange LED (Heartbeat LED)
 80017da:	4c30      	ldr	r4, [pc, #192]	; (800189c <gpio_set_config+0xc8>)
 80017dc:	463b      	mov	r3, r7
 80017de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017e2:	492f      	ldr	r1, [pc, #188]	; (80018a0 <gpio_set_config+0xcc>)
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fa03 	bl	8000bf0 <create_GPIO_Config>
 80017ea:	4622      	mov	r2, r4
 80017ec:	463b      	mov	r3, r7
 80017ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017f2:	e882 0003 	stmia.w	r2, {r0, r1}
	led_green = create_GPIO_Config(GPIOB, GPIO_PIN_7);		// Green LED (Hard Drive LED)
 80017f6:	4c2b      	ldr	r4, [pc, #172]	; (80018a4 <gpio_set_config+0xd0>)
 80017f8:	463b      	mov	r3, r7
 80017fa:	2280      	movs	r2, #128	; 0x80
 80017fc:	4928      	ldr	r1, [pc, #160]	; (80018a0 <gpio_set_config+0xcc>)
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff f9f6 	bl	8000bf0 <create_GPIO_Config>
 8001804:	4622      	mov	r2, r4
 8001806:	463b      	mov	r3, r7
 8001808:	e893 0003 	ldmia.w	r3, {r0, r1}
 800180c:	e882 0003 	stmia.w	r2, {r0, r1}

	// SPI Flash 0 CS and WP
	cs_spi1 = create_GPIO_Config(GPIOC, GPIO_PIN_4);		// Change for SRAD
 8001810:	4c25      	ldr	r4, [pc, #148]	; (80018a8 <gpio_set_config+0xd4>)
 8001812:	463b      	mov	r3, r7
 8001814:	2210      	movs	r2, #16
 8001816:	4925      	ldr	r1, [pc, #148]	; (80018ac <gpio_set_config+0xd8>)
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff f9e9 	bl	8000bf0 <create_GPIO_Config>
 800181e:	4622      	mov	r2, r4
 8001820:	463b      	mov	r3, r7
 8001822:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001826:	e882 0003 	stmia.w	r2, {r0, r1}
	wp_spi1 = create_GPIO_Config(GPIOA, GPIO_PIN_4);
 800182a:	4c21      	ldr	r4, [pc, #132]	; (80018b0 <gpio_set_config+0xdc>)
 800182c:	463b      	mov	r3, r7
 800182e:	2210      	movs	r2, #16
 8001830:	4920      	ldr	r1, [pc, #128]	; (80018b4 <gpio_set_config+0xe0>)
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff f9dc 	bl	8000bf0 <create_GPIO_Config>
 8001838:	4622      	mov	r2, r4
 800183a:	463b      	mov	r3, r7
 800183c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001840:	e882 0003 	stmia.w	r2, {r0, r1}

	// SPI Flash 1 CS and WP
	cs_spi2 = create_GPIO_Config(GPIOC, GPIO_PIN_1);		// Change for SRAD
 8001844:	4c1c      	ldr	r4, [pc, #112]	; (80018b8 <gpio_set_config+0xe4>)
 8001846:	463b      	mov	r3, r7
 8001848:	2202      	movs	r2, #2
 800184a:	4918      	ldr	r1, [pc, #96]	; (80018ac <gpio_set_config+0xd8>)
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff f9cf 	bl	8000bf0 <create_GPIO_Config>
 8001852:	4622      	mov	r2, r4
 8001854:	463b      	mov	r3, r7
 8001856:	e893 0003 	ldmia.w	r3, {r0, r1}
 800185a:	e882 0003 	stmia.w	r2, {r0, r1}
	wp_spi2 = create_GPIO_Config(GPIOC, GPIO_PIN_0);
 800185e:	4c17      	ldr	r4, [pc, #92]	; (80018bc <gpio_set_config+0xe8>)
 8001860:	463b      	mov	r3, r7
 8001862:	2201      	movs	r2, #1
 8001864:	4911      	ldr	r1, [pc, #68]	; (80018ac <gpio_set_config+0xd8>)
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff f9c2 	bl	8000bf0 <create_GPIO_Config>
 800186c:	4622      	mov	r2, r4
 800186e:	463b      	mov	r3, r7
 8001870:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001874:	e882 0003 	stmia.w	r2, {r0, r1}

	// Flight Jumper GPIO Input
	jmp_flight = create_GPIO_Config(GPIOB, GPIO_PIN_1);
 8001878:	4c11      	ldr	r4, [pc, #68]	; (80018c0 <gpio_set_config+0xec>)
 800187a:	463b      	mov	r3, r7
 800187c:	2202      	movs	r2, #2
 800187e:	4908      	ldr	r1, [pc, #32]	; (80018a0 <gpio_set_config+0xcc>)
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff f9b5 	bl	8000bf0 <create_GPIO_Config>
 8001886:	4622      	mov	r2, r4
 8001888:	463b      	mov	r3, r7
 800188a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800188e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	bd90      	pop	{r4, r7, pc}
 800189a:	bf00      	nop
 800189c:	200005dc 	.word	0x200005dc
 80018a0:	40020400 	.word	0x40020400
 80018a4:	200005e4 	.word	0x200005e4
 80018a8:	200005ec 	.word	0x200005ec
 80018ac:	40020800 	.word	0x40020800
 80018b0:	200005f4 	.word	0x200005f4
 80018b4:	40020000 	.word	0x40020000
 80018b8:	200005fc 	.word	0x200005fc
 80018bc:	20000604 	.word	0x20000604
 80018c0:	2000060c 	.word	0x2000060c

080018c4 <handleCAN>:

void handleCAN() {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af02      	add	r7, sp, #8
	// Process "clock-sync". Change flight-state to "rocket_loaded"
	if(CAN_RxHeader.StdId == CLK_SYNC_ID) {
 80018ca:	4b24      	ldr	r3, [pc, #144]	; (800195c <handleCAN+0x98>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d10e      	bne.n	80018f4 <handleCAN+0x30>
		flight_state = LOADED;
 80018d6:	4b22      	ldr	r3, [pc, #136]	; (8001960 <handleCAN+0x9c>)
 80018d8:	2201      	movs	r2, #1
 80018da:	701a      	strb	r2, [r3, #0]
		uint8_t TxData[1] = {0x00};
 80018dc:	2300      	movs	r3, #0
 80018de:	713b      	strb	r3, [r7, #4]
		sendCAN_TxMessage(&hcan2, 1, TxData, &CAN_TxMailbox, CLK_SYNC_ID);
 80018e0:	1d3a      	adds	r2, r7, #4
 80018e2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	4b1e      	ldr	r3, [pc, #120]	; (8001964 <handleCAN+0xa0>)
 80018ea:	2101      	movs	r1, #1
 80018ec:	481e      	ldr	r0, [pc, #120]	; (8001968 <handleCAN+0xa4>)
 80018ee:	f7fe ff8d 	bl	800080c <sendCAN_TxMessage>

	// Transmit values from accelerometer
	else if(CAN_RxHeader.StdId == TX_ACCEL) {
		sendCAN_TxMessage(&hcan2, 6, accel_data, &CAN_TxMailbox, TX_ACCEL);
	}
}
 80018f2:	e02e      	b.n	8001952 <handleCAN+0x8e>
	else if(CAN_RxHeader.StdId == TX_BME280_0) {
 80018f4:	4b19      	ldr	r3, [pc, #100]	; (800195c <handleCAN+0x98>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f240 5201 	movw	r2, #1281	; 0x501
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d109      	bne.n	8001914 <handleCAN+0x50>
		sendCAN_TxMessage(&hcan2, 6, bme280_data_0, &CAN_TxMailbox, TX_BME280_0);
 8001900:	f240 5301 	movw	r3, #1281	; 0x501
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	4b17      	ldr	r3, [pc, #92]	; (8001964 <handleCAN+0xa0>)
 8001908:	4a18      	ldr	r2, [pc, #96]	; (800196c <handleCAN+0xa8>)
 800190a:	2106      	movs	r1, #6
 800190c:	4816      	ldr	r0, [pc, #88]	; (8001968 <handleCAN+0xa4>)
 800190e:	f7fe ff7d 	bl	800080c <sendCAN_TxMessage>
}
 8001912:	e01e      	b.n	8001952 <handleCAN+0x8e>
	else if(CAN_RxHeader.StdId == TX_BME280_1) {
 8001914:	4b11      	ldr	r3, [pc, #68]	; (800195c <handleCAN+0x98>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f240 5202 	movw	r2, #1282	; 0x502
 800191c:	4293      	cmp	r3, r2
 800191e:	d109      	bne.n	8001934 <handleCAN+0x70>
		sendCAN_TxMessage(&hcan2, 6, bme280_data_1, &CAN_TxMailbox, TX_BME280_1);
 8001920:	f240 5302 	movw	r3, #1282	; 0x502
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <handleCAN+0xa0>)
 8001928:	4a11      	ldr	r2, [pc, #68]	; (8001970 <handleCAN+0xac>)
 800192a:	2106      	movs	r1, #6
 800192c:	480e      	ldr	r0, [pc, #56]	; (8001968 <handleCAN+0xa4>)
 800192e:	f7fe ff6d 	bl	800080c <sendCAN_TxMessage>
}
 8001932:	e00e      	b.n	8001952 <handleCAN+0x8e>
	else if(CAN_RxHeader.StdId == TX_ACCEL) {
 8001934:	4b09      	ldr	r3, [pc, #36]	; (800195c <handleCAN+0x98>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f240 5203 	movw	r2, #1283	; 0x503
 800193c:	4293      	cmp	r3, r2
 800193e:	d108      	bne.n	8001952 <handleCAN+0x8e>
		sendCAN_TxMessage(&hcan2, 6, accel_data, &CAN_TxMailbox, TX_ACCEL);
 8001940:	f240 5303 	movw	r3, #1283	; 0x503
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	4b07      	ldr	r3, [pc, #28]	; (8001964 <handleCAN+0xa0>)
 8001948:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <handleCAN+0xb0>)
 800194a:	2106      	movs	r1, #6
 800194c:	4806      	ldr	r0, [pc, #24]	; (8001968 <handleCAN+0xa4>)
 800194e:	f7fe ff5d 	bl	800080c <sendCAN_TxMessage>
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000390 	.word	0x20000390
 8001960:	20000615 	.word	0x20000615
 8001964:	2000038c 	.word	0x2000038c
 8001968:	20000048 	.word	0x20000048
 800196c:	200005c4 	.word	0x200005c4
 8001970:	200005cc 	.word	0x200005cc
 8001974:	200005bc 	.word	0x200005bc

08001978 <handleUART>:

void handleUART() {
 8001978:	b590      	push	{r4, r7, lr}
 800197a:	b085      	sub	sp, #20
 800197c:	af02      	add	r7, sp, #8
	UART_HandleTypeDef *huart = &huart2;
 800197e:	4b8e      	ldr	r3, [pc, #568]	; (8001bb8 <handleUART+0x240>)
 8001980:	607b      	str	r3, [r7, #4]

	// Send Heartbeat to UART (data_rx[0] = "h")
	if (UARTRxData[0] == 0x68) {
 8001982:	4b8e      	ldr	r3, [pc, #568]	; (8001bbc <handleUART+0x244>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b68      	cmp	r3, #104	; 0x68
 8001988:	d109      	bne.n	800199e <handleUART+0x26>
		heartbeatUART(huart);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f000 f9ea 	bl	8001d64 <heartbeatUART>
		send_uart_hex(huart, sysStatus);
 8001990:	4b8b      	ldr	r3, [pc, #556]	; (8001bc0 <handleUART+0x248>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	4619      	mov	r1, r3
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f001 f9f7 	bl	8002d8a <send_uart_hex>
 800199c:	e102      	b.n	8001ba4 <handleUART+0x22c>
	}

/***************************** SPI Flash ************************************************/
	// Erase specified flash chip (data_rx[0]  = "e")
	else if (UARTRxData[0] == 0x65) {
 800199e:	4b87      	ldr	r3, [pc, #540]	; (8001bbc <handleUART+0x244>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b65      	cmp	r3, #101	; 0x65
 80019a4:	d11e      	bne.n	80019e4 <handleUART+0x6c>
		if(decodeASCII(UARTRxData[1]) == 0) {
 80019a6:	4b85      	ldr	r3, [pc, #532]	; (8001bbc <handleUART+0x244>)
 80019a8:	785b      	ldrb	r3, [r3, #1]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f000 f91a 	bl	8001be4 <decodeASCII>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d106      	bne.n	80019c4 <handleUART+0x4c>
			eraseFlashSPI(&hspi1, huart, cs_spi1);
 80019b6:	4b83      	ldr	r3, [pc, #524]	; (8001bc4 <handleUART+0x24c>)
 80019b8:	cb0c      	ldmia	r3, {r2, r3}
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	4882      	ldr	r0, [pc, #520]	; (8001bc8 <handleUART+0x250>)
 80019be:	f000 f9dd 	bl	8001d7c <eraseFlashSPI>
 80019c2:	e0ef      	b.n	8001ba4 <handleUART+0x22c>
		} else if (decodeASCII(UARTRxData[1]) == 1) {
 80019c4:	4b7d      	ldr	r3, [pc, #500]	; (8001bbc <handleUART+0x244>)
 80019c6:	785b      	ldrb	r3, [r3, #1]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f000 f90b 	bl	8001be4 <decodeASCII>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	f040 80e7 	bne.w	8001ba4 <handleUART+0x22c>
			eraseFlashSPI(&hspi2, huart, cs_spi2);
 80019d6:	4b7d      	ldr	r3, [pc, #500]	; (8001bcc <handleUART+0x254>)
 80019d8:	cb0c      	ldmia	r3, {r2, r3}
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	487c      	ldr	r0, [pc, #496]	; (8001bd0 <handleUART+0x258>)
 80019de:	f000 f9cd 	bl	8001d7c <eraseFlashSPI>
 80019e2:	e0df      	b.n	8001ba4 <handleUART+0x22c>
		}
	}

	// Read data from specified flash chip (data_rx[0] = "r")
	else if (UARTRxData[0] == 0x72) {
 80019e4:	4b75      	ldr	r3, [pc, #468]	; (8001bbc <handleUART+0x244>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b72      	cmp	r3, #114	; 0x72
 80019ea:	d11e      	bne.n	8001a2a <handleUART+0xb2>
		if(decodeASCII(UARTRxData[1]) == 0) {
 80019ec:	4b73      	ldr	r3, [pc, #460]	; (8001bbc <handleUART+0x244>)
 80019ee:	785b      	ldrb	r3, [r3, #1]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f000 f8f7 	bl	8001be4 <decodeASCII>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d106      	bne.n	8001a0a <handleUART+0x92>
			readFlashToUART(&hspi1, huart, cs_spi1);
 80019fc:	4b71      	ldr	r3, [pc, #452]	; (8001bc4 <handleUART+0x24c>)
 80019fe:	cb0c      	ldmia	r3, {r2, r3}
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	4871      	ldr	r0, [pc, #452]	; (8001bc8 <handleUART+0x250>)
 8001a04:	f000 f9f6 	bl	8001df4 <readFlashToUART>
 8001a08:	e0cc      	b.n	8001ba4 <handleUART+0x22c>
		} else if (decodeASCII(UARTRxData[1]) == 1) {
 8001a0a:	4b6c      	ldr	r3, [pc, #432]	; (8001bbc <handleUART+0x244>)
 8001a0c:	785b      	ldrb	r3, [r3, #1]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f000 f8e8 	bl	8001be4 <decodeASCII>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	f040 80c4 	bne.w	8001ba4 <handleUART+0x22c>
			readFlashToUART(&hspi2, huart, cs_spi2);
 8001a1c:	4b6b      	ldr	r3, [pc, #428]	; (8001bcc <handleUART+0x254>)
 8001a1e:	cb0c      	ldmia	r3, {r2, r3}
 8001a20:	6879      	ldr	r1, [r7, #4]
 8001a22:	486b      	ldr	r0, [pc, #428]	; (8001bd0 <handleUART+0x258>)
 8001a24:	f000 f9e6 	bl	8001df4 <readFlashToUART>
 8001a28:	e0bc      	b.n	8001ba4 <handleUART+0x22c>
		}
	}

	// Read Manufacturer over SPI (data_rx[0] = "m")
	else if (UARTRxData[0] == 0x6d) {
 8001a2a:	4b64      	ldr	r3, [pc, #400]	; (8001bbc <handleUART+0x244>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b6d      	cmp	r3, #109	; 0x6d
 8001a30:	d11e      	bne.n	8001a70 <handleUART+0xf8>
		if(decodeASCII(UARTRxData[1]) == 0) {
 8001a32:	4b62      	ldr	r3, [pc, #392]	; (8001bbc <handleUART+0x244>)
 8001a34:	785b      	ldrb	r3, [r3, #1]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 f8d4 	bl	8001be4 <decodeASCII>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d106      	bne.n	8001a50 <handleUART+0xd8>
			readFlashManuSPI(&hspi1, huart, cs_spi1);
 8001a42:	4b60      	ldr	r3, [pc, #384]	; (8001bc4 <handleUART+0x24c>)
 8001a44:	cb0c      	ldmia	r3, {r2, r3}
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	485f      	ldr	r0, [pc, #380]	; (8001bc8 <handleUART+0x250>)
 8001a4a:	f000 fa3f 	bl	8001ecc <readFlashManuSPI>
 8001a4e:	e0a9      	b.n	8001ba4 <handleUART+0x22c>
		} else if (decodeASCII(UARTRxData[1]) == 1) {
 8001a50:	4b5a      	ldr	r3, [pc, #360]	; (8001bbc <handleUART+0x244>)
 8001a52:	785b      	ldrb	r3, [r3, #1]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f000 f8c5 	bl	8001be4 <decodeASCII>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	f040 80a1 	bne.w	8001ba4 <handleUART+0x22c>
			readFlashManuSPI(&hspi2, huart, cs_spi2);
 8001a62:	4b5a      	ldr	r3, [pc, #360]	; (8001bcc <handleUART+0x254>)
 8001a64:	cb0c      	ldmia	r3, {r2, r3}
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	4859      	ldr	r0, [pc, #356]	; (8001bd0 <handleUART+0x258>)
 8001a6a:	f000 fa2f 	bl	8001ecc <readFlashManuSPI>
 8001a6e:	e099      	b.n	8001ba4 <handleUART+0x22c>
		}
	}

	// Write a page over SPI (data_rx[0] = "w")
	else if (UARTRxData[0] == 0x77) {
 8001a70:	4b52      	ldr	r3, [pc, #328]	; (8001bbc <handleUART+0x244>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b77      	cmp	r3, #119	; 0x77
 8001a76:	d11d      	bne.n	8001ab4 <handleUART+0x13c>
		if(decodeASCII(UARTRxData[1]) == 0) {
 8001a78:	4b50      	ldr	r3, [pc, #320]	; (8001bbc <handleUART+0x244>)
 8001a7a:	785b      	ldrb	r3, [r3, #1]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f000 f8b1 	bl	8001be4 <decodeASCII>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d106      	bne.n	8001a96 <handleUART+0x11e>
			writePageSPI_W(&hspi1, huart, cs_spi1);
 8001a88:	4b4e      	ldr	r3, [pc, #312]	; (8001bc4 <handleUART+0x24c>)
 8001a8a:	cb0c      	ldmia	r3, {r2, r3}
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	484e      	ldr	r0, [pc, #312]	; (8001bc8 <handleUART+0x250>)
 8001a90:	f000 fa3c 	bl	8001f0c <writePageSPI_W>
 8001a94:	e086      	b.n	8001ba4 <handleUART+0x22c>
		} else if (decodeASCII(UARTRxData[1]) == 1) {
 8001a96:	4b49      	ldr	r3, [pc, #292]	; (8001bbc <handleUART+0x244>)
 8001a98:	785b      	ldrb	r3, [r3, #1]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 f8a2 	bl	8001be4 <decodeASCII>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d17e      	bne.n	8001ba4 <handleUART+0x22c>
			writePageSPI_W(&hspi2, huart, cs_spi2);
 8001aa6:	4b49      	ldr	r3, [pc, #292]	; (8001bcc <handleUART+0x254>)
 8001aa8:	cb0c      	ldmia	r3, {r2, r3}
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	4848      	ldr	r0, [pc, #288]	; (8001bd0 <handleUART+0x258>)
 8001aae:	f000 fa2d 	bl	8001f0c <writePageSPI_W>
 8001ab2:	e077      	b.n	8001ba4 <handleUART+0x22c>
		}
	}

	// Software reset flash chip over SPI (data_rx[0] = "x")
	else if (UARTRxData[0] == 0x78) {
 8001ab4:	4b41      	ldr	r3, [pc, #260]	; (8001bbc <handleUART+0x244>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b78      	cmp	r3, #120	; 0x78
 8001aba:	d11d      	bne.n	8001af8 <handleUART+0x180>
		if(decodeASCII(UARTRxData[1]) == 0) {
 8001abc:	4b3f      	ldr	r3, [pc, #252]	; (8001bbc <handleUART+0x244>)
 8001abe:	785b      	ldrb	r3, [r3, #1]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f000 f88f 	bl	8001be4 <decodeASCII>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d106      	bne.n	8001ada <handleUART+0x162>
			resetSPIFlash(&hspi1, huart, cs_spi1);
 8001acc:	4b3d      	ldr	r3, [pc, #244]	; (8001bc4 <handleUART+0x24c>)
 8001ace:	cb0c      	ldmia	r3, {r2, r3}
 8001ad0:	6879      	ldr	r1, [r7, #4]
 8001ad2:	483d      	ldr	r0, [pc, #244]	; (8001bc8 <handleUART+0x250>)
 8001ad4:	f000 fa6e 	bl	8001fb4 <resetSPIFlash>
 8001ad8:	e064      	b.n	8001ba4 <handleUART+0x22c>
		} else if (decodeASCII(UARTRxData[1]) == 1) {
 8001ada:	4b38      	ldr	r3, [pc, #224]	; (8001bbc <handleUART+0x244>)
 8001adc:	785b      	ldrb	r3, [r3, #1]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 f880 	bl	8001be4 <decodeASCII>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d15c      	bne.n	8001ba4 <handleUART+0x22c>
			resetSPIFlash(&hspi2, huart, cs_spi2);
 8001aea:	4b38      	ldr	r3, [pc, #224]	; (8001bcc <handleUART+0x254>)
 8001aec:	cb0c      	ldmia	r3, {r2, r3}
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	4837      	ldr	r0, [pc, #220]	; (8001bd0 <handleUART+0x258>)
 8001af2:	f000 fa5f 	bl	8001fb4 <resetSPIFlash>
 8001af6:	e055      	b.n	8001ba4 <handleUART+0x22c>
		}
	}

/*********************************** I2C Accelerometer ***********************************/
	// Read Accelerometer WhoAmI (data_rx[0] = "c")
	else if (UARTRxData[0] == 0x63) {
 8001af8:	4b30      	ldr	r3, [pc, #192]	; (8001bbc <handleUART+0x244>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b63      	cmp	r3, #99	; 0x63
 8001afe:	d106      	bne.n	8001b0e <handleUART+0x196>
		checkAccelWhoAmI(i2c_accel, huart);
 8001b00:	4b34      	ldr	r3, [pc, #208]	; (8001bd4 <handleUART+0x25c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6879      	ldr	r1, [r7, #4]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f000 fa6c 	bl	8001fe4 <checkAccelWhoAmI>
 8001b0c:	e04a      	b.n	8001ba4 <handleUART+0x22c>
	}

	// Read the accelerometer and print to the UART[0] (data_rx [0] = "a")
	else if (UARTRxData[0] == 0x61) {
 8001b0e:	4b2b      	ldr	r3, [pc, #172]	; (8001bbc <handleUART+0x244>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b61      	cmp	r3, #97	; 0x61
 8001b14:	d103      	bne.n	8001b1e <handleUART+0x1a6>
		accelToUART(huart);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 fa78 	bl	800200c <accelToUART>
 8001b1c:	e042      	b.n	8001ba4 <handleUART+0x22c>
	}

/********************************** I2C BME280 *******************************************/
	// Read the temp sensor ID and print to the UART[0] (data_rx [0]= "b")
	else if (UARTRxData[0] == 0x62) {
 8001b1e:	4b27      	ldr	r3, [pc, #156]	; (8001bbc <handleUART+0x244>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b62      	cmp	r3, #98	; 0x62
 8001b24:	d10d      	bne.n	8001b42 <handleUART+0x1ca>
		readTempSensorID(i2c_bme280, huart, decodeASCII(UARTRxData[1]));
 8001b26:	4b2c      	ldr	r3, [pc, #176]	; (8001bd8 <handleUART+0x260>)
 8001b28:	681c      	ldr	r4, [r3, #0]
 8001b2a:	4b24      	ldr	r3, [pc, #144]	; (8001bbc <handleUART+0x244>)
 8001b2c:	785b      	ldrb	r3, [r3, #1]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f000 f858 	bl	8001be4 <decodeASCII>
 8001b34:	4603      	mov	r3, r0
 8001b36:	461a      	mov	r2, r3
 8001b38:	6879      	ldr	r1, [r7, #4]
 8001b3a:	4620      	mov	r0, r4
 8001b3c:	f000 fa82 	bl	8002044 <readTempSensorID>
 8001b40:	e030      	b.n	8001ba4 <handleUART+0x22c>
	}

	// Read the temp sensor calibration registers and print to the UART (data_rx[0] = "p")
	else if (UARTRxData[0] == 0x70) {
 8001b42:	4b1e      	ldr	r3, [pc, #120]	; (8001bbc <handleUART+0x244>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b70      	cmp	r3, #112	; 0x70
 8001b48:	d10d      	bne.n	8001b66 <handleUART+0x1ee>
		readTempCalibration(i2c_bme280, huart, decodeASCII(UARTRxData[1]));
 8001b4a:	4b23      	ldr	r3, [pc, #140]	; (8001bd8 <handleUART+0x260>)
 8001b4c:	681c      	ldr	r4, [r3, #0]
 8001b4e:	4b1b      	ldr	r3, [pc, #108]	; (8001bbc <handleUART+0x244>)
 8001b50:	785b      	ldrb	r3, [r3, #1]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f000 f846 	bl	8001be4 <decodeASCII>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	4620      	mov	r0, r4
 8001b60:	f000 fa85 	bl	800206e <readTempCalibration>
 8001b64:	e01e      	b.n	8001ba4 <handleUART+0x22c>
	}

	// Read the temp sensor and print to the UART[0] (data_rx [0]= "t")
	else if (UARTRxData[0] == 0x74) {
 8001b66:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <handleUART+0x244>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	2b74      	cmp	r3, #116	; 0x74
 8001b6c:	d10a      	bne.n	8001b84 <handleUART+0x20c>
		readTempSensor(huart, decodeASCII(UARTRxData[1]));
 8001b6e:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <handleUART+0x244>)
 8001b70:	785b      	ldrb	r3, [r3, #1]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f000 f836 	bl	8001be4 <decodeASCII>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 facd 	bl	800211c <readTempSensor>
 8001b82:	e00f      	b.n	8001ba4 <handleUART+0x22c>
	}

	/********************************** CAN Bus *******************************************/
	// Send the second byte received over the CAN bus as a payload with id 0x700 (data_rx [0]= "n")
	else if (UARTRxData[0] == 0x6E) {
 8001b84:	4b0d      	ldr	r3, [pc, #52]	; (8001bbc <handleUART+0x244>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b6e      	cmp	r3, #110	; 0x6e
 8001b8a:	d10b      	bne.n	8001ba4 <handleUART+0x22c>
		uint8_t TxData[1] = {UARTRxData[1]};
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <handleUART+0x244>)
 8001b8e:	785b      	ldrb	r3, [r3, #1]
 8001b90:	703b      	strb	r3, [r7, #0]
		sendCAN_TxMessage(&hcan2, 1, TxData, &CAN_TxMailbox, DUMMY_ID);
 8001b92:	463a      	mov	r2, r7
 8001b94:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001b98:	9300      	str	r3, [sp, #0]
 8001b9a:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <handleUART+0x264>)
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	4810      	ldr	r0, [pc, #64]	; (8001be0 <handleUART+0x268>)
 8001ba0:	f7fe fe34 	bl	800080c <sendCAN_TxMessage>
	}

	UARTRxData[0] = 0x00;
 8001ba4:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <handleUART+0x244>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	701a      	strb	r2, [r3, #0]
	UARTRxData[1] = 0x00;
 8001baa:	4b04      	ldr	r3, [pc, #16]	; (8001bbc <handleUART+0x244>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	705a      	strb	r2, [r3, #1]
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd90      	pop	{r4, r7, pc}
 8001bb8:	20000338 	.word	0x20000338
 8001bbc:	20000388 	.word	0x20000388
 8001bc0:	20000614 	.word	0x20000614
 8001bc4:	200005ec 	.word	0x200005ec
 8001bc8:	20000138 	.word	0x20000138
 8001bcc:	200005fc 	.word	0x200005fc
 8001bd0:	20000190 	.word	0x20000190
 8001bd4:	20000380 	.word	0x20000380
 8001bd8:	20000384 	.word	0x20000384
 8001bdc:	2000038c 	.word	0x2000038c
 8001be0:	20000048 	.word	0x20000048

08001be4 <decodeASCII>:

uint8_t decodeASCII(uint8_t asciiVal) {
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	71fb      	strb	r3, [r7, #7]
	int returnVal = -1;
 8001bee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bf2:	60fb      	str	r3, [r7, #12]
	if ((asciiVal >= 48) && (asciiVal <= 57)) {
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	2b2f      	cmp	r3, #47	; 0x2f
 8001bf8:	d905      	bls.n	8001c06 <decodeASCII+0x22>
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	2b39      	cmp	r3, #57	; 0x39
 8001bfe:	d802      	bhi.n	8001c06 <decodeASCII+0x22>
		returnVal = asciiVal - 48;
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	3b30      	subs	r3, #48	; 0x30
 8001c04:	60fb      	str	r3, [r7, #12]
	}
	return returnVal;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	b2db      	uxtb	r3, r3
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
	...

08001c18 <combine_system_status>:

uint8_t combine_system_status() {
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
    // Mask status to use only bits 4:0
    uint8_t masked_status = sysStatus & 0x1F; // 00011111b
 8001c1e:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <combine_system_status+0x48>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	f003 031f 	and.w	r3, r3, #31
 8001c26:	71fb      	strb	r3, [r7, #7]

    // Mask flight_state to use only bits 1:0
    uint8_t masked_flight_state = flight_state & 0x03; // 00000011b
 8001c28:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <combine_system_status+0x4c>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	f003 0303 	and.w	r3, r3, #3
 8001c30:	71bb      	strb	r3, [r7, #6]

    // Shift flight_state to the correct position (bits 6:5)
    uint8_t shifted_flight_state = masked_flight_state << 5;
 8001c32:	79bb      	ldrb	r3, [r7, #6]
 8001c34:	015b      	lsls	r3, r3, #5
 8001c36:	717b      	strb	r3, [r7, #5]

    // Combine the masked_status and shifted_flight_state
    uint8_t combined_value = masked_status | shifted_flight_state;
 8001c38:	79fa      	ldrb	r2, [r7, #7]
 8001c3a:	797b      	ldrb	r3, [r7, #5]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	713b      	strb	r3, [r7, #4]

    // Mask end_of_flash to get the last bit and shift it to bit 7
    uint8_t end_of_flash_bit = (end_of_flash & 0x01) << 7;
 8001c40:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <combine_system_status+0x50>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	01db      	lsls	r3, r3, #7
 8001c46:	70fb      	strb	r3, [r7, #3]

    // Combine with end_of_flash_bit
    combined_value |= end_of_flash_bit;
 8001c48:	793a      	ldrb	r2, [r7, #4]
 8001c4a:	78fb      	ldrb	r3, [r7, #3]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	713b      	strb	r3, [r7, #4]

    return combined_value;
 8001c50:	793b      	ldrb	r3, [r7, #4]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	20000614 	.word	0x20000614
 8001c64:	20000615 	.word	0x20000615
 8001c68:	200005da 	.word	0x200005da

08001c6c <configureCAN>:

void configureCAN() {
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08a      	sub	sp, #40	; 0x28
 8001c70:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef canFilterConfig;

	canFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8001c72:	2301      	movs	r3, #1
 8001c74:	623b      	str	r3, [r7, #32]
	canFilterConfig.FilterBank = 10;
 8001c76:	230a      	movs	r3, #10
 8001c78:	617b      	str	r3, [r7, #20]
	canFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	613b      	str	r3, [r7, #16]
	canFilterConfig.FilterIdHigh = 0x500 << 5;				// Filter only messages with ID 1X1XXXXXXXXb
 8001c7e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001c82:	603b      	str	r3, [r7, #0]
	canFilterConfig.FilterIdLow = 0x0000;
 8001c84:	2300      	movs	r3, #0
 8001c86:	607b      	str	r3, [r7, #4]
	canFilterConfig.FilterMaskIdHigh = 0x500 << 5;
 8001c88:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001c8c:	60bb      	str	r3, [r7, #8]
	canFilterConfig.FilterMaskIdLow = 0x0000;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
	canFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61bb      	str	r3, [r7, #24]
	canFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001c96:	2301      	movs	r3, #1
 8001c98:	61fb      	str	r3, [r7, #28]
	canFilterConfig.SlaveStartFilterBank = 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan2, &canFilterConfig);
 8001c9e:	463b      	mov	r3, r7
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4803      	ldr	r0, [pc, #12]	; (8001cb0 <configureCAN+0x44>)
 8001ca4:	f001 fa42 	bl	800312c <HAL_CAN_ConfigFilter>
}
 8001ca8:	bf00      	nop
 8001caa:	3728      	adds	r7, #40	; 0x28
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20000048 	.word	0x20000048

08001cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cb8:	b672      	cpsid	i
}
 8001cba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cbc:	e7fe      	b.n	8001cbc <Error_Handler+0x8>
	...

08001cc0 <systemStatus>:

#include "peripheral_driver.h"
/***************************************************************************************************************
 * Generic Functions
 */
uint8_t systemStatus(SPI_HandleTypeDef *hspi1, SPI_HandleTypeDef *hspi2, I2C_HandleTypeDef* hi2c1, I2C_HandleTypeDef* hi2c2) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
 8001ccc:	603b      	str	r3, [r7, #0]
	uint8_t retVal = 0x00;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	75fb      	strb	r3, [r7, #23]

	// Check BME280_1
	if(readBME280_id_reg(hi2c1, 1) != 0x60) {			// Expected 0x60
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7fe fd29 	bl	800072c <readBME280_id_reg>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b60      	cmp	r3, #96	; 0x60
 8001cde:	d003      	beq.n	8001ce8 <systemStatus+0x28>
		retVal  = retVal | 0x10;
 8001ce0:	7dfb      	ldrb	r3, [r7, #23]
 8001ce2:	f043 0310 	orr.w	r3, r3, #16
 8001ce6:	75fb      	strb	r3, [r7, #23]
	}

	// Check BME280_0
	if(readBME280_id_reg(hi2c1, 0) != 0x60) {			// Expected 0x60
 8001ce8:	2100      	movs	r1, #0
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7fe fd1e 	bl	800072c <readBME280_id_reg>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b60      	cmp	r3, #96	; 0x60
 8001cf4:	d003      	beq.n	8001cfe <systemStatus+0x3e>
		retVal  = retVal | 0x08;
 8001cf6:	7dfb      	ldrb	r3, [r7, #23]
 8001cf8:	f043 0308 	orr.w	r3, r3, #8
 8001cfc:	75fb      	strb	r3, [r7, #23]
	}

	// Check Accelerometer
	if(readAccel_whoami(hi2c2) != 0xE5) {				// Expected 0xE5
 8001cfe:	6838      	ldr	r0, [r7, #0]
 8001d00:	f7fe fc56 	bl	80005b0 <readAccel_whoami>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2be5      	cmp	r3, #229	; 0xe5
 8001d08:	d003      	beq.n	8001d12 <systemStatus+0x52>
		retVal  = retVal | 0x04;
 8001d0a:	7dfb      	ldrb	r3, [r7, #23]
 8001d0c:	f043 0304 	orr.w	r3, r3, #4
 8001d10:	75fb      	strb	r3, [r7, #23]
	}

	// Check SPIFlash_1
	uint8_t manu[2] = {0, 0};
 8001d12:	2300      	movs	r3, #0
 8001d14:	82bb      	strh	r3, [r7, #20]
	read_manufacturer_id(manu, hspi2, cs_spi2);
 8001d16:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <systemStatus+0x9c>)
 8001d18:	f107 0014 	add.w	r0, r7, #20
 8001d1c:	cb0c      	ldmia	r3, {r2, r3}
 8001d1e:	68b9      	ldr	r1, [r7, #8]
 8001d20:	f7fe ff44 	bl	8000bac <read_manufacturer_id>
	if(manu[0] != 0xEF) {								// Expected 0xEF
 8001d24:	7d3b      	ldrb	r3, [r7, #20]
 8001d26:	2bef      	cmp	r3, #239	; 0xef
 8001d28:	d003      	beq.n	8001d32 <systemStatus+0x72>
		retVal  = retVal | 0x02;
 8001d2a:	7dfb      	ldrb	r3, [r7, #23]
 8001d2c:	f043 0302 	orr.w	r3, r3, #2
 8001d30:	75fb      	strb	r3, [r7, #23]
	}

	// Check SPIFlash_0
	uint8_t manu0[2] = {0, 0};
 8001d32:	2300      	movs	r3, #0
 8001d34:	823b      	strh	r3, [r7, #16]
	read_manufacturer_id(manu0, hspi1, cs_spi1);
 8001d36:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <systemStatus+0xa0>)
 8001d38:	f107 0010 	add.w	r0, r7, #16
 8001d3c:	cb0c      	ldmia	r3, {r2, r3}
 8001d3e:	68f9      	ldr	r1, [r7, #12]
 8001d40:	f7fe ff34 	bl	8000bac <read_manufacturer_id>
	if(manu0[0] != 0xEF) {								// Expected 0xEF
 8001d44:	7c3b      	ldrb	r3, [r7, #16]
 8001d46:	2bef      	cmp	r3, #239	; 0xef
 8001d48:	d003      	beq.n	8001d52 <systemStatus+0x92>
		retVal  = retVal | 0x01;
 8001d4a:	7dfb      	ldrb	r3, [r7, #23]
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	75fb      	strb	r3, [r7, #23]
	}
	return retVal;
 8001d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	200005fc 	.word	0x200005fc
 8001d60:	200005ec 	.word	0x200005ec

08001d64 <heartbeatUART>:

void heartbeatUART(UART_HandleTypeDef *huart) {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
	send_uart_hex(huart, 0x51);			// Transmit the heartbeat as device ID (0x51 = Q)
 8001d6c:	2151      	movs	r1, #81	; 0x51
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f001 f80b 	bl	8002d8a <send_uart_hex>
}
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <eraseFlashSPI>:

/***************************************************************************************************************
 * SPI Flash Functions
 */
void eraseFlashSPI(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, GPIO_Config config) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	4639      	mov	r1, r7
 8001d88:	e881 000c 	stmia.w	r1, {r2, r3}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);		// Activate the "write out" LED
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	2180      	movs	r1, #128	; 0x80
 8001d90:	4813      	ldr	r0, [pc, #76]	; (8001de0 <eraseFlashSPI+0x64>)
 8001d92:	f002 fe0f 	bl	80049b4 <HAL_GPIO_WritePin>
	if (erase_chip_spi(hspi, config) == HAL_OK) {
 8001d96:	463b      	mov	r3, r7
 8001d98:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f7fe fdb9 	bl	8000914 <erase_chip_spi>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10d      	bne.n	8001dc4 <eraseFlashSPI+0x48>
		send_uart_string(huart, "Successful Chip Erase\r\n");
 8001da8:	490e      	ldr	r1, [pc, #56]	; (8001de4 <eraseFlashSPI+0x68>)
 8001daa:	68b8      	ldr	r0, [r7, #8]
 8001dac:	f000 ffd9 	bl	8002d62 <send_uart_string>
		next_blank_page = find_next_blank_page(hspi, &end_of_flash, config);
 8001db0:	463b      	mov	r3, r7
 8001db2:	cb0c      	ldmia	r3, {r2, r3}
 8001db4:	490c      	ldr	r1, [pc, #48]	; (8001de8 <eraseFlashSPI+0x6c>)
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	f7fe fe3a 	bl	8000a30 <find_next_blank_page>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	4a0b      	ldr	r2, [pc, #44]	; (8001dec <eraseFlashSPI+0x70>)
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	e003      	b.n	8001dcc <eraseFlashSPI+0x50>
	} else {
		send_uart_string(huart, "Error during chip erase. Please check the connection and try again.\r\n");
 8001dc4:	490a      	ldr	r1, [pc, #40]	; (8001df0 <eraseFlashSPI+0x74>)
 8001dc6:	68b8      	ldr	r0, [r7, #8]
 8001dc8:	f000 ffcb 	bl	8002d62 <send_uart_string>
	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);	// Deactivate the "write out" LED
 8001dcc:	2200      	movs	r2, #0
 8001dce:	2180      	movs	r1, #128	; 0x80
 8001dd0:	4803      	ldr	r0, [pc, #12]	; (8001de0 <eraseFlashSPI+0x64>)
 8001dd2:	f002 fdef 	bl	80049b4 <HAL_GPIO_WritePin>
}
 8001dd6:	bf00      	nop
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40020400 	.word	0x40020400
 8001de4:	080092ec 	.word	0x080092ec
 8001de8:	200005da 	.word	0x200005da
 8001dec:	200005d4 	.word	0x200005d4
 8001df0:	08009304 	.word	0x08009304

08001df4 <readFlashToUART>:

void readFlashToUART(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, GPIO_Config config) {
 8001df4:	b590      	push	{r4, r7, lr}
 8001df6:	b0cb      	sub	sp, #300	; 0x12c
 8001df8:	af02      	add	r7, sp, #8
 8001dfa:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8001dfe:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 8001e02:	6020      	str	r0, [r4, #0]
 8001e04:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8001e08:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 8001e0c:	6001      	str	r1, [r0, #0]
 8001e0e:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8001e12:	f5a1 7190 	sub.w	r1, r1, #288	; 0x120
 8001e16:	e881 000c 	stmia.w	r1, {r2, r3}
	uint32_t num_of_pages = next_blank_page;
 8001e1a:	4b2a      	ldr	r3, [pc, #168]	; (8001ec4 <readFlashToUART+0xd0>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	if(num_of_pages == 0) {
 8001e22:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d103      	bne.n	8001e32 <readFlashToUART+0x3e>
		num_of_pages = PAGE_SIZE;
 8001e2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e2e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	}
	num_of_pages = num_of_pages/PAGE_SIZE;
 8001e32:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001e36:	0a1b      	lsrs	r3, r3, #8
 8001e38:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	uint32_t address = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET);		// Activate the "write out" LED
 8001e42:	2201      	movs	r2, #1
 8001e44:	2180      	movs	r1, #128	; 0x80
 8001e46:	4820      	ldr	r0, [pc, #128]	; (8001ec8 <readFlashToUART+0xd4>)
 8001e48:	f002 fdb4 	bl	80049b4 <HAL_GPIO_WritePin>

	for (int i = 0; i < (num_of_pages); i++) {
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001e52:	e026      	b.n	8001ea2 <readFlashToUART+0xae>
		uint8_t page[PAGE_SIZE];
		read_page_spi(page, hspi, address, config);
 8001e54:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001e58:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001e5c:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001e60:	f5a2 718a 	sub.w	r1, r2, #276	; 0x114
 8001e64:	f107 0014 	add.w	r0, r7, #20
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	9200      	str	r2, [sp, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001e72:	6809      	ldr	r1, [r1, #0]
 8001e74:	f7fe fe74 	bl	8000b60 <read_page_spi>
		uart_transmit_page(huart, page);						// Transmit the data//
 8001e78:	f107 0214 	add.w	r2, r7, #20
 8001e7c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001e80:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001e84:	4611      	mov	r1, r2
 8001e86:	6818      	ldr	r0, [r3, #0]
 8001e88:	f000 ff5a 	bl	8002d40 <uart_transmit_page>
		address += PAGE_SIZE;
 8001e8c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001e90:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001e94:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	for (int i = 0; i < (num_of_pages); i++) {
 8001e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001ea6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d8d2      	bhi.n	8001e54 <readFlashToUART+0x60>
	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);	// Deactivate the "write out" LED
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2180      	movs	r1, #128	; 0x80
 8001eb2:	4805      	ldr	r0, [pc, #20]	; (8001ec8 <readFlashToUART+0xd4>)
 8001eb4:	f002 fd7e 	bl	80049b4 <HAL_GPIO_WritePin>
}
 8001eb8:	bf00      	nop
 8001eba:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd90      	pop	{r4, r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	200005d4 	.word	0x200005d4
 8001ec8:	40020400 	.word	0x40020400

08001ecc <readFlashManuSPI>:

void readFlashManuSPI(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, GPIO_Config config) {
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	4639      	mov	r1, r7
 8001ed8:	e881 000c 	stmia.w	r1, {r2, r3}
	uint8_t manu[2] = {0, 0};
 8001edc:	2300      	movs	r3, #0
 8001ede:	82bb      	strh	r3, [r7, #20]
	read_manufacturer_id(manu, hspi, config);
 8001ee0:	f107 0014 	add.w	r0, r7, #20
 8001ee4:	463b      	mov	r3, r7
 8001ee6:	cb0c      	ldmia	r3, {r2, r3}
 8001ee8:	68f9      	ldr	r1, [r7, #12]
 8001eea:	f7fe fe5f 	bl	8000bac <read_manufacturer_id>
	send_uart_hex(huart, manu[0]);
 8001eee:	7d3b      	ldrb	r3, [r7, #20]
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	68b8      	ldr	r0, [r7, #8]
 8001ef4:	f000 ff49 	bl	8002d8a <send_uart_hex>
	send_uart_hex(huart, manu[1]);
 8001ef8:	7d7b      	ldrb	r3, [r7, #21]
 8001efa:	4619      	mov	r1, r3
 8001efc:	68b8      	ldr	r0, [r7, #8]
 8001efe:	f000 ff44 	bl	8002d8a <send_uart_hex>
}
 8001f02:	bf00      	nop
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
	...

08001f0c <writePageSPI_W>:

void writePageSPI_W(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, GPIO_Config config) {
 8001f0c:	b590      	push	{r4, r7, lr}
 8001f0e:	b0c9      	sub	sp, #292	; 0x124
 8001f10:	af02      	add	r7, sp, #8
 8001f12:	f507 748c 	add.w	r4, r7, #280	; 0x118
 8001f16:	f5a4 7486 	sub.w	r4, r4, #268	; 0x10c
 8001f1a:	6020      	str	r0, [r4, #0]
 8001f1c:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8001f20:	f5a0 7088 	sub.w	r0, r0, #272	; 0x110
 8001f24:	6001      	str	r1, [r0, #0]
 8001f26:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8001f2a:	f5a1 718c 	sub.w	r1, r1, #280	; 0x118
 8001f2e:	e881 000c 	stmia.w	r1, {r2, r3}
	uint8_t data_out[PAGE_SIZE];
	for (int i = 0; i < PAGE_SIZE; i++) {
 8001f32:	2300      	movs	r3, #0
 8001f34:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001f38:	e00d      	b.n	8001f56 <writePageSPI_W+0x4a>
		data_out[i] = 0x77;		// Make all data in the page 'w'
 8001f3a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001f3e:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 8001f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001f46:	4413      	add	r3, r2
 8001f48:	2277      	movs	r2, #119	; 0x77
 8001f4a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < PAGE_SIZE; i++) {
 8001f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001f50:	3301      	adds	r3, #1
 8001f52:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001f5a:	2bff      	cmp	r3, #255	; 0xff
 8001f5c:	dded      	ble.n	8001f3a <writePageSPI_W+0x2e>
	}
	write_data_spi_dma(data_out, hspi, next_blank_page, config);
 8001f5e:	4b13      	ldr	r3, [pc, #76]	; (8001fac <writePageSPI_W+0xa0>)
 8001f60:	681c      	ldr	r4, [r3, #0]
 8001f62:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001f66:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001f6a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001f6e:	f5a2 7186 	sub.w	r1, r2, #268	; 0x10c
 8001f72:	f107 0014 	add.w	r0, r7, #20
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	9200      	str	r2, [sp, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4622      	mov	r2, r4
 8001f7e:	6809      	ldr	r1, [r1, #0]
 8001f80:	f7fe fd28 	bl	80009d4 <write_data_spi_dma>
	next_blank_page += PAGE_SIZE;
 8001f84:	4b09      	ldr	r3, [pc, #36]	; (8001fac <writePageSPI_W+0xa0>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001f8c:	4a07      	ldr	r2, [pc, #28]	; (8001fac <writePageSPI_W+0xa0>)
 8001f8e:	6013      	str	r3, [r2, #0]

	send_uart_string(huart, "Successful Page Written\r\n");
 8001f90:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001f94:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f98:	4905      	ldr	r1, [pc, #20]	; (8001fb0 <writePageSPI_W+0xa4>)
 8001f9a:	6818      	ldr	r0, [r3, #0]
 8001f9c:	f000 fee1 	bl	8002d62 <send_uart_string>
}
 8001fa0:	bf00      	nop
 8001fa2:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd90      	pop	{r4, r7, pc}
 8001faa:	bf00      	nop
 8001fac:	200005d4 	.word	0x200005d4
 8001fb0:	0800934c 	.word	0x0800934c

08001fb4 <resetSPIFlash>:

void resetSPIFlash(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, GPIO_Config config) {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	4639      	mov	r1, r7
 8001fc0:	e881 000c 	stmia.w	r1, {r2, r3}
	software_reset(hspi, config);
 8001fc4:	463b      	mov	r3, r7
 8001fc6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f7fe fcde 	bl	800098c <software_reset>
	send_uart_string(huart, "Flash Chip Reset\r\n");
 8001fd0:	4903      	ldr	r1, [pc, #12]	; (8001fe0 <resetSPIFlash+0x2c>)
 8001fd2:	68b8      	ldr	r0, [r7, #8]
 8001fd4:	f000 fec5 	bl	8002d62 <send_uart_string>
}
 8001fd8:	bf00      	nop
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	08009368 	.word	0x08009368

08001fe4 <checkAccelWhoAmI>:
/***************************************************************************************************************
 * I2C Accelerometer Functions
 */
void checkAccelWhoAmI(I2C_HandleTypeDef* hi2c, UART_HandleTypeDef *huart) {
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
	uint8_t whoami = readAccel_whoami(hi2c);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7fe fade 	bl	80005b0 <readAccel_whoami>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	73fb      	strb	r3, [r7, #15]
	send_uart_hex(huart, whoami);
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	6838      	ldr	r0, [r7, #0]
 8001ffe:	f000 fec4 	bl	8002d8a <send_uart_hex>
}
 8002002:	bf00      	nop
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <accelToUART>:

void accelToUART(UART_HandleTypeDef *huart) {
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 6; i++) {
 8002014:	2300      	movs	r3, #0
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	e00a      	b.n	8002030 <accelToUART+0x24>
		send_uart_hex(huart, accel_data[i]);
 800201a:	4a09      	ldr	r2, [pc, #36]	; (8002040 <accelToUART+0x34>)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	4413      	add	r3, r2
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	4619      	mov	r1, r3
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 feb0 	bl	8002d8a <send_uart_hex>
	for (int i = 0; i < 6; i++) {
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	3301      	adds	r3, #1
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2b05      	cmp	r3, #5
 8002034:	ddf1      	ble.n	800201a <accelToUART+0xe>
	}
}
 8002036:	bf00      	nop
 8002038:	bf00      	nop
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	200005bc 	.word	0x200005bc

08002044 <readTempSensorID>:

/***************************************************************************************************************
 * I2C BME280 Sensor Functions
 */
void readTempSensorID(I2C_HandleTypeDef* hi2c, UART_HandleTypeDef *huart, uint8_t tempNo) {
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	4613      	mov	r3, r2
 8002050:	71fb      	strb	r3, [r7, #7]
	send_uart_hex(huart, readBME280_id_reg(hi2c, tempNo));
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	4619      	mov	r1, r3
 8002056:	68f8      	ldr	r0, [r7, #12]
 8002058:	f7fe fb68 	bl	800072c <readBME280_id_reg>
 800205c:	4603      	mov	r3, r0
 800205e:	4619      	mov	r1, r3
 8002060:	68b8      	ldr	r0, [r7, #8]
 8002062:	f000 fe92 	bl	8002d8a <send_uart_hex>
}
 8002066:	bf00      	nop
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <readTempCalibration>:

void readTempCalibration(I2C_HandleTypeDef* hi2c, UART_HandleTypeDef *huart, uint8_t tempNo) {
 800206e:	b580      	push	{r7, lr}
 8002070:	b090      	sub	sp, #64	; 0x40
 8002072:	af00      	add	r7, sp, #0
 8002074:	60f8      	str	r0, [r7, #12]
 8002076:	60b9      	str	r1, [r7, #8]
 8002078:	4613      	mov	r3, r2
 800207a:	71fb      	strb	r3, [r7, #7]
	uint8_t calibration1[25];
	uint8_t calibration2[7];

	for (uint8_t i = 0; i < CALIB_CNT_1; i++) {
 800207c:	2300      	movs	r3, #0
 800207e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002082:	e016      	b.n	80020b2 <readTempCalibration+0x44>
		calibration1[i] = 0x00;
 8002084:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002088:	3340      	adds	r3, #64	; 0x40
 800208a:	443b      	add	r3, r7
 800208c:	2200      	movs	r2, #0
 800208e:	f803 2c28 	strb.w	r2, [r3, #-40]
		if (i < CALIB_CNT_2) {
 8002092:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002096:	2b06      	cmp	r3, #6
 8002098:	d806      	bhi.n	80020a8 <readTempCalibration+0x3a>
			calibration2[i] = 0x00;
 800209a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800209e:	3340      	adds	r3, #64	; 0x40
 80020a0:	443b      	add	r3, r7
 80020a2:	2200      	movs	r2, #0
 80020a4:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (uint8_t i = 0; i < CALIB_CNT_1; i++) {
 80020a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80020ac:	3301      	adds	r3, #1
 80020ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80020b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80020b6:	2b18      	cmp	r3, #24
 80020b8:	d9e4      	bls.n	8002084 <readTempCalibration+0x16>
		}
	}

	readBME280_calib(hi2c, tempNo, calibration1, calibration2);
 80020ba:	f107 0310 	add.w	r3, r7, #16
 80020be:	f107 0218 	add.w	r2, r7, #24
 80020c2:	79f9      	ldrb	r1, [r7, #7]
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f7fe fb4d 	bl	8000764 <readBME280_calib>

	for (int i = 0; i < 25; i++) {
 80020ca:	2300      	movs	r3, #0
 80020cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80020ce:	e00b      	b.n	80020e8 <readTempCalibration+0x7a>
	  send_uart_hex(huart, calibration1[i]);
 80020d0:	f107 0218 	add.w	r2, r7, #24
 80020d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020d6:	4413      	add	r3, r2
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	4619      	mov	r1, r3
 80020dc:	68b8      	ldr	r0, [r7, #8]
 80020de:	f000 fe54 	bl	8002d8a <send_uart_hex>
	for (int i = 0; i < 25; i++) {
 80020e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020e4:	3301      	adds	r3, #1
 80020e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80020e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ea:	2b18      	cmp	r3, #24
 80020ec:	ddf0      	ble.n	80020d0 <readTempCalibration+0x62>
	}

	for (int i = 0; i < 7; i++) {
 80020ee:	2300      	movs	r3, #0
 80020f0:	637b      	str	r3, [r7, #52]	; 0x34
 80020f2:	e00b      	b.n	800210c <readTempCalibration+0x9e>
	  send_uart_hex(huart, calibration2[i]);
 80020f4:	f107 0210 	add.w	r2, r7, #16
 80020f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020fa:	4413      	add	r3, r2
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	4619      	mov	r1, r3
 8002100:	68b8      	ldr	r0, [r7, #8]
 8002102:	f000 fe42 	bl	8002d8a <send_uart_hex>
	for (int i = 0; i < 7; i++) {
 8002106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002108:	3301      	adds	r3, #1
 800210a:	637b      	str	r3, [r7, #52]	; 0x34
 800210c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800210e:	2b06      	cmp	r3, #6
 8002110:	ddf0      	ble.n	80020f4 <readTempCalibration+0x86>
	}
}
 8002112:	bf00      	nop
 8002114:	bf00      	nop
 8002116:	3740      	adds	r7, #64	; 0x40
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <readTempSensor>:

void readTempSensor(UART_HandleTypeDef *huart, uint8_t tempNo) {
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	70fb      	strb	r3, [r7, #3]
	if (tempNo == 0) {
 8002128:	78fb      	ldrb	r3, [r7, #3]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d111      	bne.n	8002152 <readTempSensor+0x36>
		for (int i = 0; i < 6; i++) {
 800212e:	2300      	movs	r3, #0
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	e00a      	b.n	800214a <readTempSensor+0x2e>
			send_uart_hex(huart, bme280_data_0[i]);
 8002134:	4a13      	ldr	r2, [pc, #76]	; (8002184 <readTempSensor+0x68>)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	4413      	add	r3, r2
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	4619      	mov	r1, r3
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 fe23 	bl	8002d8a <send_uart_hex>
		for (int i = 0; i < 6; i++) {
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	3301      	adds	r3, #1
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2b05      	cmp	r3, #5
 800214e:	ddf1      	ble.n	8002134 <readTempSensor+0x18>
	} else if (tempNo == 1) {
		for (int i = 0; i < 6; i++) {
			send_uart_hex(huart, bme280_data_1[i]);
		}
	}
}
 8002150:	e013      	b.n	800217a <readTempSensor+0x5e>
	} else if (tempNo == 1) {
 8002152:	78fb      	ldrb	r3, [r7, #3]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d110      	bne.n	800217a <readTempSensor+0x5e>
		for (int i = 0; i < 6; i++) {
 8002158:	2300      	movs	r3, #0
 800215a:	60bb      	str	r3, [r7, #8]
 800215c:	e00a      	b.n	8002174 <readTempSensor+0x58>
			send_uart_hex(huart, bme280_data_1[i]);
 800215e:	4a0a      	ldr	r2, [pc, #40]	; (8002188 <readTempSensor+0x6c>)
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	4413      	add	r3, r2
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	4619      	mov	r1, r3
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 fe0e 	bl	8002d8a <send_uart_hex>
		for (int i = 0; i < 6; i++) {
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	3301      	adds	r3, #1
 8002172:	60bb      	str	r3, [r7, #8]
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	2b05      	cmp	r3, #5
 8002178:	ddf1      	ble.n	800215e <readTempSensor+0x42>
}
 800217a:	bf00      	nop
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	200005c4 	.word	0x200005c4
 8002188:	200005cc 	.word	0x200005cc

0800218c <readAllSensors>:

/***************************************************************************************************************
 * Process All Sensors
 */
void readAllSensors(I2C_HandleTypeDef* hi2c_accel, I2C_HandleTypeDef* hi2c_temp, RTC_HandleTypeDef* hrtc) {
 800218c:	b5b0      	push	{r4, r5, r7, lr}
 800218e:	b08a      	sub	sp, #40	; 0x28
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
	// Read Accelerometer Data
	readAccelerometer(accel_data, hi2c_accel);
 8002198:	68f9      	ldr	r1, [r7, #12]
 800219a:	4869      	ldr	r0, [pc, #420]	; (8002340 <readAllSensors+0x1b4>)
 800219c:	f7fe f9e2 	bl	8000564 <readAccelerometer>

	// Read BME280 Data
	readTempHumPres(bme280_data_0, hi2c_temp, 0);
 80021a0:	2200      	movs	r2, #0
 80021a2:	68b9      	ldr	r1, [r7, #8]
 80021a4:	4867      	ldr	r0, [pc, #412]	; (8002344 <readAllSensors+0x1b8>)
 80021a6:	f7fe fa67 	bl	8000678 <readTempHumPres>
	readTempHumPres(bme280_data_1, hi2c_temp, 1);
 80021aa:	2201      	movs	r2, #1
 80021ac:	68b9      	ldr	r1, [r7, #8]
 80021ae:	4866      	ldr	r0, [pc, #408]	; (8002348 <readAllSensors+0x1bc>)
 80021b0:	f7fe fa62 	bl	8000678 <readTempHumPres>

	uint16_t time = getTimestampMilliseconds(hrtc);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 f8e9 	bl	800238c <getTimestampMilliseconds>
 80021ba:	4603      	mov	r3, r0
 80021bc:	82fb      	strh	r3, [r7, #22]
	uint8_t array_ptr = 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// Store the new read in the buffer if there is space
	if (byte_tracker < (PAGE_SIZE - READ_SIZE)) {
 80021c4:	4b61      	ldr	r3, [pc, #388]	; (800234c <readAllSensors+0x1c0>)
 80021c6:	881b      	ldrh	r3, [r3, #0]
 80021c8:	2bea      	cmp	r3, #234	; 0xea
 80021ca:	f200 80b4 	bhi.w	8002336 <readAllSensors+0x1aa>
		// Store the timestamp in the buffer (Big Endian)
		data_buffer_tx[buffer_tracker][byte_tracker + array_ptr] = (uint8_t) (time & 0xFF); 		// Least significant byte (LSB)
 80021ce:	4b60      	ldr	r3, [pc, #384]	; (8002350 <readAllSensors+0x1c4>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	461a      	mov	r2, r3
 80021d4:	4b5d      	ldr	r3, [pc, #372]	; (800234c <readAllSensors+0x1c0>)
 80021d6:	881b      	ldrh	r3, [r3, #0]
 80021d8:	4619      	mov	r1, r3
 80021da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021de:	440b      	add	r3, r1
 80021e0:	8af9      	ldrh	r1, [r7, #22]
 80021e2:	b2c8      	uxtb	r0, r1
 80021e4:	495b      	ldr	r1, [pc, #364]	; (8002354 <readAllSensors+0x1c8>)
 80021e6:	0212      	lsls	r2, r2, #8
 80021e8:	440a      	add	r2, r1
 80021ea:	4413      	add	r3, r2
 80021ec:	4602      	mov	r2, r0
 80021ee:	701a      	strb	r2, [r3, #0]
		array_ptr += 1;
 80021f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021f4:	3301      	adds	r3, #1
 80021f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		data_buffer_tx[buffer_tracker][byte_tracker + array_ptr] = (uint8_t) ((time >> 8) & 0xFF); // Most significant byte (MSB)
 80021fa:	8afb      	ldrh	r3, [r7, #22]
 80021fc:	0a1b      	lsrs	r3, r3, #8
 80021fe:	b299      	uxth	r1, r3
 8002200:	4b53      	ldr	r3, [pc, #332]	; (8002350 <readAllSensors+0x1c4>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	461a      	mov	r2, r3
 8002206:	4b51      	ldr	r3, [pc, #324]	; (800234c <readAllSensors+0x1c0>)
 8002208:	881b      	ldrh	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002210:	4403      	add	r3, r0
 8002212:	b2c8      	uxtb	r0, r1
 8002214:	494f      	ldr	r1, [pc, #316]	; (8002354 <readAllSensors+0x1c8>)
 8002216:	0212      	lsls	r2, r2, #8
 8002218:	440a      	add	r2, r1
 800221a:	4413      	add	r3, r2
 800221c:	4602      	mov	r2, r0
 800221e:	701a      	strb	r2, [r3, #0]
		array_ptr += 1;
 8002220:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002224:	3301      	adds	r3, #1
 8002226:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		// Store the accelerometer data
		for (int i = 0; i < 6; i++) {
 800222a:	2300      	movs	r3, #0
 800222c:	623b      	str	r3, [r7, #32]
 800222e:	e01a      	b.n	8002266 <readAllSensors+0xda>
		  data_buffer_tx[buffer_tracker][byte_tracker + array_ptr] = accel_data[i];
 8002230:	4b47      	ldr	r3, [pc, #284]	; (8002350 <readAllSensors+0x1c4>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	461c      	mov	r4, r3
 8002236:	4b45      	ldr	r3, [pc, #276]	; (800234c <readAllSensors+0x1c0>)
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	461a      	mov	r2, r3
 800223c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002240:	4413      	add	r3, r2
 8002242:	493f      	ldr	r1, [pc, #252]	; (8002340 <readAllSensors+0x1b4>)
 8002244:	6a3a      	ldr	r2, [r7, #32]
 8002246:	440a      	add	r2, r1
 8002248:	7810      	ldrb	r0, [r2, #0]
 800224a:	4942      	ldr	r1, [pc, #264]	; (8002354 <readAllSensors+0x1c8>)
 800224c:	0222      	lsls	r2, r4, #8
 800224e:	440a      	add	r2, r1
 8002250:	4413      	add	r3, r2
 8002252:	4602      	mov	r2, r0
 8002254:	701a      	strb	r2, [r3, #0]
		  array_ptr += 1;
 8002256:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800225a:	3301      	adds	r3, #1
 800225c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for (int i = 0; i < 6; i++) {
 8002260:	6a3b      	ldr	r3, [r7, #32]
 8002262:	3301      	adds	r3, #1
 8002264:	623b      	str	r3, [r7, #32]
 8002266:	6a3b      	ldr	r3, [r7, #32]
 8002268:	2b05      	cmp	r3, #5
 800226a:	dde1      	ble.n	8002230 <readAllSensors+0xa4>
		}

		// Store the BME280_0 Data
		for (int i = 0; i < 6; i++) {
 800226c:	2300      	movs	r3, #0
 800226e:	61fb      	str	r3, [r7, #28]
 8002270:	e01a      	b.n	80022a8 <readAllSensors+0x11c>
		  data_buffer_tx[buffer_tracker][byte_tracker + array_ptr] = bme280_data_0[i];
 8002272:	4b37      	ldr	r3, [pc, #220]	; (8002350 <readAllSensors+0x1c4>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	461c      	mov	r4, r3
 8002278:	4b34      	ldr	r3, [pc, #208]	; (800234c <readAllSensors+0x1c0>)
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	461a      	mov	r2, r3
 800227e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002282:	4413      	add	r3, r2
 8002284:	492f      	ldr	r1, [pc, #188]	; (8002344 <readAllSensors+0x1b8>)
 8002286:	69fa      	ldr	r2, [r7, #28]
 8002288:	440a      	add	r2, r1
 800228a:	7810      	ldrb	r0, [r2, #0]
 800228c:	4931      	ldr	r1, [pc, #196]	; (8002354 <readAllSensors+0x1c8>)
 800228e:	0222      	lsls	r2, r4, #8
 8002290:	440a      	add	r2, r1
 8002292:	4413      	add	r3, r2
 8002294:	4602      	mov	r2, r0
 8002296:	701a      	strb	r2, [r3, #0]
		  array_ptr += 1;
 8002298:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800229c:	3301      	adds	r3, #1
 800229e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for (int i = 0; i < 6; i++) {
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	3301      	adds	r3, #1
 80022a6:	61fb      	str	r3, [r7, #28]
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	2b05      	cmp	r3, #5
 80022ac:	dde1      	ble.n	8002272 <readAllSensors+0xe6>
		}

		// Store the BME280_1 Data
		for (int i = 0; i < 6; i++) {
 80022ae:	2300      	movs	r3, #0
 80022b0:	61bb      	str	r3, [r7, #24]
 80022b2:	e01a      	b.n	80022ea <readAllSensors+0x15e>
		  data_buffer_tx[buffer_tracker][byte_tracker + array_ptr] = bme280_data_1[i];
 80022b4:	4b26      	ldr	r3, [pc, #152]	; (8002350 <readAllSensors+0x1c4>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	461c      	mov	r4, r3
 80022ba:	4b24      	ldr	r3, [pc, #144]	; (800234c <readAllSensors+0x1c0>)
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	461a      	mov	r2, r3
 80022c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022c4:	4413      	add	r3, r2
 80022c6:	4920      	ldr	r1, [pc, #128]	; (8002348 <readAllSensors+0x1bc>)
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	440a      	add	r2, r1
 80022cc:	7810      	ldrb	r0, [r2, #0]
 80022ce:	4921      	ldr	r1, [pc, #132]	; (8002354 <readAllSensors+0x1c8>)
 80022d0:	0222      	lsls	r2, r4, #8
 80022d2:	440a      	add	r2, r1
 80022d4:	4413      	add	r3, r2
 80022d6:	4602      	mov	r2, r0
 80022d8:	701a      	strb	r2, [r3, #0]
		  array_ptr += 1;
 80022da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022de:	3301      	adds	r3, #1
 80022e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for (int i = 0; i < 6; i++) {
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	3301      	adds	r3, #1
 80022e8:	61bb      	str	r3, [r7, #24]
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	2b05      	cmp	r3, #5
 80022ee:	dde1      	ble.n	80022b4 <readAllSensors+0x128>
		}

		// Store the flight state and peripheral status in the final byte
		data_buffer_tx[buffer_tracker][byte_tracker + array_ptr] = combine_system_status();
 80022f0:	4b17      	ldr	r3, [pc, #92]	; (8002350 <readAllSensors+0x1c4>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	461d      	mov	r5, r3
 80022f6:	4b15      	ldr	r3, [pc, #84]	; (800234c <readAllSensors+0x1c0>)
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	461a      	mov	r2, r3
 80022fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002300:	18d4      	adds	r4, r2, r3
 8002302:	f7ff fc89 	bl	8001c18 <combine_system_status>
 8002306:	4603      	mov	r3, r0
 8002308:	4619      	mov	r1, r3
 800230a:	4a12      	ldr	r2, [pc, #72]	; (8002354 <readAllSensors+0x1c8>)
 800230c:	022b      	lsls	r3, r5, #8
 800230e:	4413      	add	r3, r2
 8002310:	4423      	add	r3, r4
 8002312:	460a      	mov	r2, r1
 8002314:	701a      	strb	r2, [r3, #0]
		array_ptr += 1;
 8002316:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800231a:	3301      	adds	r3, #1
 800231c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		byte_tracker = byte_tracker + (array_ptr - 1);
 8002320:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002324:	b29a      	uxth	r2, r3
 8002326:	4b09      	ldr	r3, [pc, #36]	; (800234c <readAllSensors+0x1c0>)
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	4413      	add	r3, r2
 800232c:	b29b      	uxth	r3, r3
 800232e:	3b01      	subs	r3, #1
 8002330:	b29a      	uxth	r2, r3
 8002332:	4b06      	ldr	r3, [pc, #24]	; (800234c <readAllSensors+0x1c0>)
 8002334:	801a      	strh	r2, [r3, #0]
	}
}
 8002336:	bf00      	nop
 8002338:	3728      	adds	r7, #40	; 0x28
 800233a:	46bd      	mov	sp, r7
 800233c:	bdb0      	pop	{r4, r5, r7, pc}
 800233e:	bf00      	nop
 8002340:	200005bc 	.word	0x200005bc
 8002344:	200005c4 	.word	0x200005c4
 8002348:	200005cc 	.word	0x200005cc
 800234c:	200005d8 	.word	0x200005d8
 8002350:	200005b8 	.word	0x200005b8
 8002354:	200003b8 	.word	0x200003b8

08002358 <initialise_rtc_default>:
    .Month = RTC_MONTH_JANUARY, // Set default month (e.g., January)
    .Date = 1, // Set default day of the month
    .Year = 24 // Set default year (e.g., 2021)
};

void initialise_rtc_default(RTC_HandleTypeDef* hrtc) {
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
	// Reset RTC on boot
	HAL_RTC_MspInit(hrtc); // Initialize RTC hardware
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 fa39 	bl	80027d8 <HAL_RTC_MspInit>
	HAL_RTC_SetTime(hrtc, &defaultTime, RTC_FORMAT_BIN); // Set default time
 8002366:	2200      	movs	r2, #0
 8002368:	4906      	ldr	r1, [pc, #24]	; (8002384 <initialise_rtc_default+0x2c>)
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f004 fa67 	bl	800683e <HAL_RTC_SetTime>
	HAL_RTC_SetDate(hrtc, &defaultDate, RTC_FORMAT_BIN); // Set default date
 8002370:	2200      	movs	r2, #0
 8002372:	4905      	ldr	r1, [pc, #20]	; (8002388 <initialise_rtc_default+0x30>)
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f004 fb5a 	bl	8006a2e <HAL_RTC_SetDate>
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000618 	.word	0x20000618
 8002388:	20000018 	.word	0x20000018

0800238c <getTimestampMilliseconds>:

uint32_t getTimestampMilliseconds(RTC_HandleTypeDef* hrtc) {
 800238c:	b580      	push	{r7, lr}
 800238e:	b08c      	sub	sp, #48	; 0x30
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
    RTC_TimeTypeDef rtcTime;
    RTC_DateTypeDef rtcDate;

    // Read RTC time and date
    HAL_RTC_GetTime(hrtc, &rtcTime, RTC_FORMAT_BIN);
 8002394:	f107 0310 	add.w	r3, r7, #16
 8002398:	2200      	movs	r2, #0
 800239a:	4619      	mov	r1, r3
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f004 fae8 	bl	8006972 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(hrtc, &rtcDate, RTC_FORMAT_BIN);
 80023a2:	f107 030c 	add.w	r3, r7, #12
 80023a6:	2200      	movs	r2, #0
 80023a8:	4619      	mov	r1, r3
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f004 fbc3 	bl	8006b36 <HAL_RTC_GetDate>

    // Calculate timestamp in milliseconds
    uint32_t timestampSeconds = rtcTime.Seconds + rtcTime.Minutes * 60 + rtcTime.Hours * 3600;
 80023b0:	7cbb      	ldrb	r3, [r7, #18]
 80023b2:	4619      	mov	r1, r3
 80023b4:	7c7b      	ldrb	r3, [r7, #17]
 80023b6:	461a      	mov	r2, r3
 80023b8:	4613      	mov	r3, r2
 80023ba:	011b      	lsls	r3, r3, #4
 80023bc:	1a9b      	subs	r3, r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	18ca      	adds	r2, r1, r3
 80023c2:	7c3b      	ldrb	r3, [r7, #16]
 80023c4:	4619      	mov	r1, r3
 80023c6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80023ca:	fb01 f303 	mul.w	r3, r1, r3
 80023ce:	4413      	add	r3, r2
 80023d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t timestampMilliseconds = timestampSeconds * 1000;
 80023d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80023d8:	fb02 f303 	mul.w	r3, r2, r3
 80023dc:	62bb      	str	r3, [r7, #40]	; 0x28
    float subsecondsFraction = (float)(rtcTime.SecondFraction - rtcTime.SubSeconds) / (rtcTime.SecondFraction + 1);
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	ee07 3a90 	vmov	s15, r3
 80023e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	3301      	adds	r3, #1
 80023f0:	ee07 3a90 	vmov	s15, r3
 80023f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023fc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    timestampMilliseconds += subsecondsFraction * 1000;
 8002400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002402:	ee07 3a90 	vmov	s15, r3
 8002406:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800240a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800240e:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002430 <getTimestampMilliseconds+0xa4>
 8002412:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002416:	ee77 7a27 	vadd.f32	s15, s14, s15
 800241a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800241e:	ee17 3a90 	vmov	r3, s15
 8002422:	62bb      	str	r3, [r7, #40]	; 0x28

    return timestampMilliseconds;
 8002424:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002426:	4618      	mov	r0, r3
 8002428:	3730      	adds	r7, #48	; 0x30
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	447a0000 	.word	0x447a0000

08002434 <spi_sendOp_readByte>:
#ifndef SRC_SPI_DRIVER_C_
#define SRC_SPI_DRIVER_C_

#include "spi_driver.h"

HAL_StatusTypeDef spi_sendOp_readByte(uint8_t* opcode, SPI_HandleTypeDef *hspi, uint8_t* data_ptr, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
 8002440:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status;
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);	// Set the chip select pin to low to initiate SPI comms
 8002442:	8c3b      	ldrh	r3, [r7, #32]
 8002444:	2200      	movs	r2, #0
 8002446:	4619      	mov	r1, r3
 8002448:	6838      	ldr	r0, [r7, #0]
 800244a:	f002 fab3 	bl	80049b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, opcode, 1, TIMEOUT_SML);			// Write the write enable value to the Flash to initial reading
 800244e:	2302      	movs	r3, #2
 8002450:	2201      	movs	r2, #1
 8002452:	68f9      	ldr	r1, [r7, #12]
 8002454:	68b8      	ldr	r0, [r7, #8]
 8002456:	f004 fd04 	bl	8006e62 <HAL_SPI_Transmit>
	status = HAL_SPI_Receive(hspi, data_ptr, 1, TIMEOUT_SML);
 800245a:	2302      	movs	r3, #2
 800245c:	2201      	movs	r2, #1
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	68b8      	ldr	r0, [r7, #8]
 8002462:	f004 fe41 	bl	80070e8 <HAL_SPI_Receive>
 8002466:	4603      	mov	r3, r0
 8002468:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);
 800246a:	8c3b      	ldrh	r3, [r7, #32]
 800246c:	2201      	movs	r2, #1
 800246e:	4619      	mov	r1, r3
 8002470:	6838      	ldr	r0, [r7, #0]
 8002472:	f002 fa9f 	bl	80049b4 <HAL_GPIO_WritePin>
	return status;
 8002476:	7dfb      	ldrb	r3, [r7, #23]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3718      	adds	r7, #24
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <perform_operation>:

HAL_StatusTypeDef perform_operation(uint8_t* opcode, SPI_HandleTypeDef *hspi, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
 800248c:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef status;
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);				// Set the chip select pin to low to initiate SPI comms
 800248e:	887b      	ldrh	r3, [r7, #2]
 8002490:	2200      	movs	r2, #0
 8002492:	4619      	mov	r1, r3
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f002 fa8d 	bl	80049b4 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(hspi, opcode, 1, TIMEOUT_SML);				// Write the opcode value
 800249a:	2302      	movs	r3, #2
 800249c:	2201      	movs	r2, #1
 800249e:	68f9      	ldr	r1, [r7, #12]
 80024a0:	68b8      	ldr	r0, [r7, #8]
 80024a2:	f004 fcde 	bl	8006e62 <HAL_SPI_Transmit>
 80024a6:	4603      	mov	r3, r0
 80024a8:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);
 80024aa:	887b      	ldrh	r3, [r7, #2]
 80024ac:	2201      	movs	r2, #1
 80024ae:	4619      	mov	r1, r3
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f002 fa7f 	bl	80049b4 <HAL_GPIO_WritePin>

	return status;
 80024b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3718      	adds	r7, #24
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <spi_read_data>:

HAL_StatusTypeDef spi_read_data(uint8_t* opcode, uint16_t data_size, uint8_t data_read[data_size], SPI_HandleTypeDef *hspi, uint32_t addr, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	607a      	str	r2, [r7, #4]
 80024ca:	603b      	str	r3, [r7, #0]
 80024cc:	460b      	mov	r3, r1
 80024ce:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef status;

	// Split the 24 bit address into three 8 bit ints
	uint8_t addrL = addr & 0xFF;  // Get the low byte
 80024d0:	6a3b      	ldr	r3, [r7, #32]
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	75bb      	strb	r3, [r7, #22]
	uint8_t addrM = (addr >> 8) & 0xFF;  // Get the middle byte
 80024d6:	6a3b      	ldr	r3, [r7, #32]
 80024d8:	0a1b      	lsrs	r3, r3, #8
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	757b      	strb	r3, [r7, #21]
	uint8_t addrH = (addr >> 16) & 0xFF;  // Get the high byte
 80024de:	6a3b      	ldr	r3, [r7, #32]
 80024e0:	0c1b      	lsrs	r3, r3, #16
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	753b      	strb	r3, [r7, #20]

	// Read the data denoted by the given address
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);
 80024e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80024e8:	2200      	movs	r2, #0
 80024ea:	4619      	mov	r1, r3
 80024ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024ee:	f002 fa61 	bl	80049b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, opcode, 1, TIMEOUT_SML);	// Write the read enable value
 80024f2:	2302      	movs	r3, #2
 80024f4:	2201      	movs	r2, #1
 80024f6:	68f9      	ldr	r1, [r7, #12]
 80024f8:	6838      	ldr	r0, [r7, #0]
 80024fa:	f004 fcb2 	bl	8006e62 <HAL_SPI_Transmit>

	// Transmit the 24 bit address of the page to initialise read from
	HAL_SPI_Transmit(hspi, &addrH, 1, TIMEOUT_SML);
 80024fe:	f107 0114 	add.w	r1, r7, #20
 8002502:	2302      	movs	r3, #2
 8002504:	2201      	movs	r2, #1
 8002506:	6838      	ldr	r0, [r7, #0]
 8002508:	f004 fcab 	bl	8006e62 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &addrM, 1, TIMEOUT_SML);
 800250c:	f107 0115 	add.w	r1, r7, #21
 8002510:	2302      	movs	r3, #2
 8002512:	2201      	movs	r2, #1
 8002514:	6838      	ldr	r0, [r7, #0]
 8002516:	f004 fca4 	bl	8006e62 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &addrL, 1, TIMEOUT_SML);
 800251a:	f107 0116 	add.w	r1, r7, #22
 800251e:	2302      	movs	r3, #2
 8002520:	2201      	movs	r2, #1
 8002522:	6838      	ldr	r0, [r7, #0]
 8002524:	f004 fc9d 	bl	8006e62 <HAL_SPI_Transmit>

	status = HAL_SPI_Receive(hspi, data_read, data_size, TIMEOUT_LRG);
 8002528:	897a      	ldrh	r2, [r7, #10]
 800252a:	2364      	movs	r3, #100	; 0x64
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	6838      	ldr	r0, [r7, #0]
 8002530:	f004 fdda 	bl	80070e8 <HAL_SPI_Receive>
 8002534:	4603      	mov	r3, r0
 8002536:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);
 8002538:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800253a:	2201      	movs	r2, #1
 800253c:	4619      	mov	r1, r3
 800253e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002540:	f002 fa38 	bl	80049b4 <HAL_GPIO_WritePin>

	return status;
 8002544:	7dfb      	ldrb	r3, [r7, #23]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <spi_write_data_dma>:
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);	// Set the chip select pin to high to remove the Flash from the SPI bus

	return status;
}

HAL_StatusTypeDef spi_write_data_dma(uint8_t* opcode, uint16_t data_size, uint8_t data_write[data_size], SPI_HandleTypeDef *hspi, uint32_t addr, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 800254e:	b580      	push	{r7, lr}
 8002550:	b086      	sub	sp, #24
 8002552:	af00      	add	r7, sp, #0
 8002554:	60f8      	str	r0, [r7, #12]
 8002556:	607a      	str	r2, [r7, #4]
 8002558:	603b      	str	r3, [r7, #0]
 800255a:	460b      	mov	r3, r1
 800255c:	817b      	strh	r3, [r7, #10]
    HAL_StatusTypeDef status;

    // Split the 24 bit address into three 8 bit ints
    uint8_t addrL = addr & 0xFF;  			// Get the low byte
 800255e:	6a3b      	ldr	r3, [r7, #32]
 8002560:	b2db      	uxtb	r3, r3
 8002562:	75bb      	strb	r3, [r7, #22]
    uint8_t addrM = (addr >> 8) & 0xFF;  	// Get the middle byte
 8002564:	6a3b      	ldr	r3, [r7, #32]
 8002566:	0a1b      	lsrs	r3, r3, #8
 8002568:	b2db      	uxtb	r3, r3
 800256a:	757b      	strb	r3, [r7, #21]
    uint8_t addrH = (addr >> 16) & 0xFF;  	// Get the high byte
 800256c:	6a3b      	ldr	r3, [r7, #32]
 800256e:	0c1b      	lsrs	r3, r3, #16
 8002570:	b2db      	uxtb	r3, r3
 8002572:	753b      	strb	r3, [r7, #20]

    // Send the PageWrite command
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);	// Set the chip select pin to low to initiate SPI comms
 8002574:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002576:	2200      	movs	r2, #0
 8002578:	4619      	mov	r1, r3
 800257a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800257c:	f002 fa1a 	bl	80049b4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(hspi, opcode, 1, TIMEOUT_SML);					// Write the write enable value to the Flash to initial writing
 8002580:	2302      	movs	r3, #2
 8002582:	2201      	movs	r2, #1
 8002584:	68f9      	ldr	r1, [r7, #12]
 8002586:	6838      	ldr	r0, [r7, #0]
 8002588:	f004 fc6b 	bl	8006e62 <HAL_SPI_Transmit>

    // Transmit the 24 bit address of the page to write to
    HAL_SPI_Transmit(hspi, &addrH, 1, TIMEOUT_SML);
 800258c:	f107 0114 	add.w	r1, r7, #20
 8002590:	2302      	movs	r3, #2
 8002592:	2201      	movs	r2, #1
 8002594:	6838      	ldr	r0, [r7, #0]
 8002596:	f004 fc64 	bl	8006e62 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hspi, &addrM, 1, TIMEOUT_SML);
 800259a:	f107 0115 	add.w	r1, r7, #21
 800259e:	2302      	movs	r3, #2
 80025a0:	2201      	movs	r2, #1
 80025a2:	6838      	ldr	r0, [r7, #0]
 80025a4:	f004 fc5d 	bl	8006e62 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hspi, &addrL, 1, TIMEOUT_SML);
 80025a8:	f107 0116 	add.w	r1, r7, #22
 80025ac:	2302      	movs	r3, #2
 80025ae:	2201      	movs	r2, #1
 80025b0:	6838      	ldr	r0, [r7, #0]
 80025b2:	f004 fc56 	bl	8006e62 <HAL_SPI_Transmit>

    // Start the DMA transfer
    status = HAL_SPI_Transmit_DMA(hspi, data_write, data_size);
 80025b6:	897b      	ldrh	r3, [r7, #10]
 80025b8:	461a      	mov	r2, r3
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	6838      	ldr	r0, [r7, #0]
 80025be:	f005 f85b 	bl	8007678 <HAL_SPI_Transmit_DMA>
 80025c2:	4603      	mov	r3, r0
 80025c4:	75fb      	strb	r3, [r7, #23]

    return status;
 80025c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025d6:	2300      	movs	r3, #0
 80025d8:	607b      	str	r3, [r7, #4]
 80025da:	4b10      	ldr	r3, [pc, #64]	; (800261c <HAL_MspInit+0x4c>)
 80025dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025de:	4a0f      	ldr	r2, [pc, #60]	; (800261c <HAL_MspInit+0x4c>)
 80025e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025e4:	6453      	str	r3, [r2, #68]	; 0x44
 80025e6:	4b0d      	ldr	r3, [pc, #52]	; (800261c <HAL_MspInit+0x4c>)
 80025e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ee:	607b      	str	r3, [r7, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025f2:	2300      	movs	r3, #0
 80025f4:	603b      	str	r3, [r7, #0]
 80025f6:	4b09      	ldr	r3, [pc, #36]	; (800261c <HAL_MspInit+0x4c>)
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	4a08      	ldr	r2, [pc, #32]	; (800261c <HAL_MspInit+0x4c>)
 80025fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002600:	6413      	str	r3, [r2, #64]	; 0x40
 8002602:	4b06      	ldr	r3, [pc, #24]	; (800261c <HAL_MspInit+0x4c>)
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260a:	603b      	str	r3, [r7, #0]
 800260c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	40023800 	.word	0x40023800

08002620 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b08a      	sub	sp, #40	; 0x28
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002628:	f107 0314 	add.w	r3, r7, #20
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	605a      	str	r2, [r3, #4]
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	60da      	str	r2, [r3, #12]
 8002636:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a24      	ldr	r2, [pc, #144]	; (80026d0 <HAL_CAN_MspInit+0xb0>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d141      	bne.n	80026c6 <HAL_CAN_MspInit+0xa6>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	4b23      	ldr	r3, [pc, #140]	; (80026d4 <HAL_CAN_MspInit+0xb4>)
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	4a22      	ldr	r2, [pc, #136]	; (80026d4 <HAL_CAN_MspInit+0xb4>)
 800264c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002650:	6413      	str	r3, [r2, #64]	; 0x40
 8002652:	4b20      	ldr	r3, [pc, #128]	; (80026d4 <HAL_CAN_MspInit+0xb4>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800265a:	613b      	str	r3, [r7, #16]
 800265c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 800265e:	2300      	movs	r3, #0
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	4b1c      	ldr	r3, [pc, #112]	; (80026d4 <HAL_CAN_MspInit+0xb4>)
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	4a1b      	ldr	r2, [pc, #108]	; (80026d4 <HAL_CAN_MspInit+0xb4>)
 8002668:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800266c:	6413      	str	r3, [r2, #64]	; 0x40
 800266e:	4b19      	ldr	r3, [pc, #100]	; (80026d4 <HAL_CAN_MspInit+0xb4>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800267a:	2300      	movs	r3, #0
 800267c:	60bb      	str	r3, [r7, #8]
 800267e:	4b15      	ldr	r3, [pc, #84]	; (80026d4 <HAL_CAN_MspInit+0xb4>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	4a14      	ldr	r2, [pc, #80]	; (80026d4 <HAL_CAN_MspInit+0xb4>)
 8002684:	f043 0302 	orr.w	r3, r3, #2
 8002688:	6313      	str	r3, [r2, #48]	; 0x30
 800268a:	4b12      	ldr	r3, [pc, #72]	; (80026d4 <HAL_CAN_MspInit+0xb4>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	60bb      	str	r3, [r7, #8]
 8002694:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB5     ------> CAN2_RX
    PB6     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002696:	2360      	movs	r3, #96	; 0x60
 8002698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269a:	2302      	movs	r3, #2
 800269c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a2:	2303      	movs	r3, #3
 80026a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80026a6:	2309      	movs	r3, #9
 80026a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026aa:	f107 0314 	add.w	r3, r7, #20
 80026ae:	4619      	mov	r1, r3
 80026b0:	4809      	ldr	r0, [pc, #36]	; (80026d8 <HAL_CAN_MspInit+0xb8>)
 80026b2:	f001 ffbb 	bl	800462c <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80026b6:	2200      	movs	r2, #0
 80026b8:	2100      	movs	r1, #0
 80026ba:	2040      	movs	r0, #64	; 0x40
 80026bc:	f001 fb7d 	bl	8003dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80026c0:	2040      	movs	r0, #64	; 0x40
 80026c2:	f001 fb96 	bl	8003df2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80026c6:	bf00      	nop
 80026c8:	3728      	adds	r7, #40	; 0x28
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40006800 	.word	0x40006800
 80026d4:	40023800 	.word	0x40023800
 80026d8:	40020400 	.word	0x40020400

080026dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08c      	sub	sp, #48	; 0x30
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e4:	f107 031c 	add.w	r3, r7, #28
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	605a      	str	r2, [r3, #4]
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	60da      	str	r2, [r3, #12]
 80026f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a33      	ldr	r2, [pc, #204]	; (80027c8 <HAL_I2C_MspInit+0xec>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d12d      	bne.n	800275a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	61bb      	str	r3, [r7, #24]
 8002702:	4b32      	ldr	r3, [pc, #200]	; (80027cc <HAL_I2C_MspInit+0xf0>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	4a31      	ldr	r2, [pc, #196]	; (80027cc <HAL_I2C_MspInit+0xf0>)
 8002708:	f043 0302 	orr.w	r3, r3, #2
 800270c:	6313      	str	r3, [r2, #48]	; 0x30
 800270e:	4b2f      	ldr	r3, [pc, #188]	; (80027cc <HAL_I2C_MspInit+0xf0>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	61bb      	str	r3, [r7, #24]
 8002718:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800271a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800271e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002720:	2312      	movs	r3, #18
 8002722:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002724:	2300      	movs	r3, #0
 8002726:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002728:	2303      	movs	r3, #3
 800272a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800272c:	2304      	movs	r3, #4
 800272e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002730:	f107 031c 	add.w	r3, r7, #28
 8002734:	4619      	mov	r1, r3
 8002736:	4826      	ldr	r0, [pc, #152]	; (80027d0 <HAL_I2C_MspInit+0xf4>)
 8002738:	f001 ff78 	bl	800462c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]
 8002740:	4b22      	ldr	r3, [pc, #136]	; (80027cc <HAL_I2C_MspInit+0xf0>)
 8002742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002744:	4a21      	ldr	r2, [pc, #132]	; (80027cc <HAL_I2C_MspInit+0xf0>)
 8002746:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800274a:	6413      	str	r3, [r2, #64]	; 0x40
 800274c:	4b1f      	ldr	r3, [pc, #124]	; (80027cc <HAL_I2C_MspInit+0xf0>)
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002754:	617b      	str	r3, [r7, #20]
 8002756:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002758:	e031      	b.n	80027be <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a1d      	ldr	r2, [pc, #116]	; (80027d4 <HAL_I2C_MspInit+0xf8>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d12c      	bne.n	80027be <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002764:	2300      	movs	r3, #0
 8002766:	613b      	str	r3, [r7, #16]
 8002768:	4b18      	ldr	r3, [pc, #96]	; (80027cc <HAL_I2C_MspInit+0xf0>)
 800276a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276c:	4a17      	ldr	r2, [pc, #92]	; (80027cc <HAL_I2C_MspInit+0xf0>)
 800276e:	f043 0302 	orr.w	r3, r3, #2
 8002772:	6313      	str	r3, [r2, #48]	; 0x30
 8002774:	4b15      	ldr	r3, [pc, #84]	; (80027cc <HAL_I2C_MspInit+0xf0>)
 8002776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002780:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002784:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002786:	2312      	movs	r3, #18
 8002788:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278a:	2300      	movs	r3, #0
 800278c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800278e:	2303      	movs	r3, #3
 8002790:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002792:	2304      	movs	r3, #4
 8002794:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002796:	f107 031c 	add.w	r3, r7, #28
 800279a:	4619      	mov	r1, r3
 800279c:	480c      	ldr	r0, [pc, #48]	; (80027d0 <HAL_I2C_MspInit+0xf4>)
 800279e:	f001 ff45 	bl	800462c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	4b09      	ldr	r3, [pc, #36]	; (80027cc <HAL_I2C_MspInit+0xf0>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	4a08      	ldr	r2, [pc, #32]	; (80027cc <HAL_I2C_MspInit+0xf0>)
 80027ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027b0:	6413      	str	r3, [r2, #64]	; 0x40
 80027b2:	4b06      	ldr	r3, [pc, #24]	; (80027cc <HAL_I2C_MspInit+0xf0>)
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	68fb      	ldr	r3, [r7, #12]
}
 80027be:	bf00      	nop
 80027c0:	3730      	adds	r7, #48	; 0x30
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40005400 	.word	0x40005400
 80027cc:	40023800 	.word	0x40023800
 80027d0:	40020400 	.word	0x40020400
 80027d4:	40005800 	.word	0x40005800

080027d8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08e      	sub	sp, #56	; 0x38
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027e0:	f107 0308 	add.w	r3, r7, #8
 80027e4:	2230      	movs	r2, #48	; 0x30
 80027e6:	2100      	movs	r1, #0
 80027e8:	4618      	mov	r0, r3
 80027ea:	f006 fd43 	bl	8009274 <memset>
  if(hrtc->Instance==RTC)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a0c      	ldr	r2, [pc, #48]	; (8002824 <HAL_RTC_MspInit+0x4c>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d111      	bne.n	800281c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80027f8:	2320      	movs	r3, #32
 80027fa:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80027fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002800:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002802:	f107 0308 	add.w	r3, r7, #8
 8002806:	4618      	mov	r0, r3
 8002808:	f003 fdd6 	bl	80063b8 <HAL_RCCEx_PeriphCLKConfig>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002812:	f7ff fa4f 	bl	8001cb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002816:	4b04      	ldr	r3, [pc, #16]	; (8002828 <HAL_RTC_MspInit+0x50>)
 8002818:	2201      	movs	r2, #1
 800281a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800281c:	bf00      	nop
 800281e:	3738      	adds	r7, #56	; 0x38
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40002800 	.word	0x40002800
 8002828:	42470e3c 	.word	0x42470e3c

0800282c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08c      	sub	sp, #48	; 0x30
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002834:	f107 031c 	add.w	r3, r7, #28
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	605a      	str	r2, [r3, #4]
 800283e:	609a      	str	r2, [r3, #8]
 8002840:	60da      	str	r2, [r3, #12]
 8002842:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a6f      	ldr	r2, [pc, #444]	; (8002a08 <HAL_SPI_MspInit+0x1dc>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d15b      	bne.n	8002906 <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	61bb      	str	r3, [r7, #24]
 8002852:	4b6e      	ldr	r3, [pc, #440]	; (8002a0c <HAL_SPI_MspInit+0x1e0>)
 8002854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002856:	4a6d      	ldr	r2, [pc, #436]	; (8002a0c <HAL_SPI_MspInit+0x1e0>)
 8002858:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800285c:	6453      	str	r3, [r2, #68]	; 0x44
 800285e:	4b6b      	ldr	r3, [pc, #428]	; (8002a0c <HAL_SPI_MspInit+0x1e0>)
 8002860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002862:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002866:	61bb      	str	r3, [r7, #24]
 8002868:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	617b      	str	r3, [r7, #20]
 800286e:	4b67      	ldr	r3, [pc, #412]	; (8002a0c <HAL_SPI_MspInit+0x1e0>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	4a66      	ldr	r2, [pc, #408]	; (8002a0c <HAL_SPI_MspInit+0x1e0>)
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	6313      	str	r3, [r2, #48]	; 0x30
 800287a:	4b64      	ldr	r3, [pc, #400]	; (8002a0c <HAL_SPI_MspInit+0x1e0>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	617b      	str	r3, [r7, #20]
 8002884:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002886:	23e0      	movs	r3, #224	; 0xe0
 8002888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288a:	2302      	movs	r3, #2
 800288c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288e:	2300      	movs	r3, #0
 8002890:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002892:	2303      	movs	r3, #3
 8002894:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002896:	2305      	movs	r3, #5
 8002898:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800289a:	f107 031c 	add.w	r3, r7, #28
 800289e:	4619      	mov	r1, r3
 80028a0:	485b      	ldr	r0, [pc, #364]	; (8002a10 <HAL_SPI_MspInit+0x1e4>)
 80028a2:	f001 fec3 	bl	800462c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80028a6:	4b5b      	ldr	r3, [pc, #364]	; (8002a14 <HAL_SPI_MspInit+0x1e8>)
 80028a8:	4a5b      	ldr	r2, [pc, #364]	; (8002a18 <HAL_SPI_MspInit+0x1ec>)
 80028aa:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80028ac:	4b59      	ldr	r3, [pc, #356]	; (8002a14 <HAL_SPI_MspInit+0x1e8>)
 80028ae:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80028b2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028b4:	4b57      	ldr	r3, [pc, #348]	; (8002a14 <HAL_SPI_MspInit+0x1e8>)
 80028b6:	2240      	movs	r2, #64	; 0x40
 80028b8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028ba:	4b56      	ldr	r3, [pc, #344]	; (8002a14 <HAL_SPI_MspInit+0x1e8>)
 80028bc:	2200      	movs	r2, #0
 80028be:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028c0:	4b54      	ldr	r3, [pc, #336]	; (8002a14 <HAL_SPI_MspInit+0x1e8>)
 80028c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028c6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028c8:	4b52      	ldr	r3, [pc, #328]	; (8002a14 <HAL_SPI_MspInit+0x1e8>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028ce:	4b51      	ldr	r3, [pc, #324]	; (8002a14 <HAL_SPI_MspInit+0x1e8>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80028d4:	4b4f      	ldr	r3, [pc, #316]	; (8002a14 <HAL_SPI_MspInit+0x1e8>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80028da:	4b4e      	ldr	r3, [pc, #312]	; (8002a14 <HAL_SPI_MspInit+0x1e8>)
 80028dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028e0:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028e2:	4b4c      	ldr	r3, [pc, #304]	; (8002a14 <HAL_SPI_MspInit+0x1e8>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80028e8:	484a      	ldr	r0, [pc, #296]	; (8002a14 <HAL_SPI_MspInit+0x1e8>)
 80028ea:	f001 fa9d 	bl	8003e28 <HAL_DMA_Init>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80028f4:	f7ff f9de 	bl	8001cb4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a46      	ldr	r2, [pc, #280]	; (8002a14 <HAL_SPI_MspInit+0x1e8>)
 80028fc:	649a      	str	r2, [r3, #72]	; 0x48
 80028fe:	4a45      	ldr	r2, [pc, #276]	; (8002a14 <HAL_SPI_MspInit+0x1e8>)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002904:	e07b      	b.n	80029fe <HAL_SPI_MspInit+0x1d2>
  else if(hspi->Instance==SPI2)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a44      	ldr	r2, [pc, #272]	; (8002a1c <HAL_SPI_MspInit+0x1f0>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d176      	bne.n	80029fe <HAL_SPI_MspInit+0x1d2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002910:	2300      	movs	r3, #0
 8002912:	613b      	str	r3, [r7, #16]
 8002914:	4b3d      	ldr	r3, [pc, #244]	; (8002a0c <HAL_SPI_MspInit+0x1e0>)
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	4a3c      	ldr	r2, [pc, #240]	; (8002a0c <HAL_SPI_MspInit+0x1e0>)
 800291a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800291e:	6413      	str	r3, [r2, #64]	; 0x40
 8002920:	4b3a      	ldr	r3, [pc, #232]	; (8002a0c <HAL_SPI_MspInit+0x1e0>)
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002928:	613b      	str	r3, [r7, #16]
 800292a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800292c:	2300      	movs	r3, #0
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	4b36      	ldr	r3, [pc, #216]	; (8002a0c <HAL_SPI_MspInit+0x1e0>)
 8002932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002934:	4a35      	ldr	r2, [pc, #212]	; (8002a0c <HAL_SPI_MspInit+0x1e0>)
 8002936:	f043 0304 	orr.w	r3, r3, #4
 800293a:	6313      	str	r3, [r2, #48]	; 0x30
 800293c:	4b33      	ldr	r3, [pc, #204]	; (8002a0c <HAL_SPI_MspInit+0x1e0>)
 800293e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	60fb      	str	r3, [r7, #12]
 8002946:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002948:	2300      	movs	r3, #0
 800294a:	60bb      	str	r3, [r7, #8]
 800294c:	4b2f      	ldr	r3, [pc, #188]	; (8002a0c <HAL_SPI_MspInit+0x1e0>)
 800294e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002950:	4a2e      	ldr	r2, [pc, #184]	; (8002a0c <HAL_SPI_MspInit+0x1e0>)
 8002952:	f043 0308 	orr.w	r3, r3, #8
 8002956:	6313      	str	r3, [r2, #48]	; 0x30
 8002958:	4b2c      	ldr	r3, [pc, #176]	; (8002a0c <HAL_SPI_MspInit+0x1e0>)
 800295a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295c:	f003 0308 	and.w	r3, r3, #8
 8002960:	60bb      	str	r3, [r7, #8]
 8002962:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002964:	230c      	movs	r3, #12
 8002966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002968:	2302      	movs	r3, #2
 800296a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296c:	2300      	movs	r3, #0
 800296e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002970:	2303      	movs	r3, #3
 8002972:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002974:	2305      	movs	r3, #5
 8002976:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002978:	f107 031c 	add.w	r3, r7, #28
 800297c:	4619      	mov	r1, r3
 800297e:	4828      	ldr	r0, [pc, #160]	; (8002a20 <HAL_SPI_MspInit+0x1f4>)
 8002980:	f001 fe54 	bl	800462c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002984:	2308      	movs	r3, #8
 8002986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002988:	2302      	movs	r3, #2
 800298a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298c:	2300      	movs	r3, #0
 800298e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002990:	2303      	movs	r3, #3
 8002992:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002994:	2305      	movs	r3, #5
 8002996:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002998:	f107 031c 	add.w	r3, r7, #28
 800299c:	4619      	mov	r1, r3
 800299e:	4821      	ldr	r0, [pc, #132]	; (8002a24 <HAL_SPI_MspInit+0x1f8>)
 80029a0:	f001 fe44 	bl	800462c <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80029a4:	4b20      	ldr	r3, [pc, #128]	; (8002a28 <HAL_SPI_MspInit+0x1fc>)
 80029a6:	4a21      	ldr	r2, [pc, #132]	; (8002a2c <HAL_SPI_MspInit+0x200>)
 80029a8:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80029aa:	4b1f      	ldr	r3, [pc, #124]	; (8002a28 <HAL_SPI_MspInit+0x1fc>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029b0:	4b1d      	ldr	r3, [pc, #116]	; (8002a28 <HAL_SPI_MspInit+0x1fc>)
 80029b2:	2240      	movs	r2, #64	; 0x40
 80029b4:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029b6:	4b1c      	ldr	r3, [pc, #112]	; (8002a28 <HAL_SPI_MspInit+0x1fc>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029bc:	4b1a      	ldr	r3, [pc, #104]	; (8002a28 <HAL_SPI_MspInit+0x1fc>)
 80029be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029c2:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029c4:	4b18      	ldr	r3, [pc, #96]	; (8002a28 <HAL_SPI_MspInit+0x1fc>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029ca:	4b17      	ldr	r3, [pc, #92]	; (8002a28 <HAL_SPI_MspInit+0x1fc>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80029d0:	4b15      	ldr	r3, [pc, #84]	; (8002a28 <HAL_SPI_MspInit+0x1fc>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029d6:	4b14      	ldr	r3, [pc, #80]	; (8002a28 <HAL_SPI_MspInit+0x1fc>)
 80029d8:	2200      	movs	r2, #0
 80029da:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029dc:	4b12      	ldr	r3, [pc, #72]	; (8002a28 <HAL_SPI_MspInit+0x1fc>)
 80029de:	2200      	movs	r2, #0
 80029e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80029e2:	4811      	ldr	r0, [pc, #68]	; (8002a28 <HAL_SPI_MspInit+0x1fc>)
 80029e4:	f001 fa20 	bl	8003e28 <HAL_DMA_Init>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <HAL_SPI_MspInit+0x1c6>
      Error_Handler();
 80029ee:	f7ff f961 	bl	8001cb4 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a0c      	ldr	r2, [pc, #48]	; (8002a28 <HAL_SPI_MspInit+0x1fc>)
 80029f6:	649a      	str	r2, [r3, #72]	; 0x48
 80029f8:	4a0b      	ldr	r2, [pc, #44]	; (8002a28 <HAL_SPI_MspInit+0x1fc>)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6393      	str	r3, [r2, #56]	; 0x38
}
 80029fe:	bf00      	nop
 8002a00:	3730      	adds	r7, #48	; 0x30
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40013000 	.word	0x40013000
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	40020000 	.word	0x40020000
 8002a14:	200001e8 	.word	0x200001e8
 8002a18:	40026458 	.word	0x40026458
 8002a1c:	40003800 	.word	0x40003800
 8002a20:	40020800 	.word	0x40020800
 8002a24:	40020c00 	.word	0x40020c00
 8002a28:	20000248 	.word	0x20000248
 8002a2c:	40026070 	.word	0x40026070

08002a30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a1c      	ldr	r2, [pc, #112]	; (8002ab0 <HAL_TIM_Base_MspInit+0x80>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d116      	bne.n	8002a70 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002a42:	2300      	movs	r3, #0
 8002a44:	60fb      	str	r3, [r7, #12]
 8002a46:	4b1b      	ldr	r3, [pc, #108]	; (8002ab4 <HAL_TIM_Base_MspInit+0x84>)
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	4a1a      	ldr	r2, [pc, #104]	; (8002ab4 <HAL_TIM_Base_MspInit+0x84>)
 8002a4c:	f043 0310 	orr.w	r3, r3, #16
 8002a50:	6413      	str	r3, [r2, #64]	; 0x40
 8002a52:	4b18      	ldr	r3, [pc, #96]	; (8002ab4 <HAL_TIM_Base_MspInit+0x84>)
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	f003 0310 	and.w	r3, r3, #16
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002a5e:	2200      	movs	r2, #0
 8002a60:	2100      	movs	r1, #0
 8002a62:	2036      	movs	r0, #54	; 0x36
 8002a64:	f001 f9a9 	bl	8003dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a68:	2036      	movs	r0, #54	; 0x36
 8002a6a:	f001 f9c2 	bl	8003df2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002a6e:	e01a      	b.n	8002aa6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a10      	ldr	r2, [pc, #64]	; (8002ab8 <HAL_TIM_Base_MspInit+0x88>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d115      	bne.n	8002aa6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60bb      	str	r3, [r7, #8]
 8002a7e:	4b0d      	ldr	r3, [pc, #52]	; (8002ab4 <HAL_TIM_Base_MspInit+0x84>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	4a0c      	ldr	r2, [pc, #48]	; (8002ab4 <HAL_TIM_Base_MspInit+0x84>)
 8002a84:	f043 0320 	orr.w	r3, r3, #32
 8002a88:	6413      	str	r3, [r2, #64]	; 0x40
 8002a8a:	4b0a      	ldr	r3, [pc, #40]	; (8002ab4 <HAL_TIM_Base_MspInit+0x84>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	f003 0320 	and.w	r3, r3, #32
 8002a92:	60bb      	str	r3, [r7, #8]
 8002a94:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002a96:	2200      	movs	r2, #0
 8002a98:	2100      	movs	r1, #0
 8002a9a:	2037      	movs	r0, #55	; 0x37
 8002a9c:	f001 f98d 	bl	8003dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002aa0:	2037      	movs	r0, #55	; 0x37
 8002aa2:	f001 f9a6 	bl	8003df2 <HAL_NVIC_EnableIRQ>
}
 8002aa6:	bf00      	nop
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	40001000 	.word	0x40001000
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	40001400 	.word	0x40001400

08002abc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08a      	sub	sp, #40	; 0x28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac4:	f107 0314 	add.w	r3, r7, #20
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	605a      	str	r2, [r3, #4]
 8002ace:	609a      	str	r2, [r3, #8]
 8002ad0:	60da      	str	r2, [r3, #12]
 8002ad2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a1d      	ldr	r2, [pc, #116]	; (8002b50 <HAL_UART_MspInit+0x94>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d133      	bne.n	8002b46 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	4b1c      	ldr	r3, [pc, #112]	; (8002b54 <HAL_UART_MspInit+0x98>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	4a1b      	ldr	r2, [pc, #108]	; (8002b54 <HAL_UART_MspInit+0x98>)
 8002ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aec:	6413      	str	r3, [r2, #64]	; 0x40
 8002aee:	4b19      	ldr	r3, [pc, #100]	; (8002b54 <HAL_UART_MspInit+0x98>)
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af6:	613b      	str	r3, [r7, #16]
 8002af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002afa:	2300      	movs	r3, #0
 8002afc:	60fb      	str	r3, [r7, #12]
 8002afe:	4b15      	ldr	r3, [pc, #84]	; (8002b54 <HAL_UART_MspInit+0x98>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	4a14      	ldr	r2, [pc, #80]	; (8002b54 <HAL_UART_MspInit+0x98>)
 8002b04:	f043 0308 	orr.w	r3, r3, #8
 8002b08:	6313      	str	r3, [r2, #48]	; 0x30
 8002b0a:	4b12      	ldr	r3, [pc, #72]	; (8002b54 <HAL_UART_MspInit+0x98>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002b16:	2360      	movs	r3, #96	; 0x60
 8002b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b22:	2303      	movs	r3, #3
 8002b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b26:	2307      	movs	r3, #7
 8002b28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b2a:	f107 0314 	add.w	r3, r7, #20
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4809      	ldr	r0, [pc, #36]	; (8002b58 <HAL_UART_MspInit+0x9c>)
 8002b32:	f001 fd7b 	bl	800462c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002b36:	2200      	movs	r2, #0
 8002b38:	2100      	movs	r1, #0
 8002b3a:	2026      	movs	r0, #38	; 0x26
 8002b3c:	f001 f93d 	bl	8003dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b40:	2026      	movs	r0, #38	; 0x26
 8002b42:	f001 f956 	bl	8003df2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b46:	bf00      	nop
 8002b48:	3728      	adds	r7, #40	; 0x28
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40004400 	.word	0x40004400
 8002b54:	40023800 	.word	0x40023800
 8002b58:	40020c00 	.word	0x40020c00

08002b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b60:	e7fe      	b.n	8002b60 <NMI_Handler+0x4>

08002b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b62:	b480      	push	{r7}
 8002b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b66:	e7fe      	b.n	8002b66 <HardFault_Handler+0x4>

08002b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b6c:	e7fe      	b.n	8002b6c <MemManage_Handler+0x4>

08002b6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b72:	e7fe      	b.n	8002b72 <BusFault_Handler+0x4>

08002b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b78:	e7fe      	b.n	8002b78 <UsageFault_Handler+0x4>

08002b7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b7e:	bf00      	nop
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b8c:	bf00      	nop
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b96:	b480      	push	{r7}
 8002b98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b9a:	bf00      	nop
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ba8:	f000 f980 	bl	8002eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bac:	bf00      	nop
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002bb4:	4802      	ldr	r0, [pc, #8]	; (8002bc0 <DMA1_Stream4_IRQHandler+0x10>)
 8002bb6:	f001 facf 	bl	8004158 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20000248 	.word	0x20000248

08002bc4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002bc8:	4802      	ldr	r0, [pc, #8]	; (8002bd4 <USART2_IRQHandler+0x10>)
 8002bca:	f005 fbfd 	bl	80083c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20000338 	.word	0x20000338

08002bd8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002bdc:	4803      	ldr	r0, [pc, #12]	; (8002bec <TIM6_DAC_IRQHandler+0x14>)
 8002bde:	f005 f895 	bl	8007d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  tim6_overflow_flag = FLAG_SET;
 8002be2:	4b03      	ldr	r3, [pc, #12]	; (8002bf0 <TIM6_DAC_IRQHandler+0x18>)
 8002be4:	2201      	movs	r2, #1
 8002be6:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002be8:	bf00      	nop
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	200002a8 	.word	0x200002a8
 8002bf0:	200003b5 	.word	0x200003b5

08002bf4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002bf8:	4803      	ldr	r0, [pc, #12]	; (8002c08 <TIM7_IRQHandler+0x14>)
 8002bfa:	f005 f887 	bl	8007d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  tim7_overflow_flag = FLAG_SET;
 8002bfe:	4b03      	ldr	r3, [pc, #12]	; (8002c0c <TIM7_IRQHandler+0x18>)
 8002c00:	2201      	movs	r2, #1
 8002c02:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM7_IRQn 1 */
}
 8002c04:	bf00      	nop
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	200002f0 	.word	0x200002f0
 8002c0c:	200003b6 	.word	0x200003b6

08002c10 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002c14:	4802      	ldr	r0, [pc, #8]	; (8002c20 <DMA2_Stream3_IRQHandler+0x10>)
 8002c16:	f001 fa9f 	bl	8004158 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	200001e8 	.word	0x200001e8

08002c24 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002c28:	4802      	ldr	r0, [pc, #8]	; (8002c34 <CAN2_RX0_IRQHandler+0x10>)
 8002c2a:	f000 fdbb 	bl	80037a4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	20000048 	.word	0x20000048

08002c38 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 1 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CAN_RxHeader, CAN_RxData);
 8002c40:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8002c42:	4a07      	ldr	r2, [pc, #28]	; (8002c60 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8002c44:	2100      	movs	r1, #0
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 fc64 	bl	8003514 <HAL_CAN_GetRxMessage>
	CAN_RX_Flag = FLAG_SET;
 8002c4c:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8002c4e:	2201      	movs	r2, #1
 8002c50:	701a      	strb	r2, [r3, #0]
}
 8002c52:	bf00      	nop
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	200003ac 	.word	0x200003ac
 8002c60:	20000390 	.word	0x20000390
 8002c64:	200003b4 	.word	0x200003b4

08002c68 <HAL_SPI_TxCpltCallback>:


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
	// Pull CS pin high to deselect the device
    if (hspi->Instance == SPI1) {
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a18      	ldr	r2, [pc, #96]	; (8002cd8 <HAL_SPI_TxCpltCallback+0x70>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d108      	bne.n	8002c8c <HAL_SPI_TxCpltCallback+0x24>
        // Pull CS pin high for SPI1 to deselect the device
    	HAL_GPIO_WritePin(cs_spi1.GPIOx, cs_spi1.GPIO_Pin, GPIO_PIN_SET);
 8002c7a:	4b18      	ldr	r3, [pc, #96]	; (8002cdc <HAL_SPI_TxCpltCallback+0x74>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a17      	ldr	r2, [pc, #92]	; (8002cdc <HAL_SPI_TxCpltCallback+0x74>)
 8002c80:	8891      	ldrh	r1, [r2, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	4618      	mov	r0, r3
 8002c86:	f001 fe95 	bl	80049b4 <HAL_GPIO_WritePin>
 8002c8a:	e00c      	b.n	8002ca6 <HAL_SPI_TxCpltCallback+0x3e>
    } else if (hspi->Instance == SPI2) {
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a13      	ldr	r2, [pc, #76]	; (8002ce0 <HAL_SPI_TxCpltCallback+0x78>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d107      	bne.n	8002ca6 <HAL_SPI_TxCpltCallback+0x3e>
        // Pull CS pin high for SPI2 to deselect the device
    	HAL_GPIO_WritePin(cs_spi2.GPIOx, cs_spi2.GPIO_Pin, GPIO_PIN_SET);
 8002c96:	4b13      	ldr	r3, [pc, #76]	; (8002ce4 <HAL_SPI_TxCpltCallback+0x7c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a12      	ldr	r2, [pc, #72]	; (8002ce4 <HAL_SPI_TxCpltCallback+0x7c>)
 8002c9c:	8891      	ldrh	r1, [r2, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f001 fe87 	bl	80049b4 <HAL_GPIO_WritePin>
    }

    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0202 	bic.w	r2, r2, #2
 8002cb4:	605a      	str	r2, [r3, #4]
    clean_data_buffer(PAGE_SIZE, data_buffer_tx[buffer_tracker ^ 0x01]);
 8002cb6:	4b0c      	ldr	r3, [pc, #48]	; (8002ce8 <HAL_SPI_TxCpltCallback+0x80>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	f083 0301 	eor.w	r3, r3, #1
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	021b      	lsls	r3, r3, #8
 8002cc2:	4a0a      	ldr	r2, [pc, #40]	; (8002cec <HAL_SPI_TxCpltCallback+0x84>)
 8002cc4:	4413      	add	r3, r2
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002ccc:	f7fe fc62 	bl	8001594 <clean_data_buffer>
}
 8002cd0:	bf00      	nop
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40013000 	.word	0x40013000
 8002cdc:	200005ec 	.word	0x200005ec
 8002ce0:	40003800 	.word	0x40003800
 8002ce4:	200005fc 	.word	0x200005fc
 8002ce8:	200005b8 	.word	0x200005b8
 8002cec:	200003b8 	.word	0x200003b8

08002cf0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
	uart2_rec_flag = FLAG_SET;
 8002cf8:	4b05      	ldr	r3, [pc, #20]	; (8002d10 <HAL_UART_RxCpltCallback+0x20>)
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, UARTRxData, 2);
 8002cfe:	2202      	movs	r2, #2
 8002d00:	4904      	ldr	r1, [pc, #16]	; (8002d14 <HAL_UART_RxCpltCallback+0x24>)
 8002d02:	4805      	ldr	r0, [pc, #20]	; (8002d18 <HAL_UART_RxCpltCallback+0x28>)
 8002d04:	f005 fb3b 	bl	800837e <HAL_UART_Receive_IT>
}
 8002d08:	bf00      	nop
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	2000038a 	.word	0x2000038a
 8002d14:	20000388 	.word	0x20000388
 8002d18:	20000338 	.word	0x20000338

08002d1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d20:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <SystemInit+0x20>)
 8002d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d26:	4a05      	ldr	r2, [pc, #20]	; (8002d3c <SystemInit+0x20>)
 8002d28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d30:	bf00      	nop
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	e000ed00 	.word	0xe000ed00

08002d40 <uart_transmit_page>:

#include "uart_transmit.h"
/**
 * Transmit one single page over the UART interface
 */
void uart_transmit_page(UART_HandleTypeDef *huart, uint8_t page[PAGE_SIZE]) {
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huart, page, PAGE_SIZE, HAL_MAX_DELAY);
 8002d4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d52:	6839      	ldr	r1, [r7, #0]
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f005 fa87 	bl	8008268 <HAL_UART_Transmit>
}
 8002d5a:	bf00      	nop
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <send_uart_string>:

void send_uart_string(UART_HandleTypeDef *huart, const char *str) {
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b082      	sub	sp, #8
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
 8002d6a:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8002d6c:	6838      	ldr	r0, [r7, #0]
 8002d6e:	f7fd fa3d 	bl	80001ec <strlen>
 8002d72:	4603      	mov	r3, r0
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d7a:	6839      	ldr	r1, [r7, #0]
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f005 fa73 	bl	8008268 <HAL_UART_Transmit>
}
 8002d82:	bf00      	nop
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <send_uart_hex>:
	// Call the send_uart_string function to send the value to UART
	send_uart_string(huart, value_str);
	send_uart_string(huart, "\r\n");
}

void send_uart_hex(UART_HandleTypeDef *huart, uint8_t value) {
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b084      	sub	sp, #16
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	460b      	mov	r3, r1
 8002d94:	70fb      	strb	r3, [r7, #3]
	uint8_t buffer[1];
	buffer[0] = value;
 8002d96:	78fb      	ldrb	r3, [r7, #3]
 8002d98:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(huart, buffer, 1, HAL_MAX_DELAY);
 8002d9a:	f107 010c 	add.w	r1, r7, #12
 8002d9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002da2:	2201      	movs	r2, #1
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f005 fa5f 	bl	8008268 <HAL_UART_Transmit>
}
 8002daa:	bf00      	nop
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
	...

08002db4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002db4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002dec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002db8:	f7ff ffb0 	bl	8002d1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002dbc:	480c      	ldr	r0, [pc, #48]	; (8002df0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002dbe:	490d      	ldr	r1, [pc, #52]	; (8002df4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002dc0:	4a0d      	ldr	r2, [pc, #52]	; (8002df8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dc4:	e002      	b.n	8002dcc <LoopCopyDataInit>

08002dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dca:	3304      	adds	r3, #4

08002dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dd0:	d3f9      	bcc.n	8002dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dd2:	4a0a      	ldr	r2, [pc, #40]	; (8002dfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002dd4:	4c0a      	ldr	r4, [pc, #40]	; (8002e00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dd8:	e001      	b.n	8002dde <LoopFillZerobss>

08002dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ddc:	3204      	adds	r2, #4

08002dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002de0:	d3fb      	bcc.n	8002dda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002de2:	f006 fa4f 	bl	8009284 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002de6:	f7fd ff9d 	bl	8000d24 <main>
  bx  lr    
 8002dea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002dec:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002df0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002df4:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8002df8:	080093ac 	.word	0x080093ac
  ldr r2, =_sbss
 8002dfc:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8002e00:	20000630 	.word	0x20000630

08002e04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e04:	e7fe      	b.n	8002e04 <ADC_IRQHandler>
	...

08002e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e0c:	4b0e      	ldr	r3, [pc, #56]	; (8002e48 <HAL_Init+0x40>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a0d      	ldr	r2, [pc, #52]	; (8002e48 <HAL_Init+0x40>)
 8002e12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e18:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <HAL_Init+0x40>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a0a      	ldr	r2, [pc, #40]	; (8002e48 <HAL_Init+0x40>)
 8002e1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e24:	4b08      	ldr	r3, [pc, #32]	; (8002e48 <HAL_Init+0x40>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a07      	ldr	r2, [pc, #28]	; (8002e48 <HAL_Init+0x40>)
 8002e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e30:	2003      	movs	r0, #3
 8002e32:	f000 ffb7 	bl	8003da4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e36:	200f      	movs	r0, #15
 8002e38:	f000 f808 	bl	8002e4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e3c:	f7ff fbc8 	bl	80025d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40023c00 	.word	0x40023c00

08002e4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e54:	4b12      	ldr	r3, [pc, #72]	; (8002ea0 <HAL_InitTick+0x54>)
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	4b12      	ldr	r3, [pc, #72]	; (8002ea4 <HAL_InitTick+0x58>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f000 ffcf 	bl	8003e0e <HAL_SYSTICK_Config>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e00e      	b.n	8002e98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2b0f      	cmp	r3, #15
 8002e7e:	d80a      	bhi.n	8002e96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e80:	2200      	movs	r2, #0
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e88:	f000 ff97 	bl	8003dba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e8c:	4a06      	ldr	r2, [pc, #24]	; (8002ea8 <HAL_InitTick+0x5c>)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
 8002e94:	e000      	b.n	8002e98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	2000001c 	.word	0x2000001c
 8002ea4:	20000024 	.word	0x20000024
 8002ea8:	20000020 	.word	0x20000020

08002eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002eb0:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <HAL_IncTick+0x20>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <HAL_IncTick+0x24>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4413      	add	r3, r2
 8002ebc:	4a04      	ldr	r2, [pc, #16]	; (8002ed0 <HAL_IncTick+0x24>)
 8002ebe:	6013      	str	r3, [r2, #0]
}
 8002ec0:	bf00      	nop
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	20000024 	.word	0x20000024
 8002ed0:	2000062c 	.word	0x2000062c

08002ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ed8:	4b03      	ldr	r3, [pc, #12]	; (8002ee8 <HAL_GetTick+0x14>)
 8002eda:	681b      	ldr	r3, [r3, #0]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	2000062c 	.word	0x2000062c

08002eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ef4:	f7ff ffee 	bl	8002ed4 <HAL_GetTick>
 8002ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f04:	d005      	beq.n	8002f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f06:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <HAL_Delay+0x44>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4413      	add	r3, r2
 8002f10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f12:	bf00      	nop
 8002f14:	f7ff ffde 	bl	8002ed4 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d8f7      	bhi.n	8002f14 <HAL_Delay+0x28>
  {
  }
}
 8002f24:	bf00      	nop
 8002f26:	bf00      	nop
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	20000024 	.word	0x20000024

08002f34 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e0ed      	b.n	8003122 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d102      	bne.n	8002f58 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7ff fb64 	bl	8002620 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0201 	orr.w	r2, r2, #1
 8002f66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f68:	f7ff ffb4 	bl	8002ed4 <HAL_GetTick>
 8002f6c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f6e:	e012      	b.n	8002f96 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f70:	f7ff ffb0 	bl	8002ed4 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b0a      	cmp	r3, #10
 8002f7c:	d90b      	bls.n	8002f96 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2205      	movs	r2, #5
 8002f8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e0c5      	b.n	8003122 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0e5      	beq.n	8002f70 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0202 	bic.w	r2, r2, #2
 8002fb2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fb4:	f7ff ff8e 	bl	8002ed4 <HAL_GetTick>
 8002fb8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002fba:	e012      	b.n	8002fe2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002fbc:	f7ff ff8a 	bl	8002ed4 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b0a      	cmp	r3, #10
 8002fc8:	d90b      	bls.n	8002fe2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2205      	movs	r2, #5
 8002fda:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e09f      	b.n	8003122 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1e5      	bne.n	8002fbc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	7e1b      	ldrb	r3, [r3, #24]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d108      	bne.n	800300a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	e007      	b.n	800301a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003018:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	7e5b      	ldrb	r3, [r3, #25]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d108      	bne.n	8003034 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	e007      	b.n	8003044 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003042:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	7e9b      	ldrb	r3, [r3, #26]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d108      	bne.n	800305e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 0220 	orr.w	r2, r2, #32
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	e007      	b.n	800306e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 0220 	bic.w	r2, r2, #32
 800306c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	7edb      	ldrb	r3, [r3, #27]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d108      	bne.n	8003088 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 0210 	bic.w	r2, r2, #16
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	e007      	b.n	8003098 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 0210 	orr.w	r2, r2, #16
 8003096:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	7f1b      	ldrb	r3, [r3, #28]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d108      	bne.n	80030b2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0208 	orr.w	r2, r2, #8
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	e007      	b.n	80030c2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 0208 	bic.w	r2, r2, #8
 80030c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	7f5b      	ldrb	r3, [r3, #29]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d108      	bne.n	80030dc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f042 0204 	orr.w	r2, r2, #4
 80030d8:	601a      	str	r2, [r3, #0]
 80030da:	e007      	b.n	80030ec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0204 	bic.w	r2, r2, #4
 80030ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	431a      	orrs	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	431a      	orrs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	ea42 0103 	orr.w	r1, r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	1e5a      	subs	r2, r3, #1
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
	...

0800312c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800312c:	b480      	push	{r7}
 800312e:	b087      	sub	sp, #28
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003142:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003144:	7cfb      	ldrb	r3, [r7, #19]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d003      	beq.n	8003152 <HAL_CAN_ConfigFilter+0x26>
 800314a:	7cfb      	ldrb	r3, [r7, #19]
 800314c:	2b02      	cmp	r3, #2
 800314e:	f040 80be 	bne.w	80032ce <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003152:	4b65      	ldr	r3, [pc, #404]	; (80032e8 <HAL_CAN_ConfigFilter+0x1bc>)
 8003154:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800315c:	f043 0201 	orr.w	r2, r3, #1
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800316c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	021b      	lsls	r3, r3, #8
 8003182:	431a      	orrs	r2, r3
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	f003 031f 	and.w	r3, r3, #31
 8003192:	2201      	movs	r2, #1
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	43db      	mvns	r3, r3
 80031a4:	401a      	ands	r2, r3
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	69db      	ldr	r3, [r3, #28]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d123      	bne.n	80031fc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	43db      	mvns	r3, r3
 80031be:	401a      	ands	r2, r3
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80031d6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	3248      	adds	r2, #72	; 0x48
 80031dc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031f0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031f2:	6979      	ldr	r1, [r7, #20]
 80031f4:	3348      	adds	r3, #72	; 0x48
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	440b      	add	r3, r1
 80031fa:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d122      	bne.n	800324a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	431a      	orrs	r2, r3
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003224:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	3248      	adds	r2, #72	; 0x48
 800322a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800323e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003240:	6979      	ldr	r1, [r7, #20]
 8003242:	3348      	adds	r3, #72	; 0x48
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	440b      	add	r3, r1
 8003248:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d109      	bne.n	8003266 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	43db      	mvns	r3, r3
 800325c:	401a      	ands	r2, r3
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003264:	e007      	b.n	8003276 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	431a      	orrs	r2, r3
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d109      	bne.n	8003292 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	43db      	mvns	r3, r3
 8003288:	401a      	ands	r2, r3
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003290:	e007      	b.n	80032a2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	431a      	orrs	r2, r3
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d107      	bne.n	80032ba <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	431a      	orrs	r2, r3
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80032c0:	f023 0201 	bic.w	r2, r3, #1
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80032ca:	2300      	movs	r3, #0
 80032cc:	e006      	b.n	80032dc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
  }
}
 80032dc:	4618      	mov	r0, r3
 80032de:	371c      	adds	r7, #28
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	40006400 	.word	0x40006400

080032ec <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d12e      	bne.n	800335e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 0201 	bic.w	r2, r2, #1
 8003316:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003318:	f7ff fddc 	bl	8002ed4 <HAL_GetTick>
 800331c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800331e:	e012      	b.n	8003346 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003320:	f7ff fdd8 	bl	8002ed4 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b0a      	cmp	r3, #10
 800332c:	d90b      	bls.n	8003346 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2205      	movs	r2, #5
 800333e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e012      	b.n	800336c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1e5      	bne.n	8003320 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800335a:	2300      	movs	r3, #0
 800335c:	e006      	b.n	800336c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003362:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
  }
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003374:	b480      	push	{r7}
 8003376:	b089      	sub	sp, #36	; 0x24
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
 8003380:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003388:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003392:	7ffb      	ldrb	r3, [r7, #31]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d003      	beq.n	80033a0 <HAL_CAN_AddTxMessage+0x2c>
 8003398:	7ffb      	ldrb	r3, [r7, #31]
 800339a:	2b02      	cmp	r3, #2
 800339c:	f040 80ad 	bne.w	80034fa <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10a      	bne.n	80033c0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d105      	bne.n	80033c0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f000 8095 	beq.w	80034ea <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	0e1b      	lsrs	r3, r3, #24
 80033c4:	f003 0303 	and.w	r3, r3, #3
 80033c8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80033ca:	2201      	movs	r2, #1
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	409a      	lsls	r2, r3
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10d      	bne.n	80033f8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80033e6:	68f9      	ldr	r1, [r7, #12]
 80033e8:	6809      	ldr	r1, [r1, #0]
 80033ea:	431a      	orrs	r2, r3
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	3318      	adds	r3, #24
 80033f0:	011b      	lsls	r3, r3, #4
 80033f2:	440b      	add	r3, r1
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	e00f      	b.n	8003418 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003402:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003408:	68f9      	ldr	r1, [r7, #12]
 800340a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800340c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	3318      	adds	r3, #24
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	440b      	add	r3, r1
 8003416:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6819      	ldr	r1, [r3, #0]
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	691a      	ldr	r2, [r3, #16]
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	3318      	adds	r3, #24
 8003424:	011b      	lsls	r3, r3, #4
 8003426:	440b      	add	r3, r1
 8003428:	3304      	adds	r3, #4
 800342a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	7d1b      	ldrb	r3, [r3, #20]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d111      	bne.n	8003458 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	3318      	adds	r3, #24
 800343c:	011b      	lsls	r3, r3, #4
 800343e:	4413      	add	r3, r2
 8003440:	3304      	adds	r3, #4
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	6811      	ldr	r1, [r2, #0]
 8003448:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	3318      	adds	r3, #24
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	440b      	add	r3, r1
 8003454:	3304      	adds	r3, #4
 8003456:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3307      	adds	r3, #7
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	061a      	lsls	r2, r3, #24
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3306      	adds	r3, #6
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	041b      	lsls	r3, r3, #16
 8003468:	431a      	orrs	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	3305      	adds	r3, #5
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	021b      	lsls	r3, r3, #8
 8003472:	4313      	orrs	r3, r2
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	3204      	adds	r2, #4
 8003478:	7812      	ldrb	r2, [r2, #0]
 800347a:	4610      	mov	r0, r2
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	6811      	ldr	r1, [r2, #0]
 8003480:	ea43 0200 	orr.w	r2, r3, r0
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	011b      	lsls	r3, r3, #4
 8003488:	440b      	add	r3, r1
 800348a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800348e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3303      	adds	r3, #3
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	061a      	lsls	r2, r3, #24
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3302      	adds	r3, #2
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	041b      	lsls	r3, r3, #16
 80034a0:	431a      	orrs	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	3301      	adds	r3, #1
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	021b      	lsls	r3, r3, #8
 80034aa:	4313      	orrs	r3, r2
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	7812      	ldrb	r2, [r2, #0]
 80034b0:	4610      	mov	r0, r2
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	6811      	ldr	r1, [r2, #0]
 80034b6:	ea43 0200 	orr.w	r2, r3, r0
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	011b      	lsls	r3, r3, #4
 80034be:	440b      	add	r3, r1
 80034c0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80034c4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	3318      	adds	r3, #24
 80034ce:	011b      	lsls	r3, r3, #4
 80034d0:	4413      	add	r3, r2
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	6811      	ldr	r1, [r2, #0]
 80034d8:	f043 0201 	orr.w	r2, r3, #1
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	3318      	adds	r3, #24
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	440b      	add	r3, r1
 80034e4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80034e6:	2300      	movs	r3, #0
 80034e8:	e00e      	b.n	8003508 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e006      	b.n	8003508 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
  }
}
 8003508:	4618      	mov	r0, r3
 800350a:	3724      	adds	r7, #36	; 0x24
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003514:	b480      	push	{r7}
 8003516:	b087      	sub	sp, #28
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
 8003520:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003528:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800352a:	7dfb      	ldrb	r3, [r7, #23]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d003      	beq.n	8003538 <HAL_CAN_GetRxMessage+0x24>
 8003530:	7dfb      	ldrb	r3, [r7, #23]
 8003532:	2b02      	cmp	r3, #2
 8003534:	f040 8103 	bne.w	800373e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10e      	bne.n	800355c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f003 0303 	and.w	r3, r3, #3
 8003548:	2b00      	cmp	r3, #0
 800354a:	d116      	bne.n	800357a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003550:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e0f7      	b.n	800374c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	f003 0303 	and.w	r3, r3, #3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d107      	bne.n	800357a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e0e8      	b.n	800374c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	331b      	adds	r3, #27
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	4413      	add	r3, r2
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0204 	and.w	r2, r3, #4
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10c      	bne.n	80035b2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	331b      	adds	r3, #27
 80035a0:	011b      	lsls	r3, r3, #4
 80035a2:	4413      	add	r3, r2
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	0d5b      	lsrs	r3, r3, #21
 80035a8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	e00b      	b.n	80035ca <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	331b      	adds	r3, #27
 80035ba:	011b      	lsls	r3, r3, #4
 80035bc:	4413      	add	r3, r2
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	08db      	lsrs	r3, r3, #3
 80035c2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	331b      	adds	r3, #27
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	4413      	add	r3, r2
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0202 	and.w	r2, r3, #2
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	331b      	adds	r3, #27
 80035e8:	011b      	lsls	r3, r3, #4
 80035ea:	4413      	add	r3, r2
 80035ec:	3304      	adds	r3, #4
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0308 	and.w	r3, r3, #8
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d003      	beq.n	8003600 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2208      	movs	r2, #8
 80035fc:	611a      	str	r2, [r3, #16]
 80035fe:	e00b      	b.n	8003618 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	331b      	adds	r3, #27
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	4413      	add	r3, r2
 800360c:	3304      	adds	r3, #4
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 020f 	and.w	r2, r3, #15
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	331b      	adds	r3, #27
 8003620:	011b      	lsls	r3, r3, #4
 8003622:	4413      	add	r3, r2
 8003624:	3304      	adds	r3, #4
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	0a1b      	lsrs	r3, r3, #8
 800362a:	b2da      	uxtb	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	331b      	adds	r3, #27
 8003638:	011b      	lsls	r3, r3, #4
 800363a:	4413      	add	r3, r2
 800363c:	3304      	adds	r3, #4
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	0c1b      	lsrs	r3, r3, #16
 8003642:	b29a      	uxth	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	4413      	add	r3, r2
 8003652:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	b2da      	uxtb	r2, r3
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	011b      	lsls	r3, r3, #4
 8003666:	4413      	add	r3, r2
 8003668:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	0a1a      	lsrs	r2, r3, #8
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	3301      	adds	r3, #1
 8003674:	b2d2      	uxtb	r2, r2
 8003676:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	011b      	lsls	r3, r3, #4
 8003680:	4413      	add	r3, r2
 8003682:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	0c1a      	lsrs	r2, r3, #16
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	3302      	adds	r3, #2
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	4413      	add	r3, r2
 800369c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	0e1a      	lsrs	r2, r3, #24
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	3303      	adds	r3, #3
 80036a8:	b2d2      	uxtb	r2, r2
 80036aa:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	011b      	lsls	r3, r3, #4
 80036b4:	4413      	add	r3, r2
 80036b6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	3304      	adds	r3, #4
 80036c0:	b2d2      	uxtb	r2, r2
 80036c2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	011b      	lsls	r3, r3, #4
 80036cc:	4413      	add	r3, r2
 80036ce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	0a1a      	lsrs	r2, r3, #8
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	3305      	adds	r3, #5
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	4413      	add	r3, r2
 80036e8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	0c1a      	lsrs	r2, r3, #16
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	3306      	adds	r3, #6
 80036f4:	b2d2      	uxtb	r2, r2
 80036f6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	011b      	lsls	r3, r3, #4
 8003700:	4413      	add	r3, r2
 8003702:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	0e1a      	lsrs	r2, r3, #24
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	3307      	adds	r3, #7
 800370e:	b2d2      	uxtb	r2, r2
 8003710:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d108      	bne.n	800372a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0220 	orr.w	r2, r2, #32
 8003726:	60da      	str	r2, [r3, #12]
 8003728:	e007      	b.n	800373a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	691a      	ldr	r2, [r3, #16]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f042 0220 	orr.w	r2, r2, #32
 8003738:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800373a:	2300      	movs	r3, #0
 800373c:	e006      	b.n	800374c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
  }
}
 800374c:	4618      	mov	r0, r3
 800374e:	371c      	adds	r7, #28
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003768:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800376a:	7bfb      	ldrb	r3, [r7, #15]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d002      	beq.n	8003776 <HAL_CAN_ActivateNotification+0x1e>
 8003770:	7bfb      	ldrb	r3, [r7, #15]
 8003772:	2b02      	cmp	r3, #2
 8003774:	d109      	bne.n	800378a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6959      	ldr	r1, [r3, #20]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	430a      	orrs	r2, r1
 8003784:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003786:	2300      	movs	r3, #0
 8003788:	e006      	b.n	8003798 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
  }
}
 8003798:	4618      	mov	r0, r3
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b08a      	sub	sp, #40	; 0x28
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80037ac:	2300      	movs	r3, #0
 80037ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80037e0:	6a3b      	ldr	r3, [r7, #32]
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d07c      	beq.n	80038e4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d023      	beq.n	800383c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2201      	movs	r2, #1
 80037fa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f983 	bl	8003b12 <HAL_CAN_TxMailbox0CompleteCallback>
 800380c:	e016      	b.n	800383c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	f003 0304 	and.w	r3, r3, #4
 8003814:	2b00      	cmp	r3, #0
 8003816:	d004      	beq.n	8003822 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800381e:	627b      	str	r3, [r7, #36]	; 0x24
 8003820:	e00c      	b.n	800383c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	f003 0308 	and.w	r3, r3, #8
 8003828:	2b00      	cmp	r3, #0
 800382a:	d004      	beq.n	8003836 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800382c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003832:	627b      	str	r3, [r7, #36]	; 0x24
 8003834:	e002      	b.n	800383c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f989 	bl	8003b4e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003842:	2b00      	cmp	r3, #0
 8003844:	d024      	beq.n	8003890 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800384e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f963 	bl	8003b26 <HAL_CAN_TxMailbox1CompleteCallback>
 8003860:	e016      	b.n	8003890 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003868:	2b00      	cmp	r3, #0
 800386a:	d004      	beq.n	8003876 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003872:	627b      	str	r3, [r7, #36]	; 0x24
 8003874:	e00c      	b.n	8003890 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800387c:	2b00      	cmp	r3, #0
 800387e:	d004      	beq.n	800388a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003882:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003886:	627b      	str	r3, [r7, #36]	; 0x24
 8003888:	e002      	b.n	8003890 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f969 	bl	8003b62 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d024      	beq.n	80038e4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80038a2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f943 	bl	8003b3a <HAL_CAN_TxMailbox2CompleteCallback>
 80038b4:	e016      	b.n	80038e4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d004      	beq.n	80038ca <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038c6:	627b      	str	r3, [r7, #36]	; 0x24
 80038c8:	e00c      	b.n	80038e4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d004      	beq.n	80038de <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80038d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038da:	627b      	str	r3, [r7, #36]	; 0x24
 80038dc:	e002      	b.n	80038e4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f949 	bl	8003b76 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00c      	beq.n	8003908 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f003 0310 	and.w	r3, r3, #16
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d007      	beq.n	8003908 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038fe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2210      	movs	r2, #16
 8003906:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003908:	6a3b      	ldr	r3, [r7, #32]
 800390a:	f003 0304 	and.w	r3, r3, #4
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00b      	beq.n	800392a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f003 0308 	and.w	r3, r3, #8
 8003918:	2b00      	cmp	r3, #0
 800391a:	d006      	beq.n	800392a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2208      	movs	r2, #8
 8003922:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 f930 	bl	8003b8a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800392a:	6a3b      	ldr	r3, [r7, #32]
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d009      	beq.n	8003948 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	f003 0303 	and.w	r3, r3, #3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d002      	beq.n	8003948 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7ff f978 	bl	8002c38 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003948:	6a3b      	ldr	r3, [r7, #32]
 800394a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00c      	beq.n	800396c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	f003 0310 	and.w	r3, r3, #16
 8003958:	2b00      	cmp	r3, #0
 800395a:	d007      	beq.n	800396c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003962:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2210      	movs	r2, #16
 800396a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800396c:	6a3b      	ldr	r3, [r7, #32]
 800396e:	f003 0320 	and.w	r3, r3, #32
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00b      	beq.n	800398e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	f003 0308 	and.w	r3, r3, #8
 800397c:	2b00      	cmp	r3, #0
 800397e:	d006      	beq.n	800398e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2208      	movs	r2, #8
 8003986:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 f912 	bl	8003bb2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800398e:	6a3b      	ldr	r3, [r7, #32]
 8003990:	f003 0310 	and.w	r3, r3, #16
 8003994:	2b00      	cmp	r3, #0
 8003996:	d009      	beq.n	80039ac <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	f003 0303 	and.w	r3, r3, #3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d002      	beq.n	80039ac <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f8f9 	bl	8003b9e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80039ac:	6a3b      	ldr	r3, [r7, #32]
 80039ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00b      	beq.n	80039ce <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	f003 0310 	and.w	r3, r3, #16
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d006      	beq.n	80039ce <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2210      	movs	r2, #16
 80039c6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 f8fc 	bl	8003bc6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80039ce:	6a3b      	ldr	r3, [r7, #32]
 80039d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00b      	beq.n	80039f0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d006      	beq.n	80039f0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2208      	movs	r2, #8
 80039e8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f8f5 	bl	8003bda <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80039f0:	6a3b      	ldr	r3, [r7, #32]
 80039f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d07b      	beq.n	8003af2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d072      	beq.n	8003aea <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003a04:	6a3b      	ldr	r3, [r7, #32]
 8003a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d008      	beq.n	8003a20 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1a:	f043 0301 	orr.w	r3, r3, #1
 8003a1e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003a20:	6a3b      	ldr	r3, [r7, #32]
 8003a22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d008      	beq.n	8003a3c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d003      	beq.n	8003a3c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a36:	f043 0302 	orr.w	r3, r3, #2
 8003a3a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a3c:	6a3b      	ldr	r3, [r7, #32]
 8003a3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d008      	beq.n	8003a58 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	f043 0304 	orr.w	r3, r3, #4
 8003a56:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a58:	6a3b      	ldr	r3, [r7, #32]
 8003a5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d043      	beq.n	8003aea <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d03e      	beq.n	8003aea <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a72:	2b60      	cmp	r3, #96	; 0x60
 8003a74:	d02b      	beq.n	8003ace <HAL_CAN_IRQHandler+0x32a>
 8003a76:	2b60      	cmp	r3, #96	; 0x60
 8003a78:	d82e      	bhi.n	8003ad8 <HAL_CAN_IRQHandler+0x334>
 8003a7a:	2b50      	cmp	r3, #80	; 0x50
 8003a7c:	d022      	beq.n	8003ac4 <HAL_CAN_IRQHandler+0x320>
 8003a7e:	2b50      	cmp	r3, #80	; 0x50
 8003a80:	d82a      	bhi.n	8003ad8 <HAL_CAN_IRQHandler+0x334>
 8003a82:	2b40      	cmp	r3, #64	; 0x40
 8003a84:	d019      	beq.n	8003aba <HAL_CAN_IRQHandler+0x316>
 8003a86:	2b40      	cmp	r3, #64	; 0x40
 8003a88:	d826      	bhi.n	8003ad8 <HAL_CAN_IRQHandler+0x334>
 8003a8a:	2b30      	cmp	r3, #48	; 0x30
 8003a8c:	d010      	beq.n	8003ab0 <HAL_CAN_IRQHandler+0x30c>
 8003a8e:	2b30      	cmp	r3, #48	; 0x30
 8003a90:	d822      	bhi.n	8003ad8 <HAL_CAN_IRQHandler+0x334>
 8003a92:	2b10      	cmp	r3, #16
 8003a94:	d002      	beq.n	8003a9c <HAL_CAN_IRQHandler+0x2f8>
 8003a96:	2b20      	cmp	r3, #32
 8003a98:	d005      	beq.n	8003aa6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003a9a:	e01d      	b.n	8003ad8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9e:	f043 0308 	orr.w	r3, r3, #8
 8003aa2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003aa4:	e019      	b.n	8003ada <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	f043 0310 	orr.w	r3, r3, #16
 8003aac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003aae:	e014      	b.n	8003ada <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab2:	f043 0320 	orr.w	r3, r3, #32
 8003ab6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ab8:	e00f      	b.n	8003ada <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ac0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ac2:	e00a      	b.n	8003ada <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003acc:	e005      	b.n	8003ada <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ad4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ad6:	e000      	b.n	8003ada <HAL_CAN_IRQHandler+0x336>
            break;
 8003ad8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	699a      	ldr	r2, [r3, #24]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003ae8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2204      	movs	r2, #4
 8003af0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d008      	beq.n	8003b0a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	431a      	orrs	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 f872 	bl	8003bee <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003b0a:	bf00      	nop
 8003b0c:	3728      	adds	r7, #40	; 0x28
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b12:	b480      	push	{r7}
 8003b14:	b083      	sub	sp, #12
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003b1a:	bf00      	nop
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b26:	b480      	push	{r7}
 8003b28:	b083      	sub	sp, #12
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003b2e:	bf00      	nop
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr

08003b3a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b083      	sub	sp, #12
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003b42:	bf00      	nop
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b083      	sub	sp, #12
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b083      	sub	sp, #12
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003b7e:	bf00      	nop
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b083      	sub	sp, #12
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003b92:	bf00      	nop
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b083      	sub	sp, #12
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b083      	sub	sp, #12
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003bba:	bf00      	nop
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr

08003bc6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b083      	sub	sp, #12
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003bce:	bf00      	nop
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b083      	sub	sp, #12
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003be2:	bf00      	nop
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b083      	sub	sp, #12
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
	...

08003c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f003 0307 	and.w	r3, r3, #7
 8003c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c14:	4b0c      	ldr	r3, [pc, #48]	; (8003c48 <__NVIC_SetPriorityGrouping+0x44>)
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c20:	4013      	ands	r3, r2
 8003c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c36:	4a04      	ldr	r2, [pc, #16]	; (8003c48 <__NVIC_SetPriorityGrouping+0x44>)
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	60d3      	str	r3, [r2, #12]
}
 8003c3c:	bf00      	nop
 8003c3e:	3714      	adds	r7, #20
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	e000ed00 	.word	0xe000ed00

08003c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c50:	4b04      	ldr	r3, [pc, #16]	; (8003c64 <__NVIC_GetPriorityGrouping+0x18>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	0a1b      	lsrs	r3, r3, #8
 8003c56:	f003 0307 	and.w	r3, r3, #7
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	e000ed00 	.word	0xe000ed00

08003c68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	4603      	mov	r3, r0
 8003c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	db0b      	blt.n	8003c92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c7a:	79fb      	ldrb	r3, [r7, #7]
 8003c7c:	f003 021f 	and.w	r2, r3, #31
 8003c80:	4907      	ldr	r1, [pc, #28]	; (8003ca0 <__NVIC_EnableIRQ+0x38>)
 8003c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c86:	095b      	lsrs	r3, r3, #5
 8003c88:	2001      	movs	r0, #1
 8003c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c92:	bf00      	nop
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	e000e100 	.word	0xe000e100

08003ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	4603      	mov	r3, r0
 8003cac:	6039      	str	r1, [r7, #0]
 8003cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	db0a      	blt.n	8003cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	490c      	ldr	r1, [pc, #48]	; (8003cf0 <__NVIC_SetPriority+0x4c>)
 8003cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc2:	0112      	lsls	r2, r2, #4
 8003cc4:	b2d2      	uxtb	r2, r2
 8003cc6:	440b      	add	r3, r1
 8003cc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ccc:	e00a      	b.n	8003ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	4908      	ldr	r1, [pc, #32]	; (8003cf4 <__NVIC_SetPriority+0x50>)
 8003cd4:	79fb      	ldrb	r3, [r7, #7]
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	3b04      	subs	r3, #4
 8003cdc:	0112      	lsls	r2, r2, #4
 8003cde:	b2d2      	uxtb	r2, r2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	761a      	strb	r2, [r3, #24]
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	e000e100 	.word	0xe000e100
 8003cf4:	e000ed00 	.word	0xe000ed00

08003cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b089      	sub	sp, #36	; 0x24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f003 0307 	and.w	r3, r3, #7
 8003d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	f1c3 0307 	rsb	r3, r3, #7
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	bf28      	it	cs
 8003d16:	2304      	movcs	r3, #4
 8003d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	3304      	adds	r3, #4
 8003d1e:	2b06      	cmp	r3, #6
 8003d20:	d902      	bls.n	8003d28 <NVIC_EncodePriority+0x30>
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	3b03      	subs	r3, #3
 8003d26:	e000      	b.n	8003d2a <NVIC_EncodePriority+0x32>
 8003d28:	2300      	movs	r3, #0
 8003d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	fa02 f303 	lsl.w	r3, r2, r3
 8003d36:	43da      	mvns	r2, r3
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	401a      	ands	r2, r3
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	fa01 f303 	lsl.w	r3, r1, r3
 8003d4a:	43d9      	mvns	r1, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d50:	4313      	orrs	r3, r2
         );
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3724      	adds	r7, #36	; 0x24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
	...

08003d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d70:	d301      	bcc.n	8003d76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d72:	2301      	movs	r3, #1
 8003d74:	e00f      	b.n	8003d96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d76:	4a0a      	ldr	r2, [pc, #40]	; (8003da0 <SysTick_Config+0x40>)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d7e:	210f      	movs	r1, #15
 8003d80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d84:	f7ff ff8e 	bl	8003ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d88:	4b05      	ldr	r3, [pc, #20]	; (8003da0 <SysTick_Config+0x40>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d8e:	4b04      	ldr	r3, [pc, #16]	; (8003da0 <SysTick_Config+0x40>)
 8003d90:	2207      	movs	r2, #7
 8003d92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	e000e010 	.word	0xe000e010

08003da4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7ff ff29 	bl	8003c04 <__NVIC_SetPriorityGrouping>
}
 8003db2:	bf00      	nop
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b086      	sub	sp, #24
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	60b9      	str	r1, [r7, #8]
 8003dc4:	607a      	str	r2, [r7, #4]
 8003dc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003dcc:	f7ff ff3e 	bl	8003c4c <__NVIC_GetPriorityGrouping>
 8003dd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	68b9      	ldr	r1, [r7, #8]
 8003dd6:	6978      	ldr	r0, [r7, #20]
 8003dd8:	f7ff ff8e 	bl	8003cf8 <NVIC_EncodePriority>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003de2:	4611      	mov	r1, r2
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7ff ff5d 	bl	8003ca4 <__NVIC_SetPriority>
}
 8003dea:	bf00      	nop
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b082      	sub	sp, #8
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	4603      	mov	r3, r0
 8003dfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7ff ff31 	bl	8003c68 <__NVIC_EnableIRQ>
}
 8003e06:	bf00      	nop
 8003e08:	3708      	adds	r7, #8
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b082      	sub	sp, #8
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f7ff ffa2 	bl	8003d60 <SysTick_Config>
 8003e1c:	4603      	mov	r3, r0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
	...

08003e28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e30:	2300      	movs	r3, #0
 8003e32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e34:	f7ff f84e 	bl	8002ed4 <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e099      	b.n	8003f78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2202      	movs	r2, #2
 8003e48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 0201 	bic.w	r2, r2, #1
 8003e62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e64:	e00f      	b.n	8003e86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e66:	f7ff f835 	bl	8002ed4 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b05      	cmp	r3, #5
 8003e72:	d908      	bls.n	8003e86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2220      	movs	r2, #32
 8003e78:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2203      	movs	r2, #3
 8003e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e078      	b.n	8003f78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1e8      	bne.n	8003e66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	4b38      	ldr	r3, [pc, #224]	; (8003f80 <HAL_DMA_Init+0x158>)
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003eb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ebe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003edc:	2b04      	cmp	r3, #4
 8003ede:	d107      	bne.n	8003ef0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	f023 0307 	bic.w	r3, r3, #7
 8003f06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f16:	2b04      	cmp	r3, #4
 8003f18:	d117      	bne.n	8003f4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00e      	beq.n	8003f4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 fb01 	bl	8004534 <DMA_CheckFifoParam>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d008      	beq.n	8003f4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2240      	movs	r2, #64	; 0x40
 8003f3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003f46:	2301      	movs	r3, #1
 8003f48:	e016      	b.n	8003f78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 fab8 	bl	80044c8 <DMA_CalcBaseAndBitshift>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f60:	223f      	movs	r2, #63	; 0x3f
 8003f62:	409a      	lsls	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3718      	adds	r7, #24
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	f010803f 	.word	0xf010803f

08003f84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
 8003f90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f92:	2300      	movs	r3, #0
 8003f94:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d101      	bne.n	8003faa <HAL_DMA_Start_IT+0x26>
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	e040      	b.n	800402c <HAL_DMA_Start_IT+0xa8>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d12f      	bne.n	800401e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	68b9      	ldr	r1, [r7, #8]
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f000 fa4a 	bl	800446c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fdc:	223f      	movs	r2, #63	; 0x3f
 8003fde:	409a      	lsls	r2, r3
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0216 	orr.w	r2, r2, #22
 8003ff2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d007      	beq.n	800400c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0208 	orr.w	r2, r2, #8
 800400a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f042 0201 	orr.w	r2, r2, #1
 800401a:	601a      	str	r2, [r3, #0]
 800401c:	e005      	b.n	800402a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004026:	2302      	movs	r3, #2
 8004028:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800402a:	7dfb      	ldrb	r3, [r7, #23]
}
 800402c:	4618      	mov	r0, r3
 800402e:	3718      	adds	r7, #24
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004040:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004042:	f7fe ff47 	bl	8002ed4 <HAL_GetTick>
 8004046:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d008      	beq.n	8004066 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2280      	movs	r2, #128	; 0x80
 8004058:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e052      	b.n	800410c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0216 	bic.w	r2, r2, #22
 8004074:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	695a      	ldr	r2, [r3, #20]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004084:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408a:	2b00      	cmp	r3, #0
 800408c:	d103      	bne.n	8004096 <HAL_DMA_Abort+0x62>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004092:	2b00      	cmp	r3, #0
 8004094:	d007      	beq.n	80040a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 0208 	bic.w	r2, r2, #8
 80040a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 0201 	bic.w	r2, r2, #1
 80040b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040b6:	e013      	b.n	80040e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040b8:	f7fe ff0c 	bl	8002ed4 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b05      	cmp	r3, #5
 80040c4:	d90c      	bls.n	80040e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2220      	movs	r2, #32
 80040ca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2203      	movs	r2, #3
 80040d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e015      	b.n	800410c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1e4      	bne.n	80040b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f2:	223f      	movs	r2, #63	; 0x3f
 80040f4:	409a      	lsls	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b02      	cmp	r3, #2
 8004126:	d004      	beq.n	8004132 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2280      	movs	r2, #128	; 0x80
 800412c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e00c      	b.n	800414c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2205      	movs	r2, #5
 8004136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 0201 	bic.w	r2, r2, #1
 8004148:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004160:	2300      	movs	r3, #0
 8004162:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004164:	4b8e      	ldr	r3, [pc, #568]	; (80043a0 <HAL_DMA_IRQHandler+0x248>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a8e      	ldr	r2, [pc, #568]	; (80043a4 <HAL_DMA_IRQHandler+0x24c>)
 800416a:	fba2 2303 	umull	r2, r3, r2, r3
 800416e:	0a9b      	lsrs	r3, r3, #10
 8004170:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004176:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004182:	2208      	movs	r2, #8
 8004184:	409a      	lsls	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	4013      	ands	r3, r2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d01a      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0304 	and.w	r3, r3, #4
 8004198:	2b00      	cmp	r3, #0
 800419a:	d013      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 0204 	bic.w	r2, r2, #4
 80041aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b0:	2208      	movs	r2, #8
 80041b2:	409a      	lsls	r2, r3
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041bc:	f043 0201 	orr.w	r2, r3, #1
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c8:	2201      	movs	r2, #1
 80041ca:	409a      	lsls	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	4013      	ands	r3, r2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d012      	beq.n	80041fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00b      	beq.n	80041fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e6:	2201      	movs	r2, #1
 80041e8:	409a      	lsls	r2, r3
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f2:	f043 0202 	orr.w	r2, r3, #2
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041fe:	2204      	movs	r2, #4
 8004200:	409a      	lsls	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4013      	ands	r3, r2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d012      	beq.n	8004230 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00b      	beq.n	8004230 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800421c:	2204      	movs	r2, #4
 800421e:	409a      	lsls	r2, r3
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004228:	f043 0204 	orr.w	r2, r3, #4
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004234:	2210      	movs	r2, #16
 8004236:	409a      	lsls	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	4013      	ands	r3, r2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d043      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0308 	and.w	r3, r3, #8
 800424a:	2b00      	cmp	r3, #0
 800424c:	d03c      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004252:	2210      	movs	r2, #16
 8004254:	409a      	lsls	r2, r3
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d018      	beq.n	800429a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d108      	bne.n	8004288 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	2b00      	cmp	r3, #0
 800427c:	d024      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	4798      	blx	r3
 8004286:	e01f      	b.n	80042c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800428c:	2b00      	cmp	r3, #0
 800428e:	d01b      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	4798      	blx	r3
 8004298:	e016      	b.n	80042c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d107      	bne.n	80042b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 0208 	bic.w	r2, r2, #8
 80042b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d003      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042cc:	2220      	movs	r2, #32
 80042ce:	409a      	lsls	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4013      	ands	r3, r2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f000 808f 	beq.w	80043f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0310 	and.w	r3, r3, #16
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 8087 	beq.w	80043f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ee:	2220      	movs	r2, #32
 80042f0:	409a      	lsls	r2, r3
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b05      	cmp	r3, #5
 8004300:	d136      	bne.n	8004370 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f022 0216 	bic.w	r2, r2, #22
 8004310:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	695a      	ldr	r2, [r3, #20]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004320:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	2b00      	cmp	r3, #0
 8004328:	d103      	bne.n	8004332 <HAL_DMA_IRQHandler+0x1da>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800432e:	2b00      	cmp	r3, #0
 8004330:	d007      	beq.n	8004342 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 0208 	bic.w	r2, r2, #8
 8004340:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004346:	223f      	movs	r2, #63	; 0x3f
 8004348:	409a      	lsls	r2, r3
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004362:	2b00      	cmp	r3, #0
 8004364:	d07e      	beq.n	8004464 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	4798      	blx	r3
        }
        return;
 800436e:	e079      	b.n	8004464 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d01d      	beq.n	80043ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10d      	bne.n	80043a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004390:	2b00      	cmp	r3, #0
 8004392:	d031      	beq.n	80043f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	4798      	blx	r3
 800439c:	e02c      	b.n	80043f8 <HAL_DMA_IRQHandler+0x2a0>
 800439e:	bf00      	nop
 80043a0:	2000001c 	.word	0x2000001c
 80043a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d023      	beq.n	80043f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	4798      	blx	r3
 80043b8:	e01e      	b.n	80043f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10f      	bne.n	80043e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 0210 	bic.w	r2, r2, #16
 80043d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d003      	beq.n	80043f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d032      	beq.n	8004466 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b00      	cmp	r3, #0
 800440a:	d022      	beq.n	8004452 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2205      	movs	r2, #5
 8004410:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 0201 	bic.w	r2, r2, #1
 8004422:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	3301      	adds	r3, #1
 8004428:	60bb      	str	r3, [r7, #8]
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	429a      	cmp	r2, r3
 800442e:	d307      	bcc.n	8004440 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1f2      	bne.n	8004424 <HAL_DMA_IRQHandler+0x2cc>
 800443e:	e000      	b.n	8004442 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004440:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004456:	2b00      	cmp	r3, #0
 8004458:	d005      	beq.n	8004466 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	4798      	blx	r3
 8004462:	e000      	b.n	8004466 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004464:	bf00      	nop
    }
  }
}
 8004466:	3718      	adds	r7, #24
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
 8004478:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004488:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	2b40      	cmp	r3, #64	; 0x40
 8004498:	d108      	bne.n	80044ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80044aa:	e007      	b.n	80044bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	60da      	str	r2, [r3, #12]
}
 80044bc:	bf00      	nop
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	3b10      	subs	r3, #16
 80044d8:	4a14      	ldr	r2, [pc, #80]	; (800452c <DMA_CalcBaseAndBitshift+0x64>)
 80044da:	fba2 2303 	umull	r2, r3, r2, r3
 80044de:	091b      	lsrs	r3, r3, #4
 80044e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80044e2:	4a13      	ldr	r2, [pc, #76]	; (8004530 <DMA_CalcBaseAndBitshift+0x68>)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	4413      	add	r3, r2
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	461a      	mov	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2b03      	cmp	r3, #3
 80044f4:	d909      	bls.n	800450a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80044fe:	f023 0303 	bic.w	r3, r3, #3
 8004502:	1d1a      	adds	r2, r3, #4
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	659a      	str	r2, [r3, #88]	; 0x58
 8004508:	e007      	b.n	800451a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004512:	f023 0303 	bic.w	r3, r3, #3
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800451e:	4618      	mov	r0, r3
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	aaaaaaab 	.word	0xaaaaaaab
 8004530:	08009394 	.word	0x08009394

08004534 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800453c:	2300      	movs	r3, #0
 800453e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004544:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d11f      	bne.n	800458e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	2b03      	cmp	r3, #3
 8004552:	d856      	bhi.n	8004602 <DMA_CheckFifoParam+0xce>
 8004554:	a201      	add	r2, pc, #4	; (adr r2, 800455c <DMA_CheckFifoParam+0x28>)
 8004556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455a:	bf00      	nop
 800455c:	0800456d 	.word	0x0800456d
 8004560:	0800457f 	.word	0x0800457f
 8004564:	0800456d 	.word	0x0800456d
 8004568:	08004603 	.word	0x08004603
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004570:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d046      	beq.n	8004606 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800457c:	e043      	b.n	8004606 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004582:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004586:	d140      	bne.n	800460a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800458c:	e03d      	b.n	800460a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004596:	d121      	bne.n	80045dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	2b03      	cmp	r3, #3
 800459c:	d837      	bhi.n	800460e <DMA_CheckFifoParam+0xda>
 800459e:	a201      	add	r2, pc, #4	; (adr r2, 80045a4 <DMA_CheckFifoParam+0x70>)
 80045a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a4:	080045b5 	.word	0x080045b5
 80045a8:	080045bb 	.word	0x080045bb
 80045ac:	080045b5 	.word	0x080045b5
 80045b0:	080045cd 	.word	0x080045cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	73fb      	strb	r3, [r7, #15]
      break;
 80045b8:	e030      	b.n	800461c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d025      	beq.n	8004612 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045ca:	e022      	b.n	8004612 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045d4:	d11f      	bne.n	8004616 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80045da:	e01c      	b.n	8004616 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d903      	bls.n	80045ea <DMA_CheckFifoParam+0xb6>
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	2b03      	cmp	r3, #3
 80045e6:	d003      	beq.n	80045f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80045e8:	e018      	b.n	800461c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	73fb      	strb	r3, [r7, #15]
      break;
 80045ee:	e015      	b.n	800461c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00e      	beq.n	800461a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004600:	e00b      	b.n	800461a <DMA_CheckFifoParam+0xe6>
      break;
 8004602:	bf00      	nop
 8004604:	e00a      	b.n	800461c <DMA_CheckFifoParam+0xe8>
      break;
 8004606:	bf00      	nop
 8004608:	e008      	b.n	800461c <DMA_CheckFifoParam+0xe8>
      break;
 800460a:	bf00      	nop
 800460c:	e006      	b.n	800461c <DMA_CheckFifoParam+0xe8>
      break;
 800460e:	bf00      	nop
 8004610:	e004      	b.n	800461c <DMA_CheckFifoParam+0xe8>
      break;
 8004612:	bf00      	nop
 8004614:	e002      	b.n	800461c <DMA_CheckFifoParam+0xe8>
      break;   
 8004616:	bf00      	nop
 8004618:	e000      	b.n	800461c <DMA_CheckFifoParam+0xe8>
      break;
 800461a:	bf00      	nop
    }
  } 
  
  return status; 
 800461c:	7bfb      	ldrb	r3, [r7, #15]
}
 800461e:	4618      	mov	r0, r3
 8004620:	3714      	adds	r7, #20
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop

0800462c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800462c:	b480      	push	{r7}
 800462e:	b089      	sub	sp, #36	; 0x24
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004636:	2300      	movs	r3, #0
 8004638:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800463a:	2300      	movs	r3, #0
 800463c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800463e:	2300      	movs	r3, #0
 8004640:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004642:	2300      	movs	r3, #0
 8004644:	61fb      	str	r3, [r7, #28]
 8004646:	e177      	b.n	8004938 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004648:	2201      	movs	r2, #1
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	fa02 f303 	lsl.w	r3, r2, r3
 8004650:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	4013      	ands	r3, r2
 800465a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	429a      	cmp	r2, r3
 8004662:	f040 8166 	bne.w	8004932 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f003 0303 	and.w	r3, r3, #3
 800466e:	2b01      	cmp	r3, #1
 8004670:	d005      	beq.n	800467e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800467a:	2b02      	cmp	r3, #2
 800467c:	d130      	bne.n	80046e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	005b      	lsls	r3, r3, #1
 8004688:	2203      	movs	r2, #3
 800468a:	fa02 f303 	lsl.w	r3, r2, r3
 800468e:	43db      	mvns	r3, r3
 8004690:	69ba      	ldr	r2, [r7, #24]
 8004692:	4013      	ands	r3, r2
 8004694:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	68da      	ldr	r2, [r3, #12]
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	fa02 f303 	lsl.w	r3, r2, r3
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046b4:	2201      	movs	r2, #1
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	fa02 f303 	lsl.w	r3, r2, r3
 80046bc:	43db      	mvns	r3, r3
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	4013      	ands	r3, r2
 80046c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	091b      	lsrs	r3, r3, #4
 80046ca:	f003 0201 	and.w	r2, r3, #1
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	fa02 f303 	lsl.w	r3, r2, r3
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f003 0303 	and.w	r3, r3, #3
 80046e8:	2b03      	cmp	r3, #3
 80046ea:	d017      	beq.n	800471c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	2203      	movs	r2, #3
 80046f8:	fa02 f303 	lsl.w	r3, r2, r3
 80046fc:	43db      	mvns	r3, r3
 80046fe:	69ba      	ldr	r2, [r7, #24]
 8004700:	4013      	ands	r3, r2
 8004702:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	fa02 f303 	lsl.w	r3, r2, r3
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	4313      	orrs	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f003 0303 	and.w	r3, r3, #3
 8004724:	2b02      	cmp	r3, #2
 8004726:	d123      	bne.n	8004770 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	08da      	lsrs	r2, r3, #3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	3208      	adds	r2, #8
 8004730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004734:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	f003 0307 	and.w	r3, r3, #7
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	220f      	movs	r2, #15
 8004740:	fa02 f303 	lsl.w	r3, r2, r3
 8004744:	43db      	mvns	r3, r3
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	4013      	ands	r3, r2
 800474a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	691a      	ldr	r2, [r3, #16]
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	f003 0307 	and.w	r3, r3, #7
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	fa02 f303 	lsl.w	r3, r2, r3
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	4313      	orrs	r3, r2
 8004760:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	08da      	lsrs	r2, r3, #3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	3208      	adds	r2, #8
 800476a:	69b9      	ldr	r1, [r7, #24]
 800476c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	005b      	lsls	r3, r3, #1
 800477a:	2203      	movs	r2, #3
 800477c:	fa02 f303 	lsl.w	r3, r2, r3
 8004780:	43db      	mvns	r3, r3
 8004782:	69ba      	ldr	r2, [r7, #24]
 8004784:	4013      	ands	r3, r2
 8004786:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f003 0203 	and.w	r2, r3, #3
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	005b      	lsls	r3, r3, #1
 8004794:	fa02 f303 	lsl.w	r3, r2, r3
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	4313      	orrs	r3, r2
 800479c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 80c0 	beq.w	8004932 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047b2:	2300      	movs	r3, #0
 80047b4:	60fb      	str	r3, [r7, #12]
 80047b6:	4b66      	ldr	r3, [pc, #408]	; (8004950 <HAL_GPIO_Init+0x324>)
 80047b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ba:	4a65      	ldr	r2, [pc, #404]	; (8004950 <HAL_GPIO_Init+0x324>)
 80047bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047c0:	6453      	str	r3, [r2, #68]	; 0x44
 80047c2:	4b63      	ldr	r3, [pc, #396]	; (8004950 <HAL_GPIO_Init+0x324>)
 80047c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047ca:	60fb      	str	r3, [r7, #12]
 80047cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047ce:	4a61      	ldr	r2, [pc, #388]	; (8004954 <HAL_GPIO_Init+0x328>)
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	089b      	lsrs	r3, r3, #2
 80047d4:	3302      	adds	r3, #2
 80047d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	f003 0303 	and.w	r3, r3, #3
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	220f      	movs	r2, #15
 80047e6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ea:	43db      	mvns	r3, r3
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	4013      	ands	r3, r2
 80047f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a58      	ldr	r2, [pc, #352]	; (8004958 <HAL_GPIO_Init+0x32c>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d037      	beq.n	800486a <HAL_GPIO_Init+0x23e>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a57      	ldr	r2, [pc, #348]	; (800495c <HAL_GPIO_Init+0x330>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d031      	beq.n	8004866 <HAL_GPIO_Init+0x23a>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a56      	ldr	r2, [pc, #344]	; (8004960 <HAL_GPIO_Init+0x334>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d02b      	beq.n	8004862 <HAL_GPIO_Init+0x236>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a55      	ldr	r2, [pc, #340]	; (8004964 <HAL_GPIO_Init+0x338>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d025      	beq.n	800485e <HAL_GPIO_Init+0x232>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a54      	ldr	r2, [pc, #336]	; (8004968 <HAL_GPIO_Init+0x33c>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d01f      	beq.n	800485a <HAL_GPIO_Init+0x22e>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a53      	ldr	r2, [pc, #332]	; (800496c <HAL_GPIO_Init+0x340>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d019      	beq.n	8004856 <HAL_GPIO_Init+0x22a>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a52      	ldr	r2, [pc, #328]	; (8004970 <HAL_GPIO_Init+0x344>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d013      	beq.n	8004852 <HAL_GPIO_Init+0x226>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a51      	ldr	r2, [pc, #324]	; (8004974 <HAL_GPIO_Init+0x348>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d00d      	beq.n	800484e <HAL_GPIO_Init+0x222>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a50      	ldr	r2, [pc, #320]	; (8004978 <HAL_GPIO_Init+0x34c>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d007      	beq.n	800484a <HAL_GPIO_Init+0x21e>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a4f      	ldr	r2, [pc, #316]	; (800497c <HAL_GPIO_Init+0x350>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d101      	bne.n	8004846 <HAL_GPIO_Init+0x21a>
 8004842:	2309      	movs	r3, #9
 8004844:	e012      	b.n	800486c <HAL_GPIO_Init+0x240>
 8004846:	230a      	movs	r3, #10
 8004848:	e010      	b.n	800486c <HAL_GPIO_Init+0x240>
 800484a:	2308      	movs	r3, #8
 800484c:	e00e      	b.n	800486c <HAL_GPIO_Init+0x240>
 800484e:	2307      	movs	r3, #7
 8004850:	e00c      	b.n	800486c <HAL_GPIO_Init+0x240>
 8004852:	2306      	movs	r3, #6
 8004854:	e00a      	b.n	800486c <HAL_GPIO_Init+0x240>
 8004856:	2305      	movs	r3, #5
 8004858:	e008      	b.n	800486c <HAL_GPIO_Init+0x240>
 800485a:	2304      	movs	r3, #4
 800485c:	e006      	b.n	800486c <HAL_GPIO_Init+0x240>
 800485e:	2303      	movs	r3, #3
 8004860:	e004      	b.n	800486c <HAL_GPIO_Init+0x240>
 8004862:	2302      	movs	r3, #2
 8004864:	e002      	b.n	800486c <HAL_GPIO_Init+0x240>
 8004866:	2301      	movs	r3, #1
 8004868:	e000      	b.n	800486c <HAL_GPIO_Init+0x240>
 800486a:	2300      	movs	r3, #0
 800486c:	69fa      	ldr	r2, [r7, #28]
 800486e:	f002 0203 	and.w	r2, r2, #3
 8004872:	0092      	lsls	r2, r2, #2
 8004874:	4093      	lsls	r3, r2
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	4313      	orrs	r3, r2
 800487a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800487c:	4935      	ldr	r1, [pc, #212]	; (8004954 <HAL_GPIO_Init+0x328>)
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	089b      	lsrs	r3, r3, #2
 8004882:	3302      	adds	r3, #2
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800488a:	4b3d      	ldr	r3, [pc, #244]	; (8004980 <HAL_GPIO_Init+0x354>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	43db      	mvns	r3, r3
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	4013      	ands	r3, r2
 8004898:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80048a6:	69ba      	ldr	r2, [r7, #24]
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80048ae:	4a34      	ldr	r2, [pc, #208]	; (8004980 <HAL_GPIO_Init+0x354>)
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048b4:	4b32      	ldr	r3, [pc, #200]	; (8004980 <HAL_GPIO_Init+0x354>)
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	43db      	mvns	r3, r3
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	4013      	ands	r3, r2
 80048c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d003      	beq.n	80048d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048d8:	4a29      	ldr	r2, [pc, #164]	; (8004980 <HAL_GPIO_Init+0x354>)
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80048de:	4b28      	ldr	r3, [pc, #160]	; (8004980 <HAL_GPIO_Init+0x354>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	43db      	mvns	r3, r3
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	4013      	ands	r3, r2
 80048ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80048fa:	69ba      	ldr	r2, [r7, #24]
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	4313      	orrs	r3, r2
 8004900:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004902:	4a1f      	ldr	r2, [pc, #124]	; (8004980 <HAL_GPIO_Init+0x354>)
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004908:	4b1d      	ldr	r3, [pc, #116]	; (8004980 <HAL_GPIO_Init+0x354>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	43db      	mvns	r3, r3
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	4013      	ands	r3, r2
 8004916:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d003      	beq.n	800492c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	4313      	orrs	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800492c:	4a14      	ldr	r2, [pc, #80]	; (8004980 <HAL_GPIO_Init+0x354>)
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	3301      	adds	r3, #1
 8004936:	61fb      	str	r3, [r7, #28]
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	2b0f      	cmp	r3, #15
 800493c:	f67f ae84 	bls.w	8004648 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004940:	bf00      	nop
 8004942:	bf00      	nop
 8004944:	3724      	adds	r7, #36	; 0x24
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	40023800 	.word	0x40023800
 8004954:	40013800 	.word	0x40013800
 8004958:	40020000 	.word	0x40020000
 800495c:	40020400 	.word	0x40020400
 8004960:	40020800 	.word	0x40020800
 8004964:	40020c00 	.word	0x40020c00
 8004968:	40021000 	.word	0x40021000
 800496c:	40021400 	.word	0x40021400
 8004970:	40021800 	.word	0x40021800
 8004974:	40021c00 	.word	0x40021c00
 8004978:	40022000 	.word	0x40022000
 800497c:	40022400 	.word	0x40022400
 8004980:	40013c00 	.word	0x40013c00

08004984 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	460b      	mov	r3, r1
 800498e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	691a      	ldr	r2, [r3, #16]
 8004994:	887b      	ldrh	r3, [r7, #2]
 8004996:	4013      	ands	r3, r2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d002      	beq.n	80049a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800499c:	2301      	movs	r3, #1
 800499e:	73fb      	strb	r3, [r7, #15]
 80049a0:	e001      	b.n	80049a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049a2:	2300      	movs	r3, #0
 80049a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80049a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3714      	adds	r7, #20
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	460b      	mov	r3, r1
 80049be:	807b      	strh	r3, [r7, #2]
 80049c0:	4613      	mov	r3, r2
 80049c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049c4:	787b      	ldrb	r3, [r7, #1]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049ca:	887a      	ldrh	r2, [r7, #2]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80049d0:	e003      	b.n	80049da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80049d2:	887b      	ldrh	r3, [r7, #2]
 80049d4:	041a      	lsls	r2, r3, #16
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	619a      	str	r2, [r3, #24]
}
 80049da:	bf00      	nop
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b085      	sub	sp, #20
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
 80049ee:	460b      	mov	r3, r1
 80049f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80049f8:	887a      	ldrh	r2, [r7, #2]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	4013      	ands	r3, r2
 80049fe:	041a      	lsls	r2, r3, #16
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	43d9      	mvns	r1, r3
 8004a04:	887b      	ldrh	r3, [r7, #2]
 8004a06:	400b      	ands	r3, r1
 8004a08:	431a      	orrs	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	619a      	str	r2, [r3, #24]
}
 8004a0e:	bf00      	nop
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
	...

08004a1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e12b      	b.n	8004c86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d106      	bne.n	8004a48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f7fd fe4a 	bl	80026dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2224      	movs	r2, #36	; 0x24
 8004a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f022 0201 	bic.w	r2, r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a80:	f001 fc72 	bl	8006368 <HAL_RCC_GetPCLK1Freq>
 8004a84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	4a81      	ldr	r2, [pc, #516]	; (8004c90 <HAL_I2C_Init+0x274>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d807      	bhi.n	8004aa0 <HAL_I2C_Init+0x84>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4a80      	ldr	r2, [pc, #512]	; (8004c94 <HAL_I2C_Init+0x278>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	bf94      	ite	ls
 8004a98:	2301      	movls	r3, #1
 8004a9a:	2300      	movhi	r3, #0
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	e006      	b.n	8004aae <HAL_I2C_Init+0x92>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4a7d      	ldr	r2, [pc, #500]	; (8004c98 <HAL_I2C_Init+0x27c>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	bf94      	ite	ls
 8004aa8:	2301      	movls	r3, #1
 8004aaa:	2300      	movhi	r3, #0
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d001      	beq.n	8004ab6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e0e7      	b.n	8004c86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	4a78      	ldr	r2, [pc, #480]	; (8004c9c <HAL_I2C_Init+0x280>)
 8004aba:	fba2 2303 	umull	r2, r3, r2, r3
 8004abe:	0c9b      	lsrs	r3, r3, #18
 8004ac0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6a1b      	ldr	r3, [r3, #32]
 8004adc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	4a6a      	ldr	r2, [pc, #424]	; (8004c90 <HAL_I2C_Init+0x274>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d802      	bhi.n	8004af0 <HAL_I2C_Init+0xd4>
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	3301      	adds	r3, #1
 8004aee:	e009      	b.n	8004b04 <HAL_I2C_Init+0xe8>
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004af6:	fb02 f303 	mul.w	r3, r2, r3
 8004afa:	4a69      	ldr	r2, [pc, #420]	; (8004ca0 <HAL_I2C_Init+0x284>)
 8004afc:	fba2 2303 	umull	r2, r3, r2, r3
 8004b00:	099b      	lsrs	r3, r3, #6
 8004b02:	3301      	adds	r3, #1
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	6812      	ldr	r2, [r2, #0]
 8004b08:	430b      	orrs	r3, r1
 8004b0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	495c      	ldr	r1, [pc, #368]	; (8004c90 <HAL_I2C_Init+0x274>)
 8004b20:	428b      	cmp	r3, r1
 8004b22:	d819      	bhi.n	8004b58 <HAL_I2C_Init+0x13c>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	1e59      	subs	r1, r3, #1
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	005b      	lsls	r3, r3, #1
 8004b2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b32:	1c59      	adds	r1, r3, #1
 8004b34:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004b38:	400b      	ands	r3, r1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00a      	beq.n	8004b54 <HAL_I2C_Init+0x138>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	1e59      	subs	r1, r3, #1
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b52:	e051      	b.n	8004bf8 <HAL_I2C_Init+0x1dc>
 8004b54:	2304      	movs	r3, #4
 8004b56:	e04f      	b.n	8004bf8 <HAL_I2C_Init+0x1dc>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d111      	bne.n	8004b84 <HAL_I2C_Init+0x168>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	1e58      	subs	r0, r3, #1
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6859      	ldr	r1, [r3, #4]
 8004b68:	460b      	mov	r3, r1
 8004b6a:	005b      	lsls	r3, r3, #1
 8004b6c:	440b      	add	r3, r1
 8004b6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b72:	3301      	adds	r3, #1
 8004b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	bf0c      	ite	eq
 8004b7c:	2301      	moveq	r3, #1
 8004b7e:	2300      	movne	r3, #0
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	e012      	b.n	8004baa <HAL_I2C_Init+0x18e>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	1e58      	subs	r0, r3, #1
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6859      	ldr	r1, [r3, #4]
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	440b      	add	r3, r1
 8004b92:	0099      	lsls	r1, r3, #2
 8004b94:	440b      	add	r3, r1
 8004b96:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	bf0c      	ite	eq
 8004ba4:	2301      	moveq	r3, #1
 8004ba6:	2300      	movne	r3, #0
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <HAL_I2C_Init+0x196>
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e022      	b.n	8004bf8 <HAL_I2C_Init+0x1dc>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10e      	bne.n	8004bd8 <HAL_I2C_Init+0x1bc>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	1e58      	subs	r0, r3, #1
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6859      	ldr	r1, [r3, #4]
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	005b      	lsls	r3, r3, #1
 8004bc6:	440b      	add	r3, r1
 8004bc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bcc:	3301      	adds	r3, #1
 8004bce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bd6:	e00f      	b.n	8004bf8 <HAL_I2C_Init+0x1dc>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	1e58      	subs	r0, r3, #1
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6859      	ldr	r1, [r3, #4]
 8004be0:	460b      	mov	r3, r1
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	440b      	add	r3, r1
 8004be6:	0099      	lsls	r1, r3, #2
 8004be8:	440b      	add	r3, r1
 8004bea:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bee:	3301      	adds	r3, #1
 8004bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bf8:	6879      	ldr	r1, [r7, #4]
 8004bfa:	6809      	ldr	r1, [r1, #0]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	69da      	ldr	r2, [r3, #28]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	431a      	orrs	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	6911      	ldr	r1, [r2, #16]
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	68d2      	ldr	r2, [r2, #12]
 8004c32:	4311      	orrs	r1, r2
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	6812      	ldr	r2, [r2, #0]
 8004c38:	430b      	orrs	r3, r1
 8004c3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	695a      	ldr	r2, [r3, #20]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	430a      	orrs	r2, r1
 8004c56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f042 0201 	orr.w	r2, r2, #1
 8004c66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2220      	movs	r2, #32
 8004c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	000186a0 	.word	0x000186a0
 8004c94:	001e847f 	.word	0x001e847f
 8004c98:	003d08ff 	.word	0x003d08ff
 8004c9c:	431bde83 	.word	0x431bde83
 8004ca0:	10624dd3 	.word	0x10624dd3

08004ca4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b088      	sub	sp, #32
 8004ca8:	af02      	add	r7, sp, #8
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	607a      	str	r2, [r7, #4]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	817b      	strh	r3, [r7, #10]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cb8:	f7fe f90c 	bl	8002ed4 <HAL_GetTick>
 8004cbc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b20      	cmp	r3, #32
 8004cc8:	f040 80e0 	bne.w	8004e8c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	9300      	str	r3, [sp, #0]
 8004cd0:	2319      	movs	r3, #25
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	4970      	ldr	r1, [pc, #448]	; (8004e98 <HAL_I2C_Master_Transmit+0x1f4>)
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f000 fc64 	bl	80055a4 <I2C_WaitOnFlagUntilTimeout>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	e0d3      	b.n	8004e8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d101      	bne.n	8004cf4 <HAL_I2C_Master_Transmit+0x50>
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	e0cc      	b.n	8004e8e <HAL_I2C_Master_Transmit+0x1ea>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d007      	beq.n	8004d1a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f042 0201 	orr.w	r2, r2, #1
 8004d18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d28:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2221      	movs	r2, #33	; 0x21
 8004d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2210      	movs	r2, #16
 8004d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	893a      	ldrh	r2, [r7, #8]
 8004d4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	4a50      	ldr	r2, [pc, #320]	; (8004e9c <HAL_I2C_Master_Transmit+0x1f8>)
 8004d5a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004d5c:	8979      	ldrh	r1, [r7, #10]
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	6a3a      	ldr	r2, [r7, #32]
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f000 face 	bl	8005304 <I2C_MasterRequestWrite>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d001      	beq.n	8004d72 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e08d      	b.n	8004e8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d72:	2300      	movs	r3, #0
 8004d74:	613b      	str	r3, [r7, #16]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	613b      	str	r3, [r7, #16]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	613b      	str	r3, [r7, #16]
 8004d86:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004d88:	e066      	b.n	8004e58 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	6a39      	ldr	r1, [r7, #32]
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f000 fd22 	bl	80057d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00d      	beq.n	8004db6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	d107      	bne.n	8004db2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004db0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e06b      	b.n	8004e8e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	781a      	ldrb	r2, [r3, #0]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	1c5a      	adds	r2, r3, #1
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dde:	3b01      	subs	r3, #1
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	2b04      	cmp	r3, #4
 8004df2:	d11b      	bne.n	8004e2c <HAL_I2C_Master_Transmit+0x188>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d017      	beq.n	8004e2c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e00:	781a      	ldrb	r2, [r3, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0c:	1c5a      	adds	r2, r3, #1
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e24:	3b01      	subs	r3, #1
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	6a39      	ldr	r1, [r7, #32]
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f000 fd19 	bl	8005868 <I2C_WaitOnBTFFlagUntilTimeout>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00d      	beq.n	8004e58 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e40:	2b04      	cmp	r3, #4
 8004e42:	d107      	bne.n	8004e54 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e52:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e01a      	b.n	8004e8e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d194      	bne.n	8004d8a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2220      	movs	r2, #32
 8004e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	e000      	b.n	8004e8e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004e8c:	2302      	movs	r3, #2
  }
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3718      	adds	r7, #24
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	00100002 	.word	0x00100002
 8004e9c:	ffff0000 	.word	0xffff0000

08004ea0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b08c      	sub	sp, #48	; 0x30
 8004ea4:	af02      	add	r7, sp, #8
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	607a      	str	r2, [r7, #4]
 8004eaa:	461a      	mov	r2, r3
 8004eac:	460b      	mov	r3, r1
 8004eae:	817b      	strh	r3, [r7, #10]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004eb4:	f7fe f80e 	bl	8002ed4 <HAL_GetTick>
 8004eb8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b20      	cmp	r3, #32
 8004ec4:	f040 8217 	bne.w	80052f6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	2319      	movs	r3, #25
 8004ece:	2201      	movs	r2, #1
 8004ed0:	497c      	ldr	r1, [pc, #496]	; (80050c4 <HAL_I2C_Master_Receive+0x224>)
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f000 fb66 	bl	80055a4 <I2C_WaitOnFlagUntilTimeout>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004ede:	2302      	movs	r3, #2
 8004ee0:	e20a      	b.n	80052f8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d101      	bne.n	8004ef0 <HAL_I2C_Master_Receive+0x50>
 8004eec:	2302      	movs	r3, #2
 8004eee:	e203      	b.n	80052f8 <HAL_I2C_Master_Receive+0x458>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d007      	beq.n	8004f16 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f042 0201 	orr.w	r2, r2, #1
 8004f14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2222      	movs	r2, #34	; 0x22
 8004f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2210      	movs	r2, #16
 8004f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	893a      	ldrh	r2, [r7, #8]
 8004f46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	4a5c      	ldr	r2, [pc, #368]	; (80050c8 <HAL_I2C_Master_Receive+0x228>)
 8004f56:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004f58:	8979      	ldrh	r1, [r7, #10]
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f000 fa52 	bl	8005408 <I2C_MasterRequestRead>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d001      	beq.n	8004f6e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e1c4      	b.n	80052f8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d113      	bne.n	8004f9e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f76:	2300      	movs	r3, #0
 8004f78:	623b      	str	r3, [r7, #32]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	623b      	str	r3, [r7, #32]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	623b      	str	r3, [r7, #32]
 8004f8a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f9a:	601a      	str	r2, [r3, #0]
 8004f9c:	e198      	b.n	80052d0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d11b      	bne.n	8004fde <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	61fb      	str	r3, [r7, #28]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	61fb      	str	r3, [r7, #28]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	61fb      	str	r3, [r7, #28]
 8004fca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	e178      	b.n	80052d0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d11b      	bne.n	800501e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ff4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005004:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005006:	2300      	movs	r3, #0
 8005008:	61bb      	str	r3, [r7, #24]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	61bb      	str	r3, [r7, #24]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	61bb      	str	r3, [r7, #24]
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	e158      	b.n	80052d0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800502c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800502e:	2300      	movs	r3, #0
 8005030:	617b      	str	r3, [r7, #20]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	617b      	str	r3, [r7, #20]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	617b      	str	r3, [r7, #20]
 8005042:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005044:	e144      	b.n	80052d0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800504a:	2b03      	cmp	r3, #3
 800504c:	f200 80f1 	bhi.w	8005232 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005054:	2b01      	cmp	r3, #1
 8005056:	d123      	bne.n	80050a0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800505a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f000 fc4b 	bl	80058f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e145      	b.n	80052f8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	691a      	ldr	r2, [r3, #16]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005076:	b2d2      	uxtb	r2, r2
 8005078:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	1c5a      	adds	r2, r3, #1
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005088:	3b01      	subs	r3, #1
 800508a:	b29a      	uxth	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005094:	b29b      	uxth	r3, r3
 8005096:	3b01      	subs	r3, #1
 8005098:	b29a      	uxth	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800509e:	e117      	b.n	80052d0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d14e      	bne.n	8005146 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ae:	2200      	movs	r2, #0
 80050b0:	4906      	ldr	r1, [pc, #24]	; (80050cc <HAL_I2C_Master_Receive+0x22c>)
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f000 fa76 	bl	80055a4 <I2C_WaitOnFlagUntilTimeout>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d008      	beq.n	80050d0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e11a      	b.n	80052f8 <HAL_I2C_Master_Receive+0x458>
 80050c2:	bf00      	nop
 80050c4:	00100002 	.word	0x00100002
 80050c8:	ffff0000 	.word	0xffff0000
 80050cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	691a      	ldr	r2, [r3, #16]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ea:	b2d2      	uxtb	r2, r2
 80050ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f2:	1c5a      	adds	r2, r3, #1
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050fc:	3b01      	subs	r3, #1
 80050fe:	b29a      	uxth	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005108:	b29b      	uxth	r3, r3
 800510a:	3b01      	subs	r3, #1
 800510c:	b29a      	uxth	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	691a      	ldr	r2, [r3, #16]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511c:	b2d2      	uxtb	r2, r2
 800511e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	1c5a      	adds	r2, r3, #1
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800512e:	3b01      	subs	r3, #1
 8005130:	b29a      	uxth	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800513a:	b29b      	uxth	r3, r3
 800513c:	3b01      	subs	r3, #1
 800513e:	b29a      	uxth	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005144:	e0c4      	b.n	80052d0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005148:	9300      	str	r3, [sp, #0]
 800514a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514c:	2200      	movs	r2, #0
 800514e:	496c      	ldr	r1, [pc, #432]	; (8005300 <HAL_I2C_Master_Receive+0x460>)
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f000 fa27 	bl	80055a4 <I2C_WaitOnFlagUntilTimeout>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d001      	beq.n	8005160 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e0cb      	b.n	80052f8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800516e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	691a      	ldr	r2, [r3, #16]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	b2d2      	uxtb	r2, r2
 800517c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005182:	1c5a      	adds	r2, r3, #1
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800518c:	3b01      	subs	r3, #1
 800518e:	b29a      	uxth	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005198:	b29b      	uxth	r3, r3
 800519a:	3b01      	subs	r3, #1
 800519c:	b29a      	uxth	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a4:	9300      	str	r3, [sp, #0]
 80051a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a8:	2200      	movs	r2, #0
 80051aa:	4955      	ldr	r1, [pc, #340]	; (8005300 <HAL_I2C_Master_Receive+0x460>)
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f000 f9f9 	bl	80055a4 <I2C_WaitOnFlagUntilTimeout>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d001      	beq.n	80051bc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e09d      	b.n	80052f8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	691a      	ldr	r2, [r3, #16]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d6:	b2d2      	uxtb	r2, r2
 80051d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051de:	1c5a      	adds	r2, r3, #1
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e8:	3b01      	subs	r3, #1
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	3b01      	subs	r3, #1
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	691a      	ldr	r2, [r3, #16]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	b2d2      	uxtb	r2, r2
 800520a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005210:	1c5a      	adds	r2, r3, #1
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800521a:	3b01      	subs	r3, #1
 800521c:	b29a      	uxth	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005226:	b29b      	uxth	r3, r3
 8005228:	3b01      	subs	r3, #1
 800522a:	b29a      	uxth	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005230:	e04e      	b.n	80052d0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005234:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f000 fb5e 	bl	80058f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d001      	beq.n	8005246 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e058      	b.n	80052f8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	691a      	ldr	r2, [r3, #16]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005250:	b2d2      	uxtb	r2, r2
 8005252:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005258:	1c5a      	adds	r2, r3, #1
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005262:	3b01      	subs	r3, #1
 8005264:	b29a      	uxth	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800526e:	b29b      	uxth	r3, r3
 8005270:	3b01      	subs	r3, #1
 8005272:	b29a      	uxth	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	f003 0304 	and.w	r3, r3, #4
 8005282:	2b04      	cmp	r3, #4
 8005284:	d124      	bne.n	80052d0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800528a:	2b03      	cmp	r3, #3
 800528c:	d107      	bne.n	800529e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800529c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	691a      	ldr	r2, [r3, #16]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a8:	b2d2      	uxtb	r2, r2
 80052aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b0:	1c5a      	adds	r2, r3, #1
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ba:	3b01      	subs	r3, #1
 80052bc:	b29a      	uxth	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	3b01      	subs	r3, #1
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f47f aeb6 	bne.w	8005046 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2220      	movs	r2, #32
 80052de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80052f2:	2300      	movs	r3, #0
 80052f4:	e000      	b.n	80052f8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80052f6:	2302      	movs	r3, #2
  }
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3728      	adds	r7, #40	; 0x28
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	00010004 	.word	0x00010004

08005304 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b088      	sub	sp, #32
 8005308:	af02      	add	r7, sp, #8
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	607a      	str	r2, [r7, #4]
 800530e:	603b      	str	r3, [r7, #0]
 8005310:	460b      	mov	r3, r1
 8005312:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005318:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	2b08      	cmp	r3, #8
 800531e:	d006      	beq.n	800532e <I2C_MasterRequestWrite+0x2a>
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d003      	beq.n	800532e <I2C_MasterRequestWrite+0x2a>
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800532c:	d108      	bne.n	8005340 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800533c:	601a      	str	r2, [r3, #0]
 800533e:	e00b      	b.n	8005358 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005344:	2b12      	cmp	r3, #18
 8005346:	d107      	bne.n	8005358 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005356:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	9300      	str	r3, [sp, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f000 f91d 	bl	80055a4 <I2C_WaitOnFlagUntilTimeout>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00d      	beq.n	800538c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800537a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800537e:	d103      	bne.n	8005388 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005386:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e035      	b.n	80053f8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005394:	d108      	bne.n	80053a8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005396:	897b      	ldrh	r3, [r7, #10]
 8005398:	b2db      	uxtb	r3, r3
 800539a:	461a      	mov	r2, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80053a4:	611a      	str	r2, [r3, #16]
 80053a6:	e01b      	b.n	80053e0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80053a8:	897b      	ldrh	r3, [r7, #10]
 80053aa:	11db      	asrs	r3, r3, #7
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	f003 0306 	and.w	r3, r3, #6
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	f063 030f 	orn	r3, r3, #15
 80053b8:	b2da      	uxtb	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	490e      	ldr	r1, [pc, #56]	; (8005400 <I2C_MasterRequestWrite+0xfc>)
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f000 f966 	bl	8005698 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d001      	beq.n	80053d6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e010      	b.n	80053f8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80053d6:	897b      	ldrh	r3, [r7, #10]
 80053d8:	b2da      	uxtb	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	4907      	ldr	r1, [pc, #28]	; (8005404 <I2C_MasterRequestWrite+0x100>)
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f000 f956 	bl	8005698 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d001      	beq.n	80053f6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e000      	b.n	80053f8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3718      	adds	r7, #24
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	00010008 	.word	0x00010008
 8005404:	00010002 	.word	0x00010002

08005408 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b088      	sub	sp, #32
 800540c:	af02      	add	r7, sp, #8
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	607a      	str	r2, [r7, #4]
 8005412:	603b      	str	r3, [r7, #0]
 8005414:	460b      	mov	r3, r1
 8005416:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800542c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	2b08      	cmp	r3, #8
 8005432:	d006      	beq.n	8005442 <I2C_MasterRequestRead+0x3a>
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	2b01      	cmp	r3, #1
 8005438:	d003      	beq.n	8005442 <I2C_MasterRequestRead+0x3a>
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005440:	d108      	bne.n	8005454 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005450:	601a      	str	r2, [r3, #0]
 8005452:	e00b      	b.n	800546c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005458:	2b11      	cmp	r3, #17
 800545a:	d107      	bne.n	800546c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800546a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	9300      	str	r3, [sp, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	f000 f893 	bl	80055a4 <I2C_WaitOnFlagUntilTimeout>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00d      	beq.n	80054a0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800548e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005492:	d103      	bne.n	800549c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f44f 7200 	mov.w	r2, #512	; 0x200
 800549a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e079      	b.n	8005594 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054a8:	d108      	bne.n	80054bc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80054aa:	897b      	ldrh	r3, [r7, #10]
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	f043 0301 	orr.w	r3, r3, #1
 80054b2:	b2da      	uxtb	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	611a      	str	r2, [r3, #16]
 80054ba:	e05f      	b.n	800557c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80054bc:	897b      	ldrh	r3, [r7, #10]
 80054be:	11db      	asrs	r3, r3, #7
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	f003 0306 	and.w	r3, r3, #6
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	f063 030f 	orn	r3, r3, #15
 80054cc:	b2da      	uxtb	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	4930      	ldr	r1, [pc, #192]	; (800559c <I2C_MasterRequestRead+0x194>)
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f000 f8dc 	bl	8005698 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e054      	b.n	8005594 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80054ea:	897b      	ldrh	r3, [r7, #10]
 80054ec:	b2da      	uxtb	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	4929      	ldr	r1, [pc, #164]	; (80055a0 <I2C_MasterRequestRead+0x198>)
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f000 f8cc 	bl	8005698 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d001      	beq.n	800550a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e044      	b.n	8005594 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800550a:	2300      	movs	r3, #0
 800550c:	613b      	str	r3, [r7, #16]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	613b      	str	r3, [r7, #16]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	613b      	str	r3, [r7, #16]
 800551e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800552e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	9300      	str	r3, [sp, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800553c:	68f8      	ldr	r0, [r7, #12]
 800553e:	f000 f831 	bl	80055a4 <I2C_WaitOnFlagUntilTimeout>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00d      	beq.n	8005564 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005556:	d103      	bne.n	8005560 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800555e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e017      	b.n	8005594 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005564:	897b      	ldrh	r3, [r7, #10]
 8005566:	11db      	asrs	r3, r3, #7
 8005568:	b2db      	uxtb	r3, r3
 800556a:	f003 0306 	and.w	r3, r3, #6
 800556e:	b2db      	uxtb	r3, r3
 8005570:	f063 030e 	orn	r3, r3, #14
 8005574:	b2da      	uxtb	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	4907      	ldr	r1, [pc, #28]	; (80055a0 <I2C_MasterRequestRead+0x198>)
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f000 f888 	bl	8005698 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e000      	b.n	8005594 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3718      	adds	r7, #24
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	00010008 	.word	0x00010008
 80055a0:	00010002 	.word	0x00010002

080055a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	603b      	str	r3, [r7, #0]
 80055b0:	4613      	mov	r3, r2
 80055b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055b4:	e048      	b.n	8005648 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055bc:	d044      	beq.n	8005648 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055be:	f7fd fc89 	bl	8002ed4 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	683a      	ldr	r2, [r7, #0]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d302      	bcc.n	80055d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d139      	bne.n	8005648 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	0c1b      	lsrs	r3, r3, #16
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d10d      	bne.n	80055fa <I2C_WaitOnFlagUntilTimeout+0x56>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	43da      	mvns	r2, r3
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	4013      	ands	r3, r2
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	bf0c      	ite	eq
 80055f0:	2301      	moveq	r3, #1
 80055f2:	2300      	movne	r3, #0
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	461a      	mov	r2, r3
 80055f8:	e00c      	b.n	8005614 <I2C_WaitOnFlagUntilTimeout+0x70>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	43da      	mvns	r2, r3
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	4013      	ands	r3, r2
 8005606:	b29b      	uxth	r3, r3
 8005608:	2b00      	cmp	r3, #0
 800560a:	bf0c      	ite	eq
 800560c:	2301      	moveq	r3, #1
 800560e:	2300      	movne	r3, #0
 8005610:	b2db      	uxtb	r3, r3
 8005612:	461a      	mov	r2, r3
 8005614:	79fb      	ldrb	r3, [r7, #7]
 8005616:	429a      	cmp	r2, r3
 8005618:	d116      	bne.n	8005648 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2220      	movs	r2, #32
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005634:	f043 0220 	orr.w	r2, r3, #32
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e023      	b.n	8005690 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	0c1b      	lsrs	r3, r3, #16
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b01      	cmp	r3, #1
 8005650:	d10d      	bne.n	800566e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	695b      	ldr	r3, [r3, #20]
 8005658:	43da      	mvns	r2, r3
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	4013      	ands	r3, r2
 800565e:	b29b      	uxth	r3, r3
 8005660:	2b00      	cmp	r3, #0
 8005662:	bf0c      	ite	eq
 8005664:	2301      	moveq	r3, #1
 8005666:	2300      	movne	r3, #0
 8005668:	b2db      	uxtb	r3, r3
 800566a:	461a      	mov	r2, r3
 800566c:	e00c      	b.n	8005688 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	43da      	mvns	r2, r3
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	4013      	ands	r3, r2
 800567a:	b29b      	uxth	r3, r3
 800567c:	2b00      	cmp	r3, #0
 800567e:	bf0c      	ite	eq
 8005680:	2301      	moveq	r3, #1
 8005682:	2300      	movne	r3, #0
 8005684:	b2db      	uxtb	r3, r3
 8005686:	461a      	mov	r2, r3
 8005688:	79fb      	ldrb	r3, [r7, #7]
 800568a:	429a      	cmp	r2, r3
 800568c:	d093      	beq.n	80055b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3710      	adds	r7, #16
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
 80056a4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056a6:	e071      	b.n	800578c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056b6:	d123      	bne.n	8005700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056c6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2220      	movs	r2, #32
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ec:	f043 0204 	orr.w	r2, r3, #4
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e067      	b.n	80057d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005706:	d041      	beq.n	800578c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005708:	f7fd fbe4 	bl	8002ed4 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	429a      	cmp	r2, r3
 8005716:	d302      	bcc.n	800571e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d136      	bne.n	800578c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	0c1b      	lsrs	r3, r3, #16
 8005722:	b2db      	uxtb	r3, r3
 8005724:	2b01      	cmp	r3, #1
 8005726:	d10c      	bne.n	8005742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	43da      	mvns	r2, r3
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	4013      	ands	r3, r2
 8005734:	b29b      	uxth	r3, r3
 8005736:	2b00      	cmp	r3, #0
 8005738:	bf14      	ite	ne
 800573a:	2301      	movne	r3, #1
 800573c:	2300      	moveq	r3, #0
 800573e:	b2db      	uxtb	r3, r3
 8005740:	e00b      	b.n	800575a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	699b      	ldr	r3, [r3, #24]
 8005748:	43da      	mvns	r2, r3
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	4013      	ands	r3, r2
 800574e:	b29b      	uxth	r3, r3
 8005750:	2b00      	cmp	r3, #0
 8005752:	bf14      	ite	ne
 8005754:	2301      	movne	r3, #1
 8005756:	2300      	moveq	r3, #0
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d016      	beq.n	800578c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2220      	movs	r2, #32
 8005768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005778:	f043 0220 	orr.w	r2, r3, #32
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e021      	b.n	80057d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	0c1b      	lsrs	r3, r3, #16
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b01      	cmp	r3, #1
 8005794:	d10c      	bne.n	80057b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	695b      	ldr	r3, [r3, #20]
 800579c:	43da      	mvns	r2, r3
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	4013      	ands	r3, r2
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	bf14      	ite	ne
 80057a8:	2301      	movne	r3, #1
 80057aa:	2300      	moveq	r3, #0
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	e00b      	b.n	80057c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	43da      	mvns	r2, r3
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	4013      	ands	r3, r2
 80057bc:	b29b      	uxth	r3, r3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	bf14      	ite	ne
 80057c2:	2301      	movne	r3, #1
 80057c4:	2300      	moveq	r3, #0
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f47f af6d 	bne.w	80056a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3710      	adds	r7, #16
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057e4:	e034      	b.n	8005850 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f000 f8e3 	bl	80059b2 <I2C_IsAcknowledgeFailed>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d001      	beq.n	80057f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e034      	b.n	8005860 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057fc:	d028      	beq.n	8005850 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057fe:	f7fd fb69 	bl	8002ed4 <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	429a      	cmp	r2, r3
 800580c:	d302      	bcc.n	8005814 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d11d      	bne.n	8005850 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800581e:	2b80      	cmp	r3, #128	; 0x80
 8005820:	d016      	beq.n	8005850 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2220      	movs	r2, #32
 800582c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583c:	f043 0220 	orr.w	r2, r3, #32
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e007      	b.n	8005860 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800585a:	2b80      	cmp	r3, #128	; 0x80
 800585c:	d1c3      	bne.n	80057e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005874:	e034      	b.n	80058e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f000 f89b 	bl	80059b2 <I2C_IsAcknowledgeFailed>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d001      	beq.n	8005886 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e034      	b.n	80058f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800588c:	d028      	beq.n	80058e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800588e:	f7fd fb21 	bl	8002ed4 <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	68ba      	ldr	r2, [r7, #8]
 800589a:	429a      	cmp	r2, r3
 800589c:	d302      	bcc.n	80058a4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d11d      	bne.n	80058e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	f003 0304 	and.w	r3, r3, #4
 80058ae:	2b04      	cmp	r3, #4
 80058b0:	d016      	beq.n	80058e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2220      	movs	r2, #32
 80058bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058cc:	f043 0220 	orr.w	r2, r3, #32
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e007      	b.n	80058f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	f003 0304 	and.w	r3, r3, #4
 80058ea:	2b04      	cmp	r3, #4
 80058ec:	d1c3      	bne.n	8005876 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005904:	e049      	b.n	800599a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	695b      	ldr	r3, [r3, #20]
 800590c:	f003 0310 	and.w	r3, r3, #16
 8005910:	2b10      	cmp	r3, #16
 8005912:	d119      	bne.n	8005948 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f06f 0210 	mvn.w	r2, #16
 800591c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2220      	movs	r2, #32
 8005928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e030      	b.n	80059aa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005948:	f7fd fac4 	bl	8002ed4 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	68ba      	ldr	r2, [r7, #8]
 8005954:	429a      	cmp	r2, r3
 8005956:	d302      	bcc.n	800595e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d11d      	bne.n	800599a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005968:	2b40      	cmp	r3, #64	; 0x40
 800596a:	d016      	beq.n	800599a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2220      	movs	r2, #32
 8005976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005986:	f043 0220 	orr.w	r2, r3, #32
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e007      	b.n	80059aa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	695b      	ldr	r3, [r3, #20]
 80059a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a4:	2b40      	cmp	r3, #64	; 0x40
 80059a6:	d1ae      	bne.n	8005906 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b083      	sub	sp, #12
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	695b      	ldr	r3, [r3, #20]
 80059c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059c8:	d11b      	bne.n	8005a02 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059d2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2220      	movs	r2, #32
 80059de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ee:	f043 0204 	orr.w	r2, r3, #4
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e000      	b.n	8005a04 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b20      	cmp	r3, #32
 8005a24:	d129      	bne.n	8005a7a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2224      	movs	r2, #36	; 0x24
 8005a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f022 0201 	bic.w	r2, r2, #1
 8005a3c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f022 0210 	bic.w	r2, r2, #16
 8005a4c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	683a      	ldr	r2, [r7, #0]
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f042 0201 	orr.w	r2, r2, #1
 8005a6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2220      	movs	r2, #32
 8005a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005a76:	2300      	movs	r3, #0
 8005a78:	e000      	b.n	8005a7c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005a7a:	2302      	movs	r3, #2
  }
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005a92:	2300      	movs	r3, #0
 8005a94:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b20      	cmp	r3, #32
 8005aa0:	d12a      	bne.n	8005af8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2224      	movs	r2, #36	; 0x24
 8005aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f022 0201 	bic.w	r2, r2, #1
 8005ab8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac0:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005ac2:	89fb      	ldrh	r3, [r7, #14]
 8005ac4:	f023 030f 	bic.w	r3, r3, #15
 8005ac8:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	89fb      	ldrh	r3, [r7, #14]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	89fa      	ldrh	r2, [r7, #14]
 8005ada:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f042 0201 	orr.w	r2, r2, #1
 8005aea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2220      	movs	r2, #32
 8005af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005af4:	2300      	movs	r3, #0
 8005af6:	e000      	b.n	8005afa <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005af8:	2302      	movs	r3, #2
  }
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3714      	adds	r7, #20
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
	...

08005b08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b086      	sub	sp, #24
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e267      	b.n	8005fea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d075      	beq.n	8005c12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b26:	4b88      	ldr	r3, [pc, #544]	; (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f003 030c 	and.w	r3, r3, #12
 8005b2e:	2b04      	cmp	r3, #4
 8005b30:	d00c      	beq.n	8005b4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b32:	4b85      	ldr	r3, [pc, #532]	; (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b3a:	2b08      	cmp	r3, #8
 8005b3c:	d112      	bne.n	8005b64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b3e:	4b82      	ldr	r3, [pc, #520]	; (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b4a:	d10b      	bne.n	8005b64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b4c:	4b7e      	ldr	r3, [pc, #504]	; (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d05b      	beq.n	8005c10 <HAL_RCC_OscConfig+0x108>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d157      	bne.n	8005c10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e242      	b.n	8005fea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b6c:	d106      	bne.n	8005b7c <HAL_RCC_OscConfig+0x74>
 8005b6e:	4b76      	ldr	r3, [pc, #472]	; (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a75      	ldr	r2, [pc, #468]	; (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b78:	6013      	str	r3, [r2, #0]
 8005b7a:	e01d      	b.n	8005bb8 <HAL_RCC_OscConfig+0xb0>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b84:	d10c      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x98>
 8005b86:	4b70      	ldr	r3, [pc, #448]	; (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a6f      	ldr	r2, [pc, #444]	; (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005b8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b90:	6013      	str	r3, [r2, #0]
 8005b92:	4b6d      	ldr	r3, [pc, #436]	; (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a6c      	ldr	r2, [pc, #432]	; (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b9c:	6013      	str	r3, [r2, #0]
 8005b9e:	e00b      	b.n	8005bb8 <HAL_RCC_OscConfig+0xb0>
 8005ba0:	4b69      	ldr	r3, [pc, #420]	; (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a68      	ldr	r2, [pc, #416]	; (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005ba6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005baa:	6013      	str	r3, [r2, #0]
 8005bac:	4b66      	ldr	r3, [pc, #408]	; (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a65      	ldr	r2, [pc, #404]	; (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005bb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d013      	beq.n	8005be8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bc0:	f7fd f988 	bl	8002ed4 <HAL_GetTick>
 8005bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bc6:	e008      	b.n	8005bda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bc8:	f7fd f984 	bl	8002ed4 <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	2b64      	cmp	r3, #100	; 0x64
 8005bd4:	d901      	bls.n	8005bda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e207      	b.n	8005fea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bda:	4b5b      	ldr	r3, [pc, #364]	; (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d0f0      	beq.n	8005bc8 <HAL_RCC_OscConfig+0xc0>
 8005be6:	e014      	b.n	8005c12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005be8:	f7fd f974 	bl	8002ed4 <HAL_GetTick>
 8005bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bee:	e008      	b.n	8005c02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bf0:	f7fd f970 	bl	8002ed4 <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	2b64      	cmp	r3, #100	; 0x64
 8005bfc:	d901      	bls.n	8005c02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e1f3      	b.n	8005fea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c02:	4b51      	ldr	r3, [pc, #324]	; (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1f0      	bne.n	8005bf0 <HAL_RCC_OscConfig+0xe8>
 8005c0e:	e000      	b.n	8005c12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0302 	and.w	r3, r3, #2
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d063      	beq.n	8005ce6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c1e:	4b4a      	ldr	r3, [pc, #296]	; (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f003 030c 	and.w	r3, r3, #12
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00b      	beq.n	8005c42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c2a:	4b47      	ldr	r3, [pc, #284]	; (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c32:	2b08      	cmp	r3, #8
 8005c34:	d11c      	bne.n	8005c70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c36:	4b44      	ldr	r3, [pc, #272]	; (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d116      	bne.n	8005c70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c42:	4b41      	ldr	r3, [pc, #260]	; (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0302 	and.w	r3, r3, #2
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d005      	beq.n	8005c5a <HAL_RCC_OscConfig+0x152>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d001      	beq.n	8005c5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e1c7      	b.n	8005fea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c5a:	4b3b      	ldr	r3, [pc, #236]	; (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	00db      	lsls	r3, r3, #3
 8005c68:	4937      	ldr	r1, [pc, #220]	; (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c6e:	e03a      	b.n	8005ce6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d020      	beq.n	8005cba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c78:	4b34      	ldr	r3, [pc, #208]	; (8005d4c <HAL_RCC_OscConfig+0x244>)
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c7e:	f7fd f929 	bl	8002ed4 <HAL_GetTick>
 8005c82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c84:	e008      	b.n	8005c98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c86:	f7fd f925 	bl	8002ed4 <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d901      	bls.n	8005c98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e1a8      	b.n	8005fea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c98:	4b2b      	ldr	r3, [pc, #172]	; (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0302 	and.w	r3, r3, #2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d0f0      	beq.n	8005c86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ca4:	4b28      	ldr	r3, [pc, #160]	; (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	00db      	lsls	r3, r3, #3
 8005cb2:	4925      	ldr	r1, [pc, #148]	; (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	600b      	str	r3, [r1, #0]
 8005cb8:	e015      	b.n	8005ce6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cba:	4b24      	ldr	r3, [pc, #144]	; (8005d4c <HAL_RCC_OscConfig+0x244>)
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc0:	f7fd f908 	bl	8002ed4 <HAL_GetTick>
 8005cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cc6:	e008      	b.n	8005cda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cc8:	f7fd f904 	bl	8002ed4 <HAL_GetTick>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d901      	bls.n	8005cda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e187      	b.n	8005fea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cda:	4b1b      	ldr	r3, [pc, #108]	; (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0302 	and.w	r3, r3, #2
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1f0      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0308 	and.w	r3, r3, #8
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d036      	beq.n	8005d60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d016      	beq.n	8005d28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cfa:	4b15      	ldr	r3, [pc, #84]	; (8005d50 <HAL_RCC_OscConfig+0x248>)
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d00:	f7fd f8e8 	bl	8002ed4 <HAL_GetTick>
 8005d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d06:	e008      	b.n	8005d1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d08:	f7fd f8e4 	bl	8002ed4 <HAL_GetTick>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d901      	bls.n	8005d1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e167      	b.n	8005fea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d1a:	4b0b      	ldr	r3, [pc, #44]	; (8005d48 <HAL_RCC_OscConfig+0x240>)
 8005d1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d1e:	f003 0302 	and.w	r3, r3, #2
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d0f0      	beq.n	8005d08 <HAL_RCC_OscConfig+0x200>
 8005d26:	e01b      	b.n	8005d60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d28:	4b09      	ldr	r3, [pc, #36]	; (8005d50 <HAL_RCC_OscConfig+0x248>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d2e:	f7fd f8d1 	bl	8002ed4 <HAL_GetTick>
 8005d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d34:	e00e      	b.n	8005d54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d36:	f7fd f8cd 	bl	8002ed4 <HAL_GetTick>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d907      	bls.n	8005d54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e150      	b.n	8005fea <HAL_RCC_OscConfig+0x4e2>
 8005d48:	40023800 	.word	0x40023800
 8005d4c:	42470000 	.word	0x42470000
 8005d50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d54:	4b88      	ldr	r3, [pc, #544]	; (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005d56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d58:	f003 0302 	and.w	r3, r3, #2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1ea      	bne.n	8005d36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0304 	and.w	r3, r3, #4
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f000 8097 	beq.w	8005e9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d72:	4b81      	ldr	r3, [pc, #516]	; (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10f      	bne.n	8005d9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d7e:	2300      	movs	r3, #0
 8005d80:	60bb      	str	r3, [r7, #8]
 8005d82:	4b7d      	ldr	r3, [pc, #500]	; (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d86:	4a7c      	ldr	r2, [pc, #496]	; (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8005d8e:	4b7a      	ldr	r3, [pc, #488]	; (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d96:	60bb      	str	r3, [r7, #8]
 8005d98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d9e:	4b77      	ldr	r3, [pc, #476]	; (8005f7c <HAL_RCC_OscConfig+0x474>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d118      	bne.n	8005ddc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005daa:	4b74      	ldr	r3, [pc, #464]	; (8005f7c <HAL_RCC_OscConfig+0x474>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a73      	ldr	r2, [pc, #460]	; (8005f7c <HAL_RCC_OscConfig+0x474>)
 8005db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005db4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005db6:	f7fd f88d 	bl	8002ed4 <HAL_GetTick>
 8005dba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dbc:	e008      	b.n	8005dd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dbe:	f7fd f889 	bl	8002ed4 <HAL_GetTick>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d901      	bls.n	8005dd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e10c      	b.n	8005fea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dd0:	4b6a      	ldr	r3, [pc, #424]	; (8005f7c <HAL_RCC_OscConfig+0x474>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d0f0      	beq.n	8005dbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d106      	bne.n	8005df2 <HAL_RCC_OscConfig+0x2ea>
 8005de4:	4b64      	ldr	r3, [pc, #400]	; (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005de8:	4a63      	ldr	r2, [pc, #396]	; (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005dea:	f043 0301 	orr.w	r3, r3, #1
 8005dee:	6713      	str	r3, [r2, #112]	; 0x70
 8005df0:	e01c      	b.n	8005e2c <HAL_RCC_OscConfig+0x324>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	2b05      	cmp	r3, #5
 8005df8:	d10c      	bne.n	8005e14 <HAL_RCC_OscConfig+0x30c>
 8005dfa:	4b5f      	ldr	r3, [pc, #380]	; (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dfe:	4a5e      	ldr	r2, [pc, #376]	; (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005e00:	f043 0304 	orr.w	r3, r3, #4
 8005e04:	6713      	str	r3, [r2, #112]	; 0x70
 8005e06:	4b5c      	ldr	r3, [pc, #368]	; (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e0a:	4a5b      	ldr	r2, [pc, #364]	; (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005e0c:	f043 0301 	orr.w	r3, r3, #1
 8005e10:	6713      	str	r3, [r2, #112]	; 0x70
 8005e12:	e00b      	b.n	8005e2c <HAL_RCC_OscConfig+0x324>
 8005e14:	4b58      	ldr	r3, [pc, #352]	; (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e18:	4a57      	ldr	r2, [pc, #348]	; (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005e1a:	f023 0301 	bic.w	r3, r3, #1
 8005e1e:	6713      	str	r3, [r2, #112]	; 0x70
 8005e20:	4b55      	ldr	r3, [pc, #340]	; (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e24:	4a54      	ldr	r2, [pc, #336]	; (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005e26:	f023 0304 	bic.w	r3, r3, #4
 8005e2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d015      	beq.n	8005e60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e34:	f7fd f84e 	bl	8002ed4 <HAL_GetTick>
 8005e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e3a:	e00a      	b.n	8005e52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e3c:	f7fd f84a 	bl	8002ed4 <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d901      	bls.n	8005e52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e0cb      	b.n	8005fea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e52:	4b49      	ldr	r3, [pc, #292]	; (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e56:	f003 0302 	and.w	r3, r3, #2
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d0ee      	beq.n	8005e3c <HAL_RCC_OscConfig+0x334>
 8005e5e:	e014      	b.n	8005e8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e60:	f7fd f838 	bl	8002ed4 <HAL_GetTick>
 8005e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e66:	e00a      	b.n	8005e7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e68:	f7fd f834 	bl	8002ed4 <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d901      	bls.n	8005e7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e0b5      	b.n	8005fea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e7e:	4b3e      	ldr	r3, [pc, #248]	; (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e82:	f003 0302 	and.w	r3, r3, #2
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1ee      	bne.n	8005e68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e8a:	7dfb      	ldrb	r3, [r7, #23]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d105      	bne.n	8005e9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e90:	4b39      	ldr	r3, [pc, #228]	; (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e94:	4a38      	ldr	r2, [pc, #224]	; (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005e96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	699b      	ldr	r3, [r3, #24]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f000 80a1 	beq.w	8005fe8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ea6:	4b34      	ldr	r3, [pc, #208]	; (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	f003 030c 	and.w	r3, r3, #12
 8005eae:	2b08      	cmp	r3, #8
 8005eb0:	d05c      	beq.n	8005f6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	699b      	ldr	r3, [r3, #24]
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d141      	bne.n	8005f3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eba:	4b31      	ldr	r3, [pc, #196]	; (8005f80 <HAL_RCC_OscConfig+0x478>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ec0:	f7fd f808 	bl	8002ed4 <HAL_GetTick>
 8005ec4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ec6:	e008      	b.n	8005eda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ec8:	f7fd f804 	bl	8002ed4 <HAL_GetTick>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d901      	bls.n	8005eda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e087      	b.n	8005fea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005eda:	4b27      	ldr	r3, [pc, #156]	; (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1f0      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	69da      	ldr	r2, [r3, #28]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef4:	019b      	lsls	r3, r3, #6
 8005ef6:	431a      	orrs	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efc:	085b      	lsrs	r3, r3, #1
 8005efe:	3b01      	subs	r3, #1
 8005f00:	041b      	lsls	r3, r3, #16
 8005f02:	431a      	orrs	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f08:	061b      	lsls	r3, r3, #24
 8005f0a:	491b      	ldr	r1, [pc, #108]	; (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f10:	4b1b      	ldr	r3, [pc, #108]	; (8005f80 <HAL_RCC_OscConfig+0x478>)
 8005f12:	2201      	movs	r2, #1
 8005f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f16:	f7fc ffdd 	bl	8002ed4 <HAL_GetTick>
 8005f1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f1c:	e008      	b.n	8005f30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f1e:	f7fc ffd9 	bl	8002ed4 <HAL_GetTick>
 8005f22:	4602      	mov	r2, r0
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d901      	bls.n	8005f30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e05c      	b.n	8005fea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f30:	4b11      	ldr	r3, [pc, #68]	; (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d0f0      	beq.n	8005f1e <HAL_RCC_OscConfig+0x416>
 8005f3c:	e054      	b.n	8005fe8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f3e:	4b10      	ldr	r3, [pc, #64]	; (8005f80 <HAL_RCC_OscConfig+0x478>)
 8005f40:	2200      	movs	r2, #0
 8005f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f44:	f7fc ffc6 	bl	8002ed4 <HAL_GetTick>
 8005f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f4a:	e008      	b.n	8005f5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f4c:	f7fc ffc2 	bl	8002ed4 <HAL_GetTick>
 8005f50:	4602      	mov	r2, r0
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d901      	bls.n	8005f5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e045      	b.n	8005fea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f5e:	4b06      	ldr	r3, [pc, #24]	; (8005f78 <HAL_RCC_OscConfig+0x470>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d1f0      	bne.n	8005f4c <HAL_RCC_OscConfig+0x444>
 8005f6a:	e03d      	b.n	8005fe8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	699b      	ldr	r3, [r3, #24]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d107      	bne.n	8005f84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e038      	b.n	8005fea <HAL_RCC_OscConfig+0x4e2>
 8005f78:	40023800 	.word	0x40023800
 8005f7c:	40007000 	.word	0x40007000
 8005f80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f84:	4b1b      	ldr	r3, [pc, #108]	; (8005ff4 <HAL_RCC_OscConfig+0x4ec>)
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d028      	beq.n	8005fe4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d121      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d11a      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005fba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d111      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fca:	085b      	lsrs	r3, r3, #1
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d107      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d001      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e000      	b.n	8005fea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3718      	adds	r7, #24
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	40023800 	.word	0x40023800

08005ff8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d101      	bne.n	800600c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e0cc      	b.n	80061a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800600c:	4b68      	ldr	r3, [pc, #416]	; (80061b0 <HAL_RCC_ClockConfig+0x1b8>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 030f 	and.w	r3, r3, #15
 8006014:	683a      	ldr	r2, [r7, #0]
 8006016:	429a      	cmp	r2, r3
 8006018:	d90c      	bls.n	8006034 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800601a:	4b65      	ldr	r3, [pc, #404]	; (80061b0 <HAL_RCC_ClockConfig+0x1b8>)
 800601c:	683a      	ldr	r2, [r7, #0]
 800601e:	b2d2      	uxtb	r2, r2
 8006020:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006022:	4b63      	ldr	r3, [pc, #396]	; (80061b0 <HAL_RCC_ClockConfig+0x1b8>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 030f 	and.w	r3, r3, #15
 800602a:	683a      	ldr	r2, [r7, #0]
 800602c:	429a      	cmp	r2, r3
 800602e:	d001      	beq.n	8006034 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e0b8      	b.n	80061a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0302 	and.w	r3, r3, #2
 800603c:	2b00      	cmp	r3, #0
 800603e:	d020      	beq.n	8006082 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0304 	and.w	r3, r3, #4
 8006048:	2b00      	cmp	r3, #0
 800604a:	d005      	beq.n	8006058 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800604c:	4b59      	ldr	r3, [pc, #356]	; (80061b4 <HAL_RCC_ClockConfig+0x1bc>)
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	4a58      	ldr	r2, [pc, #352]	; (80061b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006052:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006056:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0308 	and.w	r3, r3, #8
 8006060:	2b00      	cmp	r3, #0
 8006062:	d005      	beq.n	8006070 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006064:	4b53      	ldr	r3, [pc, #332]	; (80061b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	4a52      	ldr	r2, [pc, #328]	; (80061b4 <HAL_RCC_ClockConfig+0x1bc>)
 800606a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800606e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006070:	4b50      	ldr	r3, [pc, #320]	; (80061b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	494d      	ldr	r1, [pc, #308]	; (80061b4 <HAL_RCC_ClockConfig+0x1bc>)
 800607e:	4313      	orrs	r3, r2
 8006080:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0301 	and.w	r3, r3, #1
 800608a:	2b00      	cmp	r3, #0
 800608c:	d044      	beq.n	8006118 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	2b01      	cmp	r3, #1
 8006094:	d107      	bne.n	80060a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006096:	4b47      	ldr	r3, [pc, #284]	; (80061b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d119      	bne.n	80060d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e07f      	b.n	80061a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d003      	beq.n	80060b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060b2:	2b03      	cmp	r3, #3
 80060b4:	d107      	bne.n	80060c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060b6:	4b3f      	ldr	r3, [pc, #252]	; (80061b4 <HAL_RCC_ClockConfig+0x1bc>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d109      	bne.n	80060d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e06f      	b.n	80061a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060c6:	4b3b      	ldr	r3, [pc, #236]	; (80061b4 <HAL_RCC_ClockConfig+0x1bc>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0302 	and.w	r3, r3, #2
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d101      	bne.n	80060d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e067      	b.n	80061a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80060d6:	4b37      	ldr	r3, [pc, #220]	; (80061b4 <HAL_RCC_ClockConfig+0x1bc>)
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f023 0203 	bic.w	r2, r3, #3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	4934      	ldr	r1, [pc, #208]	; (80061b4 <HAL_RCC_ClockConfig+0x1bc>)
 80060e4:	4313      	orrs	r3, r2
 80060e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80060e8:	f7fc fef4 	bl	8002ed4 <HAL_GetTick>
 80060ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060ee:	e00a      	b.n	8006106 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060f0:	f7fc fef0 	bl	8002ed4 <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80060fe:	4293      	cmp	r3, r2
 8006100:	d901      	bls.n	8006106 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e04f      	b.n	80061a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006106:	4b2b      	ldr	r3, [pc, #172]	; (80061b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f003 020c 	and.w	r2, r3, #12
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	429a      	cmp	r2, r3
 8006116:	d1eb      	bne.n	80060f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006118:	4b25      	ldr	r3, [pc, #148]	; (80061b0 <HAL_RCC_ClockConfig+0x1b8>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 030f 	and.w	r3, r3, #15
 8006120:	683a      	ldr	r2, [r7, #0]
 8006122:	429a      	cmp	r2, r3
 8006124:	d20c      	bcs.n	8006140 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006126:	4b22      	ldr	r3, [pc, #136]	; (80061b0 <HAL_RCC_ClockConfig+0x1b8>)
 8006128:	683a      	ldr	r2, [r7, #0]
 800612a:	b2d2      	uxtb	r2, r2
 800612c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800612e:	4b20      	ldr	r3, [pc, #128]	; (80061b0 <HAL_RCC_ClockConfig+0x1b8>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 030f 	and.w	r3, r3, #15
 8006136:	683a      	ldr	r2, [r7, #0]
 8006138:	429a      	cmp	r2, r3
 800613a:	d001      	beq.n	8006140 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e032      	b.n	80061a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 0304 	and.w	r3, r3, #4
 8006148:	2b00      	cmp	r3, #0
 800614a:	d008      	beq.n	800615e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800614c:	4b19      	ldr	r3, [pc, #100]	; (80061b4 <HAL_RCC_ClockConfig+0x1bc>)
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	4916      	ldr	r1, [pc, #88]	; (80061b4 <HAL_RCC_ClockConfig+0x1bc>)
 800615a:	4313      	orrs	r3, r2
 800615c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 0308 	and.w	r3, r3, #8
 8006166:	2b00      	cmp	r3, #0
 8006168:	d009      	beq.n	800617e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800616a:	4b12      	ldr	r3, [pc, #72]	; (80061b4 <HAL_RCC_ClockConfig+0x1bc>)
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	00db      	lsls	r3, r3, #3
 8006178:	490e      	ldr	r1, [pc, #56]	; (80061b4 <HAL_RCC_ClockConfig+0x1bc>)
 800617a:	4313      	orrs	r3, r2
 800617c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800617e:	f000 f821 	bl	80061c4 <HAL_RCC_GetSysClockFreq>
 8006182:	4602      	mov	r2, r0
 8006184:	4b0b      	ldr	r3, [pc, #44]	; (80061b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	091b      	lsrs	r3, r3, #4
 800618a:	f003 030f 	and.w	r3, r3, #15
 800618e:	490a      	ldr	r1, [pc, #40]	; (80061b8 <HAL_RCC_ClockConfig+0x1c0>)
 8006190:	5ccb      	ldrb	r3, [r1, r3]
 8006192:	fa22 f303 	lsr.w	r3, r2, r3
 8006196:	4a09      	ldr	r2, [pc, #36]	; (80061bc <HAL_RCC_ClockConfig+0x1c4>)
 8006198:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800619a:	4b09      	ldr	r3, [pc, #36]	; (80061c0 <HAL_RCC_ClockConfig+0x1c8>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fc fe54 	bl	8002e4c <HAL_InitTick>

  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	40023c00 	.word	0x40023c00
 80061b4:	40023800 	.word	0x40023800
 80061b8:	0800937c 	.word	0x0800937c
 80061bc:	2000001c 	.word	0x2000001c
 80061c0:	20000020 	.word	0x20000020

080061c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061c8:	b090      	sub	sp, #64	; 0x40
 80061ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80061cc:	2300      	movs	r3, #0
 80061ce:	637b      	str	r3, [r7, #52]	; 0x34
 80061d0:	2300      	movs	r3, #0
 80061d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061d4:	2300      	movs	r3, #0
 80061d6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80061d8:	2300      	movs	r3, #0
 80061da:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80061dc:	4b59      	ldr	r3, [pc, #356]	; (8006344 <HAL_RCC_GetSysClockFreq+0x180>)
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	f003 030c 	and.w	r3, r3, #12
 80061e4:	2b08      	cmp	r3, #8
 80061e6:	d00d      	beq.n	8006204 <HAL_RCC_GetSysClockFreq+0x40>
 80061e8:	2b08      	cmp	r3, #8
 80061ea:	f200 80a1 	bhi.w	8006330 <HAL_RCC_GetSysClockFreq+0x16c>
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d002      	beq.n	80061f8 <HAL_RCC_GetSysClockFreq+0x34>
 80061f2:	2b04      	cmp	r3, #4
 80061f4:	d003      	beq.n	80061fe <HAL_RCC_GetSysClockFreq+0x3a>
 80061f6:	e09b      	b.n	8006330 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80061f8:	4b53      	ldr	r3, [pc, #332]	; (8006348 <HAL_RCC_GetSysClockFreq+0x184>)
 80061fa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80061fc:	e09b      	b.n	8006336 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80061fe:	4b53      	ldr	r3, [pc, #332]	; (800634c <HAL_RCC_GetSysClockFreq+0x188>)
 8006200:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006202:	e098      	b.n	8006336 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006204:	4b4f      	ldr	r3, [pc, #316]	; (8006344 <HAL_RCC_GetSysClockFreq+0x180>)
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800620c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800620e:	4b4d      	ldr	r3, [pc, #308]	; (8006344 <HAL_RCC_GetSysClockFreq+0x180>)
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d028      	beq.n	800626c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800621a:	4b4a      	ldr	r3, [pc, #296]	; (8006344 <HAL_RCC_GetSysClockFreq+0x180>)
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	099b      	lsrs	r3, r3, #6
 8006220:	2200      	movs	r2, #0
 8006222:	623b      	str	r3, [r7, #32]
 8006224:	627a      	str	r2, [r7, #36]	; 0x24
 8006226:	6a3b      	ldr	r3, [r7, #32]
 8006228:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800622c:	2100      	movs	r1, #0
 800622e:	4b47      	ldr	r3, [pc, #284]	; (800634c <HAL_RCC_GetSysClockFreq+0x188>)
 8006230:	fb03 f201 	mul.w	r2, r3, r1
 8006234:	2300      	movs	r3, #0
 8006236:	fb00 f303 	mul.w	r3, r0, r3
 800623a:	4413      	add	r3, r2
 800623c:	4a43      	ldr	r2, [pc, #268]	; (800634c <HAL_RCC_GetSysClockFreq+0x188>)
 800623e:	fba0 1202 	umull	r1, r2, r0, r2
 8006242:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006244:	460a      	mov	r2, r1
 8006246:	62ba      	str	r2, [r7, #40]	; 0x28
 8006248:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800624a:	4413      	add	r3, r2
 800624c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800624e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006250:	2200      	movs	r2, #0
 8006252:	61bb      	str	r3, [r7, #24]
 8006254:	61fa      	str	r2, [r7, #28]
 8006256:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800625a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800625e:	f7f9 ffcd 	bl	80001fc <__aeabi_uldivmod>
 8006262:	4602      	mov	r2, r0
 8006264:	460b      	mov	r3, r1
 8006266:	4613      	mov	r3, r2
 8006268:	63fb      	str	r3, [r7, #60]	; 0x3c
 800626a:	e053      	b.n	8006314 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800626c:	4b35      	ldr	r3, [pc, #212]	; (8006344 <HAL_RCC_GetSysClockFreq+0x180>)
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	099b      	lsrs	r3, r3, #6
 8006272:	2200      	movs	r2, #0
 8006274:	613b      	str	r3, [r7, #16]
 8006276:	617a      	str	r2, [r7, #20]
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800627e:	f04f 0b00 	mov.w	fp, #0
 8006282:	4652      	mov	r2, sl
 8006284:	465b      	mov	r3, fp
 8006286:	f04f 0000 	mov.w	r0, #0
 800628a:	f04f 0100 	mov.w	r1, #0
 800628e:	0159      	lsls	r1, r3, #5
 8006290:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006294:	0150      	lsls	r0, r2, #5
 8006296:	4602      	mov	r2, r0
 8006298:	460b      	mov	r3, r1
 800629a:	ebb2 080a 	subs.w	r8, r2, sl
 800629e:	eb63 090b 	sbc.w	r9, r3, fp
 80062a2:	f04f 0200 	mov.w	r2, #0
 80062a6:	f04f 0300 	mov.w	r3, #0
 80062aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80062ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80062b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80062b6:	ebb2 0408 	subs.w	r4, r2, r8
 80062ba:	eb63 0509 	sbc.w	r5, r3, r9
 80062be:	f04f 0200 	mov.w	r2, #0
 80062c2:	f04f 0300 	mov.w	r3, #0
 80062c6:	00eb      	lsls	r3, r5, #3
 80062c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062cc:	00e2      	lsls	r2, r4, #3
 80062ce:	4614      	mov	r4, r2
 80062d0:	461d      	mov	r5, r3
 80062d2:	eb14 030a 	adds.w	r3, r4, sl
 80062d6:	603b      	str	r3, [r7, #0]
 80062d8:	eb45 030b 	adc.w	r3, r5, fp
 80062dc:	607b      	str	r3, [r7, #4]
 80062de:	f04f 0200 	mov.w	r2, #0
 80062e2:	f04f 0300 	mov.w	r3, #0
 80062e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80062ea:	4629      	mov	r1, r5
 80062ec:	028b      	lsls	r3, r1, #10
 80062ee:	4621      	mov	r1, r4
 80062f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80062f4:	4621      	mov	r1, r4
 80062f6:	028a      	lsls	r2, r1, #10
 80062f8:	4610      	mov	r0, r2
 80062fa:	4619      	mov	r1, r3
 80062fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062fe:	2200      	movs	r2, #0
 8006300:	60bb      	str	r3, [r7, #8]
 8006302:	60fa      	str	r2, [r7, #12]
 8006304:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006308:	f7f9 ff78 	bl	80001fc <__aeabi_uldivmod>
 800630c:	4602      	mov	r2, r0
 800630e:	460b      	mov	r3, r1
 8006310:	4613      	mov	r3, r2
 8006312:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006314:	4b0b      	ldr	r3, [pc, #44]	; (8006344 <HAL_RCC_GetSysClockFreq+0x180>)
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	0c1b      	lsrs	r3, r3, #16
 800631a:	f003 0303 	and.w	r3, r3, #3
 800631e:	3301      	adds	r3, #1
 8006320:	005b      	lsls	r3, r3, #1
 8006322:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006324:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006328:	fbb2 f3f3 	udiv	r3, r2, r3
 800632c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800632e:	e002      	b.n	8006336 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006330:	4b05      	ldr	r3, [pc, #20]	; (8006348 <HAL_RCC_GetSysClockFreq+0x184>)
 8006332:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006334:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006338:	4618      	mov	r0, r3
 800633a:	3740      	adds	r7, #64	; 0x40
 800633c:	46bd      	mov	sp, r7
 800633e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006342:	bf00      	nop
 8006344:	40023800 	.word	0x40023800
 8006348:	00f42400 	.word	0x00f42400
 800634c:	017d7840 	.word	0x017d7840

08006350 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006350:	b480      	push	{r7}
 8006352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006354:	4b03      	ldr	r3, [pc, #12]	; (8006364 <HAL_RCC_GetHCLKFreq+0x14>)
 8006356:	681b      	ldr	r3, [r3, #0]
}
 8006358:	4618      	mov	r0, r3
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	2000001c 	.word	0x2000001c

08006368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800636c:	f7ff fff0 	bl	8006350 <HAL_RCC_GetHCLKFreq>
 8006370:	4602      	mov	r2, r0
 8006372:	4b05      	ldr	r3, [pc, #20]	; (8006388 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	0a9b      	lsrs	r3, r3, #10
 8006378:	f003 0307 	and.w	r3, r3, #7
 800637c:	4903      	ldr	r1, [pc, #12]	; (800638c <HAL_RCC_GetPCLK1Freq+0x24>)
 800637e:	5ccb      	ldrb	r3, [r1, r3]
 8006380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006384:	4618      	mov	r0, r3
 8006386:	bd80      	pop	{r7, pc}
 8006388:	40023800 	.word	0x40023800
 800638c:	0800938c 	.word	0x0800938c

08006390 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006394:	f7ff ffdc 	bl	8006350 <HAL_RCC_GetHCLKFreq>
 8006398:	4602      	mov	r2, r0
 800639a:	4b05      	ldr	r3, [pc, #20]	; (80063b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	0b5b      	lsrs	r3, r3, #13
 80063a0:	f003 0307 	and.w	r3, r3, #7
 80063a4:	4903      	ldr	r1, [pc, #12]	; (80063b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063a6:	5ccb      	ldrb	r3, [r1, r3]
 80063a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	40023800 	.word	0x40023800
 80063b4:	0800938c 	.word	0x0800938c

080063b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80063c0:	2300      	movs	r3, #0
 80063c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80063c4:	2300      	movs	r3, #0
 80063c6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0301 	and.w	r3, r3, #1
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d10b      	bne.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d105      	bne.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d075      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80063ec:	4b91      	ldr	r3, [pc, #580]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80063ee:	2200      	movs	r2, #0
 80063f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80063f2:	f7fc fd6f 	bl	8002ed4 <HAL_GetTick>
 80063f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80063f8:	e008      	b.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80063fa:	f7fc fd6b 	bl	8002ed4 <HAL_GetTick>
 80063fe:	4602      	mov	r2, r0
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	2b02      	cmp	r3, #2
 8006406:	d901      	bls.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e189      	b.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800640c:	4b8a      	ldr	r3, [pc, #552]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1f0      	bne.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0301 	and.w	r3, r3, #1
 8006420:	2b00      	cmp	r3, #0
 8006422:	d009      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	019a      	lsls	r2, r3, #6
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	071b      	lsls	r3, r3, #28
 8006430:	4981      	ldr	r1, [pc, #516]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006432:	4313      	orrs	r3, r2
 8006434:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 0302 	and.w	r3, r3, #2
 8006440:	2b00      	cmp	r3, #0
 8006442:	d01f      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006444:	4b7c      	ldr	r3, [pc, #496]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006446:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800644a:	0f1b      	lsrs	r3, r3, #28
 800644c:	f003 0307 	and.w	r3, r3, #7
 8006450:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	019a      	lsls	r2, r3, #6
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	061b      	lsls	r3, r3, #24
 800645e:	431a      	orrs	r2, r3
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	071b      	lsls	r3, r3, #28
 8006464:	4974      	ldr	r1, [pc, #464]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006466:	4313      	orrs	r3, r2
 8006468:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800646c:	4b72      	ldr	r3, [pc, #456]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800646e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006472:	f023 021f 	bic.w	r2, r3, #31
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	69db      	ldr	r3, [r3, #28]
 800647a:	3b01      	subs	r3, #1
 800647c:	496e      	ldr	r1, [pc, #440]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800647e:	4313      	orrs	r3, r2
 8006480:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00d      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	019a      	lsls	r2, r3, #6
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	061b      	lsls	r3, r3, #24
 800649c:	431a      	orrs	r2, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	071b      	lsls	r3, r3, #28
 80064a4:	4964      	ldr	r1, [pc, #400]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064a6:	4313      	orrs	r3, r2
 80064a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80064ac:	4b61      	ldr	r3, [pc, #388]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80064ae:	2201      	movs	r2, #1
 80064b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80064b2:	f7fc fd0f 	bl	8002ed4 <HAL_GetTick>
 80064b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80064b8:	e008      	b.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80064ba:	f7fc fd0b 	bl	8002ed4 <HAL_GetTick>
 80064be:	4602      	mov	r2, r0
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d901      	bls.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e129      	b.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80064cc:	4b5a      	ldr	r3, [pc, #360]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d0f0      	beq.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0304 	and.w	r3, r3, #4
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d105      	bne.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d079      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80064f0:	4b52      	ldr	r3, [pc, #328]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80064f2:	2200      	movs	r2, #0
 80064f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80064f6:	f7fc fced 	bl	8002ed4 <HAL_GetTick>
 80064fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80064fc:	e008      	b.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80064fe:	f7fc fce9 	bl	8002ed4 <HAL_GetTick>
 8006502:	4602      	mov	r2, r0
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	2b02      	cmp	r3, #2
 800650a:	d901      	bls.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800650c:	2303      	movs	r3, #3
 800650e:	e107      	b.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006510:	4b49      	ldr	r3, [pc, #292]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006518:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800651c:	d0ef      	beq.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0304 	and.w	r3, r3, #4
 8006526:	2b00      	cmp	r3, #0
 8006528:	d020      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800652a:	4b43      	ldr	r3, [pc, #268]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800652c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006530:	0f1b      	lsrs	r3, r3, #28
 8006532:	f003 0307 	and.w	r3, r3, #7
 8006536:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	019a      	lsls	r2, r3, #6
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	061b      	lsls	r3, r3, #24
 8006544:	431a      	orrs	r2, r3
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	071b      	lsls	r3, r3, #28
 800654a:	493b      	ldr	r1, [pc, #236]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800654c:	4313      	orrs	r3, r2
 800654e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006552:	4b39      	ldr	r3, [pc, #228]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006554:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006558:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a1b      	ldr	r3, [r3, #32]
 8006560:	3b01      	subs	r3, #1
 8006562:	021b      	lsls	r3, r3, #8
 8006564:	4934      	ldr	r1, [pc, #208]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006566:	4313      	orrs	r3, r2
 8006568:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 0308 	and.w	r3, r3, #8
 8006574:	2b00      	cmp	r3, #0
 8006576:	d01e      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006578:	4b2f      	ldr	r3, [pc, #188]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800657a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800657e:	0e1b      	lsrs	r3, r3, #24
 8006580:	f003 030f 	and.w	r3, r3, #15
 8006584:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	019a      	lsls	r2, r3, #6
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	061b      	lsls	r3, r3, #24
 8006590:	431a      	orrs	r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	699b      	ldr	r3, [r3, #24]
 8006596:	071b      	lsls	r3, r3, #28
 8006598:	4927      	ldr	r1, [pc, #156]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800659a:	4313      	orrs	r3, r2
 800659c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80065a0:	4b25      	ldr	r3, [pc, #148]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ae:	4922      	ldr	r1, [pc, #136]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065b0:	4313      	orrs	r3, r2
 80065b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80065b6:	4b21      	ldr	r3, [pc, #132]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80065b8:	2201      	movs	r2, #1
 80065ba:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80065bc:	f7fc fc8a 	bl	8002ed4 <HAL_GetTick>
 80065c0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80065c2:	e008      	b.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80065c4:	f7fc fc86 	bl	8002ed4 <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d901      	bls.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e0a4      	b.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80065d6:	4b18      	ldr	r3, [pc, #96]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065e2:	d1ef      	bne.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 0320 	and.w	r3, r3, #32
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f000 808b 	beq.w	8006708 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80065f2:	2300      	movs	r3, #0
 80065f4:	60fb      	str	r3, [r7, #12]
 80065f6:	4b10      	ldr	r3, [pc, #64]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fa:	4a0f      	ldr	r2, [pc, #60]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006600:	6413      	str	r3, [r2, #64]	; 0x40
 8006602:	4b0d      	ldr	r3, [pc, #52]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800660a:	60fb      	str	r3, [r7, #12]
 800660c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800660e:	4b0c      	ldr	r3, [pc, #48]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a0b      	ldr	r2, [pc, #44]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006618:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800661a:	f7fc fc5b 	bl	8002ed4 <HAL_GetTick>
 800661e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006620:	e010      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006622:	f7fc fc57 	bl	8002ed4 <HAL_GetTick>
 8006626:	4602      	mov	r2, r0
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	2b02      	cmp	r3, #2
 800662e:	d909      	bls.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006630:	2303      	movs	r3, #3
 8006632:	e075      	b.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006634:	42470068 	.word	0x42470068
 8006638:	40023800 	.word	0x40023800
 800663c:	42470070 	.word	0x42470070
 8006640:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006644:	4b38      	ldr	r3, [pc, #224]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800664c:	2b00      	cmp	r3, #0
 800664e:	d0e8      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006650:	4b36      	ldr	r3, [pc, #216]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006654:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006658:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d02f      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006664:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006668:	693a      	ldr	r2, [r7, #16]
 800666a:	429a      	cmp	r2, r3
 800666c:	d028      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800666e:	4b2f      	ldr	r3, [pc, #188]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006672:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006676:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006678:	4b2d      	ldr	r3, [pc, #180]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800667a:	2201      	movs	r2, #1
 800667c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800667e:	4b2c      	ldr	r3, [pc, #176]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006680:	2200      	movs	r2, #0
 8006682:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006684:	4a29      	ldr	r2, [pc, #164]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800668a:	4b28      	ldr	r3, [pc, #160]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800668c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	2b01      	cmp	r3, #1
 8006694:	d114      	bne.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006696:	f7fc fc1d 	bl	8002ed4 <HAL_GetTick>
 800669a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800669c:	e00a      	b.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800669e:	f7fc fc19 	bl	8002ed4 <HAL_GetTick>
 80066a2:	4602      	mov	r2, r0
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	1ad3      	subs	r3, r2, r3
 80066a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d901      	bls.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e035      	b.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066b4:	4b1d      	ldr	r3, [pc, #116]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80066b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066b8:	f003 0302 	and.w	r3, r3, #2
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d0ee      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066cc:	d10d      	bne.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x332>
 80066ce:	4b17      	ldr	r3, [pc, #92]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066da:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80066de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066e2:	4912      	ldr	r1, [pc, #72]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80066e4:	4313      	orrs	r3, r2
 80066e6:	608b      	str	r3, [r1, #8]
 80066e8:	e005      	b.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80066ea:	4b10      	ldr	r3, [pc, #64]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	4a0f      	ldr	r2, [pc, #60]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80066f0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80066f4:	6093      	str	r3, [r2, #8]
 80066f6:	4b0d      	ldr	r3, [pc, #52]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80066f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006702:	490a      	ldr	r1, [pc, #40]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006704:	4313      	orrs	r3, r2
 8006706:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 0310 	and.w	r3, r3, #16
 8006710:	2b00      	cmp	r3, #0
 8006712:	d004      	beq.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800671a:	4b06      	ldr	r3, [pc, #24]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800671c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	3718      	adds	r7, #24
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}
 8006728:	40007000 	.word	0x40007000
 800672c:	40023800 	.word	0x40023800
 8006730:	42470e40 	.word	0x42470e40
 8006734:	424711e0 	.word	0x424711e0

08006738 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d101      	bne.n	800674e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e073      	b.n	8006836 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	7f5b      	ldrb	r3, [r3, #29]
 8006752:	b2db      	uxtb	r3, r3
 8006754:	2b00      	cmp	r3, #0
 8006756:	d105      	bne.n	8006764 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f7fc f83a 	bl	80027d8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2202      	movs	r2, #2
 8006768:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	f003 0310 	and.w	r3, r3, #16
 8006774:	2b10      	cmp	r3, #16
 8006776:	d055      	beq.n	8006824 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	22ca      	movs	r2, #202	; 0xca
 800677e:	625a      	str	r2, [r3, #36]	; 0x24
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2253      	movs	r2, #83	; 0x53
 8006786:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 fa49 	bl	8006c20 <RTC_EnterInitMode>
 800678e:	4603      	mov	r3, r0
 8006790:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006792:	7bfb      	ldrb	r3, [r7, #15]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d12c      	bne.n	80067f2 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	6812      	ldr	r2, [r2, #0]
 80067a2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80067a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067aa:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	6899      	ldr	r1, [r3, #8]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	685a      	ldr	r2, [r3, #4]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	431a      	orrs	r2, r3
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	695b      	ldr	r3, [r3, #20]
 80067c0:	431a      	orrs	r2, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	430a      	orrs	r2, r1
 80067c8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	68d2      	ldr	r2, [r2, #12]
 80067d2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6919      	ldr	r1, [r3, #16]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	041a      	lsls	r2, r3, #16
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	430a      	orrs	r2, r1
 80067e6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 fa50 	bl	8006c8e <RTC_ExitInitMode>
 80067ee:	4603      	mov	r3, r0
 80067f0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80067f2:	7bfb      	ldrb	r3, [r7, #15]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d110      	bne.n	800681a <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006806:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	699a      	ldr	r2, [r3, #24]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	430a      	orrs	r2, r1
 8006818:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	22ff      	movs	r2, #255	; 0xff
 8006820:	625a      	str	r2, [r3, #36]	; 0x24
 8006822:	e001      	b.n	8006828 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8006824:	2300      	movs	r3, #0
 8006826:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006828:	7bfb      	ldrb	r3, [r7, #15]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d102      	bne.n	8006834 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8006834:	7bfb      	ldrb	r3, [r7, #15]
}
 8006836:	4618      	mov	r0, r3
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800683e:	b590      	push	{r4, r7, lr}
 8006840:	b087      	sub	sp, #28
 8006842:	af00      	add	r7, sp, #0
 8006844:	60f8      	str	r0, [r7, #12]
 8006846:	60b9      	str	r1, [r7, #8]
 8006848:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800684a:	2300      	movs	r3, #0
 800684c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	7f1b      	ldrb	r3, [r3, #28]
 8006852:	2b01      	cmp	r3, #1
 8006854:	d101      	bne.n	800685a <HAL_RTC_SetTime+0x1c>
 8006856:	2302      	movs	r3, #2
 8006858:	e087      	b.n	800696a <HAL_RTC_SetTime+0x12c>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2201      	movs	r2, #1
 800685e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2202      	movs	r2, #2
 8006864:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d126      	bne.n	80068ba <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006876:	2b00      	cmp	r3, #0
 8006878:	d102      	bne.n	8006880 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	2200      	movs	r2, #0
 800687e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	4618      	mov	r0, r3
 8006886:	f000 fa27 	bl	8006cd8 <RTC_ByteToBcd2>
 800688a:	4603      	mov	r3, r0
 800688c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	785b      	ldrb	r3, [r3, #1]
 8006892:	4618      	mov	r0, r3
 8006894:	f000 fa20 	bl	8006cd8 <RTC_ByteToBcd2>
 8006898:	4603      	mov	r3, r0
 800689a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800689c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	789b      	ldrb	r3, [r3, #2]
 80068a2:	4618      	mov	r0, r3
 80068a4:	f000 fa18 	bl	8006cd8 <RTC_ByteToBcd2>
 80068a8:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80068aa:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	78db      	ldrb	r3, [r3, #3]
 80068b2:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80068b4:	4313      	orrs	r3, r2
 80068b6:	617b      	str	r3, [r7, #20]
 80068b8:	e018      	b.n	80068ec <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d102      	bne.n	80068ce <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	2200      	movs	r2, #0
 80068cc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	785b      	ldrb	r3, [r3, #1]
 80068d8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80068da:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80068dc:	68ba      	ldr	r2, [r7, #8]
 80068de:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80068e0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	78db      	ldrb	r3, [r3, #3]
 80068e6:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80068e8:	4313      	orrs	r3, r2
 80068ea:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	22ca      	movs	r2, #202	; 0xca
 80068f2:	625a      	str	r2, [r3, #36]	; 0x24
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2253      	movs	r2, #83	; 0x53
 80068fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80068fc:	68f8      	ldr	r0, [r7, #12]
 80068fe:	f000 f98f 	bl	8006c20 <RTC_EnterInitMode>
 8006902:	4603      	mov	r3, r0
 8006904:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006906:	7cfb      	ldrb	r3, [r7, #19]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d120      	bne.n	800694e <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006916:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800691a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	689a      	ldr	r2, [r3, #8]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800692a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	6899      	ldr	r1, [r3, #8]
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	68da      	ldr	r2, [r3, #12]
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	431a      	orrs	r2, r3
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	430a      	orrs	r2, r1
 8006942:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006944:	68f8      	ldr	r0, [r7, #12]
 8006946:	f000 f9a2 	bl	8006c8e <RTC_ExitInitMode>
 800694a:	4603      	mov	r3, r0
 800694c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800694e:	7cfb      	ldrb	r3, [r7, #19]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d102      	bne.n	800695a <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2201      	movs	r2, #1
 8006958:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	22ff      	movs	r2, #255	; 0xff
 8006960:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	771a      	strb	r2, [r3, #28]

  return status;
 8006968:	7cfb      	ldrb	r3, [r7, #19]
}
 800696a:	4618      	mov	r0, r3
 800696c:	371c      	adds	r7, #28
 800696e:	46bd      	mov	sp, r7
 8006970:	bd90      	pop	{r4, r7, pc}

08006972 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006972:	b580      	push	{r7, lr}
 8006974:	b086      	sub	sp, #24
 8006976:	af00      	add	r7, sp, #0
 8006978:	60f8      	str	r0, [r7, #12]
 800697a:	60b9      	str	r1, [r7, #8]
 800697c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800697e:	2300      	movs	r3, #0
 8006980:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80069a4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80069a8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	0c1b      	lsrs	r3, r3, #16
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069b4:	b2da      	uxtb	r2, r3
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	0a1b      	lsrs	r3, r3, #8
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069c4:	b2da      	uxtb	r2, r3
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069d2:	b2da      	uxtb	r2, r3
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	0d9b      	lsrs	r3, r3, #22
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	f003 0301 	and.w	r3, r3, #1
 80069e2:	b2da      	uxtb	r2, r3
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d11a      	bne.n	8006a24 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	4618      	mov	r0, r3
 80069f4:	f000 f98e 	bl	8006d14 <RTC_Bcd2ToByte>
 80069f8:	4603      	mov	r3, r0
 80069fa:	461a      	mov	r2, r3
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	785b      	ldrb	r3, [r3, #1]
 8006a04:	4618      	mov	r0, r3
 8006a06:	f000 f985 	bl	8006d14 <RTC_Bcd2ToByte>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	789b      	ldrb	r3, [r3, #2]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f000 f97c 	bl	8006d14 <RTC_Bcd2ToByte>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	461a      	mov	r2, r3
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3718      	adds	r7, #24
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006a2e:	b590      	push	{r4, r7, lr}
 8006a30:	b087      	sub	sp, #28
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	60f8      	str	r0, [r7, #12]
 8006a36:	60b9      	str	r1, [r7, #8]
 8006a38:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	7f1b      	ldrb	r3, [r3, #28]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d101      	bne.n	8006a4a <HAL_RTC_SetDate+0x1c>
 8006a46:	2302      	movs	r3, #2
 8006a48:	e071      	b.n	8006b2e <HAL_RTC_SetDate+0x100>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2202      	movs	r2, #2
 8006a54:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10e      	bne.n	8006a7a <HAL_RTC_SetDate+0x4c>
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	785b      	ldrb	r3, [r3, #1]
 8006a60:	f003 0310 	and.w	r3, r3, #16
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d008      	beq.n	8006a7a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	785b      	ldrb	r3, [r3, #1]
 8006a6c:	f023 0310 	bic.w	r3, r3, #16
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	330a      	adds	r3, #10
 8006a74:	b2da      	uxtb	r2, r3
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d11c      	bne.n	8006aba <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	78db      	ldrb	r3, [r3, #3]
 8006a84:	4618      	mov	r0, r3
 8006a86:	f000 f927 	bl	8006cd8 <RTC_ByteToBcd2>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	785b      	ldrb	r3, [r3, #1]
 8006a92:	4618      	mov	r0, r3
 8006a94:	f000 f920 	bl	8006cd8 <RTC_ByteToBcd2>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006a9c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	789b      	ldrb	r3, [r3, #2]
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f000 f918 	bl	8006cd8 <RTC_ByteToBcd2>
 8006aa8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006aaa:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	617b      	str	r3, [r7, #20]
 8006ab8:	e00e      	b.n	8006ad8 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	78db      	ldrb	r3, [r3, #3]
 8006abe:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	785b      	ldrb	r3, [r3, #1]
 8006ac4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006ac6:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006acc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	22ca      	movs	r2, #202	; 0xca
 8006ade:	625a      	str	r2, [r3, #36]	; 0x24
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2253      	movs	r2, #83	; 0x53
 8006ae6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f000 f899 	bl	8006c20 <RTC_EnterInitMode>
 8006aee:	4603      	mov	r3, r0
 8006af0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006af2:	7cfb      	ldrb	r3, [r7, #19]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10c      	bne.n	8006b12 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006b02:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006b06:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f000 f8c0 	bl	8006c8e <RTC_ExitInitMode>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006b12:	7cfb      	ldrb	r3, [r7, #19]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d102      	bne.n	8006b1e <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	22ff      	movs	r2, #255	; 0xff
 8006b24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	771a      	strb	r2, [r3, #28]

  return status;
 8006b2c:	7cfb      	ldrb	r3, [r7, #19]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	371c      	adds	r7, #28
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd90      	pop	{r4, r7, pc}

08006b36 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006b36:	b580      	push	{r7, lr}
 8006b38:	b086      	sub	sp, #24
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	60f8      	str	r0, [r7, #12]
 8006b3e:	60b9      	str	r1, [r7, #8]
 8006b40:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006b42:	2300      	movs	r3, #0
 8006b44:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006b50:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006b54:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	0c1b      	lsrs	r3, r3, #16
 8006b5a:	b2da      	uxtb	r2, r3
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	0a1b      	lsrs	r3, r3, #8
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	f003 031f 	and.w	r3, r3, #31
 8006b6a:	b2da      	uxtb	r2, r3
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b78:	b2da      	uxtb	r2, r3
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	0b5b      	lsrs	r3, r3, #13
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	f003 0307 	and.w	r3, r3, #7
 8006b88:	b2da      	uxtb	r2, r3
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d11a      	bne.n	8006bca <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	78db      	ldrb	r3, [r3, #3]
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f000 f8bb 	bl	8006d14 <RTC_Bcd2ToByte>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	785b      	ldrb	r3, [r3, #1]
 8006baa:	4618      	mov	r0, r3
 8006bac:	f000 f8b2 	bl	8006d14 <RTC_Bcd2ToByte>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	789b      	ldrb	r3, [r3, #2]
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f000 f8a9 	bl	8006d14 <RTC_Bcd2ToByte>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3718      	adds	r7, #24
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a0d      	ldr	r2, [pc, #52]	; (8006c1c <HAL_RTC_WaitForSynchro+0x48>)
 8006be6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006be8:	f7fc f974 	bl	8002ed4 <HAL_GetTick>
 8006bec:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006bee:	e009      	b.n	8006c04 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006bf0:	f7fc f970 	bl	8002ed4 <HAL_GetTick>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bfe:	d901      	bls.n	8006c04 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006c00:	2303      	movs	r3, #3
 8006c02:	e007      	b.n	8006c14 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	f003 0320 	and.w	r3, r3, #32
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d0ee      	beq.n	8006bf0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3710      	adds	r7, #16
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	00017f5f 	.word	0x00017f5f

08006c20 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d122      	bne.n	8006c84 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68da      	ldr	r2, [r3, #12]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c4c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006c4e:	f7fc f941 	bl	8002ed4 <HAL_GetTick>
 8006c52:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006c54:	e00c      	b.n	8006c70 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006c56:	f7fc f93d 	bl	8002ed4 <HAL_GetTick>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	1ad3      	subs	r3, r2, r3
 8006c60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c64:	d904      	bls.n	8006c70 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2204      	movs	r2, #4
 8006c6a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d102      	bne.n	8006c84 <RTC_EnterInitMode+0x64>
 8006c7e:	7bfb      	ldrb	r3, [r7, #15]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d1e8      	bne.n	8006c56 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3710      	adds	r7, #16
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006c8e:	b580      	push	{r7, lr}
 8006c90:	b084      	sub	sp, #16
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c96:	2300      	movs	r3, #0
 8006c98:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68da      	ldr	r2, [r3, #12]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ca8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	f003 0320 	and.w	r3, r3, #32
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d10a      	bne.n	8006cce <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f7ff ff8b 	bl	8006bd4 <HAL_RTC_WaitForSynchro>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d004      	beq.n	8006cce <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2204      	movs	r2, #4
 8006cc8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3710      	adds	r7, #16
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	4603      	mov	r3, r0
 8006ce0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8006ce6:	e005      	b.n	8006cf4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	3301      	adds	r3, #1
 8006cec:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8006cee:	79fb      	ldrb	r3, [r7, #7]
 8006cf0:	3b0a      	subs	r3, #10
 8006cf2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006cf4:	79fb      	ldrb	r3, [r7, #7]
 8006cf6:	2b09      	cmp	r3, #9
 8006cf8:	d8f6      	bhi.n	8006ce8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	011b      	lsls	r3, r3, #4
 8006d00:	b2da      	uxtb	r2, r3
 8006d02:	79fb      	ldrb	r3, [r7, #7]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	b2db      	uxtb	r3, r3
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3714      	adds	r7, #20
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b085      	sub	sp, #20
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8006d22:	79fb      	ldrb	r3, [r7, #7]
 8006d24:	091b      	lsrs	r3, r3, #4
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	461a      	mov	r2, r3
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	4413      	add	r3, r2
 8006d30:	005b      	lsls	r3, r3, #1
 8006d32:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	b2da      	uxtb	r2, r3
 8006d38:	79fb      	ldrb	r3, [r7, #7]
 8006d3a:	f003 030f 	and.w	r3, r3, #15
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	4413      	add	r3, r2
 8006d42:	b2db      	uxtb	r3, r3
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3714      	adds	r7, #20
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d101      	bne.n	8006d62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e07b      	b.n	8006e5a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d108      	bne.n	8006d7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d72:	d009      	beq.n	8006d88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	61da      	str	r2, [r3, #28]
 8006d7a:	e005      	b.n	8006d88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d106      	bne.n	8006da8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f7fb fd42 	bl	800282c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2202      	movs	r2, #2
 8006dac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dbe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006dd0:	431a      	orrs	r2, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dda:	431a      	orrs	r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	691b      	ldr	r3, [r3, #16]
 8006de0:	f003 0302 	and.w	r3, r3, #2
 8006de4:	431a      	orrs	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	f003 0301 	and.w	r3, r3, #1
 8006dee:	431a      	orrs	r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	699b      	ldr	r3, [r3, #24]
 8006df4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006df8:	431a      	orrs	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	69db      	ldr	r3, [r3, #28]
 8006dfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e02:	431a      	orrs	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a1b      	ldr	r3, [r3, #32]
 8006e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e0c:	ea42 0103 	orr.w	r1, r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e14:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	430a      	orrs	r2, r1
 8006e1e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	699b      	ldr	r3, [r3, #24]
 8006e24:	0c1b      	lsrs	r3, r3, #16
 8006e26:	f003 0104 	and.w	r1, r3, #4
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2e:	f003 0210 	and.w	r2, r3, #16
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	430a      	orrs	r2, r1
 8006e38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	69da      	ldr	r2, [r3, #28]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3708      	adds	r7, #8
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}

08006e62 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b088      	sub	sp, #32
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	60f8      	str	r0, [r7, #12]
 8006e6a:	60b9      	str	r1, [r7, #8]
 8006e6c:	603b      	str	r3, [r7, #0]
 8006e6e:	4613      	mov	r3, r2
 8006e70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e72:	2300      	movs	r3, #0
 8006e74:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d101      	bne.n	8006e84 <HAL_SPI_Transmit+0x22>
 8006e80:	2302      	movs	r3, #2
 8006e82:	e12d      	b.n	80070e0 <HAL_SPI_Transmit+0x27e>
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e8c:	f7fc f822 	bl	8002ed4 <HAL_GetTick>
 8006e90:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006e92:	88fb      	ldrh	r3, [r7, #6]
 8006e94:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d002      	beq.n	8006ea8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006ea2:	2302      	movs	r3, #2
 8006ea4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006ea6:	e116      	b.n	80070d6 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d002      	beq.n	8006eb4 <HAL_SPI_Transmit+0x52>
 8006eae:	88fb      	ldrh	r3, [r7, #6]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d102      	bne.n	8006eba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006eb8:	e10d      	b.n	80070d6 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2203      	movs	r2, #3
 8006ebe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	88fa      	ldrh	r2, [r7, #6]
 8006ed2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	88fa      	ldrh	r2, [r7, #6]
 8006ed8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f00:	d10f      	bne.n	8006f22 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f20:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f2c:	2b40      	cmp	r3, #64	; 0x40
 8006f2e:	d007      	beq.n	8006f40 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f48:	d14f      	bne.n	8006fea <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d002      	beq.n	8006f58 <HAL_SPI_Transmit+0xf6>
 8006f52:	8afb      	ldrh	r3, [r7, #22]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d142      	bne.n	8006fde <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f5c:	881a      	ldrh	r2, [r3, #0]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f68:	1c9a      	adds	r2, r3, #2
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	3b01      	subs	r3, #1
 8006f76:	b29a      	uxth	r2, r3
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006f7c:	e02f      	b.n	8006fde <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	f003 0302 	and.w	r3, r3, #2
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d112      	bne.n	8006fb2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f90:	881a      	ldrh	r2, [r3, #0]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f9c:	1c9a      	adds	r2, r3, #2
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	b29a      	uxth	r2, r3
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	86da      	strh	r2, [r3, #54]	; 0x36
 8006fb0:	e015      	b.n	8006fde <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fb2:	f7fb ff8f 	bl	8002ed4 <HAL_GetTick>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	683a      	ldr	r2, [r7, #0]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d803      	bhi.n	8006fca <HAL_SPI_Transmit+0x168>
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fc8:	d102      	bne.n	8006fd0 <HAL_SPI_Transmit+0x16e>
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d106      	bne.n	8006fde <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8006fd0:	2303      	movs	r3, #3
 8006fd2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006fdc:	e07b      	b.n	80070d6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d1ca      	bne.n	8006f7e <HAL_SPI_Transmit+0x11c>
 8006fe8:	e050      	b.n	800708c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d002      	beq.n	8006ff8 <HAL_SPI_Transmit+0x196>
 8006ff2:	8afb      	ldrh	r3, [r7, #22]
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d144      	bne.n	8007082 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	330c      	adds	r3, #12
 8007002:	7812      	ldrb	r2, [r2, #0]
 8007004:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800700a:	1c5a      	adds	r2, r3, #1
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007014:	b29b      	uxth	r3, r3
 8007016:	3b01      	subs	r3, #1
 8007018:	b29a      	uxth	r2, r3
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800701e:	e030      	b.n	8007082 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	f003 0302 	and.w	r3, r3, #2
 800702a:	2b02      	cmp	r3, #2
 800702c:	d113      	bne.n	8007056 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	330c      	adds	r3, #12
 8007038:	7812      	ldrb	r2, [r2, #0]
 800703a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007040:	1c5a      	adds	r2, r3, #1
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800704a:	b29b      	uxth	r3, r3
 800704c:	3b01      	subs	r3, #1
 800704e:	b29a      	uxth	r2, r3
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	86da      	strh	r2, [r3, #54]	; 0x36
 8007054:	e015      	b.n	8007082 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007056:	f7fb ff3d 	bl	8002ed4 <HAL_GetTick>
 800705a:	4602      	mov	r2, r0
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	1ad3      	subs	r3, r2, r3
 8007060:	683a      	ldr	r2, [r7, #0]
 8007062:	429a      	cmp	r2, r3
 8007064:	d803      	bhi.n	800706e <HAL_SPI_Transmit+0x20c>
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800706c:	d102      	bne.n	8007074 <HAL_SPI_Transmit+0x212>
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d106      	bne.n	8007082 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8007074:	2303      	movs	r3, #3
 8007076:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8007080:	e029      	b.n	80070d6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007086:	b29b      	uxth	r3, r3
 8007088:	2b00      	cmp	r3, #0
 800708a:	d1c9      	bne.n	8007020 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800708c:	69ba      	ldr	r2, [r7, #24]
 800708e:	6839      	ldr	r1, [r7, #0]
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	f000 fd27 	bl	8007ae4 <SPI_EndRxTxTransaction>
 8007096:	4603      	mov	r3, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d002      	beq.n	80070a2 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2220      	movs	r2, #32
 80070a0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d10a      	bne.n	80070c0 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80070aa:	2300      	movs	r3, #0
 80070ac:	613b      	str	r3, [r7, #16]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	613b      	str	r3, [r7, #16]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	613b      	str	r3, [r7, #16]
 80070be:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d002      	beq.n	80070ce <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	77fb      	strb	r3, [r7, #31]
 80070cc:	e003      	b.n	80070d6 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2201      	movs	r2, #1
 80070d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80070de:	7ffb      	ldrb	r3, [r7, #31]
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3720      	adds	r7, #32
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b088      	sub	sp, #32
 80070ec:	af02      	add	r7, sp, #8
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	603b      	str	r3, [r7, #0]
 80070f4:	4613      	mov	r3, r2
 80070f6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80070f8:	2300      	movs	r3, #0
 80070fa:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007102:	b2db      	uxtb	r3, r3
 8007104:	2b01      	cmp	r3, #1
 8007106:	d002      	beq.n	800710e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8007108:	2302      	movs	r3, #2
 800710a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800710c:	e0fb      	b.n	8007306 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007116:	d112      	bne.n	800713e <HAL_SPI_Receive+0x56>
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d10e      	bne.n	800713e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2204      	movs	r2, #4
 8007124:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007128:	88fa      	ldrh	r2, [r7, #6]
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	9300      	str	r3, [sp, #0]
 800712e:	4613      	mov	r3, r2
 8007130:	68ba      	ldr	r2, [r7, #8]
 8007132:	68b9      	ldr	r1, [r7, #8]
 8007134:	68f8      	ldr	r0, [r7, #12]
 8007136:	f000 f8ef 	bl	8007318 <HAL_SPI_TransmitReceive>
 800713a:	4603      	mov	r3, r0
 800713c:	e0e8      	b.n	8007310 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007144:	2b01      	cmp	r3, #1
 8007146:	d101      	bne.n	800714c <HAL_SPI_Receive+0x64>
 8007148:	2302      	movs	r3, #2
 800714a:	e0e1      	b.n	8007310 <HAL_SPI_Receive+0x228>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007154:	f7fb febe 	bl	8002ed4 <HAL_GetTick>
 8007158:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d002      	beq.n	8007166 <HAL_SPI_Receive+0x7e>
 8007160:	88fb      	ldrh	r3, [r7, #6]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d102      	bne.n	800716c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	75fb      	strb	r3, [r7, #23]
    goto error;
 800716a:	e0cc      	b.n	8007306 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2204      	movs	r2, #4
 8007170:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	68ba      	ldr	r2, [r7, #8]
 800717e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	88fa      	ldrh	r2, [r7, #6]
 8007184:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	88fa      	ldrh	r2, [r7, #6]
 800718a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2200      	movs	r2, #0
 8007190:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2200      	movs	r2, #0
 8007196:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2200      	movs	r2, #0
 800719c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2200      	movs	r2, #0
 80071a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2200      	movs	r2, #0
 80071a8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071b2:	d10f      	bne.n	80071d4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80071d2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071de:	2b40      	cmp	r3, #64	; 0x40
 80071e0:	d007      	beq.n	80071f2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071f0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d16a      	bne.n	80072d0 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80071fa:	e032      	b.n	8007262 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	f003 0301 	and.w	r3, r3, #1
 8007206:	2b01      	cmp	r3, #1
 8007208:	d115      	bne.n	8007236 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f103 020c 	add.w	r2, r3, #12
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007216:	7812      	ldrb	r2, [r2, #0]
 8007218:	b2d2      	uxtb	r2, r2
 800721a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007220:	1c5a      	adds	r2, r3, #1
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800722a:	b29b      	uxth	r3, r3
 800722c:	3b01      	subs	r3, #1
 800722e:	b29a      	uxth	r2, r3
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007234:	e015      	b.n	8007262 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007236:	f7fb fe4d 	bl	8002ed4 <HAL_GetTick>
 800723a:	4602      	mov	r2, r0
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	1ad3      	subs	r3, r2, r3
 8007240:	683a      	ldr	r2, [r7, #0]
 8007242:	429a      	cmp	r2, r3
 8007244:	d803      	bhi.n	800724e <HAL_SPI_Receive+0x166>
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800724c:	d102      	bne.n	8007254 <HAL_SPI_Receive+0x16c>
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d106      	bne.n	8007262 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8007254:	2303      	movs	r3, #3
 8007256:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8007260:	e051      	b.n	8007306 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007266:	b29b      	uxth	r3, r3
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1c7      	bne.n	80071fc <HAL_SPI_Receive+0x114>
 800726c:	e035      	b.n	80072da <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	f003 0301 	and.w	r3, r3, #1
 8007278:	2b01      	cmp	r3, #1
 800727a:	d113      	bne.n	80072a4 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68da      	ldr	r2, [r3, #12]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007286:	b292      	uxth	r2, r2
 8007288:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800728e:	1c9a      	adds	r2, r3, #2
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007298:	b29b      	uxth	r3, r3
 800729a:	3b01      	subs	r3, #1
 800729c:	b29a      	uxth	r2, r3
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80072a2:	e015      	b.n	80072d0 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072a4:	f7fb fe16 	bl	8002ed4 <HAL_GetTick>
 80072a8:	4602      	mov	r2, r0
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	1ad3      	subs	r3, r2, r3
 80072ae:	683a      	ldr	r2, [r7, #0]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d803      	bhi.n	80072bc <HAL_SPI_Receive+0x1d4>
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072ba:	d102      	bne.n	80072c2 <HAL_SPI_Receive+0x1da>
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d106      	bne.n	80072d0 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80072c2:	2303      	movs	r3, #3
 80072c4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2201      	movs	r2, #1
 80072ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80072ce:	e01a      	b.n	8007306 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1c9      	bne.n	800726e <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072da:	693a      	ldr	r2, [r7, #16]
 80072dc:	6839      	ldr	r1, [r7, #0]
 80072de:	68f8      	ldr	r0, [r7, #12]
 80072e0:	f000 fb9a 	bl	8007a18 <SPI_EndRxTransaction>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d002      	beq.n	80072f0 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2220      	movs	r2, #32
 80072ee:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d002      	beq.n	80072fe <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	75fb      	strb	r3, [r7, #23]
 80072fc:	e003      	b.n	8007306 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2201      	movs	r2, #1
 8007302:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2200      	movs	r2, #0
 800730a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800730e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007310:	4618      	mov	r0, r3
 8007312:	3718      	adds	r7, #24
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b08c      	sub	sp, #48	; 0x30
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	607a      	str	r2, [r7, #4]
 8007324:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007326:	2301      	movs	r3, #1
 8007328:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800732a:	2300      	movs	r3, #0
 800732c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007336:	2b01      	cmp	r3, #1
 8007338:	d101      	bne.n	800733e <HAL_SPI_TransmitReceive+0x26>
 800733a:	2302      	movs	r3, #2
 800733c:	e198      	b.n	8007670 <HAL_SPI_TransmitReceive+0x358>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2201      	movs	r2, #1
 8007342:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007346:	f7fb fdc5 	bl	8002ed4 <HAL_GetTick>
 800734a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800735c:	887b      	ldrh	r3, [r7, #2]
 800735e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007360:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007364:	2b01      	cmp	r3, #1
 8007366:	d00f      	beq.n	8007388 <HAL_SPI_TransmitReceive+0x70>
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800736e:	d107      	bne.n	8007380 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d103      	bne.n	8007380 <HAL_SPI_TransmitReceive+0x68>
 8007378:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800737c:	2b04      	cmp	r3, #4
 800737e:	d003      	beq.n	8007388 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007380:	2302      	movs	r3, #2
 8007382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007386:	e16d      	b.n	8007664 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d005      	beq.n	800739a <HAL_SPI_TransmitReceive+0x82>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d002      	beq.n	800739a <HAL_SPI_TransmitReceive+0x82>
 8007394:	887b      	ldrh	r3, [r7, #2]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d103      	bne.n	80073a2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80073a0:	e160      	b.n	8007664 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	2b04      	cmp	r3, #4
 80073ac:	d003      	beq.n	80073b6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2205      	movs	r2, #5
 80073b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2200      	movs	r2, #0
 80073ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	887a      	ldrh	r2, [r7, #2]
 80073c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	887a      	ldrh	r2, [r7, #2]
 80073cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	68ba      	ldr	r2, [r7, #8]
 80073d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	887a      	ldrh	r2, [r7, #2]
 80073d8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	887a      	ldrh	r2, [r7, #2]
 80073de:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2200      	movs	r2, #0
 80073e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2200      	movs	r2, #0
 80073ea:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073f6:	2b40      	cmp	r3, #64	; 0x40
 80073f8:	d007      	beq.n	800740a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007408:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007412:	d17c      	bne.n	800750e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d002      	beq.n	8007422 <HAL_SPI_TransmitReceive+0x10a>
 800741c:	8b7b      	ldrh	r3, [r7, #26]
 800741e:	2b01      	cmp	r3, #1
 8007420:	d16a      	bne.n	80074f8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007426:	881a      	ldrh	r2, [r3, #0]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007432:	1c9a      	adds	r2, r3, #2
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800743c:	b29b      	uxth	r3, r3
 800743e:	3b01      	subs	r3, #1
 8007440:	b29a      	uxth	r2, r3
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007446:	e057      	b.n	80074f8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	f003 0302 	and.w	r3, r3, #2
 8007452:	2b02      	cmp	r3, #2
 8007454:	d11b      	bne.n	800748e <HAL_SPI_TransmitReceive+0x176>
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800745a:	b29b      	uxth	r3, r3
 800745c:	2b00      	cmp	r3, #0
 800745e:	d016      	beq.n	800748e <HAL_SPI_TransmitReceive+0x176>
 8007460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007462:	2b01      	cmp	r3, #1
 8007464:	d113      	bne.n	800748e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800746a:	881a      	ldrh	r2, [r3, #0]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007476:	1c9a      	adds	r2, r3, #2
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007480:	b29b      	uxth	r3, r3
 8007482:	3b01      	subs	r3, #1
 8007484:	b29a      	uxth	r2, r3
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800748a:	2300      	movs	r3, #0
 800748c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	f003 0301 	and.w	r3, r3, #1
 8007498:	2b01      	cmp	r3, #1
 800749a:	d119      	bne.n	80074d0 <HAL_SPI_TransmitReceive+0x1b8>
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d014      	beq.n	80074d0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68da      	ldr	r2, [r3, #12]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b0:	b292      	uxth	r2, r2
 80074b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b8:	1c9a      	adds	r2, r3, #2
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	3b01      	subs	r3, #1
 80074c6:	b29a      	uxth	r2, r3
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80074cc:	2301      	movs	r3, #1
 80074ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80074d0:	f7fb fd00 	bl	8002ed4 <HAL_GetTick>
 80074d4:	4602      	mov	r2, r0
 80074d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d8:	1ad3      	subs	r3, r2, r3
 80074da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074dc:	429a      	cmp	r2, r3
 80074de:	d80b      	bhi.n	80074f8 <HAL_SPI_TransmitReceive+0x1e0>
 80074e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074e6:	d007      	beq.n	80074f8 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80074e8:	2303      	movs	r3, #3
 80074ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2201      	movs	r2, #1
 80074f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80074f6:	e0b5      	b.n	8007664 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d1a2      	bne.n	8007448 <HAL_SPI_TransmitReceive+0x130>
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007506:	b29b      	uxth	r3, r3
 8007508:	2b00      	cmp	r3, #0
 800750a:	d19d      	bne.n	8007448 <HAL_SPI_TransmitReceive+0x130>
 800750c:	e080      	b.n	8007610 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d002      	beq.n	800751c <HAL_SPI_TransmitReceive+0x204>
 8007516:	8b7b      	ldrh	r3, [r7, #26]
 8007518:	2b01      	cmp	r3, #1
 800751a:	d16f      	bne.n	80075fc <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	330c      	adds	r3, #12
 8007526:	7812      	ldrb	r2, [r2, #0]
 8007528:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800752e:	1c5a      	adds	r2, r3, #1
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007538:	b29b      	uxth	r3, r3
 800753a:	3b01      	subs	r3, #1
 800753c:	b29a      	uxth	r2, r3
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007542:	e05b      	b.n	80075fc <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	f003 0302 	and.w	r3, r3, #2
 800754e:	2b02      	cmp	r3, #2
 8007550:	d11c      	bne.n	800758c <HAL_SPI_TransmitReceive+0x274>
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007556:	b29b      	uxth	r3, r3
 8007558:	2b00      	cmp	r3, #0
 800755a:	d017      	beq.n	800758c <HAL_SPI_TransmitReceive+0x274>
 800755c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755e:	2b01      	cmp	r3, #1
 8007560:	d114      	bne.n	800758c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	330c      	adds	r3, #12
 800756c:	7812      	ldrb	r2, [r2, #0]
 800756e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007574:	1c5a      	adds	r2, r3, #1
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800757e:	b29b      	uxth	r3, r3
 8007580:	3b01      	subs	r3, #1
 8007582:	b29a      	uxth	r2, r3
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007588:	2300      	movs	r3, #0
 800758a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	f003 0301 	and.w	r3, r3, #1
 8007596:	2b01      	cmp	r3, #1
 8007598:	d119      	bne.n	80075ce <HAL_SPI_TransmitReceive+0x2b6>
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800759e:	b29b      	uxth	r3, r3
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d014      	beq.n	80075ce <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	68da      	ldr	r2, [r3, #12]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ae:	b2d2      	uxtb	r2, r2
 80075b0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b6:	1c5a      	adds	r2, r3, #1
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	3b01      	subs	r3, #1
 80075c4:	b29a      	uxth	r2, r3
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80075ca:	2301      	movs	r3, #1
 80075cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80075ce:	f7fb fc81 	bl	8002ed4 <HAL_GetTick>
 80075d2:	4602      	mov	r2, r0
 80075d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d6:	1ad3      	subs	r3, r2, r3
 80075d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075da:	429a      	cmp	r2, r3
 80075dc:	d803      	bhi.n	80075e6 <HAL_SPI_TransmitReceive+0x2ce>
 80075de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075e4:	d102      	bne.n	80075ec <HAL_SPI_TransmitReceive+0x2d4>
 80075e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d107      	bne.n	80075fc <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80075ec:	2303      	movs	r3, #3
 80075ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2201      	movs	r2, #1
 80075f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80075fa:	e033      	b.n	8007664 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007600:	b29b      	uxth	r3, r3
 8007602:	2b00      	cmp	r3, #0
 8007604:	d19e      	bne.n	8007544 <HAL_SPI_TransmitReceive+0x22c>
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800760a:	b29b      	uxth	r3, r3
 800760c:	2b00      	cmp	r3, #0
 800760e:	d199      	bne.n	8007544 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007612:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007614:	68f8      	ldr	r0, [r7, #12]
 8007616:	f000 fa65 	bl	8007ae4 <SPI_EndRxTxTransaction>
 800761a:	4603      	mov	r3, r0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d006      	beq.n	800762e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2220      	movs	r2, #32
 800762a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800762c:	e01a      	b.n	8007664 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d10a      	bne.n	800764c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007636:	2300      	movs	r3, #0
 8007638:	617b      	str	r3, [r7, #20]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	617b      	str	r3, [r7, #20]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	617b      	str	r3, [r7, #20]
 800764a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007650:	2b00      	cmp	r3, #0
 8007652:	d003      	beq.n	800765c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800765a:	e003      	b.n	8007664 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2200      	movs	r2, #0
 8007668:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800766c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007670:	4618      	mov	r0, r3
 8007672:	3730      	adds	r7, #48	; 0x30
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b086      	sub	sp, #24
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	4613      	mov	r3, r2
 8007684:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007686:	2300      	movs	r3, #0
 8007688:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007690:	2b01      	cmp	r3, #1
 8007692:	d101      	bne.n	8007698 <HAL_SPI_Transmit_DMA+0x20>
 8007694:	2302      	movs	r3, #2
 8007696:	e097      	b.n	80077c8 <HAL_SPI_Transmit_DMA+0x150>
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d002      	beq.n	80076b2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80076ac:	2302      	movs	r3, #2
 80076ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 80076b0:	e085      	b.n	80077be <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d002      	beq.n	80076be <HAL_SPI_Transmit_DMA+0x46>
 80076b8:	88fb      	ldrh	r3, [r7, #6]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d102      	bne.n	80076c4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80076c2:	e07c      	b.n	80077be <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2203      	movs	r2, #3
 80076c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	68ba      	ldr	r2, [r7, #8]
 80076d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	88fa      	ldrh	r2, [r7, #6]
 80076dc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	88fa      	ldrh	r2, [r7, #6]
 80076e2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2200      	movs	r2, #0
 80076e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2200      	movs	r2, #0
 80076ee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2200      	movs	r2, #0
 8007700:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800770a:	d10f      	bne.n	800772c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800771a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800772a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007730:	4a27      	ldr	r2, [pc, #156]	; (80077d0 <HAL_SPI_Transmit_DMA+0x158>)
 8007732:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007738:	4a26      	ldr	r2, [pc, #152]	; (80077d4 <HAL_SPI_Transmit_DMA+0x15c>)
 800773a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007740:	4a25      	ldr	r2, [pc, #148]	; (80077d8 <HAL_SPI_Transmit_DMA+0x160>)
 8007742:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007748:	2200      	movs	r2, #0
 800774a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007754:	4619      	mov	r1, r3
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	330c      	adds	r3, #12
 800775c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007762:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007764:	f7fc fc0e 	bl	8003f84 <HAL_DMA_Start_IT>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d008      	beq.n	8007780 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007772:	f043 0210 	orr.w	r2, r3, #16
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	75fb      	strb	r3, [r7, #23]

    goto error;
 800777e:	e01e      	b.n	80077be <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800778a:	2b40      	cmp	r3, #64	; 0x40
 800778c:	d007      	beq.n	800779e <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800779c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	685a      	ldr	r2, [r3, #4]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f042 0220 	orr.w	r2, r2, #32
 80077ac:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	685a      	ldr	r2, [r3, #4]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f042 0202 	orr.w	r2, r2, #2
 80077bc:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80077c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3718      	adds	r7, #24
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	080078ad 	.word	0x080078ad
 80077d4:	08007805 	.word	0x08007805
 80077d8:	080078c9 	.word	0x080078c9

080077dc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80077e4:	bf00      	nop
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80077f8:	bf00      	nop
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b086      	sub	sp, #24
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007810:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007812:	f7fb fb5f 	bl	8002ed4 <HAL_GetTick>
 8007816:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007826:	d03b      	beq.n	80078a0 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	685a      	ldr	r2, [r3, #4]
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f022 0220 	bic.w	r2, r2, #32
 8007836:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	685a      	ldr	r2, [r3, #4]
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f022 0202 	bic.w	r2, r2, #2
 8007846:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007848:	693a      	ldr	r2, [r7, #16]
 800784a:	2164      	movs	r1, #100	; 0x64
 800784c:	6978      	ldr	r0, [r7, #20]
 800784e:	f000 f949 	bl	8007ae4 <SPI_EndRxTxTransaction>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d005      	beq.n	8007864 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800785c:	f043 0220 	orr.w	r2, r3, #32
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d10a      	bne.n	8007882 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800786c:	2300      	movs	r3, #0
 800786e:	60fb      	str	r3, [r7, #12]
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	68db      	ldr	r3, [r3, #12]
 8007876:	60fb      	str	r3, [r7, #12]
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	60fb      	str	r3, [r7, #12]
 8007880:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	2200      	movs	r2, #0
 8007886:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007894:	2b00      	cmp	r3, #0
 8007896:	d003      	beq.n	80078a0 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007898:	6978      	ldr	r0, [r7, #20]
 800789a:	f7ff ffa9 	bl	80077f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800789e:	e002      	b.n	80078a6 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80078a0:	6978      	ldr	r0, [r7, #20]
 80078a2:	f7fb f9e1 	bl	8002c68 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80078a6:	3718      	adds	r7, #24
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b8:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f7ff ff8e 	bl	80077dc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80078c0:	bf00      	nop
 80078c2:	3710      	adds	r7, #16
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	685a      	ldr	r2, [r3, #4]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f022 0203 	bic.w	r2, r2, #3
 80078e4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ea:	f043 0210 	orr.w	r2, r3, #16
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2201      	movs	r2, #1
 80078f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80078fa:	68f8      	ldr	r0, [r7, #12]
 80078fc:	f7ff ff78 	bl	80077f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007900:	bf00      	nop
 8007902:	3710      	adds	r7, #16
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b088      	sub	sp, #32
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	603b      	str	r3, [r7, #0]
 8007914:	4613      	mov	r3, r2
 8007916:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007918:	f7fb fadc 	bl	8002ed4 <HAL_GetTick>
 800791c:	4602      	mov	r2, r0
 800791e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007920:	1a9b      	subs	r3, r3, r2
 8007922:	683a      	ldr	r2, [r7, #0]
 8007924:	4413      	add	r3, r2
 8007926:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007928:	f7fb fad4 	bl	8002ed4 <HAL_GetTick>
 800792c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800792e:	4b39      	ldr	r3, [pc, #228]	; (8007a14 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	015b      	lsls	r3, r3, #5
 8007934:	0d1b      	lsrs	r3, r3, #20
 8007936:	69fa      	ldr	r2, [r7, #28]
 8007938:	fb02 f303 	mul.w	r3, r2, r3
 800793c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800793e:	e054      	b.n	80079ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007946:	d050      	beq.n	80079ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007948:	f7fb fac4 	bl	8002ed4 <HAL_GetTick>
 800794c:	4602      	mov	r2, r0
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	1ad3      	subs	r3, r2, r3
 8007952:	69fa      	ldr	r2, [r7, #28]
 8007954:	429a      	cmp	r2, r3
 8007956:	d902      	bls.n	800795e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d13d      	bne.n	80079da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	685a      	ldr	r2, [r3, #4]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800796c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007976:	d111      	bne.n	800799c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007980:	d004      	beq.n	800798c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800798a:	d107      	bne.n	800799c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800799a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079a4:	d10f      	bne.n	80079c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80079b4:	601a      	str	r2, [r3, #0]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80079c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2201      	movs	r2, #1
 80079ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80079d6:	2303      	movs	r3, #3
 80079d8:	e017      	b.n	8007a0a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d101      	bne.n	80079e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80079e0:	2300      	movs	r3, #0
 80079e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	3b01      	subs	r3, #1
 80079e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	689a      	ldr	r2, [r3, #8]
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	4013      	ands	r3, r2
 80079f4:	68ba      	ldr	r2, [r7, #8]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	bf0c      	ite	eq
 80079fa:	2301      	moveq	r3, #1
 80079fc:	2300      	movne	r3, #0
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	461a      	mov	r2, r3
 8007a02:	79fb      	ldrb	r3, [r7, #7]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d19b      	bne.n	8007940 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007a08:	2300      	movs	r3, #0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3720      	adds	r7, #32
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	2000001c 	.word	0x2000001c

08007a18 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b086      	sub	sp, #24
 8007a1c:	af02      	add	r7, sp, #8
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a2c:	d111      	bne.n	8007a52 <SPI_EndRxTransaction+0x3a>
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a36:	d004      	beq.n	8007a42 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a40:	d107      	bne.n	8007a52 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a50:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a5a:	d12a      	bne.n	8007ab2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a64:	d012      	beq.n	8007a8c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	9300      	str	r3, [sp, #0]
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	2180      	movs	r1, #128	; 0x80
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f7ff ff49 	bl	8007908 <SPI_WaitFlagStateUntilTimeout>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d02d      	beq.n	8007ad8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a80:	f043 0220 	orr.w	r2, r3, #32
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007a88:	2303      	movs	r3, #3
 8007a8a:	e026      	b.n	8007ada <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	9300      	str	r3, [sp, #0]
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	2200      	movs	r2, #0
 8007a94:	2101      	movs	r1, #1
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f7ff ff36 	bl	8007908 <SPI_WaitFlagStateUntilTimeout>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d01a      	beq.n	8007ad8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aa6:	f043 0220 	orr.w	r2, r3, #32
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007aae:	2303      	movs	r3, #3
 8007ab0:	e013      	b.n	8007ada <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	9300      	str	r3, [sp, #0]
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	2101      	movs	r1, #1
 8007abc:	68f8      	ldr	r0, [r7, #12]
 8007abe:	f7ff ff23 	bl	8007908 <SPI_WaitFlagStateUntilTimeout>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d007      	beq.n	8007ad8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007acc:	f043 0220 	orr.w	r2, r3, #32
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	e000      	b.n	8007ada <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3710      	adds	r7, #16
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
	...

08007ae4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b088      	sub	sp, #32
 8007ae8:	af02      	add	r7, sp, #8
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	9300      	str	r3, [sp, #0]
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	2201      	movs	r2, #1
 8007af8:	2102      	movs	r1, #2
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	f7ff ff04 	bl	8007908 <SPI_WaitFlagStateUntilTimeout>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d007      	beq.n	8007b16 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b0a:	f043 0220 	orr.w	r2, r3, #32
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007b12:	2303      	movs	r3, #3
 8007b14:	e032      	b.n	8007b7c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007b16:	4b1b      	ldr	r3, [pc, #108]	; (8007b84 <SPI_EndRxTxTransaction+0xa0>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a1b      	ldr	r2, [pc, #108]	; (8007b88 <SPI_EndRxTxTransaction+0xa4>)
 8007b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b20:	0d5b      	lsrs	r3, r3, #21
 8007b22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007b26:	fb02 f303 	mul.w	r3, r2, r3
 8007b2a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b34:	d112      	bne.n	8007b5c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	9300      	str	r3, [sp, #0]
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	2180      	movs	r1, #128	; 0x80
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f7ff fee1 	bl	8007908 <SPI_WaitFlagStateUntilTimeout>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d016      	beq.n	8007b7a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b50:	f043 0220 	orr.w	r2, r3, #32
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	e00f      	b.n	8007b7c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d00a      	beq.n	8007b78 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	3b01      	subs	r3, #1
 8007b66:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b72:	2b80      	cmp	r3, #128	; 0x80
 8007b74:	d0f2      	beq.n	8007b5c <SPI_EndRxTxTransaction+0x78>
 8007b76:	e000      	b.n	8007b7a <SPI_EndRxTxTransaction+0x96>
        break;
 8007b78:	bf00      	nop
  }

  return HAL_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3718      	adds	r7, #24
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	2000001c 	.word	0x2000001c
 8007b88:	165e9f81 	.word	0x165e9f81

08007b8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b082      	sub	sp, #8
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d101      	bne.n	8007b9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e041      	b.n	8007c22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d106      	bne.n	8007bb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f7fa ff3c 	bl	8002a30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2202      	movs	r2, #2
 8007bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	3304      	adds	r3, #4
 8007bc8:	4619      	mov	r1, r3
 8007bca:	4610      	mov	r0, r2
 8007bcc:	f000 f9c0 	bl	8007f50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c20:	2300      	movs	r3, #0
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3708      	adds	r7, #8
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
	...

08007c2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b085      	sub	sp, #20
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d001      	beq.n	8007c44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	e04e      	b.n	8007ce2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2202      	movs	r2, #2
 8007c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	68da      	ldr	r2, [r3, #12]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f042 0201 	orr.w	r2, r2, #1
 8007c5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a23      	ldr	r2, [pc, #140]	; (8007cf0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d022      	beq.n	8007cac <HAL_TIM_Base_Start_IT+0x80>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c6e:	d01d      	beq.n	8007cac <HAL_TIM_Base_Start_IT+0x80>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a1f      	ldr	r2, [pc, #124]	; (8007cf4 <HAL_TIM_Base_Start_IT+0xc8>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d018      	beq.n	8007cac <HAL_TIM_Base_Start_IT+0x80>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a1e      	ldr	r2, [pc, #120]	; (8007cf8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d013      	beq.n	8007cac <HAL_TIM_Base_Start_IT+0x80>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a1c      	ldr	r2, [pc, #112]	; (8007cfc <HAL_TIM_Base_Start_IT+0xd0>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d00e      	beq.n	8007cac <HAL_TIM_Base_Start_IT+0x80>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a1b      	ldr	r2, [pc, #108]	; (8007d00 <HAL_TIM_Base_Start_IT+0xd4>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d009      	beq.n	8007cac <HAL_TIM_Base_Start_IT+0x80>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a19      	ldr	r2, [pc, #100]	; (8007d04 <HAL_TIM_Base_Start_IT+0xd8>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d004      	beq.n	8007cac <HAL_TIM_Base_Start_IT+0x80>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a18      	ldr	r2, [pc, #96]	; (8007d08 <HAL_TIM_Base_Start_IT+0xdc>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d111      	bne.n	8007cd0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	f003 0307 	and.w	r3, r3, #7
 8007cb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2b06      	cmp	r3, #6
 8007cbc:	d010      	beq.n	8007ce0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f042 0201 	orr.w	r2, r2, #1
 8007ccc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cce:	e007      	b.n	8007ce0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f042 0201 	orr.w	r2, r2, #1
 8007cde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3714      	adds	r7, #20
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop
 8007cf0:	40010000 	.word	0x40010000
 8007cf4:	40000400 	.word	0x40000400
 8007cf8:	40000800 	.word	0x40000800
 8007cfc:	40000c00 	.word	0x40000c00
 8007d00:	40010400 	.word	0x40010400
 8007d04:	40014000 	.word	0x40014000
 8007d08:	40001800 	.word	0x40001800

08007d0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	691b      	ldr	r3, [r3, #16]
 8007d22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	f003 0302 	and.w	r3, r3, #2
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d020      	beq.n	8007d70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f003 0302 	and.w	r3, r3, #2
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d01b      	beq.n	8007d70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f06f 0202 	mvn.w	r2, #2
 8007d40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2201      	movs	r2, #1
 8007d46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	699b      	ldr	r3, [r3, #24]
 8007d4e:	f003 0303 	and.w	r3, r3, #3
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d003      	beq.n	8007d5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 f8dc 	bl	8007f14 <HAL_TIM_IC_CaptureCallback>
 8007d5c:	e005      	b.n	8007d6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 f8ce 	bl	8007f00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 f8df 	bl	8007f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	f003 0304 	and.w	r3, r3, #4
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d020      	beq.n	8007dbc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f003 0304 	and.w	r3, r3, #4
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d01b      	beq.n	8007dbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f06f 0204 	mvn.w	r2, #4
 8007d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2202      	movs	r2, #2
 8007d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	699b      	ldr	r3, [r3, #24]
 8007d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d003      	beq.n	8007daa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 f8b6 	bl	8007f14 <HAL_TIM_IC_CaptureCallback>
 8007da8:	e005      	b.n	8007db6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 f8a8 	bl	8007f00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 f8b9 	bl	8007f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	f003 0308 	and.w	r3, r3, #8
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d020      	beq.n	8007e08 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f003 0308 	and.w	r3, r3, #8
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d01b      	beq.n	8007e08 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f06f 0208 	mvn.w	r2, #8
 8007dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2204      	movs	r2, #4
 8007dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	69db      	ldr	r3, [r3, #28]
 8007de6:	f003 0303 	and.w	r3, r3, #3
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d003      	beq.n	8007df6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 f890 	bl	8007f14 <HAL_TIM_IC_CaptureCallback>
 8007df4:	e005      	b.n	8007e02 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 f882 	bl	8007f00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 f893 	bl	8007f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	f003 0310 	and.w	r3, r3, #16
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d020      	beq.n	8007e54 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f003 0310 	and.w	r3, r3, #16
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d01b      	beq.n	8007e54 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f06f 0210 	mvn.w	r2, #16
 8007e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2208      	movs	r2, #8
 8007e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	69db      	ldr	r3, [r3, #28]
 8007e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d003      	beq.n	8007e42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 f86a 	bl	8007f14 <HAL_TIM_IC_CaptureCallback>
 8007e40:	e005      	b.n	8007e4e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 f85c 	bl	8007f00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 f86d 	bl	8007f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	f003 0301 	and.w	r3, r3, #1
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d00c      	beq.n	8007e78 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f003 0301 	and.w	r3, r3, #1
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d007      	beq.n	8007e78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f06f 0201 	mvn.w	r2, #1
 8007e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 f83a 	bl	8007eec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00c      	beq.n	8007e9c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d007      	beq.n	8007e9c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 f98c 	bl	80081b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d00c      	beq.n	8007ec0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d007      	beq.n	8007ec0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 f83e 	bl	8007f3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	f003 0320 	and.w	r3, r3, #32
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00c      	beq.n	8007ee4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f003 0320 	and.w	r3, r3, #32
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d007      	beq.n	8007ee4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f06f 0220 	mvn.w	r2, #32
 8007edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 f95e 	bl	80081a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ee4:	bf00      	nop
 8007ee6:	3710      	adds	r7, #16
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007ef4:	bf00      	nop
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b083      	sub	sp, #12
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f08:	bf00      	nop
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f1c:	bf00      	nop
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f30:	bf00      	nop
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f44:	bf00      	nop
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	4a46      	ldr	r2, [pc, #280]	; (800807c <TIM_Base_SetConfig+0x12c>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d013      	beq.n	8007f90 <TIM_Base_SetConfig+0x40>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f6e:	d00f      	beq.n	8007f90 <TIM_Base_SetConfig+0x40>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	4a43      	ldr	r2, [pc, #268]	; (8008080 <TIM_Base_SetConfig+0x130>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d00b      	beq.n	8007f90 <TIM_Base_SetConfig+0x40>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	4a42      	ldr	r2, [pc, #264]	; (8008084 <TIM_Base_SetConfig+0x134>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d007      	beq.n	8007f90 <TIM_Base_SetConfig+0x40>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a41      	ldr	r2, [pc, #260]	; (8008088 <TIM_Base_SetConfig+0x138>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d003      	beq.n	8007f90 <TIM_Base_SetConfig+0x40>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	4a40      	ldr	r2, [pc, #256]	; (800808c <TIM_Base_SetConfig+0x13c>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d108      	bne.n	8007fa2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4a35      	ldr	r2, [pc, #212]	; (800807c <TIM_Base_SetConfig+0x12c>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d02b      	beq.n	8008002 <TIM_Base_SetConfig+0xb2>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fb0:	d027      	beq.n	8008002 <TIM_Base_SetConfig+0xb2>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4a32      	ldr	r2, [pc, #200]	; (8008080 <TIM_Base_SetConfig+0x130>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d023      	beq.n	8008002 <TIM_Base_SetConfig+0xb2>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4a31      	ldr	r2, [pc, #196]	; (8008084 <TIM_Base_SetConfig+0x134>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d01f      	beq.n	8008002 <TIM_Base_SetConfig+0xb2>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a30      	ldr	r2, [pc, #192]	; (8008088 <TIM_Base_SetConfig+0x138>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d01b      	beq.n	8008002 <TIM_Base_SetConfig+0xb2>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4a2f      	ldr	r2, [pc, #188]	; (800808c <TIM_Base_SetConfig+0x13c>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d017      	beq.n	8008002 <TIM_Base_SetConfig+0xb2>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4a2e      	ldr	r2, [pc, #184]	; (8008090 <TIM_Base_SetConfig+0x140>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d013      	beq.n	8008002 <TIM_Base_SetConfig+0xb2>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4a2d      	ldr	r2, [pc, #180]	; (8008094 <TIM_Base_SetConfig+0x144>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d00f      	beq.n	8008002 <TIM_Base_SetConfig+0xb2>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4a2c      	ldr	r2, [pc, #176]	; (8008098 <TIM_Base_SetConfig+0x148>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d00b      	beq.n	8008002 <TIM_Base_SetConfig+0xb2>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a2b      	ldr	r2, [pc, #172]	; (800809c <TIM_Base_SetConfig+0x14c>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d007      	beq.n	8008002 <TIM_Base_SetConfig+0xb2>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a2a      	ldr	r2, [pc, #168]	; (80080a0 <TIM_Base_SetConfig+0x150>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d003      	beq.n	8008002 <TIM_Base_SetConfig+0xb2>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a29      	ldr	r2, [pc, #164]	; (80080a4 <TIM_Base_SetConfig+0x154>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d108      	bne.n	8008014 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008008:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	68fa      	ldr	r2, [r7, #12]
 8008010:	4313      	orrs	r3, r2
 8008012:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	695b      	ldr	r3, [r3, #20]
 800801e:	4313      	orrs	r3, r2
 8008020:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	689a      	ldr	r2, [r3, #8]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	4a10      	ldr	r2, [pc, #64]	; (800807c <TIM_Base_SetConfig+0x12c>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d003      	beq.n	8008048 <TIM_Base_SetConfig+0xf8>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a12      	ldr	r2, [pc, #72]	; (800808c <TIM_Base_SetConfig+0x13c>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d103      	bne.n	8008050 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	691a      	ldr	r2, [r3, #16]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	691b      	ldr	r3, [r3, #16]
 800805a:	f003 0301 	and.w	r3, r3, #1
 800805e:	2b01      	cmp	r3, #1
 8008060:	d105      	bne.n	800806e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	f023 0201 	bic.w	r2, r3, #1
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	611a      	str	r2, [r3, #16]
  }
}
 800806e:	bf00      	nop
 8008070:	3714      	adds	r7, #20
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr
 800807a:	bf00      	nop
 800807c:	40010000 	.word	0x40010000
 8008080:	40000400 	.word	0x40000400
 8008084:	40000800 	.word	0x40000800
 8008088:	40000c00 	.word	0x40000c00
 800808c:	40010400 	.word	0x40010400
 8008090:	40014000 	.word	0x40014000
 8008094:	40014400 	.word	0x40014400
 8008098:	40014800 	.word	0x40014800
 800809c:	40001800 	.word	0x40001800
 80080a0:	40001c00 	.word	0x40001c00
 80080a4:	40002000 	.word	0x40002000

080080a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d101      	bne.n	80080c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080bc:	2302      	movs	r3, #2
 80080be:	e05a      	b.n	8008176 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2202      	movs	r2, #2
 80080cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	68fa      	ldr	r2, [r7, #12]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	68fa      	ldr	r2, [r7, #12]
 80080f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a21      	ldr	r2, [pc, #132]	; (8008184 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d022      	beq.n	800814a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800810c:	d01d      	beq.n	800814a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a1d      	ldr	r2, [pc, #116]	; (8008188 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d018      	beq.n	800814a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a1b      	ldr	r2, [pc, #108]	; (800818c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d013      	beq.n	800814a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a1a      	ldr	r2, [pc, #104]	; (8008190 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d00e      	beq.n	800814a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a18      	ldr	r2, [pc, #96]	; (8008194 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d009      	beq.n	800814a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a17      	ldr	r2, [pc, #92]	; (8008198 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d004      	beq.n	800814a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a15      	ldr	r2, [pc, #84]	; (800819c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d10c      	bne.n	8008164 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008150:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	68ba      	ldr	r2, [r7, #8]
 8008158:	4313      	orrs	r3, r2
 800815a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	68ba      	ldr	r2, [r7, #8]
 8008162:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2201      	movs	r2, #1
 8008168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	3714      	adds	r7, #20
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr
 8008182:	bf00      	nop
 8008184:	40010000 	.word	0x40010000
 8008188:	40000400 	.word	0x40000400
 800818c:	40000800 	.word	0x40000800
 8008190:	40000c00 	.word	0x40000c00
 8008194:	40010400 	.word	0x40010400
 8008198:	40014000 	.word	0x40014000
 800819c:	40001800 	.word	0x40001800

080081a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80081a8:	bf00      	nop
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80081bc:	bf00      	nop
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d101      	bne.n	80081da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081d6:	2301      	movs	r3, #1
 80081d8:	e042      	b.n	8008260 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d106      	bne.n	80081f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f7fa fc64 	bl	8002abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2224      	movs	r2, #36	; 0x24
 80081f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	68da      	ldr	r2, [r3, #12]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800820a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 fdbd 	bl	8008d8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	691a      	ldr	r2, [r3, #16]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008220:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	695a      	ldr	r2, [r3, #20]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008230:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	68da      	ldr	r2, [r3, #12]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008240:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2220      	movs	r2, #32
 800824c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2220      	movs	r2, #32
 8008254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800825e:	2300      	movs	r3, #0
}
 8008260:	4618      	mov	r0, r3
 8008262:	3708      	adds	r7, #8
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b08a      	sub	sp, #40	; 0x28
 800826c:	af02      	add	r7, sp, #8
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	603b      	str	r3, [r7, #0]
 8008274:	4613      	mov	r3, r2
 8008276:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008278:	2300      	movs	r3, #0
 800827a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008282:	b2db      	uxtb	r3, r3
 8008284:	2b20      	cmp	r3, #32
 8008286:	d175      	bne.n	8008374 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d002      	beq.n	8008294 <HAL_UART_Transmit+0x2c>
 800828e:	88fb      	ldrh	r3, [r7, #6]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d101      	bne.n	8008298 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008294:	2301      	movs	r3, #1
 8008296:	e06e      	b.n	8008376 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2200      	movs	r2, #0
 800829c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2221      	movs	r2, #33	; 0x21
 80082a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80082a6:	f7fa fe15 	bl	8002ed4 <HAL_GetTick>
 80082aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	88fa      	ldrh	r2, [r7, #6]
 80082b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	88fa      	ldrh	r2, [r7, #6]
 80082b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082c0:	d108      	bne.n	80082d4 <HAL_UART_Transmit+0x6c>
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	691b      	ldr	r3, [r3, #16]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d104      	bne.n	80082d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80082ca:	2300      	movs	r3, #0
 80082cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	61bb      	str	r3, [r7, #24]
 80082d2:	e003      	b.n	80082dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80082d8:	2300      	movs	r3, #0
 80082da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80082dc:	e02e      	b.n	800833c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	9300      	str	r3, [sp, #0]
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	2200      	movs	r2, #0
 80082e6:	2180      	movs	r1, #128	; 0x80
 80082e8:	68f8      	ldr	r0, [r7, #12]
 80082ea:	f000 fb1f 	bl	800892c <UART_WaitOnFlagUntilTimeout>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d005      	beq.n	8008300 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2220      	movs	r2, #32
 80082f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80082fc:	2303      	movs	r3, #3
 80082fe:	e03a      	b.n	8008376 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d10b      	bne.n	800831e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008306:	69bb      	ldr	r3, [r7, #24]
 8008308:	881b      	ldrh	r3, [r3, #0]
 800830a:	461a      	mov	r2, r3
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008314:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	3302      	adds	r3, #2
 800831a:	61bb      	str	r3, [r7, #24]
 800831c:	e007      	b.n	800832e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	781a      	ldrb	r2, [r3, #0]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	3301      	adds	r3, #1
 800832c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008332:	b29b      	uxth	r3, r3
 8008334:	3b01      	subs	r3, #1
 8008336:	b29a      	uxth	r2, r3
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008340:	b29b      	uxth	r3, r3
 8008342:	2b00      	cmp	r3, #0
 8008344:	d1cb      	bne.n	80082de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	9300      	str	r3, [sp, #0]
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	2200      	movs	r2, #0
 800834e:	2140      	movs	r1, #64	; 0x40
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	f000 faeb 	bl	800892c <UART_WaitOnFlagUntilTimeout>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d005      	beq.n	8008368 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2220      	movs	r2, #32
 8008360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8008364:	2303      	movs	r3, #3
 8008366:	e006      	b.n	8008376 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2220      	movs	r2, #32
 800836c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8008370:	2300      	movs	r3, #0
 8008372:	e000      	b.n	8008376 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008374:	2302      	movs	r3, #2
  }
}
 8008376:	4618      	mov	r0, r3
 8008378:	3720      	adds	r7, #32
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b084      	sub	sp, #16
 8008382:	af00      	add	r7, sp, #0
 8008384:	60f8      	str	r0, [r7, #12]
 8008386:	60b9      	str	r1, [r7, #8]
 8008388:	4613      	mov	r3, r2
 800838a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008392:	b2db      	uxtb	r3, r3
 8008394:	2b20      	cmp	r3, #32
 8008396:	d112      	bne.n	80083be <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d002      	beq.n	80083a4 <HAL_UART_Receive_IT+0x26>
 800839e:	88fb      	ldrh	r3, [r7, #6]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d101      	bne.n	80083a8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	e00b      	b.n	80083c0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2200      	movs	r2, #0
 80083ac:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80083ae:	88fb      	ldrh	r3, [r7, #6]
 80083b0:	461a      	mov	r2, r3
 80083b2:	68b9      	ldr	r1, [r7, #8]
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f000 fb12 	bl	80089de <UART_Start_Receive_IT>
 80083ba:	4603      	mov	r3, r0
 80083bc:	e000      	b.n	80083c0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80083be:	2302      	movs	r3, #2
  }
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3710      	adds	r7, #16
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b0ba      	sub	sp, #232	; 0xe8
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	695b      	ldr	r3, [r3, #20]
 80083ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80083ee:	2300      	movs	r3, #0
 80083f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80083f4:	2300      	movs	r3, #0
 80083f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80083fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083fe:	f003 030f 	and.w	r3, r3, #15
 8008402:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008406:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800840a:	2b00      	cmp	r3, #0
 800840c:	d10f      	bne.n	800842e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800840e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008412:	f003 0320 	and.w	r3, r3, #32
 8008416:	2b00      	cmp	r3, #0
 8008418:	d009      	beq.n	800842e <HAL_UART_IRQHandler+0x66>
 800841a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800841e:	f003 0320 	and.w	r3, r3, #32
 8008422:	2b00      	cmp	r3, #0
 8008424:	d003      	beq.n	800842e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 fbf2 	bl	8008c10 <UART_Receive_IT>
      return;
 800842c:	e25b      	b.n	80088e6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800842e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008432:	2b00      	cmp	r3, #0
 8008434:	f000 80de 	beq.w	80085f4 <HAL_UART_IRQHandler+0x22c>
 8008438:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800843c:	f003 0301 	and.w	r3, r3, #1
 8008440:	2b00      	cmp	r3, #0
 8008442:	d106      	bne.n	8008452 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008448:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800844c:	2b00      	cmp	r3, #0
 800844e:	f000 80d1 	beq.w	80085f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008456:	f003 0301 	and.w	r3, r3, #1
 800845a:	2b00      	cmp	r3, #0
 800845c:	d00b      	beq.n	8008476 <HAL_UART_IRQHandler+0xae>
 800845e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008466:	2b00      	cmp	r3, #0
 8008468:	d005      	beq.n	8008476 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800846e:	f043 0201 	orr.w	r2, r3, #1
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800847a:	f003 0304 	and.w	r3, r3, #4
 800847e:	2b00      	cmp	r3, #0
 8008480:	d00b      	beq.n	800849a <HAL_UART_IRQHandler+0xd2>
 8008482:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008486:	f003 0301 	and.w	r3, r3, #1
 800848a:	2b00      	cmp	r3, #0
 800848c:	d005      	beq.n	800849a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008492:	f043 0202 	orr.w	r2, r3, #2
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800849a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800849e:	f003 0302 	and.w	r3, r3, #2
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00b      	beq.n	80084be <HAL_UART_IRQHandler+0xf6>
 80084a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084aa:	f003 0301 	and.w	r3, r3, #1
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d005      	beq.n	80084be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084b6:	f043 0204 	orr.w	r2, r3, #4
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80084be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084c2:	f003 0308 	and.w	r3, r3, #8
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d011      	beq.n	80084ee <HAL_UART_IRQHandler+0x126>
 80084ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084ce:	f003 0320 	and.w	r3, r3, #32
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d105      	bne.n	80084e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80084d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084da:	f003 0301 	and.w	r3, r3, #1
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d005      	beq.n	80084ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084e6:	f043 0208 	orr.w	r2, r3, #8
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	f000 81f2 	beq.w	80088dc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80084f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084fc:	f003 0320 	and.w	r3, r3, #32
 8008500:	2b00      	cmp	r3, #0
 8008502:	d008      	beq.n	8008516 <HAL_UART_IRQHandler+0x14e>
 8008504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008508:	f003 0320 	and.w	r3, r3, #32
 800850c:	2b00      	cmp	r3, #0
 800850e:	d002      	beq.n	8008516 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 fb7d 	bl	8008c10 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	695b      	ldr	r3, [r3, #20]
 800851c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008520:	2b40      	cmp	r3, #64	; 0x40
 8008522:	bf0c      	ite	eq
 8008524:	2301      	moveq	r3, #1
 8008526:	2300      	movne	r3, #0
 8008528:	b2db      	uxtb	r3, r3
 800852a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008532:	f003 0308 	and.w	r3, r3, #8
 8008536:	2b00      	cmp	r3, #0
 8008538:	d103      	bne.n	8008542 <HAL_UART_IRQHandler+0x17a>
 800853a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800853e:	2b00      	cmp	r3, #0
 8008540:	d04f      	beq.n	80085e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 fa85 	bl	8008a52 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	695b      	ldr	r3, [r3, #20]
 800854e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008552:	2b40      	cmp	r3, #64	; 0x40
 8008554:	d141      	bne.n	80085da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	3314      	adds	r3, #20
 800855c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008560:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008564:	e853 3f00 	ldrex	r3, [r3]
 8008568:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800856c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008570:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008574:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	3314      	adds	r3, #20
 800857e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008582:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008586:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800858e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008592:	e841 2300 	strex	r3, r2, [r1]
 8008596:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800859a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d1d9      	bne.n	8008556 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d013      	beq.n	80085d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ae:	4a7e      	ldr	r2, [pc, #504]	; (80087a8 <HAL_UART_IRQHandler+0x3e0>)
 80085b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7fb fdac 	bl	8004114 <HAL_DMA_Abort_IT>
 80085bc:	4603      	mov	r3, r0
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d016      	beq.n	80085f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80085cc:	4610      	mov	r0, r2
 80085ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085d0:	e00e      	b.n	80085f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 f994 	bl	8008900 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085d8:	e00a      	b.n	80085f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 f990 	bl	8008900 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085e0:	e006      	b.n	80085f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 f98c 	bl	8008900 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80085ee:	e175      	b.n	80088dc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085f0:	bf00      	nop
    return;
 80085f2:	e173      	b.n	80088dc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	f040 814f 	bne.w	800889c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80085fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008602:	f003 0310 	and.w	r3, r3, #16
 8008606:	2b00      	cmp	r3, #0
 8008608:	f000 8148 	beq.w	800889c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800860c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008610:	f003 0310 	and.w	r3, r3, #16
 8008614:	2b00      	cmp	r3, #0
 8008616:	f000 8141 	beq.w	800889c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800861a:	2300      	movs	r3, #0
 800861c:	60bb      	str	r3, [r7, #8]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	60bb      	str	r3, [r7, #8]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	60bb      	str	r3, [r7, #8]
 800862e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	695b      	ldr	r3, [r3, #20]
 8008636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800863a:	2b40      	cmp	r3, #64	; 0x40
 800863c:	f040 80b6 	bne.w	80087ac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800864c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008650:	2b00      	cmp	r3, #0
 8008652:	f000 8145 	beq.w	80088e0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800865a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800865e:	429a      	cmp	r2, r3
 8008660:	f080 813e 	bcs.w	80088e0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800866a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008670:	69db      	ldr	r3, [r3, #28]
 8008672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008676:	f000 8088 	beq.w	800878a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	330c      	adds	r3, #12
 8008680:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008684:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008688:	e853 3f00 	ldrex	r3, [r3]
 800868c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008690:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008694:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008698:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	330c      	adds	r3, #12
 80086a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80086a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80086aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80086b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80086b6:	e841 2300 	strex	r3, r2, [r1]
 80086ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80086be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d1d9      	bne.n	800867a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	3314      	adds	r3, #20
 80086cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086d0:	e853 3f00 	ldrex	r3, [r3]
 80086d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80086d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80086d8:	f023 0301 	bic.w	r3, r3, #1
 80086dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	3314      	adds	r3, #20
 80086e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80086ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80086ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80086f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80086f6:	e841 2300 	strex	r3, r2, [r1]
 80086fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80086fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d1e1      	bne.n	80086c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	3314      	adds	r3, #20
 8008708:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800870a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800870c:	e853 3f00 	ldrex	r3, [r3]
 8008710:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008712:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008714:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008718:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	3314      	adds	r3, #20
 8008722:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008726:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008728:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800872a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800872c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800872e:	e841 2300 	strex	r3, r2, [r1]
 8008732:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008734:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008736:	2b00      	cmp	r3, #0
 8008738:	d1e3      	bne.n	8008702 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2220      	movs	r2, #32
 800873e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	330c      	adds	r3, #12
 800874e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008752:	e853 3f00 	ldrex	r3, [r3]
 8008756:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008758:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800875a:	f023 0310 	bic.w	r3, r3, #16
 800875e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	330c      	adds	r3, #12
 8008768:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800876c:	65ba      	str	r2, [r7, #88]	; 0x58
 800876e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008770:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008772:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008774:	e841 2300 	strex	r3, r2, [r1]
 8008778:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800877a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800877c:	2b00      	cmp	r3, #0
 800877e:	d1e3      	bne.n	8008748 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008784:	4618      	mov	r0, r3
 8008786:	f7fb fc55 	bl	8004034 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2202      	movs	r2, #2
 800878e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008798:	b29b      	uxth	r3, r3
 800879a:	1ad3      	subs	r3, r2, r3
 800879c:	b29b      	uxth	r3, r3
 800879e:	4619      	mov	r1, r3
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 f8b7 	bl	8008914 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80087a6:	e09b      	b.n	80088e0 <HAL_UART_IRQHandler+0x518>
 80087a8:	08008b19 	.word	0x08008b19
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	1ad3      	subs	r3, r2, r3
 80087b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	f000 808e 	beq.w	80088e4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80087c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	f000 8089 	beq.w	80088e4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	330c      	adds	r3, #12
 80087d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087dc:	e853 3f00 	ldrex	r3, [r3]
 80087e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80087e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	330c      	adds	r3, #12
 80087f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80087f6:	647a      	str	r2, [r7, #68]	; 0x44
 80087f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80087fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087fe:	e841 2300 	strex	r3, r2, [r1]
 8008802:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1e3      	bne.n	80087d2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	3314      	adds	r3, #20
 8008810:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008814:	e853 3f00 	ldrex	r3, [r3]
 8008818:	623b      	str	r3, [r7, #32]
   return(result);
 800881a:	6a3b      	ldr	r3, [r7, #32]
 800881c:	f023 0301 	bic.w	r3, r3, #1
 8008820:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	3314      	adds	r3, #20
 800882a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800882e:	633a      	str	r2, [r7, #48]	; 0x30
 8008830:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008832:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008836:	e841 2300 	strex	r3, r2, [r1]
 800883a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800883c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1e3      	bne.n	800880a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2220      	movs	r2, #32
 8008846:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	330c      	adds	r3, #12
 8008856:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	e853 3f00 	ldrex	r3, [r3]
 800885e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f023 0310 	bic.w	r3, r3, #16
 8008866:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	330c      	adds	r3, #12
 8008870:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008874:	61fa      	str	r2, [r7, #28]
 8008876:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008878:	69b9      	ldr	r1, [r7, #24]
 800887a:	69fa      	ldr	r2, [r7, #28]
 800887c:	e841 2300 	strex	r3, r2, [r1]
 8008880:	617b      	str	r3, [r7, #20]
   return(result);
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d1e3      	bne.n	8008850 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2202      	movs	r2, #2
 800888c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800888e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008892:	4619      	mov	r1, r3
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 f83d 	bl	8008914 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800889a:	e023      	b.n	80088e4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800889c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d009      	beq.n	80088bc <HAL_UART_IRQHandler+0x4f4>
 80088a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d003      	beq.n	80088bc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 f943 	bl	8008b40 <UART_Transmit_IT>
    return;
 80088ba:	e014      	b.n	80088e6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80088bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d00e      	beq.n	80088e6 <HAL_UART_IRQHandler+0x51e>
 80088c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d008      	beq.n	80088e6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 f983 	bl	8008be0 <UART_EndTransmit_IT>
    return;
 80088da:	e004      	b.n	80088e6 <HAL_UART_IRQHandler+0x51e>
    return;
 80088dc:	bf00      	nop
 80088de:	e002      	b.n	80088e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80088e0:	bf00      	nop
 80088e2:	e000      	b.n	80088e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80088e4:	bf00      	nop
  }
}
 80088e6:	37e8      	adds	r7, #232	; 0xe8
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b083      	sub	sp, #12
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80088f4:	bf00      	nop
 80088f6:	370c      	adds	r7, #12
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr

08008900 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008908:	bf00      	nop
 800890a:	370c      	adds	r7, #12
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr

08008914 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008914:	b480      	push	{r7}
 8008916:	b083      	sub	sp, #12
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	460b      	mov	r3, r1
 800891e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008920:	bf00      	nop
 8008922:	370c      	adds	r7, #12
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b086      	sub	sp, #24
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	603b      	str	r3, [r7, #0]
 8008938:	4613      	mov	r3, r2
 800893a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800893c:	e03b      	b.n	80089b6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800893e:	6a3b      	ldr	r3, [r7, #32]
 8008940:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008944:	d037      	beq.n	80089b6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008946:	f7fa fac5 	bl	8002ed4 <HAL_GetTick>
 800894a:	4602      	mov	r2, r0
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	1ad3      	subs	r3, r2, r3
 8008950:	6a3a      	ldr	r2, [r7, #32]
 8008952:	429a      	cmp	r2, r3
 8008954:	d302      	bcc.n	800895c <UART_WaitOnFlagUntilTimeout+0x30>
 8008956:	6a3b      	ldr	r3, [r7, #32]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d101      	bne.n	8008960 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800895c:	2303      	movs	r3, #3
 800895e:	e03a      	b.n	80089d6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	f003 0304 	and.w	r3, r3, #4
 800896a:	2b00      	cmp	r3, #0
 800896c:	d023      	beq.n	80089b6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	2b80      	cmp	r3, #128	; 0x80
 8008972:	d020      	beq.n	80089b6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	2b40      	cmp	r3, #64	; 0x40
 8008978:	d01d      	beq.n	80089b6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f003 0308 	and.w	r3, r3, #8
 8008984:	2b08      	cmp	r3, #8
 8008986:	d116      	bne.n	80089b6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008988:	2300      	movs	r3, #0
 800898a:	617b      	str	r3, [r7, #20]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	617b      	str	r3, [r7, #20]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	617b      	str	r3, [r7, #20]
 800899c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800899e:	68f8      	ldr	r0, [r7, #12]
 80089a0:	f000 f857 	bl	8008a52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2208      	movs	r2, #8
 80089a8:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2200      	movs	r2, #0
 80089ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e00f      	b.n	80089d6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	4013      	ands	r3, r2
 80089c0:	68ba      	ldr	r2, [r7, #8]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	bf0c      	ite	eq
 80089c6:	2301      	moveq	r3, #1
 80089c8:	2300      	movne	r3, #0
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	461a      	mov	r2, r3
 80089ce:	79fb      	ldrb	r3, [r7, #7]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d0b4      	beq.n	800893e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80089d4:	2300      	movs	r3, #0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3718      	adds	r7, #24
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089de:	b480      	push	{r7}
 80089e0:	b085      	sub	sp, #20
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	60f8      	str	r0, [r7, #12]
 80089e6:	60b9      	str	r1, [r7, #8]
 80089e8:	4613      	mov	r3, r2
 80089ea:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	68ba      	ldr	r2, [r7, #8]
 80089f0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	88fa      	ldrh	r2, [r7, #6]
 80089f6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	88fa      	ldrh	r2, [r7, #6]
 80089fc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2200      	movs	r2, #0
 8008a02:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2222      	movs	r2, #34	; 0x22
 8008a08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	691b      	ldr	r3, [r3, #16]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d007      	beq.n	8008a24 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	68da      	ldr	r2, [r3, #12]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a22:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	695a      	ldr	r2, [r3, #20]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f042 0201 	orr.w	r2, r2, #1
 8008a32:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	68da      	ldr	r2, [r3, #12]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f042 0220 	orr.w	r2, r2, #32
 8008a42:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3714      	adds	r7, #20
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr

08008a52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a52:	b480      	push	{r7}
 8008a54:	b095      	sub	sp, #84	; 0x54
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	330c      	adds	r3, #12
 8008a60:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a64:	e853 3f00 	ldrex	r3, [r3]
 8008a68:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	330c      	adds	r3, #12
 8008a78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a7a:	643a      	str	r2, [r7, #64]	; 0x40
 8008a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a82:	e841 2300 	strex	r3, r2, [r1]
 8008a86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d1e5      	bne.n	8008a5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	3314      	adds	r3, #20
 8008a94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a96:	6a3b      	ldr	r3, [r7, #32]
 8008a98:	e853 3f00 	ldrex	r3, [r3]
 8008a9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	f023 0301 	bic.w	r3, r3, #1
 8008aa4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	3314      	adds	r3, #20
 8008aac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008aae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ab0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ab4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ab6:	e841 2300 	strex	r3, r2, [r1]
 8008aba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d1e5      	bne.n	8008a8e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d119      	bne.n	8008afe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	330c      	adds	r3, #12
 8008ad0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	e853 3f00 	ldrex	r3, [r3]
 8008ad8:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	f023 0310 	bic.w	r3, r3, #16
 8008ae0:	647b      	str	r3, [r7, #68]	; 0x44
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	330c      	adds	r3, #12
 8008ae8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008aea:	61ba      	str	r2, [r7, #24]
 8008aec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aee:	6979      	ldr	r1, [r7, #20]
 8008af0:	69ba      	ldr	r2, [r7, #24]
 8008af2:	e841 2300 	strex	r3, r2, [r1]
 8008af6:	613b      	str	r3, [r7, #16]
   return(result);
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d1e5      	bne.n	8008aca <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2220      	movs	r2, #32
 8008b02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008b0c:	bf00      	nop
 8008b0e:	3754      	adds	r7, #84	; 0x54
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b32:	68f8      	ldr	r0, [r7, #12]
 8008b34:	f7ff fee4 	bl	8008900 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b38:	bf00      	nop
 8008b3a:	3710      	adds	r7, #16
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b085      	sub	sp, #20
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	2b21      	cmp	r3, #33	; 0x21
 8008b52:	d13e      	bne.n	8008bd2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b5c:	d114      	bne.n	8008b88 <UART_Transmit_IT+0x48>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	691b      	ldr	r3, [r3, #16]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d110      	bne.n	8008b88 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6a1b      	ldr	r3, [r3, #32]
 8008b6a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	881b      	ldrh	r3, [r3, #0]
 8008b70:	461a      	mov	r2, r3
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b7a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6a1b      	ldr	r3, [r3, #32]
 8008b80:	1c9a      	adds	r2, r3, #2
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	621a      	str	r2, [r3, #32]
 8008b86:	e008      	b.n	8008b9a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6a1b      	ldr	r3, [r3, #32]
 8008b8c:	1c59      	adds	r1, r3, #1
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	6211      	str	r1, [r2, #32]
 8008b92:	781a      	ldrb	r2, [r3, #0]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b9e:	b29b      	uxth	r3, r3
 8008ba0:	3b01      	subs	r3, #1
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d10f      	bne.n	8008bce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	68da      	ldr	r2, [r3, #12]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008bbc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	68da      	ldr	r2, [r3, #12]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bcc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	e000      	b.n	8008bd4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008bd2:	2302      	movs	r3, #2
  }
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3714      	adds	r7, #20
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr

08008be0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b082      	sub	sp, #8
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	68da      	ldr	r2, [r3, #12]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bf6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2220      	movs	r2, #32
 8008bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f7ff fe73 	bl	80088ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008c06:	2300      	movs	r3, #0
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3708      	adds	r7, #8
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b08c      	sub	sp, #48	; 0x30
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	2b22      	cmp	r3, #34	; 0x22
 8008c22:	f040 80ae 	bne.w	8008d82 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c2e:	d117      	bne.n	8008c60 <UART_Receive_IT+0x50>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	691b      	ldr	r3, [r3, #16]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d113      	bne.n	8008c60 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c40:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c4e:	b29a      	uxth	r2, r3
 8008c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c52:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c58:	1c9a      	adds	r2, r3, #2
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	629a      	str	r2, [r3, #40]	; 0x28
 8008c5e:	e026      	b.n	8008cae <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c64:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008c66:	2300      	movs	r3, #0
 8008c68:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c72:	d007      	beq.n	8008c84 <UART_Receive_IT+0x74>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d10a      	bne.n	8008c92 <UART_Receive_IT+0x82>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	691b      	ldr	r3, [r3, #16]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d106      	bne.n	8008c92 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	b2da      	uxtb	r2, r3
 8008c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c8e:	701a      	strb	r2, [r3, #0]
 8008c90:	e008      	b.n	8008ca4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c9e:	b2da      	uxtb	r2, r3
 8008ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ca8:	1c5a      	adds	r2, r3, #1
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	3b01      	subs	r3, #1
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	4619      	mov	r1, r3
 8008cbc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d15d      	bne.n	8008d7e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	68da      	ldr	r2, [r3, #12]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f022 0220 	bic.w	r2, r2, #32
 8008cd0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	68da      	ldr	r2, [r3, #12]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ce0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	695a      	ldr	r2, [r3, #20]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f022 0201 	bic.w	r2, r2, #1
 8008cf0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2220      	movs	r2, #32
 8008cf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d135      	bne.n	8008d74 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	330c      	adds	r3, #12
 8008d14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	e853 3f00 	ldrex	r3, [r3]
 8008d1c:	613b      	str	r3, [r7, #16]
   return(result);
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	f023 0310 	bic.w	r3, r3, #16
 8008d24:	627b      	str	r3, [r7, #36]	; 0x24
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	330c      	adds	r3, #12
 8008d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d2e:	623a      	str	r2, [r7, #32]
 8008d30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d32:	69f9      	ldr	r1, [r7, #28]
 8008d34:	6a3a      	ldr	r2, [r7, #32]
 8008d36:	e841 2300 	strex	r3, r2, [r1]
 8008d3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d3c:	69bb      	ldr	r3, [r7, #24]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d1e5      	bne.n	8008d0e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f003 0310 	and.w	r3, r3, #16
 8008d4c:	2b10      	cmp	r3, #16
 8008d4e:	d10a      	bne.n	8008d66 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008d50:	2300      	movs	r3, #0
 8008d52:	60fb      	str	r3, [r7, #12]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	60fb      	str	r3, [r7, #12]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	60fb      	str	r3, [r7, #12]
 8008d64:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f7ff fdd1 	bl	8008914 <HAL_UARTEx_RxEventCallback>
 8008d72:	e002      	b.n	8008d7a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f7f9 ffbb 	bl	8002cf0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	e002      	b.n	8008d84 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	e000      	b.n	8008d84 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008d82:	2302      	movs	r3, #2
  }
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3730      	adds	r7, #48	; 0x30
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d90:	b0c0      	sub	sp, #256	; 0x100
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	691b      	ldr	r3, [r3, #16]
 8008da0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008da8:	68d9      	ldr	r1, [r3, #12]
 8008daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	ea40 0301 	orr.w	r3, r0, r1
 8008db4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dba:	689a      	ldr	r2, [r3, #8]
 8008dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dc0:	691b      	ldr	r3, [r3, #16]
 8008dc2:	431a      	orrs	r2, r3
 8008dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dc8:	695b      	ldr	r3, [r3, #20]
 8008dca:	431a      	orrs	r2, r3
 8008dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dd0:	69db      	ldr	r3, [r3, #28]
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	68db      	ldr	r3, [r3, #12]
 8008de0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008de4:	f021 010c 	bic.w	r1, r1, #12
 8008de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dec:	681a      	ldr	r2, [r3, #0]
 8008dee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008df2:	430b      	orrs	r3, r1
 8008df4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	695b      	ldr	r3, [r3, #20]
 8008dfe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e06:	6999      	ldr	r1, [r3, #24]
 8008e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	ea40 0301 	orr.w	r3, r0, r1
 8008e12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	4b8f      	ldr	r3, [pc, #572]	; (8009058 <UART_SetConfig+0x2cc>)
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d005      	beq.n	8008e2c <UART_SetConfig+0xa0>
 8008e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	4b8d      	ldr	r3, [pc, #564]	; (800905c <UART_SetConfig+0x2d0>)
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d104      	bne.n	8008e36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008e2c:	f7fd fab0 	bl	8006390 <HAL_RCC_GetPCLK2Freq>
 8008e30:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008e34:	e003      	b.n	8008e3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008e36:	f7fd fa97 	bl	8006368 <HAL_RCC_GetPCLK1Freq>
 8008e3a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e42:	69db      	ldr	r3, [r3, #28]
 8008e44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e48:	f040 810c 	bne.w	8009064 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008e4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e50:	2200      	movs	r2, #0
 8008e52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008e56:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008e5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008e5e:	4622      	mov	r2, r4
 8008e60:	462b      	mov	r3, r5
 8008e62:	1891      	adds	r1, r2, r2
 8008e64:	65b9      	str	r1, [r7, #88]	; 0x58
 8008e66:	415b      	adcs	r3, r3
 8008e68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008e6e:	4621      	mov	r1, r4
 8008e70:	eb12 0801 	adds.w	r8, r2, r1
 8008e74:	4629      	mov	r1, r5
 8008e76:	eb43 0901 	adc.w	r9, r3, r1
 8008e7a:	f04f 0200 	mov.w	r2, #0
 8008e7e:	f04f 0300 	mov.w	r3, #0
 8008e82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008e86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008e8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008e8e:	4690      	mov	r8, r2
 8008e90:	4699      	mov	r9, r3
 8008e92:	4623      	mov	r3, r4
 8008e94:	eb18 0303 	adds.w	r3, r8, r3
 8008e98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008e9c:	462b      	mov	r3, r5
 8008e9e:	eb49 0303 	adc.w	r3, r9, r3
 8008ea2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008eb2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008eb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008eba:	460b      	mov	r3, r1
 8008ebc:	18db      	adds	r3, r3, r3
 8008ebe:	653b      	str	r3, [r7, #80]	; 0x50
 8008ec0:	4613      	mov	r3, r2
 8008ec2:	eb42 0303 	adc.w	r3, r2, r3
 8008ec6:	657b      	str	r3, [r7, #84]	; 0x54
 8008ec8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008ecc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008ed0:	f7f7 f994 	bl	80001fc <__aeabi_uldivmod>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	4b61      	ldr	r3, [pc, #388]	; (8009060 <UART_SetConfig+0x2d4>)
 8008eda:	fba3 2302 	umull	r2, r3, r3, r2
 8008ede:	095b      	lsrs	r3, r3, #5
 8008ee0:	011c      	lsls	r4, r3, #4
 8008ee2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008eec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008ef0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008ef4:	4642      	mov	r2, r8
 8008ef6:	464b      	mov	r3, r9
 8008ef8:	1891      	adds	r1, r2, r2
 8008efa:	64b9      	str	r1, [r7, #72]	; 0x48
 8008efc:	415b      	adcs	r3, r3
 8008efe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008f04:	4641      	mov	r1, r8
 8008f06:	eb12 0a01 	adds.w	sl, r2, r1
 8008f0a:	4649      	mov	r1, r9
 8008f0c:	eb43 0b01 	adc.w	fp, r3, r1
 8008f10:	f04f 0200 	mov.w	r2, #0
 8008f14:	f04f 0300 	mov.w	r3, #0
 8008f18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008f1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008f20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f24:	4692      	mov	sl, r2
 8008f26:	469b      	mov	fp, r3
 8008f28:	4643      	mov	r3, r8
 8008f2a:	eb1a 0303 	adds.w	r3, sl, r3
 8008f2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008f32:	464b      	mov	r3, r9
 8008f34:	eb4b 0303 	adc.w	r3, fp, r3
 8008f38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008f48:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008f4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008f50:	460b      	mov	r3, r1
 8008f52:	18db      	adds	r3, r3, r3
 8008f54:	643b      	str	r3, [r7, #64]	; 0x40
 8008f56:	4613      	mov	r3, r2
 8008f58:	eb42 0303 	adc.w	r3, r2, r3
 8008f5c:	647b      	str	r3, [r7, #68]	; 0x44
 8008f5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008f62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008f66:	f7f7 f949 	bl	80001fc <__aeabi_uldivmod>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	4611      	mov	r1, r2
 8008f70:	4b3b      	ldr	r3, [pc, #236]	; (8009060 <UART_SetConfig+0x2d4>)
 8008f72:	fba3 2301 	umull	r2, r3, r3, r1
 8008f76:	095b      	lsrs	r3, r3, #5
 8008f78:	2264      	movs	r2, #100	; 0x64
 8008f7a:	fb02 f303 	mul.w	r3, r2, r3
 8008f7e:	1acb      	subs	r3, r1, r3
 8008f80:	00db      	lsls	r3, r3, #3
 8008f82:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008f86:	4b36      	ldr	r3, [pc, #216]	; (8009060 <UART_SetConfig+0x2d4>)
 8008f88:	fba3 2302 	umull	r2, r3, r3, r2
 8008f8c:	095b      	lsrs	r3, r3, #5
 8008f8e:	005b      	lsls	r3, r3, #1
 8008f90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008f94:	441c      	add	r4, r3
 8008f96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008fa0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008fa4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008fa8:	4642      	mov	r2, r8
 8008faa:	464b      	mov	r3, r9
 8008fac:	1891      	adds	r1, r2, r2
 8008fae:	63b9      	str	r1, [r7, #56]	; 0x38
 8008fb0:	415b      	adcs	r3, r3
 8008fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008fb8:	4641      	mov	r1, r8
 8008fba:	1851      	adds	r1, r2, r1
 8008fbc:	6339      	str	r1, [r7, #48]	; 0x30
 8008fbe:	4649      	mov	r1, r9
 8008fc0:	414b      	adcs	r3, r1
 8008fc2:	637b      	str	r3, [r7, #52]	; 0x34
 8008fc4:	f04f 0200 	mov.w	r2, #0
 8008fc8:	f04f 0300 	mov.w	r3, #0
 8008fcc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008fd0:	4659      	mov	r1, fp
 8008fd2:	00cb      	lsls	r3, r1, #3
 8008fd4:	4651      	mov	r1, sl
 8008fd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008fda:	4651      	mov	r1, sl
 8008fdc:	00ca      	lsls	r2, r1, #3
 8008fde:	4610      	mov	r0, r2
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	4642      	mov	r2, r8
 8008fe6:	189b      	adds	r3, r3, r2
 8008fe8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008fec:	464b      	mov	r3, r9
 8008fee:	460a      	mov	r2, r1
 8008ff0:	eb42 0303 	adc.w	r3, r2, r3
 8008ff4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009004:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009008:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800900c:	460b      	mov	r3, r1
 800900e:	18db      	adds	r3, r3, r3
 8009010:	62bb      	str	r3, [r7, #40]	; 0x28
 8009012:	4613      	mov	r3, r2
 8009014:	eb42 0303 	adc.w	r3, r2, r3
 8009018:	62fb      	str	r3, [r7, #44]	; 0x2c
 800901a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800901e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009022:	f7f7 f8eb 	bl	80001fc <__aeabi_uldivmod>
 8009026:	4602      	mov	r2, r0
 8009028:	460b      	mov	r3, r1
 800902a:	4b0d      	ldr	r3, [pc, #52]	; (8009060 <UART_SetConfig+0x2d4>)
 800902c:	fba3 1302 	umull	r1, r3, r3, r2
 8009030:	095b      	lsrs	r3, r3, #5
 8009032:	2164      	movs	r1, #100	; 0x64
 8009034:	fb01 f303 	mul.w	r3, r1, r3
 8009038:	1ad3      	subs	r3, r2, r3
 800903a:	00db      	lsls	r3, r3, #3
 800903c:	3332      	adds	r3, #50	; 0x32
 800903e:	4a08      	ldr	r2, [pc, #32]	; (8009060 <UART_SetConfig+0x2d4>)
 8009040:	fba2 2303 	umull	r2, r3, r2, r3
 8009044:	095b      	lsrs	r3, r3, #5
 8009046:	f003 0207 	and.w	r2, r3, #7
 800904a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4422      	add	r2, r4
 8009052:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009054:	e106      	b.n	8009264 <UART_SetConfig+0x4d8>
 8009056:	bf00      	nop
 8009058:	40011000 	.word	0x40011000
 800905c:	40011400 	.word	0x40011400
 8009060:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009064:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009068:	2200      	movs	r2, #0
 800906a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800906e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009072:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009076:	4642      	mov	r2, r8
 8009078:	464b      	mov	r3, r9
 800907a:	1891      	adds	r1, r2, r2
 800907c:	6239      	str	r1, [r7, #32]
 800907e:	415b      	adcs	r3, r3
 8009080:	627b      	str	r3, [r7, #36]	; 0x24
 8009082:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009086:	4641      	mov	r1, r8
 8009088:	1854      	adds	r4, r2, r1
 800908a:	4649      	mov	r1, r9
 800908c:	eb43 0501 	adc.w	r5, r3, r1
 8009090:	f04f 0200 	mov.w	r2, #0
 8009094:	f04f 0300 	mov.w	r3, #0
 8009098:	00eb      	lsls	r3, r5, #3
 800909a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800909e:	00e2      	lsls	r2, r4, #3
 80090a0:	4614      	mov	r4, r2
 80090a2:	461d      	mov	r5, r3
 80090a4:	4643      	mov	r3, r8
 80090a6:	18e3      	adds	r3, r4, r3
 80090a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80090ac:	464b      	mov	r3, r9
 80090ae:	eb45 0303 	adc.w	r3, r5, r3
 80090b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80090b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80090c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80090c6:	f04f 0200 	mov.w	r2, #0
 80090ca:	f04f 0300 	mov.w	r3, #0
 80090ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80090d2:	4629      	mov	r1, r5
 80090d4:	008b      	lsls	r3, r1, #2
 80090d6:	4621      	mov	r1, r4
 80090d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80090dc:	4621      	mov	r1, r4
 80090de:	008a      	lsls	r2, r1, #2
 80090e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80090e4:	f7f7 f88a 	bl	80001fc <__aeabi_uldivmod>
 80090e8:	4602      	mov	r2, r0
 80090ea:	460b      	mov	r3, r1
 80090ec:	4b60      	ldr	r3, [pc, #384]	; (8009270 <UART_SetConfig+0x4e4>)
 80090ee:	fba3 2302 	umull	r2, r3, r3, r2
 80090f2:	095b      	lsrs	r3, r3, #5
 80090f4:	011c      	lsls	r4, r3, #4
 80090f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090fa:	2200      	movs	r2, #0
 80090fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009100:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009104:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009108:	4642      	mov	r2, r8
 800910a:	464b      	mov	r3, r9
 800910c:	1891      	adds	r1, r2, r2
 800910e:	61b9      	str	r1, [r7, #24]
 8009110:	415b      	adcs	r3, r3
 8009112:	61fb      	str	r3, [r7, #28]
 8009114:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009118:	4641      	mov	r1, r8
 800911a:	1851      	adds	r1, r2, r1
 800911c:	6139      	str	r1, [r7, #16]
 800911e:	4649      	mov	r1, r9
 8009120:	414b      	adcs	r3, r1
 8009122:	617b      	str	r3, [r7, #20]
 8009124:	f04f 0200 	mov.w	r2, #0
 8009128:	f04f 0300 	mov.w	r3, #0
 800912c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009130:	4659      	mov	r1, fp
 8009132:	00cb      	lsls	r3, r1, #3
 8009134:	4651      	mov	r1, sl
 8009136:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800913a:	4651      	mov	r1, sl
 800913c:	00ca      	lsls	r2, r1, #3
 800913e:	4610      	mov	r0, r2
 8009140:	4619      	mov	r1, r3
 8009142:	4603      	mov	r3, r0
 8009144:	4642      	mov	r2, r8
 8009146:	189b      	adds	r3, r3, r2
 8009148:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800914c:	464b      	mov	r3, r9
 800914e:	460a      	mov	r2, r1
 8009150:	eb42 0303 	adc.w	r3, r2, r3
 8009154:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	2200      	movs	r2, #0
 8009160:	67bb      	str	r3, [r7, #120]	; 0x78
 8009162:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009164:	f04f 0200 	mov.w	r2, #0
 8009168:	f04f 0300 	mov.w	r3, #0
 800916c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009170:	4649      	mov	r1, r9
 8009172:	008b      	lsls	r3, r1, #2
 8009174:	4641      	mov	r1, r8
 8009176:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800917a:	4641      	mov	r1, r8
 800917c:	008a      	lsls	r2, r1, #2
 800917e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009182:	f7f7 f83b 	bl	80001fc <__aeabi_uldivmod>
 8009186:	4602      	mov	r2, r0
 8009188:	460b      	mov	r3, r1
 800918a:	4611      	mov	r1, r2
 800918c:	4b38      	ldr	r3, [pc, #224]	; (8009270 <UART_SetConfig+0x4e4>)
 800918e:	fba3 2301 	umull	r2, r3, r3, r1
 8009192:	095b      	lsrs	r3, r3, #5
 8009194:	2264      	movs	r2, #100	; 0x64
 8009196:	fb02 f303 	mul.w	r3, r2, r3
 800919a:	1acb      	subs	r3, r1, r3
 800919c:	011b      	lsls	r3, r3, #4
 800919e:	3332      	adds	r3, #50	; 0x32
 80091a0:	4a33      	ldr	r2, [pc, #204]	; (8009270 <UART_SetConfig+0x4e4>)
 80091a2:	fba2 2303 	umull	r2, r3, r2, r3
 80091a6:	095b      	lsrs	r3, r3, #5
 80091a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80091ac:	441c      	add	r4, r3
 80091ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091b2:	2200      	movs	r2, #0
 80091b4:	673b      	str	r3, [r7, #112]	; 0x70
 80091b6:	677a      	str	r2, [r7, #116]	; 0x74
 80091b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80091bc:	4642      	mov	r2, r8
 80091be:	464b      	mov	r3, r9
 80091c0:	1891      	adds	r1, r2, r2
 80091c2:	60b9      	str	r1, [r7, #8]
 80091c4:	415b      	adcs	r3, r3
 80091c6:	60fb      	str	r3, [r7, #12]
 80091c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80091cc:	4641      	mov	r1, r8
 80091ce:	1851      	adds	r1, r2, r1
 80091d0:	6039      	str	r1, [r7, #0]
 80091d2:	4649      	mov	r1, r9
 80091d4:	414b      	adcs	r3, r1
 80091d6:	607b      	str	r3, [r7, #4]
 80091d8:	f04f 0200 	mov.w	r2, #0
 80091dc:	f04f 0300 	mov.w	r3, #0
 80091e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80091e4:	4659      	mov	r1, fp
 80091e6:	00cb      	lsls	r3, r1, #3
 80091e8:	4651      	mov	r1, sl
 80091ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091ee:	4651      	mov	r1, sl
 80091f0:	00ca      	lsls	r2, r1, #3
 80091f2:	4610      	mov	r0, r2
 80091f4:	4619      	mov	r1, r3
 80091f6:	4603      	mov	r3, r0
 80091f8:	4642      	mov	r2, r8
 80091fa:	189b      	adds	r3, r3, r2
 80091fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80091fe:	464b      	mov	r3, r9
 8009200:	460a      	mov	r2, r1
 8009202:	eb42 0303 	adc.w	r3, r2, r3
 8009206:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	663b      	str	r3, [r7, #96]	; 0x60
 8009212:	667a      	str	r2, [r7, #100]	; 0x64
 8009214:	f04f 0200 	mov.w	r2, #0
 8009218:	f04f 0300 	mov.w	r3, #0
 800921c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009220:	4649      	mov	r1, r9
 8009222:	008b      	lsls	r3, r1, #2
 8009224:	4641      	mov	r1, r8
 8009226:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800922a:	4641      	mov	r1, r8
 800922c:	008a      	lsls	r2, r1, #2
 800922e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009232:	f7f6 ffe3 	bl	80001fc <__aeabi_uldivmod>
 8009236:	4602      	mov	r2, r0
 8009238:	460b      	mov	r3, r1
 800923a:	4b0d      	ldr	r3, [pc, #52]	; (8009270 <UART_SetConfig+0x4e4>)
 800923c:	fba3 1302 	umull	r1, r3, r3, r2
 8009240:	095b      	lsrs	r3, r3, #5
 8009242:	2164      	movs	r1, #100	; 0x64
 8009244:	fb01 f303 	mul.w	r3, r1, r3
 8009248:	1ad3      	subs	r3, r2, r3
 800924a:	011b      	lsls	r3, r3, #4
 800924c:	3332      	adds	r3, #50	; 0x32
 800924e:	4a08      	ldr	r2, [pc, #32]	; (8009270 <UART_SetConfig+0x4e4>)
 8009250:	fba2 2303 	umull	r2, r3, r2, r3
 8009254:	095b      	lsrs	r3, r3, #5
 8009256:	f003 020f 	and.w	r2, r3, #15
 800925a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4422      	add	r2, r4
 8009262:	609a      	str	r2, [r3, #8]
}
 8009264:	bf00      	nop
 8009266:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800926a:	46bd      	mov	sp, r7
 800926c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009270:	51eb851f 	.word	0x51eb851f

08009274 <memset>:
 8009274:	4402      	add	r2, r0
 8009276:	4603      	mov	r3, r0
 8009278:	4293      	cmp	r3, r2
 800927a:	d100      	bne.n	800927e <memset+0xa>
 800927c:	4770      	bx	lr
 800927e:	f803 1b01 	strb.w	r1, [r3], #1
 8009282:	e7f9      	b.n	8009278 <memset+0x4>

08009284 <__libc_init_array>:
 8009284:	b570      	push	{r4, r5, r6, lr}
 8009286:	4d0d      	ldr	r5, [pc, #52]	; (80092bc <__libc_init_array+0x38>)
 8009288:	4c0d      	ldr	r4, [pc, #52]	; (80092c0 <__libc_init_array+0x3c>)
 800928a:	1b64      	subs	r4, r4, r5
 800928c:	10a4      	asrs	r4, r4, #2
 800928e:	2600      	movs	r6, #0
 8009290:	42a6      	cmp	r6, r4
 8009292:	d109      	bne.n	80092a8 <__libc_init_array+0x24>
 8009294:	4d0b      	ldr	r5, [pc, #44]	; (80092c4 <__libc_init_array+0x40>)
 8009296:	4c0c      	ldr	r4, [pc, #48]	; (80092c8 <__libc_init_array+0x44>)
 8009298:	f000 f818 	bl	80092cc <_init>
 800929c:	1b64      	subs	r4, r4, r5
 800929e:	10a4      	asrs	r4, r4, #2
 80092a0:	2600      	movs	r6, #0
 80092a2:	42a6      	cmp	r6, r4
 80092a4:	d105      	bne.n	80092b2 <__libc_init_array+0x2e>
 80092a6:	bd70      	pop	{r4, r5, r6, pc}
 80092a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80092ac:	4798      	blx	r3
 80092ae:	3601      	adds	r6, #1
 80092b0:	e7ee      	b.n	8009290 <__libc_init_array+0xc>
 80092b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80092b6:	4798      	blx	r3
 80092b8:	3601      	adds	r6, #1
 80092ba:	e7f2      	b.n	80092a2 <__libc_init_array+0x1e>
 80092bc:	080093a4 	.word	0x080093a4
 80092c0:	080093a4 	.word	0x080093a4
 80092c4:	080093a4 	.word	0x080093a4
 80092c8:	080093a8 	.word	0x080093a8

080092cc <_init>:
 80092cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ce:	bf00      	nop
 80092d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092d2:	bc08      	pop	{r3}
 80092d4:	469e      	mov	lr, r3
 80092d6:	4770      	bx	lr

080092d8 <_fini>:
 80092d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092da:	bf00      	nop
 80092dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092de:	bc08      	pop	{r3}
 80092e0:	469e      	mov	lr, r3
 80092e2:	4770      	bx	lr
