
AuroraV_Payload_F439.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a18  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08006bc4  08006bc4  00016bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c4c  08006c4c  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08006c4c  08006c4c  00016c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c54  08006c54  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c54  08006c54  00016c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c58  08006c58  00016c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08006c5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
 10 .bss          000002f0  20000024  20000024  00020024  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000314  20000314  00020024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 14 .debug_info   000185b5  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000036c8  00000000  00000000  0003864c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001408  00000000  00000000  0003bd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000fa8  00000000  00000000  0003d120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000270d9  00000000  00000000  0003e0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001a8b2  00000000  00000000  000651a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e6ef5  00000000  00000000  0007fa53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005374  00000000  00000000  00166948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0016bcbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000024 	.word	0x20000024
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006bac 	.word	0x08006bac

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000028 	.word	0x20000028
 80001e8:	08006bac 	.word	0x08006bac

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <init_accel>:
uint8_t OUT_Y_L 				= 0x2A;
uint8_t OUT_Y_H 				= 0x2B;
uint8_t OUT_Z_L 				= 0x2C;
uint8_t OUT_Z_H 				= 0x2D;

HAL_StatusTypeDef init_accel(I2C_HandleTypeDef* hi2c) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;

	// Write Control Register 1
	ret = i2c_write_reg(hi2c, H3LIS331DL_ADDR, &CTRL_REG1, MASK_1kHz);
 8000500:	2118      	movs	r1, #24
 8000502:	233f      	movs	r3, #63	; 0x3f
 8000504:	4a09      	ldr	r2, [pc, #36]	; (800052c <init_accel+0x34>)
 8000506:	6878      	ldr	r0, [r7, #4]
 8000508:	f000 fb1c 	bl	8000b44 <i2c_write_reg>
 800050c:	4603      	mov	r3, r0
 800050e:	73fb      	strb	r3, [r7, #15]

	// Write Control Register 4
	ret = i2c_write_reg(hi2c, H3LIS331DL_ADDR, &CTRL_REG4, MASK_100G);
 8000510:	2118      	movs	r1, #24
 8000512:	2300      	movs	r3, #0
 8000514:	4a06      	ldr	r2, [pc, #24]	; (8000530 <init_accel+0x38>)
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	f000 fb14 	bl	8000b44 <i2c_write_reg>
 800051c:	4603      	mov	r3, r0
 800051e:	73fb      	strb	r3, [r7, #15]

	return ret;
 8000520:	7bfb      	ldrb	r3, [r7, #15]
}
 8000522:	4618      	mov	r0, r3
 8000524:	3710      	adds	r7, #16
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	20000000 	.word	0x20000000
 8000530:	20000001 	.word	0x20000001

08000534 <readAccelerometer>:

void readAccelerometer(uint8_t values[6], I2C_HandleTypeDef* hi2c) {
 8000534:	b580      	push	{r7, lr}
 8000536:	b086      	sub	sp, #24
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
	uint8_t buf_x[2];
	uint8_t buf_y[2];
	uint8_t buf_z[2];

	// Read X-Axis
	buf_x[0] = i2c_read_reg(hi2c, H3LIS331DL_ADDR, &OUT_X_L);
 800053e:	2318      	movs	r3, #24
 8000540:	4a2c      	ldr	r2, [pc, #176]	; (80005f4 <readAccelerometer+0xc0>)
 8000542:	4619      	mov	r1, r3
 8000544:	6838      	ldr	r0, [r7, #0]
 8000546:	f000 fad5 	bl	8000af4 <i2c_read_reg>
 800054a:	4603      	mov	r3, r0
 800054c:	743b      	strb	r3, [r7, #16]
	buf_x[1] = i2c_read_reg(hi2c, H3LIS331DL_ADDR, &OUT_X_H);
 800054e:	2318      	movs	r3, #24
 8000550:	4a29      	ldr	r2, [pc, #164]	; (80005f8 <readAccelerometer+0xc4>)
 8000552:	4619      	mov	r1, r3
 8000554:	6838      	ldr	r0, [r7, #0]
 8000556:	f000 facd 	bl	8000af4 <i2c_read_reg>
 800055a:	4603      	mov	r3, r0
 800055c:	747b      	strb	r3, [r7, #17]

	// Read Y-Axis
	buf_y[0] = i2c_read_reg(hi2c, H3LIS331DL_ADDR, &OUT_Y_L);
 800055e:	2318      	movs	r3, #24
 8000560:	4a26      	ldr	r2, [pc, #152]	; (80005fc <readAccelerometer+0xc8>)
 8000562:	4619      	mov	r1, r3
 8000564:	6838      	ldr	r0, [r7, #0]
 8000566:	f000 fac5 	bl	8000af4 <i2c_read_reg>
 800056a:	4603      	mov	r3, r0
 800056c:	733b      	strb	r3, [r7, #12]
	buf_y[1] = i2c_read_reg(hi2c, H3LIS331DL_ADDR, &OUT_Y_H);
 800056e:	2318      	movs	r3, #24
 8000570:	4a23      	ldr	r2, [pc, #140]	; (8000600 <readAccelerometer+0xcc>)
 8000572:	4619      	mov	r1, r3
 8000574:	6838      	ldr	r0, [r7, #0]
 8000576:	f000 fabd 	bl	8000af4 <i2c_read_reg>
 800057a:	4603      	mov	r3, r0
 800057c:	737b      	strb	r3, [r7, #13]

	// Read Z-Axis
	buf_z[0] = i2c_read_reg(hi2c, H3LIS331DL_ADDR, &OUT_Z_L);
 800057e:	2318      	movs	r3, #24
 8000580:	4a20      	ldr	r2, [pc, #128]	; (8000604 <readAccelerometer+0xd0>)
 8000582:	4619      	mov	r1, r3
 8000584:	6838      	ldr	r0, [r7, #0]
 8000586:	f000 fab5 	bl	8000af4 <i2c_read_reg>
 800058a:	4603      	mov	r3, r0
 800058c:	723b      	strb	r3, [r7, #8]
	buf_z[1] = i2c_read_reg(hi2c, H3LIS331DL_ADDR, &OUT_Z_H);
 800058e:	2318      	movs	r3, #24
 8000590:	4a1d      	ldr	r2, [pc, #116]	; (8000608 <readAccelerometer+0xd4>)
 8000592:	4619      	mov	r1, r3
 8000594:	6838      	ldr	r0, [r7, #0]
 8000596:	f000 faad 	bl	8000af4 <i2c_read_reg>
 800059a:	4603      	mov	r3, r0
 800059c:	727b      	strb	r3, [r7, #9]

	for (int i = 0; i < 2; i++) {
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]
 80005a2:	e01f      	b.n	80005e4 <readAccelerometer+0xb0>
		values[i] = buf_x[i];
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	687a      	ldr	r2, [r7, #4]
 80005a8:	4413      	add	r3, r2
 80005aa:	f107 0110 	add.w	r1, r7, #16
 80005ae:	697a      	ldr	r2, [r7, #20]
 80005b0:	440a      	add	r2, r1
 80005b2:	7812      	ldrb	r2, [r2, #0]
 80005b4:	701a      	strb	r2, [r3, #0]
		values[i+2] = buf_y[i];
 80005b6:	697b      	ldr	r3, [r7, #20]
 80005b8:	3302      	adds	r3, #2
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	4413      	add	r3, r2
 80005be:	f107 010c 	add.w	r1, r7, #12
 80005c2:	697a      	ldr	r2, [r7, #20]
 80005c4:	440a      	add	r2, r1
 80005c6:	7812      	ldrb	r2, [r2, #0]
 80005c8:	701a      	strb	r2, [r3, #0]
		values[i+4] = buf_z[i];
 80005ca:	697b      	ldr	r3, [r7, #20]
 80005cc:	3304      	adds	r3, #4
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	4413      	add	r3, r2
 80005d2:	f107 0108 	add.w	r1, r7, #8
 80005d6:	697a      	ldr	r2, [r7, #20]
 80005d8:	440a      	add	r2, r1
 80005da:	7812      	ldrb	r2, [r2, #0]
 80005dc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 2; i++) {
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	3301      	adds	r3, #1
 80005e2:	617b      	str	r3, [r7, #20]
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	dddc      	ble.n	80005a4 <readAccelerometer+0x70>
	}
}
 80005ea:	bf00      	nop
 80005ec:	bf00      	nop
 80005ee:	3718      	adds	r7, #24
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000003 	.word	0x20000003
 80005f8:	20000004 	.word	0x20000004
 80005fc:	20000005 	.word	0x20000005
 8000600:	20000006 	.word	0x20000006
 8000604:	20000007 	.word	0x20000007
 8000608:	20000008 	.word	0x20000008

0800060c <readAccel_whoami>:

uint8_t readAccel_whoami(I2C_HandleTypeDef* hi2c) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	return i2c_read_reg(hi2c, H3LIS331DL_ADDR, &WHOAMI);
 8000614:	2318      	movs	r3, #24
 8000616:	4a05      	ldr	r2, [pc, #20]	; (800062c <readAccel_whoami+0x20>)
 8000618:	4619      	mov	r1, r3
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f000 fa6a 	bl	8000af4 <i2c_read_reg>
 8000620:	4603      	mov	r3, r0
}
 8000622:	4618      	mov	r0, r3
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000002 	.word	0x20000002

08000630 <init_bme280>:
uint8_t OUT_TEMP_H 			= 0xFA;
uint8_t OUT_HUM_L 			= 0xFE;
uint8_t OUT_HUM_H 			= 0xFD;


HAL_StatusTypeDef init_bme280(I2C_HandleTypeDef* hi2c, uint8_t bme) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	460b      	mov	r3, r1
 800063a:	70fb      	strb	r3, [r7, #3]
	uint8_t bme_addr = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	73fb      	strb	r3, [r7, #15]
	if (bme == 0) {
 8000640:	78fb      	ldrb	r3, [r7, #3]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d102      	bne.n	800064c <init_bme280+0x1c>
		bme_addr = BME280_ADDR_0;
 8000646:	2376      	movs	r3, #118	; 0x76
 8000648:	73fb      	strb	r3, [r7, #15]
 800064a:	e004      	b.n	8000656 <init_bme280+0x26>
	} else if (bme == 1) {
 800064c:	78fb      	ldrb	r3, [r7, #3]
 800064e:	2b01      	cmp	r3, #1
 8000650:	d101      	bne.n	8000656 <init_bme280+0x26>
		bme_addr = BME280_ADDR_1;
 8000652:	2377      	movs	r3, #119	; 0x77
 8000654:	73fb      	strb	r3, [r7, #15]
	}

	HAL_StatusTypeDef ret;
	uint8_t control_reg = 0x00;
 8000656:	2300      	movs	r3, #0
 8000658:	73bb      	strb	r3, [r7, #14]

	// Reset the sensor
	ret =  i2c_write_reg(hi2c, bme_addr, &RST_REG, RST);
 800065a:	7bf9      	ldrb	r1, [r7, #15]
 800065c:	23b6      	movs	r3, #182	; 0xb6
 800065e:	4a19      	ldr	r2, [pc, #100]	; (80006c4 <init_bme280+0x94>)
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f000 fa6f 	bl	8000b44 <i2c_write_reg>
 8000666:	4603      	mov	r3, r0
 8000668:	737b      	strb	r3, [r7, #13]

	// Set humidity control register
	control_reg = i2c_read_reg(hi2c, bme_addr, &CTRL_HUM_REG);
 800066a:	7bfb      	ldrb	r3, [r7, #15]
 800066c:	4a16      	ldr	r2, [pc, #88]	; (80006c8 <init_bme280+0x98>)
 800066e:	4619      	mov	r1, r3
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f000 fa3f 	bl	8000af4 <i2c_read_reg>
 8000676:	4603      	mov	r3, r0
 8000678:	73bb      	strb	r3, [r7, #14]
	control_reg = control_reg & 0xF8;
 800067a:	7bbb      	ldrb	r3, [r7, #14]
 800067c:	f023 0307 	bic.w	r3, r3, #7
 8000680:	73bb      	strb	r3, [r7, #14]
	control_reg = control_reg | CTRL_HUM_MSK;
 8000682:	7bbb      	ldrb	r3, [r7, #14]
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	73bb      	strb	r3, [r7, #14]
	ret = i2c_write_reg(hi2c, bme_addr, &CTRL_HUM_REG, control_reg);
 800068a:	7bbb      	ldrb	r3, [r7, #14]
 800068c:	7bf9      	ldrb	r1, [r7, #15]
 800068e:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <init_bme280+0x98>)
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f000 fa57 	bl	8000b44 <i2c_write_reg>
 8000696:	4603      	mov	r3, r0
 8000698:	737b      	strb	r3, [r7, #13]

	// Set measure control register
	ret = i2c_write_reg(hi2c, bme_addr, &CTRL_MEAS_REG, CTRL_MEAS_MSK);
 800069a:	7bf9      	ldrb	r1, [r7, #15]
 800069c:	2327      	movs	r3, #39	; 0x27
 800069e:	4a0b      	ldr	r2, [pc, #44]	; (80006cc <init_bme280+0x9c>)
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f000 fa4f 	bl	8000b44 <i2c_write_reg>
 80006a6:	4603      	mov	r3, r0
 80006a8:	737b      	strb	r3, [r7, #13]

	// Set the config register
	ret = i2c_write_reg(hi2c, bme_addr, &CONF_REG, CONF_MSK);
 80006aa:	7bf9      	ldrb	r1, [r7, #15]
 80006ac:	2300      	movs	r3, #0
 80006ae:	4a08      	ldr	r2, [pc, #32]	; (80006d0 <init_bme280+0xa0>)
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f000 fa47 	bl	8000b44 <i2c_write_reg>
 80006b6:	4603      	mov	r3, r0
 80006b8:	737b      	strb	r3, [r7, #13]

	return ret;
 80006ba:	7b7b      	ldrb	r3, [r7, #13]
}
 80006bc:	4618      	mov	r0, r3
 80006be:	3710      	adds	r7, #16
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	2000000a 	.word	0x2000000a
 80006c8:	2000000b 	.word	0x2000000b
 80006cc:	2000000c 	.word	0x2000000c
 80006d0:	2000000d 	.word	0x2000000d

080006d4 <readBME280_id_reg>:

void readTempHumPres(uint8_t values[6], I2C_HandleTypeDef* hi2c) {

}

uint8_t readBME280_id_reg(I2C_HandleTypeDef* hi2c, uint8_t bme) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	460b      	mov	r3, r1
 80006de:	70fb      	strb	r3, [r7, #3]
	uint8_t bme_addr = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	73fb      	strb	r3, [r7, #15]
	if (bme == 0) {
 80006e4:	78fb      	ldrb	r3, [r7, #3]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d102      	bne.n	80006f0 <readBME280_id_reg+0x1c>
		bme_addr = BME280_ADDR_0;
 80006ea:	2376      	movs	r3, #118	; 0x76
 80006ec:	73fb      	strb	r3, [r7, #15]
 80006ee:	e004      	b.n	80006fa <readBME280_id_reg+0x26>
	} else if (bme == 1) {
 80006f0:	78fb      	ldrb	r3, [r7, #3]
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d101      	bne.n	80006fa <readBME280_id_reg+0x26>
		bme_addr = BME280_ADDR_1;
 80006f6:	2377      	movs	r3, #119	; 0x77
 80006f8:	73fb      	strb	r3, [r7, #15]
	}

	return i2c_read_reg(hi2c, bme_addr, &ID_REG);
 80006fa:	7bfb      	ldrb	r3, [r7, #15]
 80006fc:	4a04      	ldr	r2, [pc, #16]	; (8000710 <readBME280_id_reg+0x3c>)
 80006fe:	4619      	mov	r1, r3
 8000700:	6878      	ldr	r0, [r7, #4]
 8000702:	f000 f9f7 	bl	8000af4 <i2c_read_reg>
 8000706:	4603      	mov	r3, r0
}
 8000708:	4618      	mov	r0, r3
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000009 	.word	0x20000009

08000714 <getGPIOConfig>:
uint8_t FLASH_READEN 	= 0x03;			// Read enable to begin reading data
uint8_t FLASH_READ_MANU	= 0x90;			// Instruction code to read the manufacturer ID
uint8_t FLASH_32K_ERS	= 0x52;			// Erase all memory within a 32K-byte block
uint8_t FLASH_ERASE		= 0x60;			// Erase the entire chip

GPIO_Config getGPIOConfig(uint8_t flashNo) {
 8000714:	b480      	push	{r7}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	460b      	mov	r3, r1
 800071e:	70fb      	strb	r3, [r7, #3]
    GPIO_Config config;

    if (flashNo == 0) {
 8000720:	78fb      	ldrb	r3, [r7, #3]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d104      	bne.n	8000730 <getGPIOConfig+0x1c>
        config.GPIOx = GPIOD;
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <getGPIOConfig+0x48>)
 8000728:	60bb      	str	r3, [r7, #8]
        config.GPIO_Pin_CS = GPIO_PIN_2;
 800072a:	2304      	movs	r3, #4
 800072c:	81bb      	strh	r3, [r7, #12]
 800072e:	e007      	b.n	8000740 <getGPIOConfig+0x2c>
    } else if (flashNo == 1) {
 8000730:	78fb      	ldrb	r3, [r7, #3]
 8000732:	2b01      	cmp	r3, #1
 8000734:	d104      	bne.n	8000740 <getGPIOConfig+0x2c>
        config.GPIOx = GPIOB;
 8000736:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <getGPIOConfig+0x4c>)
 8000738:	60bb      	str	r3, [r7, #8]
        config.GPIO_Pin_CS = GPIO_PIN_12;
 800073a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073e:	81bb      	strh	r3, [r7, #12]
    }

    return config;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	461a      	mov	r2, r3
 8000744:	f107 0308 	add.w	r3, r7, #8
 8000748:	e893 0003 	ldmia.w	r3, {r0, r1}
 800074c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	3714      	adds	r7, #20
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	40020c00 	.word	0x40020c00
 8000760:	40020400 	.word	0x40020400

08000764 <erase_chip_spi>:
 *      Author: aidencontini
 */

#include "data_output_spi.h"

HAL_StatusTypeDef erase_chip_spi(SPI_HandleTypeDef *hspi) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;  // Initialize with success
 800076c:	2300      	movs	r3, #0
 800076e:	73bb      	strb	r3, [r7, #14]

	uint8_t busy = 0x01;
 8000770:	2301      	movs	r3, #1
 8000772:	73fb      	strb	r3, [r7, #15]
	while(busy) {
 8000774:	e007      	b.n	8000786 <erase_chip_spi+0x22>
		busy = (check_status_register(hspi, 0) & 0x01);	// Check if there is a write in progress
 8000776:	2100      	movs	r1, #0
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f000 f8bf 	bl	80008fc <check_status_register>
 800077e:	4603      	mov	r3, r0
 8000780:	f003 0301 	and.w	r3, r3, #1
 8000784:	73fb      	strb	r3, [r7, #15]
	while(busy) {
 8000786:	7bfb      	ldrb	r3, [r7, #15]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d1f4      	bne.n	8000776 <erase_chip_spi+0x12>
	}

	write_enable_spi(hspi);
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f000 f835 	bl	80007fc <write_enable_spi>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);	// Set the chip select pin to low to initiate SPI comms
 8000792:	2200      	movs	r2, #0
 8000794:	2104      	movs	r1, #4
 8000796:	4811      	ldr	r0, [pc, #68]	; (80007dc <erase_chip_spi+0x78>)
 8000798:	f001 fdc0 	bl	800231c <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(hspi, &FLASH_ERASE, 1, 100);	// Write the chip erase value to the FLASH to initial writing
 800079c:	2364      	movs	r3, #100	; 0x64
 800079e:	2201      	movs	r2, #1
 80007a0:	490f      	ldr	r1, [pc, #60]	; (80007e0 <erase_chip_spi+0x7c>)
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f004 f811 	bl	80047ca <HAL_SPI_Transmit>
 80007a8:	4603      	mov	r3, r0
 80007aa:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80007ac:	2201      	movs	r2, #1
 80007ae:	2104      	movs	r1, #4
 80007b0:	480a      	ldr	r0, [pc, #40]	; (80007dc <erase_chip_spi+0x78>)
 80007b2:	f001 fdb3 	bl	800231c <HAL_GPIO_WritePin>

	busy = 0x01;
 80007b6:	2301      	movs	r3, #1
 80007b8:	73fb      	strb	r3, [r7, #15]
	while(busy) {
 80007ba:	e007      	b.n	80007cc <erase_chip_spi+0x68>
		busy = (check_status_register(hspi, 0) & 0x01);	// Check if there is a write in progress
 80007bc:	2100      	movs	r1, #0
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f000 f89c 	bl	80008fc <check_status_register>
 80007c4:	4603      	mov	r3, r0
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	73fb      	strb	r3, [r7, #15]
	while(busy) {
 80007cc:	7bfb      	ldrb	r3, [r7, #15]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d1f4      	bne.n	80007bc <erase_chip_spi+0x58>
	}

    // Return the status (HAL_OK for success, HAL_ERROR for failure)
    return status;
 80007d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40020c00 	.word	0x40020c00
 80007e0:	20000012 	.word	0x20000012

080007e4 <erase_32k_spi>:

void erase_32k_spi(SPI_HandleTypeDef *hspi, uint32_t addr) {
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	6039      	str	r1, [r7, #0]
//	HAL_SPI_Transmit(hspi, &addrH, 1, 100);
//	HAL_SPI_Transmit(hspi, &addrM, 1, 100);
//	HAL_SPI_Transmit(hspi, &addrL, 1, 100);
//
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
	return;
 80007ee:	bf00      	nop
}
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
	...

080007fc <write_enable_spi>:

void write_enable_spi(SPI_HandleTypeDef *hspi) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);	// Set the chip select pin to low to initiate SPI comms
 8000804:	2200      	movs	r2, #0
 8000806:	2104      	movs	r1, #4
 8000808:	4808      	ldr	r0, [pc, #32]	; (800082c <write_enable_spi+0x30>)
 800080a:	f001 fd87 	bl	800231c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &FLASH_WREN, 1, 100);	// Write the write enable value to the FLASH to initial writing
 800080e:	2364      	movs	r3, #100	; 0x64
 8000810:	2201      	movs	r2, #1
 8000812:	4907      	ldr	r1, [pc, #28]	; (8000830 <write_enable_spi+0x34>)
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f003 ffd8 	bl	80047ca <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 800081a:	2201      	movs	r2, #1
 800081c:	2104      	movs	r1, #4
 800081e:	4803      	ldr	r0, [pc, #12]	; (800082c <write_enable_spi+0x30>)
 8000820:	f001 fd7c 	bl	800231c <HAL_GPIO_WritePin>
}
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40020c00 	.word	0x40020c00
 8000830:	2000000e 	.word	0x2000000e

08000834 <write_data_spi>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);	// Set the chip select pin to low to initiate SPI comms
	HAL_SPI_Transmit(hspi, &FLASH_WRDIS, 1, 100);	// Write the write enable value to the FLASH to initial writing
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
}

uint8_t write_data_spi(uint8_t page[PAGE_SIZE], GPIO_PinState flight_mode, SPI_HandleTypeDef *hspi, int addr) {
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	607a      	str	r2, [r7, #4]
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	460b      	mov	r3, r1
 8000842:	72fb      	strb	r3, [r7, #11]
	uint8_t exit = EXIT_FAILURE;
 8000844:	2301      	movs	r3, #1
 8000846:	75fb      	strb	r3, [r7, #23]

	// If in flight mode, write data out to EEPROM
	if(flight_mode == GPIO_PIN_SET) {
 8000848:	7afb      	ldrb	r3, [r7, #11]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d14b      	bne.n	80008e6 <write_data_spi+0xb2>

		uint8_t busy = 0x01;
 800084e:	2301      	movs	r3, #1
 8000850:	75bb      	strb	r3, [r7, #22]
		while(busy) {
 8000852:	e007      	b.n	8000864 <write_data_spi+0x30>
			busy = (check_status_register(hspi, 0) & 0x01);	// Check if there is a write in progress
 8000854:	2100      	movs	r1, #0
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f000 f850 	bl	80008fc <check_status_register>
 800085c:	4603      	mov	r3, r0
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	75bb      	strb	r3, [r7, #22]
		while(busy) {
 8000864:	7dbb      	ldrb	r3, [r7, #22]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d1f4      	bne.n	8000854 <write_data_spi+0x20>
		}

		// Send the write enable signal
		write_enable_spi(hspi);
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f7ff ffc6 	bl	80007fc <write_enable_spi>

		// Split the 24 bit address into three 8 bit ints
		uint8_t addrL = addr & 0xFF;  // Get the low byte
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	b2db      	uxtb	r3, r3
 8000874:	757b      	strb	r3, [r7, #21]
		uint8_t addrM = (addr >> 8) & 0xFF;  // Get the middle byte
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	121b      	asrs	r3, r3, #8
 800087a:	b2db      	uxtb	r3, r3
 800087c:	753b      	strb	r3, [r7, #20]
		uint8_t addrH = (addr >> 16) & 0xFF;  // Get the high byte
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	141b      	asrs	r3, r3, #16
 8000882:	b2db      	uxtb	r3, r3
 8000884:	74fb      	strb	r3, [r7, #19]

		// Send the PageWrite command
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);	// Set the chip select pin to low to initiate SPI comms
 8000886:	2200      	movs	r2, #0
 8000888:	2104      	movs	r1, #4
 800088a:	481a      	ldr	r0, [pc, #104]	; (80008f4 <write_data_spi+0xc0>)
 800088c:	f001 fd46 	bl	800231c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(hspi, &FLASH_PGWR, 1, 100);	// Write the write enable value to the Flash to initial writing
 8000890:	2364      	movs	r3, #100	; 0x64
 8000892:	2201      	movs	r2, #1
 8000894:	4918      	ldr	r1, [pc, #96]	; (80008f8 <write_data_spi+0xc4>)
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f003 ff97 	bl	80047ca <HAL_SPI_Transmit>

		// Transmit the 24 bit address of the page to write to
		HAL_SPI_Transmit(hspi, &addrH, 1, 100);
 800089c:	f107 0113 	add.w	r1, r7, #19
 80008a0:	2364      	movs	r3, #100	; 0x64
 80008a2:	2201      	movs	r2, #1
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f003 ff90 	bl	80047ca <HAL_SPI_Transmit>
		HAL_SPI_Transmit(hspi, &addrM, 1, 100);
 80008aa:	f107 0114 	add.w	r1, r7, #20
 80008ae:	2364      	movs	r3, #100	; 0x64
 80008b0:	2201      	movs	r2, #1
 80008b2:	6878      	ldr	r0, [r7, #4]
 80008b4:	f003 ff89 	bl	80047ca <HAL_SPI_Transmit>
		HAL_SPI_Transmit(hspi, &addrL, 1, 100);
 80008b8:	f107 0115 	add.w	r1, r7, #21
 80008bc:	2364      	movs	r3, #100	; 0x64
 80008be:	2201      	movs	r2, #1
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f003 ff82 	bl	80047ca <HAL_SPI_Transmit>

		// Transmit the data to be written to the entire page
		HAL_SPI_Transmit(hspi, page, PAGE_SIZE, 1000);
 80008c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008ce:	68f9      	ldr	r1, [r7, #12]
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	f003 ff7a 	bl	80047ca <HAL_SPI_Transmit>

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);	// Set the chip select pin to high to remove the Flash from the SPI bus
 80008d6:	2201      	movs	r2, #1
 80008d8:	2104      	movs	r1, #4
 80008da:	4806      	ldr	r0, [pc, #24]	; (80008f4 <write_data_spi+0xc0>)
 80008dc:	f001 fd1e 	bl	800231c <HAL_GPIO_WritePin>
		exit = EXIT_SUCCESS;
 80008e0:	2300      	movs	r3, #0
 80008e2:	75fb      	strb	r3, [r7, #23]
 80008e4:	e001      	b.n	80008ea <write_data_spi+0xb6>

	// If not in flight mode, exit
	} else {
		exit = EXIT_SUCCESS;
 80008e6:	2300      	movs	r3, #0
 80008e8:	75fb      	strb	r3, [r7, #23]
	}
	return exit;
 80008ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3718      	adds	r7, #24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40020c00 	.word	0x40020c00
 80008f8:	2000000f 	.word	0x2000000f

080008fc <check_status_register>:
 *      Author: aidencontini
 */

#include "data_read_spi.h"

uint8_t check_status_register(SPI_HandleTypeDef *hspi, uint8_t flashNo) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	460b      	mov	r3, r1
 8000906:	70fb      	strb	r3, [r7, #3]
	GPIO_Config config = getGPIOConfig(flashNo);
 8000908:	f107 0308 	add.w	r3, r7, #8
 800090c:	78fa      	ldrb	r2, [r7, #3]
 800090e:	4611      	mov	r1, r2
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff feff 	bl	8000714 <getGPIOConfig>
	return spi_sendOp_readByte(FLASH_READSR1, hspi, config.GPIOx, config.GPIO_Pin_CS);
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <check_status_register+0x34>)
 8000918:	7818      	ldrb	r0, [r3, #0]
 800091a:	68ba      	ldr	r2, [r7, #8]
 800091c:	89bb      	ldrh	r3, [r7, #12]
 800091e:	6879      	ldr	r1, [r7, #4]
 8000920:	f000 fd04 	bl	800132c <spi_sendOp_readByte>
 8000924:	4603      	mov	r3, r0
}
 8000926:	4618      	mov	r0, r3
 8000928:	3710      	adds	r7, #16
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000010 	.word	0x20000010

08000934 <find_next_blank_page>:

uint32_t find_next_blank_page(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, GPIO_PinState *end_of_flash_ptr, uint8_t flashNo) {
 8000934:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000938:	b093      	sub	sp, #76	; 0x4c
 800093a:	af04      	add	r7, sp, #16
 800093c:	60f8      	str	r0, [r7, #12]
 800093e:	60b9      	str	r1, [r7, #8]
 8000940:	607a      	str	r2, [r7, #4]
 8000942:	70fb      	strb	r3, [r7, #3]
 8000944:	466b      	mov	r3, sp
 8000946:	461e      	mov	r6, r3
	uint8_t firstBytes = 4;
 8000948:	2304      	movs	r3, #4
 800094a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	GPIO_Config config = getGPIOConfig(flashNo);
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	78fa      	ldrb	r2, [r7, #3]
 8000954:	4611      	mov	r1, r2
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff fedc 	bl	8000714 <getGPIOConfig>

	uint8_t page_start[firstBytes];
 800095c:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8000960:	460b      	mov	r3, r1
 8000962:	3b01      	subs	r3, #1
 8000964:	623b      	str	r3, [r7, #32]
 8000966:	b2cb      	uxtb	r3, r1
 8000968:	2200      	movs	r2, #0
 800096a:	4698      	mov	r8, r3
 800096c:	4691      	mov	r9, r2
 800096e:	f04f 0200 	mov.w	r2, #0
 8000972:	f04f 0300 	mov.w	r3, #0
 8000976:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800097a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800097e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000982:	b2cb      	uxtb	r3, r1
 8000984:	2200      	movs	r2, #0
 8000986:	461c      	mov	r4, r3
 8000988:	4615      	mov	r5, r2
 800098a:	f04f 0200 	mov.w	r2, #0
 800098e:	f04f 0300 	mov.w	r3, #0
 8000992:	00eb      	lsls	r3, r5, #3
 8000994:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000998:	00e2      	lsls	r2, r4, #3
 800099a:	460b      	mov	r3, r1
 800099c:	3307      	adds	r3, #7
 800099e:	08db      	lsrs	r3, r3, #3
 80009a0:	00db      	lsls	r3, r3, #3
 80009a2:	ebad 0d03 	sub.w	sp, sp, r3
 80009a6:	ab04      	add	r3, sp, #16
 80009a8:	3300      	adds	r3, #0
 80009aa:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < firstBytes; i++) {
 80009ac:	2300      	movs	r3, #0
 80009ae:	637b      	str	r3, [r7, #52]	; 0x34
 80009b0:	e007      	b.n	80009c2 <find_next_blank_page+0x8e>
		page_start[i] = 0;
 80009b2:	69fa      	ldr	r2, [r7, #28]
 80009b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009b6:	4413      	add	r3, r2
 80009b8:	2200      	movs	r2, #0
 80009ba:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < firstBytes; i++) {
 80009bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009be:	3301      	adds	r3, #1
 80009c0:	637b      	str	r3, [r7, #52]	; 0x34
 80009c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80009c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009c8:	429a      	cmp	r2, r3
 80009ca:	dbf2      	blt.n	80009b2 <find_next_blank_page+0x7e>
	}

	uint32_t page_start_concat = (page_start[0] << 24) | (page_start[1] << 16) | (page_start[2] << 8) | page_start[3];
 80009cc:	69fb      	ldr	r3, [r7, #28]
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	061a      	lsls	r2, r3, #24
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	785b      	ldrb	r3, [r3, #1]
 80009d6:	041b      	lsls	r3, r3, #16
 80009d8:	431a      	orrs	r2, r3
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	789b      	ldrb	r3, [r3, #2]
 80009de:	021b      	lsls	r3, r3, #8
 80009e0:	4313      	orrs	r3, r2
 80009e2:	69fa      	ldr	r2, [r7, #28]
 80009e4:	78d2      	ldrb	r2, [r2, #3]
 80009e6:	4313      	orrs	r3, r2
 80009e8:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t temp = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t page_address = temp;
 80009ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009f0:	62bb      	str	r3, [r7, #40]	; 0x28

	while ((page_start_concat != 0xFFFFFFFF) || (temp == NUM_OF_PAGES)) {
 80009f2:	e035      	b.n	8000a60 <find_next_blank_page+0x12c>
		page_address = temp;
 80009f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28

		uint8_t busy = 0x01;
 80009f8:	2301      	movs	r3, #1
 80009fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while(busy) {
 80009fe:	e009      	b.n	8000a14 <find_next_blank_page+0xe0>
			busy = (check_status_register(hspi, flashNo) & 0x01);	// Check if there is a write in progress
 8000a00:	78fb      	ldrb	r3, [r7, #3]
 8000a02:	4619      	mov	r1, r3
 8000a04:	68f8      	ldr	r0, [r7, #12]
 8000a06:	f7ff ff79 	bl	80008fc <check_status_register>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	f003 0301 	and.w	r3, r3, #1
 8000a10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while(busy) {
 8000a14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d1f1      	bne.n	8000a00 <find_next_blank_page+0xcc>
		}

		spi_read_data(FLASH_READEN, firstBytes, page_start, hspi, page_address, config.GPIOx, config.GPIO_Pin_CS);
 8000a1c:	4b1b      	ldr	r3, [pc, #108]	; (8000a8c <find_next_blank_page+0x158>)
 8000a1e:	7818      	ldrb	r0, [r3, #0]
 8000a20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a24:	b299      	uxth	r1, r3
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	8b3a      	ldrh	r2, [r7, #24]
 8000a2a:	9202      	str	r2, [sp, #8]
 8000a2c:	9301      	str	r3, [sp, #4]
 8000a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a30:	9300      	str	r3, [sp, #0]
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	69fa      	ldr	r2, [r7, #28]
 8000a36:	f000 fca6 	bl	8001386 <spi_read_data>

		page_start_concat = (page_start[0] << 24) | (page_start[1] << 16) | (page_start[2] << 8) | page_start[3];
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	061a      	lsls	r2, r3, #24
 8000a40:	69fb      	ldr	r3, [r7, #28]
 8000a42:	785b      	ldrb	r3, [r3, #1]
 8000a44:	041b      	lsls	r3, r3, #16
 8000a46:	431a      	orrs	r2, r3
 8000a48:	69fb      	ldr	r3, [r7, #28]
 8000a4a:	789b      	ldrb	r3, [r3, #2]
 8000a4c:	021b      	lsls	r3, r3, #8
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	69fa      	ldr	r2, [r7, #28]
 8000a52:	78d2      	ldrb	r2, [r2, #3]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	633b      	str	r3, [r7, #48]	; 0x30
		temp += PAGE_SIZE;
 8000a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a5a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	while ((page_start_concat != 0xFFFFFFFF) || (temp == NUM_OF_PAGES)) {
 8000a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a66:	d1c5      	bne.n	80009f4 <find_next_blank_page+0xc0>
 8000a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a6e:	d0c1      	beq.n	80009f4 <find_next_blank_page+0xc0>
	}

	if (page_address == (NUM_OF_PAGES * PAGE_SIZE)) {
 8000a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a76:	d102      	bne.n	8000a7e <find_next_blank_page+0x14a>
		*end_of_flash_ptr = GPIO_PIN_RESET;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	701a      	strb	r2, [r3, #0]
	}
	return page_address;
 8000a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a80:	46b5      	mov	sp, r6
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	373c      	adds	r7, #60	; 0x3c
 8000a86:	46bd      	mov	sp, r7
 8000a88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a8c:	20000011 	.word	0x20000011

08000a90 <read_page_spi>:

void read_page_spi(uint8_t data_read[PAGE_SIZE], SPI_HandleTypeDef *hspi, uint32_t addr, uint8_t flashNo) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08c      	sub	sp, #48	; 0x30
 8000a94:	af04      	add	r7, sp, #16
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
 8000a9c:	70fb      	strb	r3, [r7, #3]
	GPIO_Config config = getGPIOConfig(flashNo);
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	78fa      	ldrb	r2, [r7, #3]
 8000aa4:	4611      	mov	r1, r2
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff fe34 	bl	8000714 <getGPIOConfig>

	// Read the status register to ensure no write is currently in progress
	uint8_t busy = 0x01;
 8000aac:	2301      	movs	r3, #1
 8000aae:	77fb      	strb	r3, [r7, #31]
	while(busy) {
 8000ab0:	e008      	b.n	8000ac4 <read_page_spi+0x34>
		busy = (check_status_register(hspi, flashNo) & 0x01);	// Check if there is a write in progress
 8000ab2:	78fb      	ldrb	r3, [r7, #3]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	68b8      	ldr	r0, [r7, #8]
 8000ab8:	f7ff ff20 	bl	80008fc <check_status_register>
 8000abc:	4603      	mov	r3, r0
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	77fb      	strb	r3, [r7, #31]
	while(busy) {
 8000ac4:	7ffb      	ldrb	r3, [r7, #31]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d1f3      	bne.n	8000ab2 <read_page_spi+0x22>
	}

	spi_read_data(FLASH_READEN, PAGE_SIZE, data_read, hspi, addr, config.GPIOx, config.GPIO_Pin_CS);
 8000aca:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <read_page_spi+0x60>)
 8000acc:	7818      	ldrb	r0, [r3, #0]
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	8b3a      	ldrh	r2, [r7, #24]
 8000ad2:	9202      	str	r2, [sp, #8]
 8000ad4:	9301      	str	r3, [sp, #4]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	9300      	str	r3, [sp, #0]
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	68fa      	ldr	r2, [r7, #12]
 8000ade:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ae2:	f000 fc50 	bl	8001386 <spi_read_data>
}
 8000ae6:	bf00      	nop
 8000ae8:	3720      	adds	r7, #32
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000011 	.word	0x20000011

08000af4 <i2c_read_reg>:
 *      Author: aidencontini
 */

#include "i2c_driver.h"

uint8_t i2c_read_reg(I2C_HandleTypeDef* hi2c, uint8_t dev_addr, uint8_t* register_addr) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b088      	sub	sp, #32
 8000af8:	af02      	add	r7, sp, #8
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	460b      	mov	r3, r1
 8000afe:	607a      	str	r2, [r7, #4]
 8000b00:	72fb      	strb	r3, [r7, #11]
	uint8_t read = 0x00;
 8000b02:	2300      	movs	r3, #0
 8000b04:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Master_Transmit(hi2c, (dev_addr << 1) | 0x00, register_addr, 1, 100);
 8000b06:	7afb      	ldrb	r3, [r7, #11]
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	b299      	uxth	r1, r3
 8000b0e:	2364      	movs	r3, #100	; 0x64
 8000b10:	9300      	str	r3, [sp, #0]
 8000b12:	2301      	movs	r3, #1
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	68f8      	ldr	r0, [r7, #12]
 8000b18:	f001 fd78 	bl	800260c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, (dev_addr << 1) | 0x01, &read, 1, 100);
 8000b1c:	7afb      	ldrb	r3, [r7, #11]
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	b21b      	sxth	r3, r3
 8000b22:	f043 0301 	orr.w	r3, r3, #1
 8000b26:	b21b      	sxth	r3, r3
 8000b28:	b299      	uxth	r1, r3
 8000b2a:	f107 0217 	add.w	r2, r7, #23
 8000b2e:	2364      	movs	r3, #100	; 0x64
 8000b30:	9300      	str	r3, [sp, #0]
 8000b32:	2301      	movs	r3, #1
 8000b34:	68f8      	ldr	r0, [r7, #12]
 8000b36:	f001 fe67 	bl	8002808 <HAL_I2C_Master_Receive>
	return read;
 8000b3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3718      	adds	r7, #24
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <i2c_write_reg>:

HAL_StatusTypeDef i2c_write_reg(I2C_HandleTypeDef* hi2c, uint8_t dev_addr, uint8_t* register_addr, uint8_t data) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b088      	sub	sp, #32
 8000b48:	af02      	add	r7, sp, #8
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	607a      	str	r2, [r7, #4]
 8000b4e:	461a      	mov	r2, r3
 8000b50:	460b      	mov	r3, r1
 8000b52:	72fb      	strb	r3, [r7, #11]
 8000b54:	4613      	mov	r3, r2
 8000b56:	72bb      	strb	r3, [r7, #10]
	uint8_t data_tx[2] = {*register_addr, data};
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	753b      	strb	r3, [r7, #20]
 8000b5e:	7abb      	ldrb	r3, [r7, #10]
 8000b60:	757b      	strb	r3, [r7, #21]
	return HAL_I2C_Master_Transmit(hi2c, (dev_addr << 1) | 0x00, data_tx, 2, 100);
 8000b62:	7afb      	ldrb	r3, [r7, #11]
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	b299      	uxth	r1, r3
 8000b6a:	f107 0214 	add.w	r2, r7, #20
 8000b6e:	2364      	movs	r3, #100	; 0x64
 8000b70:	9300      	str	r3, [sp, #0]
 8000b72:	2302      	movs	r3, #2
 8000b74:	68f8      	ldr	r0, [r7, #12]
 8000b76:	f001 fd49 	bl	800260c <HAL_I2C_Master_Transmit>
 8000b7a:	4603      	mov	r3, r0
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3718      	adds	r7, #24
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b8a:	f000 ffed 	bl	8001b68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b8e:	f000 f8b9 	bl	8000d04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b92:	f000 fa55 	bl	8001040 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b96:	f000 f917 	bl	8000dc8 <MX_I2C1_Init>
  MX_RTC_Init();
 8000b9a:	f000 f995 	bl	8000ec8 <MX_RTC_Init>
  MX_SPI1_Init();
 8000b9e:	f000 f9b9 	bl	8000f14 <MX_SPI1_Init>
  MX_TIM6_Init();
 8000ba2:	f000 f9ed 	bl	8000f80 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8000ba6:	f000 fa21 	bl	8000fec <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8000baa:	f000 f94d 	bl	8000e48 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, UARTRxData,1);			// Initiate the UART Receive interrupt
 8000bae:	2201      	movs	r2, #1
 8000bb0:	4947      	ldr	r1, [pc, #284]	; (8000cd0 <main+0x14c>)
 8000bb2:	4848      	ldr	r0, [pc, #288]	; (8000cd4 <main+0x150>)
 8000bb4:	f004 ff7f 	bl	8005ab6 <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);	// Turn LED off
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2180      	movs	r1, #128	; 0x80
 8000bbc:	4846      	ldr	r0, [pc, #280]	; (8000cd8 <main+0x154>)
 8000bbe:	f001 fbad 	bl	800231c <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim6);
 8000bc2:	4846      	ldr	r0, [pc, #280]	; (8000cdc <main+0x158>)
 8000bc4:	f004 fb9e 	bl	8005304 <HAL_TIM_Base_Start_IT>
  byte_tracker = 0;
 8000bc8:	4b45      	ldr	r3, [pc, #276]	; (8000ce0 <main+0x15c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	801a      	strh	r2, [r3, #0]
  end_of_flash = GPIO_PIN_SET;
 8000bce:	4b45      	ldr	r3, [pc, #276]	; (8000ce4 <main+0x160>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	701a      	strb	r2, [r3, #0]
  clean_data_buffer();
 8000bd4:	f000 fb1c 	bl	8001210 <clean_data_buffer>
  initialise_rtc_default(&hrtc);
 8000bd8:	4843      	ldr	r0, [pc, #268]	; (8000ce8 <main+0x164>)
 8000bda:	f000 fb39 	bl	8001250 <initialise_rtc_default>
  init_accel(&hi2c1);
 8000bde:	4843      	ldr	r0, [pc, #268]	; (8000cec <main+0x168>)
 8000be0:	f7ff fc8a 	bl	80004f8 <init_accel>
  init_bme280(&hi2c2, 0);
 8000be4:	2100      	movs	r1, #0
 8000be6:	4842      	ldr	r0, [pc, #264]	; (8000cf0 <main+0x16c>)
 8000be8:	f7ff fd22 	bl	8000630 <init_bme280>
//  init_bme280(&hi2c2, 1);
  HAL_UART_Receive_IT(&huart2, UARTRxData,1);				// Initiate the UART Receive interrupt
 8000bec:	2201      	movs	r2, #1
 8000bee:	4938      	ldr	r1, [pc, #224]	; (8000cd0 <main+0x14c>)
 8000bf0:	4838      	ldr	r0, [pc, #224]	; (8000cd4 <main+0x150>)
 8000bf2:	f004 ff60 	bl	8005ab6 <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);		// SET SPI CS High to disable bus
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	2104      	movs	r1, #4
 8000bfa:	483e      	ldr	r0, [pc, #248]	; (8000cf4 <main+0x170>)
 8000bfc:	f001 fb8e 	bl	800231c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);		// Turn LED off
 8000c00:	2200      	movs	r2, #0
 8000c02:	2180      	movs	r1, #128	; 0x80
 8000c04:	4834      	ldr	r0, [pc, #208]	; (8000cd8 <main+0x154>)
 8000c06:	f001 fb89 	bl	800231c <HAL_GPIO_WritePin>
  next_blank_page = find_next_blank_page(&hspi1, &huart2, &end_of_flash);
  // Advance erase 32k
  erase_32k_spi(&hspi1, next_blank_page);
  **/

  uint32_t next_erase_page = next_blank_page + (100 * PAGE_SIZE);
 8000c0a:	4b3b      	ldr	r3, [pc, #236]	; (8000cf8 <main+0x174>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
 8000c12:	607b      	str	r3, [r7, #4]
  HAL_TIM_Base_Start_IT(&htim6);
 8000c14:	4831      	ldr	r0, [pc, #196]	; (8000cdc <main+0x158>)
 8000c16:	f004 fb75 	bl	8005304 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // If at the end of the data buffer, write the page out
    if(byte_tracker > (PAGE_SIZE - READ_SIZE)) {
 8000c1a:	4b31      	ldr	r3, [pc, #196]	; (8000ce0 <main+0x15c>)
 8000c1c:	881b      	ldrh	r3, [r3, #0]
 8000c1e:	2bf6      	cmp	r3, #246	; 0xf6
 8000c20:	d944      	bls.n	8000cac <main+0x128>
      GPIO_PinState flight_mode = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8000c22:	2102      	movs	r1, #2
 8000c24:	482c      	ldr	r0, [pc, #176]	; (8000cd8 <main+0x154>)
 8000c26:	f001 fb61 	bl	80022ec <HAL_GPIO_ReadPin>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	70fb      	strb	r3, [r7, #3]
      if((flight_mode & end_of_flash) == GPIO_PIN_SET) {
 8000c2e:	4b2d      	ldr	r3, [pc, #180]	; (8000ce4 <main+0x160>)
 8000c30:	781a      	ldrb	r2, [r3, #0]
 8000c32:	78fb      	ldrb	r3, [r7, #3]
 8000c34:	4013      	ands	r3, r2
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d132      	bne.n	8000ca2 <main+0x11e>
        // Disable interrupts briefly
        HAL_UART_AbortReceive_IT(&huart2); // Disable UART receive interrupt
 8000c3c:	4825      	ldr	r0, [pc, #148]	; (8000cd4 <main+0x150>)
 8000c3e:	f004 ff5f 	bl	8005b00 <HAL_UART_AbortReceive_IT>
        HAL_TIM_Base_Stop_IT(&htim6); // Disable timer interrupt
 8000c42:	4826      	ldr	r0, [pc, #152]	; (8000cdc <main+0x158>)
 8000c44:	f004 fbce 	bl	80053e4 <HAL_TIM_Base_Stop_IT>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);		// Toggle LED when writing data
 8000c48:	2201      	movs	r2, #1
 8000c4a:	2180      	movs	r1, #128	; 0x80
 8000c4c:	4822      	ldr	r0, [pc, #136]	; (8000cd8 <main+0x154>)
 8000c4e:	f001 fb65 	bl	800231c <HAL_GPIO_WritePin>
        write_data_spi(data_buffer, flight_mode, &hspi1, next_blank_page);
 8000c52:	4b29      	ldr	r3, [pc, #164]	; (8000cf8 <main+0x174>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	78f9      	ldrb	r1, [r7, #3]
 8000c58:	4a28      	ldr	r2, [pc, #160]	; (8000cfc <main+0x178>)
 8000c5a:	4829      	ldr	r0, [pc, #164]	; (8000d00 <main+0x17c>)
 8000c5c:	f7ff fdea 	bl	8000834 <write_data_spi>
        next_blank_page += PAGE_SIZE;
 8000c60:	4b25      	ldr	r3, [pc, #148]	; (8000cf8 <main+0x174>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000c68:	4a23      	ldr	r2, [pc, #140]	; (8000cf8 <main+0x174>)
 8000c6a:	6013      	str	r3, [r2, #0]

        // Renenable interrupts
        HAL_UART_Receive_IT(&huart2, UARTRxData,1);			// Initiate the UART Receive interrupt
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	4918      	ldr	r1, [pc, #96]	; (8000cd0 <main+0x14c>)
 8000c70:	4818      	ldr	r0, [pc, #96]	; (8000cd4 <main+0x150>)
 8000c72:	f004 ff20 	bl	8005ab6 <HAL_UART_Receive_IT>
        HAL_TIM_Base_Start_IT(&htim6);
 8000c76:	4819      	ldr	r0, [pc, #100]	; (8000cdc <main+0x158>)
 8000c78:	f004 fb44 	bl	8005304 <HAL_TIM_Base_Start_IT>

        if(next_blank_page == (NUM_OF_PAGES*PAGE_SIZE)) {
 8000c7c:	4b1e      	ldr	r3, [pc, #120]	; (8000cf8 <main+0x174>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c84:	d108      	bne.n	8000c98 <main+0x114>
          next_blank_page = find_next_blank_page(&hspi1, &huart2, &end_of_flash, 0);
 8000c86:	2300      	movs	r3, #0
 8000c88:	4a16      	ldr	r2, [pc, #88]	; (8000ce4 <main+0x160>)
 8000c8a:	4912      	ldr	r1, [pc, #72]	; (8000cd4 <main+0x150>)
 8000c8c:	481b      	ldr	r0, [pc, #108]	; (8000cfc <main+0x178>)
 8000c8e:	f7ff fe51 	bl	8000934 <find_next_blank_page>
 8000c92:	4603      	mov	r3, r0
 8000c94:	4a18      	ldr	r2, [pc, #96]	; (8000cf8 <main+0x174>)
 8000c96:	6013      	str	r3, [r2, #0]
        }
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);		// Toggle LED when writing data
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2180      	movs	r1, #128	; 0x80
 8000c9c:	480e      	ldr	r0, [pc, #56]	; (8000cd8 <main+0x154>)
 8000c9e:	f001 fb3d 	bl	800231c <HAL_GPIO_WritePin>
      }
      byte_tracker = 0;
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <main+0x15c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	801a      	strh	r2, [r3, #0]
      clean_data_buffer();
 8000ca8:	f000 fab2 	bl	8001210 <clean_data_buffer>
    }

    if(next_blank_page == next_erase_page) {
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <main+0x174>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	d1b1      	bne.n	8000c1a <main+0x96>
      erase_32k_spi(&hspi1, next_blank_page);
 8000cb6:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <main+0x174>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4619      	mov	r1, r3
 8000cbc:	480f      	ldr	r0, [pc, #60]	; (8000cfc <main+0x178>)
 8000cbe:	f7ff fd91 	bl	80007e4 <erase_32k_spi>
      next_erase_page = next_blank_page + (100 * PAGE_SIZE);
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <main+0x174>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
 8000cca:	607b      	str	r3, [r7, #4]
    if(byte_tracker > (PAGE_SIZE - READ_SIZE)) {
 8000ccc:	e7a5      	b.n	8000c1a <main+0x96>
 8000cce:	bf00      	nop
 8000cd0:	200001f0 	.word	0x200001f0
 8000cd4:	200001a8 	.word	0x200001a8
 8000cd8:	40020400 	.word	0x40020400
 8000cdc:	20000160 	.word	0x20000160
 8000ce0:	200002f8 	.word	0x200002f8
 8000ce4:	200002fa 	.word	0x200002fa
 8000ce8:	200000e8 	.word	0x200000e8
 8000cec:	20000040 	.word	0x20000040
 8000cf0:	20000094 	.word	0x20000094
 8000cf4:	40020c00 	.word	0x40020c00
 8000cf8:	200002f4 	.word	0x200002f4
 8000cfc:	20000108 	.word	0x20000108
 8000d00:	200001f4 	.word	0x200001f4

08000d04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b094      	sub	sp, #80	; 0x50
 8000d08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d0a:	f107 0320 	add.w	r3, r7, #32
 8000d0e:	2230      	movs	r2, #48	; 0x30
 8000d10:	2100      	movs	r1, #0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f005 ff1e 	bl	8006b54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60bb      	str	r3, [r7, #8]
 8000d2c:	4b24      	ldr	r3, [pc, #144]	; (8000dc0 <SystemClock_Config+0xbc>)
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d30:	4a23      	ldr	r2, [pc, #140]	; (8000dc0 <SystemClock_Config+0xbc>)
 8000d32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d36:	6413      	str	r3, [r2, #64]	; 0x40
 8000d38:	4b21      	ldr	r3, [pc, #132]	; (8000dc0 <SystemClock_Config+0xbc>)
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d44:	2300      	movs	r3, #0
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	4b1e      	ldr	r3, [pc, #120]	; (8000dc4 <SystemClock_Config+0xc0>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d50:	4a1c      	ldr	r2, [pc, #112]	; (8000dc4 <SystemClock_Config+0xc0>)
 8000d52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d56:	6013      	str	r3, [r2, #0]
 8000d58:	4b1a      	ldr	r3, [pc, #104]	; (8000dc4 <SystemClock_Config+0xc0>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000d64:	230a      	movs	r3, #10
 8000d66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d6c:	2310      	movs	r3, #16
 8000d6e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d70:	2301      	movs	r3, #1
 8000d72:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d74:	2300      	movs	r3, #0
 8000d76:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d78:	f107 0320 	add.w	r3, r7, #32
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f002 fb77 	bl	8003470 <HAL_RCC_OscConfig>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000d88:	f000 fa5c 	bl	8001244 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d8c:	230f      	movs	r3, #15
 8000d8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d90:	2300      	movs	r3, #0
 8000d92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000da0:	f107 030c 	add.w	r3, r7, #12
 8000da4:	2100      	movs	r1, #0
 8000da6:	4618      	mov	r0, r3
 8000da8:	f002 fdda 	bl	8003960 <HAL_RCC_ClockConfig>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000db2:	f000 fa47 	bl	8001244 <Error_Handler>
  }
}
 8000db6:	bf00      	nop
 8000db8:	3750      	adds	r7, #80	; 0x50
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40007000 	.word	0x40007000

08000dc8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dcc:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <MX_I2C1_Init+0x74>)
 8000dce:	4a1c      	ldr	r2, [pc, #112]	; (8000e40 <MX_I2C1_Init+0x78>)
 8000dd0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000dd2:	4b1a      	ldr	r3, [pc, #104]	; (8000e3c <MX_I2C1_Init+0x74>)
 8000dd4:	4a1b      	ldr	r2, [pc, #108]	; (8000e44 <MX_I2C1_Init+0x7c>)
 8000dd6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dd8:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <MX_I2C1_Init+0x74>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000dde:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <MX_I2C1_Init+0x74>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000de4:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <MX_I2C1_Init+0x74>)
 8000de6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dec:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <MX_I2C1_Init+0x74>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000df2:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <MX_I2C1_Init+0x74>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000df8:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <MX_I2C1_Init+0x74>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <MX_I2C1_Init+0x74>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e04:	480d      	ldr	r0, [pc, #52]	; (8000e3c <MX_I2C1_Init+0x74>)
 8000e06:	f001 fabd 	bl	8002384 <HAL_I2C_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e10:	f000 fa18 	bl	8001244 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e14:	2100      	movs	r1, #0
 8000e16:	4809      	ldr	r0, [pc, #36]	; (8000e3c <MX_I2C1_Init+0x74>)
 8000e18:	f002 faae 	bl	8003378 <HAL_I2CEx_ConfigAnalogFilter>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000e22:	f000 fa0f 	bl	8001244 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e26:	2100      	movs	r1, #0
 8000e28:	4804      	ldr	r0, [pc, #16]	; (8000e3c <MX_I2C1_Init+0x74>)
 8000e2a:	f002 fae1 	bl	80033f0 <HAL_I2CEx_ConfigDigitalFilter>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000e34:	f000 fa06 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20000040 	.word	0x20000040
 8000e40:	40005400 	.word	0x40005400
 8000e44:	000186a0 	.word	0x000186a0

08000e48 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e4c:	4b1b      	ldr	r3, [pc, #108]	; (8000ebc <MX_I2C2_Init+0x74>)
 8000e4e:	4a1c      	ldr	r2, [pc, #112]	; (8000ec0 <MX_I2C2_Init+0x78>)
 8000e50:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000e52:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <MX_I2C2_Init+0x74>)
 8000e54:	4a1b      	ldr	r2, [pc, #108]	; (8000ec4 <MX_I2C2_Init+0x7c>)
 8000e56:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e58:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <MX_I2C2_Init+0x74>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000e5e:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <MX_I2C2_Init+0x74>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e64:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <MX_I2C2_Init+0x74>)
 8000e66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e6a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e6c:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <MX_I2C2_Init+0x74>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000e72:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <MX_I2C2_Init+0x74>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e78:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <MX_I2C2_Init+0x74>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e7e:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <MX_I2C2_Init+0x74>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e84:	480d      	ldr	r0, [pc, #52]	; (8000ebc <MX_I2C2_Init+0x74>)
 8000e86:	f001 fa7d 	bl	8002384 <HAL_I2C_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000e90:	f000 f9d8 	bl	8001244 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e94:	2100      	movs	r1, #0
 8000e96:	4809      	ldr	r0, [pc, #36]	; (8000ebc <MX_I2C2_Init+0x74>)
 8000e98:	f002 fa6e 	bl	8003378 <HAL_I2CEx_ConfigAnalogFilter>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000ea2:	f000 f9cf 	bl	8001244 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4804      	ldr	r0, [pc, #16]	; (8000ebc <MX_I2C2_Init+0x74>)
 8000eaa:	f002 faa1 	bl	80033f0 <HAL_I2CEx_ConfigDigitalFilter>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000eb4:	f000 f9c6 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000094 	.word	0x20000094
 8000ec0:	40005800 	.word	0x40005800
 8000ec4:	000186a0 	.word	0x000186a0

08000ec8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <MX_RTC_Init+0x44>)
 8000ece:	4a10      	ldr	r2, [pc, #64]	; (8000f10 <MX_RTC_Init+0x48>)
 8000ed0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <MX_RTC_Init+0x44>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <MX_RTC_Init+0x44>)
 8000eda:	227f      	movs	r2, #127	; 0x7f
 8000edc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <MX_RTC_Init+0x44>)
 8000ee0:	22ff      	movs	r2, #255	; 0xff
 8000ee2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <MX_RTC_Init+0x44>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000eea:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <MX_RTC_Init+0x44>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <MX_RTC_Init+0x44>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ef6:	4805      	ldr	r0, [pc, #20]	; (8000f0c <MX_RTC_Init+0x44>)
 8000ef8:	f003 f8d2 	bl	80040a0 <HAL_RTC_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000f02:	f000 f99f 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	200000e8 	.word	0x200000e8
 8000f10:	40002800 	.word	0x40002800

08000f14 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f18:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <MX_SPI1_Init+0x64>)
 8000f1a:	4a18      	ldr	r2, [pc, #96]	; (8000f7c <MX_SPI1_Init+0x68>)
 8000f1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f1e:	4b16      	ldr	r3, [pc, #88]	; (8000f78 <MX_SPI1_Init+0x64>)
 8000f20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f26:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <MX_SPI1_Init+0x64>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <MX_SPI1_Init+0x64>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <MX_SPI1_Init+0x64>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f38:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <MX_SPI1_Init+0x64>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <MX_SPI1_Init+0x64>)
 8000f40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f44:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f46:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <MX_SPI1_Init+0x64>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f4c:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <MX_SPI1_Init+0x64>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <MX_SPI1_Init+0x64>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f58:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <MX_SPI1_Init+0x64>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <MX_SPI1_Init+0x64>)
 8000f60:	220a      	movs	r2, #10
 8000f62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f64:	4804      	ldr	r0, [pc, #16]	; (8000f78 <MX_SPI1_Init+0x64>)
 8000f66:	f003 fba7 	bl	80046b8 <HAL_SPI_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f70:	f000 f968 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000108 	.word	0x20000108
 8000f7c:	40013000 	.word	0x40013000

08000f80 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f86:	463b      	mov	r3, r7
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <MX_TIM6_Init+0x64>)
 8000f90:	4a15      	ldr	r2, [pc, #84]	; (8000fe8 <MX_TIM6_Init+0x68>)
 8000f92:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15999;
 8000f94:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <MX_TIM6_Init+0x64>)
 8000f96:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000f9a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9c:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <MX_TIM6_Init+0x64>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8000fa2:	4b10      	ldr	r3, [pc, #64]	; (8000fe4 <MX_TIM6_Init+0x64>)
 8000fa4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fa8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000faa:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <MX_TIM6_Init+0x64>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000fb0:	480c      	ldr	r0, [pc, #48]	; (8000fe4 <MX_TIM6_Init+0x64>)
 8000fb2:	f004 f957 	bl	8005264 <HAL_TIM_Base_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000fbc:	f000 f942 	bl	8001244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000fc8:	463b      	mov	r3, r7
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <MX_TIM6_Init+0x64>)
 8000fce:	f004 fc07 	bl	80057e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000fd8:	f000 f934 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000160 	.word	0x20000160
 8000fe8:	40001000 	.word	0x40001000

08000fec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	; (8001038 <MX_USART2_UART_Init+0x4c>)
 8000ff2:	4a12      	ldr	r2, [pc, #72]	; (800103c <MX_USART2_UART_Init+0x50>)
 8000ff4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000ff6:	4b10      	ldr	r3, [pc, #64]	; (8001038 <MX_USART2_UART_Init+0x4c>)
 8000ff8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ffc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <MX_USART2_UART_Init+0x4c>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <MX_USART2_UART_Init+0x4c>)
 8001006:	2200      	movs	r2, #0
 8001008:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800100a:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <MX_USART2_UART_Init+0x4c>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <MX_USART2_UART_Init+0x4c>)
 8001012:	220c      	movs	r2, #12
 8001014:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001016:	4b08      	ldr	r3, [pc, #32]	; (8001038 <MX_USART2_UART_Init+0x4c>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <MX_USART2_UART_Init+0x4c>)
 800101e:	2200      	movs	r2, #0
 8001020:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001022:	4805      	ldr	r0, [pc, #20]	; (8001038 <MX_USART2_UART_Init+0x4c>)
 8001024:	f004 fc6c 	bl	8005900 <HAL_UART_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800102e:	f000 f909 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200001a8 	.word	0x200001a8
 800103c:	40004400 	.word	0x40004400

08001040 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	; 0x28
 8001044:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
 800105a:	4b68      	ldr	r3, [pc, #416]	; (80011fc <MX_GPIO_Init+0x1bc>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a67      	ldr	r2, [pc, #412]	; (80011fc <MX_GPIO_Init+0x1bc>)
 8001060:	f043 0304 	orr.w	r3, r3, #4
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b65      	ldr	r3, [pc, #404]	; (80011fc <MX_GPIO_Init+0x1bc>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	4b61      	ldr	r3, [pc, #388]	; (80011fc <MX_GPIO_Init+0x1bc>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a60      	ldr	r2, [pc, #384]	; (80011fc <MX_GPIO_Init+0x1bc>)
 800107c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b5e      	ldr	r3, [pc, #376]	; (80011fc <MX_GPIO_Init+0x1bc>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	4b5a      	ldr	r3, [pc, #360]	; (80011fc <MX_GPIO_Init+0x1bc>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a59      	ldr	r2, [pc, #356]	; (80011fc <MX_GPIO_Init+0x1bc>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b57      	ldr	r3, [pc, #348]	; (80011fc <MX_GPIO_Init+0x1bc>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	4b53      	ldr	r3, [pc, #332]	; (80011fc <MX_GPIO_Init+0x1bc>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a52      	ldr	r2, [pc, #328]	; (80011fc <MX_GPIO_Init+0x1bc>)
 80010b4:	f043 0302 	orr.w	r3, r3, #2
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b50      	ldr	r3, [pc, #320]	; (80011fc <MX_GPIO_Init+0x1bc>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	603b      	str	r3, [r7, #0]
 80010ca:	4b4c      	ldr	r3, [pc, #304]	; (80011fc <MX_GPIO_Init+0x1bc>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a4b      	ldr	r2, [pc, #300]	; (80011fc <MX_GPIO_Init+0x1bc>)
 80010d0:	f043 0308 	orr.w	r3, r3, #8
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b49      	ldr	r3, [pc, #292]	; (80011fc <MX_GPIO_Init+0x1bc>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0308 	and.w	r3, r3, #8
 80010de:	603b      	str	r3, [r7, #0]
 80010e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_WP_GPIO_Port, SPI2_WP_Pin, GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2101      	movs	r1, #1
 80010e6:	4846      	ldr	r0, [pc, #280]	; (8001200 <MX_GPIO_Init+0x1c0>)
 80010e8:	f001 f918 	bl	800231c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 80010ec:	2200      	movs	r2, #0
 80010ee:	f44f 41a1 	mov.w	r1, #20608	; 0x5080
 80010f2:	4844      	ldr	r0, [pc, #272]	; (8001204 <MX_GPIO_Init+0x1c4>)
 80010f4:	f001 f912 	bl	800231c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI1_WP_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 80010f8:	2200      	movs	r2, #0
 80010fa:	f244 0104 	movw	r1, #16388	; 0x4004
 80010fe:	4842      	ldr	r0, [pc, #264]	; (8001208 <MX_GPIO_Init+0x1c8>)
 8001100:	f001 f90c 	bl	800231c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI2_WP_Pin */
  GPIO_InitStruct.Pin = SPI2_WP_Pin;
 8001104:	2301      	movs	r3, #1
 8001106:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001108:	2301      	movs	r3, #1
 800110a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800110c:	2301      	movs	r3, #1
 800110e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001110:	2300      	movs	r3, #0
 8001112:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_WP_GPIO_Port, &GPIO_InitStruct);
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	4619      	mov	r1, r3
 800111a:	4839      	ldr	r0, [pc, #228]	; (8001200 <MX_GPIO_Init+0x1c0>)
 800111c:	f000 ff3a 	bl	8001f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001120:	230c      	movs	r3, #12
 8001122:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001124:	2302      	movs	r3, #2
 8001126:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112c:	2303      	movs	r3, #3
 800112e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001130:	2305      	movs	r3, #5
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	4619      	mov	r1, r3
 800113a:	4831      	ldr	r0, [pc, #196]	; (8001200 <MX_GPIO_Init+0x1c0>)
 800113c:	f000 ff2a 	bl	8001f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : JMP_Flight_Pin */
  GPIO_InitStruct.Pin = JMP_Flight_Pin;
 8001140:	2302      	movs	r3, #2
 8001142:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001144:	2300      	movs	r3, #0
 8001146:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001148:	2302      	movs	r3, #2
 800114a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(JMP_Flight_GPIO_Port, &GPIO_InitStruct);
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	4619      	mov	r1, r3
 8001152:	482c      	ldr	r0, [pc, #176]	; (8001204 <MX_GPIO_Init+0x1c4>)
 8001154:	f000 ff1e 	bl	8001f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8001158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800115c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115e:	2301      	movs	r3, #1
 8001160:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001162:	2301      	movs	r3, #1
 8001164:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	4824      	ldr	r0, [pc, #144]	; (8001204 <MX_GPIO_Init+0x1c4>)
 8001172:	f000 ff0f 	bl	8001f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8001176:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800117a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117c:	2301      	movs	r3, #1
 800117e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001180:	2302      	movs	r3, #2
 8001182:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2300      	movs	r3, #0
 8001186:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	4619      	mov	r1, r3
 800118e:	481d      	ldr	r0, [pc, #116]	; (8001204 <MX_GPIO_Init+0x1c4>)
 8001190:	f000 ff00 	bl	8001f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_WP_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_WP_Pin|SPI1_CS_Pin;
 8001194:	f244 0304 	movw	r3, #16388	; 0x4004
 8001198:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119a:	2301      	movs	r3, #1
 800119c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800119e:	2301      	movs	r3, #1
 80011a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a2:	2300      	movs	r3, #0
 80011a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	4619      	mov	r1, r3
 80011ac:	4816      	ldr	r0, [pc, #88]	; (8001208 <MX_GPIO_Init+0x1c8>)
 80011ae:	f000 fef1 	bl	8001f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80011b2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80011b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b8:	2302      	movs	r3, #2
 80011ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c0:	2303      	movs	r3, #3
 80011c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80011c4:	2309      	movs	r3, #9
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	4619      	mov	r1, r3
 80011ce:	480f      	ldr	r0, [pc, #60]	; (800120c <MX_GPIO_Init+0x1cc>)
 80011d0:	f000 fee0 	bl	8001f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011d4:	2308      	movs	r3, #8
 80011d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e0:	2303      	movs	r3, #3
 80011e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011e4:	2305      	movs	r3, #5
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	4619      	mov	r1, r3
 80011ee:	4806      	ldr	r0, [pc, #24]	; (8001208 <MX_GPIO_Init+0x1c8>)
 80011f0:	f000 fed0 	bl	8001f94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011f4:	bf00      	nop
 80011f6:	3728      	adds	r7, #40	; 0x28
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40023800 	.word	0x40023800
 8001200:	40020800 	.word	0x40020800
 8001204:	40020400 	.word	0x40020400
 8001208:	40020c00 	.word	0x40020c00
 800120c:	40020000 	.word	0x40020000

08001210 <clean_data_buffer>:

/* USER CODE BEGIN 4 */
void clean_data_buffer() {
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
    for (int i = 0; i < PAGE_SIZE; ++i) {
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	e007      	b.n	800122c <clean_data_buffer+0x1c>
        data_buffer[i] = 0xFF;  // Initialize each element to 0xFF
 800121c:	4a08      	ldr	r2, [pc, #32]	; (8001240 <clean_data_buffer+0x30>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4413      	add	r3, r2
 8001222:	22ff      	movs	r2, #255	; 0xff
 8001224:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < PAGE_SIZE; ++i) {
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	3301      	adds	r3, #1
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2bff      	cmp	r3, #255	; 0xff
 8001230:	ddf4      	ble.n	800121c <clean_data_buffer+0xc>
    }
}
 8001232:	bf00      	nop
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	200001f4 	.word	0x200001f4

08001244 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001248:	b672      	cpsid	i
}
 800124a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800124c:	e7fe      	b.n	800124c <Error_Handler+0x8>
	...

08001250 <initialise_rtc_default>:
    .Month = RTC_MONTH_JANUARY, // Set default month (e.g., January)
    .Date = 1, // Set default day of the month
    .Year = 24 // Set default year (e.g., 2021)
};

void initialise_rtc_default(RTC_HandleTypeDef* hrtc) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	// Reset RTC on boot
	HAL_RTC_MspInit(hrtc); // Initialize RTC hardware
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f000 f983 	bl	8001564 <HAL_RTC_MspInit>
	HAL_RTC_SetTime(hrtc, &defaultTime, RTC_FORMAT_BIN); // Set default time
 800125e:	2200      	movs	r2, #0
 8001260:	4906      	ldr	r1, [pc, #24]	; (800127c <initialise_rtc_default+0x2c>)
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f002 ff9f 	bl	80041a6 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(hrtc, &defaultDate, RTC_FORMAT_BIN); // Set default date
 8001268:	2200      	movs	r2, #0
 800126a:	4905      	ldr	r1, [pc, #20]	; (8001280 <initialise_rtc_default+0x30>)
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f003 f892 	bl	8004396 <HAL_RTC_SetDate>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200002fc 	.word	0x200002fc
 8001280:	20000014 	.word	0x20000014

08001284 <getTimestampMilliseconds>:

uint32_t getTimestampMilliseconds(RTC_HandleTypeDef* hrtc) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b08c      	sub	sp, #48	; 0x30
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
    RTC_TimeTypeDef rtcTime;
    RTC_DateTypeDef rtcDate;

    // Read RTC time and date
    HAL_RTC_GetTime(hrtc, &rtcTime, RTC_FORMAT_BIN);
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	2200      	movs	r2, #0
 8001292:	4619      	mov	r1, r3
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f003 f820 	bl	80042da <HAL_RTC_GetTime>
    HAL_RTC_GetDate(hrtc, &rtcDate, RTC_FORMAT_BIN);
 800129a:	f107 030c 	add.w	r3, r7, #12
 800129e:	2200      	movs	r2, #0
 80012a0:	4619      	mov	r1, r3
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f003 f8fb 	bl	800449e <HAL_RTC_GetDate>

    // Calculate timestamp in milliseconds
    uint32_t timestampSeconds = rtcTime.Seconds + rtcTime.Minutes * 60 + rtcTime.Hours * 3600;
 80012a8:	7cbb      	ldrb	r3, [r7, #18]
 80012aa:	4619      	mov	r1, r3
 80012ac:	7c7b      	ldrb	r3, [r7, #17]
 80012ae:	461a      	mov	r2, r3
 80012b0:	4613      	mov	r3, r2
 80012b2:	011b      	lsls	r3, r3, #4
 80012b4:	1a9b      	subs	r3, r3, r2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	18ca      	adds	r2, r1, r3
 80012ba:	7c3b      	ldrb	r3, [r7, #16]
 80012bc:	4619      	mov	r1, r3
 80012be:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80012c2:	fb01 f303 	mul.w	r3, r1, r3
 80012c6:	4413      	add	r3, r2
 80012c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t timestampMilliseconds = timestampSeconds * 1000;
 80012ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012d0:	fb02 f303 	mul.w	r3, r2, r3
 80012d4:	62bb      	str	r3, [r7, #40]	; 0x28
    float subsecondsFraction = (float)(rtcTime.SecondFraction - rtcTime.SubSeconds) / (rtcTime.SecondFraction + 1);
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	ee07 3a90 	vmov	s15, r3
 80012e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	3301      	adds	r3, #1
 80012e8:	ee07 3a90 	vmov	s15, r3
 80012ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012f4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    timestampMilliseconds += subsecondsFraction * 1000;
 80012f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012fa:	ee07 3a90 	vmov	s15, r3
 80012fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001302:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001306:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001328 <getTimestampMilliseconds+0xa4>
 800130a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800130e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001312:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001316:	ee17 3a90 	vmov	r3, s15
 800131a:	62bb      	str	r3, [r7, #40]	; 0x28

    return timestampMilliseconds;
 800131c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800131e:	4618      	mov	r0, r3
 8001320:	3730      	adds	r7, #48	; 0x30
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	447a0000 	.word	0x447a0000

0800132c <spi_sendOp_readByte>:
#ifndef SRC_SPI_DRIVER_C_
#define SRC_SPI_DRIVER_C_

#include "spi_driver.h"

uint8_t spi_sendOp_readByte(uint8_t opcode, SPI_HandleTypeDef *hspi, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	60b9      	str	r1, [r7, #8]
 8001334:	607a      	str	r2, [r7, #4]
 8001336:	461a      	mov	r2, r3
 8001338:	4603      	mov	r3, r0
 800133a:	73fb      	strb	r3, [r7, #15]
 800133c:	4613      	mov	r3, r2
 800133e:	81bb      	strh	r3, [r7, #12]
	uint8_t opVal = opcode;
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	75fb      	strb	r3, [r7, #23]
	uint8_t ret_data = 0x00;
 8001344:	2300      	movs	r3, #0
 8001346:	75bb      	strb	r3, [r7, #22]

	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);	// Set the chip select pin to low to initiate SPI comms
 8001348:	89bb      	ldrh	r3, [r7, #12]
 800134a:	2200      	movs	r2, #0
 800134c:	4619      	mov	r1, r3
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f000 ffe4 	bl	800231c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &opVal, 1, 100);	// Write the write enable value to the Flash to initial reading
 8001354:	f107 0117 	add.w	r1, r7, #23
 8001358:	2364      	movs	r3, #100	; 0x64
 800135a:	2201      	movs	r2, #1
 800135c:	68b8      	ldr	r0, [r7, #8]
 800135e:	f003 fa34 	bl	80047ca <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, &ret_data, 1, 100);
 8001362:	f107 0116 	add.w	r1, r7, #22
 8001366:	2364      	movs	r3, #100	; 0x64
 8001368:	2201      	movs	r2, #1
 800136a:	68b8      	ldr	r0, [r7, #8]
 800136c:	f003 fb70 	bl	8004a50 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);
 8001370:	89bb      	ldrh	r3, [r7, #12]
 8001372:	2201      	movs	r2, #1
 8001374:	4619      	mov	r1, r3
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f000 ffd0 	bl	800231c <HAL_GPIO_WritePin>

	return ret_data;
 800137c:	7dbb      	ldrb	r3, [r7, #22]
}
 800137e:	4618      	mov	r0, r3
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <spi_read_data>:
	HAL_SPI_Transmit(hspi, &opVal, 1, 100);				// Write the opcode value
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);
}


void spi_read_data(uint8_t opcode, uint16_t data_size, uint8_t data_read[data_size], SPI_HandleTypeDef *hspi, uint32_t addr, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 8001386:	b580      	push	{r7, lr}
 8001388:	b086      	sub	sp, #24
 800138a:	af00      	add	r7, sp, #0
 800138c:	60ba      	str	r2, [r7, #8]
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	4603      	mov	r3, r0
 8001392:	73fb      	strb	r3, [r7, #15]
 8001394:	460b      	mov	r3, r1
 8001396:	81bb      	strh	r3, [r7, #12]
	uint8_t opVal = opcode;
 8001398:	7bfb      	ldrb	r3, [r7, #15]
 800139a:	75fb      	strb	r3, [r7, #23]

	// Read the entire contents of a page starting from the given address
	// Split the 24 bit address into three 8 bit ints
	uint8_t addrL = addr & 0xFF;  // Get the low byte
 800139c:	6a3b      	ldr	r3, [r7, #32]
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	75bb      	strb	r3, [r7, #22]
	uint8_t addrM = (addr >> 8) & 0xFF;  // Get the middle byte
 80013a2:	6a3b      	ldr	r3, [r7, #32]
 80013a4:	0a1b      	lsrs	r3, r3, #8
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	757b      	strb	r3, [r7, #21]
	uint8_t addrH = (addr >> 16) & 0xFF;  // Get the high byte
 80013aa:	6a3b      	ldr	r3, [r7, #32]
 80013ac:	0c1b      	lsrs	r3, r3, #16
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	753b      	strb	r3, [r7, #20]

	// Read the page denoted by the given address
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);
 80013b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80013b4:	2200      	movs	r2, #0
 80013b6:	4619      	mov	r1, r3
 80013b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80013ba:	f000 ffaf 	bl	800231c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &opVal, 1, 100);	// Write the read enable value
 80013be:	f107 0117 	add.w	r1, r7, #23
 80013c2:	2364      	movs	r3, #100	; 0x64
 80013c4:	2201      	movs	r2, #1
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f003 f9ff 	bl	80047ca <HAL_SPI_Transmit>

	// Transmit the 24 bit address of the page to initialise read from
	HAL_SPI_Transmit(hspi, &addrH, 1, 100);
 80013cc:	f107 0114 	add.w	r1, r7, #20
 80013d0:	2364      	movs	r3, #100	; 0x64
 80013d2:	2201      	movs	r2, #1
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f003 f9f8 	bl	80047ca <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &addrM, 1, 100);
 80013da:	f107 0115 	add.w	r1, r7, #21
 80013de:	2364      	movs	r3, #100	; 0x64
 80013e0:	2201      	movs	r2, #1
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f003 f9f1 	bl	80047ca <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &addrL, 1, 100);
 80013e8:	f107 0116 	add.w	r1, r7, #22
 80013ec:	2364      	movs	r3, #100	; 0x64
 80013ee:	2201      	movs	r2, #1
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f003 f9ea 	bl	80047ca <HAL_SPI_Transmit>

	HAL_SPI_Receive(hspi, data_read, 4, 100);
 80013f6:	2364      	movs	r3, #100	; 0x64
 80013f8:	2204      	movs	r2, #4
 80013fa:	68b9      	ldr	r1, [r7, #8]
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f003 fb27 	bl	8004a50 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);
 8001402:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001404:	2201      	movs	r2, #1
 8001406:	4619      	mov	r1, r3
 8001408:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800140a:	f000 ff87 	bl	800231c <HAL_GPIO_WritePin>
}
 800140e:	bf00      	nop
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	4b10      	ldr	r3, [pc, #64]	; (8001464 <HAL_MspInit+0x4c>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	4a0f      	ldr	r2, [pc, #60]	; (8001464 <HAL_MspInit+0x4c>)
 8001428:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800142c:	6453      	str	r3, [r2, #68]	; 0x44
 800142e:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <HAL_MspInit+0x4c>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	603b      	str	r3, [r7, #0]
 800143e:	4b09      	ldr	r3, [pc, #36]	; (8001464 <HAL_MspInit+0x4c>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	4a08      	ldr	r2, [pc, #32]	; (8001464 <HAL_MspInit+0x4c>)
 8001444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001448:	6413      	str	r3, [r2, #64]	; 0x40
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <HAL_MspInit+0x4c>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001452:	603b      	str	r3, [r7, #0]
 8001454:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	40023800 	.word	0x40023800

08001468 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08c      	sub	sp, #48	; 0x30
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001470:	f107 031c 	add.w	r3, r7, #28
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a33      	ldr	r2, [pc, #204]	; (8001554 <HAL_I2C_MspInit+0xec>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d12d      	bne.n	80014e6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	61bb      	str	r3, [r7, #24]
 800148e:	4b32      	ldr	r3, [pc, #200]	; (8001558 <HAL_I2C_MspInit+0xf0>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a31      	ldr	r2, [pc, #196]	; (8001558 <HAL_I2C_MspInit+0xf0>)
 8001494:	f043 0302 	orr.w	r3, r3, #2
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b2f      	ldr	r3, [pc, #188]	; (8001558 <HAL_I2C_MspInit+0xf0>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	61bb      	str	r3, [r7, #24]
 80014a4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ac:	2312      	movs	r3, #18
 80014ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b4:	2303      	movs	r3, #3
 80014b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014b8:	2304      	movs	r3, #4
 80014ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014bc:	f107 031c 	add.w	r3, r7, #28
 80014c0:	4619      	mov	r1, r3
 80014c2:	4826      	ldr	r0, [pc, #152]	; (800155c <HAL_I2C_MspInit+0xf4>)
 80014c4:	f000 fd66 	bl	8001f94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	4b22      	ldr	r3, [pc, #136]	; (8001558 <HAL_I2C_MspInit+0xf0>)
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	4a21      	ldr	r2, [pc, #132]	; (8001558 <HAL_I2C_MspInit+0xf0>)
 80014d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014d6:	6413      	str	r3, [r2, #64]	; 0x40
 80014d8:	4b1f      	ldr	r3, [pc, #124]	; (8001558 <HAL_I2C_MspInit+0xf0>)
 80014da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e0:	617b      	str	r3, [r7, #20]
 80014e2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80014e4:	e031      	b.n	800154a <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a1d      	ldr	r2, [pc, #116]	; (8001560 <HAL_I2C_MspInit+0xf8>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d12c      	bne.n	800154a <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f0:	2300      	movs	r3, #0
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	4b18      	ldr	r3, [pc, #96]	; (8001558 <HAL_I2C_MspInit+0xf0>)
 80014f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f8:	4a17      	ldr	r2, [pc, #92]	; (8001558 <HAL_I2C_MspInit+0xf0>)
 80014fa:	f043 0302 	orr.w	r3, r3, #2
 80014fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001500:	4b15      	ldr	r3, [pc, #84]	; (8001558 <HAL_I2C_MspInit+0xf0>)
 8001502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	613b      	str	r3, [r7, #16]
 800150a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800150c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001512:	2312      	movs	r3, #18
 8001514:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151a:	2303      	movs	r3, #3
 800151c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800151e:	2304      	movs	r3, #4
 8001520:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001522:	f107 031c 	add.w	r3, r7, #28
 8001526:	4619      	mov	r1, r3
 8001528:	480c      	ldr	r0, [pc, #48]	; (800155c <HAL_I2C_MspInit+0xf4>)
 800152a:	f000 fd33 	bl	8001f94 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	4b09      	ldr	r3, [pc, #36]	; (8001558 <HAL_I2C_MspInit+0xf0>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	4a08      	ldr	r2, [pc, #32]	; (8001558 <HAL_I2C_MspInit+0xf0>)
 8001538:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800153c:	6413      	str	r3, [r2, #64]	; 0x40
 800153e:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_I2C_MspInit+0xf0>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
}
 800154a:	bf00      	nop
 800154c:	3730      	adds	r7, #48	; 0x30
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40005400 	.word	0x40005400
 8001558:	40023800 	.word	0x40023800
 800155c:	40020400 	.word	0x40020400
 8001560:	40005800 	.word	0x40005800

08001564 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08e      	sub	sp, #56	; 0x38
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800156c:	f107 0308 	add.w	r3, r7, #8
 8001570:	2230      	movs	r2, #48	; 0x30
 8001572:	2100      	movs	r1, #0
 8001574:	4618      	mov	r0, r3
 8001576:	f005 faed 	bl	8006b54 <memset>
  if(hrtc->Instance==RTC)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a0c      	ldr	r2, [pc, #48]	; (80015b0 <HAL_RTC_MspInit+0x4c>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d111      	bne.n	80015a8 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001584:	2320      	movs	r3, #32
 8001586:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001588:	f44f 7300 	mov.w	r3, #512	; 0x200
 800158c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800158e:	f107 0308 	add.w	r3, r7, #8
 8001592:	4618      	mov	r0, r3
 8001594:	f002 fbc4 	bl	8003d20 <HAL_RCCEx_PeriphCLKConfig>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800159e:	f7ff fe51 	bl	8001244 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80015a2:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <HAL_RTC_MspInit+0x50>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80015a8:	bf00      	nop
 80015aa:	3738      	adds	r7, #56	; 0x38
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40002800 	.word	0x40002800
 80015b4:	42470e3c 	.word	0x42470e3c

080015b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08a      	sub	sp, #40	; 0x28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a19      	ldr	r2, [pc, #100]	; (800163c <HAL_SPI_MspInit+0x84>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d12b      	bne.n	8001632 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]
 80015de:	4b18      	ldr	r3, [pc, #96]	; (8001640 <HAL_SPI_MspInit+0x88>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e2:	4a17      	ldr	r2, [pc, #92]	; (8001640 <HAL_SPI_MspInit+0x88>)
 80015e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015e8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ea:	4b15      	ldr	r3, [pc, #84]	; (8001640 <HAL_SPI_MspInit+0x88>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015f2:	613b      	str	r3, [r7, #16]
 80015f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	4b11      	ldr	r3, [pc, #68]	; (8001640 <HAL_SPI_MspInit+0x88>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a10      	ldr	r2, [pc, #64]	; (8001640 <HAL_SPI_MspInit+0x88>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <HAL_SPI_MspInit+0x88>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001612:	23e0      	movs	r3, #224	; 0xe0
 8001614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001616:	2302      	movs	r3, #2
 8001618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161e:	2303      	movs	r3, #3
 8001620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001622:	2305      	movs	r3, #5
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	4619      	mov	r1, r3
 800162c:	4805      	ldr	r0, [pc, #20]	; (8001644 <HAL_SPI_MspInit+0x8c>)
 800162e:	f000 fcb1 	bl	8001f94 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001632:	bf00      	nop
 8001634:	3728      	adds	r7, #40	; 0x28
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40013000 	.word	0x40013000
 8001640:	40023800 	.word	0x40023800
 8001644:	40020000 	.word	0x40020000

08001648 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a0e      	ldr	r2, [pc, #56]	; (8001690 <HAL_TIM_Base_MspInit+0x48>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d115      	bne.n	8001686 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <HAL_TIM_Base_MspInit+0x4c>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	4a0c      	ldr	r2, [pc, #48]	; (8001694 <HAL_TIM_Base_MspInit+0x4c>)
 8001664:	f043 0310 	orr.w	r3, r3, #16
 8001668:	6413      	str	r3, [r2, #64]	; 0x40
 800166a:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <HAL_TIM_Base_MspInit+0x4c>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	f003 0310 	and.w	r3, r3, #16
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2100      	movs	r1, #0
 800167a:	2036      	movs	r0, #54	; 0x36
 800167c:	f000 fbc1 	bl	8001e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001680:	2036      	movs	r0, #54	; 0x36
 8001682:	f000 fbda 	bl	8001e3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001686:	bf00      	nop
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40001000 	.word	0x40001000
 8001694:	40023800 	.word	0x40023800

08001698 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a1d      	ldr	r2, [pc, #116]	; (800172c <HAL_UART_MspInit+0x94>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d133      	bne.n	8001722 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	613b      	str	r3, [r7, #16]
 80016be:	4b1c      	ldr	r3, [pc, #112]	; (8001730 <HAL_UART_MspInit+0x98>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	4a1b      	ldr	r2, [pc, #108]	; (8001730 <HAL_UART_MspInit+0x98>)
 80016c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ca:	4b19      	ldr	r3, [pc, #100]	; (8001730 <HAL_UART_MspInit+0x98>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <HAL_UART_MspInit+0x98>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a14      	ldr	r2, [pc, #80]	; (8001730 <HAL_UART_MspInit+0x98>)
 80016e0:	f043 0308 	orr.w	r3, r3, #8
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b12      	ldr	r3, [pc, #72]	; (8001730 <HAL_UART_MspInit+0x98>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0308 	and.w	r3, r3, #8
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80016f2:	2360      	movs	r3, #96	; 0x60
 80016f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f6:	2302      	movs	r3, #2
 80016f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fe:	2303      	movs	r3, #3
 8001700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001702:	2307      	movs	r3, #7
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	4619      	mov	r1, r3
 800170c:	4809      	ldr	r0, [pc, #36]	; (8001734 <HAL_UART_MspInit+0x9c>)
 800170e:	f000 fc41 	bl	8001f94 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001712:	2200      	movs	r2, #0
 8001714:	2100      	movs	r1, #0
 8001716:	2026      	movs	r0, #38	; 0x26
 8001718:	f000 fb73 	bl	8001e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800171c:	2026      	movs	r0, #38	; 0x26
 800171e:	f000 fb8c 	bl	8001e3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001722:	bf00      	nop
 8001724:	3728      	adds	r7, #40	; 0x28
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40004400 	.word	0x40004400
 8001730:	40023800 	.word	0x40023800
 8001734:	40020c00 	.word	0x40020c00

08001738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800173c:	e7fe      	b.n	800173c <NMI_Handler+0x4>

0800173e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001742:	e7fe      	b.n	8001742 <HardFault_Handler+0x4>

08001744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001748:	e7fe      	b.n	8001748 <MemManage_Handler+0x4>

0800174a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800174e:	e7fe      	b.n	800174e <BusFault_Handler+0x4>

08001750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001754:	e7fe      	b.n	8001754 <UsageFault_Handler+0x4>

08001756 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001784:	f000 fa42 	bl	8001c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}

0800178c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001790:	4802      	ldr	r0, [pc, #8]	; (800179c <USART2_IRQHandler+0x10>)
 8001792:	f004 fa67 	bl	8005c64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	200001a8 	.word	0x200001a8

080017a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017a6:	482b      	ldr	r0, [pc, #172]	; (8001854 <TIM6_DAC_IRQHandler+0xb4>)
 80017a8:	f003 fe4b 	bl	8005442 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80017ac:	2180      	movs	r1, #128	; 0x80
 80017ae:	482a      	ldr	r0, [pc, #168]	; (8001858 <TIM6_DAC_IRQHandler+0xb8>)
 80017b0:	f000 fdcd 	bl	800234e <HAL_GPIO_TogglePin>

  uint8_t accel_data[6];
  readAccelerometer(accel_data, &hi2c1);
 80017b4:	1d3b      	adds	r3, r7, #4
 80017b6:	4929      	ldr	r1, [pc, #164]	; (800185c <TIM6_DAC_IRQHandler+0xbc>)
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7fe febb 	bl	8000534 <readAccelerometer>

  uint32_t time = getTimestampMilliseconds(&hrtc);
 80017be:	4828      	ldr	r0, [pc, #160]	; (8001860 <TIM6_DAC_IRQHandler+0xc0>)
 80017c0:	f7ff fd60 	bl	8001284 <getTimestampMilliseconds>
 80017c4:	60f8      	str	r0, [r7, #12]

  // Store the time in the buffer
  if (byte_tracker < (PAGE_SIZE - READ_SIZE)) {
 80017c6:	4b27      	ldr	r3, [pc, #156]	; (8001864 <TIM6_DAC_IRQHandler+0xc4>)
 80017c8:	881b      	ldrh	r3, [r3, #0]
 80017ca:	2bf5      	cmp	r3, #245	; 0xf5
 80017cc:	d83d      	bhi.n	800184a <TIM6_DAC_IRQHandler+0xaa>
    data_buffer[byte_tracker + 0] = (uint8_t) ((time >> 24) & 0xFF); // Most significant byte (MSB)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	0e19      	lsrs	r1, r3, #24
 80017d2:	4b24      	ldr	r3, [pc, #144]	; (8001864 <TIM6_DAC_IRQHandler+0xc4>)
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	461a      	mov	r2, r3
 80017d8:	b2c9      	uxtb	r1, r1
 80017da:	4b23      	ldr	r3, [pc, #140]	; (8001868 <TIM6_DAC_IRQHandler+0xc8>)
 80017dc:	5499      	strb	r1, [r3, r2]
    data_buffer[byte_tracker + 1] = (uint8_t) ((time >> 16) & 0xFF);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	0c1a      	lsrs	r2, r3, #16
 80017e2:	4b20      	ldr	r3, [pc, #128]	; (8001864 <TIM6_DAC_IRQHandler+0xc4>)
 80017e4:	881b      	ldrh	r3, [r3, #0]
 80017e6:	3301      	adds	r3, #1
 80017e8:	b2d1      	uxtb	r1, r2
 80017ea:	4a1f      	ldr	r2, [pc, #124]	; (8001868 <TIM6_DAC_IRQHandler+0xc8>)
 80017ec:	54d1      	strb	r1, [r2, r3]
    data_buffer[byte_tracker + 2] = (uint8_t) ((time >> 8) & 0xFF);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	0a1a      	lsrs	r2, r3, #8
 80017f2:	4b1c      	ldr	r3, [pc, #112]	; (8001864 <TIM6_DAC_IRQHandler+0xc4>)
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	3302      	adds	r3, #2
 80017f8:	b2d1      	uxtb	r1, r2
 80017fa:	4a1b      	ldr	r2, [pc, #108]	; (8001868 <TIM6_DAC_IRQHandler+0xc8>)
 80017fc:	54d1      	strb	r1, [r2, r3]
    data_buffer[byte_tracker + 3] = (uint8_t) (time & 0xFF); // Least significant byte (LSB)
 80017fe:	4b19      	ldr	r3, [pc, #100]	; (8001864 <TIM6_DAC_IRQHandler+0xc4>)
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	3303      	adds	r3, #3
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	b2d1      	uxtb	r1, r2
 8001808:	4a17      	ldr	r2, [pc, #92]	; (8001868 <TIM6_DAC_IRQHandler+0xc8>)
 800180a:	54d1      	strb	r1, [r2, r3]

    uint8_t array_ptr = 4;
 800180c:	2304      	movs	r3, #4
 800180e:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < 6; i++) {
 8001810:	2300      	movs	r3, #0
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	e010      	b.n	8001838 <TIM6_DAC_IRQHandler+0x98>
      data_buffer[byte_tracker + array_ptr] = accel_data[i];
 8001816:	4b13      	ldr	r3, [pc, #76]	; (8001864 <TIM6_DAC_IRQHandler+0xc4>)
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	461a      	mov	r2, r3
 800181c:	7dfb      	ldrb	r3, [r7, #23]
 800181e:	4413      	add	r3, r2
 8001820:	1d39      	adds	r1, r7, #4
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	440a      	add	r2, r1
 8001826:	7811      	ldrb	r1, [r2, #0]
 8001828:	4a0f      	ldr	r2, [pc, #60]	; (8001868 <TIM6_DAC_IRQHandler+0xc8>)
 800182a:	54d1      	strb	r1, [r2, r3]
      array_ptr += 1;
 800182c:	7dfb      	ldrb	r3, [r7, #23]
 800182e:	3301      	adds	r3, #1
 8001830:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < 6; i++) {
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	3301      	adds	r3, #1
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	2b05      	cmp	r3, #5
 800183c:	ddeb      	ble.n	8001816 <TIM6_DAC_IRQHandler+0x76>
    }
    byte_tracker = byte_tracker + 10;
 800183e:	4b09      	ldr	r3, [pc, #36]	; (8001864 <TIM6_DAC_IRQHandler+0xc4>)
 8001840:	881b      	ldrh	r3, [r3, #0]
 8001842:	330a      	adds	r3, #10
 8001844:	b29a      	uxth	r2, r3
 8001846:	4b07      	ldr	r3, [pc, #28]	; (8001864 <TIM6_DAC_IRQHandler+0xc4>)
 8001848:	801a      	strh	r2, [r3, #0]
  }
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000160 	.word	0x20000160
 8001858:	40020400 	.word	0x40020400
 800185c:	20000040 	.word	0x20000040
 8001860:	200000e8 	.word	0x200000e8
 8001864:	200002f8 	.word	0x200002f8
 8001868:	200001f4 	.word	0x200001f4

0800186c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800186c:	b580      	push	{r7, lr}
 800186e:	b0ca      	sub	sp, #296	; 0x128
 8001870:	af00      	add	r7, sp, #0
 8001872:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001876:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800187a:	6018      	str	r0, [r3, #0]
	// Read the received data
	uint8_t received_data = huart2.Instance->DR;
 800187c:	4b74      	ldr	r3, [pc, #464]	; (8001a50 <HAL_UART_RxCpltCallback+0x1e4>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

	// Check if the received data matches the expected value (0x68 = 'h')
	if (received_data == 0x68) {
 8001886:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800188a:	2b68      	cmp	r3, #104	; 0x68
 800188c:	d112      	bne.n	80018b4 <HAL_UART_RxCpltCallback+0x48>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET);		// Activate the "write out" LED
 800188e:	2201      	movs	r2, #1
 8001890:	2180      	movs	r1, #128	; 0x80
 8001892:	4870      	ldr	r0, [pc, #448]	; (8001a54 <HAL_UART_RxCpltCallback+0x1e8>)
 8001894:	f000 fd42 	bl	800231c <HAL_GPIO_WritePin>
		send_uart_string(huart, "**Heartbeat**\r\n");			// Transmit the data
 8001898:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800189c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80018a0:	496d      	ldr	r1, [pc, #436]	; (8001a58 <HAL_UART_RxCpltCallback+0x1ec>)
 80018a2:	6818      	ldr	r0, [r3, #0]
 80018a4:	f000 f90d 	bl	8001ac2 <send_uart_string>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);	// Deactivate the "write out" LED
 80018a8:	2200      	movs	r2, #0
 80018aa:	2180      	movs	r1, #128	; 0x80
 80018ac:	4869      	ldr	r0, [pc, #420]	; (8001a54 <HAL_UART_RxCpltCallback+0x1e8>)
 80018ae:	f000 fd35 	bl	800231c <HAL_GPIO_WritePin>
 80018b2:	e0c2      	b.n	8001a3a <HAL_UART_RxCpltCallback+0x1ce>
	}

	// Check if the received data matches the expected value (0x65 = 'e')
	else if (received_data == 0x65) {
 80018b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80018b8:	2b65      	cmp	r3, #101	; 0x65
 80018ba:	d12e      	bne.n	800191a <HAL_UART_RxCpltCallback+0xae>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET);		// Activate the "write out" LED
 80018bc:	2201      	movs	r2, #1
 80018be:	2180      	movs	r1, #128	; 0x80
 80018c0:	4864      	ldr	r0, [pc, #400]	; (8001a54 <HAL_UART_RxCpltCallback+0x1e8>)
 80018c2:	f000 fd2b 	bl	800231c <HAL_GPIO_WritePin>
		if (erase_chip_spi(&hspi1) == HAL_OK) {
 80018c6:	4865      	ldr	r0, [pc, #404]	; (8001a5c <HAL_UART_RxCpltCallback+0x1f0>)
 80018c8:	f7fe ff4c 	bl	8000764 <erase_chip_spi>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d115      	bne.n	80018fe <HAL_UART_RxCpltCallback+0x92>
			send_uart_string(huart, "Successful Chip Erase\r\n");
 80018d2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80018d6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80018da:	4961      	ldr	r1, [pc, #388]	; (8001a60 <HAL_UART_RxCpltCallback+0x1f4>)
 80018dc:	6818      	ldr	r0, [r3, #0]
 80018de:	f000 f8f0 	bl	8001ac2 <send_uart_string>
			next_blank_page = find_next_blank_page(&hspi1, huart, &end_of_flash, 0);
 80018e2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80018e6:	f5a3 7192 	sub.w	r1, r3, #292	; 0x124
 80018ea:	2300      	movs	r3, #0
 80018ec:	4a5d      	ldr	r2, [pc, #372]	; (8001a64 <HAL_UART_RxCpltCallback+0x1f8>)
 80018ee:	6809      	ldr	r1, [r1, #0]
 80018f0:	485a      	ldr	r0, [pc, #360]	; (8001a5c <HAL_UART_RxCpltCallback+0x1f0>)
 80018f2:	f7ff f81f 	bl	8000934 <find_next_blank_page>
 80018f6:	4603      	mov	r3, r0
 80018f8:	4a5b      	ldr	r2, [pc, #364]	; (8001a68 <HAL_UART_RxCpltCallback+0x1fc>)
 80018fa:	6013      	str	r3, [r2, #0]
 80018fc:	e007      	b.n	800190e <HAL_UART_RxCpltCallback+0xa2>
		} else {
			send_uart_string(huart, "Error during chip erase. Please check the connection and try again.\r\n");
 80018fe:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001902:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001906:	4959      	ldr	r1, [pc, #356]	; (8001a6c <HAL_UART_RxCpltCallback+0x200>)
 8001908:	6818      	ldr	r0, [r3, #0]
 800190a:	f000 f8da 	bl	8001ac2 <send_uart_string>
		}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);	// Deactivate the "write out" LED
 800190e:	2200      	movs	r2, #0
 8001910:	2180      	movs	r1, #128	; 0x80
 8001912:	4850      	ldr	r0, [pc, #320]	; (8001a54 <HAL_UART_RxCpltCallback+0x1e8>)
 8001914:	f000 fd02 	bl	800231c <HAL_GPIO_WritePin>
 8001918:	e08f      	b.n	8001a3a <HAL_UART_RxCpltCallback+0x1ce>
	}

	// Check if the received data matches the expected value (0x72 = 'r')
	else if (received_data == 0x72) {
 800191a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800191e:	2b72      	cmp	r3, #114	; 0x72
 8001920:	d145      	bne.n	80019ae <HAL_UART_RxCpltCallback+0x142>
		uint32_t num_of_pages = next_blank_page;
 8001922:	4b51      	ldr	r3, [pc, #324]	; (8001a68 <HAL_UART_RxCpltCallback+0x1fc>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		if(num_of_pages == 0) {
 800192a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800192e:	2b00      	cmp	r3, #0
 8001930:	d103      	bne.n	800193a <HAL_UART_RxCpltCallback+0xce>
			num_of_pages = PAGE_SIZE;
 8001932:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001936:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		}
		num_of_pages = num_of_pages/PAGE_SIZE;
 800193a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800193e:	0a1b      	lsrs	r3, r3, #8
 8001940:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		uint32_t address = 0;
 8001944:	2300      	movs	r3, #0
 8001946:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET);		// Activate the "write out" LED
 800194a:	2201      	movs	r2, #1
 800194c:	2180      	movs	r1, #128	; 0x80
 800194e:	4841      	ldr	r0, [pc, #260]	; (8001a54 <HAL_UART_RxCpltCallback+0x1e8>)
 8001950:	f000 fce4 	bl	800231c <HAL_GPIO_WritePin>

		for (int i = 0; i < (num_of_pages); i++) {
 8001954:	2300      	movs	r3, #0
 8001956:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800195a:	e01c      	b.n	8001996 <HAL_UART_RxCpltCallback+0x12a>
			uint8_t page[PAGE_SIZE];
			read_page_spi(page, &hspi1, address, 0);//
 800195c:	f107 000c 	add.w	r0, r7, #12
 8001960:	2300      	movs	r3, #0
 8001962:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8001966:	493d      	ldr	r1, [pc, #244]	; (8001a5c <HAL_UART_RxCpltCallback+0x1f0>)
 8001968:	f7ff f892 	bl	8000a90 <read_page_spi>
			uart_transmit_page(huart, page);						// Transmit the data//
 800196c:	f107 020c 	add.w	r2, r7, #12
 8001970:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001974:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001978:	4611      	mov	r1, r2
 800197a:	6818      	ldr	r0, [r3, #0]
 800197c:	f000 f890 	bl	8001aa0 <uart_transmit_page>
			address += PAGE_SIZE;
 8001980:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001984:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001988:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
		for (int i = 0; i < (num_of_pages); i++) {
 800198c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001990:	3301      	adds	r3, #1
 8001992:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001996:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800199a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800199e:	429a      	cmp	r2, r3
 80019a0:	d8dc      	bhi.n	800195c <HAL_UART_RxCpltCallback+0xf0>
		}

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);	// Deactivate the "write out" LED
 80019a2:	2200      	movs	r2, #0
 80019a4:	2180      	movs	r1, #128	; 0x80
 80019a6:	482b      	ldr	r0, [pc, #172]	; (8001a54 <HAL_UART_RxCpltCallback+0x1e8>)
 80019a8:	f000 fcb8 	bl	800231c <HAL_GPIO_WritePin>
 80019ac:	e045      	b.n	8001a3a <HAL_UART_RxCpltCallback+0x1ce>

		next_blank_page += PAGE_SIZE;
	}
************************************************************************************/
	// Read Accelerometer CTRL1 (data_rx = "c")
	else if (received_data == 0x63) {
 80019ae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80019b2:	2b63      	cmp	r3, #99	; 0x63
 80019b4:	d10e      	bne.n	80019d4 <HAL_UART_RxCpltCallback+0x168>
		uint8_t ctrl = readAccel_whoami(&hi2c1);
 80019b6:	482e      	ldr	r0, [pc, #184]	; (8001a70 <HAL_UART_RxCpltCallback+0x204>)
 80019b8:	f7fe fe28 	bl	800060c <readAccel_whoami>
 80019bc:	4603      	mov	r3, r0
 80019be:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		HAL_UART_Transmit(&huart2, &ctrl, 1, HAL_MAX_DELAY);
 80019c2:	f207 1115 	addw	r1, r7, #277	; 0x115
 80019c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019ca:	2201      	movs	r2, #1
 80019cc:	4820      	ldr	r0, [pc, #128]	; (8001a50 <HAL_UART_RxCpltCallback+0x1e4>)
 80019ce:	f003 ffe7 	bl	80059a0 <HAL_UART_Transmit>
 80019d2:	e032      	b.n	8001a3a <HAL_UART_RxCpltCallback+0x1ce>
	}

	// Read the accelerometer and print to the UART (data_rx = "a")
	else if (received_data == 0x61) {
 80019d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80019d8:	2b61      	cmp	r3, #97	; 0x61
 80019da:	d11d      	bne.n	8001a18 <HAL_UART_RxCpltCallback+0x1ac>
		uint8_t readings[6];
		readAccelerometer(readings, &hi2c1);
 80019dc:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80019e0:	4923      	ldr	r1, [pc, #140]	; (8001a70 <HAL_UART_RxCpltCallback+0x204>)
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7fe fda6 	bl	8000534 <readAccelerometer>
		for (int i = 0; i < 6; i++) {
 80019e8:	2300      	movs	r3, #0
 80019ea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80019ee:	e00e      	b.n	8001a0e <HAL_UART_RxCpltCallback+0x1a2>
			send_uart_hex(&huart2, readings[i]);
 80019f0:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80019f4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80019f8:	4413      	add	r3, r2
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	4619      	mov	r1, r3
 80019fe:	4814      	ldr	r0, [pc, #80]	; (8001a50 <HAL_UART_RxCpltCallback+0x1e4>)
 8001a00:	f000 f873 	bl	8001aea <send_uart_hex>
		for (int i = 0; i < 6; i++) {
 8001a04:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001a08:	3301      	adds	r3, #1
 8001a0a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001a0e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001a12:	2b05      	cmp	r3, #5
 8001a14:	ddec      	ble.n	80019f0 <HAL_UART_RxCpltCallback+0x184>
 8001a16:	e010      	b.n	8001a3a <HAL_UART_RxCpltCallback+0x1ce>
		}
	}

	// Read the temp sensor and print to the UART (data_rx = "t")
	else if (received_data == 0x74) {
 8001a18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8001a1c:	2b74      	cmp	r3, #116	; 0x74
 8001a1e:	d10c      	bne.n	8001a3a <HAL_UART_RxCpltCallback+0x1ce>
		uint8_t reading = readBME280_id_reg(&hi2c2, 0);
 8001a20:	2100      	movs	r1, #0
 8001a22:	4814      	ldr	r0, [pc, #80]	; (8001a74 <HAL_UART_RxCpltCallback+0x208>)
 8001a24:	f7fe fe56 	bl	80006d4 <readBME280_id_reg>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
		send_uart_hex(&huart2, reading);
 8001a2e:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8001a32:	4619      	mov	r1, r3
 8001a34:	4806      	ldr	r0, [pc, #24]	; (8001a50 <HAL_UART_RxCpltCallback+0x1e4>)
 8001a36:	f000 f858 	bl	8001aea <send_uart_hex>
	}


	HAL_UART_Receive_IT(&huart2, UARTRxData, 1);
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	490e      	ldr	r1, [pc, #56]	; (8001a78 <HAL_UART_RxCpltCallback+0x20c>)
 8001a3e:	4804      	ldr	r0, [pc, #16]	; (8001a50 <HAL_UART_RxCpltCallback+0x1e4>)
 8001a40:	f004 f839 	bl	8005ab6 <HAL_UART_Receive_IT>
}
 8001a44:	bf00      	nop
 8001a46:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	200001a8 	.word	0x200001a8
 8001a54:	40020400 	.word	0x40020400
 8001a58:	08006bc4 	.word	0x08006bc4
 8001a5c:	20000108 	.word	0x20000108
 8001a60:	08006bd4 	.word	0x08006bd4
 8001a64:	200002fa 	.word	0x200002fa
 8001a68:	200002f4 	.word	0x200002f4
 8001a6c:	08006bec 	.word	0x08006bec
 8001a70:	20000040 	.word	0x20000040
 8001a74:	20000094 	.word	0x20000094
 8001a78:	200001f0 	.word	0x200001f0

08001a7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <SystemInit+0x20>)
 8001a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a86:	4a05      	ldr	r2, [pc, #20]	; (8001a9c <SystemInit+0x20>)
 8001a88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <uart_transmit_page>:

#include "uart_transmit.h"
/**
 * Transmit one single page over the UART interface
 */
void uart_transmit_page(UART_HandleTypeDef *huart, uint8_t page[PAGE_SIZE]) {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huart, page, PAGE_SIZE, HAL_MAX_DELAY);
 8001aaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001aae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ab2:	6839      	ldr	r1, [r7, #0]
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f003 ff73 	bl	80059a0 <HAL_UART_Transmit>
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <send_uart_string>:

void send_uart_string(UART_HandleTypeDef *huart, const char *str) {
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
 8001aca:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8001acc:	6838      	ldr	r0, [r7, #0]
 8001ace:	f7fe fb8d 	bl	80001ec <strlen>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ada:	6839      	ldr	r1, [r7, #0]
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f003 ff5f 	bl	80059a0 <HAL_UART_Transmit>
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <send_uart_hex>:
	// Call the send_uart_string function to send the value to UART
	send_uart_string(huart, value_str);
	send_uart_string(huart, "\r\n");
}

void send_uart_hex(UART_HandleTypeDef *huart, uint8_t value) {
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b084      	sub	sp, #16
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	460b      	mov	r3, r1
 8001af4:	70fb      	strb	r3, [r7, #3]
	uint8_t buffer[1];
	buffer[0] = value;
 8001af6:	78fb      	ldrb	r3, [r7, #3]
 8001af8:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(huart, buffer, 1, HAL_MAX_DELAY);
 8001afa:	f107 010c 	add.w	r1, r7, #12
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b02:	2201      	movs	r2, #1
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f003 ff4b 	bl	80059a0 <HAL_UART_Transmit>
}
 8001b0a:	bf00      	nop
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b4c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b18:	f7ff ffb0 	bl	8001a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b1c:	480c      	ldr	r0, [pc, #48]	; (8001b50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b1e:	490d      	ldr	r1, [pc, #52]	; (8001b54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b20:	4a0d      	ldr	r2, [pc, #52]	; (8001b58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b24:	e002      	b.n	8001b2c <LoopCopyDataInit>

08001b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b2a:	3304      	adds	r3, #4

08001b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b30:	d3f9      	bcc.n	8001b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b32:	4a0a      	ldr	r2, [pc, #40]	; (8001b5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b34:	4c0a      	ldr	r4, [pc, #40]	; (8001b60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b38:	e001      	b.n	8001b3e <LoopFillZerobss>

08001b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b3c:	3204      	adds	r2, #4

08001b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b40:	d3fb      	bcc.n	8001b3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b42:	f005 f80f 	bl	8006b64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b46:	f7ff f81d 	bl	8000b84 <main>
  bx  lr    
 8001b4a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b4c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b54:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001b58:	08006c5c 	.word	0x08006c5c
  ldr r2, =_sbss
 8001b5c:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001b60:	20000314 	.word	0x20000314

08001b64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b64:	e7fe      	b.n	8001b64 <ADC_IRQHandler>
	...

08001b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <HAL_Init+0x40>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a0d      	ldr	r2, [pc, #52]	; (8001ba8 <HAL_Init+0x40>)
 8001b72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b78:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <HAL_Init+0x40>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ba8 <HAL_Init+0x40>)
 8001b7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b84:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <HAL_Init+0x40>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a07      	ldr	r2, [pc, #28]	; (8001ba8 <HAL_Init+0x40>)
 8001b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b90:	2003      	movs	r0, #3
 8001b92:	f000 f92b 	bl	8001dec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b96:	200f      	movs	r0, #15
 8001b98:	f000 f808 	bl	8001bac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b9c:	f7ff fc3c 	bl	8001418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40023c00 	.word	0x40023c00

08001bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bb4:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <HAL_InitTick+0x54>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_InitTick+0x58>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 f943 	bl	8001e56 <HAL_SYSTICK_Config>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e00e      	b.n	8001bf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b0f      	cmp	r3, #15
 8001bde:	d80a      	bhi.n	8001bf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be0:	2200      	movs	r2, #0
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001be8:	f000 f90b 	bl	8001e02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bec:	4a06      	ldr	r2, [pc, #24]	; (8001c08 <HAL_InitTick+0x5c>)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	e000      	b.n	8001bf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20000018 	.word	0x20000018
 8001c04:	20000020 	.word	0x20000020
 8001c08:	2000001c 	.word	0x2000001c

08001c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <HAL_IncTick+0x20>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	461a      	mov	r2, r3
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_IncTick+0x24>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	4a04      	ldr	r2, [pc, #16]	; (8001c30 <HAL_IncTick+0x24>)
 8001c1e:	6013      	str	r3, [r2, #0]
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	20000020 	.word	0x20000020
 8001c30:	20000310 	.word	0x20000310

08001c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return uwTick;
 8001c38:	4b03      	ldr	r3, [pc, #12]	; (8001c48 <HAL_GetTick+0x14>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	20000310 	.word	0x20000310

08001c4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <__NVIC_SetPriorityGrouping+0x44>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c68:	4013      	ands	r3, r2
 8001c6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c7e:	4a04      	ldr	r2, [pc, #16]	; (8001c90 <__NVIC_SetPriorityGrouping+0x44>)
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	60d3      	str	r3, [r2, #12]
}
 8001c84:	bf00      	nop
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c98:	4b04      	ldr	r3, [pc, #16]	; (8001cac <__NVIC_GetPriorityGrouping+0x18>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	0a1b      	lsrs	r3, r3, #8
 8001c9e:	f003 0307 	and.w	r3, r3, #7
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	db0b      	blt.n	8001cda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	f003 021f 	and.w	r2, r3, #31
 8001cc8:	4907      	ldr	r1, [pc, #28]	; (8001ce8 <__NVIC_EnableIRQ+0x38>)
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	095b      	lsrs	r3, r3, #5
 8001cd0:	2001      	movs	r0, #1
 8001cd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	e000e100 	.word	0xe000e100

08001cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	6039      	str	r1, [r7, #0]
 8001cf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	db0a      	blt.n	8001d16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	490c      	ldr	r1, [pc, #48]	; (8001d38 <__NVIC_SetPriority+0x4c>)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	0112      	lsls	r2, r2, #4
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	440b      	add	r3, r1
 8001d10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d14:	e00a      	b.n	8001d2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	4908      	ldr	r1, [pc, #32]	; (8001d3c <__NVIC_SetPriority+0x50>)
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	3b04      	subs	r3, #4
 8001d24:	0112      	lsls	r2, r2, #4
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	440b      	add	r3, r1
 8001d2a:	761a      	strb	r2, [r3, #24]
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	e000e100 	.word	0xe000e100
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b089      	sub	sp, #36	; 0x24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	f1c3 0307 	rsb	r3, r3, #7
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	bf28      	it	cs
 8001d5e:	2304      	movcs	r3, #4
 8001d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	3304      	adds	r3, #4
 8001d66:	2b06      	cmp	r3, #6
 8001d68:	d902      	bls.n	8001d70 <NVIC_EncodePriority+0x30>
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	3b03      	subs	r3, #3
 8001d6e:	e000      	b.n	8001d72 <NVIC_EncodePriority+0x32>
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43da      	mvns	r2, r3
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	401a      	ands	r2, r3
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d92:	43d9      	mvns	r1, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d98:	4313      	orrs	r3, r2
         );
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3724      	adds	r7, #36	; 0x24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
	...

08001da8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001db8:	d301      	bcc.n	8001dbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e00f      	b.n	8001dde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dbe:	4a0a      	ldr	r2, [pc, #40]	; (8001de8 <SysTick_Config+0x40>)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dc6:	210f      	movs	r1, #15
 8001dc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dcc:	f7ff ff8e 	bl	8001cec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dd0:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <SysTick_Config+0x40>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dd6:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <SysTick_Config+0x40>)
 8001dd8:	2207      	movs	r2, #7
 8001dda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	e000e010 	.word	0xe000e010

08001dec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff ff29 	bl	8001c4c <__NVIC_SetPriorityGrouping>
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b086      	sub	sp, #24
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	4603      	mov	r3, r0
 8001e0a:	60b9      	str	r1, [r7, #8]
 8001e0c:	607a      	str	r2, [r7, #4]
 8001e0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e14:	f7ff ff3e 	bl	8001c94 <__NVIC_GetPriorityGrouping>
 8001e18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	68b9      	ldr	r1, [r7, #8]
 8001e1e:	6978      	ldr	r0, [r7, #20]
 8001e20:	f7ff ff8e 	bl	8001d40 <NVIC_EncodePriority>
 8001e24:	4602      	mov	r2, r0
 8001e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff ff5d 	bl	8001cec <__NVIC_SetPriority>
}
 8001e32:	bf00      	nop
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	4603      	mov	r3, r0
 8001e42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff ff31 	bl	8001cb0 <__NVIC_EnableIRQ>
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b082      	sub	sp, #8
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7ff ffa2 	bl	8001da8 <SysTick_Config>
 8001e64:	4603      	mov	r3, r0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b084      	sub	sp, #16
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e7c:	f7ff feda 	bl	8001c34 <HAL_GetTick>
 8001e80:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d008      	beq.n	8001ea0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2280      	movs	r2, #128	; 0x80
 8001e92:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e052      	b.n	8001f46 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f022 0216 	bic.w	r2, r2, #22
 8001eae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	695a      	ldr	r2, [r3, #20]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ebe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d103      	bne.n	8001ed0 <HAL_DMA_Abort+0x62>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d007      	beq.n	8001ee0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 0208 	bic.w	r2, r2, #8
 8001ede:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 0201 	bic.w	r2, r2, #1
 8001eee:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ef0:	e013      	b.n	8001f1a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ef2:	f7ff fe9f 	bl	8001c34 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b05      	cmp	r3, #5
 8001efe:	d90c      	bls.n	8001f1a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2220      	movs	r2, #32
 8001f04:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2203      	movs	r2, #3
 8001f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e015      	b.n	8001f46 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1e4      	bne.n	8001ef2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2c:	223f      	movs	r2, #63	; 0x3f
 8001f2e:	409a      	lsls	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d004      	beq.n	8001f6c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2280      	movs	r2, #128	; 0x80
 8001f66:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e00c      	b.n	8001f86 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2205      	movs	r2, #5
 8001f70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0201 	bic.w	r2, r2, #1
 8001f82:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
	...

08001f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b089      	sub	sp, #36	; 0x24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001faa:	2300      	movs	r3, #0
 8001fac:	61fb      	str	r3, [r7, #28]
 8001fae:	e177      	b.n	80022a0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	f040 8166 	bne.w	800229a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f003 0303 	and.w	r3, r3, #3
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d005      	beq.n	8001fe6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d130      	bne.n	8002048 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	2203      	movs	r2, #3
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	68da      	ldr	r2, [r3, #12]
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4313      	orrs	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800201c:	2201      	movs	r2, #1
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	43db      	mvns	r3, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4013      	ands	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	091b      	lsrs	r3, r3, #4
 8002032:	f003 0201 	and.w	r2, r3, #1
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4313      	orrs	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 0303 	and.w	r3, r3, #3
 8002050:	2b03      	cmp	r3, #3
 8002052:	d017      	beq.n	8002084 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	2203      	movs	r2, #3
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	43db      	mvns	r3, r3
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4013      	ands	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f003 0303 	and.w	r3, r3, #3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d123      	bne.n	80020d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	08da      	lsrs	r2, r3, #3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3208      	adds	r2, #8
 8002098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800209c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	220f      	movs	r2, #15
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	43db      	mvns	r3, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4013      	ands	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	691a      	ldr	r2, [r3, #16]
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	08da      	lsrs	r2, r3, #3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	3208      	adds	r2, #8
 80020d2:	69b9      	ldr	r1, [r7, #24]
 80020d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	2203      	movs	r2, #3
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	43db      	mvns	r3, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4013      	ands	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 0203 	and.w	r2, r3, #3
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4313      	orrs	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002114:	2b00      	cmp	r3, #0
 8002116:	f000 80c0 	beq.w	800229a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	4b66      	ldr	r3, [pc, #408]	; (80022b8 <HAL_GPIO_Init+0x324>)
 8002120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002122:	4a65      	ldr	r2, [pc, #404]	; (80022b8 <HAL_GPIO_Init+0x324>)
 8002124:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002128:	6453      	str	r3, [r2, #68]	; 0x44
 800212a:	4b63      	ldr	r3, [pc, #396]	; (80022b8 <HAL_GPIO_Init+0x324>)
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002136:	4a61      	ldr	r2, [pc, #388]	; (80022bc <HAL_GPIO_Init+0x328>)
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	089b      	lsrs	r3, r3, #2
 800213c:	3302      	adds	r3, #2
 800213e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002142:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	f003 0303 	and.w	r3, r3, #3
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	220f      	movs	r2, #15
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43db      	mvns	r3, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4013      	ands	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a58      	ldr	r2, [pc, #352]	; (80022c0 <HAL_GPIO_Init+0x32c>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d037      	beq.n	80021d2 <HAL_GPIO_Init+0x23e>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a57      	ldr	r2, [pc, #348]	; (80022c4 <HAL_GPIO_Init+0x330>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d031      	beq.n	80021ce <HAL_GPIO_Init+0x23a>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a56      	ldr	r2, [pc, #344]	; (80022c8 <HAL_GPIO_Init+0x334>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d02b      	beq.n	80021ca <HAL_GPIO_Init+0x236>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a55      	ldr	r2, [pc, #340]	; (80022cc <HAL_GPIO_Init+0x338>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d025      	beq.n	80021c6 <HAL_GPIO_Init+0x232>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a54      	ldr	r2, [pc, #336]	; (80022d0 <HAL_GPIO_Init+0x33c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d01f      	beq.n	80021c2 <HAL_GPIO_Init+0x22e>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a53      	ldr	r2, [pc, #332]	; (80022d4 <HAL_GPIO_Init+0x340>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d019      	beq.n	80021be <HAL_GPIO_Init+0x22a>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a52      	ldr	r2, [pc, #328]	; (80022d8 <HAL_GPIO_Init+0x344>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d013      	beq.n	80021ba <HAL_GPIO_Init+0x226>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a51      	ldr	r2, [pc, #324]	; (80022dc <HAL_GPIO_Init+0x348>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d00d      	beq.n	80021b6 <HAL_GPIO_Init+0x222>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a50      	ldr	r2, [pc, #320]	; (80022e0 <HAL_GPIO_Init+0x34c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d007      	beq.n	80021b2 <HAL_GPIO_Init+0x21e>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a4f      	ldr	r2, [pc, #316]	; (80022e4 <HAL_GPIO_Init+0x350>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d101      	bne.n	80021ae <HAL_GPIO_Init+0x21a>
 80021aa:	2309      	movs	r3, #9
 80021ac:	e012      	b.n	80021d4 <HAL_GPIO_Init+0x240>
 80021ae:	230a      	movs	r3, #10
 80021b0:	e010      	b.n	80021d4 <HAL_GPIO_Init+0x240>
 80021b2:	2308      	movs	r3, #8
 80021b4:	e00e      	b.n	80021d4 <HAL_GPIO_Init+0x240>
 80021b6:	2307      	movs	r3, #7
 80021b8:	e00c      	b.n	80021d4 <HAL_GPIO_Init+0x240>
 80021ba:	2306      	movs	r3, #6
 80021bc:	e00a      	b.n	80021d4 <HAL_GPIO_Init+0x240>
 80021be:	2305      	movs	r3, #5
 80021c0:	e008      	b.n	80021d4 <HAL_GPIO_Init+0x240>
 80021c2:	2304      	movs	r3, #4
 80021c4:	e006      	b.n	80021d4 <HAL_GPIO_Init+0x240>
 80021c6:	2303      	movs	r3, #3
 80021c8:	e004      	b.n	80021d4 <HAL_GPIO_Init+0x240>
 80021ca:	2302      	movs	r3, #2
 80021cc:	e002      	b.n	80021d4 <HAL_GPIO_Init+0x240>
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <HAL_GPIO_Init+0x240>
 80021d2:	2300      	movs	r3, #0
 80021d4:	69fa      	ldr	r2, [r7, #28]
 80021d6:	f002 0203 	and.w	r2, r2, #3
 80021da:	0092      	lsls	r2, r2, #2
 80021dc:	4093      	lsls	r3, r2
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021e4:	4935      	ldr	r1, [pc, #212]	; (80022bc <HAL_GPIO_Init+0x328>)
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	089b      	lsrs	r3, r3, #2
 80021ea:	3302      	adds	r3, #2
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021f2:	4b3d      	ldr	r3, [pc, #244]	; (80022e8 <HAL_GPIO_Init+0x354>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	43db      	mvns	r3, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4013      	ands	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	4313      	orrs	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002216:	4a34      	ldr	r2, [pc, #208]	; (80022e8 <HAL_GPIO_Init+0x354>)
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800221c:	4b32      	ldr	r3, [pc, #200]	; (80022e8 <HAL_GPIO_Init+0x354>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	43db      	mvns	r3, r3
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4013      	ands	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d003      	beq.n	8002240 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	4313      	orrs	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002240:	4a29      	ldr	r2, [pc, #164]	; (80022e8 <HAL_GPIO_Init+0x354>)
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002246:	4b28      	ldr	r3, [pc, #160]	; (80022e8 <HAL_GPIO_Init+0x354>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	43db      	mvns	r3, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4013      	ands	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	4313      	orrs	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800226a:	4a1f      	ldr	r2, [pc, #124]	; (80022e8 <HAL_GPIO_Init+0x354>)
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002270:	4b1d      	ldr	r3, [pc, #116]	; (80022e8 <HAL_GPIO_Init+0x354>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	43db      	mvns	r3, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4013      	ands	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	4313      	orrs	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002294:	4a14      	ldr	r2, [pc, #80]	; (80022e8 <HAL_GPIO_Init+0x354>)
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	3301      	adds	r3, #1
 800229e:	61fb      	str	r3, [r7, #28]
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	2b0f      	cmp	r3, #15
 80022a4:	f67f ae84 	bls.w	8001fb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022a8:	bf00      	nop
 80022aa:	bf00      	nop
 80022ac:	3724      	adds	r7, #36	; 0x24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	40023800 	.word	0x40023800
 80022bc:	40013800 	.word	0x40013800
 80022c0:	40020000 	.word	0x40020000
 80022c4:	40020400 	.word	0x40020400
 80022c8:	40020800 	.word	0x40020800
 80022cc:	40020c00 	.word	0x40020c00
 80022d0:	40021000 	.word	0x40021000
 80022d4:	40021400 	.word	0x40021400
 80022d8:	40021800 	.word	0x40021800
 80022dc:	40021c00 	.word	0x40021c00
 80022e0:	40022000 	.word	0x40022000
 80022e4:	40022400 	.word	0x40022400
 80022e8:	40013c00 	.word	0x40013c00

080022ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	691a      	ldr	r2, [r3, #16]
 80022fc:	887b      	ldrh	r3, [r7, #2]
 80022fe:	4013      	ands	r3, r2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d002      	beq.n	800230a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002304:	2301      	movs	r3, #1
 8002306:	73fb      	strb	r3, [r7, #15]
 8002308:	e001      	b.n	800230e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800230a:	2300      	movs	r3, #0
 800230c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800230e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002310:	4618      	mov	r0, r3
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	807b      	strh	r3, [r7, #2]
 8002328:	4613      	mov	r3, r2
 800232a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800232c:	787b      	ldrb	r3, [r7, #1]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002332:	887a      	ldrh	r2, [r7, #2]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002338:	e003      	b.n	8002342 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800233a:	887b      	ldrh	r3, [r7, #2]
 800233c:	041a      	lsls	r2, r3, #16
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	619a      	str	r2, [r3, #24]
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800234e:	b480      	push	{r7}
 8002350:	b085      	sub	sp, #20
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	460b      	mov	r3, r1
 8002358:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002360:	887a      	ldrh	r2, [r7, #2]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	4013      	ands	r3, r2
 8002366:	041a      	lsls	r2, r3, #16
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	43d9      	mvns	r1, r3
 800236c:	887b      	ldrh	r3, [r7, #2]
 800236e:	400b      	ands	r3, r1
 8002370:	431a      	orrs	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	619a      	str	r2, [r3, #24]
}
 8002376:	bf00      	nop
 8002378:	3714      	adds	r7, #20
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
	...

08002384 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e12b      	b.n	80025ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d106      	bne.n	80023b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7ff f85c 	bl	8001468 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2224      	movs	r2, #36	; 0x24
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0201 	bic.w	r2, r2, #1
 80023c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023e8:	f001 fc72 	bl	8003cd0 <HAL_RCC_GetPCLK1Freq>
 80023ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	4a81      	ldr	r2, [pc, #516]	; (80025f8 <HAL_I2C_Init+0x274>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d807      	bhi.n	8002408 <HAL_I2C_Init+0x84>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4a80      	ldr	r2, [pc, #512]	; (80025fc <HAL_I2C_Init+0x278>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	bf94      	ite	ls
 8002400:	2301      	movls	r3, #1
 8002402:	2300      	movhi	r3, #0
 8002404:	b2db      	uxtb	r3, r3
 8002406:	e006      	b.n	8002416 <HAL_I2C_Init+0x92>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4a7d      	ldr	r2, [pc, #500]	; (8002600 <HAL_I2C_Init+0x27c>)
 800240c:	4293      	cmp	r3, r2
 800240e:	bf94      	ite	ls
 8002410:	2301      	movls	r3, #1
 8002412:	2300      	movhi	r3, #0
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e0e7      	b.n	80025ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	4a78      	ldr	r2, [pc, #480]	; (8002604 <HAL_I2C_Init+0x280>)
 8002422:	fba2 2303 	umull	r2, r3, r2, r3
 8002426:	0c9b      	lsrs	r3, r3, #18
 8002428:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68ba      	ldr	r2, [r7, #8]
 800243a:	430a      	orrs	r2, r1
 800243c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	4a6a      	ldr	r2, [pc, #424]	; (80025f8 <HAL_I2C_Init+0x274>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d802      	bhi.n	8002458 <HAL_I2C_Init+0xd4>
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	3301      	adds	r3, #1
 8002456:	e009      	b.n	800246c <HAL_I2C_Init+0xe8>
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800245e:	fb02 f303 	mul.w	r3, r2, r3
 8002462:	4a69      	ldr	r2, [pc, #420]	; (8002608 <HAL_I2C_Init+0x284>)
 8002464:	fba2 2303 	umull	r2, r3, r2, r3
 8002468:	099b      	lsrs	r3, r3, #6
 800246a:	3301      	adds	r3, #1
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	6812      	ldr	r2, [r2, #0]
 8002470:	430b      	orrs	r3, r1
 8002472:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800247e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	495c      	ldr	r1, [pc, #368]	; (80025f8 <HAL_I2C_Init+0x274>)
 8002488:	428b      	cmp	r3, r1
 800248a:	d819      	bhi.n	80024c0 <HAL_I2C_Init+0x13c>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	1e59      	subs	r1, r3, #1
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	fbb1 f3f3 	udiv	r3, r1, r3
 800249a:	1c59      	adds	r1, r3, #1
 800249c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80024a0:	400b      	ands	r3, r1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00a      	beq.n	80024bc <HAL_I2C_Init+0x138>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	1e59      	subs	r1, r3, #1
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80024b4:	3301      	adds	r3, #1
 80024b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ba:	e051      	b.n	8002560 <HAL_I2C_Init+0x1dc>
 80024bc:	2304      	movs	r3, #4
 80024be:	e04f      	b.n	8002560 <HAL_I2C_Init+0x1dc>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d111      	bne.n	80024ec <HAL_I2C_Init+0x168>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	1e58      	subs	r0, r3, #1
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6859      	ldr	r1, [r3, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	440b      	add	r3, r1
 80024d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024da:	3301      	adds	r3, #1
 80024dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	bf0c      	ite	eq
 80024e4:	2301      	moveq	r3, #1
 80024e6:	2300      	movne	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	e012      	b.n	8002512 <HAL_I2C_Init+0x18e>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	1e58      	subs	r0, r3, #1
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6859      	ldr	r1, [r3, #4]
 80024f4:	460b      	mov	r3, r1
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	0099      	lsls	r1, r3, #2
 80024fc:	440b      	add	r3, r1
 80024fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002502:	3301      	adds	r3, #1
 8002504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002508:	2b00      	cmp	r3, #0
 800250a:	bf0c      	ite	eq
 800250c:	2301      	moveq	r3, #1
 800250e:	2300      	movne	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <HAL_I2C_Init+0x196>
 8002516:	2301      	movs	r3, #1
 8002518:	e022      	b.n	8002560 <HAL_I2C_Init+0x1dc>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10e      	bne.n	8002540 <HAL_I2C_Init+0x1bc>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	1e58      	subs	r0, r3, #1
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6859      	ldr	r1, [r3, #4]
 800252a:	460b      	mov	r3, r1
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	440b      	add	r3, r1
 8002530:	fbb0 f3f3 	udiv	r3, r0, r3
 8002534:	3301      	adds	r3, #1
 8002536:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800253a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800253e:	e00f      	b.n	8002560 <HAL_I2C_Init+0x1dc>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	1e58      	subs	r0, r3, #1
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6859      	ldr	r1, [r3, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	0099      	lsls	r1, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	fbb0 f3f3 	udiv	r3, r0, r3
 8002556:	3301      	adds	r3, #1
 8002558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800255c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	6809      	ldr	r1, [r1, #0]
 8002564:	4313      	orrs	r3, r2
 8002566:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69da      	ldr	r2, [r3, #28]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	430a      	orrs	r2, r1
 8002582:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800258e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6911      	ldr	r1, [r2, #16]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	68d2      	ldr	r2, [r2, #12]
 800259a:	4311      	orrs	r1, r2
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	430b      	orrs	r3, r1
 80025a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	695a      	ldr	r2, [r3, #20]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	430a      	orrs	r2, r1
 80025be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 0201 	orr.w	r2, r2, #1
 80025ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2220      	movs	r2, #32
 80025da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	000186a0 	.word	0x000186a0
 80025fc:	001e847f 	.word	0x001e847f
 8002600:	003d08ff 	.word	0x003d08ff
 8002604:	431bde83 	.word	0x431bde83
 8002608:	10624dd3 	.word	0x10624dd3

0800260c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b088      	sub	sp, #32
 8002610:	af02      	add	r7, sp, #8
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	607a      	str	r2, [r7, #4]
 8002616:	461a      	mov	r2, r3
 8002618:	460b      	mov	r3, r1
 800261a:	817b      	strh	r3, [r7, #10]
 800261c:	4613      	mov	r3, r2
 800261e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002620:	f7ff fb08 	bl	8001c34 <HAL_GetTick>
 8002624:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b20      	cmp	r3, #32
 8002630:	f040 80e0 	bne.w	80027f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	2319      	movs	r3, #25
 800263a:	2201      	movs	r2, #1
 800263c:	4970      	ldr	r1, [pc, #448]	; (8002800 <HAL_I2C_Master_Transmit+0x1f4>)
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f000 fc64 	bl	8002f0c <I2C_WaitOnFlagUntilTimeout>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800264a:	2302      	movs	r3, #2
 800264c:	e0d3      	b.n	80027f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002654:	2b01      	cmp	r3, #1
 8002656:	d101      	bne.n	800265c <HAL_I2C_Master_Transmit+0x50>
 8002658:	2302      	movs	r3, #2
 800265a:	e0cc      	b.n	80027f6 <HAL_I2C_Master_Transmit+0x1ea>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b01      	cmp	r3, #1
 8002670:	d007      	beq.n	8002682 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f042 0201 	orr.w	r2, r2, #1
 8002680:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002690:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2221      	movs	r2, #33	; 0x21
 8002696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2210      	movs	r2, #16
 800269e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	893a      	ldrh	r2, [r7, #8]
 80026b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	4a50      	ldr	r2, [pc, #320]	; (8002804 <HAL_I2C_Master_Transmit+0x1f8>)
 80026c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026c4:	8979      	ldrh	r1, [r7, #10]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	6a3a      	ldr	r2, [r7, #32]
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 face 	bl	8002c6c <I2C_MasterRequestWrite>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e08d      	b.n	80027f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026da:	2300      	movs	r3, #0
 80026dc:	613b      	str	r3, [r7, #16]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	613b      	str	r3, [r7, #16]
 80026ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80026f0:	e066      	b.n	80027c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	6a39      	ldr	r1, [r7, #32]
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 fd22 	bl	8003140 <I2C_WaitOnTXEFlagUntilTimeout>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00d      	beq.n	800271e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	2b04      	cmp	r3, #4
 8002708:	d107      	bne.n	800271a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002718:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e06b      	b.n	80027f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	781a      	ldrb	r2, [r3, #0]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	1c5a      	adds	r2, r3, #1
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002738:	b29b      	uxth	r3, r3
 800273a:	3b01      	subs	r3, #1
 800273c:	b29a      	uxth	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002746:	3b01      	subs	r3, #1
 8002748:	b29a      	uxth	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	f003 0304 	and.w	r3, r3, #4
 8002758:	2b04      	cmp	r3, #4
 800275a:	d11b      	bne.n	8002794 <HAL_I2C_Master_Transmit+0x188>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002760:	2b00      	cmp	r3, #0
 8002762:	d017      	beq.n	8002794 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	781a      	ldrb	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	1c5a      	adds	r2, r3, #1
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800277e:	b29b      	uxth	r3, r3
 8002780:	3b01      	subs	r3, #1
 8002782:	b29a      	uxth	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278c:	3b01      	subs	r3, #1
 800278e:	b29a      	uxth	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	6a39      	ldr	r1, [r7, #32]
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 fd19 	bl	80031d0 <I2C_WaitOnBTFFlagUntilTimeout>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00d      	beq.n	80027c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	2b04      	cmp	r3, #4
 80027aa:	d107      	bne.n	80027bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e01a      	b.n	80027f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d194      	bne.n	80026f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2220      	movs	r2, #32
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027f0:	2300      	movs	r3, #0
 80027f2:	e000      	b.n	80027f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80027f4:	2302      	movs	r3, #2
  }
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3718      	adds	r7, #24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	00100002 	.word	0x00100002
 8002804:	ffff0000 	.word	0xffff0000

08002808 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08c      	sub	sp, #48	; 0x30
 800280c:	af02      	add	r7, sp, #8
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	607a      	str	r2, [r7, #4]
 8002812:	461a      	mov	r2, r3
 8002814:	460b      	mov	r3, r1
 8002816:	817b      	strh	r3, [r7, #10]
 8002818:	4613      	mov	r3, r2
 800281a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800281c:	f7ff fa0a 	bl	8001c34 <HAL_GetTick>
 8002820:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b20      	cmp	r3, #32
 800282c:	f040 8217 	bne.w	8002c5e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	2319      	movs	r3, #25
 8002836:	2201      	movs	r2, #1
 8002838:	497c      	ldr	r1, [pc, #496]	; (8002a2c <HAL_I2C_Master_Receive+0x224>)
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f000 fb66 	bl	8002f0c <I2C_WaitOnFlagUntilTimeout>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002846:	2302      	movs	r3, #2
 8002848:	e20a      	b.n	8002c60 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002850:	2b01      	cmp	r3, #1
 8002852:	d101      	bne.n	8002858 <HAL_I2C_Master_Receive+0x50>
 8002854:	2302      	movs	r3, #2
 8002856:	e203      	b.n	8002c60 <HAL_I2C_Master_Receive+0x458>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b01      	cmp	r3, #1
 800286c:	d007      	beq.n	800287e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f042 0201 	orr.w	r2, r2, #1
 800287c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800288c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2222      	movs	r2, #34	; 0x22
 8002892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2210      	movs	r2, #16
 800289a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	893a      	ldrh	r2, [r7, #8]
 80028ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	4a5c      	ldr	r2, [pc, #368]	; (8002a30 <HAL_I2C_Master_Receive+0x228>)
 80028be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80028c0:	8979      	ldrh	r1, [r7, #10]
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f000 fa52 	bl	8002d70 <I2C_MasterRequestRead>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e1c4      	b.n	8002c60 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d113      	bne.n	8002906 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028de:	2300      	movs	r3, #0
 80028e0:	623b      	str	r3, [r7, #32]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	623b      	str	r3, [r7, #32]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	623b      	str	r3, [r7, #32]
 80028f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	e198      	b.n	8002c38 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290a:	2b01      	cmp	r3, #1
 800290c:	d11b      	bne.n	8002946 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800291c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800291e:	2300      	movs	r3, #0
 8002920:	61fb      	str	r3, [r7, #28]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	61fb      	str	r3, [r7, #28]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	61fb      	str	r3, [r7, #28]
 8002932:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	e178      	b.n	8002c38 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294a:	2b02      	cmp	r3, #2
 800294c:	d11b      	bne.n	8002986 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800295c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800296c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800296e:	2300      	movs	r3, #0
 8002970:	61bb      	str	r3, [r7, #24]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	61bb      	str	r3, [r7, #24]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	61bb      	str	r3, [r7, #24]
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	e158      	b.n	8002c38 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002994:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002996:	2300      	movs	r3, #0
 8002998:	617b      	str	r3, [r7, #20]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	617b      	str	r3, [r7, #20]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	617b      	str	r3, [r7, #20]
 80029aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80029ac:	e144      	b.n	8002c38 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b2:	2b03      	cmp	r3, #3
 80029b4:	f200 80f1 	bhi.w	8002b9a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d123      	bne.n	8002a08 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f000 fc4b 	bl	8003260 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e145      	b.n	8002c60 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	691a      	ldr	r2, [r3, #16]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e6:	1c5a      	adds	r2, r3, #1
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f0:	3b01      	subs	r3, #1
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	3b01      	subs	r3, #1
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a06:	e117      	b.n	8002c38 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d14e      	bne.n	8002aae <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a16:	2200      	movs	r2, #0
 8002a18:	4906      	ldr	r1, [pc, #24]	; (8002a34 <HAL_I2C_Master_Receive+0x22c>)
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f000 fa76 	bl	8002f0c <I2C_WaitOnFlagUntilTimeout>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d008      	beq.n	8002a38 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e11a      	b.n	8002c60 <HAL_I2C_Master_Receive+0x458>
 8002a2a:	bf00      	nop
 8002a2c:	00100002 	.word	0x00100002
 8002a30:	ffff0000 	.word	0xffff0000
 8002a34:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	691a      	ldr	r2, [r3, #16]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5a:	1c5a      	adds	r2, r3, #1
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a64:	3b01      	subs	r3, #1
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	3b01      	subs	r3, #1
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	691a      	ldr	r2, [r3, #16]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	1c5a      	adds	r2, r3, #1
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a96:	3b01      	subs	r3, #1
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002aac:	e0c4      	b.n	8002c38 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	496c      	ldr	r1, [pc, #432]	; (8002c68 <HAL_I2C_Master_Receive+0x460>)
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f000 fa27 	bl	8002f0c <I2C_WaitOnFlagUntilTimeout>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e0cb      	b.n	8002c60 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ad6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	691a      	ldr	r2, [r3, #16]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aea:	1c5a      	adds	r2, r3, #1
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	3b01      	subs	r3, #1
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b10:	2200      	movs	r2, #0
 8002b12:	4955      	ldr	r1, [pc, #340]	; (8002c68 <HAL_I2C_Master_Receive+0x460>)
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 f9f9 	bl	8002f0c <I2C_WaitOnFlagUntilTimeout>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e09d      	b.n	8002c60 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	691a      	ldr	r2, [r3, #16]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b46:	1c5a      	adds	r2, r3, #1
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b50:	3b01      	subs	r3, #1
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	691a      	ldr	r2, [r3, #16]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	b2d2      	uxtb	r2, r2
 8002b72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b78:	1c5a      	adds	r2, r3, #1
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b82:	3b01      	subs	r3, #1
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	3b01      	subs	r3, #1
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b98:	e04e      	b.n	8002c38 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f000 fb5e 	bl	8003260 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e058      	b.n	8002c60 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	691a      	ldr	r2, [r3, #16]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	1c5a      	adds	r2, r3, #1
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	f003 0304 	and.w	r3, r3, #4
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	d124      	bne.n	8002c38 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf2:	2b03      	cmp	r3, #3
 8002bf4:	d107      	bne.n	8002c06 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c04:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	691a      	ldr	r2, [r3, #16]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	b2d2      	uxtb	r2, r2
 8002c12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	1c5a      	adds	r2, r3, #1
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c22:	3b01      	subs	r3, #1
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	3b01      	subs	r3, #1
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f47f aeb6 	bne.w	80029ae <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2220      	movs	r2, #32
 8002c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	e000      	b.n	8002c60 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002c5e:	2302      	movs	r3, #2
  }
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3728      	adds	r7, #40	; 0x28
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	00010004 	.word	0x00010004

08002c6c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b088      	sub	sp, #32
 8002c70:	af02      	add	r7, sp, #8
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	607a      	str	r2, [r7, #4]
 8002c76:	603b      	str	r3, [r7, #0]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c80:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	d006      	beq.n	8002c96 <I2C_MasterRequestWrite+0x2a>
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d003      	beq.n	8002c96 <I2C_MasterRequestWrite+0x2a>
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c94:	d108      	bne.n	8002ca8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	e00b      	b.n	8002cc0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cac:	2b12      	cmp	r3, #18
 8002cae:	d107      	bne.n	8002cc0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cbe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 f91d 	bl	8002f0c <I2C_WaitOnFlagUntilTimeout>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00d      	beq.n	8002cf4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ce6:	d103      	bne.n	8002cf0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e035      	b.n	8002d60 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cfc:	d108      	bne.n	8002d10 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cfe:	897b      	ldrh	r3, [r7, #10]
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	461a      	mov	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d0c:	611a      	str	r2, [r3, #16]
 8002d0e:	e01b      	b.n	8002d48 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d10:	897b      	ldrh	r3, [r7, #10]
 8002d12:	11db      	asrs	r3, r3, #7
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	f003 0306 	and.w	r3, r3, #6
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	f063 030f 	orn	r3, r3, #15
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	490e      	ldr	r1, [pc, #56]	; (8002d68 <I2C_MasterRequestWrite+0xfc>)
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 f966 	bl	8003000 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e010      	b.n	8002d60 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d3e:	897b      	ldrh	r3, [r7, #10]
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	4907      	ldr	r1, [pc, #28]	; (8002d6c <I2C_MasterRequestWrite+0x100>)
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f000 f956 	bl	8003000 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e000      	b.n	8002d60 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	00010008 	.word	0x00010008
 8002d6c:	00010002 	.word	0x00010002

08002d70 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b088      	sub	sp, #32
 8002d74:	af02      	add	r7, sp, #8
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	607a      	str	r2, [r7, #4]
 8002d7a:	603b      	str	r3, [r7, #0]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d84:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d94:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	d006      	beq.n	8002daa <I2C_MasterRequestRead+0x3a>
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d003      	beq.n	8002daa <I2C_MasterRequestRead+0x3a>
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002da8:	d108      	bne.n	8002dbc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	e00b      	b.n	8002dd4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc0:	2b11      	cmp	r3, #17
 8002dc2:	d107      	bne.n	8002dd4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dd2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f000 f893 	bl	8002f0c <I2C_WaitOnFlagUntilTimeout>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00d      	beq.n	8002e08 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dfa:	d103      	bne.n	8002e04 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e02:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e079      	b.n	8002efc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e10:	d108      	bne.n	8002e24 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002e12:	897b      	ldrh	r3, [r7, #10]
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	f043 0301 	orr.w	r3, r3, #1
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	611a      	str	r2, [r3, #16]
 8002e22:	e05f      	b.n	8002ee4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e24:	897b      	ldrh	r3, [r7, #10]
 8002e26:	11db      	asrs	r3, r3, #7
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	f003 0306 	and.w	r3, r3, #6
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	f063 030f 	orn	r3, r3, #15
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	4930      	ldr	r1, [pc, #192]	; (8002f04 <I2C_MasterRequestRead+0x194>)
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 f8dc 	bl	8003000 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e054      	b.n	8002efc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e52:	897b      	ldrh	r3, [r7, #10]
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	4929      	ldr	r1, [pc, #164]	; (8002f08 <I2C_MasterRequestRead+0x198>)
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 f8cc 	bl	8003000 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e044      	b.n	8002efc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e72:	2300      	movs	r3, #0
 8002e74:	613b      	str	r3, [r7, #16]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	613b      	str	r3, [r7, #16]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	613b      	str	r3, [r7, #16]
 8002e86:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e96:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 f831 	bl	8002f0c <I2C_WaitOnFlagUntilTimeout>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00d      	beq.n	8002ecc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ebe:	d103      	bne.n	8002ec8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ec6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e017      	b.n	8002efc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002ecc:	897b      	ldrh	r3, [r7, #10]
 8002ece:	11db      	asrs	r3, r3, #7
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	f003 0306 	and.w	r3, r3, #6
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	f063 030e 	orn	r3, r3, #14
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	4907      	ldr	r1, [pc, #28]	; (8002f08 <I2C_MasterRequestRead+0x198>)
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 f888 	bl	8003000 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	00010008 	.word	0x00010008
 8002f08:	00010002 	.word	0x00010002

08002f0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	603b      	str	r3, [r7, #0]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f1c:	e048      	b.n	8002fb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f24:	d044      	beq.n	8002fb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f26:	f7fe fe85 	bl	8001c34 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d302      	bcc.n	8002f3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d139      	bne.n	8002fb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	0c1b      	lsrs	r3, r3, #16
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d10d      	bne.n	8002f62 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	43da      	mvns	r2, r3
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	4013      	ands	r3, r2
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	bf0c      	ite	eq
 8002f58:	2301      	moveq	r3, #1
 8002f5a:	2300      	movne	r3, #0
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	461a      	mov	r2, r3
 8002f60:	e00c      	b.n	8002f7c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	43da      	mvns	r2, r3
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	bf0c      	ite	eq
 8002f74:	2301      	moveq	r3, #1
 8002f76:	2300      	movne	r3, #0
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	79fb      	ldrb	r3, [r7, #7]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d116      	bne.n	8002fb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9c:	f043 0220 	orr.w	r2, r3, #32
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e023      	b.n	8002ff8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	0c1b      	lsrs	r3, r3, #16
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d10d      	bne.n	8002fd6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	43da      	mvns	r2, r3
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	bf0c      	ite	eq
 8002fcc:	2301      	moveq	r3, #1
 8002fce:	2300      	movne	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	e00c      	b.n	8002ff0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	43da      	mvns	r2, r3
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	bf0c      	ite	eq
 8002fe8:	2301      	moveq	r3, #1
 8002fea:	2300      	movne	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	461a      	mov	r2, r3
 8002ff0:	79fb      	ldrb	r3, [r7, #7]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d093      	beq.n	8002f1e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
 800300c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800300e:	e071      	b.n	80030f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800301a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800301e:	d123      	bne.n	8003068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800302e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003038:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2220      	movs	r2, #32
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	f043 0204 	orr.w	r2, r3, #4
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e067      	b.n	8003138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800306e:	d041      	beq.n	80030f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003070:	f7fe fde0 	bl	8001c34 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	429a      	cmp	r2, r3
 800307e:	d302      	bcc.n	8003086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d136      	bne.n	80030f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	0c1b      	lsrs	r3, r3, #16
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b01      	cmp	r3, #1
 800308e:	d10c      	bne.n	80030aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	43da      	mvns	r2, r3
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	4013      	ands	r3, r2
 800309c:	b29b      	uxth	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	bf14      	ite	ne
 80030a2:	2301      	movne	r3, #1
 80030a4:	2300      	moveq	r3, #0
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	e00b      	b.n	80030c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	43da      	mvns	r2, r3
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	4013      	ands	r3, r2
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	bf14      	ite	ne
 80030bc:	2301      	movne	r3, #1
 80030be:	2300      	moveq	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d016      	beq.n	80030f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2220      	movs	r2, #32
 80030d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e0:	f043 0220 	orr.w	r2, r3, #32
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e021      	b.n	8003138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	0c1b      	lsrs	r3, r3, #16
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d10c      	bne.n	8003118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	43da      	mvns	r2, r3
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	4013      	ands	r3, r2
 800310a:	b29b      	uxth	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	bf14      	ite	ne
 8003110:	2301      	movne	r3, #1
 8003112:	2300      	moveq	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	e00b      	b.n	8003130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	43da      	mvns	r2, r3
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	4013      	ands	r3, r2
 8003124:	b29b      	uxth	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	bf14      	ite	ne
 800312a:	2301      	movne	r3, #1
 800312c:	2300      	moveq	r3, #0
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b00      	cmp	r3, #0
 8003132:	f47f af6d 	bne.w	8003010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800314c:	e034      	b.n	80031b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 f8e3 	bl	800331a <I2C_IsAcknowledgeFailed>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e034      	b.n	80031c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003164:	d028      	beq.n	80031b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003166:	f7fe fd65 	bl	8001c34 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	429a      	cmp	r2, r3
 8003174:	d302      	bcc.n	800317c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d11d      	bne.n	80031b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003186:	2b80      	cmp	r3, #128	; 0x80
 8003188:	d016      	beq.n	80031b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2220      	movs	r2, #32
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	f043 0220 	orr.w	r2, r3, #32
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e007      	b.n	80031c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c2:	2b80      	cmp	r3, #128	; 0x80
 80031c4:	d1c3      	bne.n	800314e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031dc:	e034      	b.n	8003248 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f000 f89b 	bl	800331a <I2C_IsAcknowledgeFailed>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e034      	b.n	8003258 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031f4:	d028      	beq.n	8003248 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031f6:	f7fe fd1d 	bl	8001c34 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	429a      	cmp	r2, r3
 8003204:	d302      	bcc.n	800320c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d11d      	bne.n	8003248 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	f003 0304 	and.w	r3, r3, #4
 8003216:	2b04      	cmp	r3, #4
 8003218:	d016      	beq.n	8003248 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2220      	movs	r2, #32
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003234:	f043 0220 	orr.w	r2, r3, #32
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e007      	b.n	8003258 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	f003 0304 	and.w	r3, r3, #4
 8003252:	2b04      	cmp	r3, #4
 8003254:	d1c3      	bne.n	80031de <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800326c:	e049      	b.n	8003302 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	f003 0310 	and.w	r3, r3, #16
 8003278:	2b10      	cmp	r3, #16
 800327a:	d119      	bne.n	80032b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f06f 0210 	mvn.w	r2, #16
 8003284:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2220      	movs	r2, #32
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e030      	b.n	8003312 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032b0:	f7fe fcc0 	bl	8001c34 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d302      	bcc.n	80032c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d11d      	bne.n	8003302 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d0:	2b40      	cmp	r3, #64	; 0x40
 80032d2:	d016      	beq.n	8003302 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2220      	movs	r2, #32
 80032de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	f043 0220 	orr.w	r2, r3, #32
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e007      	b.n	8003312 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330c:	2b40      	cmp	r3, #64	; 0x40
 800330e:	d1ae      	bne.n	800326e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800331a:	b480      	push	{r7}
 800331c:	b083      	sub	sp, #12
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800332c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003330:	d11b      	bne.n	800336a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800333a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2220      	movs	r2, #32
 8003346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	f043 0204 	orr.w	r2, r3, #4
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e000      	b.n	800336c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b20      	cmp	r3, #32
 800338c:	d129      	bne.n	80033e2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2224      	movs	r2, #36	; 0x24
 8003392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 0201 	bic.w	r2, r2, #1
 80033a4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 0210 	bic.w	r2, r2, #16
 80033b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f042 0201 	orr.w	r2, r2, #1
 80033d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2220      	movs	r2, #32
 80033da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80033de:	2300      	movs	r3, #0
 80033e0:	e000      	b.n	80033e4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80033e2:	2302      	movs	r3, #2
  }
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80033fa:	2300      	movs	r3, #0
 80033fc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b20      	cmp	r3, #32
 8003408:	d12a      	bne.n	8003460 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2224      	movs	r2, #36	; 0x24
 800340e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 0201 	bic.w	r2, r2, #1
 8003420:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800342a:	89fb      	ldrh	r3, [r7, #14]
 800342c:	f023 030f 	bic.w	r3, r3, #15
 8003430:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	b29a      	uxth	r2, r3
 8003436:	89fb      	ldrh	r3, [r7, #14]
 8003438:	4313      	orrs	r3, r2
 800343a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	89fa      	ldrh	r2, [r7, #14]
 8003442:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 0201 	orr.w	r2, r2, #1
 8003452:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2220      	movs	r2, #32
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800345c:	2300      	movs	r3, #0
 800345e:	e000      	b.n	8003462 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003460:	2302      	movs	r3, #2
  }
}
 8003462:	4618      	mov	r0, r3
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
	...

08003470 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e267      	b.n	8003952 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d075      	beq.n	800357a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800348e:	4b88      	ldr	r3, [pc, #544]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 030c 	and.w	r3, r3, #12
 8003496:	2b04      	cmp	r3, #4
 8003498:	d00c      	beq.n	80034b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800349a:	4b85      	ldr	r3, [pc, #532]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034a2:	2b08      	cmp	r3, #8
 80034a4:	d112      	bne.n	80034cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034a6:	4b82      	ldr	r3, [pc, #520]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034b2:	d10b      	bne.n	80034cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b4:	4b7e      	ldr	r3, [pc, #504]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d05b      	beq.n	8003578 <HAL_RCC_OscConfig+0x108>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d157      	bne.n	8003578 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e242      	b.n	8003952 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034d4:	d106      	bne.n	80034e4 <HAL_RCC_OscConfig+0x74>
 80034d6:	4b76      	ldr	r3, [pc, #472]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a75      	ldr	r2, [pc, #468]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 80034dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034e0:	6013      	str	r3, [r2, #0]
 80034e2:	e01d      	b.n	8003520 <HAL_RCC_OscConfig+0xb0>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034ec:	d10c      	bne.n	8003508 <HAL_RCC_OscConfig+0x98>
 80034ee:	4b70      	ldr	r3, [pc, #448]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a6f      	ldr	r2, [pc, #444]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 80034f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034f8:	6013      	str	r3, [r2, #0]
 80034fa:	4b6d      	ldr	r3, [pc, #436]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a6c      	ldr	r2, [pc, #432]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 8003500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003504:	6013      	str	r3, [r2, #0]
 8003506:	e00b      	b.n	8003520 <HAL_RCC_OscConfig+0xb0>
 8003508:	4b69      	ldr	r3, [pc, #420]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a68      	ldr	r2, [pc, #416]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 800350e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003512:	6013      	str	r3, [r2, #0]
 8003514:	4b66      	ldr	r3, [pc, #408]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a65      	ldr	r2, [pc, #404]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 800351a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800351e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d013      	beq.n	8003550 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003528:	f7fe fb84 	bl	8001c34 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003530:	f7fe fb80 	bl	8001c34 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b64      	cmp	r3, #100	; 0x64
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e207      	b.n	8003952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003542:	4b5b      	ldr	r3, [pc, #364]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d0f0      	beq.n	8003530 <HAL_RCC_OscConfig+0xc0>
 800354e:	e014      	b.n	800357a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003550:	f7fe fb70 	bl	8001c34 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003558:	f7fe fb6c 	bl	8001c34 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b64      	cmp	r3, #100	; 0x64
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e1f3      	b.n	8003952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800356a:	4b51      	ldr	r3, [pc, #324]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1f0      	bne.n	8003558 <HAL_RCC_OscConfig+0xe8>
 8003576:	e000      	b.n	800357a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003578:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d063      	beq.n	800364e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003586:	4b4a      	ldr	r3, [pc, #296]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 030c 	and.w	r3, r3, #12
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00b      	beq.n	80035aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003592:	4b47      	ldr	r3, [pc, #284]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800359a:	2b08      	cmp	r3, #8
 800359c:	d11c      	bne.n	80035d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800359e:	4b44      	ldr	r3, [pc, #272]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d116      	bne.n	80035d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035aa:	4b41      	ldr	r3, [pc, #260]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d005      	beq.n	80035c2 <HAL_RCC_OscConfig+0x152>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d001      	beq.n	80035c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e1c7      	b.n	8003952 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c2:	4b3b      	ldr	r3, [pc, #236]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	4937      	ldr	r1, [pc, #220]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035d6:	e03a      	b.n	800364e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d020      	beq.n	8003622 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035e0:	4b34      	ldr	r3, [pc, #208]	; (80036b4 <HAL_RCC_OscConfig+0x244>)
 80035e2:	2201      	movs	r2, #1
 80035e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e6:	f7fe fb25 	bl	8001c34 <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ec:	e008      	b.n	8003600 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035ee:	f7fe fb21 	bl	8001c34 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d901      	bls.n	8003600 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e1a8      	b.n	8003952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003600:	4b2b      	ldr	r3, [pc, #172]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0f0      	beq.n	80035ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800360c:	4b28      	ldr	r3, [pc, #160]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	4925      	ldr	r1, [pc, #148]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 800361c:	4313      	orrs	r3, r2
 800361e:	600b      	str	r3, [r1, #0]
 8003620:	e015      	b.n	800364e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003622:	4b24      	ldr	r3, [pc, #144]	; (80036b4 <HAL_RCC_OscConfig+0x244>)
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003628:	f7fe fb04 	bl	8001c34 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003630:	f7fe fb00 	bl	8001c34 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e187      	b.n	8003952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003642:	4b1b      	ldr	r3, [pc, #108]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1f0      	bne.n	8003630 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0308 	and.w	r3, r3, #8
 8003656:	2b00      	cmp	r3, #0
 8003658:	d036      	beq.n	80036c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d016      	beq.n	8003690 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003662:	4b15      	ldr	r3, [pc, #84]	; (80036b8 <HAL_RCC_OscConfig+0x248>)
 8003664:	2201      	movs	r2, #1
 8003666:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003668:	f7fe fae4 	bl	8001c34 <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003670:	f7fe fae0 	bl	8001c34 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e167      	b.n	8003952 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003682:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 8003684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0f0      	beq.n	8003670 <HAL_RCC_OscConfig+0x200>
 800368e:	e01b      	b.n	80036c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003690:	4b09      	ldr	r3, [pc, #36]	; (80036b8 <HAL_RCC_OscConfig+0x248>)
 8003692:	2200      	movs	r2, #0
 8003694:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003696:	f7fe facd 	bl	8001c34 <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800369c:	e00e      	b.n	80036bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800369e:	f7fe fac9 	bl	8001c34 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d907      	bls.n	80036bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e150      	b.n	8003952 <HAL_RCC_OscConfig+0x4e2>
 80036b0:	40023800 	.word	0x40023800
 80036b4:	42470000 	.word	0x42470000
 80036b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036bc:	4b88      	ldr	r3, [pc, #544]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 80036be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1ea      	bne.n	800369e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 8097 	beq.w	8003804 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036d6:	2300      	movs	r3, #0
 80036d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036da:	4b81      	ldr	r3, [pc, #516]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10f      	bne.n	8003706 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036e6:	2300      	movs	r3, #0
 80036e8:	60bb      	str	r3, [r7, #8]
 80036ea:	4b7d      	ldr	r3, [pc, #500]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	4a7c      	ldr	r2, [pc, #496]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 80036f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f4:	6413      	str	r3, [r2, #64]	; 0x40
 80036f6:	4b7a      	ldr	r3, [pc, #488]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036fe:	60bb      	str	r3, [r7, #8]
 8003700:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003702:	2301      	movs	r3, #1
 8003704:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003706:	4b77      	ldr	r3, [pc, #476]	; (80038e4 <HAL_RCC_OscConfig+0x474>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370e:	2b00      	cmp	r3, #0
 8003710:	d118      	bne.n	8003744 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003712:	4b74      	ldr	r3, [pc, #464]	; (80038e4 <HAL_RCC_OscConfig+0x474>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a73      	ldr	r2, [pc, #460]	; (80038e4 <HAL_RCC_OscConfig+0x474>)
 8003718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800371c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800371e:	f7fe fa89 	bl	8001c34 <HAL_GetTick>
 8003722:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003724:	e008      	b.n	8003738 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003726:	f7fe fa85 	bl	8001c34 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e10c      	b.n	8003952 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003738:	4b6a      	ldr	r3, [pc, #424]	; (80038e4 <HAL_RCC_OscConfig+0x474>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003740:	2b00      	cmp	r3, #0
 8003742:	d0f0      	beq.n	8003726 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d106      	bne.n	800375a <HAL_RCC_OscConfig+0x2ea>
 800374c:	4b64      	ldr	r3, [pc, #400]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 800374e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003750:	4a63      	ldr	r2, [pc, #396]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 8003752:	f043 0301 	orr.w	r3, r3, #1
 8003756:	6713      	str	r3, [r2, #112]	; 0x70
 8003758:	e01c      	b.n	8003794 <HAL_RCC_OscConfig+0x324>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	2b05      	cmp	r3, #5
 8003760:	d10c      	bne.n	800377c <HAL_RCC_OscConfig+0x30c>
 8003762:	4b5f      	ldr	r3, [pc, #380]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 8003764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003766:	4a5e      	ldr	r2, [pc, #376]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 8003768:	f043 0304 	orr.w	r3, r3, #4
 800376c:	6713      	str	r3, [r2, #112]	; 0x70
 800376e:	4b5c      	ldr	r3, [pc, #368]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 8003770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003772:	4a5b      	ldr	r2, [pc, #364]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 8003774:	f043 0301 	orr.w	r3, r3, #1
 8003778:	6713      	str	r3, [r2, #112]	; 0x70
 800377a:	e00b      	b.n	8003794 <HAL_RCC_OscConfig+0x324>
 800377c:	4b58      	ldr	r3, [pc, #352]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 800377e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003780:	4a57      	ldr	r2, [pc, #348]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 8003782:	f023 0301 	bic.w	r3, r3, #1
 8003786:	6713      	str	r3, [r2, #112]	; 0x70
 8003788:	4b55      	ldr	r3, [pc, #340]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 800378a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378c:	4a54      	ldr	r2, [pc, #336]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 800378e:	f023 0304 	bic.w	r3, r3, #4
 8003792:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d015      	beq.n	80037c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800379c:	f7fe fa4a 	bl	8001c34 <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a2:	e00a      	b.n	80037ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037a4:	f7fe fa46 	bl	8001c34 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e0cb      	b.n	8003952 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ba:	4b49      	ldr	r3, [pc, #292]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 80037bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d0ee      	beq.n	80037a4 <HAL_RCC_OscConfig+0x334>
 80037c6:	e014      	b.n	80037f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037c8:	f7fe fa34 	bl	8001c34 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ce:	e00a      	b.n	80037e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037d0:	f7fe fa30 	bl	8001c34 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	f241 3288 	movw	r2, #5000	; 0x1388
 80037de:	4293      	cmp	r3, r2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e0b5      	b.n	8003952 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037e6:	4b3e      	ldr	r3, [pc, #248]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 80037e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1ee      	bne.n	80037d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037f2:	7dfb      	ldrb	r3, [r7, #23]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d105      	bne.n	8003804 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037f8:	4b39      	ldr	r3, [pc, #228]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	4a38      	ldr	r2, [pc, #224]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 80037fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003802:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 80a1 	beq.w	8003950 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800380e:	4b34      	ldr	r3, [pc, #208]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 030c 	and.w	r3, r3, #12
 8003816:	2b08      	cmp	r3, #8
 8003818:	d05c      	beq.n	80038d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	2b02      	cmp	r3, #2
 8003820:	d141      	bne.n	80038a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003822:	4b31      	ldr	r3, [pc, #196]	; (80038e8 <HAL_RCC_OscConfig+0x478>)
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003828:	f7fe fa04 	bl	8001c34 <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003830:	f7fe fa00 	bl	8001c34 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e087      	b.n	8003952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003842:	4b27      	ldr	r3, [pc, #156]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1f0      	bne.n	8003830 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69da      	ldr	r2, [r3, #28]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385c:	019b      	lsls	r3, r3, #6
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003864:	085b      	lsrs	r3, r3, #1
 8003866:	3b01      	subs	r3, #1
 8003868:	041b      	lsls	r3, r3, #16
 800386a:	431a      	orrs	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003870:	061b      	lsls	r3, r3, #24
 8003872:	491b      	ldr	r1, [pc, #108]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 8003874:	4313      	orrs	r3, r2
 8003876:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003878:	4b1b      	ldr	r3, [pc, #108]	; (80038e8 <HAL_RCC_OscConfig+0x478>)
 800387a:	2201      	movs	r2, #1
 800387c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800387e:	f7fe f9d9 	bl	8001c34 <HAL_GetTick>
 8003882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003884:	e008      	b.n	8003898 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003886:	f7fe f9d5 	bl	8001c34 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d901      	bls.n	8003898 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e05c      	b.n	8003952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003898:	4b11      	ldr	r3, [pc, #68]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d0f0      	beq.n	8003886 <HAL_RCC_OscConfig+0x416>
 80038a4:	e054      	b.n	8003950 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a6:	4b10      	ldr	r3, [pc, #64]	; (80038e8 <HAL_RCC_OscConfig+0x478>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ac:	f7fe f9c2 	bl	8001c34 <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038b2:	e008      	b.n	80038c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038b4:	f7fe f9be 	bl	8001c34 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e045      	b.n	8003952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038c6:	4b06      	ldr	r3, [pc, #24]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1f0      	bne.n	80038b4 <HAL_RCC_OscConfig+0x444>
 80038d2:	e03d      	b.n	8003950 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d107      	bne.n	80038ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e038      	b.n	8003952 <HAL_RCC_OscConfig+0x4e2>
 80038e0:	40023800 	.word	0x40023800
 80038e4:	40007000 	.word	0x40007000
 80038e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038ec:	4b1b      	ldr	r3, [pc, #108]	; (800395c <HAL_RCC_OscConfig+0x4ec>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d028      	beq.n	800394c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003904:	429a      	cmp	r2, r3
 8003906:	d121      	bne.n	800394c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003912:	429a      	cmp	r2, r3
 8003914:	d11a      	bne.n	800394c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800391c:	4013      	ands	r3, r2
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003922:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003924:	4293      	cmp	r3, r2
 8003926:	d111      	bne.n	800394c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003932:	085b      	lsrs	r3, r3, #1
 8003934:	3b01      	subs	r3, #1
 8003936:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003938:	429a      	cmp	r2, r3
 800393a:	d107      	bne.n	800394c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003946:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003948:	429a      	cmp	r2, r3
 800394a:	d001      	beq.n	8003950 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e000      	b.n	8003952 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3718      	adds	r7, #24
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	40023800 	.word	0x40023800

08003960 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e0cc      	b.n	8003b0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003974:	4b68      	ldr	r3, [pc, #416]	; (8003b18 <HAL_RCC_ClockConfig+0x1b8>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 030f 	and.w	r3, r3, #15
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	429a      	cmp	r2, r3
 8003980:	d90c      	bls.n	800399c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003982:	4b65      	ldr	r3, [pc, #404]	; (8003b18 <HAL_RCC_ClockConfig+0x1b8>)
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	b2d2      	uxtb	r2, r2
 8003988:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800398a:	4b63      	ldr	r3, [pc, #396]	; (8003b18 <HAL_RCC_ClockConfig+0x1b8>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	429a      	cmp	r2, r3
 8003996:	d001      	beq.n	800399c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e0b8      	b.n	8003b0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d020      	beq.n	80039ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d005      	beq.n	80039c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039b4:	4b59      	ldr	r3, [pc, #356]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	4a58      	ldr	r2, [pc, #352]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 80039ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0308 	and.w	r3, r3, #8
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d005      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039cc:	4b53      	ldr	r3, [pc, #332]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	4a52      	ldr	r2, [pc, #328]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 80039d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039d8:	4b50      	ldr	r3, [pc, #320]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	494d      	ldr	r1, [pc, #308]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d044      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d107      	bne.n	8003a0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039fe:	4b47      	ldr	r3, [pc, #284]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d119      	bne.n	8003a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e07f      	b.n	8003b0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d003      	beq.n	8003a1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a1a:	2b03      	cmp	r3, #3
 8003a1c:	d107      	bne.n	8003a2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a1e:	4b3f      	ldr	r3, [pc, #252]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d109      	bne.n	8003a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e06f      	b.n	8003b0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a2e:	4b3b      	ldr	r3, [pc, #236]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e067      	b.n	8003b0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a3e:	4b37      	ldr	r3, [pc, #220]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f023 0203 	bic.w	r2, r3, #3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	4934      	ldr	r1, [pc, #208]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a50:	f7fe f8f0 	bl	8001c34 <HAL_GetTick>
 8003a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a56:	e00a      	b.n	8003a6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a58:	f7fe f8ec 	bl	8001c34 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e04f      	b.n	8003b0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a6e:	4b2b      	ldr	r3, [pc, #172]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 020c 	and.w	r2, r3, #12
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d1eb      	bne.n	8003a58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a80:	4b25      	ldr	r3, [pc, #148]	; (8003b18 <HAL_RCC_ClockConfig+0x1b8>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 030f 	and.w	r3, r3, #15
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d20c      	bcs.n	8003aa8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a8e:	4b22      	ldr	r3, [pc, #136]	; (8003b18 <HAL_RCC_ClockConfig+0x1b8>)
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	b2d2      	uxtb	r2, r2
 8003a94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a96:	4b20      	ldr	r3, [pc, #128]	; (8003b18 <HAL_RCC_ClockConfig+0x1b8>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 030f 	and.w	r3, r3, #15
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d001      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e032      	b.n	8003b0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0304 	and.w	r3, r3, #4
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d008      	beq.n	8003ac6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ab4:	4b19      	ldr	r3, [pc, #100]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	4916      	ldr	r1, [pc, #88]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0308 	and.w	r3, r3, #8
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d009      	beq.n	8003ae6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ad2:	4b12      	ldr	r3, [pc, #72]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	490e      	ldr	r1, [pc, #56]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ae6:	f000 f821 	bl	8003b2c <HAL_RCC_GetSysClockFreq>
 8003aea:	4602      	mov	r2, r0
 8003aec:	4b0b      	ldr	r3, [pc, #44]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	091b      	lsrs	r3, r3, #4
 8003af2:	f003 030f 	and.w	r3, r3, #15
 8003af6:	490a      	ldr	r1, [pc, #40]	; (8003b20 <HAL_RCC_ClockConfig+0x1c0>)
 8003af8:	5ccb      	ldrb	r3, [r1, r3]
 8003afa:	fa22 f303 	lsr.w	r3, r2, r3
 8003afe:	4a09      	ldr	r2, [pc, #36]	; (8003b24 <HAL_RCC_ClockConfig+0x1c4>)
 8003b00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b02:	4b09      	ldr	r3, [pc, #36]	; (8003b28 <HAL_RCC_ClockConfig+0x1c8>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7fe f850 	bl	8001bac <HAL_InitTick>

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	40023c00 	.word	0x40023c00
 8003b1c:	40023800 	.word	0x40023800
 8003b20:	08006c34 	.word	0x08006c34
 8003b24:	20000018 	.word	0x20000018
 8003b28:	2000001c 	.word	0x2000001c

08003b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b30:	b090      	sub	sp, #64	; 0x40
 8003b32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	637b      	str	r3, [r7, #52]	; 0x34
 8003b38:	2300      	movs	r3, #0
 8003b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003b40:	2300      	movs	r3, #0
 8003b42:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b44:	4b59      	ldr	r3, [pc, #356]	; (8003cac <HAL_RCC_GetSysClockFreq+0x180>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f003 030c 	and.w	r3, r3, #12
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	d00d      	beq.n	8003b6c <HAL_RCC_GetSysClockFreq+0x40>
 8003b50:	2b08      	cmp	r3, #8
 8003b52:	f200 80a1 	bhi.w	8003c98 <HAL_RCC_GetSysClockFreq+0x16c>
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d002      	beq.n	8003b60 <HAL_RCC_GetSysClockFreq+0x34>
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	d003      	beq.n	8003b66 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b5e:	e09b      	b.n	8003c98 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b60:	4b53      	ldr	r3, [pc, #332]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b62:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003b64:	e09b      	b.n	8003c9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b66:	4b53      	ldr	r3, [pc, #332]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b68:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b6a:	e098      	b.n	8003c9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b6c:	4b4f      	ldr	r3, [pc, #316]	; (8003cac <HAL_RCC_GetSysClockFreq+0x180>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b74:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b76:	4b4d      	ldr	r3, [pc, #308]	; (8003cac <HAL_RCC_GetSysClockFreq+0x180>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d028      	beq.n	8003bd4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b82:	4b4a      	ldr	r3, [pc, #296]	; (8003cac <HAL_RCC_GetSysClockFreq+0x180>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	099b      	lsrs	r3, r3, #6
 8003b88:	2200      	movs	r2, #0
 8003b8a:	623b      	str	r3, [r7, #32]
 8003b8c:	627a      	str	r2, [r7, #36]	; 0x24
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b94:	2100      	movs	r1, #0
 8003b96:	4b47      	ldr	r3, [pc, #284]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b98:	fb03 f201 	mul.w	r2, r3, r1
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	fb00 f303 	mul.w	r3, r0, r3
 8003ba2:	4413      	add	r3, r2
 8003ba4:	4a43      	ldr	r2, [pc, #268]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ba6:	fba0 1202 	umull	r1, r2, r0, r2
 8003baa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bac:	460a      	mov	r2, r1
 8003bae:	62ba      	str	r2, [r7, #40]	; 0x28
 8003bb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bb2:	4413      	add	r3, r2
 8003bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb8:	2200      	movs	r2, #0
 8003bba:	61bb      	str	r3, [r7, #24]
 8003bbc:	61fa      	str	r2, [r7, #28]
 8003bbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bc2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003bc6:	f7fc fb19 	bl	80001fc <__aeabi_uldivmod>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	460b      	mov	r3, r1
 8003bce:	4613      	mov	r3, r2
 8003bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bd2:	e053      	b.n	8003c7c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bd4:	4b35      	ldr	r3, [pc, #212]	; (8003cac <HAL_RCC_GetSysClockFreq+0x180>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	099b      	lsrs	r3, r3, #6
 8003bda:	2200      	movs	r2, #0
 8003bdc:	613b      	str	r3, [r7, #16]
 8003bde:	617a      	str	r2, [r7, #20]
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003be6:	f04f 0b00 	mov.w	fp, #0
 8003bea:	4652      	mov	r2, sl
 8003bec:	465b      	mov	r3, fp
 8003bee:	f04f 0000 	mov.w	r0, #0
 8003bf2:	f04f 0100 	mov.w	r1, #0
 8003bf6:	0159      	lsls	r1, r3, #5
 8003bf8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bfc:	0150      	lsls	r0, r2, #5
 8003bfe:	4602      	mov	r2, r0
 8003c00:	460b      	mov	r3, r1
 8003c02:	ebb2 080a 	subs.w	r8, r2, sl
 8003c06:	eb63 090b 	sbc.w	r9, r3, fp
 8003c0a:	f04f 0200 	mov.w	r2, #0
 8003c0e:	f04f 0300 	mov.w	r3, #0
 8003c12:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003c16:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003c1a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003c1e:	ebb2 0408 	subs.w	r4, r2, r8
 8003c22:	eb63 0509 	sbc.w	r5, r3, r9
 8003c26:	f04f 0200 	mov.w	r2, #0
 8003c2a:	f04f 0300 	mov.w	r3, #0
 8003c2e:	00eb      	lsls	r3, r5, #3
 8003c30:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c34:	00e2      	lsls	r2, r4, #3
 8003c36:	4614      	mov	r4, r2
 8003c38:	461d      	mov	r5, r3
 8003c3a:	eb14 030a 	adds.w	r3, r4, sl
 8003c3e:	603b      	str	r3, [r7, #0]
 8003c40:	eb45 030b 	adc.w	r3, r5, fp
 8003c44:	607b      	str	r3, [r7, #4]
 8003c46:	f04f 0200 	mov.w	r2, #0
 8003c4a:	f04f 0300 	mov.w	r3, #0
 8003c4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c52:	4629      	mov	r1, r5
 8003c54:	028b      	lsls	r3, r1, #10
 8003c56:	4621      	mov	r1, r4
 8003c58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c5c:	4621      	mov	r1, r4
 8003c5e:	028a      	lsls	r2, r1, #10
 8003c60:	4610      	mov	r0, r2
 8003c62:	4619      	mov	r1, r3
 8003c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c66:	2200      	movs	r2, #0
 8003c68:	60bb      	str	r3, [r7, #8]
 8003c6a:	60fa      	str	r2, [r7, #12]
 8003c6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c70:	f7fc fac4 	bl	80001fc <__aeabi_uldivmod>
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	4613      	mov	r3, r2
 8003c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c7c:	4b0b      	ldr	r3, [pc, #44]	; (8003cac <HAL_RCC_GetSysClockFreq+0x180>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	0c1b      	lsrs	r3, r3, #16
 8003c82:	f003 0303 	and.w	r3, r3, #3
 8003c86:	3301      	adds	r3, #1
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003c8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c94:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c96:	e002      	b.n	8003c9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c98:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c9a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3740      	adds	r7, #64	; 0x40
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003caa:	bf00      	nop
 8003cac:	40023800 	.word	0x40023800
 8003cb0:	00f42400 	.word	0x00f42400
 8003cb4:	017d7840 	.word	0x017d7840

08003cb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cbc:	4b03      	ldr	r3, [pc, #12]	; (8003ccc <HAL_RCC_GetHCLKFreq+0x14>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	20000018 	.word	0x20000018

08003cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cd4:	f7ff fff0 	bl	8003cb8 <HAL_RCC_GetHCLKFreq>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	0a9b      	lsrs	r3, r3, #10
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	4903      	ldr	r1, [pc, #12]	; (8003cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ce6:	5ccb      	ldrb	r3, [r1, r3]
 8003ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	40023800 	.word	0x40023800
 8003cf4:	08006c44 	.word	0x08006c44

08003cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003cfc:	f7ff ffdc 	bl	8003cb8 <HAL_RCC_GetHCLKFreq>
 8003d00:	4602      	mov	r2, r0
 8003d02:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	0b5b      	lsrs	r3, r3, #13
 8003d08:	f003 0307 	and.w	r3, r3, #7
 8003d0c:	4903      	ldr	r1, [pc, #12]	; (8003d1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d0e:	5ccb      	ldrb	r3, [r1, r3]
 8003d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	40023800 	.word	0x40023800
 8003d1c:	08006c44 	.word	0x08006c44

08003d20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10b      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d105      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d075      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d54:	4b91      	ldr	r3, [pc, #580]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d5a:	f7fd ff6b 	bl	8001c34 <HAL_GetTick>
 8003d5e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d60:	e008      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d62:	f7fd ff67 	bl	8001c34 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e189      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d74:	4b8a      	ldr	r3, [pc, #552]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1f0      	bne.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d009      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	019a      	lsls	r2, r3, #6
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	071b      	lsls	r3, r3, #28
 8003d98:	4981      	ldr	r1, [pc, #516]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d01f      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003dac:	4b7c      	ldr	r3, [pc, #496]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003db2:	0f1b      	lsrs	r3, r3, #28
 8003db4:	f003 0307 	and.w	r3, r3, #7
 8003db8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	019a      	lsls	r2, r3, #6
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	061b      	lsls	r3, r3, #24
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	071b      	lsls	r3, r3, #28
 8003dcc:	4974      	ldr	r1, [pc, #464]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003dd4:	4b72      	ldr	r3, [pc, #456]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dda:	f023 021f 	bic.w	r2, r3, #31
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	69db      	ldr	r3, [r3, #28]
 8003de2:	3b01      	subs	r3, #1
 8003de4:	496e      	ldr	r1, [pc, #440]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00d      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	019a      	lsls	r2, r3, #6
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	061b      	lsls	r3, r3, #24
 8003e04:	431a      	orrs	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	071b      	lsls	r3, r3, #28
 8003e0c:	4964      	ldr	r1, [pc, #400]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e14:	4b61      	ldr	r3, [pc, #388]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003e16:	2201      	movs	r2, #1
 8003e18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e1a:	f7fd ff0b 	bl	8001c34 <HAL_GetTick>
 8003e1e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e20:	e008      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e22:	f7fd ff07 	bl	8001c34 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e129      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e34:	4b5a      	ldr	r3, [pc, #360]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0f0      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d105      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d079      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003e58:	4b52      	ldr	r3, [pc, #328]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e5e:	f7fd fee9 	bl	8001c34 <HAL_GetTick>
 8003e62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e64:	e008      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003e66:	f7fd fee5 	bl	8001c34 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e107      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e78:	4b49      	ldr	r3, [pc, #292]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e84:	d0ef      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0304 	and.w	r3, r3, #4
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d020      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e92:	4b43      	ldr	r3, [pc, #268]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e98:	0f1b      	lsrs	r3, r3, #28
 8003e9a:	f003 0307 	and.w	r3, r3, #7
 8003e9e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	019a      	lsls	r2, r3, #6
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	061b      	lsls	r3, r3, #24
 8003eac:	431a      	orrs	r2, r3
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	071b      	lsls	r3, r3, #28
 8003eb2:	493b      	ldr	r1, [pc, #236]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003eba:	4b39      	ldr	r3, [pc, #228]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ec0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	021b      	lsls	r3, r3, #8
 8003ecc:	4934      	ldr	r1, [pc, #208]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0308 	and.w	r3, r3, #8
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d01e      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ee0:	4b2f      	ldr	r3, [pc, #188]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee6:	0e1b      	lsrs	r3, r3, #24
 8003ee8:	f003 030f 	and.w	r3, r3, #15
 8003eec:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	019a      	lsls	r2, r3, #6
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	061b      	lsls	r3, r3, #24
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	071b      	lsls	r3, r3, #28
 8003f00:	4927      	ldr	r1, [pc, #156]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003f08:	4b25      	ldr	r3, [pc, #148]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f0e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f16:	4922      	ldr	r1, [pc, #136]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003f1e:	4b21      	ldr	r3, [pc, #132]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003f20:	2201      	movs	r2, #1
 8003f22:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f24:	f7fd fe86 	bl	8001c34 <HAL_GetTick>
 8003f28:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003f2c:	f7fd fe82 	bl	8001c34 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e0a4      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f3e:	4b18      	ldr	r3, [pc, #96]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f4a:	d1ef      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0320 	and.w	r3, r3, #32
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 808b 	beq.w	8004070 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	60fb      	str	r3, [r7, #12]
 8003f5e:	4b10      	ldr	r3, [pc, #64]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	4a0f      	ldr	r2, [pc, #60]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f68:	6413      	str	r3, [r2, #64]	; 0x40
 8003f6a:	4b0d      	ldr	r3, [pc, #52]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003f76:	4b0c      	ldr	r3, [pc, #48]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a0b      	ldr	r2, [pc, #44]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f80:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f82:	f7fd fe57 	bl	8001c34 <HAL_GetTick>
 8003f86:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f88:	e010      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003f8a:	f7fd fe53 	bl	8001c34 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d909      	bls.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e075      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003f9c:	42470068 	.word	0x42470068
 8003fa0:	40023800 	.word	0x40023800
 8003fa4:	42470070 	.word	0x42470070
 8003fa8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003fac:	4b38      	ldr	r3, [pc, #224]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d0e8      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fb8:	4b36      	ldr	r3, [pc, #216]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fc0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d02f      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d028      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fd6:	4b2f      	ldr	r3, [pc, #188]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fde:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fe0:	4b2d      	ldr	r3, [pc, #180]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fe6:	4b2c      	ldr	r3, [pc, #176]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003fec:	4a29      	ldr	r2, [pc, #164]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ff2:	4b28      	ldr	r3, [pc, #160]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d114      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003ffe:	f7fd fe19 	bl	8001c34 <HAL_GetTick>
 8004002:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004004:	e00a      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004006:	f7fd fe15 	bl	8001c34 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	f241 3288 	movw	r2, #5000	; 0x1388
 8004014:	4293      	cmp	r3, r2
 8004016:	d901      	bls.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e035      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800401c:	4b1d      	ldr	r3, [pc, #116]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800401e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d0ee      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004030:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004034:	d10d      	bne.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004036:	4b17      	ldr	r3, [pc, #92]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004042:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004046:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800404a:	4912      	ldr	r1, [pc, #72]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800404c:	4313      	orrs	r3, r2
 800404e:	608b      	str	r3, [r1, #8]
 8004050:	e005      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004052:	4b10      	ldr	r3, [pc, #64]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	4a0f      	ldr	r2, [pc, #60]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004058:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800405c:	6093      	str	r3, [r2, #8]
 800405e:	4b0d      	ldr	r3, [pc, #52]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004060:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800406a:	490a      	ldr	r1, [pc, #40]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800406c:	4313      	orrs	r3, r2
 800406e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0310 	and.w	r3, r3, #16
 8004078:	2b00      	cmp	r3, #0
 800407a:	d004      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004082:	4b06      	ldr	r3, [pc, #24]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004084:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3718      	adds	r7, #24
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	40007000 	.word	0x40007000
 8004094:	40023800 	.word	0x40023800
 8004098:	42470e40 	.word	0x42470e40
 800409c:	424711e0 	.word	0x424711e0

080040a0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e073      	b.n	800419e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	7f5b      	ldrb	r3, [r3, #29]
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d105      	bne.n	80040cc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7fd fa4c 	bl	8001564 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2202      	movs	r2, #2
 80040d0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	f003 0310 	and.w	r3, r3, #16
 80040dc:	2b10      	cmp	r3, #16
 80040de:	d055      	beq.n	800418c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	22ca      	movs	r2, #202	; 0xca
 80040e6:	625a      	str	r2, [r3, #36]	; 0x24
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2253      	movs	r2, #83	; 0x53
 80040ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 fa49 	bl	8004588 <RTC_EnterInitMode>
 80040f6:	4603      	mov	r3, r0
 80040f8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80040fa:	7bfb      	ldrb	r3, [r7, #15]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d12c      	bne.n	800415a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	6812      	ldr	r2, [r2, #0]
 800410a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800410e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004112:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6899      	ldr	r1, [r3, #8]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	431a      	orrs	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	68d2      	ldr	r2, [r2, #12]
 800413a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6919      	ldr	r1, [r3, #16]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	041a      	lsls	r2, r3, #16
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	430a      	orrs	r2, r1
 800414e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 fa50 	bl	80045f6 <RTC_ExitInitMode>
 8004156:	4603      	mov	r3, r0
 8004158:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800415a:	7bfb      	ldrb	r3, [r7, #15]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d110      	bne.n	8004182 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800416e:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	699a      	ldr	r2, [r3, #24]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	430a      	orrs	r2, r1
 8004180:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	22ff      	movs	r2, #255	; 0xff
 8004188:	625a      	str	r2, [r3, #36]	; 0x24
 800418a:	e001      	b.n	8004190 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800418c:	2300      	movs	r3, #0
 800418e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004190:	7bfb      	ldrb	r3, [r7, #15]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d102      	bne.n	800419c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2201      	movs	r2, #1
 800419a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800419c:	7bfb      	ldrb	r3, [r7, #15]
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80041a6:	b590      	push	{r4, r7, lr}
 80041a8:	b087      	sub	sp, #28
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	60f8      	str	r0, [r7, #12]
 80041ae:	60b9      	str	r1, [r7, #8]
 80041b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80041b2:	2300      	movs	r3, #0
 80041b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	7f1b      	ldrb	r3, [r3, #28]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d101      	bne.n	80041c2 <HAL_RTC_SetTime+0x1c>
 80041be:	2302      	movs	r3, #2
 80041c0:	e087      	b.n	80042d2 <HAL_RTC_SetTime+0x12c>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2201      	movs	r2, #1
 80041c6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2202      	movs	r2, #2
 80041cc:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d126      	bne.n	8004222 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d102      	bne.n	80041e8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	2200      	movs	r2, #0
 80041e6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 fa27 	bl	8004640 <RTC_ByteToBcd2>
 80041f2:	4603      	mov	r3, r0
 80041f4:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	785b      	ldrb	r3, [r3, #1]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 fa20 	bl	8004640 <RTC_ByteToBcd2>
 8004200:	4603      	mov	r3, r0
 8004202:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004204:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	789b      	ldrb	r3, [r3, #2]
 800420a:	4618      	mov	r0, r3
 800420c:	f000 fa18 	bl	8004640 <RTC_ByteToBcd2>
 8004210:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004212:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	78db      	ldrb	r3, [r3, #3]
 800421a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800421c:	4313      	orrs	r3, r2
 800421e:	617b      	str	r3, [r7, #20]
 8004220:	e018      	b.n	8004254 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422c:	2b00      	cmp	r3, #0
 800422e:	d102      	bne.n	8004236 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	2200      	movs	r2, #0
 8004234:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	785b      	ldrb	r3, [r3, #1]
 8004240:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004242:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004248:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	78db      	ldrb	r3, [r3, #3]
 800424e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004250:	4313      	orrs	r3, r2
 8004252:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	22ca      	movs	r2, #202	; 0xca
 800425a:	625a      	str	r2, [r3, #36]	; 0x24
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2253      	movs	r2, #83	; 0x53
 8004262:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f000 f98f 	bl	8004588 <RTC_EnterInitMode>
 800426a:	4603      	mov	r3, r0
 800426c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800426e:	7cfb      	ldrb	r3, [r7, #19]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d120      	bne.n	80042b6 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800427e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004282:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	689a      	ldr	r2, [r3, #8]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004292:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6899      	ldr	r1, [r3, #8]
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	431a      	orrs	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	430a      	orrs	r2, r1
 80042aa:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f000 f9a2 	bl	80045f6 <RTC_ExitInitMode>
 80042b2:	4603      	mov	r3, r0
 80042b4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80042b6:	7cfb      	ldrb	r3, [r7, #19]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d102      	bne.n	80042c2 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2201      	movs	r2, #1
 80042c0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	22ff      	movs	r2, #255	; 0xff
 80042c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	771a      	strb	r2, [r3, #28]

  return status;
 80042d0:	7cfb      	ldrb	r3, [r7, #19]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	371c      	adds	r7, #28
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd90      	pop	{r4, r7, pc}

080042da <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80042da:	b580      	push	{r7, lr}
 80042dc:	b086      	sub	sp, #24
 80042de:	af00      	add	r7, sp, #0
 80042e0:	60f8      	str	r0, [r7, #12]
 80042e2:	60b9      	str	r1, [r7, #8]
 80042e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80042e6:	2300      	movs	r3, #0
 80042e8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800430c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004310:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	0c1b      	lsrs	r3, r3, #16
 8004316:	b2db      	uxtb	r3, r3
 8004318:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800431c:	b2da      	uxtb	r2, r3
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	0a1b      	lsrs	r3, r3, #8
 8004326:	b2db      	uxtb	r3, r3
 8004328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800432c:	b2da      	uxtb	r2, r3
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	b2db      	uxtb	r3, r3
 8004336:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800433a:	b2da      	uxtb	r2, r3
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	0d9b      	lsrs	r3, r3, #22
 8004344:	b2db      	uxtb	r3, r3
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	b2da      	uxtb	r2, r3
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d11a      	bne.n	800438c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	4618      	mov	r0, r3
 800435c:	f000 f98e 	bl	800467c <RTC_Bcd2ToByte>
 8004360:	4603      	mov	r3, r0
 8004362:	461a      	mov	r2, r3
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	785b      	ldrb	r3, [r3, #1]
 800436c:	4618      	mov	r0, r3
 800436e:	f000 f985 	bl	800467c <RTC_Bcd2ToByte>
 8004372:	4603      	mov	r3, r0
 8004374:	461a      	mov	r2, r3
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	789b      	ldrb	r3, [r3, #2]
 800437e:	4618      	mov	r0, r3
 8004380:	f000 f97c 	bl	800467c <RTC_Bcd2ToByte>
 8004384:	4603      	mov	r3, r0
 8004386:	461a      	mov	r2, r3
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3718      	adds	r7, #24
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004396:	b590      	push	{r4, r7, lr}
 8004398:	b087      	sub	sp, #28
 800439a:	af00      	add	r7, sp, #0
 800439c:	60f8      	str	r0, [r7, #12]
 800439e:	60b9      	str	r1, [r7, #8]
 80043a0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80043a2:	2300      	movs	r3, #0
 80043a4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	7f1b      	ldrb	r3, [r3, #28]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d101      	bne.n	80043b2 <HAL_RTC_SetDate+0x1c>
 80043ae:	2302      	movs	r3, #2
 80043b0:	e071      	b.n	8004496 <HAL_RTC_SetDate+0x100>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2201      	movs	r2, #1
 80043b6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2202      	movs	r2, #2
 80043bc:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10e      	bne.n	80043e2 <HAL_RTC_SetDate+0x4c>
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	785b      	ldrb	r3, [r3, #1]
 80043c8:	f003 0310 	and.w	r3, r3, #16
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d008      	beq.n	80043e2 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	785b      	ldrb	r3, [r3, #1]
 80043d4:	f023 0310 	bic.w	r3, r3, #16
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	330a      	adds	r3, #10
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d11c      	bne.n	8004422 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	78db      	ldrb	r3, [r3, #3]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f000 f927 	bl	8004640 <RTC_ByteToBcd2>
 80043f2:	4603      	mov	r3, r0
 80043f4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	785b      	ldrb	r3, [r3, #1]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 f920 	bl	8004640 <RTC_ByteToBcd2>
 8004400:	4603      	mov	r3, r0
 8004402:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004404:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	789b      	ldrb	r3, [r3, #2]
 800440a:	4618      	mov	r0, r3
 800440c:	f000 f918 	bl	8004640 <RTC_ByteToBcd2>
 8004410:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004412:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800441c:	4313      	orrs	r3, r2
 800441e:	617b      	str	r3, [r7, #20]
 8004420:	e00e      	b.n	8004440 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	78db      	ldrb	r3, [r3, #3]
 8004426:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	785b      	ldrb	r3, [r3, #1]
 800442c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800442e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004430:	68ba      	ldr	r2, [r7, #8]
 8004432:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004434:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800443c:	4313      	orrs	r3, r2
 800443e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	22ca      	movs	r2, #202	; 0xca
 8004446:	625a      	str	r2, [r3, #36]	; 0x24
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2253      	movs	r2, #83	; 0x53
 800444e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f000 f899 	bl	8004588 <RTC_EnterInitMode>
 8004456:	4603      	mov	r3, r0
 8004458:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800445a:	7cfb      	ldrb	r3, [r7, #19]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10c      	bne.n	800447a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800446a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800446e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f000 f8c0 	bl	80045f6 <RTC_ExitInitMode>
 8004476:	4603      	mov	r3, r0
 8004478:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800447a:	7cfb      	ldrb	r3, [r7, #19]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d102      	bne.n	8004486 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2201      	movs	r2, #1
 8004484:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	22ff      	movs	r2, #255	; 0xff
 800448c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	771a      	strb	r2, [r3, #28]

  return status;
 8004494:	7cfb      	ldrb	r3, [r7, #19]
}
 8004496:	4618      	mov	r0, r3
 8004498:	371c      	adds	r7, #28
 800449a:	46bd      	mov	sp, r7
 800449c:	bd90      	pop	{r4, r7, pc}

0800449e <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b086      	sub	sp, #24
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	60f8      	str	r0, [r7, #12]
 80044a6:	60b9      	str	r1, [r7, #8]
 80044a8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80044b8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80044bc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	0c1b      	lsrs	r3, r3, #16
 80044c2:	b2da      	uxtb	r2, r3
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	0a1b      	lsrs	r3, r3, #8
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	f003 031f 	and.w	r3, r3, #31
 80044d2:	b2da      	uxtb	r2, r3
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044e0:	b2da      	uxtb	r2, r3
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	0b5b      	lsrs	r3, r3, #13
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	f003 0307 	and.w	r3, r3, #7
 80044f0:	b2da      	uxtb	r2, r3
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d11a      	bne.n	8004532 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	78db      	ldrb	r3, [r3, #3]
 8004500:	4618      	mov	r0, r3
 8004502:	f000 f8bb 	bl	800467c <RTC_Bcd2ToByte>
 8004506:	4603      	mov	r3, r0
 8004508:	461a      	mov	r2, r3
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	785b      	ldrb	r3, [r3, #1]
 8004512:	4618      	mov	r0, r3
 8004514:	f000 f8b2 	bl	800467c <RTC_Bcd2ToByte>
 8004518:	4603      	mov	r3, r0
 800451a:	461a      	mov	r2, r3
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	789b      	ldrb	r3, [r3, #2]
 8004524:	4618      	mov	r0, r3
 8004526:	f000 f8a9 	bl	800467c <RTC_Bcd2ToByte>
 800452a:	4603      	mov	r3, r0
 800452c:	461a      	mov	r2, r3
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3718      	adds	r7, #24
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004544:	2300      	movs	r3, #0
 8004546:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a0d      	ldr	r2, [pc, #52]	; (8004584 <HAL_RTC_WaitForSynchro+0x48>)
 800454e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004550:	f7fd fb70 	bl	8001c34 <HAL_GetTick>
 8004554:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004556:	e009      	b.n	800456c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004558:	f7fd fb6c 	bl	8001c34 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004566:	d901      	bls.n	800456c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e007      	b.n	800457c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	f003 0320 	and.w	r3, r3, #32
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0ee      	beq.n	8004558 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	00017f5f 	.word	0x00017f5f

08004588 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004590:	2300      	movs	r3, #0
 8004592:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004594:	2300      	movs	r3, #0
 8004596:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d122      	bne.n	80045ec <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68da      	ldr	r2, [r3, #12]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80045b4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80045b6:	f7fd fb3d 	bl	8001c34 <HAL_GetTick>
 80045ba:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80045bc:	e00c      	b.n	80045d8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80045be:	f7fd fb39 	bl	8001c34 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045cc:	d904      	bls.n	80045d8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2204      	movs	r2, #4
 80045d2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d102      	bne.n	80045ec <RTC_EnterInitMode+0x64>
 80045e6:	7bfb      	ldrb	r3, [r7, #15]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d1e8      	bne.n	80045be <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80045ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b084      	sub	sp, #16
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045fe:	2300      	movs	r3, #0
 8004600:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68da      	ldr	r2, [r3, #12]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004610:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f003 0320 	and.w	r3, r3, #32
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10a      	bne.n	8004636 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f7ff ff8b 	bl	800453c <HAL_RTC_WaitForSynchro>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d004      	beq.n	8004636 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2204      	movs	r2, #4
 8004630:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004636:	7bfb      	ldrb	r3, [r7, #15]
}
 8004638:	4618      	mov	r0, r3
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004640:	b480      	push	{r7}
 8004642:	b085      	sub	sp, #20
 8004644:	af00      	add	r7, sp, #0
 8004646:	4603      	mov	r3, r0
 8004648:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800464a:	2300      	movs	r3, #0
 800464c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800464e:	e005      	b.n	800465c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	3301      	adds	r3, #1
 8004654:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004656:	79fb      	ldrb	r3, [r7, #7]
 8004658:	3b0a      	subs	r3, #10
 800465a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800465c:	79fb      	ldrb	r3, [r7, #7]
 800465e:	2b09      	cmp	r3, #9
 8004660:	d8f6      	bhi.n	8004650 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	b2db      	uxtb	r3, r3
 8004666:	011b      	lsls	r3, r3, #4
 8004668:	b2da      	uxtb	r2, r3
 800466a:	79fb      	ldrb	r3, [r7, #7]
 800466c:	4313      	orrs	r3, r2
 800466e:	b2db      	uxtb	r3, r3
}
 8004670:	4618      	mov	r0, r3
 8004672:	3714      	adds	r7, #20
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	4603      	mov	r3, r0
 8004684:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8004686:	2300      	movs	r3, #0
 8004688:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800468a:	79fb      	ldrb	r3, [r7, #7]
 800468c:	091b      	lsrs	r3, r3, #4
 800468e:	b2db      	uxtb	r3, r3
 8004690:	461a      	mov	r2, r3
 8004692:	4613      	mov	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	4413      	add	r3, r2
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	b2da      	uxtb	r2, r3
 80046a0:	79fb      	ldrb	r3, [r7, #7]
 80046a2:	f003 030f 	and.w	r3, r3, #15
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	4413      	add	r3, r2
 80046aa:	b2db      	uxtb	r3, r3
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3714      	adds	r7, #20
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e07b      	b.n	80047c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d108      	bne.n	80046e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046da:	d009      	beq.n	80046f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	61da      	str	r2, [r3, #28]
 80046e2:	e005      	b.n	80046f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d106      	bne.n	8004710 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f7fc ff54 	bl	80015b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2202      	movs	r2, #2
 8004714:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004726:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004738:	431a      	orrs	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004742:	431a      	orrs	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	431a      	orrs	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	431a      	orrs	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004760:	431a      	orrs	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800476a:	431a      	orrs	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004774:	ea42 0103 	orr.w	r1, r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	430a      	orrs	r2, r1
 8004786:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	0c1b      	lsrs	r3, r3, #16
 800478e:	f003 0104 	and.w	r1, r3, #4
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004796:	f003 0210 	and.w	r2, r3, #16
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	430a      	orrs	r2, r1
 80047a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	69da      	ldr	r2, [r3, #28]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b088      	sub	sp, #32
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	60f8      	str	r0, [r7, #12]
 80047d2:	60b9      	str	r1, [r7, #8]
 80047d4:	603b      	str	r3, [r7, #0]
 80047d6:	4613      	mov	r3, r2
 80047d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80047da:	2300      	movs	r3, #0
 80047dc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d101      	bne.n	80047ec <HAL_SPI_Transmit+0x22>
 80047e8:	2302      	movs	r3, #2
 80047ea:	e12d      	b.n	8004a48 <HAL_SPI_Transmit+0x27e>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047f4:	f7fd fa1e 	bl	8001c34 <HAL_GetTick>
 80047f8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80047fa:	88fb      	ldrh	r3, [r7, #6]
 80047fc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b01      	cmp	r3, #1
 8004808:	d002      	beq.n	8004810 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800480a:	2302      	movs	r3, #2
 800480c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800480e:	e116      	b.n	8004a3e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d002      	beq.n	800481c <HAL_SPI_Transmit+0x52>
 8004816:	88fb      	ldrh	r3, [r7, #6]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d102      	bne.n	8004822 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004820:	e10d      	b.n	8004a3e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2203      	movs	r2, #3
 8004826:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	68ba      	ldr	r2, [r7, #8]
 8004834:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	88fa      	ldrh	r2, [r7, #6]
 800483a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	88fa      	ldrh	r2, [r7, #6]
 8004840:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2200      	movs	r2, #0
 8004858:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004868:	d10f      	bne.n	800488a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004878:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004888:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004894:	2b40      	cmp	r3, #64	; 0x40
 8004896:	d007      	beq.n	80048a8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048b0:	d14f      	bne.n	8004952 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d002      	beq.n	80048c0 <HAL_SPI_Transmit+0xf6>
 80048ba:	8afb      	ldrh	r3, [r7, #22]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d142      	bne.n	8004946 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c4:	881a      	ldrh	r2, [r3, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d0:	1c9a      	adds	r2, r3, #2
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048da:	b29b      	uxth	r3, r3
 80048dc:	3b01      	subs	r3, #1
 80048de:	b29a      	uxth	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80048e4:	e02f      	b.n	8004946 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f003 0302 	and.w	r3, r3, #2
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d112      	bne.n	800491a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f8:	881a      	ldrh	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004904:	1c9a      	adds	r2, r3, #2
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800490e:	b29b      	uxth	r3, r3
 8004910:	3b01      	subs	r3, #1
 8004912:	b29a      	uxth	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	86da      	strh	r2, [r3, #54]	; 0x36
 8004918:	e015      	b.n	8004946 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800491a:	f7fd f98b 	bl	8001c34 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	429a      	cmp	r2, r3
 8004928:	d803      	bhi.n	8004932 <HAL_SPI_Transmit+0x168>
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004930:	d102      	bne.n	8004938 <HAL_SPI_Transmit+0x16e>
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d106      	bne.n	8004946 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004944:	e07b      	b.n	8004a3e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800494a:	b29b      	uxth	r3, r3
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1ca      	bne.n	80048e6 <HAL_SPI_Transmit+0x11c>
 8004950:	e050      	b.n	80049f4 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d002      	beq.n	8004960 <HAL_SPI_Transmit+0x196>
 800495a:	8afb      	ldrh	r3, [r7, #22]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d144      	bne.n	80049ea <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	330c      	adds	r3, #12
 800496a:	7812      	ldrb	r2, [r2, #0]
 800496c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004972:	1c5a      	adds	r2, r3, #1
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800497c:	b29b      	uxth	r3, r3
 800497e:	3b01      	subs	r3, #1
 8004980:	b29a      	uxth	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004986:	e030      	b.n	80049ea <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b02      	cmp	r3, #2
 8004994:	d113      	bne.n	80049be <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	330c      	adds	r3, #12
 80049a0:	7812      	ldrb	r2, [r2, #0]
 80049a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a8:	1c5a      	adds	r2, r3, #1
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	3b01      	subs	r3, #1
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	86da      	strh	r2, [r3, #54]	; 0x36
 80049bc:	e015      	b.n	80049ea <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049be:	f7fd f939 	bl	8001c34 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d803      	bhi.n	80049d6 <HAL_SPI_Transmit+0x20c>
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049d4:	d102      	bne.n	80049dc <HAL_SPI_Transmit+0x212>
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d106      	bne.n	80049ea <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80049e8:	e029      	b.n	8004a3e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1c9      	bne.n	8004988 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	6839      	ldr	r1, [r7, #0]
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f000 fbdf 	bl	80051bc <SPI_EndRxTxTransaction>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d002      	beq.n	8004a0a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2220      	movs	r2, #32
 8004a08:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10a      	bne.n	8004a28 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a12:	2300      	movs	r3, #0
 8004a14:	613b      	str	r3, [r7, #16]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	613b      	str	r3, [r7, #16]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	613b      	str	r3, [r7, #16]
 8004a26:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d002      	beq.n	8004a36 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	77fb      	strb	r3, [r7, #31]
 8004a34:	e003      	b.n	8004a3e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a46:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3720      	adds	r7, #32
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b088      	sub	sp, #32
 8004a54:	af02      	add	r7, sp, #8
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	603b      	str	r3, [r7, #0]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a60:	2300      	movs	r3, #0
 8004a62:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d002      	beq.n	8004a76 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004a70:	2302      	movs	r3, #2
 8004a72:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a74:	e0fb      	b.n	8004c6e <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a7e:	d112      	bne.n	8004aa6 <HAL_SPI_Receive+0x56>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10e      	bne.n	8004aa6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2204      	movs	r2, #4
 8004a8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004a90:	88fa      	ldrh	r2, [r7, #6]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	9300      	str	r3, [sp, #0]
 8004a96:	4613      	mov	r3, r2
 8004a98:	68ba      	ldr	r2, [r7, #8]
 8004a9a:	68b9      	ldr	r1, [r7, #8]
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 f8ef 	bl	8004c80 <HAL_SPI_TransmitReceive>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	e0e8      	b.n	8004c78 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d101      	bne.n	8004ab4 <HAL_SPI_Receive+0x64>
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	e0e1      	b.n	8004c78 <HAL_SPI_Receive+0x228>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004abc:	f7fd f8ba 	bl	8001c34 <HAL_GetTick>
 8004ac0:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d002      	beq.n	8004ace <HAL_SPI_Receive+0x7e>
 8004ac8:	88fb      	ldrh	r3, [r7, #6]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d102      	bne.n	8004ad4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ad2:	e0cc      	b.n	8004c6e <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2204      	movs	r2, #4
 8004ad8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	88fa      	ldrh	r2, [r7, #6]
 8004aec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	88fa      	ldrh	r2, [r7, #6]
 8004af2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b1a:	d10f      	bne.n	8004b3c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b2a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b3a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b46:	2b40      	cmp	r3, #64	; 0x40
 8004b48:	d007      	beq.n	8004b5a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b58:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d16a      	bne.n	8004c38 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004b62:	e032      	b.n	8004bca <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d115      	bne.n	8004b9e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f103 020c 	add.w	r2, r3, #12
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7e:	7812      	ldrb	r2, [r2, #0]
 8004b80:	b2d2      	uxtb	r2, r2
 8004b82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b88:	1c5a      	adds	r2, r3, #1
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	3b01      	subs	r3, #1
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b9c:	e015      	b.n	8004bca <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b9e:	f7fd f849 	bl	8001c34 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d803      	bhi.n	8004bb6 <HAL_SPI_Receive+0x166>
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bb4:	d102      	bne.n	8004bbc <HAL_SPI_Receive+0x16c>
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d106      	bne.n	8004bca <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004bc8:	e051      	b.n	8004c6e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1c7      	bne.n	8004b64 <HAL_SPI_Receive+0x114>
 8004bd4:	e035      	b.n	8004c42 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d113      	bne.n	8004c0c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68da      	ldr	r2, [r3, #12]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bee:	b292      	uxth	r2, r2
 8004bf0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf6:	1c9a      	adds	r2, r3, #2
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	3b01      	subs	r3, #1
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c0a:	e015      	b.n	8004c38 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c0c:	f7fd f812 	bl	8001c34 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	683a      	ldr	r2, [r7, #0]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d803      	bhi.n	8004c24 <HAL_SPI_Receive+0x1d4>
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c22:	d102      	bne.n	8004c2a <HAL_SPI_Receive+0x1da>
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d106      	bne.n	8004c38 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004c36:	e01a      	b.n	8004c6e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1c9      	bne.n	8004bd6 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	6839      	ldr	r1, [r7, #0]
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f000 fa52 	bl	80050f0 <SPI_EndRxTransaction>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d002      	beq.n	8004c58 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2220      	movs	r2, #32
 8004c56:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d002      	beq.n	8004c66 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	75fb      	strb	r3, [r7, #23]
 8004c64:	e003      	b.n	8004c6e <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3718      	adds	r7, #24
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b08c      	sub	sp, #48	; 0x30
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
 8004c8c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c92:	2300      	movs	r3, #0
 8004c94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d101      	bne.n	8004ca6 <HAL_SPI_TransmitReceive+0x26>
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	e198      	b.n	8004fd8 <HAL_SPI_TransmitReceive+0x358>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cae:	f7fc ffc1 	bl	8001c34 <HAL_GetTick>
 8004cb2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004cc4:	887b      	ldrh	r3, [r7, #2]
 8004cc6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004cc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d00f      	beq.n	8004cf0 <HAL_SPI_TransmitReceive+0x70>
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cd6:	d107      	bne.n	8004ce8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d103      	bne.n	8004ce8 <HAL_SPI_TransmitReceive+0x68>
 8004ce0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ce4:	2b04      	cmp	r3, #4
 8004ce6:	d003      	beq.n	8004cf0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004ce8:	2302      	movs	r3, #2
 8004cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004cee:	e16d      	b.n	8004fcc <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d005      	beq.n	8004d02 <HAL_SPI_TransmitReceive+0x82>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d002      	beq.n	8004d02 <HAL_SPI_TransmitReceive+0x82>
 8004cfc:	887b      	ldrh	r3, [r7, #2]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d103      	bne.n	8004d0a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d08:	e160      	b.n	8004fcc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b04      	cmp	r3, #4
 8004d14:	d003      	beq.n	8004d1e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2205      	movs	r2, #5
 8004d1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	887a      	ldrh	r2, [r7, #2]
 8004d2e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	887a      	ldrh	r2, [r7, #2]
 8004d34:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	887a      	ldrh	r2, [r7, #2]
 8004d40:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	887a      	ldrh	r2, [r7, #2]
 8004d46:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5e:	2b40      	cmp	r3, #64	; 0x40
 8004d60:	d007      	beq.n	8004d72 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d7a:	d17c      	bne.n	8004e76 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d002      	beq.n	8004d8a <HAL_SPI_TransmitReceive+0x10a>
 8004d84:	8b7b      	ldrh	r3, [r7, #26]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d16a      	bne.n	8004e60 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8e:	881a      	ldrh	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9a:	1c9a      	adds	r2, r3, #2
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	3b01      	subs	r3, #1
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dae:	e057      	b.n	8004e60 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d11b      	bne.n	8004df6 <HAL_SPI_TransmitReceive+0x176>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d016      	beq.n	8004df6 <HAL_SPI_TransmitReceive+0x176>
 8004dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d113      	bne.n	8004df6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd2:	881a      	ldrh	r2, [r3, #0]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dde:	1c9a      	adds	r2, r3, #2
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	3b01      	subs	r3, #1
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f003 0301 	and.w	r3, r3, #1
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d119      	bne.n	8004e38 <HAL_SPI_TransmitReceive+0x1b8>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d014      	beq.n	8004e38 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68da      	ldr	r2, [r3, #12]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e18:	b292      	uxth	r2, r2
 8004e1a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e20:	1c9a      	adds	r2, r3, #2
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e34:	2301      	movs	r3, #1
 8004e36:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e38:	f7fc fefc 	bl	8001c34 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d80b      	bhi.n	8004e60 <HAL_SPI_TransmitReceive+0x1e0>
 8004e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e4e:	d007      	beq.n	8004e60 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004e5e:	e0b5      	b.n	8004fcc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1a2      	bne.n	8004db0 <HAL_SPI_TransmitReceive+0x130>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d19d      	bne.n	8004db0 <HAL_SPI_TransmitReceive+0x130>
 8004e74:	e080      	b.n	8004f78 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d002      	beq.n	8004e84 <HAL_SPI_TransmitReceive+0x204>
 8004e7e:	8b7b      	ldrh	r3, [r7, #26]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d16f      	bne.n	8004f64 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	330c      	adds	r3, #12
 8004e8e:	7812      	ldrb	r2, [r2, #0]
 8004e90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e96:	1c5a      	adds	r2, r3, #1
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004eaa:	e05b      	b.n	8004f64 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d11c      	bne.n	8004ef4 <HAL_SPI_TransmitReceive+0x274>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d017      	beq.n	8004ef4 <HAL_SPI_TransmitReceive+0x274>
 8004ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d114      	bne.n	8004ef4 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	330c      	adds	r3, #12
 8004ed4:	7812      	ldrb	r2, [r2, #0]
 8004ed6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004edc:	1c5a      	adds	r2, r3, #1
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d119      	bne.n	8004f36 <HAL_SPI_TransmitReceive+0x2b6>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d014      	beq.n	8004f36 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68da      	ldr	r2, [r3, #12]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f16:	b2d2      	uxtb	r2, r2
 8004f18:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1e:	1c5a      	adds	r2, r3, #1
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f32:	2301      	movs	r3, #1
 8004f34:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f36:	f7fc fe7d 	bl	8001c34 <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d803      	bhi.n	8004f4e <HAL_SPI_TransmitReceive+0x2ce>
 8004f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f4c:	d102      	bne.n	8004f54 <HAL_SPI_TransmitReceive+0x2d4>
 8004f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d107      	bne.n	8004f64 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004f62:	e033      	b.n	8004fcc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d19e      	bne.n	8004eac <HAL_SPI_TransmitReceive+0x22c>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d199      	bne.n	8004eac <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 f91d 	bl	80051bc <SPI_EndRxTxTransaction>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d006      	beq.n	8004f96 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2220      	movs	r2, #32
 8004f92:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004f94:	e01a      	b.n	8004fcc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10a      	bne.n	8004fb4 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	617b      	str	r3, [r7, #20]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	617b      	str	r3, [r7, #20]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	617b      	str	r3, [r7, #20]
 8004fb2:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d003      	beq.n	8004fc4 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fc2:	e003      	b.n	8004fcc <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004fd4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3730      	adds	r7, #48	; 0x30
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b088      	sub	sp, #32
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	603b      	str	r3, [r7, #0]
 8004fec:	4613      	mov	r3, r2
 8004fee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ff0:	f7fc fe20 	bl	8001c34 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff8:	1a9b      	subs	r3, r3, r2
 8004ffa:	683a      	ldr	r2, [r7, #0]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005000:	f7fc fe18 	bl	8001c34 <HAL_GetTick>
 8005004:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005006:	4b39      	ldr	r3, [pc, #228]	; (80050ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	015b      	lsls	r3, r3, #5
 800500c:	0d1b      	lsrs	r3, r3, #20
 800500e:	69fa      	ldr	r2, [r7, #28]
 8005010:	fb02 f303 	mul.w	r3, r2, r3
 8005014:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005016:	e054      	b.n	80050c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800501e:	d050      	beq.n	80050c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005020:	f7fc fe08 	bl	8001c34 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	69fa      	ldr	r2, [r7, #28]
 800502c:	429a      	cmp	r2, r3
 800502e:	d902      	bls.n	8005036 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d13d      	bne.n	80050b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005044:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800504e:	d111      	bne.n	8005074 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005058:	d004      	beq.n	8005064 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005062:	d107      	bne.n	8005074 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005072:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005078:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800507c:	d10f      	bne.n	800509e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800509c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e017      	b.n	80050e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80050b8:	2300      	movs	r3, #0
 80050ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	3b01      	subs	r3, #1
 80050c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	689a      	ldr	r2, [r3, #8]
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	4013      	ands	r3, r2
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	bf0c      	ite	eq
 80050d2:	2301      	moveq	r3, #1
 80050d4:	2300      	movne	r3, #0
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	461a      	mov	r2, r3
 80050da:	79fb      	ldrb	r3, [r7, #7]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d19b      	bne.n	8005018 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3720      	adds	r7, #32
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	20000018 	.word	0x20000018

080050f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af02      	add	r7, sp, #8
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005104:	d111      	bne.n	800512a <SPI_EndRxTransaction+0x3a>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800510e:	d004      	beq.n	800511a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005118:	d107      	bne.n	800512a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005128:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005132:	d12a      	bne.n	800518a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800513c:	d012      	beq.n	8005164 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	2200      	movs	r2, #0
 8005146:	2180      	movs	r1, #128	; 0x80
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f7ff ff49 	bl	8004fe0 <SPI_WaitFlagStateUntilTimeout>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d02d      	beq.n	80051b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005158:	f043 0220 	orr.w	r2, r3, #32
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e026      	b.n	80051b2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	9300      	str	r3, [sp, #0]
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	2200      	movs	r2, #0
 800516c:	2101      	movs	r1, #1
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f7ff ff36 	bl	8004fe0 <SPI_WaitFlagStateUntilTimeout>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d01a      	beq.n	80051b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800517e:	f043 0220 	orr.w	r2, r3, #32
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e013      	b.n	80051b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	2200      	movs	r2, #0
 8005192:	2101      	movs	r1, #1
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	f7ff ff23 	bl	8004fe0 <SPI_WaitFlagStateUntilTimeout>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d007      	beq.n	80051b0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a4:	f043 0220 	orr.w	r2, r3, #32
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e000      	b.n	80051b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
	...

080051bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b088      	sub	sp, #32
 80051c0:	af02      	add	r7, sp, #8
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	9300      	str	r3, [sp, #0]
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	2201      	movs	r2, #1
 80051d0:	2102      	movs	r1, #2
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f7ff ff04 	bl	8004fe0 <SPI_WaitFlagStateUntilTimeout>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d007      	beq.n	80051ee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e2:	f043 0220 	orr.w	r2, r3, #32
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e032      	b.n	8005254 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80051ee:	4b1b      	ldr	r3, [pc, #108]	; (800525c <SPI_EndRxTxTransaction+0xa0>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a1b      	ldr	r2, [pc, #108]	; (8005260 <SPI_EndRxTxTransaction+0xa4>)
 80051f4:	fba2 2303 	umull	r2, r3, r2, r3
 80051f8:	0d5b      	lsrs	r3, r3, #21
 80051fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80051fe:	fb02 f303 	mul.w	r3, r2, r3
 8005202:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800520c:	d112      	bne.n	8005234 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	2200      	movs	r2, #0
 8005216:	2180      	movs	r1, #128	; 0x80
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f7ff fee1 	bl	8004fe0 <SPI_WaitFlagStateUntilTimeout>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d016      	beq.n	8005252 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005228:	f043 0220 	orr.w	r2, r3, #32
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e00f      	b.n	8005254 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00a      	beq.n	8005250 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	3b01      	subs	r3, #1
 800523e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800524a:	2b80      	cmp	r3, #128	; 0x80
 800524c:	d0f2      	beq.n	8005234 <SPI_EndRxTxTransaction+0x78>
 800524e:	e000      	b.n	8005252 <SPI_EndRxTxTransaction+0x96>
        break;
 8005250:	bf00      	nop
  }

  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3718      	adds	r7, #24
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	20000018 	.word	0x20000018
 8005260:	165e9f81 	.word	0x165e9f81

08005264 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e041      	b.n	80052fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d106      	bne.n	8005290 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7fc f9dc 	bl	8001648 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2202      	movs	r2, #2
 8005294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	3304      	adds	r3, #4
 80052a0:	4619      	mov	r1, r3
 80052a2:	4610      	mov	r0, r2
 80052a4:	f000 f9f0 	bl	8005688 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3708      	adds	r7, #8
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
	...

08005304 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b01      	cmp	r3, #1
 8005316:	d001      	beq.n	800531c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e04e      	b.n	80053ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2202      	movs	r2, #2
 8005320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68da      	ldr	r2, [r3, #12]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f042 0201 	orr.w	r2, r2, #1
 8005332:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a23      	ldr	r2, [pc, #140]	; (80053c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d022      	beq.n	8005384 <HAL_TIM_Base_Start_IT+0x80>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005346:	d01d      	beq.n	8005384 <HAL_TIM_Base_Start_IT+0x80>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a1f      	ldr	r2, [pc, #124]	; (80053cc <HAL_TIM_Base_Start_IT+0xc8>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d018      	beq.n	8005384 <HAL_TIM_Base_Start_IT+0x80>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a1e      	ldr	r2, [pc, #120]	; (80053d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d013      	beq.n	8005384 <HAL_TIM_Base_Start_IT+0x80>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a1c      	ldr	r2, [pc, #112]	; (80053d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d00e      	beq.n	8005384 <HAL_TIM_Base_Start_IT+0x80>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a1b      	ldr	r2, [pc, #108]	; (80053d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d009      	beq.n	8005384 <HAL_TIM_Base_Start_IT+0x80>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a19      	ldr	r2, [pc, #100]	; (80053dc <HAL_TIM_Base_Start_IT+0xd8>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d004      	beq.n	8005384 <HAL_TIM_Base_Start_IT+0x80>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a18      	ldr	r2, [pc, #96]	; (80053e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d111      	bne.n	80053a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f003 0307 	and.w	r3, r3, #7
 800538e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2b06      	cmp	r3, #6
 8005394:	d010      	beq.n	80053b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f042 0201 	orr.w	r2, r2, #1
 80053a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053a6:	e007      	b.n	80053b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f042 0201 	orr.w	r2, r2, #1
 80053b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3714      	adds	r7, #20
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	40010000 	.word	0x40010000
 80053cc:	40000400 	.word	0x40000400
 80053d0:	40000800 	.word	0x40000800
 80053d4:	40000c00 	.word	0x40000c00
 80053d8:	40010400 	.word	0x40010400
 80053dc:	40014000 	.word	0x40014000
 80053e0:	40001800 	.word	0x40001800

080053e4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68da      	ldr	r2, [r3, #12]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f022 0201 	bic.w	r2, r2, #1
 80053fa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6a1a      	ldr	r2, [r3, #32]
 8005402:	f241 1311 	movw	r3, #4369	; 0x1111
 8005406:	4013      	ands	r3, r2
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10f      	bne.n	800542c <HAL_TIM_Base_Stop_IT+0x48>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6a1a      	ldr	r2, [r3, #32]
 8005412:	f240 4344 	movw	r3, #1092	; 0x444
 8005416:	4013      	ands	r3, r2
 8005418:	2b00      	cmp	r3, #0
 800541a:	d107      	bne.n	800542c <HAL_TIM_Base_Stop_IT+0x48>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f022 0201 	bic.w	r2, r2, #1
 800542a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b084      	sub	sp, #16
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	f003 0302 	and.w	r3, r3, #2
 8005460:	2b00      	cmp	r3, #0
 8005462:	d020      	beq.n	80054a6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d01b      	beq.n	80054a6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f06f 0202 	mvn.w	r2, #2
 8005476:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	f003 0303 	and.w	r3, r3, #3
 8005488:	2b00      	cmp	r3, #0
 800548a:	d003      	beq.n	8005494 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 f8dc 	bl	800564a <HAL_TIM_IC_CaptureCallback>
 8005492:	e005      	b.n	80054a0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 f8ce 	bl	8005636 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 f8df 	bl	800565e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	f003 0304 	and.w	r3, r3, #4
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d020      	beq.n	80054f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f003 0304 	and.w	r3, r3, #4
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d01b      	beq.n	80054f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f06f 0204 	mvn.w	r2, #4
 80054c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2202      	movs	r2, #2
 80054c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d003      	beq.n	80054e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 f8b6 	bl	800564a <HAL_TIM_IC_CaptureCallback>
 80054de:	e005      	b.n	80054ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 f8a8 	bl	8005636 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 f8b9 	bl	800565e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	f003 0308 	and.w	r3, r3, #8
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d020      	beq.n	800553e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f003 0308 	and.w	r3, r3, #8
 8005502:	2b00      	cmp	r3, #0
 8005504:	d01b      	beq.n	800553e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f06f 0208 	mvn.w	r2, #8
 800550e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2204      	movs	r2, #4
 8005514:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	69db      	ldr	r3, [r3, #28]
 800551c:	f003 0303 	and.w	r3, r3, #3
 8005520:	2b00      	cmp	r3, #0
 8005522:	d003      	beq.n	800552c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 f890 	bl	800564a <HAL_TIM_IC_CaptureCallback>
 800552a:	e005      	b.n	8005538 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 f882 	bl	8005636 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f893 	bl	800565e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	f003 0310 	and.w	r3, r3, #16
 8005544:	2b00      	cmp	r3, #0
 8005546:	d020      	beq.n	800558a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f003 0310 	and.w	r3, r3, #16
 800554e:	2b00      	cmp	r3, #0
 8005550:	d01b      	beq.n	800558a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f06f 0210 	mvn.w	r2, #16
 800555a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2208      	movs	r2, #8
 8005560:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	69db      	ldr	r3, [r3, #28]
 8005568:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800556c:	2b00      	cmp	r3, #0
 800556e:	d003      	beq.n	8005578 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 f86a 	bl	800564a <HAL_TIM_IC_CaptureCallback>
 8005576:	e005      	b.n	8005584 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 f85c 	bl	8005636 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 f86d 	bl	800565e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00c      	beq.n	80055ae <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d007      	beq.n	80055ae <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f06f 0201 	mvn.w	r2, #1
 80055a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 f83a 	bl	8005622 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00c      	beq.n	80055d2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d007      	beq.n	80055d2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 f98d 	bl	80058ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00c      	beq.n	80055f6 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d007      	beq.n	80055f6 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 f83e 	bl	8005672 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	f003 0320 	and.w	r3, r3, #32
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00c      	beq.n	800561a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f003 0320 	and.w	r3, r3, #32
 8005606:	2b00      	cmp	r3, #0
 8005608:	d007      	beq.n	800561a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f06f 0220 	mvn.w	r2, #32
 8005612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 f95f 	bl	80058d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800561a:	bf00      	nop
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005622:	b480      	push	{r7}
 8005624:	b083      	sub	sp, #12
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800562a:	bf00      	nop
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005636:	b480      	push	{r7}
 8005638:	b083      	sub	sp, #12
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800563e:	bf00      	nop
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800564a:	b480      	push	{r7}
 800564c:	b083      	sub	sp, #12
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005652:	bf00      	nop
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800565e:	b480      	push	{r7}
 8005660:	b083      	sub	sp, #12
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005666:	bf00      	nop
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005672:	b480      	push	{r7}
 8005674:	b083      	sub	sp, #12
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800567a:	bf00      	nop
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
	...

08005688 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a46      	ldr	r2, [pc, #280]	; (80057b4 <TIM_Base_SetConfig+0x12c>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d013      	beq.n	80056c8 <TIM_Base_SetConfig+0x40>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a6:	d00f      	beq.n	80056c8 <TIM_Base_SetConfig+0x40>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a43      	ldr	r2, [pc, #268]	; (80057b8 <TIM_Base_SetConfig+0x130>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d00b      	beq.n	80056c8 <TIM_Base_SetConfig+0x40>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a42      	ldr	r2, [pc, #264]	; (80057bc <TIM_Base_SetConfig+0x134>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d007      	beq.n	80056c8 <TIM_Base_SetConfig+0x40>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a41      	ldr	r2, [pc, #260]	; (80057c0 <TIM_Base_SetConfig+0x138>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d003      	beq.n	80056c8 <TIM_Base_SetConfig+0x40>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a40      	ldr	r2, [pc, #256]	; (80057c4 <TIM_Base_SetConfig+0x13c>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d108      	bne.n	80056da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a35      	ldr	r2, [pc, #212]	; (80057b4 <TIM_Base_SetConfig+0x12c>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d02b      	beq.n	800573a <TIM_Base_SetConfig+0xb2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056e8:	d027      	beq.n	800573a <TIM_Base_SetConfig+0xb2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a32      	ldr	r2, [pc, #200]	; (80057b8 <TIM_Base_SetConfig+0x130>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d023      	beq.n	800573a <TIM_Base_SetConfig+0xb2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a31      	ldr	r2, [pc, #196]	; (80057bc <TIM_Base_SetConfig+0x134>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d01f      	beq.n	800573a <TIM_Base_SetConfig+0xb2>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a30      	ldr	r2, [pc, #192]	; (80057c0 <TIM_Base_SetConfig+0x138>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d01b      	beq.n	800573a <TIM_Base_SetConfig+0xb2>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a2f      	ldr	r2, [pc, #188]	; (80057c4 <TIM_Base_SetConfig+0x13c>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d017      	beq.n	800573a <TIM_Base_SetConfig+0xb2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a2e      	ldr	r2, [pc, #184]	; (80057c8 <TIM_Base_SetConfig+0x140>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d013      	beq.n	800573a <TIM_Base_SetConfig+0xb2>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a2d      	ldr	r2, [pc, #180]	; (80057cc <TIM_Base_SetConfig+0x144>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d00f      	beq.n	800573a <TIM_Base_SetConfig+0xb2>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a2c      	ldr	r2, [pc, #176]	; (80057d0 <TIM_Base_SetConfig+0x148>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d00b      	beq.n	800573a <TIM_Base_SetConfig+0xb2>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a2b      	ldr	r2, [pc, #172]	; (80057d4 <TIM_Base_SetConfig+0x14c>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d007      	beq.n	800573a <TIM_Base_SetConfig+0xb2>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a2a      	ldr	r2, [pc, #168]	; (80057d8 <TIM_Base_SetConfig+0x150>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d003      	beq.n	800573a <TIM_Base_SetConfig+0xb2>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a29      	ldr	r2, [pc, #164]	; (80057dc <TIM_Base_SetConfig+0x154>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d108      	bne.n	800574c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005740:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	4313      	orrs	r3, r2
 800574a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	4313      	orrs	r3, r2
 8005758:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	689a      	ldr	r2, [r3, #8]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a10      	ldr	r2, [pc, #64]	; (80057b4 <TIM_Base_SetConfig+0x12c>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d003      	beq.n	8005780 <TIM_Base_SetConfig+0xf8>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a12      	ldr	r2, [pc, #72]	; (80057c4 <TIM_Base_SetConfig+0x13c>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d103      	bne.n	8005788 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	691a      	ldr	r2, [r3, #16]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	f003 0301 	and.w	r3, r3, #1
 8005796:	2b01      	cmp	r3, #1
 8005798:	d105      	bne.n	80057a6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	f023 0201 	bic.w	r2, r3, #1
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	611a      	str	r2, [r3, #16]
  }
}
 80057a6:	bf00      	nop
 80057a8:	3714      	adds	r7, #20
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	40010000 	.word	0x40010000
 80057b8:	40000400 	.word	0x40000400
 80057bc:	40000800 	.word	0x40000800
 80057c0:	40000c00 	.word	0x40000c00
 80057c4:	40010400 	.word	0x40010400
 80057c8:	40014000 	.word	0x40014000
 80057cc:	40014400 	.word	0x40014400
 80057d0:	40014800 	.word	0x40014800
 80057d4:	40001800 	.word	0x40001800
 80057d8:	40001c00 	.word	0x40001c00
 80057dc:	40002000 	.word	0x40002000

080057e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d101      	bne.n	80057f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057f4:	2302      	movs	r3, #2
 80057f6:	e05a      	b.n	80058ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2202      	movs	r2, #2
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	4313      	orrs	r3, r2
 8005828:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a21      	ldr	r2, [pc, #132]	; (80058bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d022      	beq.n	8005882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005844:	d01d      	beq.n	8005882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a1d      	ldr	r2, [pc, #116]	; (80058c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d018      	beq.n	8005882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a1b      	ldr	r2, [pc, #108]	; (80058c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d013      	beq.n	8005882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a1a      	ldr	r2, [pc, #104]	; (80058c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d00e      	beq.n	8005882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a18      	ldr	r2, [pc, #96]	; (80058cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d009      	beq.n	8005882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a17      	ldr	r2, [pc, #92]	; (80058d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d004      	beq.n	8005882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a15      	ldr	r2, [pc, #84]	; (80058d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d10c      	bne.n	800589c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005888:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	68ba      	ldr	r2, [r7, #8]
 8005890:	4313      	orrs	r3, r2
 8005892:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68ba      	ldr	r2, [r7, #8]
 800589a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3714      	adds	r7, #20
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	40010000 	.word	0x40010000
 80058c0:	40000400 	.word	0x40000400
 80058c4:	40000800 	.word	0x40000800
 80058c8:	40000c00 	.word	0x40000c00
 80058cc:	40010400 	.word	0x40010400
 80058d0:	40014000 	.word	0x40014000
 80058d4:	40001800 	.word	0x40001800

080058d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d101      	bne.n	8005912 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e042      	b.n	8005998 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d106      	bne.n	800592c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7fb feb6 	bl	8001698 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2224      	movs	r2, #36	; 0x24
 8005930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68da      	ldr	r2, [r3, #12]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005942:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 fe91 	bl	800666c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	691a      	ldr	r2, [r3, #16]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005958:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	695a      	ldr	r2, [r3, #20]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005968:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68da      	ldr	r2, [r3, #12]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005978:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2220      	movs	r2, #32
 8005984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2220      	movs	r2, #32
 800598c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3708      	adds	r7, #8
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b08a      	sub	sp, #40	; 0x28
 80059a4:	af02      	add	r7, sp, #8
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	603b      	str	r3, [r7, #0]
 80059ac:	4613      	mov	r3, r2
 80059ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80059b0:	2300      	movs	r3, #0
 80059b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b20      	cmp	r3, #32
 80059be:	d175      	bne.n	8005aac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d002      	beq.n	80059cc <HAL_UART_Transmit+0x2c>
 80059c6:	88fb      	ldrh	r3, [r7, #6]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d101      	bne.n	80059d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e06e      	b.n	8005aae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2221      	movs	r2, #33	; 0x21
 80059da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059de:	f7fc f929 	bl	8001c34 <HAL_GetTick>
 80059e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	88fa      	ldrh	r2, [r7, #6]
 80059e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	88fa      	ldrh	r2, [r7, #6]
 80059ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059f8:	d108      	bne.n	8005a0c <HAL_UART_Transmit+0x6c>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d104      	bne.n	8005a0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a02:	2300      	movs	r3, #0
 8005a04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	61bb      	str	r3, [r7, #24]
 8005a0a:	e003      	b.n	8005a14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a10:	2300      	movs	r3, #0
 8005a12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a14:	e02e      	b.n	8005a74 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	9300      	str	r3, [sp, #0]
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	2180      	movs	r1, #128	; 0x80
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f000 fbdb 	bl	80061dc <UART_WaitOnFlagUntilTimeout>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d005      	beq.n	8005a38 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e03a      	b.n	8005aae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10b      	bne.n	8005a56 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	881b      	ldrh	r3, [r3, #0]
 8005a42:	461a      	mov	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	3302      	adds	r3, #2
 8005a52:	61bb      	str	r3, [r7, #24]
 8005a54:	e007      	b.n	8005a66 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	781a      	ldrb	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	3301      	adds	r3, #1
 8005a64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1cb      	bne.n	8005a16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	2200      	movs	r2, #0
 8005a86:	2140      	movs	r1, #64	; 0x40
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	f000 fba7 	bl	80061dc <UART_WaitOnFlagUntilTimeout>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d005      	beq.n	8005aa0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2220      	movs	r2, #32
 8005a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e006      	b.n	8005aae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	e000      	b.n	8005aae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005aac:	2302      	movs	r3, #2
  }
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3720      	adds	r7, #32
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b084      	sub	sp, #16
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	60f8      	str	r0, [r7, #12]
 8005abe:	60b9      	str	r1, [r7, #8]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2b20      	cmp	r3, #32
 8005ace:	d112      	bne.n	8005af6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d002      	beq.n	8005adc <HAL_UART_Receive_IT+0x26>
 8005ad6:	88fb      	ldrh	r3, [r7, #6]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d101      	bne.n	8005ae0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e00b      	b.n	8005af8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005ae6:	88fb      	ldrh	r3, [r7, #6]
 8005ae8:	461a      	mov	r2, r3
 8005aea:	68b9      	ldr	r1, [r7, #8]
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f000 fbce 	bl	800628e <UART_Start_Receive_IT>
 8005af2:	4603      	mov	r3, r0
 8005af4:	e000      	b.n	8005af8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005af6:	2302      	movs	r3, #2
  }
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b09a      	sub	sp, #104	; 0x68
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	330c      	adds	r3, #12
 8005b0e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b12:	e853 3f00 	ldrex	r3, [r3]
 8005b16:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b1e:	667b      	str	r3, [r7, #100]	; 0x64
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	330c      	adds	r3, #12
 8005b26:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005b28:	657a      	str	r2, [r7, #84]	; 0x54
 8005b2a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005b2e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005b30:	e841 2300 	strex	r3, r2, [r1]
 8005b34:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1e5      	bne.n	8005b08 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	3314      	adds	r3, #20
 8005b42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b46:	e853 3f00 	ldrex	r3, [r3]
 8005b4a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4e:	f023 0301 	bic.w	r3, r3, #1
 8005b52:	663b      	str	r3, [r7, #96]	; 0x60
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	3314      	adds	r3, #20
 8005b5a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005b5c:	643a      	str	r2, [r7, #64]	; 0x40
 8005b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b64:	e841 2300 	strex	r3, r2, [r1]
 8005b68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1e5      	bne.n	8005b3c <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d119      	bne.n	8005bac <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	330c      	adds	r3, #12
 8005b7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b80:	6a3b      	ldr	r3, [r7, #32]
 8005b82:	e853 3f00 	ldrex	r3, [r3]
 8005b86:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	f023 0310 	bic.w	r3, r3, #16
 8005b8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	330c      	adds	r3, #12
 8005b96:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ba0:	e841 2300 	strex	r3, r2, [r1]
 8005ba4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1e5      	bne.n	8005b78 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb6:	2b40      	cmp	r3, #64	; 0x40
 8005bb8:	d13f      	bne.n	8005c3a <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	3314      	adds	r3, #20
 8005bc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	e853 3f00 	ldrex	r3, [r3]
 8005bc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bd0:	65bb      	str	r3, [r7, #88]	; 0x58
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	3314      	adds	r3, #20
 8005bd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bda:	61ba      	str	r2, [r7, #24]
 8005bdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bde:	6979      	ldr	r1, [r7, #20]
 8005be0:	69ba      	ldr	r2, [r7, #24]
 8005be2:	e841 2300 	strex	r3, r2, [r1]
 8005be6:	613b      	str	r3, [r7, #16]
   return(result);
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1e5      	bne.n	8005bba <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d013      	beq.n	8005c1e <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bfa:	4a19      	ldr	r2, [pc, #100]	; (8005c60 <HAL_UART_AbortReceive_IT+0x160>)
 8005bfc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7fc f9a3 	bl	8001f4e <HAL_DMA_Abort_IT>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d022      	beq.n	8005c54 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005c18:	4610      	mov	r0, r2
 8005c1a:	4798      	blx	r3
 8005c1c:	e01a      	b.n	8005c54 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2220      	movs	r2, #32
 8005c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 fabc 	bl	80061b0 <HAL_UART_AbortReceiveCpltCallback>
 8005c38:	e00c      	b.n	8005c54 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2220      	movs	r2, #32
 8005c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 faae 	bl	80061b0 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3768      	adds	r7, #104	; 0x68
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	080063f1 	.word	0x080063f1

08005c64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b0ba      	sub	sp, #232	; 0xe8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005c90:	2300      	movs	r3, #0
 8005c92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c9a:	f003 030f 	and.w	r3, r3, #15
 8005c9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005ca2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d10f      	bne.n	8005cca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cae:	f003 0320 	and.w	r3, r3, #32
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d009      	beq.n	8005cca <HAL_UART_IRQHandler+0x66>
 8005cb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cba:	f003 0320 	and.w	r3, r3, #32
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d003      	beq.n	8005cca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 fc14 	bl	80064f0 <UART_Receive_IT>
      return;
 8005cc8:	e25b      	b.n	8006182 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005cca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	f000 80de 	beq.w	8005e90 <HAL_UART_IRQHandler+0x22c>
 8005cd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d106      	bne.n	8005cee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ce4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f000 80d1 	beq.w	8005e90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cf2:	f003 0301 	and.w	r3, r3, #1
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00b      	beq.n	8005d12 <HAL_UART_IRQHandler+0xae>
 8005cfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d005      	beq.n	8005d12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d0a:	f043 0201 	orr.w	r2, r3, #1
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d16:	f003 0304 	and.w	r3, r3, #4
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00b      	beq.n	8005d36 <HAL_UART_IRQHandler+0xd2>
 8005d1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d005      	beq.n	8005d36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d2e:	f043 0202 	orr.w	r2, r3, #2
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00b      	beq.n	8005d5a <HAL_UART_IRQHandler+0xf6>
 8005d42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d005      	beq.n	8005d5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d52:	f043 0204 	orr.w	r2, r3, #4
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d5e:	f003 0308 	and.w	r3, r3, #8
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d011      	beq.n	8005d8a <HAL_UART_IRQHandler+0x126>
 8005d66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d6a:	f003 0320 	and.w	r3, r3, #32
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d105      	bne.n	8005d7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005d72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d76:	f003 0301 	and.w	r3, r3, #1
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d005      	beq.n	8005d8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d82:	f043 0208 	orr.w	r2, r3, #8
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	f000 81f2 	beq.w	8006178 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d98:	f003 0320 	and.w	r3, r3, #32
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d008      	beq.n	8005db2 <HAL_UART_IRQHandler+0x14e>
 8005da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005da4:	f003 0320 	and.w	r3, r3, #32
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d002      	beq.n	8005db2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 fb9f 	bl	80064f0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	695b      	ldr	r3, [r3, #20]
 8005db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dbc:	2b40      	cmp	r3, #64	; 0x40
 8005dbe:	bf0c      	ite	eq
 8005dc0:	2301      	moveq	r3, #1
 8005dc2:	2300      	movne	r3, #0
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dce:	f003 0308 	and.w	r3, r3, #8
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d103      	bne.n	8005dde <HAL_UART_IRQHandler+0x17a>
 8005dd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d04f      	beq.n	8005e7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 fa8f 	bl	8006302 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dee:	2b40      	cmp	r3, #64	; 0x40
 8005df0:	d141      	bne.n	8005e76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	3314      	adds	r3, #20
 8005df8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e00:	e853 3f00 	ldrex	r3, [r3]
 8005e04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005e08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	3314      	adds	r3, #20
 8005e1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005e1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005e22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005e2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005e2e:	e841 2300 	strex	r3, r2, [r1]
 8005e32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005e36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d1d9      	bne.n	8005df2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d013      	beq.n	8005e6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e4a:	4a7e      	ldr	r2, [pc, #504]	; (8006044 <HAL_UART_IRQHandler+0x3e0>)
 8005e4c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7fc f87b 	bl	8001f4e <HAL_DMA_Abort_IT>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d016      	beq.n	8005e8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005e68:	4610      	mov	r0, r2
 8005e6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e6c:	e00e      	b.n	8005e8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f994 	bl	800619c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e74:	e00a      	b.n	8005e8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f990 	bl	800619c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e7c:	e006      	b.n	8005e8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 f98c 	bl	800619c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005e8a:	e175      	b.n	8006178 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e8c:	bf00      	nop
    return;
 8005e8e:	e173      	b.n	8006178 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	f040 814f 	bne.w	8006138 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e9e:	f003 0310 	and.w	r3, r3, #16
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	f000 8148 	beq.w	8006138 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eac:	f003 0310 	and.w	r3, r3, #16
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f000 8141 	beq.w	8006138 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	60bb      	str	r3, [r7, #8]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	60bb      	str	r3, [r7, #8]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	60bb      	str	r3, [r7, #8]
 8005eca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	695b      	ldr	r3, [r3, #20]
 8005ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed6:	2b40      	cmp	r3, #64	; 0x40
 8005ed8:	f040 80b6 	bne.w	8006048 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ee8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 8145 	beq.w	800617c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ef6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005efa:	429a      	cmp	r2, r3
 8005efc:	f080 813e 	bcs.w	800617c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f06:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f0c:	69db      	ldr	r3, [r3, #28]
 8005f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f12:	f000 8088 	beq.w	8006026 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	330c      	adds	r3, #12
 8005f1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f24:	e853 3f00 	ldrex	r3, [r3]
 8005f28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005f2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	330c      	adds	r3, #12
 8005f3e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005f42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005f4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005f52:	e841 2300 	strex	r3, r2, [r1]
 8005f56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005f5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1d9      	bne.n	8005f16 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	3314      	adds	r3, #20
 8005f68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f6c:	e853 3f00 	ldrex	r3, [r3]
 8005f70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005f72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f74:	f023 0301 	bic.w	r3, r3, #1
 8005f78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	3314      	adds	r3, #20
 8005f82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005f86:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005f8a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005f8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005f92:	e841 2300 	strex	r3, r2, [r1]
 8005f96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005f98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1e1      	bne.n	8005f62 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	3314      	adds	r3, #20
 8005fa4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fa8:	e853 3f00 	ldrex	r3, [r3]
 8005fac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005fae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	3314      	adds	r3, #20
 8005fbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005fc2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005fc4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005fc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005fca:	e841 2300 	strex	r3, r2, [r1]
 8005fce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005fd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1e3      	bne.n	8005f9e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2220      	movs	r2, #32
 8005fda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	330c      	adds	r3, #12
 8005fea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fee:	e853 3f00 	ldrex	r3, [r3]
 8005ff2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ff6:	f023 0310 	bic.w	r3, r3, #16
 8005ffa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	330c      	adds	r3, #12
 8006004:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006008:	65ba      	str	r2, [r7, #88]	; 0x58
 800600a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800600e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006010:	e841 2300 	strex	r3, r2, [r1]
 8006014:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006016:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1e3      	bne.n	8005fe4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006020:	4618      	mov	r0, r3
 8006022:	f7fb ff24 	bl	8001e6e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2202      	movs	r2, #2
 800602a:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006034:	b29b      	uxth	r3, r3
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	b29b      	uxth	r3, r3
 800603a:	4619      	mov	r1, r3
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 f8c1 	bl	80061c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006042:	e09b      	b.n	800617c <HAL_UART_IRQHandler+0x518>
 8006044:	080063c9 	.word	0x080063c9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006050:	b29b      	uxth	r3, r3
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800605c:	b29b      	uxth	r3, r3
 800605e:	2b00      	cmp	r3, #0
 8006060:	f000 808e 	beq.w	8006180 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006064:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006068:	2b00      	cmp	r3, #0
 800606a:	f000 8089 	beq.w	8006180 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	330c      	adds	r3, #12
 8006074:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006078:	e853 3f00 	ldrex	r3, [r3]
 800607c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800607e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006080:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006084:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	330c      	adds	r3, #12
 800608e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006092:	647a      	str	r2, [r7, #68]	; 0x44
 8006094:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006096:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006098:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800609a:	e841 2300 	strex	r3, r2, [r1]
 800609e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80060a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1e3      	bne.n	800606e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	3314      	adds	r3, #20
 80060ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b0:	e853 3f00 	ldrex	r3, [r3]
 80060b4:	623b      	str	r3, [r7, #32]
   return(result);
 80060b6:	6a3b      	ldr	r3, [r7, #32]
 80060b8:	f023 0301 	bic.w	r3, r3, #1
 80060bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	3314      	adds	r3, #20
 80060c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80060ca:	633a      	str	r2, [r7, #48]	; 0x30
 80060cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060d2:	e841 2300 	strex	r3, r2, [r1]
 80060d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80060d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1e3      	bne.n	80060a6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2220      	movs	r2, #32
 80060e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	330c      	adds	r3, #12
 80060f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	e853 3f00 	ldrex	r3, [r3]
 80060fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f023 0310 	bic.w	r3, r3, #16
 8006102:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	330c      	adds	r3, #12
 800610c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006110:	61fa      	str	r2, [r7, #28]
 8006112:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006114:	69b9      	ldr	r1, [r7, #24]
 8006116:	69fa      	ldr	r2, [r7, #28]
 8006118:	e841 2300 	strex	r3, r2, [r1]
 800611c:	617b      	str	r3, [r7, #20]
   return(result);
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d1e3      	bne.n	80060ec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2202      	movs	r2, #2
 8006128:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800612a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800612e:	4619      	mov	r1, r3
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 f847 	bl	80061c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006136:	e023      	b.n	8006180 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800613c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006140:	2b00      	cmp	r3, #0
 8006142:	d009      	beq.n	8006158 <HAL_UART_IRQHandler+0x4f4>
 8006144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800614c:	2b00      	cmp	r3, #0
 800614e:	d003      	beq.n	8006158 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 f965 	bl	8006420 <UART_Transmit_IT>
    return;
 8006156:	e014      	b.n	8006182 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800615c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006160:	2b00      	cmp	r3, #0
 8006162:	d00e      	beq.n	8006182 <HAL_UART_IRQHandler+0x51e>
 8006164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800616c:	2b00      	cmp	r3, #0
 800616e:	d008      	beq.n	8006182 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 f9a5 	bl	80064c0 <UART_EndTransmit_IT>
    return;
 8006176:	e004      	b.n	8006182 <HAL_UART_IRQHandler+0x51e>
    return;
 8006178:	bf00      	nop
 800617a:	e002      	b.n	8006182 <HAL_UART_IRQHandler+0x51e>
      return;
 800617c:	bf00      	nop
 800617e:	e000      	b.n	8006182 <HAL_UART_IRQHandler+0x51e>
      return;
 8006180:	bf00      	nop
  }
}
 8006182:	37e8      	adds	r7, #232	; 0xe8
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006190:	bf00      	nop
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80061a4:	bf00      	nop
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	460b      	mov	r3, r1
 80061ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80061d0:	bf00      	nop
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b086      	sub	sp, #24
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	603b      	str	r3, [r7, #0]
 80061e8:	4613      	mov	r3, r2
 80061ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061ec:	e03b      	b.n	8006266 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061ee:	6a3b      	ldr	r3, [r7, #32]
 80061f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061f4:	d037      	beq.n	8006266 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061f6:	f7fb fd1d 	bl	8001c34 <HAL_GetTick>
 80061fa:	4602      	mov	r2, r0
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	6a3a      	ldr	r2, [r7, #32]
 8006202:	429a      	cmp	r2, r3
 8006204:	d302      	bcc.n	800620c <UART_WaitOnFlagUntilTimeout+0x30>
 8006206:	6a3b      	ldr	r3, [r7, #32]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d101      	bne.n	8006210 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e03a      	b.n	8006286 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	f003 0304 	and.w	r3, r3, #4
 800621a:	2b00      	cmp	r3, #0
 800621c:	d023      	beq.n	8006266 <UART_WaitOnFlagUntilTimeout+0x8a>
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	2b80      	cmp	r3, #128	; 0x80
 8006222:	d020      	beq.n	8006266 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	2b40      	cmp	r3, #64	; 0x40
 8006228:	d01d      	beq.n	8006266 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0308 	and.w	r3, r3, #8
 8006234:	2b08      	cmp	r3, #8
 8006236:	d116      	bne.n	8006266 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006238:	2300      	movs	r3, #0
 800623a:	617b      	str	r3, [r7, #20]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	617b      	str	r3, [r7, #20]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	617b      	str	r3, [r7, #20]
 800624c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	f000 f857 	bl	8006302 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2208      	movs	r2, #8
 8006258:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e00f      	b.n	8006286 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	4013      	ands	r3, r2
 8006270:	68ba      	ldr	r2, [r7, #8]
 8006272:	429a      	cmp	r2, r3
 8006274:	bf0c      	ite	eq
 8006276:	2301      	moveq	r3, #1
 8006278:	2300      	movne	r3, #0
 800627a:	b2db      	uxtb	r3, r3
 800627c:	461a      	mov	r2, r3
 800627e:	79fb      	ldrb	r3, [r7, #7]
 8006280:	429a      	cmp	r2, r3
 8006282:	d0b4      	beq.n	80061ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3718      	adds	r7, #24
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800628e:	b480      	push	{r7}
 8006290:	b085      	sub	sp, #20
 8006292:	af00      	add	r7, sp, #0
 8006294:	60f8      	str	r0, [r7, #12]
 8006296:	60b9      	str	r1, [r7, #8]
 8006298:	4613      	mov	r3, r2
 800629a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	88fa      	ldrh	r2, [r7, #6]
 80062a6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	88fa      	ldrh	r2, [r7, #6]
 80062ac:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2222      	movs	r2, #34	; 0x22
 80062b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d007      	beq.n	80062d4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68da      	ldr	r2, [r3, #12]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062d2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	695a      	ldr	r2, [r3, #20]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f042 0201 	orr.w	r2, r2, #1
 80062e2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68da      	ldr	r2, [r3, #12]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f042 0220 	orr.w	r2, r2, #32
 80062f2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3714      	adds	r7, #20
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006302:	b480      	push	{r7}
 8006304:	b095      	sub	sp, #84	; 0x54
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	330c      	adds	r3, #12
 8006310:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006314:	e853 3f00 	ldrex	r3, [r3]
 8006318:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800631a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006320:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	330c      	adds	r3, #12
 8006328:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800632a:	643a      	str	r2, [r7, #64]	; 0x40
 800632c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006330:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006332:	e841 2300 	strex	r3, r2, [r1]
 8006336:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1e5      	bne.n	800630a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	3314      	adds	r3, #20
 8006344:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006346:	6a3b      	ldr	r3, [r7, #32]
 8006348:	e853 3f00 	ldrex	r3, [r3]
 800634c:	61fb      	str	r3, [r7, #28]
   return(result);
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	f023 0301 	bic.w	r3, r3, #1
 8006354:	64bb      	str	r3, [r7, #72]	; 0x48
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	3314      	adds	r3, #20
 800635c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800635e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006360:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006362:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006364:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006366:	e841 2300 	strex	r3, r2, [r1]
 800636a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800636c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1e5      	bne.n	800633e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006376:	2b01      	cmp	r3, #1
 8006378:	d119      	bne.n	80063ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	330c      	adds	r3, #12
 8006380:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	e853 3f00 	ldrex	r3, [r3]
 8006388:	60bb      	str	r3, [r7, #8]
   return(result);
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	f023 0310 	bic.w	r3, r3, #16
 8006390:	647b      	str	r3, [r7, #68]	; 0x44
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	330c      	adds	r3, #12
 8006398:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800639a:	61ba      	str	r2, [r7, #24]
 800639c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639e:	6979      	ldr	r1, [r7, #20]
 80063a0:	69ba      	ldr	r2, [r7, #24]
 80063a2:	e841 2300 	strex	r3, r2, [r1]
 80063a6:	613b      	str	r3, [r7, #16]
   return(result);
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1e5      	bne.n	800637a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2220      	movs	r2, #32
 80063b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	631a      	str	r2, [r3, #48]	; 0x30
}
 80063bc:	bf00      	nop
 80063be:	3754      	adds	r7, #84	; 0x54
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063e2:	68f8      	ldr	r0, [r7, #12]
 80063e4:	f7ff feda 	bl	800619c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063e8:	bf00      	nop
 80063ea:	3710      	adds	r7, #16
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fc:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2200      	movs	r2, #0
 8006402:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2220      	movs	r2, #32
 8006408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2200      	movs	r2, #0
 8006410:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	f7ff fecc 	bl	80061b0 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006418:	bf00      	nop
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800642e:	b2db      	uxtb	r3, r3
 8006430:	2b21      	cmp	r3, #33	; 0x21
 8006432:	d13e      	bne.n	80064b2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800643c:	d114      	bne.n	8006468 <UART_Transmit_IT+0x48>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d110      	bne.n	8006468 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	881b      	ldrh	r3, [r3, #0]
 8006450:	461a      	mov	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800645a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a1b      	ldr	r3, [r3, #32]
 8006460:	1c9a      	adds	r2, r3, #2
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	621a      	str	r2, [r3, #32]
 8006466:	e008      	b.n	800647a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a1b      	ldr	r3, [r3, #32]
 800646c:	1c59      	adds	r1, r3, #1
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	6211      	str	r1, [r2, #32]
 8006472:	781a      	ldrb	r2, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800647e:	b29b      	uxth	r3, r3
 8006480:	3b01      	subs	r3, #1
 8006482:	b29b      	uxth	r3, r3
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	4619      	mov	r1, r3
 8006488:	84d1      	strh	r1, [r2, #38]	; 0x26
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10f      	bne.n	80064ae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68da      	ldr	r2, [r3, #12]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800649c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68da      	ldr	r2, [r3, #12]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064ac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80064ae:	2300      	movs	r3, #0
 80064b0:	e000      	b.n	80064b4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80064b2:	2302      	movs	r3, #2
  }
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3714      	adds	r7, #20
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68da      	ldr	r2, [r3, #12]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064d6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2220      	movs	r2, #32
 80064dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f7ff fe51 	bl	8006188 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3708      	adds	r7, #8
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b08c      	sub	sp, #48	; 0x30
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b22      	cmp	r3, #34	; 0x22
 8006502:	f040 80ae 	bne.w	8006662 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800650e:	d117      	bne.n	8006540 <UART_Receive_IT+0x50>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d113      	bne.n	8006540 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006518:	2300      	movs	r3, #0
 800651a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006520:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	b29b      	uxth	r3, r3
 800652a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800652e:	b29a      	uxth	r2, r3
 8006530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006532:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006538:	1c9a      	adds	r2, r3, #2
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	629a      	str	r2, [r3, #40]	; 0x28
 800653e:	e026      	b.n	800658e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006544:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006546:	2300      	movs	r3, #0
 8006548:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006552:	d007      	beq.n	8006564 <UART_Receive_IT+0x74>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d10a      	bne.n	8006572 <UART_Receive_IT+0x82>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d106      	bne.n	8006572 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	b2da      	uxtb	r2, r3
 800656c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800656e:	701a      	strb	r2, [r3, #0]
 8006570:	e008      	b.n	8006584 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	b2db      	uxtb	r3, r3
 800657a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800657e:	b2da      	uxtb	r2, r3
 8006580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006582:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006588:	1c5a      	adds	r2, r3, #1
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006592:	b29b      	uxth	r3, r3
 8006594:	3b01      	subs	r3, #1
 8006596:	b29b      	uxth	r3, r3
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	4619      	mov	r1, r3
 800659c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d15d      	bne.n	800665e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68da      	ldr	r2, [r3, #12]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f022 0220 	bic.w	r2, r2, #32
 80065b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68da      	ldr	r2, [r3, #12]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	695a      	ldr	r2, [r3, #20]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f022 0201 	bic.w	r2, r2, #1
 80065d0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2220      	movs	r2, #32
 80065d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d135      	bne.n	8006654 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	330c      	adds	r3, #12
 80065f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	e853 3f00 	ldrex	r3, [r3]
 80065fc:	613b      	str	r3, [r7, #16]
   return(result);
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	f023 0310 	bic.w	r3, r3, #16
 8006604:	627b      	str	r3, [r7, #36]	; 0x24
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	330c      	adds	r3, #12
 800660c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800660e:	623a      	str	r2, [r7, #32]
 8006610:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006612:	69f9      	ldr	r1, [r7, #28]
 8006614:	6a3a      	ldr	r2, [r7, #32]
 8006616:	e841 2300 	strex	r3, r2, [r1]
 800661a:	61bb      	str	r3, [r7, #24]
   return(result);
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1e5      	bne.n	80065ee <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0310 	and.w	r3, r3, #16
 800662c:	2b10      	cmp	r3, #16
 800662e:	d10a      	bne.n	8006646 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006630:	2300      	movs	r3, #0
 8006632:	60fb      	str	r3, [r7, #12]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	60fb      	str	r3, [r7, #12]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	60fb      	str	r3, [r7, #12]
 8006644:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800664a:	4619      	mov	r1, r3
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f7ff fdb9 	bl	80061c4 <HAL_UARTEx_RxEventCallback>
 8006652:	e002      	b.n	800665a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f7fb f909 	bl	800186c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800665a:	2300      	movs	r3, #0
 800665c:	e002      	b.n	8006664 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800665e:	2300      	movs	r3, #0
 8006660:	e000      	b.n	8006664 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006662:	2302      	movs	r3, #2
  }
}
 8006664:	4618      	mov	r0, r3
 8006666:	3730      	adds	r7, #48	; 0x30
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800666c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006670:	b0c0      	sub	sp, #256	; 0x100
 8006672:	af00      	add	r7, sp, #0
 8006674:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006688:	68d9      	ldr	r1, [r3, #12]
 800668a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	ea40 0301 	orr.w	r3, r0, r1
 8006694:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800669a:	689a      	ldr	r2, [r3, #8]
 800669c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	431a      	orrs	r2, r3
 80066a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	431a      	orrs	r2, r3
 80066ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b0:	69db      	ldr	r3, [r3, #28]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80066b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80066c4:	f021 010c 	bic.w	r1, r1, #12
 80066c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80066d2:	430b      	orrs	r3, r1
 80066d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	695b      	ldr	r3, [r3, #20]
 80066de:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80066e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066e6:	6999      	ldr	r1, [r3, #24]
 80066e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	ea40 0301 	orr.w	r3, r0, r1
 80066f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	4b8f      	ldr	r3, [pc, #572]	; (8006938 <UART_SetConfig+0x2cc>)
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d005      	beq.n	800670c <UART_SetConfig+0xa0>
 8006700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	4b8d      	ldr	r3, [pc, #564]	; (800693c <UART_SetConfig+0x2d0>)
 8006708:	429a      	cmp	r2, r3
 800670a:	d104      	bne.n	8006716 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800670c:	f7fd faf4 	bl	8003cf8 <HAL_RCC_GetPCLK2Freq>
 8006710:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006714:	e003      	b.n	800671e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006716:	f7fd fadb 	bl	8003cd0 <HAL_RCC_GetPCLK1Freq>
 800671a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800671e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006722:	69db      	ldr	r3, [r3, #28]
 8006724:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006728:	f040 810c 	bne.w	8006944 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800672c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006730:	2200      	movs	r2, #0
 8006732:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006736:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800673a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800673e:	4622      	mov	r2, r4
 8006740:	462b      	mov	r3, r5
 8006742:	1891      	adds	r1, r2, r2
 8006744:	65b9      	str	r1, [r7, #88]	; 0x58
 8006746:	415b      	adcs	r3, r3
 8006748:	65fb      	str	r3, [r7, #92]	; 0x5c
 800674a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800674e:	4621      	mov	r1, r4
 8006750:	eb12 0801 	adds.w	r8, r2, r1
 8006754:	4629      	mov	r1, r5
 8006756:	eb43 0901 	adc.w	r9, r3, r1
 800675a:	f04f 0200 	mov.w	r2, #0
 800675e:	f04f 0300 	mov.w	r3, #0
 8006762:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006766:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800676a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800676e:	4690      	mov	r8, r2
 8006770:	4699      	mov	r9, r3
 8006772:	4623      	mov	r3, r4
 8006774:	eb18 0303 	adds.w	r3, r8, r3
 8006778:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800677c:	462b      	mov	r3, r5
 800677e:	eb49 0303 	adc.w	r3, r9, r3
 8006782:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006792:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006796:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800679a:	460b      	mov	r3, r1
 800679c:	18db      	adds	r3, r3, r3
 800679e:	653b      	str	r3, [r7, #80]	; 0x50
 80067a0:	4613      	mov	r3, r2
 80067a2:	eb42 0303 	adc.w	r3, r2, r3
 80067a6:	657b      	str	r3, [r7, #84]	; 0x54
 80067a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80067ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80067b0:	f7f9 fd24 	bl	80001fc <__aeabi_uldivmod>
 80067b4:	4602      	mov	r2, r0
 80067b6:	460b      	mov	r3, r1
 80067b8:	4b61      	ldr	r3, [pc, #388]	; (8006940 <UART_SetConfig+0x2d4>)
 80067ba:	fba3 2302 	umull	r2, r3, r3, r2
 80067be:	095b      	lsrs	r3, r3, #5
 80067c0:	011c      	lsls	r4, r3, #4
 80067c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067c6:	2200      	movs	r2, #0
 80067c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067cc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80067d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80067d4:	4642      	mov	r2, r8
 80067d6:	464b      	mov	r3, r9
 80067d8:	1891      	adds	r1, r2, r2
 80067da:	64b9      	str	r1, [r7, #72]	; 0x48
 80067dc:	415b      	adcs	r3, r3
 80067de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80067e4:	4641      	mov	r1, r8
 80067e6:	eb12 0a01 	adds.w	sl, r2, r1
 80067ea:	4649      	mov	r1, r9
 80067ec:	eb43 0b01 	adc.w	fp, r3, r1
 80067f0:	f04f 0200 	mov.w	r2, #0
 80067f4:	f04f 0300 	mov.w	r3, #0
 80067f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80067fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006800:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006804:	4692      	mov	sl, r2
 8006806:	469b      	mov	fp, r3
 8006808:	4643      	mov	r3, r8
 800680a:	eb1a 0303 	adds.w	r3, sl, r3
 800680e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006812:	464b      	mov	r3, r9
 8006814:	eb4b 0303 	adc.w	r3, fp, r3
 8006818:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800681c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006828:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800682c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006830:	460b      	mov	r3, r1
 8006832:	18db      	adds	r3, r3, r3
 8006834:	643b      	str	r3, [r7, #64]	; 0x40
 8006836:	4613      	mov	r3, r2
 8006838:	eb42 0303 	adc.w	r3, r2, r3
 800683c:	647b      	str	r3, [r7, #68]	; 0x44
 800683e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006842:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006846:	f7f9 fcd9 	bl	80001fc <__aeabi_uldivmod>
 800684a:	4602      	mov	r2, r0
 800684c:	460b      	mov	r3, r1
 800684e:	4611      	mov	r1, r2
 8006850:	4b3b      	ldr	r3, [pc, #236]	; (8006940 <UART_SetConfig+0x2d4>)
 8006852:	fba3 2301 	umull	r2, r3, r3, r1
 8006856:	095b      	lsrs	r3, r3, #5
 8006858:	2264      	movs	r2, #100	; 0x64
 800685a:	fb02 f303 	mul.w	r3, r2, r3
 800685e:	1acb      	subs	r3, r1, r3
 8006860:	00db      	lsls	r3, r3, #3
 8006862:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006866:	4b36      	ldr	r3, [pc, #216]	; (8006940 <UART_SetConfig+0x2d4>)
 8006868:	fba3 2302 	umull	r2, r3, r3, r2
 800686c:	095b      	lsrs	r3, r3, #5
 800686e:	005b      	lsls	r3, r3, #1
 8006870:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006874:	441c      	add	r4, r3
 8006876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800687a:	2200      	movs	r2, #0
 800687c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006880:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006884:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006888:	4642      	mov	r2, r8
 800688a:	464b      	mov	r3, r9
 800688c:	1891      	adds	r1, r2, r2
 800688e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006890:	415b      	adcs	r3, r3
 8006892:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006894:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006898:	4641      	mov	r1, r8
 800689a:	1851      	adds	r1, r2, r1
 800689c:	6339      	str	r1, [r7, #48]	; 0x30
 800689e:	4649      	mov	r1, r9
 80068a0:	414b      	adcs	r3, r1
 80068a2:	637b      	str	r3, [r7, #52]	; 0x34
 80068a4:	f04f 0200 	mov.w	r2, #0
 80068a8:	f04f 0300 	mov.w	r3, #0
 80068ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80068b0:	4659      	mov	r1, fp
 80068b2:	00cb      	lsls	r3, r1, #3
 80068b4:	4651      	mov	r1, sl
 80068b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068ba:	4651      	mov	r1, sl
 80068bc:	00ca      	lsls	r2, r1, #3
 80068be:	4610      	mov	r0, r2
 80068c0:	4619      	mov	r1, r3
 80068c2:	4603      	mov	r3, r0
 80068c4:	4642      	mov	r2, r8
 80068c6:	189b      	adds	r3, r3, r2
 80068c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068cc:	464b      	mov	r3, r9
 80068ce:	460a      	mov	r2, r1
 80068d0:	eb42 0303 	adc.w	r3, r2, r3
 80068d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80068e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80068e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80068ec:	460b      	mov	r3, r1
 80068ee:	18db      	adds	r3, r3, r3
 80068f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80068f2:	4613      	mov	r3, r2
 80068f4:	eb42 0303 	adc.w	r3, r2, r3
 80068f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80068fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006902:	f7f9 fc7b 	bl	80001fc <__aeabi_uldivmod>
 8006906:	4602      	mov	r2, r0
 8006908:	460b      	mov	r3, r1
 800690a:	4b0d      	ldr	r3, [pc, #52]	; (8006940 <UART_SetConfig+0x2d4>)
 800690c:	fba3 1302 	umull	r1, r3, r3, r2
 8006910:	095b      	lsrs	r3, r3, #5
 8006912:	2164      	movs	r1, #100	; 0x64
 8006914:	fb01 f303 	mul.w	r3, r1, r3
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	00db      	lsls	r3, r3, #3
 800691c:	3332      	adds	r3, #50	; 0x32
 800691e:	4a08      	ldr	r2, [pc, #32]	; (8006940 <UART_SetConfig+0x2d4>)
 8006920:	fba2 2303 	umull	r2, r3, r2, r3
 8006924:	095b      	lsrs	r3, r3, #5
 8006926:	f003 0207 	and.w	r2, r3, #7
 800692a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4422      	add	r2, r4
 8006932:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006934:	e106      	b.n	8006b44 <UART_SetConfig+0x4d8>
 8006936:	bf00      	nop
 8006938:	40011000 	.word	0x40011000
 800693c:	40011400 	.word	0x40011400
 8006940:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006944:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006948:	2200      	movs	r2, #0
 800694a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800694e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006952:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006956:	4642      	mov	r2, r8
 8006958:	464b      	mov	r3, r9
 800695a:	1891      	adds	r1, r2, r2
 800695c:	6239      	str	r1, [r7, #32]
 800695e:	415b      	adcs	r3, r3
 8006960:	627b      	str	r3, [r7, #36]	; 0x24
 8006962:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006966:	4641      	mov	r1, r8
 8006968:	1854      	adds	r4, r2, r1
 800696a:	4649      	mov	r1, r9
 800696c:	eb43 0501 	adc.w	r5, r3, r1
 8006970:	f04f 0200 	mov.w	r2, #0
 8006974:	f04f 0300 	mov.w	r3, #0
 8006978:	00eb      	lsls	r3, r5, #3
 800697a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800697e:	00e2      	lsls	r2, r4, #3
 8006980:	4614      	mov	r4, r2
 8006982:	461d      	mov	r5, r3
 8006984:	4643      	mov	r3, r8
 8006986:	18e3      	adds	r3, r4, r3
 8006988:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800698c:	464b      	mov	r3, r9
 800698e:	eb45 0303 	adc.w	r3, r5, r3
 8006992:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80069a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80069a6:	f04f 0200 	mov.w	r2, #0
 80069aa:	f04f 0300 	mov.w	r3, #0
 80069ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80069b2:	4629      	mov	r1, r5
 80069b4:	008b      	lsls	r3, r1, #2
 80069b6:	4621      	mov	r1, r4
 80069b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069bc:	4621      	mov	r1, r4
 80069be:	008a      	lsls	r2, r1, #2
 80069c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80069c4:	f7f9 fc1a 	bl	80001fc <__aeabi_uldivmod>
 80069c8:	4602      	mov	r2, r0
 80069ca:	460b      	mov	r3, r1
 80069cc:	4b60      	ldr	r3, [pc, #384]	; (8006b50 <UART_SetConfig+0x4e4>)
 80069ce:	fba3 2302 	umull	r2, r3, r3, r2
 80069d2:	095b      	lsrs	r3, r3, #5
 80069d4:	011c      	lsls	r4, r3, #4
 80069d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069da:	2200      	movs	r2, #0
 80069dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80069e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80069e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80069e8:	4642      	mov	r2, r8
 80069ea:	464b      	mov	r3, r9
 80069ec:	1891      	adds	r1, r2, r2
 80069ee:	61b9      	str	r1, [r7, #24]
 80069f0:	415b      	adcs	r3, r3
 80069f2:	61fb      	str	r3, [r7, #28]
 80069f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069f8:	4641      	mov	r1, r8
 80069fa:	1851      	adds	r1, r2, r1
 80069fc:	6139      	str	r1, [r7, #16]
 80069fe:	4649      	mov	r1, r9
 8006a00:	414b      	adcs	r3, r1
 8006a02:	617b      	str	r3, [r7, #20]
 8006a04:	f04f 0200 	mov.w	r2, #0
 8006a08:	f04f 0300 	mov.w	r3, #0
 8006a0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a10:	4659      	mov	r1, fp
 8006a12:	00cb      	lsls	r3, r1, #3
 8006a14:	4651      	mov	r1, sl
 8006a16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a1a:	4651      	mov	r1, sl
 8006a1c:	00ca      	lsls	r2, r1, #3
 8006a1e:	4610      	mov	r0, r2
 8006a20:	4619      	mov	r1, r3
 8006a22:	4603      	mov	r3, r0
 8006a24:	4642      	mov	r2, r8
 8006a26:	189b      	adds	r3, r3, r2
 8006a28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a2c:	464b      	mov	r3, r9
 8006a2e:	460a      	mov	r2, r1
 8006a30:	eb42 0303 	adc.w	r3, r2, r3
 8006a34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a42:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006a44:	f04f 0200 	mov.w	r2, #0
 8006a48:	f04f 0300 	mov.w	r3, #0
 8006a4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006a50:	4649      	mov	r1, r9
 8006a52:	008b      	lsls	r3, r1, #2
 8006a54:	4641      	mov	r1, r8
 8006a56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a5a:	4641      	mov	r1, r8
 8006a5c:	008a      	lsls	r2, r1, #2
 8006a5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006a62:	f7f9 fbcb 	bl	80001fc <__aeabi_uldivmod>
 8006a66:	4602      	mov	r2, r0
 8006a68:	460b      	mov	r3, r1
 8006a6a:	4611      	mov	r1, r2
 8006a6c:	4b38      	ldr	r3, [pc, #224]	; (8006b50 <UART_SetConfig+0x4e4>)
 8006a6e:	fba3 2301 	umull	r2, r3, r3, r1
 8006a72:	095b      	lsrs	r3, r3, #5
 8006a74:	2264      	movs	r2, #100	; 0x64
 8006a76:	fb02 f303 	mul.w	r3, r2, r3
 8006a7a:	1acb      	subs	r3, r1, r3
 8006a7c:	011b      	lsls	r3, r3, #4
 8006a7e:	3332      	adds	r3, #50	; 0x32
 8006a80:	4a33      	ldr	r2, [pc, #204]	; (8006b50 <UART_SetConfig+0x4e4>)
 8006a82:	fba2 2303 	umull	r2, r3, r2, r3
 8006a86:	095b      	lsrs	r3, r3, #5
 8006a88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a8c:	441c      	add	r4, r3
 8006a8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a92:	2200      	movs	r2, #0
 8006a94:	673b      	str	r3, [r7, #112]	; 0x70
 8006a96:	677a      	str	r2, [r7, #116]	; 0x74
 8006a98:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006a9c:	4642      	mov	r2, r8
 8006a9e:	464b      	mov	r3, r9
 8006aa0:	1891      	adds	r1, r2, r2
 8006aa2:	60b9      	str	r1, [r7, #8]
 8006aa4:	415b      	adcs	r3, r3
 8006aa6:	60fb      	str	r3, [r7, #12]
 8006aa8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006aac:	4641      	mov	r1, r8
 8006aae:	1851      	adds	r1, r2, r1
 8006ab0:	6039      	str	r1, [r7, #0]
 8006ab2:	4649      	mov	r1, r9
 8006ab4:	414b      	adcs	r3, r1
 8006ab6:	607b      	str	r3, [r7, #4]
 8006ab8:	f04f 0200 	mov.w	r2, #0
 8006abc:	f04f 0300 	mov.w	r3, #0
 8006ac0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006ac4:	4659      	mov	r1, fp
 8006ac6:	00cb      	lsls	r3, r1, #3
 8006ac8:	4651      	mov	r1, sl
 8006aca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ace:	4651      	mov	r1, sl
 8006ad0:	00ca      	lsls	r2, r1, #3
 8006ad2:	4610      	mov	r0, r2
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	4642      	mov	r2, r8
 8006ada:	189b      	adds	r3, r3, r2
 8006adc:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ade:	464b      	mov	r3, r9
 8006ae0:	460a      	mov	r2, r1
 8006ae2:	eb42 0303 	adc.w	r3, r2, r3
 8006ae6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	663b      	str	r3, [r7, #96]	; 0x60
 8006af2:	667a      	str	r2, [r7, #100]	; 0x64
 8006af4:	f04f 0200 	mov.w	r2, #0
 8006af8:	f04f 0300 	mov.w	r3, #0
 8006afc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006b00:	4649      	mov	r1, r9
 8006b02:	008b      	lsls	r3, r1, #2
 8006b04:	4641      	mov	r1, r8
 8006b06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b0a:	4641      	mov	r1, r8
 8006b0c:	008a      	lsls	r2, r1, #2
 8006b0e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006b12:	f7f9 fb73 	bl	80001fc <__aeabi_uldivmod>
 8006b16:	4602      	mov	r2, r0
 8006b18:	460b      	mov	r3, r1
 8006b1a:	4b0d      	ldr	r3, [pc, #52]	; (8006b50 <UART_SetConfig+0x4e4>)
 8006b1c:	fba3 1302 	umull	r1, r3, r3, r2
 8006b20:	095b      	lsrs	r3, r3, #5
 8006b22:	2164      	movs	r1, #100	; 0x64
 8006b24:	fb01 f303 	mul.w	r3, r1, r3
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	011b      	lsls	r3, r3, #4
 8006b2c:	3332      	adds	r3, #50	; 0x32
 8006b2e:	4a08      	ldr	r2, [pc, #32]	; (8006b50 <UART_SetConfig+0x4e4>)
 8006b30:	fba2 2303 	umull	r2, r3, r2, r3
 8006b34:	095b      	lsrs	r3, r3, #5
 8006b36:	f003 020f 	and.w	r2, r3, #15
 8006b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4422      	add	r2, r4
 8006b42:	609a      	str	r2, [r3, #8]
}
 8006b44:	bf00      	nop
 8006b46:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b50:	51eb851f 	.word	0x51eb851f

08006b54 <memset>:
 8006b54:	4402      	add	r2, r0
 8006b56:	4603      	mov	r3, r0
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d100      	bne.n	8006b5e <memset+0xa>
 8006b5c:	4770      	bx	lr
 8006b5e:	f803 1b01 	strb.w	r1, [r3], #1
 8006b62:	e7f9      	b.n	8006b58 <memset+0x4>

08006b64 <__libc_init_array>:
 8006b64:	b570      	push	{r4, r5, r6, lr}
 8006b66:	4d0d      	ldr	r5, [pc, #52]	; (8006b9c <__libc_init_array+0x38>)
 8006b68:	4c0d      	ldr	r4, [pc, #52]	; (8006ba0 <__libc_init_array+0x3c>)
 8006b6a:	1b64      	subs	r4, r4, r5
 8006b6c:	10a4      	asrs	r4, r4, #2
 8006b6e:	2600      	movs	r6, #0
 8006b70:	42a6      	cmp	r6, r4
 8006b72:	d109      	bne.n	8006b88 <__libc_init_array+0x24>
 8006b74:	4d0b      	ldr	r5, [pc, #44]	; (8006ba4 <__libc_init_array+0x40>)
 8006b76:	4c0c      	ldr	r4, [pc, #48]	; (8006ba8 <__libc_init_array+0x44>)
 8006b78:	f000 f818 	bl	8006bac <_init>
 8006b7c:	1b64      	subs	r4, r4, r5
 8006b7e:	10a4      	asrs	r4, r4, #2
 8006b80:	2600      	movs	r6, #0
 8006b82:	42a6      	cmp	r6, r4
 8006b84:	d105      	bne.n	8006b92 <__libc_init_array+0x2e>
 8006b86:	bd70      	pop	{r4, r5, r6, pc}
 8006b88:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b8c:	4798      	blx	r3
 8006b8e:	3601      	adds	r6, #1
 8006b90:	e7ee      	b.n	8006b70 <__libc_init_array+0xc>
 8006b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b96:	4798      	blx	r3
 8006b98:	3601      	adds	r6, #1
 8006b9a:	e7f2      	b.n	8006b82 <__libc_init_array+0x1e>
 8006b9c:	08006c54 	.word	0x08006c54
 8006ba0:	08006c54 	.word	0x08006c54
 8006ba4:	08006c54 	.word	0x08006c54
 8006ba8:	08006c58 	.word	0x08006c58

08006bac <_init>:
 8006bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bae:	bf00      	nop
 8006bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bb2:	bc08      	pop	{r3}
 8006bb4:	469e      	mov	lr, r3
 8006bb6:	4770      	bx	lr

08006bb8 <_fini>:
 8006bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bba:	bf00      	nop
 8006bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bbe:	bc08      	pop	{r3}
 8006bc0:	469e      	mov	lr, r3
 8006bc2:	4770      	bx	lr
