
AuroraV_Payload_F439.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f24  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080070d0  080070d0  000170d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007188  08007188  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08007188  08007188  00017188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007190  08007190  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007190  08007190  00017190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007194  08007194  00017194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08007198  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
 10 .bss          00000464  20000024  20000024  00020024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000488  20000488  00020024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019b0a  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000389c  00000000  00000000  00039ba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000014d0  00000000  00000000  0003d440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000103b  00000000  00000000  0003e910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000274d5  00000000  00000000  0003f94b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001b5e1  00000000  00000000  00066e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e7127  00000000  00000000  00082401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005690  00000000  00000000  00169528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0016ebb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000024 	.word	0x20000024
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080070b8 	.word	0x080070b8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000028 	.word	0x20000028
 80001e8:	080070b8 	.word	0x080070b8

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <init_accel>:
uint8_t OUT_Y_L 				= 0x2A;
uint8_t OUT_Y_H 				= 0x2B;
uint8_t OUT_Z_L 				= 0x2C;
uint8_t OUT_Z_H 				= 0x2D;

HAL_StatusTypeDef init_accel(I2C_HandleTypeDef* hi2c) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;

	// Write Control Register 1
	ret = i2c_write_reg(hi2c, H3LIS331DL_ADDR, &CTRL_REG1, MASK_1kHz);
 8000500:	2118      	movs	r1, #24
 8000502:	233f      	movs	r3, #63	; 0x3f
 8000504:	4a09      	ldr	r2, [pc, #36]	; (800052c <init_accel+0x34>)
 8000506:	6878      	ldr	r0, [r7, #4]
 8000508:	f000 fbb1 	bl	8000c6e <i2c_write_reg>
 800050c:	4603      	mov	r3, r0
 800050e:	73fb      	strb	r3, [r7, #15]

	// Write Control Register 4
	ret = i2c_write_reg(hi2c, H3LIS331DL_ADDR, &CTRL_REG4, MASK_100G);
 8000510:	2118      	movs	r1, #24
 8000512:	2300      	movs	r3, #0
 8000514:	4a06      	ldr	r2, [pc, #24]	; (8000530 <init_accel+0x38>)
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	f000 fba9 	bl	8000c6e <i2c_write_reg>
 800051c:	4603      	mov	r3, r0
 800051e:	73fb      	strb	r3, [r7, #15]
	return ret;
 8000520:	7bfb      	ldrb	r3, [r7, #15]
}
 8000522:	4618      	mov	r0, r3
 8000524:	3710      	adds	r7, #16
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	20000000 	.word	0x20000000
 8000530:	20000001 	.word	0x20000001

08000534 <readAccelerometer>:

void readAccelerometer(uint8_t values[6], I2C_HandleTypeDef* hi2c) {
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af02      	add	r7, sp, #8
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
	i2c_burst_read(hi2c, H3LIS331DL_ADDR, OUT_X_L, 6, values);
 800053e:	2118      	movs	r1, #24
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <readAccelerometer+0x24>)
 8000542:	781a      	ldrb	r2, [r3, #0]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	9300      	str	r3, [sp, #0]
 8000548:	2306      	movs	r3, #6
 800054a:	6838      	ldr	r0, [r7, #0]
 800054c:	f000 fb5e 	bl	8000c0c <i2c_burst_read>
}
 8000550:	bf00      	nop
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000003 	.word	0x20000003

0800055c <readAccel_whoami>:

uint8_t readAccel_whoami(I2C_HandleTypeDef* hi2c) {
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	return i2c_read_reg(hi2c, H3LIS331DL_ADDR, &WHOAMI);
 8000564:	2318      	movs	r3, #24
 8000566:	4a05      	ldr	r2, [pc, #20]	; (800057c <readAccel_whoami+0x20>)
 8000568:	4619      	mov	r1, r3
 800056a:	6878      	ldr	r0, [r7, #4]
 800056c:	f000 fb26 	bl	8000bbc <i2c_read_reg>
 8000570:	4603      	mov	r3, r0
}
 8000572:	4618      	mov	r0, r3
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000002 	.word	0x20000002

08000580 <init_bme280>:
uint8_t OUT_HUM_H 			= 0xFD;
uint8_t CALIB_ST_1			= 0x88;
uint8_t CALIB_ST_2			= 0xE1;


HAL_StatusTypeDef init_bme280(I2C_HandleTypeDef* hi2c, uint8_t bme) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	460b      	mov	r3, r1
 800058a:	70fb      	strb	r3, [r7, #3]
	uint8_t bme_addr = getBME280Config(bme).bme_addr;
 800058c:	78fb      	ldrb	r3, [r7, #3]
 800058e:	4618      	mov	r0, r3
 8000590:	f000 f8d4 	bl	800073c <getBME280Config>
 8000594:	4603      	mov	r3, r0
 8000596:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef ret;
	uint8_t control_reg = 0x00;
 8000598:	2300      	movs	r3, #0
 800059a:	73bb      	strb	r3, [r7, #14]

	// Reset the sensor
	ret =  i2c_write_reg(hi2c, bme_addr, &RST_REG, RST);
 800059c:	7bf9      	ldrb	r1, [r7, #15]
 800059e:	23b6      	movs	r3, #182	; 0xb6
 80005a0:	4a19      	ldr	r2, [pc, #100]	; (8000608 <init_bme280+0x88>)
 80005a2:	6878      	ldr	r0, [r7, #4]
 80005a4:	f000 fb63 	bl	8000c6e <i2c_write_reg>
 80005a8:	4603      	mov	r3, r0
 80005aa:	737b      	strb	r3, [r7, #13]

	// Set humidity control register
	control_reg = i2c_read_reg(hi2c, bme_addr, &CTRL_HUM_REG);
 80005ac:	7bfb      	ldrb	r3, [r7, #15]
 80005ae:	4a17      	ldr	r2, [pc, #92]	; (800060c <init_bme280+0x8c>)
 80005b0:	4619      	mov	r1, r3
 80005b2:	6878      	ldr	r0, [r7, #4]
 80005b4:	f000 fb02 	bl	8000bbc <i2c_read_reg>
 80005b8:	4603      	mov	r3, r0
 80005ba:	73bb      	strb	r3, [r7, #14]
	control_reg = control_reg & 0xF8;
 80005bc:	7bbb      	ldrb	r3, [r7, #14]
 80005be:	f023 0307 	bic.w	r3, r3, #7
 80005c2:	73bb      	strb	r3, [r7, #14]
	control_reg = control_reg | CTRL_HUM_MSK;
 80005c4:	7bbb      	ldrb	r3, [r7, #14]
 80005c6:	f043 0301 	orr.w	r3, r3, #1
 80005ca:	73bb      	strb	r3, [r7, #14]
	ret = i2c_write_reg(hi2c, bme_addr, &CTRL_HUM_REG, control_reg);
 80005cc:	7bbb      	ldrb	r3, [r7, #14]
 80005ce:	7bf9      	ldrb	r1, [r7, #15]
 80005d0:	4a0e      	ldr	r2, [pc, #56]	; (800060c <init_bme280+0x8c>)
 80005d2:	6878      	ldr	r0, [r7, #4]
 80005d4:	f000 fb4b 	bl	8000c6e <i2c_write_reg>
 80005d8:	4603      	mov	r3, r0
 80005da:	737b      	strb	r3, [r7, #13]

	// Set measure control register
	ret = i2c_write_reg(hi2c, bme_addr, &CTRL_MEAS_REG, CTRL_MEAS_MSK);
 80005dc:	7bf9      	ldrb	r1, [r7, #15]
 80005de:	2327      	movs	r3, #39	; 0x27
 80005e0:	4a0b      	ldr	r2, [pc, #44]	; (8000610 <init_bme280+0x90>)
 80005e2:	6878      	ldr	r0, [r7, #4]
 80005e4:	f000 fb43 	bl	8000c6e <i2c_write_reg>
 80005e8:	4603      	mov	r3, r0
 80005ea:	737b      	strb	r3, [r7, #13]

	// Set the config register
	ret = i2c_write_reg(hi2c, bme_addr, &CONF_REG, CONF_MSK);
 80005ec:	7bf9      	ldrb	r1, [r7, #15]
 80005ee:	2300      	movs	r3, #0
 80005f0:	4a08      	ldr	r2, [pc, #32]	; (8000614 <init_bme280+0x94>)
 80005f2:	6878      	ldr	r0, [r7, #4]
 80005f4:	f000 fb3b 	bl	8000c6e <i2c_write_reg>
 80005f8:	4603      	mov	r3, r0
 80005fa:	737b      	strb	r3, [r7, #13]

	return ret;
 80005fc:	7b7b      	ldrb	r3, [r7, #13]
}
 80005fe:	4618      	mov	r0, r3
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000005 	.word	0x20000005
 800060c:	20000006 	.word	0x20000006
 8000610:	20000007 	.word	0x20000007
 8000614:	20000008 	.word	0x20000008

08000618 <readTempHumPres>:

void readTempHumPres(uint8_t values[6], I2C_HandleTypeDef* hi2c, uint8_t bme) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b08a      	sub	sp, #40	; 0x28
 800061c:	af02      	add	r7, sp, #8
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	4613      	mov	r3, r2
 8000624:	71fb      	strb	r3, [r7, #7]
	uint8_t readings[8];
	uint8_t bme_addr = getBME280Config(bme).bme_addr;
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	4618      	mov	r0, r3
 800062a:	f000 f887 	bl	800073c <getBME280Config>
 800062e:	4603      	mov	r3, r0
 8000630:	777b      	strb	r3, [r7, #29]
	i2c_burst_read(hi2c, bme_addr, OUT_PRESS_H, 8, readings);
 8000632:	4b20      	ldr	r3, [pc, #128]	; (80006b4 <readTempHumPres+0x9c>)
 8000634:	781a      	ldrb	r2, [r3, #0]
 8000636:	7f79      	ldrb	r1, [r7, #29]
 8000638:	f107 0314 	add.w	r3, r7, #20
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2308      	movs	r3, #8
 8000640:	68b8      	ldr	r0, [r7, #8]
 8000642:	f000 fae3 	bl	8000c0c <i2c_burst_read>

	// Clear the 0 values on the xlsb registers
	uint8_t j = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	77fb      	strb	r3, [r7, #31]
    for(uint8_t i = 0; i < 8; i++) {
 800064a:	2300      	movs	r3, #0
 800064c:	77bb      	strb	r3, [r7, #30]
 800064e:	e014      	b.n	800067a <readTempHumPres+0x62>
        if(i != 2 && i != 5) {  // if the index is not 2 or 5
 8000650:	7fbb      	ldrb	r3, [r7, #30]
 8000652:	2b02      	cmp	r3, #2
 8000654:	d00e      	beq.n	8000674 <readTempHumPres+0x5c>
 8000656:	7fbb      	ldrb	r3, [r7, #30]
 8000658:	2b05      	cmp	r3, #5
 800065a:	d00b      	beq.n	8000674 <readTempHumPres+0x5c>
        	values[j] = readings[i];
 800065c:	7fba      	ldrb	r2, [r7, #30]
 800065e:	7ffb      	ldrb	r3, [r7, #31]
 8000660:	68f9      	ldr	r1, [r7, #12]
 8000662:	440b      	add	r3, r1
 8000664:	3220      	adds	r2, #32
 8000666:	443a      	add	r2, r7
 8000668:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800066c:	701a      	strb	r2, [r3, #0]
            j++;
 800066e:	7ffb      	ldrb	r3, [r7, #31]
 8000670:	3301      	adds	r3, #1
 8000672:	77fb      	strb	r3, [r7, #31]
    for(uint8_t i = 0; i < 8; i++) {
 8000674:	7fbb      	ldrb	r3, [r7, #30]
 8000676:	3301      	adds	r3, #1
 8000678:	77bb      	strb	r3, [r7, #30]
 800067a:	7fbb      	ldrb	r3, [r7, #30]
 800067c:	2b07      	cmp	r3, #7
 800067e:	d9e7      	bls.n	8000650 <readTempHumPres+0x38>
        }
    }

    // Swap elements to make the array little endian
    swap(&values[0], &values[1]);
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	3301      	adds	r3, #1
 8000684:	4619      	mov	r1, r3
 8000686:	68f8      	ldr	r0, [r7, #12]
 8000688:	f000 f86f 	bl	800076a <swap>
    swap(&values[2], &values[3]);
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	1c9a      	adds	r2, r3, #2
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	3303      	adds	r3, #3
 8000694:	4619      	mov	r1, r3
 8000696:	4610      	mov	r0, r2
 8000698:	f000 f867 	bl	800076a <swap>
    swap(&values[4], &values[5]);
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	1d1a      	adds	r2, r3, #4
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	3305      	adds	r3, #5
 80006a4:	4619      	mov	r1, r3
 80006a6:	4610      	mov	r0, r2
 80006a8:	f000 f85f 	bl	800076a <swap>
}
 80006ac:	bf00      	nop
 80006ae:	3720      	adds	r7, #32
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000009 	.word	0x20000009

080006b8 <readBME280_id_reg>:

uint8_t readBME280_id_reg(I2C_HandleTypeDef* hi2c, uint8_t bme) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	460b      	mov	r3, r1
 80006c2:	70fb      	strb	r3, [r7, #3]
	uint8_t bme_addr = getBME280Config(bme).bme_addr;
 80006c4:	78fb      	ldrb	r3, [r7, #3]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 f838 	bl	800073c <getBME280Config>
 80006cc:	4603      	mov	r3, r0
 80006ce:	73fb      	strb	r3, [r7, #15]
	return i2c_read_reg(hi2c, bme_addr, &ID_REG);
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
 80006d2:	4a05      	ldr	r2, [pc, #20]	; (80006e8 <readBME280_id_reg+0x30>)
 80006d4:	4619      	mov	r1, r3
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f000 fa70 	bl	8000bbc <i2c_read_reg>
 80006dc:	4603      	mov	r3, r0
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3710      	adds	r7, #16
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000004 	.word	0x20000004

080006ec <readBME280_calib>:

void readBME280_calib(I2C_HandleTypeDef* hi2c, uint8_t bme, uint8_t calibration1[CALIB_CNT_1], uint8_t calibration2[CALIB_CNT_2]) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b088      	sub	sp, #32
 80006f0:	af02      	add	r7, sp, #8
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	607a      	str	r2, [r7, #4]
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	460b      	mov	r3, r1
 80006fa:	72fb      	strb	r3, [r7, #11]
	uint8_t bme_addr = getBME280Config(bme).bme_addr;
 80006fc:	7afb      	ldrb	r3, [r7, #11]
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 f81c 	bl	800073c <getBME280Config>
 8000704:	4603      	mov	r3, r0
 8000706:	75fb      	strb	r3, [r7, #23]
	i2c_burst_read(hi2c, bme_addr, CALIB_ST_1, CALIB_CNT_1, calibration1);
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <readBME280_calib+0x48>)
 800070a:	781a      	ldrb	r2, [r3, #0]
 800070c:	7df9      	ldrb	r1, [r7, #23]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	2319      	movs	r3, #25
 8000714:	68f8      	ldr	r0, [r7, #12]
 8000716:	f000 fa79 	bl	8000c0c <i2c_burst_read>
	i2c_burst_read(hi2c, bme_addr, CALIB_ST_2, CALIB_CNT_2, calibration2);
 800071a:	4b07      	ldr	r3, [pc, #28]	; (8000738 <readBME280_calib+0x4c>)
 800071c:	781a      	ldrb	r2, [r3, #0]
 800071e:	7df9      	ldrb	r1, [r7, #23]
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	2307      	movs	r3, #7
 8000726:	68f8      	ldr	r0, [r7, #12]
 8000728:	f000 fa70 	bl	8000c0c <i2c_burst_read>
}
 800072c:	bf00      	nop
 800072e:	3718      	adds	r7, #24
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	2000000a 	.word	0x2000000a
 8000738:	2000000b 	.word	0x2000000b

0800073c <getBME280Config>:

BME280_Config getBME280Config(uint8_t bme) {
 800073c:	b480      	push	{r7}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]
	BME280_Config config;
	if (bme == 0) {
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d102      	bne.n	8000752 <getBME280Config+0x16>
		config.bme_addr = BME280_ADDR_0;
 800074c:	2376      	movs	r3, #118	; 0x76
 800074e:	733b      	strb	r3, [r7, #12]
 8000750:	e004      	b.n	800075c <getBME280Config+0x20>
	} else if (bme == 1) {
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	2b01      	cmp	r3, #1
 8000756:	d101      	bne.n	800075c <getBME280Config+0x20>
		config.bme_addr = BME280_ADDR_1;
 8000758:	2377      	movs	r3, #119	; 0x77
 800075a:	733b      	strb	r3, [r7, #12]
	}
    return config;
 800075c:	7b3b      	ldrb	r3, [r7, #12]
}
 800075e:	4618      	mov	r0, r3
 8000760:	3714      	adds	r7, #20
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr

0800076a <swap>:

void swap(uint8_t* a, uint8_t* b) {
 800076a:	b480      	push	{r7}
 800076c:	b085      	sub	sp, #20
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
 8000772:	6039      	str	r1, [r7, #0]
    uint8_t temp = *a;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	73fb      	strb	r3, [r7, #15]
    *a = *b;
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	781a      	ldrb	r2, [r3, #0]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	701a      	strb	r2, [r3, #0]
    *b = temp;
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	7bfa      	ldrb	r2, [r7, #15]
 8000786:	701a      	strb	r2, [r3, #0]
}
 8000788:	bf00      	nop
 800078a:	3714      	adds	r7, #20
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr

08000794 <getGPIOConfig>:
uint8_t FLASH_32K_ERS	= 0x52;			// Erase all memory within a 32K-byte block
uint8_t FLASH_ERASE		= 0xC7;			// Erase the entire chip
uint8_t RST_EN			= 0x66;			// Reset enable
uint8_t DEV_RST			= 0x99;			// Reset device

GPIO_Config getGPIOConfig(uint8_t flashNo) {
 8000794:	b480      	push	{r7}
 8000796:	b085      	sub	sp, #20
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	460b      	mov	r3, r1
 800079e:	70fb      	strb	r3, [r7, #3]
    GPIO_Config config;

    if (flashNo == 0) {
 80007a0:	78fb      	ldrb	r3, [r7, #3]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d104      	bne.n	80007b0 <getGPIOConfig+0x1c>
        config.GPIOx = GPIOD;
 80007a6:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <getGPIOConfig+0x48>)
 80007a8:	60bb      	str	r3, [r7, #8]
        config.GPIO_Pin_CS = GPIO_PIN_2;
 80007aa:	2304      	movs	r3, #4
 80007ac:	81bb      	strh	r3, [r7, #12]
 80007ae:	e007      	b.n	80007c0 <getGPIOConfig+0x2c>
    } else if (flashNo == 1) {
 80007b0:	78fb      	ldrb	r3, [r7, #3]
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d104      	bne.n	80007c0 <getGPIOConfig+0x2c>
        config.GPIOx = GPIOB;
 80007b6:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <getGPIOConfig+0x4c>)
 80007b8:	60bb      	str	r3, [r7, #8]
        config.GPIO_Pin_CS = GPIO_PIN_12;
 80007ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007be:	81bb      	strh	r3, [r7, #12]
    }

    return config;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	461a      	mov	r2, r3
 80007c4:	f107 0308 	add.w	r3, r7, #8
 80007c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007cc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	3714      	adds	r7, #20
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	40020c00 	.word	0x40020c00
 80007e0:	40020400 	.word	0x40020400

080007e4 <erase_chip_spi>:
 *      Author: aidencontini
 */

#include "data_output_spi.h"

HAL_StatusTypeDef erase_chip_spi(SPI_HandleTypeDef *hspi, uint8_t flashNo) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	460b      	mov	r3, r1
 80007ee:	70fb      	strb	r3, [r7, #3]
	GPIO_Config config = getGPIOConfig(flashNo);
 80007f0:	f107 030c 	add.w	r3, r7, #12
 80007f4:	78fa      	ldrb	r2, [r7, #3]
 80007f6:	4611      	mov	r1, r2
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ffcb 	bl	8000794 <getGPIOConfig>

	uint8_t busy = 0x01;
 80007fe:	2301      	movs	r3, #1
 8000800:	75fb      	strb	r3, [r7, #23]
	while(busy) {
 8000802:	e008      	b.n	8000816 <erase_chip_spi+0x32>
		busy = (check_status_register(hspi, flashNo) & 0x01);	// Check if there is a write in progress
 8000804:	78fb      	ldrb	r3, [r7, #3]
 8000806:	4619      	mov	r1, r3
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f000 f8ad 	bl	8000968 <check_status_register>
 800080e:	4603      	mov	r3, r0
 8000810:	f003 0301 	and.w	r3, r3, #1
 8000814:	75fb      	strb	r3, [r7, #23]
	while(busy) {
 8000816:	7dfb      	ldrb	r3, [r7, #23]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d1f3      	bne.n	8000804 <erase_chip_spi+0x20>
	}

	write_enable_spi(hspi, flashNo);
 800081c:	78fb      	ldrb	r3, [r7, #3]
 800081e:	4619      	mov	r1, r3
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f000 f81d 	bl	8000860 <write_enable_spi>
	perform_operation(&FLASH_ERASE, hspi, config.GPIOx, config.GPIO_Pin_CS);
 8000826:	68fa      	ldr	r2, [r7, #12]
 8000828:	8a3b      	ldrh	r3, [r7, #16]
 800082a:	6879      	ldr	r1, [r7, #4]
 800082c:	480b      	ldr	r0, [pc, #44]	; (800085c <erase_chip_spi+0x78>)
 800082e:	f001 f906 	bl	8001a3e <perform_operation>

	busy = 0x01;
 8000832:	2301      	movs	r3, #1
 8000834:	75fb      	strb	r3, [r7, #23]
	while(busy) {
 8000836:	e008      	b.n	800084a <erase_chip_spi+0x66>
		busy = (check_status_register(hspi, flashNo) & 0x01);	// Check if there is a write in progress
 8000838:	78fb      	ldrb	r3, [r7, #3]
 800083a:	4619      	mov	r1, r3
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f000 f893 	bl	8000968 <check_status_register>
 8000842:	4603      	mov	r3, r0
 8000844:	f003 0301 	and.w	r3, r3, #1
 8000848:	75fb      	strb	r3, [r7, #23]
	while(busy) {
 800084a:	7dfb      	ldrb	r3, [r7, #23]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d1f3      	bne.n	8000838 <erase_chip_spi+0x54>
	}

	return HAL_OK;
 8000850:	2300      	movs	r3, #0
}
 8000852:	4618      	mov	r0, r3
 8000854:	3718      	adds	r7, #24
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000011 	.word	0x20000011

08000860 <write_enable_spi>:
	}

	return HAL_OK;
}

void write_enable_spi(SPI_HandleTypeDef *hspi, uint8_t flashNo) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	460b      	mov	r3, r1
 800086a:	70fb      	strb	r3, [r7, #3]
	GPIO_Config config = getGPIOConfig(flashNo);
 800086c:	f107 0308 	add.w	r3, r7, #8
 8000870:	78fa      	ldrb	r2, [r7, #3]
 8000872:	4611      	mov	r1, r2
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff ff8d 	bl	8000794 <getGPIOConfig>
	perform_operation(&FLASH_WREN, hspi, config.GPIOx, config.GPIO_Pin_CS);
 800087a:	68ba      	ldr	r2, [r7, #8]
 800087c:	89bb      	ldrh	r3, [r7, #12]
 800087e:	6879      	ldr	r1, [r7, #4]
 8000880:	4803      	ldr	r0, [pc, #12]	; (8000890 <write_enable_spi+0x30>)
 8000882:	f001 f8dc 	bl	8001a3e <perform_operation>
}
 8000886:	bf00      	nop
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	2000000c 	.word	0x2000000c

08000894 <software_reset>:
void write_disable_spi(SPI_HandleTypeDef *hspi, uint8_t flashNo) {
	GPIO_Config config = getGPIOConfig(flashNo);
	perform_operation(&FLASH_WRDIS, hspi, config.GPIOx, config.GPIO_Pin_CS);
}

void software_reset(SPI_HandleTypeDef *hspi, uint8_t flashNo) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	460b      	mov	r3, r1
 800089e:	70fb      	strb	r3, [r7, #3]
	GPIO_Config config = getGPIOConfig(flashNo);
 80008a0:	f107 030c 	add.w	r3, r7, #12
 80008a4:	78fa      	ldrb	r2, [r7, #3]
 80008a6:	4611      	mov	r1, r2
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff ff73 	bl	8000794 <getGPIOConfig>
	uint8_t busy = 0x01;
 80008ae:	2301      	movs	r3, #1
 80008b0:	75fb      	strb	r3, [r7, #23]
	while(busy) {
 80008b2:	e008      	b.n	80008c6 <software_reset+0x32>
		busy = (check_status_register(hspi, flashNo) & 0x01);	// Check if there is a write in progress
 80008b4:	78fb      	ldrb	r3, [r7, #3]
 80008b6:	4619      	mov	r1, r3
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f000 f855 	bl	8000968 <check_status_register>
 80008be:	4603      	mov	r3, r0
 80008c0:	f003 0301 	and.w	r3, r3, #1
 80008c4:	75fb      	strb	r3, [r7, #23]
	while(busy) {
 80008c6:	7dfb      	ldrb	r3, [r7, #23]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d1f3      	bne.n	80008b4 <software_reset+0x20>
	}

	perform_operation(&RST_EN, hspi, config.GPIOx, config.GPIO_Pin_CS);
 80008cc:	68fa      	ldr	r2, [r7, #12]
 80008ce:	8a3b      	ldrh	r3, [r7, #16]
 80008d0:	6879      	ldr	r1, [r7, #4]
 80008d2:	4808      	ldr	r0, [pc, #32]	; (80008f4 <software_reset+0x60>)
 80008d4:	f001 f8b3 	bl	8001a3e <perform_operation>
	perform_operation(&DEV_RST, hspi, config.GPIOx, config.GPIO_Pin_CS);
 80008d8:	68fa      	ldr	r2, [r7, #12]
 80008da:	8a3b      	ldrh	r3, [r7, #16]
 80008dc:	6879      	ldr	r1, [r7, #4]
 80008de:	4806      	ldr	r0, [pc, #24]	; (80008f8 <software_reset+0x64>)
 80008e0:	f001 f8ad 	bl	8001a3e <perform_operation>

	HAL_Delay(1);
 80008e4:	2001      	movs	r0, #1
 80008e6:	f001 fd2f 	bl	8002348 <HAL_Delay>
}
 80008ea:	bf00      	nop
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000012 	.word	0x20000012
 80008f8:	20000013 	.word	0x20000013

080008fc <write_data_spi>:

uint8_t write_data_spi(uint8_t page[PAGE_SIZE], SPI_HandleTypeDef *hspi, uint32_t addr, uint8_t flashNo) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08c      	sub	sp, #48	; 0x30
 8000900:	af04      	add	r7, sp, #16
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	60b9      	str	r1, [r7, #8]
 8000906:	607a      	str	r2, [r7, #4]
 8000908:	70fb      	strb	r3, [r7, #3]
	GPIO_Config config = getGPIOConfig(flashNo);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	78fa      	ldrb	r2, [r7, #3]
 8000910:	4611      	mov	r1, r2
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff ff3e 	bl	8000794 <getGPIOConfig>

	uint8_t busy = 0x01;
 8000918:	2301      	movs	r3, #1
 800091a:	77fb      	strb	r3, [r7, #31]
	while(busy) {
 800091c:	e008      	b.n	8000930 <write_data_spi+0x34>
		busy = (check_status_register(hspi, flashNo) & 0x01);	// Check if there is a write in progress
 800091e:	78fb      	ldrb	r3, [r7, #3]
 8000920:	4619      	mov	r1, r3
 8000922:	68b8      	ldr	r0, [r7, #8]
 8000924:	f000 f820 	bl	8000968 <check_status_register>
 8000928:	4603      	mov	r3, r0
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	77fb      	strb	r3, [r7, #31]
	while(busy) {
 8000930:	7ffb      	ldrb	r3, [r7, #31]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d1f3      	bne.n	800091e <write_data_spi+0x22>
	}

	// Send the write enable signal
	write_enable_spi(hspi, flashNo);
 8000936:	78fb      	ldrb	r3, [r7, #3]
 8000938:	4619      	mov	r1, r3
 800093a:	68b8      	ldr	r0, [r7, #8]
 800093c:	f7ff ff90 	bl	8000860 <write_enable_spi>
	spi_write_data(&FLASH_PGWR, PAGE_SIZE, page, hspi, addr, config.GPIOx, config.GPIO_Pin_CS);
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	8b3a      	ldrh	r2, [r7, #24]
 8000944:	9202      	str	r2, [sp, #8]
 8000946:	9301      	str	r3, [sp, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	9300      	str	r3, [sp, #0]
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	68fa      	ldr	r2, [r7, #12]
 8000950:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000954:	4803      	ldr	r0, [pc, #12]	; (8000964 <write_data_spi+0x68>)
 8000956:	f001 f8d3 	bl	8001b00 <spi_write_data>

	return EXIT_SUCCESS;
 800095a:	2300      	movs	r3, #0
}
 800095c:	4618      	mov	r0, r3
 800095e:	3720      	adds	r7, #32
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	2000000d 	.word	0x2000000d

08000968 <check_status_register>:
 *      Author: aidencontini
 */

#include "data_read_spi.h"

uint8_t check_status_register(SPI_HandleTypeDef *hspi, uint8_t flashNo) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	460b      	mov	r3, r1
 8000972:	70fb      	strb	r3, [r7, #3]
	GPIO_Config config = getGPIOConfig(flashNo);
 8000974:	f107 0308 	add.w	r3, r7, #8
 8000978:	78fa      	ldrb	r2, [r7, #3]
 800097a:	4611      	mov	r1, r2
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff ff09 	bl	8000794 <getGPIOConfig>
	return spi_sendOp_readByte(&FLASH_READSR1, hspi, config.GPIOx, config.GPIO_Pin_CS);
 8000982:	68ba      	ldr	r2, [r7, #8]
 8000984:	89bb      	ldrh	r3, [r7, #12]
 8000986:	6879      	ldr	r1, [r7, #4]
 8000988:	4803      	ldr	r0, [pc, #12]	; (8000998 <check_status_register+0x30>)
 800098a:	f001 f831 	bl	80019f0 <spi_sendOp_readByte>
 800098e:	4603      	mov	r3, r0
}
 8000990:	4618      	mov	r0, r3
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	2000000e 	.word	0x2000000e

0800099c <find_next_blank_page>:

uint32_t find_next_blank_page(SPI_HandleTypeDef *hspi, GPIO_PinState *end_of_flash_ptr, uint8_t flashNo) {
 800099c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80009a0:	b093      	sub	sp, #76	; 0x4c
 80009a2:	af04      	add	r7, sp, #16
 80009a4:	60f8      	str	r0, [r7, #12]
 80009a6:	60b9      	str	r1, [r7, #8]
 80009a8:	4613      	mov	r3, r2
 80009aa:	71fb      	strb	r3, [r7, #7]
 80009ac:	466b      	mov	r3, sp
 80009ae:	461e      	mov	r6, r3
	uint8_t firstBytes = 4;
 80009b0:	2304      	movs	r3, #4
 80009b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	GPIO_Config config = getGPIOConfig(flashNo);
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	79fa      	ldrb	r2, [r7, #7]
 80009bc:	4611      	mov	r1, r2
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fee8 	bl	8000794 <getGPIOConfig>

	uint8_t page_start[firstBytes];
 80009c4:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80009c8:	460b      	mov	r3, r1
 80009ca:	3b01      	subs	r3, #1
 80009cc:	623b      	str	r3, [r7, #32]
 80009ce:	b2cb      	uxtb	r3, r1
 80009d0:	2200      	movs	r2, #0
 80009d2:	4698      	mov	r8, r3
 80009d4:	4691      	mov	r9, r2
 80009d6:	f04f 0200 	mov.w	r2, #0
 80009da:	f04f 0300 	mov.w	r3, #0
 80009de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80009e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80009e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80009ea:	b2cb      	uxtb	r3, r1
 80009ec:	2200      	movs	r2, #0
 80009ee:	461c      	mov	r4, r3
 80009f0:	4615      	mov	r5, r2
 80009f2:	f04f 0200 	mov.w	r2, #0
 80009f6:	f04f 0300 	mov.w	r3, #0
 80009fa:	00eb      	lsls	r3, r5, #3
 80009fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000a00:	00e2      	lsls	r2, r4, #3
 8000a02:	460b      	mov	r3, r1
 8000a04:	3307      	adds	r3, #7
 8000a06:	08db      	lsrs	r3, r3, #3
 8000a08:	00db      	lsls	r3, r3, #3
 8000a0a:	ebad 0d03 	sub.w	sp, sp, r3
 8000a0e:	ab04      	add	r3, sp, #16
 8000a10:	3300      	adds	r3, #0
 8000a12:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < firstBytes; i++) {
 8000a14:	2300      	movs	r3, #0
 8000a16:	637b      	str	r3, [r7, #52]	; 0x34
 8000a18:	e007      	b.n	8000a2a <find_next_blank_page+0x8e>
		page_start[i] = 0;
 8000a1a:	69fa      	ldr	r2, [r7, #28]
 8000a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a1e:	4413      	add	r3, r2
 8000a20:	2200      	movs	r2, #0
 8000a22:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < firstBytes; i++) {
 8000a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a26:	3301      	adds	r3, #1
 8000a28:	637b      	str	r3, [r7, #52]	; 0x34
 8000a2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a30:	429a      	cmp	r2, r3
 8000a32:	dbf2      	blt.n	8000a1a <find_next_blank_page+0x7e>
	}

	uint32_t page_start_concat = (page_start[0] << 24) | (page_start[1] << 16) | (page_start[2] << 8) | page_start[3];
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	061a      	lsls	r2, r3, #24
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	785b      	ldrb	r3, [r3, #1]
 8000a3e:	041b      	lsls	r3, r3, #16
 8000a40:	431a      	orrs	r2, r3
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	789b      	ldrb	r3, [r3, #2]
 8000a46:	021b      	lsls	r3, r3, #8
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	69fa      	ldr	r2, [r7, #28]
 8000a4c:	78d2      	ldrb	r2, [r2, #3]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t temp = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t page_address = temp;
 8000a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a58:	62bb      	str	r3, [r7, #40]	; 0x28

	while ((page_start_concat != 0xFFFFFFFF) || (temp == NUM_OF_PAGES)) {
 8000a5a:	e034      	b.n	8000ac6 <find_next_blank_page+0x12a>
		page_address = temp;
 8000a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a5e:	62bb      	str	r3, [r7, #40]	; 0x28

		uint8_t busy = 0x01;
 8000a60:	2301      	movs	r3, #1
 8000a62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while(busy) {
 8000a66:	e009      	b.n	8000a7c <find_next_blank_page+0xe0>
			busy = (check_status_register(hspi, flashNo) & 0x01);	// Check if there is a write in progress
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	68f8      	ldr	r0, [r7, #12]
 8000a6e:	f7ff ff7b 	bl	8000968 <check_status_register>
 8000a72:	4603      	mov	r3, r0
 8000a74:	f003 0301 	and.w	r3, r3, #1
 8000a78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while(busy) {
 8000a7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d1f1      	bne.n	8000a68 <find_next_blank_page+0xcc>
		}

		spi_read_data(&FLASH_READEN, firstBytes, page_start, hspi, page_address, config.GPIOx, config.GPIO_Pin_CS);
 8000a84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a88:	b299      	uxth	r1, r3
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	8b3a      	ldrh	r2, [r7, #24]
 8000a8e:	9202      	str	r2, [sp, #8]
 8000a90:	9301      	str	r3, [sp, #4]
 8000a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a94:	9300      	str	r3, [sp, #0]
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	69fa      	ldr	r2, [r7, #28]
 8000a9a:	4816      	ldr	r0, [pc, #88]	; (8000af4 <find_next_blank_page+0x158>)
 8000a9c:	f000 ffec 	bl	8001a78 <spi_read_data>

		page_start_concat = (page_start[0] << 24) | (page_start[1] << 16) | (page_start[2] << 8) | page_start[3];
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	061a      	lsls	r2, r3, #24
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	785b      	ldrb	r3, [r3, #1]
 8000aaa:	041b      	lsls	r3, r3, #16
 8000aac:	431a      	orrs	r2, r3
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	789b      	ldrb	r3, [r3, #2]
 8000ab2:	021b      	lsls	r3, r3, #8
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	69fa      	ldr	r2, [r7, #28]
 8000ab8:	78d2      	ldrb	r2, [r2, #3]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	633b      	str	r3, [r7, #48]	; 0x30
		temp += PAGE_SIZE;
 8000abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ac0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
	while ((page_start_concat != 0xFFFFFFFF) || (temp == NUM_OF_PAGES)) {
 8000ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000acc:	d1c6      	bne.n	8000a5c <find_next_blank_page+0xc0>
 8000ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ad4:	d0c2      	beq.n	8000a5c <find_next_blank_page+0xc0>
	}

	if (page_address == (NUM_OF_PAGES * PAGE_SIZE)) {
 8000ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ad8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000adc:	d102      	bne.n	8000ae4 <find_next_blank_page+0x148>
		*end_of_flash_ptr = GPIO_PIN_RESET;
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	701a      	strb	r2, [r3, #0]
	}
	return page_address;
 8000ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ae6:	46b5      	mov	sp, r6
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	373c      	adds	r7, #60	; 0x3c
 8000aec:	46bd      	mov	sp, r7
 8000aee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000af2:	bf00      	nop
 8000af4:	2000000f 	.word	0x2000000f

08000af8 <read_page_spi>:

void read_page_spi(uint8_t data_read[PAGE_SIZE], SPI_HandleTypeDef *hspi, uint32_t addr, uint8_t flashNo) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08c      	sub	sp, #48	; 0x30
 8000afc:	af04      	add	r7, sp, #16
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
 8000b04:	70fb      	strb	r3, [r7, #3]
	GPIO_Config config = getGPIOConfig(flashNo);
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	78fa      	ldrb	r2, [r7, #3]
 8000b0c:	4611      	mov	r1, r2
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff fe40 	bl	8000794 <getGPIOConfig>

	// Read the status register to ensure no write is currently in progress
	uint8_t busy = 0x01;
 8000b14:	2301      	movs	r3, #1
 8000b16:	77fb      	strb	r3, [r7, #31]
	while(busy) {
 8000b18:	e008      	b.n	8000b2c <read_page_spi+0x34>
		busy = (check_status_register(hspi, flashNo) & 0x01);	// Check if there is a write in progress
 8000b1a:	78fb      	ldrb	r3, [r7, #3]
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	68b8      	ldr	r0, [r7, #8]
 8000b20:	f7ff ff22 	bl	8000968 <check_status_register>
 8000b24:	4603      	mov	r3, r0
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	77fb      	strb	r3, [r7, #31]
	while(busy) {
 8000b2c:	7ffb      	ldrb	r3, [r7, #31]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d1f3      	bne.n	8000b1a <read_page_spi+0x22>
	}

	spi_read_data(&FLASH_READEN, PAGE_SIZE, data_read, hspi, addr, config.GPIOx, config.GPIO_Pin_CS);
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	8b3a      	ldrh	r2, [r7, #24]
 8000b36:	9202      	str	r2, [sp, #8]
 8000b38:	9301      	str	r3, [sp, #4]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	9300      	str	r3, [sp, #0]
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	68fa      	ldr	r2, [r7, #12]
 8000b42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b46:	4803      	ldr	r0, [pc, #12]	; (8000b54 <read_page_spi+0x5c>)
 8000b48:	f000 ff96 	bl	8001a78 <spi_read_data>
}
 8000b4c:	bf00      	nop
 8000b4e:	3720      	adds	r7, #32
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	2000000f 	.word	0x2000000f

08000b58 <read_manufacturer_id>:

void read_manufacturer_id(uint8_t manu[2], SPI_HandleTypeDef *hspi, uint8_t flashNo) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08c      	sub	sp, #48	; 0x30
 8000b5c:	af04      	add	r7, sp, #16
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	4613      	mov	r3, r2
 8000b64:	71fb      	strb	r3, [r7, #7]
	GPIO_Config config = getGPIOConfig(flashNo);
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	79fa      	ldrb	r2, [r7, #7]
 8000b6c:	4611      	mov	r1, r2
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff fe10 	bl	8000794 <getGPIOConfig>

	// Read the status register to ensure no write is currently in progress
	uint8_t busy = 0x01;
 8000b74:	2301      	movs	r3, #1
 8000b76:	77fb      	strb	r3, [r7, #31]
	while(busy) {
 8000b78:	e008      	b.n	8000b8c <read_manufacturer_id+0x34>
		busy = (check_status_register(hspi, flashNo) & 0x01);	// Check if there is a write in progress
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	68b8      	ldr	r0, [r7, #8]
 8000b80:	f7ff fef2 	bl	8000968 <check_status_register>
 8000b84:	4603      	mov	r3, r0
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	77fb      	strb	r3, [r7, #31]
	while(busy) {
 8000b8c:	7ffb      	ldrb	r3, [r7, #31]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d1f3      	bne.n	8000b7a <read_manufacturer_id+0x22>
	}

	uint8_t addr = 0x00;
 8000b92:	2300      	movs	r3, #0
 8000b94:	77bb      	strb	r3, [r7, #30]

	// Read the entire contents of a page starting from the given address
	spi_read_data(&FLASH_READ_MANU, 2, manu, hspi, addr, config.GPIOx, config.GPIO_Pin_CS);
 8000b96:	7fbb      	ldrb	r3, [r7, #30]
 8000b98:	697a      	ldr	r2, [r7, #20]
 8000b9a:	8b39      	ldrh	r1, [r7, #24]
 8000b9c:	9102      	str	r1, [sp, #8]
 8000b9e:	9201      	str	r2, [sp, #4]
 8000ba0:	9300      	str	r3, [sp, #0]
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	68fa      	ldr	r2, [r7, #12]
 8000ba6:	2102      	movs	r1, #2
 8000ba8:	4803      	ldr	r0, [pc, #12]	; (8000bb8 <read_manufacturer_id+0x60>)
 8000baa:	f000 ff65 	bl	8001a78 <spi_read_data>
}
 8000bae:	bf00      	nop
 8000bb0:	3720      	adds	r7, #32
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000010 	.word	0x20000010

08000bbc <i2c_read_reg>:
 *      Author: aidencontini
 */

#include "i2c_driver.h"

uint8_t i2c_read_reg(I2C_HandleTypeDef* hi2c, uint8_t dev_addr, uint8_t* register_addr) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b088      	sub	sp, #32
 8000bc0:	af02      	add	r7, sp, #8
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	607a      	str	r2, [r7, #4]
 8000bc8:	72fb      	strb	r3, [r7, #11]
	uint8_t read = 0x00;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Master_Transmit(hi2c, (dev_addr << 1) | 0x00, register_addr, 1, 100);
 8000bce:	7afb      	ldrb	r3, [r7, #11]
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	b299      	uxth	r1, r3
 8000bd6:	2364      	movs	r3, #100	; 0x64
 8000bd8:	9300      	str	r3, [sp, #0]
 8000bda:	2301      	movs	r3, #1
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	68f8      	ldr	r0, [r7, #12]
 8000be0:	f002 f89e 	bl	8002d20 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, (dev_addr << 1) | 0x01, &read, 1, 100);
 8000be4:	7afb      	ldrb	r3, [r7, #11]
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	b21b      	sxth	r3, r3
 8000bea:	f043 0301 	orr.w	r3, r3, #1
 8000bee:	b21b      	sxth	r3, r3
 8000bf0:	b299      	uxth	r1, r3
 8000bf2:	f107 0217 	add.w	r2, r7, #23
 8000bf6:	2364      	movs	r3, #100	; 0x64
 8000bf8:	9300      	str	r3, [sp, #0]
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	68f8      	ldr	r0, [r7, #12]
 8000bfe:	f002 f98d 	bl	8002f1c <HAL_I2C_Master_Receive>
	return read;
 8000c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3718      	adds	r7, #24
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <i2c_burst_read>:

void i2c_burst_read(I2C_HandleTypeDef* hi2c, uint8_t dev_addr, uint8_t register_addr, uint8_t size, uint8_t data_buffer[size]) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af02      	add	r7, sp, #8
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	4608      	mov	r0, r1
 8000c16:	4611      	mov	r1, r2
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	70fb      	strb	r3, [r7, #3]
 8000c1e:	460b      	mov	r3, r1
 8000c20:	70bb      	strb	r3, [r7, #2]
 8000c22:	4613      	mov	r3, r2
 8000c24:	707b      	strb	r3, [r7, #1]
	// In order to read multiple bytes, it is necessary to assert the most significant bit of the sub-address field.
	uint8_t addr = register_addr | 0x80;
 8000c26:	78bb      	ldrb	r3, [r7, #2]
 8000c28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(hi2c, (dev_addr << 1) | 0x00, &addr, 1, 100);
 8000c30:	78fb      	ldrb	r3, [r7, #3]
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	b299      	uxth	r1, r3
 8000c38:	f107 020f 	add.w	r2, r7, #15
 8000c3c:	2364      	movs	r3, #100	; 0x64
 8000c3e:	9300      	str	r3, [sp, #0]
 8000c40:	2301      	movs	r3, #1
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f002 f86c 	bl	8002d20 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, (dev_addr << 1) | 0x01, data_buffer, size, 100);
 8000c48:	78fb      	ldrb	r3, [r7, #3]
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	b21b      	sxth	r3, r3
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	b21b      	sxth	r3, r3
 8000c54:	b299      	uxth	r1, r3
 8000c56:	787b      	ldrb	r3, [r7, #1]
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	2264      	movs	r2, #100	; 0x64
 8000c5c:	9200      	str	r2, [sp, #0]
 8000c5e:	69ba      	ldr	r2, [r7, #24]
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f002 f95b 	bl	8002f1c <HAL_I2C_Master_Receive>
}
 8000c66:	bf00      	nop
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <i2c_write_reg>:

HAL_StatusTypeDef i2c_write_reg(I2C_HandleTypeDef* hi2c, uint8_t dev_addr, uint8_t* register_addr, uint8_t data) {
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b088      	sub	sp, #32
 8000c72:	af02      	add	r7, sp, #8
 8000c74:	60f8      	str	r0, [r7, #12]
 8000c76:	607a      	str	r2, [r7, #4]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	72fb      	strb	r3, [r7, #11]
 8000c7e:	4613      	mov	r3, r2
 8000c80:	72bb      	strb	r3, [r7, #10]
	uint8_t data_tx[2] = {*register_addr, data};
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	753b      	strb	r3, [r7, #20]
 8000c88:	7abb      	ldrb	r3, [r7, #10]
 8000c8a:	757b      	strb	r3, [r7, #21]
	return HAL_I2C_Master_Transmit(hi2c, (dev_addr << 1) | 0x00, data_tx, 2, 100);
 8000c8c:	7afb      	ldrb	r3, [r7, #11]
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	b299      	uxth	r1, r3
 8000c94:	f107 0214 	add.w	r2, r7, #20
 8000c98:	2364      	movs	r3, #100	; 0x64
 8000c9a:	9300      	str	r3, [sp, #0]
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	68f8      	ldr	r0, [r7, #12]
 8000ca0:	f002 f83e 	bl	8002d20 <HAL_I2C_Master_Transmit>
 8000ca4:	4603      	mov	r3, r0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3718      	adds	r7, #24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb2:	f001 fad7 	bl	8002264 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb6:	f000 f813 	bl	8000ce0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cba:	f000 f9e5 	bl	8001088 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000cbe:	f000 f871 	bl	8000da4 <MX_I2C1_Init>
  MX_RTC_Init();
 8000cc2:	f000 f8ef 	bl	8000ea4 <MX_RTC_Init>
  MX_SPI1_Init();
 8000cc6:	f000 f913 	bl	8000ef0 <MX_SPI1_Init>
  MX_TIM6_Init();
 8000cca:	f000 f97d 	bl	8000fc8 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8000cce:	f000 f9b1 	bl	8001034 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8000cd2:	f000 f8a7 	bl	8000e24 <MX_I2C2_Init>
  MX_SPI2_Init();
 8000cd6:	f000 f941 	bl	8000f5c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  systemInit();
 8000cda:	f000 facb 	bl	8001274 <systemInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cde:	e7fe      	b.n	8000cde <main+0x30>

08000ce0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b094      	sub	sp, #80	; 0x50
 8000ce4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce6:	f107 0320 	add.w	r3, r7, #32
 8000cea:	2230      	movs	r2, #48	; 0x30
 8000cec:	2100      	movs	r1, #0
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f006 f9b6 	bl	8007060 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf4:	f107 030c 	add.w	r3, r7, #12
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d04:	2300      	movs	r3, #0
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	4b24      	ldr	r3, [pc, #144]	; (8000d9c <SystemClock_Config+0xbc>)
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0c:	4a23      	ldr	r2, [pc, #140]	; (8000d9c <SystemClock_Config+0xbc>)
 8000d0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d12:	6413      	str	r3, [r2, #64]	; 0x40
 8000d14:	4b21      	ldr	r3, [pc, #132]	; (8000d9c <SystemClock_Config+0xbc>)
 8000d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d20:	2300      	movs	r3, #0
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	4b1e      	ldr	r3, [pc, #120]	; (8000da0 <SystemClock_Config+0xc0>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d2c:	4a1c      	ldr	r2, [pc, #112]	; (8000da0 <SystemClock_Config+0xc0>)
 8000d2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d32:	6013      	str	r3, [r2, #0]
 8000d34:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <SystemClock_Config+0xc0>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d3c:	607b      	str	r3, [r7, #4]
 8000d3e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000d40:	230a      	movs	r3, #10
 8000d42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d44:	2301      	movs	r3, #1
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d48:	2310      	movs	r3, #16
 8000d4a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d50:	2300      	movs	r3, #0
 8000d52:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d54:	f107 0320 	add.w	r3, r7, #32
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f002 ff13 	bl	8003b84 <HAL_RCC_OscConfig>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000d64:	f000 faf0 	bl	8001348 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d68:	230f      	movs	r3, #15
 8000d6a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d7c:	f107 030c 	add.w	r3, r7, #12
 8000d80:	2100      	movs	r1, #0
 8000d82:	4618      	mov	r0, r3
 8000d84:	f003 f976 	bl	8004074 <HAL_RCC_ClockConfig>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000d8e:	f000 fadb 	bl	8001348 <Error_Handler>
  }
}
 8000d92:	bf00      	nop
 8000d94:	3750      	adds	r7, #80	; 0x50
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40007000 	.word	0x40007000

08000da4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000da8:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <MX_I2C1_Init+0x74>)
 8000daa:	4a1c      	ldr	r2, [pc, #112]	; (8000e1c <MX_I2C1_Init+0x78>)
 8000dac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000dae:	4b1a      	ldr	r3, [pc, #104]	; (8000e18 <MX_I2C1_Init+0x74>)
 8000db0:	4a1b      	ldr	r2, [pc, #108]	; (8000e20 <MX_I2C1_Init+0x7c>)
 8000db2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000db4:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <MX_I2C1_Init+0x74>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000dba:	4b17      	ldr	r3, [pc, #92]	; (8000e18 <MX_I2C1_Init+0x74>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dc0:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <MX_I2C1_Init+0x74>)
 8000dc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dc6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dc8:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <MX_I2C1_Init+0x74>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dce:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <MX_I2C1_Init+0x74>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dd4:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <MX_I2C1_Init+0x74>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dda:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <MX_I2C1_Init+0x74>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000de0:	480d      	ldr	r0, [pc, #52]	; (8000e18 <MX_I2C1_Init+0x74>)
 8000de2:	f001 fe59 	bl	8002a98 <HAL_I2C_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000dec:	f000 faac 	bl	8001348 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000df0:	2100      	movs	r1, #0
 8000df2:	4809      	ldr	r0, [pc, #36]	; (8000e18 <MX_I2C1_Init+0x74>)
 8000df4:	f002 fe4a 	bl	8003a8c <HAL_I2CEx_ConfigAnalogFilter>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000dfe:	f000 faa3 	bl	8001348 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e02:	2100      	movs	r1, #0
 8000e04:	4804      	ldr	r0, [pc, #16]	; (8000e18 <MX_I2C1_Init+0x74>)
 8000e06:	f002 fe7d 	bl	8003b04 <HAL_I2CEx_ConfigDigitalFilter>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000e10:	f000 fa9a 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000040 	.word	0x20000040
 8000e1c:	40005400 	.word	0x40005400
 8000e20:	000186a0 	.word	0x000186a0

08000e24 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e28:	4b1b      	ldr	r3, [pc, #108]	; (8000e98 <MX_I2C2_Init+0x74>)
 8000e2a:	4a1c      	ldr	r2, [pc, #112]	; (8000e9c <MX_I2C2_Init+0x78>)
 8000e2c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000e2e:	4b1a      	ldr	r3, [pc, #104]	; (8000e98 <MX_I2C2_Init+0x74>)
 8000e30:	4a1b      	ldr	r2, [pc, #108]	; (8000ea0 <MX_I2C2_Init+0x7c>)
 8000e32:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e34:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <MX_I2C2_Init+0x74>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000e3a:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <MX_I2C2_Init+0x74>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e40:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <MX_I2C2_Init+0x74>)
 8000e42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e46:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e48:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <MX_I2C2_Init+0x74>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000e4e:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <MX_I2C2_Init+0x74>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e54:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <MX_I2C2_Init+0x74>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e5a:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <MX_I2C2_Init+0x74>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e60:	480d      	ldr	r0, [pc, #52]	; (8000e98 <MX_I2C2_Init+0x74>)
 8000e62:	f001 fe19 	bl	8002a98 <HAL_I2C_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000e6c:	f000 fa6c 	bl	8001348 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e70:	2100      	movs	r1, #0
 8000e72:	4809      	ldr	r0, [pc, #36]	; (8000e98 <MX_I2C2_Init+0x74>)
 8000e74:	f002 fe0a 	bl	8003a8c <HAL_I2CEx_ConfigAnalogFilter>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000e7e:	f000 fa63 	bl	8001348 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000e82:	2100      	movs	r1, #0
 8000e84:	4804      	ldr	r0, [pc, #16]	; (8000e98 <MX_I2C2_Init+0x74>)
 8000e86:	f002 fe3d 	bl	8003b04 <HAL_I2CEx_ConfigDigitalFilter>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000e90:	f000 fa5a 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000094 	.word	0x20000094
 8000e9c:	40005800 	.word	0x40005800
 8000ea0:	000186a0 	.word	0x000186a0

08000ea4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <MX_RTC_Init+0x44>)
 8000eaa:	4a10      	ldr	r2, [pc, #64]	; (8000eec <MX_RTC_Init+0x48>)
 8000eac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <MX_RTC_Init+0x44>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <MX_RTC_Init+0x44>)
 8000eb6:	227f      	movs	r2, #127	; 0x7f
 8000eb8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000eba:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <MX_RTC_Init+0x44>)
 8000ebc:	22ff      	movs	r2, #255	; 0xff
 8000ebe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ec0:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <MX_RTC_Init+0x44>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ec6:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <MX_RTC_Init+0x44>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <MX_RTC_Init+0x44>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ed2:	4805      	ldr	r0, [pc, #20]	; (8000ee8 <MX_RTC_Init+0x44>)
 8000ed4:	f003 fc6e 	bl	80047b4 <HAL_RTC_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000ede:	f000 fa33 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200000e8 	.word	0x200000e8
 8000eec:	40002800 	.word	0x40002800

08000ef0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ef4:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <MX_SPI1_Init+0x64>)
 8000ef6:	4a18      	ldr	r2, [pc, #96]	; (8000f58 <MX_SPI1_Init+0x68>)
 8000ef8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000efa:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <MX_SPI1_Init+0x64>)
 8000efc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f02:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <MX_SPI1_Init+0x64>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <MX_SPI1_Init+0x64>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f0e:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <MX_SPI1_Init+0x64>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f14:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <MX_SPI1_Init+0x64>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <MX_SPI1_Init+0x64>)
 8000f1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f20:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f22:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <MX_SPI1_Init+0x64>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f28:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <MX_SPI1_Init+0x64>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <MX_SPI1_Init+0x64>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f34:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <MX_SPI1_Init+0x64>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <MX_SPI1_Init+0x64>)
 8000f3c:	220a      	movs	r2, #10
 8000f3e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f40:	4804      	ldr	r0, [pc, #16]	; (8000f54 <MX_SPI1_Init+0x64>)
 8000f42:	f003 ff43 	bl	8004dcc <HAL_SPI_Init>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f4c:	f000 f9fc 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000108 	.word	0x20000108
 8000f58:	40013000 	.word	0x40013000

08000f5c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f60:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <MX_SPI2_Init+0x64>)
 8000f62:	4a18      	ldr	r2, [pc, #96]	; (8000fc4 <MX_SPI2_Init+0x68>)
 8000f64:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f66:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <MX_SPI2_Init+0x64>)
 8000f68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f6c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f6e:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <MX_SPI2_Init+0x64>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <MX_SPI2_Init+0x64>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f7a:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <MX_SPI2_Init+0x64>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f80:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <MX_SPI2_Init+0x64>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <MX_SPI2_Init+0x64>)
 8000f88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f8c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <MX_SPI2_Init+0x64>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f94:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <MX_SPI2_Init+0x64>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <MX_SPI2_Init+0x64>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fa0:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <MX_SPI2_Init+0x64>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <MX_SPI2_Init+0x64>)
 8000fa8:	220a      	movs	r2, #10
 8000faa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000fac:	4804      	ldr	r0, [pc, #16]	; (8000fc0 <MX_SPI2_Init+0x64>)
 8000fae:	f003 ff0d 	bl	8004dcc <HAL_SPI_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000fb8:	f000 f9c6 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000160 	.word	0x20000160
 8000fc4:	40003800 	.word	0x40003800

08000fc8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fce:	463b      	mov	r3, r7
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000fd6:	4b15      	ldr	r3, [pc, #84]	; (800102c <MX_TIM6_Init+0x64>)
 8000fd8:	4a15      	ldr	r2, [pc, #84]	; (8001030 <MX_TIM6_Init+0x68>)
 8000fda:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15999;
 8000fdc:	4b13      	ldr	r3, [pc, #76]	; (800102c <MX_TIM6_Init+0x64>)
 8000fde:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000fe2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe4:	4b11      	ldr	r3, [pc, #68]	; (800102c <MX_TIM6_Init+0x64>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8000fea:	4b10      	ldr	r3, [pc, #64]	; (800102c <MX_TIM6_Init+0x64>)
 8000fec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ff0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <MX_TIM6_Init+0x64>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ff8:	480c      	ldr	r0, [pc, #48]	; (800102c <MX_TIM6_Init+0x64>)
 8000ffa:	f004 fcbd 	bl	8005978 <HAL_TIM_Base_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001004:	f000 f9a0 	bl	8001348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001008:	2300      	movs	r3, #0
 800100a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100c:	2300      	movs	r3, #0
 800100e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001010:	463b      	mov	r3, r7
 8001012:	4619      	mov	r1, r3
 8001014:	4805      	ldr	r0, [pc, #20]	; (800102c <MX_TIM6_Init+0x64>)
 8001016:	f004 ff3d 	bl	8005e94 <HAL_TIMEx_MasterConfigSynchronization>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001020:	f000 f992 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	200001b8 	.word	0x200001b8
 8001030:	40001000 	.word	0x40001000

08001034 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001038:	4b11      	ldr	r3, [pc, #68]	; (8001080 <MX_USART2_UART_Init+0x4c>)
 800103a:	4a12      	ldr	r2, [pc, #72]	; (8001084 <MX_USART2_UART_Init+0x50>)
 800103c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800103e:	4b10      	ldr	r3, [pc, #64]	; (8001080 <MX_USART2_UART_Init+0x4c>)
 8001040:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001044:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <MX_USART2_UART_Init+0x4c>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800104c:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <MX_USART2_UART_Init+0x4c>)
 800104e:	2200      	movs	r2, #0
 8001050:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001052:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <MX_USART2_UART_Init+0x4c>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001058:	4b09      	ldr	r3, [pc, #36]	; (8001080 <MX_USART2_UART_Init+0x4c>)
 800105a:	220c      	movs	r2, #12
 800105c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105e:	4b08      	ldr	r3, [pc, #32]	; (8001080 <MX_USART2_UART_Init+0x4c>)
 8001060:	2200      	movs	r2, #0
 8001062:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <MX_USART2_UART_Init+0x4c>)
 8001066:	2200      	movs	r2, #0
 8001068:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800106a:	4805      	ldr	r0, [pc, #20]	; (8001080 <MX_USART2_UART_Init+0x4c>)
 800106c:	f004 ffa2 	bl	8005fb4 <HAL_UART_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001076:	f000 f967 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000200 	.word	0x20000200
 8001084:	40004400 	.word	0x40004400

08001088 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	; 0x28
 800108c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
 800109c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	4b5f      	ldr	r3, [pc, #380]	; (8001220 <MX_GPIO_Init+0x198>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a5e      	ldr	r2, [pc, #376]	; (8001220 <MX_GPIO_Init+0x198>)
 80010a8:	f043 0304 	orr.w	r3, r3, #4
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b5c      	ldr	r3, [pc, #368]	; (8001220 <MX_GPIO_Init+0x198>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0304 	and.w	r3, r3, #4
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	4b58      	ldr	r3, [pc, #352]	; (8001220 <MX_GPIO_Init+0x198>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a57      	ldr	r2, [pc, #348]	; (8001220 <MX_GPIO_Init+0x198>)
 80010c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b55      	ldr	r3, [pc, #340]	; (8001220 <MX_GPIO_Init+0x198>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	4b51      	ldr	r3, [pc, #324]	; (8001220 <MX_GPIO_Init+0x198>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a50      	ldr	r2, [pc, #320]	; (8001220 <MX_GPIO_Init+0x198>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b4e      	ldr	r3, [pc, #312]	; (8001220 <MX_GPIO_Init+0x198>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	4b4a      	ldr	r3, [pc, #296]	; (8001220 <MX_GPIO_Init+0x198>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a49      	ldr	r2, [pc, #292]	; (8001220 <MX_GPIO_Init+0x198>)
 80010fc:	f043 0302 	orr.w	r3, r3, #2
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b47      	ldr	r3, [pc, #284]	; (8001220 <MX_GPIO_Init+0x198>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	603b      	str	r3, [r7, #0]
 8001112:	4b43      	ldr	r3, [pc, #268]	; (8001220 <MX_GPIO_Init+0x198>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a42      	ldr	r2, [pc, #264]	; (8001220 <MX_GPIO_Init+0x198>)
 8001118:	f043 0308 	orr.w	r3, r3, #8
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b40      	ldr	r3, [pc, #256]	; (8001220 <MX_GPIO_Init+0x198>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0308 	and.w	r3, r3, #8
 8001126:	603b      	str	r3, [r7, #0]
 8001128:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_WP_GPIO_Port, SPI2_WP_Pin, GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	2101      	movs	r1, #1
 800112e:	483d      	ldr	r0, [pc, #244]	; (8001224 <MX_GPIO_Init+0x19c>)
 8001130:	f001 fc7e 	bl	8002a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001134:	2200      	movs	r2, #0
 8001136:	f44f 41a1 	mov.w	r1, #20608	; 0x5080
 800113a:	483b      	ldr	r0, [pc, #236]	; (8001228 <MX_GPIO_Init+0x1a0>)
 800113c:	f001 fc78 	bl	8002a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI1_WP_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8001140:	2200      	movs	r2, #0
 8001142:	f244 0104 	movw	r1, #16388	; 0x4004
 8001146:	4839      	ldr	r0, [pc, #228]	; (800122c <MX_GPIO_Init+0x1a4>)
 8001148:	f001 fc72 	bl	8002a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI2_WP_Pin */
  GPIO_InitStruct.Pin = SPI2_WP_Pin;
 800114c:	2301      	movs	r3, #1
 800114e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001150:	2301      	movs	r3, #1
 8001152:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001154:	2301      	movs	r3, #1
 8001156:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001158:	2300      	movs	r3, #0
 800115a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_WP_GPIO_Port, &GPIO_InitStruct);
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	4619      	mov	r1, r3
 8001162:	4830      	ldr	r0, [pc, #192]	; (8001224 <MX_GPIO_Init+0x19c>)
 8001164:	f001 fab8 	bl	80026d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : JMP_Flight_Pin */
  GPIO_InitStruct.Pin = JMP_Flight_Pin;
 8001168:	2302      	movs	r3, #2
 800116a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800116c:	2300      	movs	r3, #0
 800116e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001170:	2302      	movs	r3, #2
 8001172:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(JMP_Flight_GPIO_Port, &GPIO_InitStruct);
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	4619      	mov	r1, r3
 800117a:	482b      	ldr	r0, [pc, #172]	; (8001228 <MX_GPIO_Init+0x1a0>)
 800117c:	f001 faac 	bl	80026d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8001180:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001184:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001186:	2301      	movs	r3, #1
 8001188:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800118a:	2301      	movs	r3, #1
 800118c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2300      	movs	r3, #0
 8001190:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001192:	f107 0314 	add.w	r3, r7, #20
 8001196:	4619      	mov	r1, r3
 8001198:	4823      	ldr	r0, [pc, #140]	; (8001228 <MX_GPIO_Init+0x1a0>)
 800119a:	f001 fa9d 	bl	80026d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 800119e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80011a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a4:	2301      	movs	r3, #1
 80011a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011a8:	2302      	movs	r3, #2
 80011aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ac:	2300      	movs	r3, #0
 80011ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	4619      	mov	r1, r3
 80011b6:	481c      	ldr	r0, [pc, #112]	; (8001228 <MX_GPIO_Init+0x1a0>)
 80011b8:	f001 fa8e 	bl	80026d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_WP_Pin */
  GPIO_InitStruct.Pin = SPI1_WP_Pin;
 80011bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c2:	2301      	movs	r3, #1
 80011c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c6:	2301      	movs	r3, #1
 80011c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ca:	2300      	movs	r3, #0
 80011cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_WP_GPIO_Port, &GPIO_InitStruct);
 80011ce:	f107 0314 	add.w	r3, r7, #20
 80011d2:	4619      	mov	r1, r3
 80011d4:	4815      	ldr	r0, [pc, #84]	; (800122c <MX_GPIO_Init+0x1a4>)
 80011d6:	f001 fa7f 	bl	80026d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80011da:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80011de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e8:	2303      	movs	r3, #3
 80011ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80011ec:	2309      	movs	r3, #9
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	4619      	mov	r1, r3
 80011f6:	480e      	ldr	r0, [pc, #56]	; (8001230 <MX_GPIO_Init+0x1a8>)
 80011f8:	f001 fa6e 	bl	80026d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80011fc:	2304      	movs	r3, #4
 80011fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001200:	2301      	movs	r3, #1
 8001202:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001208:	2300      	movs	r3, #0
 800120a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	4619      	mov	r1, r3
 8001212:	4806      	ldr	r0, [pc, #24]	; (800122c <MX_GPIO_Init+0x1a4>)
 8001214:	f001 fa60 	bl	80026d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001218:	bf00      	nop
 800121a:	3728      	adds	r7, #40	; 0x28
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40023800 	.word	0x40023800
 8001224:	40020800 	.word	0x40020800
 8001228:	40020400 	.word	0x40020400
 800122c:	40020c00 	.word	0x40020c00
 8001230:	40020000 	.word	0x40020000

08001234 <clean_data_buffer>:

/* USER CODE BEGIN 4 */
void clean_data_buffer(uint8_t bufferRef) {
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < PAGE_SIZE; ++i) {
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	e00a      	b.n	800125a <clean_data_buffer+0x26>
        	data_buffer[bufferRef][i] = 0xFF;  // Initialize each element to 0xFF
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <clean_data_buffer+0x3c>)
 8001248:	021b      	lsls	r3, r3, #8
 800124a:	441a      	add	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4413      	add	r3, r2
 8001250:	22ff      	movs	r2, #255	; 0xff
 8001252:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < PAGE_SIZE; ++i) {
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	3301      	adds	r3, #1
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2bff      	cmp	r3, #255	; 0xff
 800125e:	ddf1      	ble.n	8001244 <clean_data_buffer+0x10>
    }
}
 8001260:	bf00      	nop
 8001262:	bf00      	nop
 8001264:	3714      	adds	r7, #20
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	2000024c 	.word	0x2000024c

08001274 <systemInit>:

void systemInit() {
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);		// Turn LED off
 8001278:	2200      	movs	r2, #0
 800127a:	2180      	movs	r1, #128	; 0x80
 800127c:	4823      	ldr	r0, [pc, #140]	; (800130c <systemInit+0x98>)
 800127e:	f001 fbd7 	bl	8002a30 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);		// SET SPI CS High to disable bus 1
 8001282:	2201      	movs	r2, #1
 8001284:	2104      	movs	r1, #4
 8001286:	4822      	ldr	r0, [pc, #136]	; (8001310 <systemInit+0x9c>)
 8001288:	f001 fbd2 	bl	8002a30 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);		// SET SPI CS High to disable bus 2
 800128c:	2201      	movs	r2, #1
 800128e:	2102      	movs	r1, #2
 8001290:	4820      	ldr	r0, [pc, #128]	; (8001314 <systemInit+0xa0>)
 8001292:	f001 fbcd 	bl	8002a30 <HAL_GPIO_WritePin>

	  // Clean the data buffer and set all values to 0xFF
	  clean_data_buffer(0);
 8001296:	2000      	movs	r0, #0
 8001298:	f7ff ffcc 	bl	8001234 <clean_data_buffer>
	  clean_data_buffer(1);
 800129c:	2001      	movs	r0, #1
 800129e:	f7ff ffc9 	bl	8001234 <clean_data_buffer>


	  // Initialise the peripherals
	  init_accel(&hi2c1);
 80012a2:	481d      	ldr	r0, [pc, #116]	; (8001318 <systemInit+0xa4>)
 80012a4:	f7ff f928 	bl	80004f8 <init_accel>
	  init_bme280(&hi2c2, 0);
 80012a8:	2100      	movs	r1, #0
 80012aa:	481c      	ldr	r0, [pc, #112]	; (800131c <systemInit+0xa8>)
 80012ac:	f7ff f968 	bl	8000580 <init_bme280>
	//  init_bme280(&hi2c2, 1);
	  software_reset(&hspi1, 0);
 80012b0:	2100      	movs	r1, #0
 80012b2:	481b      	ldr	r0, [pc, #108]	; (8001320 <systemInit+0xac>)
 80012b4:	f7ff faee 	bl	8000894 <software_reset>
//	  software_reset(&hspi2, 1);

	  next_blank_page0 = find_next_blank_page(&hspi1, &end_of_flash, 0);
 80012b8:	2200      	movs	r2, #0
 80012ba:	491a      	ldr	r1, [pc, #104]	; (8001324 <systemInit+0xb0>)
 80012bc:	4818      	ldr	r0, [pc, #96]	; (8001320 <systemInit+0xac>)
 80012be:	f7ff fb6d 	bl	800099c <find_next_blank_page>
 80012c2:	4603      	mov	r3, r0
 80012c4:	4a18      	ldr	r2, [pc, #96]	; (8001328 <systemInit+0xb4>)
 80012c6:	6013      	str	r3, [r2, #0]
//	  next_blank_page1 = find_next_blank_page(&hspi2, &end_of_flash, 1);

	  buffer_ref = 0;
 80012c8:	4b18      	ldr	r3, [pc, #96]	; (800132c <systemInit+0xb8>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	701a      	strb	r2, [r3, #0]
	  byte_tracker = 0;
 80012ce:	4b18      	ldr	r3, [pc, #96]	; (8001330 <systemInit+0xbc>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	801a      	strh	r2, [r3, #0]
	  end_of_flash = GPIO_PIN_SET;
 80012d4:	4b13      	ldr	r3, [pc, #76]	; (8001324 <systemInit+0xb0>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	701a      	strb	r2, [r3, #0]

	  send_uart_hex(&huart2, systemStatus(&hspi1, &hspi2, &hi2c1, &hi2c2));
 80012da:	4b10      	ldr	r3, [pc, #64]	; (800131c <systemInit+0xa8>)
 80012dc:	4a0e      	ldr	r2, [pc, #56]	; (8001318 <systemInit+0xa4>)
 80012de:	4915      	ldr	r1, [pc, #84]	; (8001334 <systemInit+0xc0>)
 80012e0:	480f      	ldr	r0, [pc, #60]	; (8001320 <systemInit+0xac>)
 80012e2:	f000 f836 	bl	8001352 <systemStatus>
 80012e6:	4603      	mov	r3, r0
 80012e8:	4619      	mov	r1, r3
 80012ea:	4813      	ldr	r0, [pc, #76]	; (8001338 <systemInit+0xc4>)
 80012ec:	f000 ff7b 	bl	80021e6 <send_uart_hex>

	  HAL_UART_Receive_IT(&huart2, UARTRxData, 2);			// Initiate the UART Receive interrupt
 80012f0:	2202      	movs	r2, #2
 80012f2:	4912      	ldr	r1, [pc, #72]	; (800133c <systemInit+0xc8>)
 80012f4:	4810      	ldr	r0, [pc, #64]	; (8001338 <systemInit+0xc4>)
 80012f6:	f004 ff38 	bl	800616a <HAL_UART_Receive_IT>
	  initialise_rtc_default(&hrtc);
 80012fa:	4811      	ldr	r0, [pc, #68]	; (8001340 <systemInit+0xcc>)
 80012fc:	f000 fb0a 	bl	8001914 <initialise_rtc_default>
	  HAL_TIM_Base_Start_IT(&htim6);
 8001300:	4810      	ldr	r0, [pc, #64]	; (8001344 <systemInit+0xd0>)
 8001302:	f004 fb89 	bl	8005a18 <HAL_TIM_Base_Start_IT>
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40020400 	.word	0x40020400
 8001310:	40020c00 	.word	0x40020c00
 8001314:	40020800 	.word	0x40020800
 8001318:	20000040 	.word	0x20000040
 800131c:	20000094 	.word	0x20000094
 8001320:	20000108 	.word	0x20000108
 8001324:	2000046e 	.word	0x2000046e
 8001328:	20000468 	.word	0x20000468
 800132c:	20000464 	.word	0x20000464
 8001330:	2000046c 	.word	0x2000046c
 8001334:	20000160 	.word	0x20000160
 8001338:	20000200 	.word	0x20000200
 800133c:	20000248 	.word	0x20000248
 8001340:	200000e8 	.word	0x200000e8
 8001344:	200001b8 	.word	0x200001b8

08001348 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800134c:	b672      	cpsid	i
}
 800134e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001350:	e7fe      	b.n	8001350 <Error_Handler+0x8>

08001352 <systemStatus>:

#include "peripheral_driver.h"
/***************************************************************************************************************
 * Generic Functions
 */
uint8_t systemStatus(SPI_HandleTypeDef *hspi1, SPI_HandleTypeDef *hspi2, I2C_HandleTypeDef* hi2c1, I2C_HandleTypeDef* hi2c2) {
 8001352:	b580      	push	{r7, lr}
 8001354:	b086      	sub	sp, #24
 8001356:	af00      	add	r7, sp, #0
 8001358:	60f8      	str	r0, [r7, #12]
 800135a:	60b9      	str	r1, [r7, #8]
 800135c:	607a      	str	r2, [r7, #4]
 800135e:	603b      	str	r3, [r7, #0]
	uint8_t retVal = 0x00;
 8001360:	2300      	movs	r3, #0
 8001362:	75fb      	strb	r3, [r7, #23]
		retVal  = retVal | 0x10;
	}
**/

	// Check BME280_0
	if(readBME280_id_reg(hi2c2, 0) != 0x60) {			// Expected 0x60
 8001364:	2100      	movs	r1, #0
 8001366:	6838      	ldr	r0, [r7, #0]
 8001368:	f7ff f9a6 	bl	80006b8 <readBME280_id_reg>
 800136c:	4603      	mov	r3, r0
 800136e:	2b60      	cmp	r3, #96	; 0x60
 8001370:	d003      	beq.n	800137a <systemStatus+0x28>
		retVal  = retVal | 0x08;
 8001372:	7dfb      	ldrb	r3, [r7, #23]
 8001374:	f043 0308 	orr.w	r3, r3, #8
 8001378:	75fb      	strb	r3, [r7, #23]
	}

	// Check Accelerometer
	if(readAccel_whoami(hi2c1) != 0x32) {				// Expected 0x32
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff f8ee 	bl	800055c <readAccel_whoami>
 8001380:	4603      	mov	r3, r0
 8001382:	2b32      	cmp	r3, #50	; 0x32
 8001384:	d003      	beq.n	800138e <systemStatus+0x3c>
		retVal  = retVal | 0x04;
 8001386:	7dfb      	ldrb	r3, [r7, #23]
 8001388:	f043 0304 	orr.w	r3, r3, #4
 800138c:	75fb      	strb	r3, [r7, #23]
		retVal  = retVal | 0x02;
	}
**/

	// Check SPIFlash_0
	uint8_t manu0[2] = {0, 0};
 800138e:	2300      	movs	r3, #0
 8001390:	82bb      	strh	r3, [r7, #20]
	read_manufacturer_id(manu0, hspi1, 0);
 8001392:	f107 0314 	add.w	r3, r7, #20
 8001396:	2200      	movs	r2, #0
 8001398:	68f9      	ldr	r1, [r7, #12]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff fbdc 	bl	8000b58 <read_manufacturer_id>
	if(manu0[0] != 0xEF) {								// Expected 0xEF
 80013a0:	7d3b      	ldrb	r3, [r7, #20]
 80013a2:	2bef      	cmp	r3, #239	; 0xef
 80013a4:	d003      	beq.n	80013ae <systemStatus+0x5c>
		retVal  = retVal | 0x01;
 80013a6:	7dfb      	ldrb	r3, [r7, #23]
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	75fb      	strb	r3, [r7, #23]
	}


	return retVal;
 80013ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3718      	adds	r7, #24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <heartbeatUART>:

void heartbeatUART(UART_HandleTypeDef *huart) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	send_uart_string(huart, "**Heartbeat**\r\n");			// Transmit the heartbeat
 80013c0:	4903      	ldr	r1, [pc, #12]	; (80013d0 <heartbeatUART+0x18>)
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f000 fefb 	bl	80021be <send_uart_string>
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	080070d0 	.word	0x080070d0

080013d4 <eraseFlashSPI>:

/***************************************************************************************************************
 * SPI Flash Functions
 */
void eraseFlashSPI(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, uint8_t flashNo) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	4613      	mov	r3, r2
 80013e0:	71fb      	strb	r3, [r7, #7]
	if (flashNo == 0 || flashNo == 1) {
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d002      	beq.n	80013ee <eraseFlashSPI+0x1a>
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d123      	bne.n	8001436 <eraseFlashSPI+0x62>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET);		// Activate the "write out" LED
 80013ee:	2201      	movs	r2, #1
 80013f0:	2180      	movs	r1, #128	; 0x80
 80013f2:	4813      	ldr	r0, [pc, #76]	; (8001440 <eraseFlashSPI+0x6c>)
 80013f4:	f001 fb1c 	bl	8002a30 <HAL_GPIO_WritePin>
		if (erase_chip_spi(hspi, flashNo) == HAL_OK) {
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	4619      	mov	r1, r3
 80013fc:	68f8      	ldr	r0, [r7, #12]
 80013fe:	f7ff f9f1 	bl	80007e4 <erase_chip_spi>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d10d      	bne.n	8001424 <eraseFlashSPI+0x50>
			send_uart_string(huart, "Successful Chip Erase\r\n");
 8001408:	490e      	ldr	r1, [pc, #56]	; (8001444 <eraseFlashSPI+0x70>)
 800140a:	68b8      	ldr	r0, [r7, #8]
 800140c:	f000 fed7 	bl	80021be <send_uart_string>
			next_blank_page0 = find_next_blank_page(hspi, &end_of_flash, flashNo);
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	461a      	mov	r2, r3
 8001414:	490c      	ldr	r1, [pc, #48]	; (8001448 <eraseFlashSPI+0x74>)
 8001416:	68f8      	ldr	r0, [r7, #12]
 8001418:	f7ff fac0 	bl	800099c <find_next_blank_page>
 800141c:	4603      	mov	r3, r0
 800141e:	4a0b      	ldr	r2, [pc, #44]	; (800144c <eraseFlashSPI+0x78>)
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	e003      	b.n	800142c <eraseFlashSPI+0x58>
		} else {
			send_uart_string(huart, "Error during chip erase. Please check the connection and try again.\r\n");
 8001424:	490a      	ldr	r1, [pc, #40]	; (8001450 <eraseFlashSPI+0x7c>)
 8001426:	68b8      	ldr	r0, [r7, #8]
 8001428:	f000 fec9 	bl	80021be <send_uart_string>
		}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);	// Deactivate the "write out" LED
 800142c:	2200      	movs	r2, #0
 800142e:	2180      	movs	r1, #128	; 0x80
 8001430:	4803      	ldr	r0, [pc, #12]	; (8001440 <eraseFlashSPI+0x6c>)
 8001432:	f001 fafd 	bl	8002a30 <HAL_GPIO_WritePin>
	}
}
 8001436:	bf00      	nop
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40020400 	.word	0x40020400
 8001444:	080070e0 	.word	0x080070e0
 8001448:	2000046e 	.word	0x2000046e
 800144c:	20000468 	.word	0x20000468
 8001450:	080070f8 	.word	0x080070f8

08001454 <readFlashToUART>:

void readFlashToUART(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, uint8_t flashNo) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b0c8      	sub	sp, #288	; 0x120
 8001458:	af00      	add	r7, sp, #0
 800145a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800145e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001462:	6018      	str	r0, [r3, #0]
 8001464:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001468:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800146c:	6019      	str	r1, [r3, #0]
 800146e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001472:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8001476:	701a      	strb	r2, [r3, #0]
	uint32_t num_of_pages = next_blank_page0;
 8001478:	4b28      	ldr	r3, [pc, #160]	; (800151c <readFlashToUART+0xc8>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	if(num_of_pages == 0) {
 8001480:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001484:	2b00      	cmp	r3, #0
 8001486:	d103      	bne.n	8001490 <readFlashToUART+0x3c>
		num_of_pages = PAGE_SIZE;
 8001488:	f44f 7380 	mov.w	r3, #256	; 0x100
 800148c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	}
	num_of_pages = num_of_pages/PAGE_SIZE;
 8001490:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001494:	0a1b      	lsrs	r3, r3, #8
 8001496:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	uint32_t address = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET);		// Activate the "write out" LED
 80014a0:	2201      	movs	r2, #1
 80014a2:	2180      	movs	r1, #128	; 0x80
 80014a4:	481e      	ldr	r0, [pc, #120]	; (8001520 <readFlashToUART+0xcc>)
 80014a6:	f001 fac3 	bl	8002a30 <HAL_GPIO_WritePin>

	for (int i = 0; i < (num_of_pages); i++) {
 80014aa:	2300      	movs	r3, #0
 80014ac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80014b0:	e024      	b.n	80014fc <readFlashToUART+0xa8>
		uint8_t page[PAGE_SIZE];
		read_page_spi(page, hspi, address, flashNo);
 80014b2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80014b6:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80014c0:	f5a2 718a 	sub.w	r1, r2, #276	; 0x114
 80014c4:	f107 0014 	add.w	r0, r7, #20
 80014c8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80014cc:	6809      	ldr	r1, [r1, #0]
 80014ce:	f7ff fb13 	bl	8000af8 <read_page_spi>
		uart_transmit_page(huart, page);						// Transmit the data//
 80014d2:	f107 0214 	add.w	r2, r7, #20
 80014d6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80014da:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80014de:	4611      	mov	r1, r2
 80014e0:	6818      	ldr	r0, [r3, #0]
 80014e2:	f000 fe5b 	bl	800219c <uart_transmit_page>
		address += PAGE_SIZE;
 80014e6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80014ea:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80014ee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	for (int i = 0; i < (num_of_pages); i++) {
 80014f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80014f6:	3301      	adds	r3, #1
 80014f8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80014fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001500:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001504:	429a      	cmp	r2, r3
 8001506:	d8d4      	bhi.n	80014b2 <readFlashToUART+0x5e>
	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);	// Deactivate the "write out" LED
 8001508:	2200      	movs	r2, #0
 800150a:	2180      	movs	r1, #128	; 0x80
 800150c:	4804      	ldr	r0, [pc, #16]	; (8001520 <readFlashToUART+0xcc>)
 800150e:	f001 fa8f 	bl	8002a30 <HAL_GPIO_WritePin>
}
 8001512:	bf00      	nop
 8001514:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000468 	.word	0x20000468
 8001520:	40020400 	.word	0x40020400

08001524 <readFlashManuSPI>:

void readFlashManuSPI(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, uint8_t flashNo) {
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	4613      	mov	r3, r2
 8001530:	71fb      	strb	r3, [r7, #7]
	uint8_t manu[2] = {0, 0};
 8001532:	2300      	movs	r3, #0
 8001534:	82bb      	strh	r3, [r7, #20]
	read_manufacturer_id(manu, hspi, flashNo);
 8001536:	79fa      	ldrb	r2, [r7, #7]
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	68f9      	ldr	r1, [r7, #12]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fb0a 	bl	8000b58 <read_manufacturer_id>
	send_uart_hex(huart, manu[0]);
 8001544:	7d3b      	ldrb	r3, [r7, #20]
 8001546:	4619      	mov	r1, r3
 8001548:	68b8      	ldr	r0, [r7, #8]
 800154a:	f000 fe4c 	bl	80021e6 <send_uart_hex>
	send_uart_hex(huart, manu[1]);
 800154e:	7d7b      	ldrb	r3, [r7, #21]
 8001550:	4619      	mov	r1, r3
 8001552:	68b8      	ldr	r0, [r7, #8]
 8001554:	f000 fe47 	bl	80021e6 <send_uart_hex>
}
 8001558:	bf00      	nop
 800155a:	3718      	adds	r7, #24
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <writePageSPI_W>:

void writePageSPI_W(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, uint8_t flashNo) {
 8001560:	b580      	push	{r7, lr}
 8001562:	b0c6      	sub	sp, #280	; 0x118
 8001564:	af00      	add	r7, sp, #0
 8001566:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800156a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800156e:	6018      	str	r0, [r3, #0]
 8001570:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001574:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001578:	6019      	str	r1, [r3, #0]
 800157a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800157e:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8001582:	701a      	strb	r2, [r3, #0]
	uint8_t data_out[PAGE_SIZE];
	for (int i = 0; i < PAGE_SIZE; i++) {
 8001584:	2300      	movs	r3, #0
 8001586:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800158a:	e00d      	b.n	80015a8 <writePageSPI_W+0x48>
		data_out[i] = 0x77;		// Make all data in the page 'w'
 800158c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001590:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 8001594:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001598:	4413      	add	r3, r2
 800159a:	2277      	movs	r2, #119	; 0x77
 800159c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < PAGE_SIZE; i++) {
 800159e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80015a2:	3301      	adds	r3, #1
 80015a4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80015a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80015ac:	2bff      	cmp	r3, #255	; 0xff
 80015ae:	dded      	ble.n	800158c <writePageSPI_W+0x2c>
	}
	write_data_spi(data_out, hspi, next_blank_page0, flashNo);
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <writePageSPI_W+0x98>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80015b8:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	f507 718c 	add.w	r1, r7, #280	; 0x118
 80015c2:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 80015c6:	f107 0014 	add.w	r0, r7, #20
 80015ca:	6809      	ldr	r1, [r1, #0]
 80015cc:	f7ff f996 	bl	80008fc <write_data_spi>
	next_blank_page0 += PAGE_SIZE;
 80015d0:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <writePageSPI_W+0x98>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80015d8:	4a07      	ldr	r2, [pc, #28]	; (80015f8 <writePageSPI_W+0x98>)
 80015da:	6013      	str	r3, [r2, #0]

	send_uart_string(huart, "Successful Page Written\r\n");
 80015dc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80015e0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80015e4:	4905      	ldr	r1, [pc, #20]	; (80015fc <writePageSPI_W+0x9c>)
 80015e6:	6818      	ldr	r0, [r3, #0]
 80015e8:	f000 fde9 	bl	80021be <send_uart_string>
}
 80015ec:	bf00      	nop
 80015ee:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000468 	.word	0x20000468
 80015fc:	08007140 	.word	0x08007140

08001600 <resetSPIFlash>:

void resetSPIFlash(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, uint8_t flashNo) {
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	4613      	mov	r3, r2
 800160c:	71fb      	strb	r3, [r7, #7]
	software_reset(hspi, flashNo);
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	4619      	mov	r1, r3
 8001612:	68f8      	ldr	r0, [r7, #12]
 8001614:	f7ff f93e 	bl	8000894 <software_reset>
	send_uart_string(huart, "Flash Chip Reset\r\n");
 8001618:	4903      	ldr	r1, [pc, #12]	; (8001628 <resetSPIFlash+0x28>)
 800161a:	68b8      	ldr	r0, [r7, #8]
 800161c:	f000 fdcf 	bl	80021be <send_uart_string>
}
 8001620:	bf00      	nop
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	0800715c 	.word	0x0800715c

0800162c <checkAccelWhoAmI>:

/***************************************************************************************************************
 * I2C Accelerometer Functions
 */
void checkAccelWhoAmI(I2C_HandleTypeDef* hi2c, UART_HandleTypeDef *huart) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
	uint8_t whoami = readAccel_whoami(hi2c);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7fe ff90 	bl	800055c <readAccel_whoami>
 800163c:	4603      	mov	r3, r0
 800163e:	73fb      	strb	r3, [r7, #15]
	send_uart_hex(huart, whoami);
 8001640:	7bfb      	ldrb	r3, [r7, #15]
 8001642:	4619      	mov	r1, r3
 8001644:	6838      	ldr	r0, [r7, #0]
 8001646:	f000 fdce 	bl	80021e6 <send_uart_hex>
}
 800164a:	bf00      	nop
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <accelToUART>:

void accelToUART(UART_HandleTypeDef *huart) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 6; i++) {
 800165c:	2300      	movs	r3, #0
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	e00a      	b.n	8001678 <accelToUART+0x24>
		send_uart_hex(huart, accel_data[i]);
 8001662:	4a09      	ldr	r2, [pc, #36]	; (8001688 <accelToUART+0x34>)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4413      	add	r3, r2
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	4619      	mov	r1, r3
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f000 fdba 	bl	80021e6 <send_uart_hex>
	for (int i = 0; i < 6; i++) {
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	3301      	adds	r3, #1
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2b05      	cmp	r3, #5
 800167c:	ddf1      	ble.n	8001662 <accelToUART+0xe>
	}
}
 800167e:	bf00      	nop
 8001680:	bf00      	nop
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	2000044c 	.word	0x2000044c

0800168c <readTempSensorID>:

/***************************************************************************************************************
 * I2C Temperature Sensor Functions
 */
void readTempSensorID(I2C_HandleTypeDef* hi2c, UART_HandleTypeDef *huart, uint8_t tempNo) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	4613      	mov	r3, r2
 8001698:	71fb      	strb	r3, [r7, #7]
	send_uart_hex(huart, readBME280_id_reg(hi2c, tempNo));
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	4619      	mov	r1, r3
 800169e:	68f8      	ldr	r0, [r7, #12]
 80016a0:	f7ff f80a 	bl	80006b8 <readBME280_id_reg>
 80016a4:	4603      	mov	r3, r0
 80016a6:	4619      	mov	r1, r3
 80016a8:	68b8      	ldr	r0, [r7, #8]
 80016aa:	f000 fd9c 	bl	80021e6 <send_uart_hex>
}
 80016ae:	bf00      	nop
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <readTempCalibration>:

void readTempCalibration(I2C_HandleTypeDef* hi2c, UART_HandleTypeDef *huart, uint8_t tempNo) {
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b090      	sub	sp, #64	; 0x40
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	60f8      	str	r0, [r7, #12]
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	4613      	mov	r3, r2
 80016c2:	71fb      	strb	r3, [r7, #7]
	uint8_t calibration1[25];
	uint8_t calibration2[7];
	readBME280_calib(hi2c, tempNo, calibration1, calibration2);
 80016c4:	f107 0314 	add.w	r3, r7, #20
 80016c8:	f107 021c 	add.w	r2, r7, #28
 80016cc:	79f9      	ldrb	r1, [r7, #7]
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f7ff f80c 	bl	80006ec <readBME280_calib>

	for (int i = 0; i < 25; i++) {
 80016d4:	2300      	movs	r3, #0
 80016d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016d8:	e00b      	b.n	80016f2 <readTempCalibration+0x3c>
	  send_uart_hex(huart, calibration1[i]);
 80016da:	f107 021c 	add.w	r2, r7, #28
 80016de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016e0:	4413      	add	r3, r2
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	4619      	mov	r1, r3
 80016e6:	68b8      	ldr	r0, [r7, #8]
 80016e8:	f000 fd7d 	bl	80021e6 <send_uart_hex>
	for (int i = 0; i < 25; i++) {
 80016ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016ee:	3301      	adds	r3, #1
 80016f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016f4:	2b18      	cmp	r3, #24
 80016f6:	ddf0      	ble.n	80016da <readTempCalibration+0x24>
	}

	for (int i = 0; i < 7; i++) {
 80016f8:	2300      	movs	r3, #0
 80016fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80016fc:	e00b      	b.n	8001716 <readTempCalibration+0x60>
	  send_uart_hex(huart, calibration2[i]);
 80016fe:	f107 0214 	add.w	r2, r7, #20
 8001702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001704:	4413      	add	r3, r2
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	4619      	mov	r1, r3
 800170a:	68b8      	ldr	r0, [r7, #8]
 800170c:	f000 fd6b 	bl	80021e6 <send_uart_hex>
	for (int i = 0; i < 7; i++) {
 8001710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001712:	3301      	adds	r3, #1
 8001714:	63bb      	str	r3, [r7, #56]	; 0x38
 8001716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001718:	2b06      	cmp	r3, #6
 800171a:	ddf0      	ble.n	80016fe <readTempCalibration+0x48>
	}
}
 800171c:	bf00      	nop
 800171e:	bf00      	nop
 8001720:	3740      	adds	r7, #64	; 0x40
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
	...

08001728 <readTempSensor>:

void readTempSensor(UART_HandleTypeDef *huart, uint8_t tempNo) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	460b      	mov	r3, r1
 8001732:	70fb      	strb	r3, [r7, #3]
	if (tempNo == 0) {
 8001734:	78fb      	ldrb	r3, [r7, #3]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d111      	bne.n	800175e <readTempSensor+0x36>
		for (int i = 0; i < 8; i++) {
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	e00a      	b.n	8001756 <readTempSensor+0x2e>
			send_uart_hex(huart, bme280_data_1[i]);
 8001740:	4a13      	ldr	r2, [pc, #76]	; (8001790 <readTempSensor+0x68>)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	4413      	add	r3, r2
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	4619      	mov	r1, r3
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 fd4b 	bl	80021e6 <send_uart_hex>
		for (int i = 0; i < 8; i++) {
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	3301      	adds	r3, #1
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2b07      	cmp	r3, #7
 800175a:	ddf1      	ble.n	8001740 <readTempSensor+0x18>
			send_uart_hex(huart, bme280_data_2[i]);
		}
	}


}
 800175c:	e013      	b.n	8001786 <readTempSensor+0x5e>
	} else if (tempNo == 1) {
 800175e:	78fb      	ldrb	r3, [r7, #3]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d110      	bne.n	8001786 <readTempSensor+0x5e>
		for (int i = 0; i < 8; i++) {
 8001764:	2300      	movs	r3, #0
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	e00a      	b.n	8001780 <readTempSensor+0x58>
			send_uart_hex(huart, bme280_data_2[i]);
 800176a:	4a0a      	ldr	r2, [pc, #40]	; (8001794 <readTempSensor+0x6c>)
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	4413      	add	r3, r2
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	4619      	mov	r1, r3
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 fd36 	bl	80021e6 <send_uart_hex>
		for (int i = 0; i < 8; i++) {
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	3301      	adds	r3, #1
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	2b07      	cmp	r3, #7
 8001784:	ddf1      	ble.n	800176a <readTempSensor+0x42>
}
 8001786:	bf00      	nop
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000454 	.word	0x20000454
 8001794:	2000045c 	.word	0x2000045c

08001798 <readAllSensors>:

/***************************************************************************************************************
 * Process All Sensors
 */
void readAllSensors(I2C_HandleTypeDef* hi2c_accel, I2C_HandleTypeDef* hi2c_temp, RTC_HandleTypeDef* hrtc) {
 8001798:	b590      	push	{r4, r7, lr}
 800179a:	b08b      	sub	sp, #44	; 0x2c
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);		// Toggle LED
 80017a4:	2180      	movs	r1, #128	; 0x80
 80017a6:	4854      	ldr	r0, [pc, #336]	; (80018f8 <readAllSensors+0x160>)
 80017a8:	f001 f95b 	bl	8002a62 <HAL_GPIO_TogglePin>

	// Read Accelerometer Data
	readAccelerometer(accel_data, hi2c_accel);
 80017ac:	68f9      	ldr	r1, [r7, #12]
 80017ae:	4853      	ldr	r0, [pc, #332]	; (80018fc <readAllSensors+0x164>)
 80017b0:	f7fe fec0 	bl	8000534 <readAccelerometer>

	readTempHumPres(bme280_data_1, hi2c_temp, 0);
 80017b4:	2200      	movs	r2, #0
 80017b6:	68b9      	ldr	r1, [r7, #8]
 80017b8:	4851      	ldr	r0, [pc, #324]	; (8001900 <readAllSensors+0x168>)
 80017ba:	f7fe ff2d 	bl	8000618 <readTempHumPres>
	//  readTempHumPres(bme280_data_2, hi2c_temp, 1);

	uint16_t time = getTimestampMilliseconds(hrtc);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 f8c2 	bl	8001948 <getTimestampMilliseconds>
 80017c4:	4603      	mov	r3, r0
 80017c6:	82fb      	strh	r3, [r7, #22]
	uint8_t array_ptr = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	// Store the time in the buffer if there is space
	if (byte_tracker < (PAGE_SIZE - READ_SIZE)) {
 80017ce:	4b4d      	ldr	r3, [pc, #308]	; (8001904 <readAllSensors+0x16c>)
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	2be7      	cmp	r3, #231	; 0xe7
 80017d4:	f200 808c 	bhi.w	80018f0 <readAllSensors+0x158>
		data_buffer[buffer_ref][byte_tracker + 0] = (uint8_t) ((time >> 8) & 0xFF);
 80017d8:	8afb      	ldrh	r3, [r7, #22]
 80017da:	0a1b      	lsrs	r3, r3, #8
 80017dc:	b29a      	uxth	r2, r3
 80017de:	4b4a      	ldr	r3, [pc, #296]	; (8001908 <readAllSensors+0x170>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	461c      	mov	r4, r3
 80017e4:	4b47      	ldr	r3, [pc, #284]	; (8001904 <readAllSensors+0x16c>)
 80017e6:	881b      	ldrh	r3, [r3, #0]
 80017e8:	4618      	mov	r0, r3
 80017ea:	b2d1      	uxtb	r1, r2
 80017ec:	4a47      	ldr	r2, [pc, #284]	; (800190c <readAllSensors+0x174>)
 80017ee:	0223      	lsls	r3, r4, #8
 80017f0:	4413      	add	r3, r2
 80017f2:	4403      	add	r3, r0
 80017f4:	460a      	mov	r2, r1
 80017f6:	701a      	strb	r2, [r3, #0]
		data_buffer[buffer_ref][byte_tracker + 1] = (uint8_t) (time & 0xFF); // Least significant byte (LSB)
 80017f8:	4b43      	ldr	r3, [pc, #268]	; (8001908 <readAllSensors+0x170>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	461a      	mov	r2, r3
 80017fe:	4b41      	ldr	r3, [pc, #260]	; (8001904 <readAllSensors+0x16c>)
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	3301      	adds	r3, #1
 8001804:	8af9      	ldrh	r1, [r7, #22]
 8001806:	b2c8      	uxtb	r0, r1
 8001808:	4940      	ldr	r1, [pc, #256]	; (800190c <readAllSensors+0x174>)
 800180a:	0212      	lsls	r2, r2, #8
 800180c:	440a      	add	r2, r1
 800180e:	4413      	add	r3, r2
 8001810:	4602      	mov	r2, r0
 8001812:	701a      	strb	r2, [r3, #0]

		array_ptr += 2;
 8001814:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001818:	3302      	adds	r3, #2
 800181a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for (int i = 0; i < 6; i++) {
 800181e:	2300      	movs	r3, #0
 8001820:	623b      	str	r3, [r7, #32]
 8001822:	e01a      	b.n	800185a <readAllSensors+0xc2>
		  data_buffer[buffer_ref][byte_tracker + array_ptr] = accel_data[i];
 8001824:	4b38      	ldr	r3, [pc, #224]	; (8001908 <readAllSensors+0x170>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	461c      	mov	r4, r3
 800182a:	4b36      	ldr	r3, [pc, #216]	; (8001904 <readAllSensors+0x16c>)
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	461a      	mov	r2, r3
 8001830:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001834:	4413      	add	r3, r2
 8001836:	4931      	ldr	r1, [pc, #196]	; (80018fc <readAllSensors+0x164>)
 8001838:	6a3a      	ldr	r2, [r7, #32]
 800183a:	440a      	add	r2, r1
 800183c:	7810      	ldrb	r0, [r2, #0]
 800183e:	4933      	ldr	r1, [pc, #204]	; (800190c <readAllSensors+0x174>)
 8001840:	0222      	lsls	r2, r4, #8
 8001842:	440a      	add	r2, r1
 8001844:	4413      	add	r3, r2
 8001846:	4602      	mov	r2, r0
 8001848:	701a      	strb	r2, [r3, #0]
		  array_ptr += 1;
 800184a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800184e:	3301      	adds	r3, #1
 8001850:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for (int i = 0; i < 6; i++) {
 8001854:	6a3b      	ldr	r3, [r7, #32]
 8001856:	3301      	adds	r3, #1
 8001858:	623b      	str	r3, [r7, #32]
 800185a:	6a3b      	ldr	r3, [r7, #32]
 800185c:	2b05      	cmp	r3, #5
 800185e:	dde1      	ble.n	8001824 <readAllSensors+0x8c>
		}

		for (int i = 0; i < 8; i++) {
 8001860:	2300      	movs	r3, #0
 8001862:	61fb      	str	r3, [r7, #28]
 8001864:	e01a      	b.n	800189c <readAllSensors+0x104>
		  data_buffer[buffer_ref][byte_tracker + array_ptr] = bme280_data_1[i];
 8001866:	4b28      	ldr	r3, [pc, #160]	; (8001908 <readAllSensors+0x170>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	461c      	mov	r4, r3
 800186c:	4b25      	ldr	r3, [pc, #148]	; (8001904 <readAllSensors+0x16c>)
 800186e:	881b      	ldrh	r3, [r3, #0]
 8001870:	461a      	mov	r2, r3
 8001872:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001876:	4413      	add	r3, r2
 8001878:	4921      	ldr	r1, [pc, #132]	; (8001900 <readAllSensors+0x168>)
 800187a:	69fa      	ldr	r2, [r7, #28]
 800187c:	440a      	add	r2, r1
 800187e:	7810      	ldrb	r0, [r2, #0]
 8001880:	4922      	ldr	r1, [pc, #136]	; (800190c <readAllSensors+0x174>)
 8001882:	0222      	lsls	r2, r4, #8
 8001884:	440a      	add	r2, r1
 8001886:	4413      	add	r3, r2
 8001888:	4602      	mov	r2, r0
 800188a:	701a      	strb	r2, [r3, #0]
		  array_ptr += 1;
 800188c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001890:	3301      	adds	r3, #1
 8001892:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for (int i = 0; i < 8; i++) {
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3301      	adds	r3, #1
 800189a:	61fb      	str	r3, [r7, #28]
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	2b07      	cmp	r3, #7
 80018a0:	dde1      	ble.n	8001866 <readAllSensors+0xce>
		}

		for (int i = 0; i < 8; i++) {
 80018a2:	2300      	movs	r3, #0
 80018a4:	61bb      	str	r3, [r7, #24]
 80018a6:	e01a      	b.n	80018de <readAllSensors+0x146>
		  data_buffer[buffer_ref][byte_tracker + array_ptr] = bme280_data_2[i];
 80018a8:	4b17      	ldr	r3, [pc, #92]	; (8001908 <readAllSensors+0x170>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	461c      	mov	r4, r3
 80018ae:	4b15      	ldr	r3, [pc, #84]	; (8001904 <readAllSensors+0x16c>)
 80018b0:	881b      	ldrh	r3, [r3, #0]
 80018b2:	461a      	mov	r2, r3
 80018b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018b8:	4413      	add	r3, r2
 80018ba:	4915      	ldr	r1, [pc, #84]	; (8001910 <readAllSensors+0x178>)
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	440a      	add	r2, r1
 80018c0:	7810      	ldrb	r0, [r2, #0]
 80018c2:	4912      	ldr	r1, [pc, #72]	; (800190c <readAllSensors+0x174>)
 80018c4:	0222      	lsls	r2, r4, #8
 80018c6:	440a      	add	r2, r1
 80018c8:	4413      	add	r3, r2
 80018ca:	4602      	mov	r2, r0
 80018cc:	701a      	strb	r2, [r3, #0]
		  array_ptr += 1;
 80018ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018d2:	3301      	adds	r3, #1
 80018d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for (int i = 0; i < 8; i++) {
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	3301      	adds	r3, #1
 80018dc:	61bb      	str	r3, [r7, #24]
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	2b07      	cmp	r3, #7
 80018e2:	dde1      	ble.n	80018a8 <readAllSensors+0x110>
		}

		byte_tracker = byte_tracker + 24;
 80018e4:	4b07      	ldr	r3, [pc, #28]	; (8001904 <readAllSensors+0x16c>)
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	3318      	adds	r3, #24
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <readAllSensors+0x16c>)
 80018ee:	801a      	strh	r2, [r3, #0]
	}
}
 80018f0:	bf00      	nop
 80018f2:	372c      	adds	r7, #44	; 0x2c
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd90      	pop	{r4, r7, pc}
 80018f8:	40020400 	.word	0x40020400
 80018fc:	2000044c 	.word	0x2000044c
 8001900:	20000454 	.word	0x20000454
 8001904:	2000046c 	.word	0x2000046c
 8001908:	20000464 	.word	0x20000464
 800190c:	2000024c 	.word	0x2000024c
 8001910:	2000045c 	.word	0x2000045c

08001914 <initialise_rtc_default>:
    .Month = RTC_MONTH_JANUARY, // Set default month (e.g., January)
    .Date = 1, // Set default day of the month
    .Year = 24 // Set default year (e.g., 2021)
};

void initialise_rtc_default(RTC_HandleTypeDef* hrtc) {
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
	// Reset RTC on boot
	HAL_RTC_MspInit(hrtc); // Initialize RTC hardware
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f000 f9db 	bl	8001cd8 <HAL_RTC_MspInit>
	HAL_RTC_SetTime(hrtc, &defaultTime, RTC_FORMAT_BIN); // Set default time
 8001922:	2200      	movs	r2, #0
 8001924:	4906      	ldr	r1, [pc, #24]	; (8001940 <initialise_rtc_default+0x2c>)
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f002 ffc7 	bl	80048ba <HAL_RTC_SetTime>
	HAL_RTC_SetDate(hrtc, &defaultDate, RTC_FORMAT_BIN); // Set default date
 800192c:	2200      	movs	r2, #0
 800192e:	4905      	ldr	r1, [pc, #20]	; (8001944 <initialise_rtc_default+0x30>)
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f003 f8ba 	bl	8004aaa <HAL_RTC_SetDate>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000470 	.word	0x20000470
 8001944:	20000014 	.word	0x20000014

08001948 <getTimestampMilliseconds>:

uint32_t getTimestampMilliseconds(RTC_HandleTypeDef* hrtc) {
 8001948:	b580      	push	{r7, lr}
 800194a:	b08c      	sub	sp, #48	; 0x30
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
    RTC_TimeTypeDef rtcTime;
    RTC_DateTypeDef rtcDate;

    // Read RTC time and date
    HAL_RTC_GetTime(hrtc, &rtcTime, RTC_FORMAT_BIN);
 8001950:	f107 0310 	add.w	r3, r7, #16
 8001954:	2200      	movs	r2, #0
 8001956:	4619      	mov	r1, r3
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f003 f848 	bl	80049ee <HAL_RTC_GetTime>
    HAL_RTC_GetDate(hrtc, &rtcDate, RTC_FORMAT_BIN);
 800195e:	f107 030c 	add.w	r3, r7, #12
 8001962:	2200      	movs	r2, #0
 8001964:	4619      	mov	r1, r3
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f003 f923 	bl	8004bb2 <HAL_RTC_GetDate>

    // Calculate timestamp in milliseconds
    uint32_t timestampSeconds = rtcTime.Seconds + rtcTime.Minutes * 60 + rtcTime.Hours * 3600;
 800196c:	7cbb      	ldrb	r3, [r7, #18]
 800196e:	4619      	mov	r1, r3
 8001970:	7c7b      	ldrb	r3, [r7, #17]
 8001972:	461a      	mov	r2, r3
 8001974:	4613      	mov	r3, r2
 8001976:	011b      	lsls	r3, r3, #4
 8001978:	1a9b      	subs	r3, r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	18ca      	adds	r2, r1, r3
 800197e:	7c3b      	ldrb	r3, [r7, #16]
 8001980:	4619      	mov	r1, r3
 8001982:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001986:	fb01 f303 	mul.w	r3, r1, r3
 800198a:	4413      	add	r3, r2
 800198c:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t timestampMilliseconds = timestampSeconds * 1000;
 800198e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001990:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001994:	fb02 f303 	mul.w	r3, r2, r3
 8001998:	62bb      	str	r3, [r7, #40]	; 0x28
    float subsecondsFraction = (float)(rtcTime.SecondFraction - rtcTime.SubSeconds) / (rtcTime.SecondFraction + 1);
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	ee07 3a90 	vmov	s15, r3
 80019a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	3301      	adds	r3, #1
 80019ac:	ee07 3a90 	vmov	s15, r3
 80019b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019b8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    timestampMilliseconds += subsecondsFraction * 1000;
 80019bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019be:	ee07 3a90 	vmov	s15, r3
 80019c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019c6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80019ca:	eddf 6a08 	vldr	s13, [pc, #32]	; 80019ec <getTimestampMilliseconds+0xa4>
 80019ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80019d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019da:	ee17 3a90 	vmov	r3, s15
 80019de:	62bb      	str	r3, [r7, #40]	; 0x28

    return timestampMilliseconds;
 80019e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3730      	adds	r7, #48	; 0x30
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	447a0000 	.word	0x447a0000

080019f0 <spi_sendOp_readByte>:
#ifndef SRC_SPI_DRIVER_C_
#define SRC_SPI_DRIVER_C_

#include "spi_driver.h"

uint8_t spi_sendOp_readByte(uint8_t* opcode, SPI_HandleTypeDef *hspi, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
 80019fc:	807b      	strh	r3, [r7, #2]
	uint8_t ret_data = 0x00;
 80019fe:	2300      	movs	r3, #0
 8001a00:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);	// Set the chip select pin to low to initiate SPI comms
 8001a02:	887b      	ldrh	r3, [r7, #2]
 8001a04:	2200      	movs	r2, #0
 8001a06:	4619      	mov	r1, r3
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f001 f811 	bl	8002a30 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, opcode, 1, 100);	// Write the write enable value to the Flash to initial reading
 8001a0e:	2364      	movs	r3, #100	; 0x64
 8001a10:	2201      	movs	r2, #1
 8001a12:	68f9      	ldr	r1, [r7, #12]
 8001a14:	68b8      	ldr	r0, [r7, #8]
 8001a16:	f003 fa62 	bl	8004ede <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, &ret_data, 1, 100);
 8001a1a:	f107 0117 	add.w	r1, r7, #23
 8001a1e:	2364      	movs	r3, #100	; 0x64
 8001a20:	2201      	movs	r2, #1
 8001a22:	68b8      	ldr	r0, [r7, #8]
 8001a24:	f003 fb9e 	bl	8005164 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);
 8001a28:	887b      	ldrh	r3, [r7, #2]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 fffe 	bl	8002a30 <HAL_GPIO_WritePin>

	return ret_data;
 8001a34:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <perform_operation>:

void perform_operation(uint8_t* opcode, SPI_HandleTypeDef *hspi, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b084      	sub	sp, #16
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	60f8      	str	r0, [r7, #12]
 8001a46:	60b9      	str	r1, [r7, #8]
 8001a48:	607a      	str	r2, [r7, #4]
 8001a4a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);	// Set the chip select pin to low to initiate SPI comms
 8001a4c:	887b      	ldrh	r3, [r7, #2]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	4619      	mov	r1, r3
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 ffec 	bl	8002a30 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, opcode, 1, 100);				// Write the opcode value
 8001a58:	2364      	movs	r3, #100	; 0x64
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	68f9      	ldr	r1, [r7, #12]
 8001a5e:	68b8      	ldr	r0, [r7, #8]
 8001a60:	f003 fa3d 	bl	8004ede <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);
 8001a64:	887b      	ldrh	r3, [r7, #2]
 8001a66:	2201      	movs	r2, #1
 8001a68:	4619      	mov	r1, r3
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 ffe0 	bl	8002a30 <HAL_GPIO_WritePin>
}
 8001a70:	bf00      	nop
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <spi_read_data>:


void spi_read_data(uint8_t* opcode, uint16_t data_size, uint8_t data_read[data_size], SPI_HandleTypeDef *hspi, uint32_t addr, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	607a      	str	r2, [r7, #4]
 8001a82:	603b      	str	r3, [r7, #0]
 8001a84:	460b      	mov	r3, r1
 8001a86:	817b      	strh	r3, [r7, #10]
	// Split the 24 bit address into three 8 bit ints
	uint8_t addrL = addr & 0xFF;  // Get the low byte
 8001a88:	6a3b      	ldr	r3, [r7, #32]
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	75fb      	strb	r3, [r7, #23]
	uint8_t addrM = (addr >> 8) & 0xFF;  // Get the middle byte
 8001a8e:	6a3b      	ldr	r3, [r7, #32]
 8001a90:	0a1b      	lsrs	r3, r3, #8
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	75bb      	strb	r3, [r7, #22]
	uint8_t addrH = (addr >> 16) & 0xFF;  // Get the high byte
 8001a96:	6a3b      	ldr	r3, [r7, #32]
 8001a98:	0c1b      	lsrs	r3, r3, #16
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	757b      	strb	r3, [r7, #21]

	// Read the data denoted by the given address
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);
 8001a9e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001aa6:	f000 ffc3 	bl	8002a30 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, opcode, 1, 100);	// Write the read enable value
 8001aaa:	2364      	movs	r3, #100	; 0x64
 8001aac:	2201      	movs	r2, #1
 8001aae:	68f9      	ldr	r1, [r7, #12]
 8001ab0:	6838      	ldr	r0, [r7, #0]
 8001ab2:	f003 fa14 	bl	8004ede <HAL_SPI_Transmit>

	// Transmit the 24 bit address of the page to initialise read from
	HAL_SPI_Transmit(hspi, &addrH, 1, 100);
 8001ab6:	f107 0115 	add.w	r1, r7, #21
 8001aba:	2364      	movs	r3, #100	; 0x64
 8001abc:	2201      	movs	r2, #1
 8001abe:	6838      	ldr	r0, [r7, #0]
 8001ac0:	f003 fa0d 	bl	8004ede <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &addrM, 1, 100);
 8001ac4:	f107 0116 	add.w	r1, r7, #22
 8001ac8:	2364      	movs	r3, #100	; 0x64
 8001aca:	2201      	movs	r2, #1
 8001acc:	6838      	ldr	r0, [r7, #0]
 8001ace:	f003 fa06 	bl	8004ede <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &addrL, 1, 100);
 8001ad2:	f107 0117 	add.w	r1, r7, #23
 8001ad6:	2364      	movs	r3, #100	; 0x64
 8001ad8:	2201      	movs	r2, #1
 8001ada:	6838      	ldr	r0, [r7, #0]
 8001adc:	f003 f9ff 	bl	8004ede <HAL_SPI_Transmit>

	HAL_SPI_Receive(hspi, data_read, data_size, 100);
 8001ae0:	897a      	ldrh	r2, [r7, #10]
 8001ae2:	2364      	movs	r3, #100	; 0x64
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	6838      	ldr	r0, [r7, #0]
 8001ae8:	f003 fb3c 	bl	8005164 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);
 8001aec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001aee:	2201      	movs	r2, #1
 8001af0:	4619      	mov	r1, r3
 8001af2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001af4:	f000 ff9c 	bl	8002a30 <HAL_GPIO_WritePin>
}
 8001af8:	bf00      	nop
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <spi_write_data>:

void spi_write_data(uint8_t* opcode, uint16_t data_size, uint8_t data_write[data_size], SPI_HandleTypeDef *hspi, uint32_t addr, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	607a      	str	r2, [r7, #4]
 8001b0a:	603b      	str	r3, [r7, #0]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	817b      	strh	r3, [r7, #10]
	// Split the 24 bit address into three 8 bit ints
	uint8_t addrL = addr & 0xFF;  			// Get the low byte
 8001b10:	6a3b      	ldr	r3, [r7, #32]
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	75fb      	strb	r3, [r7, #23]
	uint8_t addrM = (addr >> 8) & 0xFF;  	// Get the middle byte
 8001b16:	6a3b      	ldr	r3, [r7, #32]
 8001b18:	0a1b      	lsrs	r3, r3, #8
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	75bb      	strb	r3, [r7, #22]
	uint8_t addrH = (addr >> 16) & 0xFF;  	// Get the high byte
 8001b1e:	6a3b      	ldr	r3, [r7, #32]
 8001b20:	0c1b      	lsrs	r3, r3, #16
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	757b      	strb	r3, [r7, #21]

	// Send the PageWrite command
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);	// Set the chip select pin to low to initiate SPI comms
 8001b26:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b28:	2200      	movs	r2, #0
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b2e:	f000 ff7f 	bl	8002a30 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, opcode, 1, 100);					// Write the write enable value to the Flash to initial writing
 8001b32:	2364      	movs	r3, #100	; 0x64
 8001b34:	2201      	movs	r2, #1
 8001b36:	68f9      	ldr	r1, [r7, #12]
 8001b38:	6838      	ldr	r0, [r7, #0]
 8001b3a:	f003 f9d0 	bl	8004ede <HAL_SPI_Transmit>

	// Transmit the 24 bit address of the page to write to
	HAL_SPI_Transmit(hspi, &addrH, 1, 100);
 8001b3e:	f107 0115 	add.w	r1, r7, #21
 8001b42:	2364      	movs	r3, #100	; 0x64
 8001b44:	2201      	movs	r2, #1
 8001b46:	6838      	ldr	r0, [r7, #0]
 8001b48:	f003 f9c9 	bl	8004ede <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &addrM, 1, 100);
 8001b4c:	f107 0116 	add.w	r1, r7, #22
 8001b50:	2364      	movs	r3, #100	; 0x64
 8001b52:	2201      	movs	r2, #1
 8001b54:	6838      	ldr	r0, [r7, #0]
 8001b56:	f003 f9c2 	bl	8004ede <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &addrL, 1, 100);
 8001b5a:	f107 0117 	add.w	r1, r7, #23
 8001b5e:	2364      	movs	r3, #100	; 0x64
 8001b60:	2201      	movs	r2, #1
 8001b62:	6838      	ldr	r0, [r7, #0]
 8001b64:	f003 f9bb 	bl	8004ede <HAL_SPI_Transmit>

	// Transmit the data to be written
	HAL_SPI_Transmit(hspi, data_write, data_size, 1000);
 8001b68:	897a      	ldrh	r2, [r7, #10]
 8001b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	6838      	ldr	r0, [r7, #0]
 8001b72:	f003 f9b4 	bl	8004ede <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);	// Set the chip select pin to high to remove the Flash from the SPI bus
 8001b76:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b78:	2201      	movs	r2, #1
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b7e:	f000 ff57 	bl	8002a30 <HAL_GPIO_WritePin>
}
 8001b82:	bf00      	nop
 8001b84:	3718      	adds	r7, #24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
	...

08001b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	607b      	str	r3, [r7, #4]
 8001b96:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <HAL_MspInit+0x4c>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	4a0f      	ldr	r2, [pc, #60]	; (8001bd8 <HAL_MspInit+0x4c>)
 8001b9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ba2:	4b0d      	ldr	r3, [pc, #52]	; (8001bd8 <HAL_MspInit+0x4c>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001baa:	607b      	str	r3, [r7, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	603b      	str	r3, [r7, #0]
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <HAL_MspInit+0x4c>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	4a08      	ldr	r2, [pc, #32]	; (8001bd8 <HAL_MspInit+0x4c>)
 8001bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bbe:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_MspInit+0x4c>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	40023800 	.word	0x40023800

08001bdc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08c      	sub	sp, #48	; 0x30
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be4:	f107 031c 	add.w	r3, r7, #28
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a33      	ldr	r2, [pc, #204]	; (8001cc8 <HAL_I2C_MspInit+0xec>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d12d      	bne.n	8001c5a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61bb      	str	r3, [r7, #24]
 8001c02:	4b32      	ldr	r3, [pc, #200]	; (8001ccc <HAL_I2C_MspInit+0xf0>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a31      	ldr	r2, [pc, #196]	; (8001ccc <HAL_I2C_MspInit+0xf0>)
 8001c08:	f043 0302 	orr.w	r3, r3, #2
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b2f      	ldr	r3, [pc, #188]	; (8001ccc <HAL_I2C_MspInit+0xf0>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	61bb      	str	r3, [r7, #24]
 8001c18:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c20:	2312      	movs	r3, #18
 8001c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c2c:	2304      	movs	r3, #4
 8001c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c30:	f107 031c 	add.w	r3, r7, #28
 8001c34:	4619      	mov	r1, r3
 8001c36:	4826      	ldr	r0, [pc, #152]	; (8001cd0 <HAL_I2C_MspInit+0xf4>)
 8001c38:	f000 fd4e 	bl	80026d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	4b22      	ldr	r3, [pc, #136]	; (8001ccc <HAL_I2C_MspInit+0xf0>)
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c44:	4a21      	ldr	r2, [pc, #132]	; (8001ccc <HAL_I2C_MspInit+0xf0>)
 8001c46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c4a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c4c:	4b1f      	ldr	r3, [pc, #124]	; (8001ccc <HAL_I2C_MspInit+0xf0>)
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c54:	617b      	str	r3, [r7, #20]
 8001c56:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001c58:	e031      	b.n	8001cbe <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a1d      	ldr	r2, [pc, #116]	; (8001cd4 <HAL_I2C_MspInit+0xf8>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d12c      	bne.n	8001cbe <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c64:	2300      	movs	r3, #0
 8001c66:	613b      	str	r3, [r7, #16]
 8001c68:	4b18      	ldr	r3, [pc, #96]	; (8001ccc <HAL_I2C_MspInit+0xf0>)
 8001c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6c:	4a17      	ldr	r2, [pc, #92]	; (8001ccc <HAL_I2C_MspInit+0xf0>)
 8001c6e:	f043 0302 	orr.w	r3, r3, #2
 8001c72:	6313      	str	r3, [r2, #48]	; 0x30
 8001c74:	4b15      	ldr	r3, [pc, #84]	; (8001ccc <HAL_I2C_MspInit+0xf0>)
 8001c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	613b      	str	r3, [r7, #16]
 8001c7e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c80:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c86:	2312      	movs	r3, #18
 8001c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c92:	2304      	movs	r3, #4
 8001c94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c96:	f107 031c 	add.w	r3, r7, #28
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	480c      	ldr	r0, [pc, #48]	; (8001cd0 <HAL_I2C_MspInit+0xf4>)
 8001c9e:	f000 fd1b 	bl	80026d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <HAL_I2C_MspInit+0xf0>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	4a08      	ldr	r2, [pc, #32]	; (8001ccc <HAL_I2C_MspInit+0xf0>)
 8001cac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb2:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <HAL_I2C_MspInit+0xf0>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
}
 8001cbe:	bf00      	nop
 8001cc0:	3730      	adds	r7, #48	; 0x30
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40005400 	.word	0x40005400
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40020400 	.word	0x40020400
 8001cd4:	40005800 	.word	0x40005800

08001cd8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08e      	sub	sp, #56	; 0x38
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ce0:	f107 0308 	add.w	r3, r7, #8
 8001ce4:	2230      	movs	r2, #48	; 0x30
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f005 f9b9 	bl	8007060 <memset>
  if(hrtc->Instance==RTC)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a0c      	ldr	r2, [pc, #48]	; (8001d24 <HAL_RTC_MspInit+0x4c>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d111      	bne.n	8001d1c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001cf8:	2320      	movs	r3, #32
 8001cfa:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001cfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d00:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d02:	f107 0308 	add.w	r3, r7, #8
 8001d06:	4618      	mov	r0, r3
 8001d08:	f002 fb94 	bl	8004434 <HAL_RCCEx_PeriphCLKConfig>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001d12:	f7ff fb19 	bl	8001348 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d16:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <HAL_RTC_MspInit+0x50>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001d1c:	bf00      	nop
 8001d1e:	3738      	adds	r7, #56	; 0x38
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40002800 	.word	0x40002800
 8001d28:	42470e3c 	.word	0x42470e3c

08001d2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08c      	sub	sp, #48	; 0x30
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d34:	f107 031c 	add.w	r3, r7, #28
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a41      	ldr	r2, [pc, #260]	; (8001e50 <HAL_SPI_MspInit+0x124>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d12c      	bne.n	8001da8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61bb      	str	r3, [r7, #24]
 8001d52:	4b40      	ldr	r3, [pc, #256]	; (8001e54 <HAL_SPI_MspInit+0x128>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	4a3f      	ldr	r2, [pc, #252]	; (8001e54 <HAL_SPI_MspInit+0x128>)
 8001d58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d5e:	4b3d      	ldr	r3, [pc, #244]	; (8001e54 <HAL_SPI_MspInit+0x128>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d66:	61bb      	str	r3, [r7, #24]
 8001d68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
 8001d6e:	4b39      	ldr	r3, [pc, #228]	; (8001e54 <HAL_SPI_MspInit+0x128>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	4a38      	ldr	r2, [pc, #224]	; (8001e54 <HAL_SPI_MspInit+0x128>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7a:	4b36      	ldr	r3, [pc, #216]	; (8001e54 <HAL_SPI_MspInit+0x128>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d86:	23e0      	movs	r3, #224	; 0xe0
 8001d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d92:	2303      	movs	r3, #3
 8001d94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d96:	2305      	movs	r3, #5
 8001d98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9a:	f107 031c 	add.w	r3, r7, #28
 8001d9e:	4619      	mov	r1, r3
 8001da0:	482d      	ldr	r0, [pc, #180]	; (8001e58 <HAL_SPI_MspInit+0x12c>)
 8001da2:	f000 fc99 	bl	80026d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001da6:	e04e      	b.n	8001e46 <HAL_SPI_MspInit+0x11a>
  else if(hspi->Instance==SPI2)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a2b      	ldr	r2, [pc, #172]	; (8001e5c <HAL_SPI_MspInit+0x130>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d149      	bne.n	8001e46 <HAL_SPI_MspInit+0x11a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	613b      	str	r3, [r7, #16]
 8001db6:	4b27      	ldr	r3, [pc, #156]	; (8001e54 <HAL_SPI_MspInit+0x128>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	4a26      	ldr	r2, [pc, #152]	; (8001e54 <HAL_SPI_MspInit+0x128>)
 8001dbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc2:	4b24      	ldr	r3, [pc, #144]	; (8001e54 <HAL_SPI_MspInit+0x128>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	4b20      	ldr	r3, [pc, #128]	; (8001e54 <HAL_SPI_MspInit+0x128>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	4a1f      	ldr	r2, [pc, #124]	; (8001e54 <HAL_SPI_MspInit+0x128>)
 8001dd8:	f043 0304 	orr.w	r3, r3, #4
 8001ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dde:	4b1d      	ldr	r3, [pc, #116]	; (8001e54 <HAL_SPI_MspInit+0x128>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	f003 0304 	and.w	r3, r3, #4
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <HAL_SPI_MspInit+0x128>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	4a18      	ldr	r2, [pc, #96]	; (8001e54 <HAL_SPI_MspInit+0x128>)
 8001df4:	f043 0308 	orr.w	r3, r3, #8
 8001df8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfa:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <HAL_SPI_MspInit+0x128>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	f003 0308 	and.w	r3, r3, #8
 8001e02:	60bb      	str	r3, [r7, #8]
 8001e04:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e06:	230c      	movs	r3, #12
 8001e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e12:	2303      	movs	r3, #3
 8001e14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e16:	2305      	movs	r3, #5
 8001e18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e1a:	f107 031c 	add.w	r3, r7, #28
 8001e1e:	4619      	mov	r1, r3
 8001e20:	480f      	ldr	r0, [pc, #60]	; (8001e60 <HAL_SPI_MspInit+0x134>)
 8001e22:	f000 fc59 	bl	80026d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e26:	2308      	movs	r3, #8
 8001e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e32:	2303      	movs	r3, #3
 8001e34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e36:	2305      	movs	r3, #5
 8001e38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e3a:	f107 031c 	add.w	r3, r7, #28
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4808      	ldr	r0, [pc, #32]	; (8001e64 <HAL_SPI_MspInit+0x138>)
 8001e42:	f000 fc49 	bl	80026d8 <HAL_GPIO_Init>
}
 8001e46:	bf00      	nop
 8001e48:	3730      	adds	r7, #48	; 0x30
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40013000 	.word	0x40013000
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40020000 	.word	0x40020000
 8001e5c:	40003800 	.word	0x40003800
 8001e60:	40020800 	.word	0x40020800
 8001e64:	40020c00 	.word	0x40020c00

08001e68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a0e      	ldr	r2, [pc, #56]	; (8001eb0 <HAL_TIM_Base_MspInit+0x48>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d115      	bne.n	8001ea6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	4b0d      	ldr	r3, [pc, #52]	; (8001eb4 <HAL_TIM_Base_MspInit+0x4c>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	4a0c      	ldr	r2, [pc, #48]	; (8001eb4 <HAL_TIM_Base_MspInit+0x4c>)
 8001e84:	f043 0310 	orr.w	r3, r3, #16
 8001e88:	6413      	str	r3, [r2, #64]	; 0x40
 8001e8a:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <HAL_TIM_Base_MspInit+0x4c>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	f003 0310 	and.w	r3, r3, #16
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001e96:	2200      	movs	r2, #0
 8001e98:	2100      	movs	r1, #0
 8001e9a:	2036      	movs	r0, #54	; 0x36
 8001e9c:	f000 fb53 	bl	8002546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ea0:	2036      	movs	r0, #54	; 0x36
 8001ea2:	f000 fb6c 	bl	800257e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001ea6:	bf00      	nop
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40001000 	.word	0x40001000
 8001eb4:	40023800 	.word	0x40023800

08001eb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08a      	sub	sp, #40	; 0x28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec0:	f107 0314 	add.w	r3, r7, #20
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a1d      	ldr	r2, [pc, #116]	; (8001f4c <HAL_UART_MspInit+0x94>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d133      	bne.n	8001f42 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	4b1c      	ldr	r3, [pc, #112]	; (8001f50 <HAL_UART_MspInit+0x98>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	4a1b      	ldr	r2, [pc, #108]	; (8001f50 <HAL_UART_MspInit+0x98>)
 8001ee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eea:	4b19      	ldr	r3, [pc, #100]	; (8001f50 <HAL_UART_MspInit+0x98>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <HAL_UART_MspInit+0x98>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	4a14      	ldr	r2, [pc, #80]	; (8001f50 <HAL_UART_MspInit+0x98>)
 8001f00:	f043 0308 	orr.w	r3, r3, #8
 8001f04:	6313      	str	r3, [r2, #48]	; 0x30
 8001f06:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <HAL_UART_MspInit+0x98>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	f003 0308 	and.w	r3, r3, #8
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001f12:	2360      	movs	r3, #96	; 0x60
 8001f14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f16:	2302      	movs	r3, #2
 8001f18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f22:	2307      	movs	r3, #7
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f26:	f107 0314 	add.w	r3, r7, #20
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4809      	ldr	r0, [pc, #36]	; (8001f54 <HAL_UART_MspInit+0x9c>)
 8001f2e:	f000 fbd3 	bl	80026d8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f32:	2200      	movs	r2, #0
 8001f34:	2100      	movs	r1, #0
 8001f36:	2026      	movs	r0, #38	; 0x26
 8001f38:	f000 fb05 	bl	8002546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f3c:	2026      	movs	r0, #38	; 0x26
 8001f3e:	f000 fb1e 	bl	800257e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f42:	bf00      	nop
 8001f44:	3728      	adds	r7, #40	; 0x28
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40004400 	.word	0x40004400
 8001f50:	40023800 	.word	0x40023800
 8001f54:	40020c00 	.word	0x40020c00

08001f58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f5c:	e7fe      	b.n	8001f5c <NMI_Handler+0x4>

08001f5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f62:	e7fe      	b.n	8001f62 <HardFault_Handler+0x4>

08001f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f68:	e7fe      	b.n	8001f68 <MemManage_Handler+0x4>

08001f6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f6e:	e7fe      	b.n	8001f6e <BusFault_Handler+0x4>

08001f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f74:	e7fe      	b.n	8001f74 <UsageFault_Handler+0x4>

08001f76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f76:	b480      	push	{r7}
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fa4:	f000 f9b0 	bl	8002308 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fa8:	bf00      	nop
 8001faa:	bd80      	pop	{r7, pc}

08001fac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fb0:	4802      	ldr	r0, [pc, #8]	; (8001fbc <USART2_IRQHandler+0x10>)
 8001fb2:	f004 f8ff 	bl	80061b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000200 	.word	0x20000200

08001fc0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001fc4:	4804      	ldr	r0, [pc, #16]	; (8001fd8 <TIM6_DAC_IRQHandler+0x18>)
 8001fc6:	f003 fd97 	bl	8005af8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  readAllSensors(&hi2c1, &hi2c2, &hrtc);
 8001fca:	4a04      	ldr	r2, [pc, #16]	; (8001fdc <TIM6_DAC_IRQHandler+0x1c>)
 8001fcc:	4904      	ldr	r1, [pc, #16]	; (8001fe0 <TIM6_DAC_IRQHandler+0x20>)
 8001fce:	4805      	ldr	r0, [pc, #20]	; (8001fe4 <TIM6_DAC_IRQHandler+0x24>)
 8001fd0:	f7ff fbe2 	bl	8001798 <readAllSensors>
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001fd4:	bf00      	nop
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	200001b8 	.word	0x200001b8
 8001fdc:	200000e8 	.word	0x200000e8
 8001fe0:	20000094 	.word	0x20000094
 8001fe4:	20000040 	.word	0x20000040

08001fe8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
	// Send Heartbeat to UART (data_rx[0] = "h")
	if (UARTRxData[0] == 0x68) {
 8001ff0:	4b4f      	ldr	r3, [pc, #316]	; (8002130 <HAL_UART_RxCpltCallback+0x148>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b68      	cmp	r3, #104	; 0x68
 8001ff6:	d103      	bne.n	8002000 <HAL_UART_RxCpltCallback+0x18>
		heartbeatUART(huart);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff f9dd 	bl	80013b8 <heartbeatUART>
 8001ffe:	e08e      	b.n	800211e <HAL_UART_RxCpltCallback+0x136>
	}

/***************************** SPI Flash ************************************************/
	// Erase specified flash chip (data_rx[0]  = "e")
	else if (UARTRxData[0] == 0x65) {
 8002000:	4b4b      	ldr	r3, [pc, #300]	; (8002130 <HAL_UART_RxCpltCallback+0x148>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b65      	cmp	r3, #101	; 0x65
 8002006:	d10b      	bne.n	8002020 <HAL_UART_RxCpltCallback+0x38>
		eraseFlashSPI(&hspi1, huart, decodeASCII(UARTRxData[1]));
 8002008:	4b49      	ldr	r3, [pc, #292]	; (8002130 <HAL_UART_RxCpltCallback+0x148>)
 800200a:	785b      	ldrb	r3, [r3, #1]
 800200c:	4618      	mov	r0, r3
 800200e:	f000 f899 	bl	8002144 <decodeASCII>
 8002012:	4603      	mov	r3, r0
 8002014:	461a      	mov	r2, r3
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	4846      	ldr	r0, [pc, #280]	; (8002134 <HAL_UART_RxCpltCallback+0x14c>)
 800201a:	f7ff f9db 	bl	80013d4 <eraseFlashSPI>
 800201e:	e07e      	b.n	800211e <HAL_UART_RxCpltCallback+0x136>
	}

	// Read data from specified flash chip (data_rx[0] = "r")
	else if (UARTRxData[0] == 0x72) {
 8002020:	4b43      	ldr	r3, [pc, #268]	; (8002130 <HAL_UART_RxCpltCallback+0x148>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b72      	cmp	r3, #114	; 0x72
 8002026:	d10b      	bne.n	8002040 <HAL_UART_RxCpltCallback+0x58>
		readFlashToUART(&hspi1, huart, decodeASCII(UARTRxData[1]));
 8002028:	4b41      	ldr	r3, [pc, #260]	; (8002130 <HAL_UART_RxCpltCallback+0x148>)
 800202a:	785b      	ldrb	r3, [r3, #1]
 800202c:	4618      	mov	r0, r3
 800202e:	f000 f889 	bl	8002144 <decodeASCII>
 8002032:	4603      	mov	r3, r0
 8002034:	461a      	mov	r2, r3
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	483e      	ldr	r0, [pc, #248]	; (8002134 <HAL_UART_RxCpltCallback+0x14c>)
 800203a:	f7ff fa0b 	bl	8001454 <readFlashToUART>
 800203e:	e06e      	b.n	800211e <HAL_UART_RxCpltCallback+0x136>
	}

	// Read Manufacturer over SPI (data_rx[0] = "m")
	else if (UARTRxData[0] == 0x6d) {
 8002040:	4b3b      	ldr	r3, [pc, #236]	; (8002130 <HAL_UART_RxCpltCallback+0x148>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b6d      	cmp	r3, #109	; 0x6d
 8002046:	d10b      	bne.n	8002060 <HAL_UART_RxCpltCallback+0x78>
		readFlashManuSPI(&hspi1, huart, decodeASCII(UARTRxData[1]));
 8002048:	4b39      	ldr	r3, [pc, #228]	; (8002130 <HAL_UART_RxCpltCallback+0x148>)
 800204a:	785b      	ldrb	r3, [r3, #1]
 800204c:	4618      	mov	r0, r3
 800204e:	f000 f879 	bl	8002144 <decodeASCII>
 8002052:	4603      	mov	r3, r0
 8002054:	461a      	mov	r2, r3
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	4836      	ldr	r0, [pc, #216]	; (8002134 <HAL_UART_RxCpltCallback+0x14c>)
 800205a:	f7ff fa63 	bl	8001524 <readFlashManuSPI>
 800205e:	e05e      	b.n	800211e <HAL_UART_RxCpltCallback+0x136>
	}

	// Write a page over SPI (data_rx[0] = "w")
	else if (UARTRxData[0] == 0x77) {
 8002060:	4b33      	ldr	r3, [pc, #204]	; (8002130 <HAL_UART_RxCpltCallback+0x148>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b77      	cmp	r3, #119	; 0x77
 8002066:	d10b      	bne.n	8002080 <HAL_UART_RxCpltCallback+0x98>
		writePageSPI_W(&hspi1, huart, decodeASCII(UARTRxData[1]));
 8002068:	4b31      	ldr	r3, [pc, #196]	; (8002130 <HAL_UART_RxCpltCallback+0x148>)
 800206a:	785b      	ldrb	r3, [r3, #1]
 800206c:	4618      	mov	r0, r3
 800206e:	f000 f869 	bl	8002144 <decodeASCII>
 8002072:	4603      	mov	r3, r0
 8002074:	461a      	mov	r2, r3
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	482e      	ldr	r0, [pc, #184]	; (8002134 <HAL_UART_RxCpltCallback+0x14c>)
 800207a:	f7ff fa71 	bl	8001560 <writePageSPI_W>
 800207e:	e04e      	b.n	800211e <HAL_UART_RxCpltCallback+0x136>
	}

	// Software reset flash chip over SPI (data_rx[0] = "x")
	else if (UARTRxData[0] == 0x78) {
 8002080:	4b2b      	ldr	r3, [pc, #172]	; (8002130 <HAL_UART_RxCpltCallback+0x148>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b78      	cmp	r3, #120	; 0x78
 8002086:	d10b      	bne.n	80020a0 <HAL_UART_RxCpltCallback+0xb8>
		resetSPIFlash(&hspi1, huart, decodeASCII(UARTRxData[1]));
 8002088:	4b29      	ldr	r3, [pc, #164]	; (8002130 <HAL_UART_RxCpltCallback+0x148>)
 800208a:	785b      	ldrb	r3, [r3, #1]
 800208c:	4618      	mov	r0, r3
 800208e:	f000 f859 	bl	8002144 <decodeASCII>
 8002092:	4603      	mov	r3, r0
 8002094:	461a      	mov	r2, r3
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	4826      	ldr	r0, [pc, #152]	; (8002134 <HAL_UART_RxCpltCallback+0x14c>)
 800209a:	f7ff fab1 	bl	8001600 <resetSPIFlash>
 800209e:	e03e      	b.n	800211e <HAL_UART_RxCpltCallback+0x136>
	}

/*********************************** I2C Accelerometer ***********************************/
	// Read Accelerometer WhoAmI (data_rx[0] = "c")
	else if (UARTRxData[0] == 0x63) {
 80020a0:	4b23      	ldr	r3, [pc, #140]	; (8002130 <HAL_UART_RxCpltCallback+0x148>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b63      	cmp	r3, #99	; 0x63
 80020a6:	d104      	bne.n	80020b2 <HAL_UART_RxCpltCallback+0xca>
		checkAccelWhoAmI(&hi2c1, huart);
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	4823      	ldr	r0, [pc, #140]	; (8002138 <HAL_UART_RxCpltCallback+0x150>)
 80020ac:	f7ff fabe 	bl	800162c <checkAccelWhoAmI>
 80020b0:	e035      	b.n	800211e <HAL_UART_RxCpltCallback+0x136>
	}

	// Read the accelerometer and print to the UART[0] (data_rx [0] = "a")
	else if (UARTRxData[0] == 0x61) {
 80020b2:	4b1f      	ldr	r3, [pc, #124]	; (8002130 <HAL_UART_RxCpltCallback+0x148>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b61      	cmp	r3, #97	; 0x61
 80020b8:	d103      	bne.n	80020c2 <HAL_UART_RxCpltCallback+0xda>
		accelToUART(huart);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff faca 	bl	8001654 <accelToUART>
 80020c0:	e02d      	b.n	800211e <HAL_UART_RxCpltCallback+0x136>
	}


/********************************** I2C BME280 *******************************************/
	// Read the temp sensor ID and print to the UART[0] (data_rx [0]= "b")
	else if (UARTRxData[0] == 0x62) {
 80020c2:	4b1b      	ldr	r3, [pc, #108]	; (8002130 <HAL_UART_RxCpltCallback+0x148>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b62      	cmp	r3, #98	; 0x62
 80020c8:	d10b      	bne.n	80020e2 <HAL_UART_RxCpltCallback+0xfa>
		readTempSensorID(&hi2c2, huart, decodeASCII(UARTRxData[1]));
 80020ca:	4b19      	ldr	r3, [pc, #100]	; (8002130 <HAL_UART_RxCpltCallback+0x148>)
 80020cc:	785b      	ldrb	r3, [r3, #1]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f000 f838 	bl	8002144 <decodeASCII>
 80020d4:	4603      	mov	r3, r0
 80020d6:	461a      	mov	r2, r3
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	4818      	ldr	r0, [pc, #96]	; (800213c <HAL_UART_RxCpltCallback+0x154>)
 80020dc:	f7ff fad6 	bl	800168c <readTempSensorID>
 80020e0:	e01d      	b.n	800211e <HAL_UART_RxCpltCallback+0x136>
	}

	// Read the temp sensor calibration registers and print to the UART (data_rx[0] = "p")
	else if (UARTRxData[0] == 0x70) {
 80020e2:	4b13      	ldr	r3, [pc, #76]	; (8002130 <HAL_UART_RxCpltCallback+0x148>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b70      	cmp	r3, #112	; 0x70
 80020e8:	d10b      	bne.n	8002102 <HAL_UART_RxCpltCallback+0x11a>
		readTempCalibration(&hi2c2, huart, decodeASCII(UARTRxData[1]));
 80020ea:	4b11      	ldr	r3, [pc, #68]	; (8002130 <HAL_UART_RxCpltCallback+0x148>)
 80020ec:	785b      	ldrb	r3, [r3, #1]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 f828 	bl	8002144 <decodeASCII>
 80020f4:	4603      	mov	r3, r0
 80020f6:	461a      	mov	r2, r3
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	4810      	ldr	r0, [pc, #64]	; (800213c <HAL_UART_RxCpltCallback+0x154>)
 80020fc:	f7ff fadb 	bl	80016b6 <readTempCalibration>
 8002100:	e00d      	b.n	800211e <HAL_UART_RxCpltCallback+0x136>
	}

	// Read the temp sensor and print to the UART[0] (data_rx [0]= "t")
	else if (UARTRxData[0] == 0x74) {
 8002102:	4b0b      	ldr	r3, [pc, #44]	; (8002130 <HAL_UART_RxCpltCallback+0x148>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b74      	cmp	r3, #116	; 0x74
 8002108:	d109      	bne.n	800211e <HAL_UART_RxCpltCallback+0x136>
		readTempSensor(huart, decodeASCII(UARTRxData[1]));
 800210a:	4b09      	ldr	r3, [pc, #36]	; (8002130 <HAL_UART_RxCpltCallback+0x148>)
 800210c:	785b      	ldrb	r3, [r3, #1]
 800210e:	4618      	mov	r0, r3
 8002110:	f000 f818 	bl	8002144 <decodeASCII>
 8002114:	4603      	mov	r3, r0
 8002116:	4619      	mov	r1, r3
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7ff fb05 	bl	8001728 <readTempSensor>
	}

	HAL_UART_Receive_IT(&huart2, UARTRxData, 2);
 800211e:	2202      	movs	r2, #2
 8002120:	4903      	ldr	r1, [pc, #12]	; (8002130 <HAL_UART_RxCpltCallback+0x148>)
 8002122:	4807      	ldr	r0, [pc, #28]	; (8002140 <HAL_UART_RxCpltCallback+0x158>)
 8002124:	f004 f821 	bl	800616a <HAL_UART_Receive_IT>
}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	20000248 	.word	0x20000248
 8002134:	20000108 	.word	0x20000108
 8002138:	20000040 	.word	0x20000040
 800213c:	20000094 	.word	0x20000094
 8002140:	20000200 	.word	0x20000200

08002144 <decodeASCII>:

uint8_t decodeASCII(uint8_t asciiVal) {
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	71fb      	strb	r3, [r7, #7]
	int returnVal = -1;
 800214e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002152:	60fb      	str	r3, [r7, #12]
	if ((asciiVal >= 48) && (asciiVal <= 57)) {
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	2b2f      	cmp	r3, #47	; 0x2f
 8002158:	d905      	bls.n	8002166 <decodeASCII+0x22>
 800215a:	79fb      	ldrb	r3, [r7, #7]
 800215c:	2b39      	cmp	r3, #57	; 0x39
 800215e:	d802      	bhi.n	8002166 <decodeASCII+0x22>
		returnVal = asciiVal - 48;
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	3b30      	subs	r3, #48	; 0x30
 8002164:	60fb      	str	r3, [r7, #12]
	}
	return returnVal;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	b2db      	uxtb	r3, r3
}
 800216a:	4618      	mov	r0, r3
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
	...

08002178 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800217c:	4b06      	ldr	r3, [pc, #24]	; (8002198 <SystemInit+0x20>)
 800217e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002182:	4a05      	ldr	r2, [pc, #20]	; (8002198 <SystemInit+0x20>)
 8002184:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002188:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	e000ed00 	.word	0xe000ed00

0800219c <uart_transmit_page>:

#include "uart_transmit.h"
/**
 * Transmit one single page over the UART interface
 */
void uart_transmit_page(UART_HandleTypeDef *huart, uint8_t page[PAGE_SIZE]) {
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huart, page, PAGE_SIZE, HAL_MAX_DELAY);
 80021a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021ae:	6839      	ldr	r1, [r7, #0]
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f003 ff4f 	bl	8006054 <HAL_UART_Transmit>
}
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <send_uart_string>:

void send_uart_string(UART_HandleTypeDef *huart, const char *str) {
 80021be:	b580      	push	{r7, lr}
 80021c0:	b082      	sub	sp, #8
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
 80021c6:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 80021c8:	6838      	ldr	r0, [r7, #0]
 80021ca:	f7fe f80f 	bl	80001ec <strlen>
 80021ce:	4603      	mov	r3, r0
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021d6:	6839      	ldr	r1, [r7, #0]
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f003 ff3b 	bl	8006054 <HAL_UART_Transmit>
}
 80021de:	bf00      	nop
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <send_uart_hex>:
	// Call the send_uart_string function to send the value to UART
	send_uart_string(huart, value_str);
	send_uart_string(huart, "\r\n");
}

void send_uart_hex(UART_HandleTypeDef *huart, uint8_t value) {
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b084      	sub	sp, #16
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
 80021ee:	460b      	mov	r3, r1
 80021f0:	70fb      	strb	r3, [r7, #3]
	uint8_t buffer[1];
	buffer[0] = value;
 80021f2:	78fb      	ldrb	r3, [r7, #3]
 80021f4:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(huart, buffer, 1, HAL_MAX_DELAY);
 80021f6:	f107 010c 	add.w	r1, r7, #12
 80021fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021fe:	2201      	movs	r2, #1
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f003 ff27 	bl	8006054 <HAL_UART_Transmit>
}
 8002206:	bf00      	nop
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
	...

08002210 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002210:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002248 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002214:	f7ff ffb0 	bl	8002178 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002218:	480c      	ldr	r0, [pc, #48]	; (800224c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800221a:	490d      	ldr	r1, [pc, #52]	; (8002250 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800221c:	4a0d      	ldr	r2, [pc, #52]	; (8002254 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800221e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002220:	e002      	b.n	8002228 <LoopCopyDataInit>

08002222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002226:	3304      	adds	r3, #4

08002228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800222a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800222c:	d3f9      	bcc.n	8002222 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800222e:	4a0a      	ldr	r2, [pc, #40]	; (8002258 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002230:	4c0a      	ldr	r4, [pc, #40]	; (800225c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002234:	e001      	b.n	800223a <LoopFillZerobss>

08002236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002238:	3204      	adds	r2, #4

0800223a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800223a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800223c:	d3fb      	bcc.n	8002236 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800223e:	f004 ff17 	bl	8007070 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002242:	f7fe fd34 	bl	8000cae <main>
  bx  lr    
 8002246:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002248:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800224c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002250:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8002254:	08007198 	.word	0x08007198
  ldr r2, =_sbss
 8002258:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 800225c:	20000488 	.word	0x20000488

08002260 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002260:	e7fe      	b.n	8002260 <ADC_IRQHandler>
	...

08002264 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002268:	4b0e      	ldr	r3, [pc, #56]	; (80022a4 <HAL_Init+0x40>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a0d      	ldr	r2, [pc, #52]	; (80022a4 <HAL_Init+0x40>)
 800226e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002272:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002274:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <HAL_Init+0x40>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a0a      	ldr	r2, [pc, #40]	; (80022a4 <HAL_Init+0x40>)
 800227a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800227e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002280:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <HAL_Init+0x40>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a07      	ldr	r2, [pc, #28]	; (80022a4 <HAL_Init+0x40>)
 8002286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800228a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800228c:	2003      	movs	r0, #3
 800228e:	f000 f94f 	bl	8002530 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002292:	200f      	movs	r0, #15
 8002294:	f000 f808 	bl	80022a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002298:	f7ff fc78 	bl	8001b8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40023c00 	.word	0x40023c00

080022a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022b0:	4b12      	ldr	r3, [pc, #72]	; (80022fc <HAL_InitTick+0x54>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4b12      	ldr	r3, [pc, #72]	; (8002300 <HAL_InitTick+0x58>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	4619      	mov	r1, r3
 80022ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022be:	fbb3 f3f1 	udiv	r3, r3, r1
 80022c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c6:	4618      	mov	r0, r3
 80022c8:	f000 f967 	bl	800259a <HAL_SYSTICK_Config>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e00e      	b.n	80022f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b0f      	cmp	r3, #15
 80022da:	d80a      	bhi.n	80022f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022dc:	2200      	movs	r2, #0
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022e4:	f000 f92f 	bl	8002546 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022e8:	4a06      	ldr	r2, [pc, #24]	; (8002304 <HAL_InitTick+0x5c>)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
 80022f0:	e000      	b.n	80022f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	20000018 	.word	0x20000018
 8002300:	20000020 	.word	0x20000020
 8002304:	2000001c 	.word	0x2000001c

08002308 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800230c:	4b06      	ldr	r3, [pc, #24]	; (8002328 <HAL_IncTick+0x20>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	461a      	mov	r2, r3
 8002312:	4b06      	ldr	r3, [pc, #24]	; (800232c <HAL_IncTick+0x24>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4413      	add	r3, r2
 8002318:	4a04      	ldr	r2, [pc, #16]	; (800232c <HAL_IncTick+0x24>)
 800231a:	6013      	str	r3, [r2, #0]
}
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	20000020 	.word	0x20000020
 800232c:	20000484 	.word	0x20000484

08002330 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  return uwTick;
 8002334:	4b03      	ldr	r3, [pc, #12]	; (8002344 <HAL_GetTick+0x14>)
 8002336:	681b      	ldr	r3, [r3, #0]
}
 8002338:	4618      	mov	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	20000484 	.word	0x20000484

08002348 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002350:	f7ff ffee 	bl	8002330 <HAL_GetTick>
 8002354:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002360:	d005      	beq.n	800236e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002362:	4b0a      	ldr	r3, [pc, #40]	; (800238c <HAL_Delay+0x44>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	461a      	mov	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	4413      	add	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800236e:	bf00      	nop
 8002370:	f7ff ffde 	bl	8002330 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	429a      	cmp	r2, r3
 800237e:	d8f7      	bhi.n	8002370 <HAL_Delay+0x28>
  {
  }
}
 8002380:	bf00      	nop
 8002382:	bf00      	nop
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20000020 	.word	0x20000020

08002390 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023a0:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <__NVIC_SetPriorityGrouping+0x44>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023ac:	4013      	ands	r3, r2
 80023ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023c2:	4a04      	ldr	r2, [pc, #16]	; (80023d4 <__NVIC_SetPriorityGrouping+0x44>)
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	60d3      	str	r3, [r2, #12]
}
 80023c8:	bf00      	nop
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	e000ed00 	.word	0xe000ed00

080023d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023dc:	4b04      	ldr	r3, [pc, #16]	; (80023f0 <__NVIC_GetPriorityGrouping+0x18>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	0a1b      	lsrs	r3, r3, #8
 80023e2:	f003 0307 	and.w	r3, r3, #7
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002402:	2b00      	cmp	r3, #0
 8002404:	db0b      	blt.n	800241e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002406:	79fb      	ldrb	r3, [r7, #7]
 8002408:	f003 021f 	and.w	r2, r3, #31
 800240c:	4907      	ldr	r1, [pc, #28]	; (800242c <__NVIC_EnableIRQ+0x38>)
 800240e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002412:	095b      	lsrs	r3, r3, #5
 8002414:	2001      	movs	r0, #1
 8002416:	fa00 f202 	lsl.w	r2, r0, r2
 800241a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	e000e100 	.word	0xe000e100

08002430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	6039      	str	r1, [r7, #0]
 800243a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800243c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002440:	2b00      	cmp	r3, #0
 8002442:	db0a      	blt.n	800245a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	b2da      	uxtb	r2, r3
 8002448:	490c      	ldr	r1, [pc, #48]	; (800247c <__NVIC_SetPriority+0x4c>)
 800244a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244e:	0112      	lsls	r2, r2, #4
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	440b      	add	r3, r1
 8002454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002458:	e00a      	b.n	8002470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	b2da      	uxtb	r2, r3
 800245e:	4908      	ldr	r1, [pc, #32]	; (8002480 <__NVIC_SetPriority+0x50>)
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	3b04      	subs	r3, #4
 8002468:	0112      	lsls	r2, r2, #4
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	440b      	add	r3, r1
 800246e:	761a      	strb	r2, [r3, #24]
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	e000e100 	.word	0xe000e100
 8002480:	e000ed00 	.word	0xe000ed00

08002484 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002484:	b480      	push	{r7}
 8002486:	b089      	sub	sp, #36	; 0x24
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f1c3 0307 	rsb	r3, r3, #7
 800249e:	2b04      	cmp	r3, #4
 80024a0:	bf28      	it	cs
 80024a2:	2304      	movcs	r3, #4
 80024a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	3304      	adds	r3, #4
 80024aa:	2b06      	cmp	r3, #6
 80024ac:	d902      	bls.n	80024b4 <NVIC_EncodePriority+0x30>
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	3b03      	subs	r3, #3
 80024b2:	e000      	b.n	80024b6 <NVIC_EncodePriority+0x32>
 80024b4:	2300      	movs	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	43da      	mvns	r2, r3
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	401a      	ands	r2, r3
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	fa01 f303 	lsl.w	r3, r1, r3
 80024d6:	43d9      	mvns	r1, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024dc:	4313      	orrs	r3, r2
         );
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3724      	adds	r7, #36	; 0x24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
	...

080024ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024fc:	d301      	bcc.n	8002502 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024fe:	2301      	movs	r3, #1
 8002500:	e00f      	b.n	8002522 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002502:	4a0a      	ldr	r2, [pc, #40]	; (800252c <SysTick_Config+0x40>)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3b01      	subs	r3, #1
 8002508:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800250a:	210f      	movs	r1, #15
 800250c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002510:	f7ff ff8e 	bl	8002430 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <SysTick_Config+0x40>)
 8002516:	2200      	movs	r2, #0
 8002518:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800251a:	4b04      	ldr	r3, [pc, #16]	; (800252c <SysTick_Config+0x40>)
 800251c:	2207      	movs	r2, #7
 800251e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	e000e010 	.word	0xe000e010

08002530 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f7ff ff29 	bl	8002390 <__NVIC_SetPriorityGrouping>
}
 800253e:	bf00      	nop
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002546:	b580      	push	{r7, lr}
 8002548:	b086      	sub	sp, #24
 800254a:	af00      	add	r7, sp, #0
 800254c:	4603      	mov	r3, r0
 800254e:	60b9      	str	r1, [r7, #8]
 8002550:	607a      	str	r2, [r7, #4]
 8002552:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002558:	f7ff ff3e 	bl	80023d8 <__NVIC_GetPriorityGrouping>
 800255c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	68b9      	ldr	r1, [r7, #8]
 8002562:	6978      	ldr	r0, [r7, #20]
 8002564:	f7ff ff8e 	bl	8002484 <NVIC_EncodePriority>
 8002568:	4602      	mov	r2, r0
 800256a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800256e:	4611      	mov	r1, r2
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff ff5d 	bl	8002430 <__NVIC_SetPriority>
}
 8002576:	bf00      	nop
 8002578:	3718      	adds	r7, #24
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
 8002584:	4603      	mov	r3, r0
 8002586:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff ff31 	bl	80023f4 <__NVIC_EnableIRQ>
}
 8002592:	bf00      	nop
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b082      	sub	sp, #8
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7ff ffa2 	bl	80024ec <SysTick_Config>
 80025a8:	4603      	mov	r3, r0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b084      	sub	sp, #16
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025be:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80025c0:	f7ff feb6 	bl	8002330 <HAL_GetTick>
 80025c4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d008      	beq.n	80025e4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2280      	movs	r2, #128	; 0x80
 80025d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e052      	b.n	800268a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0216 	bic.w	r2, r2, #22
 80025f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	695a      	ldr	r2, [r3, #20]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002602:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002608:	2b00      	cmp	r3, #0
 800260a:	d103      	bne.n	8002614 <HAL_DMA_Abort+0x62>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002610:	2b00      	cmp	r3, #0
 8002612:	d007      	beq.n	8002624 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0208 	bic.w	r2, r2, #8
 8002622:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f022 0201 	bic.w	r2, r2, #1
 8002632:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002634:	e013      	b.n	800265e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002636:	f7ff fe7b 	bl	8002330 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b05      	cmp	r3, #5
 8002642:	d90c      	bls.n	800265e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2220      	movs	r2, #32
 8002648:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2203      	movs	r2, #3
 800264e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e015      	b.n	800268a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1e4      	bne.n	8002636 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002670:	223f      	movs	r2, #63	; 0x3f
 8002672:	409a      	lsls	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d004      	beq.n	80026b0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2280      	movs	r2, #128	; 0x80
 80026aa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e00c      	b.n	80026ca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2205      	movs	r2, #5
 80026b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 0201 	bic.w	r2, r2, #1
 80026c6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
	...

080026d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026d8:	b480      	push	{r7}
 80026da:	b089      	sub	sp, #36	; 0x24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026e6:	2300      	movs	r3, #0
 80026e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026ea:	2300      	movs	r3, #0
 80026ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ee:	2300      	movs	r3, #0
 80026f0:	61fb      	str	r3, [r7, #28]
 80026f2:	e177      	b.n	80029e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026f4:	2201      	movs	r2, #1
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	4013      	ands	r3, r2
 8002706:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	429a      	cmp	r2, r3
 800270e:	f040 8166 	bne.w	80029de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	2b01      	cmp	r3, #1
 800271c:	d005      	beq.n	800272a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002726:	2b02      	cmp	r3, #2
 8002728:	d130      	bne.n	800278c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	2203      	movs	r2, #3
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	43db      	mvns	r3, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4013      	ands	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	68da      	ldr	r2, [r3, #12]
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	4313      	orrs	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002760:	2201      	movs	r2, #1
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	43db      	mvns	r3, r3
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4013      	ands	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	091b      	lsrs	r3, r3, #4
 8002776:	f003 0201 	and.w	r2, r3, #1
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4313      	orrs	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 0303 	and.w	r3, r3, #3
 8002794:	2b03      	cmp	r3, #3
 8002796:	d017      	beq.n	80027c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	2203      	movs	r2, #3
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	43db      	mvns	r3, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4313      	orrs	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f003 0303 	and.w	r3, r3, #3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d123      	bne.n	800281c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	08da      	lsrs	r2, r3, #3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3208      	adds	r2, #8
 80027dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	220f      	movs	r2, #15
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4013      	ands	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	691a      	ldr	r2, [r3, #16]
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4313      	orrs	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	08da      	lsrs	r2, r3, #3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	3208      	adds	r2, #8
 8002816:	69b9      	ldr	r1, [r7, #24]
 8002818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	2203      	movs	r2, #3
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	43db      	mvns	r3, r3
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	4013      	ands	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f003 0203 	and.w	r2, r3, #3
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	4313      	orrs	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 80c0 	beq.w	80029de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	60fb      	str	r3, [r7, #12]
 8002862:	4b66      	ldr	r3, [pc, #408]	; (80029fc <HAL_GPIO_Init+0x324>)
 8002864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002866:	4a65      	ldr	r2, [pc, #404]	; (80029fc <HAL_GPIO_Init+0x324>)
 8002868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800286c:	6453      	str	r3, [r2, #68]	; 0x44
 800286e:	4b63      	ldr	r3, [pc, #396]	; (80029fc <HAL_GPIO_Init+0x324>)
 8002870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800287a:	4a61      	ldr	r2, [pc, #388]	; (8002a00 <HAL_GPIO_Init+0x328>)
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	089b      	lsrs	r3, r3, #2
 8002880:	3302      	adds	r3, #2
 8002882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002886:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	f003 0303 	and.w	r3, r3, #3
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	220f      	movs	r2, #15
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43db      	mvns	r3, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4013      	ands	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a58      	ldr	r2, [pc, #352]	; (8002a04 <HAL_GPIO_Init+0x32c>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d037      	beq.n	8002916 <HAL_GPIO_Init+0x23e>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a57      	ldr	r2, [pc, #348]	; (8002a08 <HAL_GPIO_Init+0x330>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d031      	beq.n	8002912 <HAL_GPIO_Init+0x23a>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a56      	ldr	r2, [pc, #344]	; (8002a0c <HAL_GPIO_Init+0x334>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d02b      	beq.n	800290e <HAL_GPIO_Init+0x236>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a55      	ldr	r2, [pc, #340]	; (8002a10 <HAL_GPIO_Init+0x338>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d025      	beq.n	800290a <HAL_GPIO_Init+0x232>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a54      	ldr	r2, [pc, #336]	; (8002a14 <HAL_GPIO_Init+0x33c>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d01f      	beq.n	8002906 <HAL_GPIO_Init+0x22e>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a53      	ldr	r2, [pc, #332]	; (8002a18 <HAL_GPIO_Init+0x340>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d019      	beq.n	8002902 <HAL_GPIO_Init+0x22a>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a52      	ldr	r2, [pc, #328]	; (8002a1c <HAL_GPIO_Init+0x344>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d013      	beq.n	80028fe <HAL_GPIO_Init+0x226>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a51      	ldr	r2, [pc, #324]	; (8002a20 <HAL_GPIO_Init+0x348>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d00d      	beq.n	80028fa <HAL_GPIO_Init+0x222>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a50      	ldr	r2, [pc, #320]	; (8002a24 <HAL_GPIO_Init+0x34c>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d007      	beq.n	80028f6 <HAL_GPIO_Init+0x21e>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a4f      	ldr	r2, [pc, #316]	; (8002a28 <HAL_GPIO_Init+0x350>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d101      	bne.n	80028f2 <HAL_GPIO_Init+0x21a>
 80028ee:	2309      	movs	r3, #9
 80028f0:	e012      	b.n	8002918 <HAL_GPIO_Init+0x240>
 80028f2:	230a      	movs	r3, #10
 80028f4:	e010      	b.n	8002918 <HAL_GPIO_Init+0x240>
 80028f6:	2308      	movs	r3, #8
 80028f8:	e00e      	b.n	8002918 <HAL_GPIO_Init+0x240>
 80028fa:	2307      	movs	r3, #7
 80028fc:	e00c      	b.n	8002918 <HAL_GPIO_Init+0x240>
 80028fe:	2306      	movs	r3, #6
 8002900:	e00a      	b.n	8002918 <HAL_GPIO_Init+0x240>
 8002902:	2305      	movs	r3, #5
 8002904:	e008      	b.n	8002918 <HAL_GPIO_Init+0x240>
 8002906:	2304      	movs	r3, #4
 8002908:	e006      	b.n	8002918 <HAL_GPIO_Init+0x240>
 800290a:	2303      	movs	r3, #3
 800290c:	e004      	b.n	8002918 <HAL_GPIO_Init+0x240>
 800290e:	2302      	movs	r3, #2
 8002910:	e002      	b.n	8002918 <HAL_GPIO_Init+0x240>
 8002912:	2301      	movs	r3, #1
 8002914:	e000      	b.n	8002918 <HAL_GPIO_Init+0x240>
 8002916:	2300      	movs	r3, #0
 8002918:	69fa      	ldr	r2, [r7, #28]
 800291a:	f002 0203 	and.w	r2, r2, #3
 800291e:	0092      	lsls	r2, r2, #2
 8002920:	4093      	lsls	r3, r2
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4313      	orrs	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002928:	4935      	ldr	r1, [pc, #212]	; (8002a00 <HAL_GPIO_Init+0x328>)
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	089b      	lsrs	r3, r3, #2
 800292e:	3302      	adds	r3, #2
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002936:	4b3d      	ldr	r3, [pc, #244]	; (8002a2c <HAL_GPIO_Init+0x354>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	43db      	mvns	r3, r3
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4013      	ands	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	4313      	orrs	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800295a:	4a34      	ldr	r2, [pc, #208]	; (8002a2c <HAL_GPIO_Init+0x354>)
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002960:	4b32      	ldr	r3, [pc, #200]	; (8002a2c <HAL_GPIO_Init+0x354>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	43db      	mvns	r3, r3
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4013      	ands	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	4313      	orrs	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002984:	4a29      	ldr	r2, [pc, #164]	; (8002a2c <HAL_GPIO_Init+0x354>)
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800298a:	4b28      	ldr	r3, [pc, #160]	; (8002a2c <HAL_GPIO_Init+0x354>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	43db      	mvns	r3, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4013      	ands	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029ae:	4a1f      	ldr	r2, [pc, #124]	; (8002a2c <HAL_GPIO_Init+0x354>)
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029b4:	4b1d      	ldr	r3, [pc, #116]	; (8002a2c <HAL_GPIO_Init+0x354>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	43db      	mvns	r3, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4013      	ands	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029d8:	4a14      	ldr	r2, [pc, #80]	; (8002a2c <HAL_GPIO_Init+0x354>)
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	3301      	adds	r3, #1
 80029e2:	61fb      	str	r3, [r7, #28]
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	2b0f      	cmp	r3, #15
 80029e8:	f67f ae84 	bls.w	80026f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029ec:	bf00      	nop
 80029ee:	bf00      	nop
 80029f0:	3724      	adds	r7, #36	; 0x24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	40023800 	.word	0x40023800
 8002a00:	40013800 	.word	0x40013800
 8002a04:	40020000 	.word	0x40020000
 8002a08:	40020400 	.word	0x40020400
 8002a0c:	40020800 	.word	0x40020800
 8002a10:	40020c00 	.word	0x40020c00
 8002a14:	40021000 	.word	0x40021000
 8002a18:	40021400 	.word	0x40021400
 8002a1c:	40021800 	.word	0x40021800
 8002a20:	40021c00 	.word	0x40021c00
 8002a24:	40022000 	.word	0x40022000
 8002a28:	40022400 	.word	0x40022400
 8002a2c:	40013c00 	.word	0x40013c00

08002a30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	460b      	mov	r3, r1
 8002a3a:	807b      	strh	r3, [r7, #2]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a40:	787b      	ldrb	r3, [r7, #1]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a46:	887a      	ldrh	r2, [r7, #2]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a4c:	e003      	b.n	8002a56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a4e:	887b      	ldrh	r3, [r7, #2]
 8002a50:	041a      	lsls	r2, r3, #16
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	619a      	str	r2, [r3, #24]
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b085      	sub	sp, #20
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a74:	887a      	ldrh	r2, [r7, #2]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	041a      	lsls	r2, r3, #16
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	43d9      	mvns	r1, r3
 8002a80:	887b      	ldrh	r3, [r7, #2]
 8002a82:	400b      	ands	r3, r1
 8002a84:	431a      	orrs	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	619a      	str	r2, [r3, #24]
}
 8002a8a:	bf00      	nop
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
	...

08002a98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e12b      	b.n	8002d02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d106      	bne.n	8002ac4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7ff f88c 	bl	8001bdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2224      	movs	r2, #36	; 0x24
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0201 	bic.w	r2, r2, #1
 8002ada:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002aea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002afa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002afc:	f001 fc72 	bl	80043e4 <HAL_RCC_GetPCLK1Freq>
 8002b00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	4a81      	ldr	r2, [pc, #516]	; (8002d0c <HAL_I2C_Init+0x274>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d807      	bhi.n	8002b1c <HAL_I2C_Init+0x84>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	4a80      	ldr	r2, [pc, #512]	; (8002d10 <HAL_I2C_Init+0x278>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	bf94      	ite	ls
 8002b14:	2301      	movls	r3, #1
 8002b16:	2300      	movhi	r3, #0
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	e006      	b.n	8002b2a <HAL_I2C_Init+0x92>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4a7d      	ldr	r2, [pc, #500]	; (8002d14 <HAL_I2C_Init+0x27c>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	bf94      	ite	ls
 8002b24:	2301      	movls	r3, #1
 8002b26:	2300      	movhi	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e0e7      	b.n	8002d02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	4a78      	ldr	r2, [pc, #480]	; (8002d18 <HAL_I2C_Init+0x280>)
 8002b36:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3a:	0c9b      	lsrs	r3, r3, #18
 8002b3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	4a6a      	ldr	r2, [pc, #424]	; (8002d0c <HAL_I2C_Init+0x274>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d802      	bhi.n	8002b6c <HAL_I2C_Init+0xd4>
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	e009      	b.n	8002b80 <HAL_I2C_Init+0xe8>
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b72:	fb02 f303 	mul.w	r3, r2, r3
 8002b76:	4a69      	ldr	r2, [pc, #420]	; (8002d1c <HAL_I2C_Init+0x284>)
 8002b78:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7c:	099b      	lsrs	r3, r3, #6
 8002b7e:	3301      	adds	r3, #1
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6812      	ldr	r2, [r2, #0]
 8002b84:	430b      	orrs	r3, r1
 8002b86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	495c      	ldr	r1, [pc, #368]	; (8002d0c <HAL_I2C_Init+0x274>)
 8002b9c:	428b      	cmp	r3, r1
 8002b9e:	d819      	bhi.n	8002bd4 <HAL_I2C_Init+0x13c>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	1e59      	subs	r1, r3, #1
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bae:	1c59      	adds	r1, r3, #1
 8002bb0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002bb4:	400b      	ands	r3, r1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00a      	beq.n	8002bd0 <HAL_I2C_Init+0x138>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	1e59      	subs	r1, r3, #1
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bc8:	3301      	adds	r3, #1
 8002bca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bce:	e051      	b.n	8002c74 <HAL_I2C_Init+0x1dc>
 8002bd0:	2304      	movs	r3, #4
 8002bd2:	e04f      	b.n	8002c74 <HAL_I2C_Init+0x1dc>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d111      	bne.n	8002c00 <HAL_I2C_Init+0x168>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	1e58      	subs	r0, r3, #1
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6859      	ldr	r1, [r3, #4]
 8002be4:	460b      	mov	r3, r1
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	440b      	add	r3, r1
 8002bea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bee:	3301      	adds	r3, #1
 8002bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	bf0c      	ite	eq
 8002bf8:	2301      	moveq	r3, #1
 8002bfa:	2300      	movne	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	e012      	b.n	8002c26 <HAL_I2C_Init+0x18e>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	1e58      	subs	r0, r3, #1
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6859      	ldr	r1, [r3, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	0099      	lsls	r1, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c16:	3301      	adds	r3, #1
 8002c18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	bf0c      	ite	eq
 8002c20:	2301      	moveq	r3, #1
 8002c22:	2300      	movne	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_I2C_Init+0x196>
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e022      	b.n	8002c74 <HAL_I2C_Init+0x1dc>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10e      	bne.n	8002c54 <HAL_I2C_Init+0x1bc>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	1e58      	subs	r0, r3, #1
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6859      	ldr	r1, [r3, #4]
 8002c3e:	460b      	mov	r3, r1
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	440b      	add	r3, r1
 8002c44:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c48:	3301      	adds	r3, #1
 8002c4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c52:	e00f      	b.n	8002c74 <HAL_I2C_Init+0x1dc>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	1e58      	subs	r0, r3, #1
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6859      	ldr	r1, [r3, #4]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	0099      	lsls	r1, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	6809      	ldr	r1, [r1, #0]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69da      	ldr	r2, [r3, #28]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ca2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	6911      	ldr	r1, [r2, #16]
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	68d2      	ldr	r2, [r2, #12]
 8002cae:	4311      	orrs	r1, r2
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6812      	ldr	r2, [r2, #0]
 8002cb4:	430b      	orrs	r3, r1
 8002cb6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	695a      	ldr	r2, [r3, #20]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0201 	orr.w	r2, r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2220      	movs	r2, #32
 8002cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	000186a0 	.word	0x000186a0
 8002d10:	001e847f 	.word	0x001e847f
 8002d14:	003d08ff 	.word	0x003d08ff
 8002d18:	431bde83 	.word	0x431bde83
 8002d1c:	10624dd3 	.word	0x10624dd3

08002d20 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b088      	sub	sp, #32
 8002d24:	af02      	add	r7, sp, #8
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	607a      	str	r2, [r7, #4]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	817b      	strh	r3, [r7, #10]
 8002d30:	4613      	mov	r3, r2
 8002d32:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d34:	f7ff fafc 	bl	8002330 <HAL_GetTick>
 8002d38:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b20      	cmp	r3, #32
 8002d44:	f040 80e0 	bne.w	8002f08 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	2319      	movs	r3, #25
 8002d4e:	2201      	movs	r2, #1
 8002d50:	4970      	ldr	r1, [pc, #448]	; (8002f14 <HAL_I2C_Master_Transmit+0x1f4>)
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 fc64 	bl	8003620 <I2C_WaitOnFlagUntilTimeout>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d5e:	2302      	movs	r3, #2
 8002d60:	e0d3      	b.n	8002f0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d101      	bne.n	8002d70 <HAL_I2C_Master_Transmit+0x50>
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	e0cc      	b.n	8002f0a <HAL_I2C_Master_Transmit+0x1ea>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d007      	beq.n	8002d96 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f042 0201 	orr.w	r2, r2, #1
 8002d94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002da4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2221      	movs	r2, #33	; 0x21
 8002daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2210      	movs	r2, #16
 8002db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	893a      	ldrh	r2, [r7, #8]
 8002dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	4a50      	ldr	r2, [pc, #320]	; (8002f18 <HAL_I2C_Master_Transmit+0x1f8>)
 8002dd6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002dd8:	8979      	ldrh	r1, [r7, #10]
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	6a3a      	ldr	r2, [r7, #32]
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 face 	bl	8003380 <I2C_MasterRequestWrite>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e08d      	b.n	8002f0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dee:	2300      	movs	r3, #0
 8002df0:	613b      	str	r3, [r7, #16]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	613b      	str	r3, [r7, #16]
 8002e02:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e04:	e066      	b.n	8002ed4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	6a39      	ldr	r1, [r7, #32]
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 fd22 	bl	8003854 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00d      	beq.n	8002e32 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d107      	bne.n	8002e2e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e2c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e06b      	b.n	8002f0a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	781a      	ldrb	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e42:	1c5a      	adds	r2, r3, #1
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b04      	cmp	r3, #4
 8002e6e:	d11b      	bne.n	8002ea8 <HAL_I2C_Master_Transmit+0x188>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d017      	beq.n	8002ea8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	781a      	ldrb	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e88:	1c5a      	adds	r2, r3, #1
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	3b01      	subs	r3, #1
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	6a39      	ldr	r1, [r7, #32]
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f000 fd19 	bl	80038e4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00d      	beq.n	8002ed4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebc:	2b04      	cmp	r3, #4
 8002ebe:	d107      	bne.n	8002ed0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ece:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e01a      	b.n	8002f0a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d194      	bne.n	8002e06 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f04:	2300      	movs	r3, #0
 8002f06:	e000      	b.n	8002f0a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f08:	2302      	movs	r3, #2
  }
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3718      	adds	r7, #24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	00100002 	.word	0x00100002
 8002f18:	ffff0000 	.word	0xffff0000

08002f1c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b08c      	sub	sp, #48	; 0x30
 8002f20:	af02      	add	r7, sp, #8
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	607a      	str	r2, [r7, #4]
 8002f26:	461a      	mov	r2, r3
 8002f28:	460b      	mov	r3, r1
 8002f2a:	817b      	strh	r3, [r7, #10]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f30:	f7ff f9fe 	bl	8002330 <HAL_GetTick>
 8002f34:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b20      	cmp	r3, #32
 8002f40:	f040 8217 	bne.w	8003372 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	2319      	movs	r3, #25
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	497c      	ldr	r1, [pc, #496]	; (8003140 <HAL_I2C_Master_Receive+0x224>)
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 fb66 	bl	8003620 <I2C_WaitOnFlagUntilTimeout>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	e20a      	b.n	8003374 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d101      	bne.n	8002f6c <HAL_I2C_Master_Receive+0x50>
 8002f68:	2302      	movs	r3, #2
 8002f6a:	e203      	b.n	8003374 <HAL_I2C_Master_Receive+0x458>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d007      	beq.n	8002f92 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f042 0201 	orr.w	r2, r2, #1
 8002f90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fa0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2222      	movs	r2, #34	; 0x22
 8002fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2210      	movs	r2, #16
 8002fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	893a      	ldrh	r2, [r7, #8]
 8002fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	4a5c      	ldr	r2, [pc, #368]	; (8003144 <HAL_I2C_Master_Receive+0x228>)
 8002fd2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002fd4:	8979      	ldrh	r1, [r7, #10]
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 fa52 	bl	8003484 <I2C_MasterRequestRead>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e1c4      	b.n	8003374 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d113      	bne.n	800301a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	623b      	str	r3, [r7, #32]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	623b      	str	r3, [r7, #32]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	623b      	str	r3, [r7, #32]
 8003006:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	e198      	b.n	800334c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800301e:	2b01      	cmp	r3, #1
 8003020:	d11b      	bne.n	800305a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003030:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003032:	2300      	movs	r3, #0
 8003034:	61fb      	str	r3, [r7, #28]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	61fb      	str	r3, [r7, #28]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	61fb      	str	r3, [r7, #28]
 8003046:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	e178      	b.n	800334c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800305e:	2b02      	cmp	r3, #2
 8003060:	d11b      	bne.n	800309a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003070:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003080:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003082:	2300      	movs	r3, #0
 8003084:	61bb      	str	r3, [r7, #24]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	61bb      	str	r3, [r7, #24]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	61bb      	str	r3, [r7, #24]
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	e158      	b.n	800334c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030aa:	2300      	movs	r3, #0
 80030ac:	617b      	str	r3, [r7, #20]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	617b      	str	r3, [r7, #20]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	617b      	str	r3, [r7, #20]
 80030be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80030c0:	e144      	b.n	800334c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c6:	2b03      	cmp	r3, #3
 80030c8:	f200 80f1 	bhi.w	80032ae <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d123      	bne.n	800311c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 fc4b 	bl	8003974 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e145      	b.n	8003374 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	691a      	ldr	r2, [r3, #16]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	b2d2      	uxtb	r2, r2
 80030f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fa:	1c5a      	adds	r2, r3, #1
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003104:	3b01      	subs	r3, #1
 8003106:	b29a      	uxth	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003110:	b29b      	uxth	r3, r3
 8003112:	3b01      	subs	r3, #1
 8003114:	b29a      	uxth	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	855a      	strh	r2, [r3, #42]	; 0x2a
 800311a:	e117      	b.n	800334c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003120:	2b02      	cmp	r3, #2
 8003122:	d14e      	bne.n	80031c2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312a:	2200      	movs	r2, #0
 800312c:	4906      	ldr	r1, [pc, #24]	; (8003148 <HAL_I2C_Master_Receive+0x22c>)
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f000 fa76 	bl	8003620 <I2C_WaitOnFlagUntilTimeout>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d008      	beq.n	800314c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e11a      	b.n	8003374 <HAL_I2C_Master_Receive+0x458>
 800313e:	bf00      	nop
 8003140:	00100002 	.word	0x00100002
 8003144:	ffff0000 	.word	0xffff0000
 8003148:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800315a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	691a      	ldr	r2, [r3, #16]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	1c5a      	adds	r2, r3, #1
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003178:	3b01      	subs	r3, #1
 800317a:	b29a      	uxth	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003184:	b29b      	uxth	r3, r3
 8003186:	3b01      	subs	r3, #1
 8003188:	b29a      	uxth	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	691a      	ldr	r2, [r3, #16]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	b2d2      	uxtb	r2, r2
 800319a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	1c5a      	adds	r2, r3, #1
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031aa:	3b01      	subs	r3, #1
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	3b01      	subs	r3, #1
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031c0:	e0c4      	b.n	800334c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c8:	2200      	movs	r2, #0
 80031ca:	496c      	ldr	r1, [pc, #432]	; (800337c <HAL_I2C_Master_Receive+0x460>)
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f000 fa27 	bl	8003620 <I2C_WaitOnFlagUntilTimeout>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e0cb      	b.n	8003374 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	691a      	ldr	r2, [r3, #16]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	1c5a      	adds	r2, r3, #1
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003208:	3b01      	subs	r3, #1
 800320a:	b29a      	uxth	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003214:	b29b      	uxth	r3, r3
 8003216:	3b01      	subs	r3, #1
 8003218:	b29a      	uxth	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003224:	2200      	movs	r2, #0
 8003226:	4955      	ldr	r1, [pc, #340]	; (800337c <HAL_I2C_Master_Receive+0x460>)
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 f9f9 	bl	8003620 <I2C_WaitOnFlagUntilTimeout>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e09d      	b.n	8003374 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003246:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	691a      	ldr	r2, [r3, #16]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	1c5a      	adds	r2, r3, #1
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003264:	3b01      	subs	r3, #1
 8003266:	b29a      	uxth	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003270:	b29b      	uxth	r3, r3
 8003272:	3b01      	subs	r3, #1
 8003274:	b29a      	uxth	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	691a      	ldr	r2, [r3, #16]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328c:	1c5a      	adds	r2, r3, #1
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003296:	3b01      	subs	r3, #1
 8003298:	b29a      	uxth	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	3b01      	subs	r3, #1
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032ac:	e04e      	b.n	800334c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 fb5e 	bl	8003974 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e058      	b.n	8003374 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	691a      	ldr	r2, [r3, #16]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d4:	1c5a      	adds	r2, r3, #1
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032de:	3b01      	subs	r3, #1
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	3b01      	subs	r3, #1
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	f003 0304 	and.w	r3, r3, #4
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d124      	bne.n	800334c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003306:	2b03      	cmp	r3, #3
 8003308:	d107      	bne.n	800331a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003318:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	691a      	ldr	r2, [r3, #16]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	b2d2      	uxtb	r2, r2
 8003326:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	1c5a      	adds	r2, r3, #1
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003336:	3b01      	subs	r3, #1
 8003338:	b29a      	uxth	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003342:	b29b      	uxth	r3, r3
 8003344:	3b01      	subs	r3, #1
 8003346:	b29a      	uxth	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003350:	2b00      	cmp	r3, #0
 8003352:	f47f aeb6 	bne.w	80030c2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2220      	movs	r2, #32
 800335a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800336e:	2300      	movs	r3, #0
 8003370:	e000      	b.n	8003374 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003372:	2302      	movs	r3, #2
  }
}
 8003374:	4618      	mov	r0, r3
 8003376:	3728      	adds	r7, #40	; 0x28
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	00010004 	.word	0x00010004

08003380 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b088      	sub	sp, #32
 8003384:	af02      	add	r7, sp, #8
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	607a      	str	r2, [r7, #4]
 800338a:	603b      	str	r3, [r7, #0]
 800338c:	460b      	mov	r3, r1
 800338e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003394:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	2b08      	cmp	r3, #8
 800339a:	d006      	beq.n	80033aa <I2C_MasterRequestWrite+0x2a>
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d003      	beq.n	80033aa <I2C_MasterRequestWrite+0x2a>
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033a8:	d108      	bne.n	80033bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	e00b      	b.n	80033d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c0:	2b12      	cmp	r3, #18
 80033c2:	d107      	bne.n	80033d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f000 f91d 	bl	8003620 <I2C_WaitOnFlagUntilTimeout>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00d      	beq.n	8003408 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033fa:	d103      	bne.n	8003404 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003402:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e035      	b.n	8003474 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003410:	d108      	bne.n	8003424 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003412:	897b      	ldrh	r3, [r7, #10]
 8003414:	b2db      	uxtb	r3, r3
 8003416:	461a      	mov	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003420:	611a      	str	r2, [r3, #16]
 8003422:	e01b      	b.n	800345c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003424:	897b      	ldrh	r3, [r7, #10]
 8003426:	11db      	asrs	r3, r3, #7
 8003428:	b2db      	uxtb	r3, r3
 800342a:	f003 0306 	and.w	r3, r3, #6
 800342e:	b2db      	uxtb	r3, r3
 8003430:	f063 030f 	orn	r3, r3, #15
 8003434:	b2da      	uxtb	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	490e      	ldr	r1, [pc, #56]	; (800347c <I2C_MasterRequestWrite+0xfc>)
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f000 f966 	bl	8003714 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e010      	b.n	8003474 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003452:	897b      	ldrh	r3, [r7, #10]
 8003454:	b2da      	uxtb	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	4907      	ldr	r1, [pc, #28]	; (8003480 <I2C_MasterRequestWrite+0x100>)
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 f956 	bl	8003714 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e000      	b.n	8003474 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3718      	adds	r7, #24
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	00010008 	.word	0x00010008
 8003480:	00010002 	.word	0x00010002

08003484 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b088      	sub	sp, #32
 8003488:	af02      	add	r7, sp, #8
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	607a      	str	r2, [r7, #4]
 800348e:	603b      	str	r3, [r7, #0]
 8003490:	460b      	mov	r3, r1
 8003492:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003498:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034a8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2b08      	cmp	r3, #8
 80034ae:	d006      	beq.n	80034be <I2C_MasterRequestRead+0x3a>
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d003      	beq.n	80034be <I2C_MasterRequestRead+0x3a>
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034bc:	d108      	bne.n	80034d0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	e00b      	b.n	80034e8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d4:	2b11      	cmp	r3, #17
 80034d6:	d107      	bne.n	80034e8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	9300      	str	r3, [sp, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f000 f893 	bl	8003620 <I2C_WaitOnFlagUntilTimeout>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00d      	beq.n	800351c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800350e:	d103      	bne.n	8003518 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003516:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e079      	b.n	8003610 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003524:	d108      	bne.n	8003538 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003526:	897b      	ldrh	r3, [r7, #10]
 8003528:	b2db      	uxtb	r3, r3
 800352a:	f043 0301 	orr.w	r3, r3, #1
 800352e:	b2da      	uxtb	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	611a      	str	r2, [r3, #16]
 8003536:	e05f      	b.n	80035f8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003538:	897b      	ldrh	r3, [r7, #10]
 800353a:	11db      	asrs	r3, r3, #7
 800353c:	b2db      	uxtb	r3, r3
 800353e:	f003 0306 	and.w	r3, r3, #6
 8003542:	b2db      	uxtb	r3, r3
 8003544:	f063 030f 	orn	r3, r3, #15
 8003548:	b2da      	uxtb	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	4930      	ldr	r1, [pc, #192]	; (8003618 <I2C_MasterRequestRead+0x194>)
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 f8dc 	bl	8003714 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e054      	b.n	8003610 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003566:	897b      	ldrh	r3, [r7, #10]
 8003568:	b2da      	uxtb	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	4929      	ldr	r1, [pc, #164]	; (800361c <I2C_MasterRequestRead+0x198>)
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 f8cc 	bl	8003714 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e044      	b.n	8003610 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003586:	2300      	movs	r3, #0
 8003588:	613b      	str	r3, [r7, #16]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	613b      	str	r3, [r7, #16]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	613b      	str	r3, [r7, #16]
 800359a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035aa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f000 f831 	bl	8003620 <I2C_WaitOnFlagUntilTimeout>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00d      	beq.n	80035e0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035d2:	d103      	bne.n	80035dc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035da:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e017      	b.n	8003610 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80035e0:	897b      	ldrh	r3, [r7, #10]
 80035e2:	11db      	asrs	r3, r3, #7
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	f003 0306 	and.w	r3, r3, #6
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	f063 030e 	orn	r3, r3, #14
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	4907      	ldr	r1, [pc, #28]	; (800361c <I2C_MasterRequestRead+0x198>)
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 f888 	bl	8003714 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e000      	b.n	8003610 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3718      	adds	r7, #24
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	00010008 	.word	0x00010008
 800361c:	00010002 	.word	0x00010002

08003620 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	603b      	str	r3, [r7, #0]
 800362c:	4613      	mov	r3, r2
 800362e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003630:	e048      	b.n	80036c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003638:	d044      	beq.n	80036c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800363a:	f7fe fe79 	bl	8002330 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	429a      	cmp	r2, r3
 8003648:	d302      	bcc.n	8003650 <I2C_WaitOnFlagUntilTimeout+0x30>
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d139      	bne.n	80036c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	0c1b      	lsrs	r3, r3, #16
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b01      	cmp	r3, #1
 8003658:	d10d      	bne.n	8003676 <I2C_WaitOnFlagUntilTimeout+0x56>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	43da      	mvns	r2, r3
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	4013      	ands	r3, r2
 8003666:	b29b      	uxth	r3, r3
 8003668:	2b00      	cmp	r3, #0
 800366a:	bf0c      	ite	eq
 800366c:	2301      	moveq	r3, #1
 800366e:	2300      	movne	r3, #0
 8003670:	b2db      	uxtb	r3, r3
 8003672:	461a      	mov	r2, r3
 8003674:	e00c      	b.n	8003690 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	43da      	mvns	r2, r3
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	4013      	ands	r3, r2
 8003682:	b29b      	uxth	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	bf0c      	ite	eq
 8003688:	2301      	moveq	r3, #1
 800368a:	2300      	movne	r3, #0
 800368c:	b2db      	uxtb	r3, r3
 800368e:	461a      	mov	r2, r3
 8003690:	79fb      	ldrb	r3, [r7, #7]
 8003692:	429a      	cmp	r2, r3
 8003694:	d116      	bne.n	80036c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2220      	movs	r2, #32
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	f043 0220 	orr.w	r2, r3, #32
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e023      	b.n	800370c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	0c1b      	lsrs	r3, r3, #16
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d10d      	bne.n	80036ea <I2C_WaitOnFlagUntilTimeout+0xca>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	43da      	mvns	r2, r3
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	4013      	ands	r3, r2
 80036da:	b29b      	uxth	r3, r3
 80036dc:	2b00      	cmp	r3, #0
 80036de:	bf0c      	ite	eq
 80036e0:	2301      	moveq	r3, #1
 80036e2:	2300      	movne	r3, #0
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	461a      	mov	r2, r3
 80036e8:	e00c      	b.n	8003704 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	43da      	mvns	r2, r3
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	4013      	ands	r3, r2
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	bf0c      	ite	eq
 80036fc:	2301      	moveq	r3, #1
 80036fe:	2300      	movne	r3, #0
 8003700:	b2db      	uxtb	r3, r3
 8003702:	461a      	mov	r2, r3
 8003704:	79fb      	ldrb	r3, [r7, #7]
 8003706:	429a      	cmp	r2, r3
 8003708:	d093      	beq.n	8003632 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
 8003720:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003722:	e071      	b.n	8003808 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800372e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003732:	d123      	bne.n	800377c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003742:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800374c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2220      	movs	r2, #32
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003768:	f043 0204 	orr.w	r2, r3, #4
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e067      	b.n	800384c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003782:	d041      	beq.n	8003808 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003784:	f7fe fdd4 	bl	8002330 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	429a      	cmp	r2, r3
 8003792:	d302      	bcc.n	800379a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d136      	bne.n	8003808 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	0c1b      	lsrs	r3, r3, #16
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d10c      	bne.n	80037be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	43da      	mvns	r2, r3
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	4013      	ands	r3, r2
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	bf14      	ite	ne
 80037b6:	2301      	movne	r3, #1
 80037b8:	2300      	moveq	r3, #0
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	e00b      	b.n	80037d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	43da      	mvns	r2, r3
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	4013      	ands	r3, r2
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	bf14      	ite	ne
 80037d0:	2301      	movne	r3, #1
 80037d2:	2300      	moveq	r3, #0
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d016      	beq.n	8003808 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f4:	f043 0220 	orr.w	r2, r3, #32
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e021      	b.n	800384c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	0c1b      	lsrs	r3, r3, #16
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b01      	cmp	r3, #1
 8003810:	d10c      	bne.n	800382c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	43da      	mvns	r2, r3
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	4013      	ands	r3, r2
 800381e:	b29b      	uxth	r3, r3
 8003820:	2b00      	cmp	r3, #0
 8003822:	bf14      	ite	ne
 8003824:	2301      	movne	r3, #1
 8003826:	2300      	moveq	r3, #0
 8003828:	b2db      	uxtb	r3, r3
 800382a:	e00b      	b.n	8003844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	43da      	mvns	r2, r3
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	4013      	ands	r3, r2
 8003838:	b29b      	uxth	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	bf14      	ite	ne
 800383e:	2301      	movne	r3, #1
 8003840:	2300      	moveq	r3, #0
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	f47f af6d 	bne.w	8003724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003860:	e034      	b.n	80038cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f000 f8e3 	bl	8003a2e <I2C_IsAcknowledgeFailed>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e034      	b.n	80038dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003878:	d028      	beq.n	80038cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800387a:	f7fe fd59 	bl	8002330 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	429a      	cmp	r2, r3
 8003888:	d302      	bcc.n	8003890 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d11d      	bne.n	80038cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389a:	2b80      	cmp	r3, #128	; 0x80
 800389c:	d016      	beq.n	80038cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b8:	f043 0220 	orr.w	r2, r3, #32
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e007      	b.n	80038dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d6:	2b80      	cmp	r3, #128	; 0x80
 80038d8:	d1c3      	bne.n	8003862 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038f0:	e034      	b.n	800395c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f000 f89b 	bl	8003a2e <I2C_IsAcknowledgeFailed>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e034      	b.n	800396c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003908:	d028      	beq.n	800395c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800390a:	f7fe fd11 	bl	8002330 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	68ba      	ldr	r2, [r7, #8]
 8003916:	429a      	cmp	r2, r3
 8003918:	d302      	bcc.n	8003920 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d11d      	bne.n	800395c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	f003 0304 	and.w	r3, r3, #4
 800392a:	2b04      	cmp	r3, #4
 800392c:	d016      	beq.n	800395c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2220      	movs	r2, #32
 8003938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003948:	f043 0220 	orr.w	r2, r3, #32
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e007      	b.n	800396c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	f003 0304 	and.w	r3, r3, #4
 8003966:	2b04      	cmp	r3, #4
 8003968:	d1c3      	bne.n	80038f2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003980:	e049      	b.n	8003a16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	f003 0310 	and.w	r3, r3, #16
 800398c:	2b10      	cmp	r3, #16
 800398e:	d119      	bne.n	80039c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f06f 0210 	mvn.w	r2, #16
 8003998:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2220      	movs	r2, #32
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e030      	b.n	8003a26 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039c4:	f7fe fcb4 	bl	8002330 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d302      	bcc.n	80039da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d11d      	bne.n	8003a16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e4:	2b40      	cmp	r3, #64	; 0x40
 80039e6:	d016      	beq.n	8003a16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2220      	movs	r2, #32
 80039f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	f043 0220 	orr.w	r2, r3, #32
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e007      	b.n	8003a26 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a20:	2b40      	cmp	r3, #64	; 0x40
 8003a22:	d1ae      	bne.n	8003982 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b083      	sub	sp, #12
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a44:	d11b      	bne.n	8003a7e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a4e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	f043 0204 	orr.w	r2, r3, #4
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e000      	b.n	8003a80 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b20      	cmp	r3, #32
 8003aa0:	d129      	bne.n	8003af6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2224      	movs	r2, #36	; 0x24
 8003aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 0201 	bic.w	r2, r2, #1
 8003ab8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 0210 	bic.w	r2, r2, #16
 8003ac8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f042 0201 	orr.w	r2, r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2220      	movs	r2, #32
 8003aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003af2:	2300      	movs	r3, #0
 8003af4:	e000      	b.n	8003af8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003af6:	2302      	movs	r3, #2
  }
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b20      	cmp	r3, #32
 8003b1c:	d12a      	bne.n	8003b74 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2224      	movs	r2, #36	; 0x24
 8003b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 0201 	bic.w	r2, r2, #1
 8003b34:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003b3e:	89fb      	ldrh	r3, [r7, #14]
 8003b40:	f023 030f 	bic.w	r3, r3, #15
 8003b44:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	89fb      	ldrh	r3, [r7, #14]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	89fa      	ldrh	r2, [r7, #14]
 8003b56:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f042 0201 	orr.w	r2, r2, #1
 8003b66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b70:	2300      	movs	r3, #0
 8003b72:	e000      	b.n	8003b76 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003b74:	2302      	movs	r3, #2
  }
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
	...

08003b84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e267      	b.n	8004066 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d075      	beq.n	8003c8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ba2:	4b88      	ldr	r3, [pc, #544]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 030c 	and.w	r3, r3, #12
 8003baa:	2b04      	cmp	r3, #4
 8003bac:	d00c      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bae:	4b85      	ldr	r3, [pc, #532]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bb6:	2b08      	cmp	r3, #8
 8003bb8:	d112      	bne.n	8003be0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bba:	4b82      	ldr	r3, [pc, #520]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bc6:	d10b      	bne.n	8003be0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc8:	4b7e      	ldr	r3, [pc, #504]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d05b      	beq.n	8003c8c <HAL_RCC_OscConfig+0x108>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d157      	bne.n	8003c8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e242      	b.n	8004066 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be8:	d106      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x74>
 8003bea:	4b76      	ldr	r3, [pc, #472]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a75      	ldr	r2, [pc, #468]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	e01d      	b.n	8003c34 <HAL_RCC_OscConfig+0xb0>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c00:	d10c      	bne.n	8003c1c <HAL_RCC_OscConfig+0x98>
 8003c02:	4b70      	ldr	r3, [pc, #448]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a6f      	ldr	r2, [pc, #444]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	4b6d      	ldr	r3, [pc, #436]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a6c      	ldr	r2, [pc, #432]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c18:	6013      	str	r3, [r2, #0]
 8003c1a:	e00b      	b.n	8003c34 <HAL_RCC_OscConfig+0xb0>
 8003c1c:	4b69      	ldr	r3, [pc, #420]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a68      	ldr	r2, [pc, #416]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c26:	6013      	str	r3, [r2, #0]
 8003c28:	4b66      	ldr	r3, [pc, #408]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a65      	ldr	r2, [pc, #404]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d013      	beq.n	8003c64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c3c:	f7fe fb78 	bl	8002330 <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c44:	f7fe fb74 	bl	8002330 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b64      	cmp	r3, #100	; 0x64
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e207      	b.n	8004066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c56:	4b5b      	ldr	r3, [pc, #364]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0f0      	beq.n	8003c44 <HAL_RCC_OscConfig+0xc0>
 8003c62:	e014      	b.n	8003c8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c64:	f7fe fb64 	bl	8002330 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c6c:	f7fe fb60 	bl	8002330 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b64      	cmp	r3, #100	; 0x64
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e1f3      	b.n	8004066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c7e:	4b51      	ldr	r3, [pc, #324]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1f0      	bne.n	8003c6c <HAL_RCC_OscConfig+0xe8>
 8003c8a:	e000      	b.n	8003c8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d063      	beq.n	8003d62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c9a:	4b4a      	ldr	r3, [pc, #296]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 030c 	and.w	r3, r3, #12
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00b      	beq.n	8003cbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ca6:	4b47      	ldr	r3, [pc, #284]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cae:	2b08      	cmp	r3, #8
 8003cb0:	d11c      	bne.n	8003cec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cb2:	4b44      	ldr	r3, [pc, #272]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d116      	bne.n	8003cec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cbe:	4b41      	ldr	r3, [pc, #260]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d005      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x152>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d001      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e1c7      	b.n	8004066 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd6:	4b3b      	ldr	r3, [pc, #236]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	4937      	ldr	r1, [pc, #220]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cea:	e03a      	b.n	8003d62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d020      	beq.n	8003d36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cf4:	4b34      	ldr	r3, [pc, #208]	; (8003dc8 <HAL_RCC_OscConfig+0x244>)
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cfa:	f7fe fb19 	bl	8002330 <HAL_GetTick>
 8003cfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d00:	e008      	b.n	8003d14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d02:	f7fe fb15 	bl	8002330 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e1a8      	b.n	8004066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d14:	4b2b      	ldr	r3, [pc, #172]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d0f0      	beq.n	8003d02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d20:	4b28      	ldr	r3, [pc, #160]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	00db      	lsls	r3, r3, #3
 8003d2e:	4925      	ldr	r1, [pc, #148]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	600b      	str	r3, [r1, #0]
 8003d34:	e015      	b.n	8003d62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d36:	4b24      	ldr	r3, [pc, #144]	; (8003dc8 <HAL_RCC_OscConfig+0x244>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3c:	f7fe faf8 	bl	8002330 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d44:	f7fe faf4 	bl	8002330 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e187      	b.n	8004066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d56:	4b1b      	ldr	r3, [pc, #108]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1f0      	bne.n	8003d44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0308 	and.w	r3, r3, #8
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d036      	beq.n	8003ddc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d016      	beq.n	8003da4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d76:	4b15      	ldr	r3, [pc, #84]	; (8003dcc <HAL_RCC_OscConfig+0x248>)
 8003d78:	2201      	movs	r2, #1
 8003d7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d7c:	f7fe fad8 	bl	8002330 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d84:	f7fe fad4 	bl	8002330 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e167      	b.n	8004066 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d96:	4b0b      	ldr	r3, [pc, #44]	; (8003dc4 <HAL_RCC_OscConfig+0x240>)
 8003d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0f0      	beq.n	8003d84 <HAL_RCC_OscConfig+0x200>
 8003da2:	e01b      	b.n	8003ddc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003da4:	4b09      	ldr	r3, [pc, #36]	; (8003dcc <HAL_RCC_OscConfig+0x248>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003daa:	f7fe fac1 	bl	8002330 <HAL_GetTick>
 8003dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003db0:	e00e      	b.n	8003dd0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003db2:	f7fe fabd 	bl	8002330 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d907      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e150      	b.n	8004066 <HAL_RCC_OscConfig+0x4e2>
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	42470000 	.word	0x42470000
 8003dcc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dd0:	4b88      	ldr	r3, [pc, #544]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003dd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1ea      	bne.n	8003db2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 8097 	beq.w	8003f18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dea:	2300      	movs	r3, #0
 8003dec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dee:	4b81      	ldr	r3, [pc, #516]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10f      	bne.n	8003e1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	60bb      	str	r3, [r7, #8]
 8003dfe:	4b7d      	ldr	r3, [pc, #500]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	4a7c      	ldr	r2, [pc, #496]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e08:	6413      	str	r3, [r2, #64]	; 0x40
 8003e0a:	4b7a      	ldr	r3, [pc, #488]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e12:	60bb      	str	r3, [r7, #8]
 8003e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e16:	2301      	movs	r3, #1
 8003e18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e1a:	4b77      	ldr	r3, [pc, #476]	; (8003ff8 <HAL_RCC_OscConfig+0x474>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d118      	bne.n	8003e58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e26:	4b74      	ldr	r3, [pc, #464]	; (8003ff8 <HAL_RCC_OscConfig+0x474>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a73      	ldr	r2, [pc, #460]	; (8003ff8 <HAL_RCC_OscConfig+0x474>)
 8003e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e32:	f7fe fa7d 	bl	8002330 <HAL_GetTick>
 8003e36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e38:	e008      	b.n	8003e4c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e3a:	f7fe fa79 	bl	8002330 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d901      	bls.n	8003e4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e10c      	b.n	8004066 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e4c:	4b6a      	ldr	r3, [pc, #424]	; (8003ff8 <HAL_RCC_OscConfig+0x474>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d0f0      	beq.n	8003e3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d106      	bne.n	8003e6e <HAL_RCC_OscConfig+0x2ea>
 8003e60:	4b64      	ldr	r3, [pc, #400]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e64:	4a63      	ldr	r2, [pc, #396]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003e66:	f043 0301 	orr.w	r3, r3, #1
 8003e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e6c:	e01c      	b.n	8003ea8 <HAL_RCC_OscConfig+0x324>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	2b05      	cmp	r3, #5
 8003e74:	d10c      	bne.n	8003e90 <HAL_RCC_OscConfig+0x30c>
 8003e76:	4b5f      	ldr	r3, [pc, #380]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7a:	4a5e      	ldr	r2, [pc, #376]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003e7c:	f043 0304 	orr.w	r3, r3, #4
 8003e80:	6713      	str	r3, [r2, #112]	; 0x70
 8003e82:	4b5c      	ldr	r3, [pc, #368]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e86:	4a5b      	ldr	r2, [pc, #364]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003e88:	f043 0301 	orr.w	r3, r3, #1
 8003e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e8e:	e00b      	b.n	8003ea8 <HAL_RCC_OscConfig+0x324>
 8003e90:	4b58      	ldr	r3, [pc, #352]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e94:	4a57      	ldr	r2, [pc, #348]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003e96:	f023 0301 	bic.w	r3, r3, #1
 8003e9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e9c:	4b55      	ldr	r3, [pc, #340]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea0:	4a54      	ldr	r2, [pc, #336]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003ea2:	f023 0304 	bic.w	r3, r3, #4
 8003ea6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d015      	beq.n	8003edc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb0:	f7fe fa3e 	bl	8002330 <HAL_GetTick>
 8003eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eb6:	e00a      	b.n	8003ece <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eb8:	f7fe fa3a 	bl	8002330 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e0cb      	b.n	8004066 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ece:	4b49      	ldr	r3, [pc, #292]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d0ee      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x334>
 8003eda:	e014      	b.n	8003f06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003edc:	f7fe fa28 	bl	8002330 <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ee2:	e00a      	b.n	8003efa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ee4:	f7fe fa24 	bl	8002330 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e0b5      	b.n	8004066 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003efa:	4b3e      	ldr	r3, [pc, #248]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1ee      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f06:	7dfb      	ldrb	r3, [r7, #23]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d105      	bne.n	8003f18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f0c:	4b39      	ldr	r3, [pc, #228]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f10:	4a38      	ldr	r2, [pc, #224]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003f12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f16:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 80a1 	beq.w	8004064 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f22:	4b34      	ldr	r3, [pc, #208]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 030c 	and.w	r3, r3, #12
 8003f2a:	2b08      	cmp	r3, #8
 8003f2c:	d05c      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d141      	bne.n	8003fba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f36:	4b31      	ldr	r3, [pc, #196]	; (8003ffc <HAL_RCC_OscConfig+0x478>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f3c:	f7fe f9f8 	bl	8002330 <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f44:	f7fe f9f4 	bl	8002330 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e087      	b.n	8004066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f56:	4b27      	ldr	r3, [pc, #156]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1f0      	bne.n	8003f44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	69da      	ldr	r2, [r3, #28]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	019b      	lsls	r3, r3, #6
 8003f72:	431a      	orrs	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f78:	085b      	lsrs	r3, r3, #1
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	041b      	lsls	r3, r3, #16
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f84:	061b      	lsls	r3, r3, #24
 8003f86:	491b      	ldr	r1, [pc, #108]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f8c:	4b1b      	ldr	r3, [pc, #108]	; (8003ffc <HAL_RCC_OscConfig+0x478>)
 8003f8e:	2201      	movs	r2, #1
 8003f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f92:	f7fe f9cd 	bl	8002330 <HAL_GetTick>
 8003f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f98:	e008      	b.n	8003fac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f9a:	f7fe f9c9 	bl	8002330 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d901      	bls.n	8003fac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e05c      	b.n	8004066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fac:	4b11      	ldr	r3, [pc, #68]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d0f0      	beq.n	8003f9a <HAL_RCC_OscConfig+0x416>
 8003fb8:	e054      	b.n	8004064 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fba:	4b10      	ldr	r3, [pc, #64]	; (8003ffc <HAL_RCC_OscConfig+0x478>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc0:	f7fe f9b6 	bl	8002330 <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fc8:	f7fe f9b2 	bl	8002330 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e045      	b.n	8004066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fda:	4b06      	ldr	r3, [pc, #24]	; (8003ff4 <HAL_RCC_OscConfig+0x470>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1f0      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x444>
 8003fe6:	e03d      	b.n	8004064 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d107      	bne.n	8004000 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e038      	b.n	8004066 <HAL_RCC_OscConfig+0x4e2>
 8003ff4:	40023800 	.word	0x40023800
 8003ff8:	40007000 	.word	0x40007000
 8003ffc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004000:	4b1b      	ldr	r3, [pc, #108]	; (8004070 <HAL_RCC_OscConfig+0x4ec>)
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d028      	beq.n	8004060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004018:	429a      	cmp	r2, r3
 800401a:	d121      	bne.n	8004060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004026:	429a      	cmp	r2, r3
 8004028:	d11a      	bne.n	8004060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004030:	4013      	ands	r3, r2
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004036:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004038:	4293      	cmp	r3, r2
 800403a:	d111      	bne.n	8004060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004046:	085b      	lsrs	r3, r3, #1
 8004048:	3b01      	subs	r3, #1
 800404a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800404c:	429a      	cmp	r2, r3
 800404e:	d107      	bne.n	8004060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800405c:	429a      	cmp	r2, r3
 800405e:	d001      	beq.n	8004064 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e000      	b.n	8004066 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3718      	adds	r7, #24
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	40023800 	.word	0x40023800

08004074 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e0cc      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004088:	4b68      	ldr	r3, [pc, #416]	; (800422c <HAL_RCC_ClockConfig+0x1b8>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 030f 	and.w	r3, r3, #15
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	429a      	cmp	r2, r3
 8004094:	d90c      	bls.n	80040b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004096:	4b65      	ldr	r3, [pc, #404]	; (800422c <HAL_RCC_ClockConfig+0x1b8>)
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	b2d2      	uxtb	r2, r2
 800409c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800409e:	4b63      	ldr	r3, [pc, #396]	; (800422c <HAL_RCC_ClockConfig+0x1b8>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 030f 	and.w	r3, r3, #15
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d001      	beq.n	80040b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e0b8      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d020      	beq.n	80040fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0304 	and.w	r3, r3, #4
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d005      	beq.n	80040d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040c8:	4b59      	ldr	r3, [pc, #356]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	4a58      	ldr	r2, [pc, #352]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80040ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0308 	and.w	r3, r3, #8
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d005      	beq.n	80040ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040e0:	4b53      	ldr	r3, [pc, #332]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	4a52      	ldr	r2, [pc, #328]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80040e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040ec:	4b50      	ldr	r3, [pc, #320]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	494d      	ldr	r1, [pc, #308]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d044      	beq.n	8004194 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d107      	bne.n	8004122 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004112:	4b47      	ldr	r3, [pc, #284]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d119      	bne.n	8004152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e07f      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2b02      	cmp	r3, #2
 8004128:	d003      	beq.n	8004132 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800412e:	2b03      	cmp	r3, #3
 8004130:	d107      	bne.n	8004142 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004132:	4b3f      	ldr	r3, [pc, #252]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d109      	bne.n	8004152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e06f      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004142:	4b3b      	ldr	r3, [pc, #236]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e067      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004152:	4b37      	ldr	r3, [pc, #220]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f023 0203 	bic.w	r2, r3, #3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	4934      	ldr	r1, [pc, #208]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004160:	4313      	orrs	r3, r2
 8004162:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004164:	f7fe f8e4 	bl	8002330 <HAL_GetTick>
 8004168:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800416a:	e00a      	b.n	8004182 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800416c:	f7fe f8e0 	bl	8002330 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	f241 3288 	movw	r2, #5000	; 0x1388
 800417a:	4293      	cmp	r3, r2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e04f      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004182:	4b2b      	ldr	r3, [pc, #172]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 020c 	and.w	r2, r3, #12
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	429a      	cmp	r2, r3
 8004192:	d1eb      	bne.n	800416c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004194:	4b25      	ldr	r3, [pc, #148]	; (800422c <HAL_RCC_ClockConfig+0x1b8>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 030f 	and.w	r3, r3, #15
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d20c      	bcs.n	80041bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041a2:	4b22      	ldr	r3, [pc, #136]	; (800422c <HAL_RCC_ClockConfig+0x1b8>)
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041aa:	4b20      	ldr	r3, [pc, #128]	; (800422c <HAL_RCC_ClockConfig+0x1b8>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 030f 	and.w	r3, r3, #15
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d001      	beq.n	80041bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e032      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d008      	beq.n	80041da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041c8:	4b19      	ldr	r3, [pc, #100]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	4916      	ldr	r1, [pc, #88]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0308 	and.w	r3, r3, #8
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d009      	beq.n	80041fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041e6:	4b12      	ldr	r3, [pc, #72]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	490e      	ldr	r1, [pc, #56]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041fa:	f000 f821 	bl	8004240 <HAL_RCC_GetSysClockFreq>
 80041fe:	4602      	mov	r2, r0
 8004200:	4b0b      	ldr	r3, [pc, #44]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	091b      	lsrs	r3, r3, #4
 8004206:	f003 030f 	and.w	r3, r3, #15
 800420a:	490a      	ldr	r1, [pc, #40]	; (8004234 <HAL_RCC_ClockConfig+0x1c0>)
 800420c:	5ccb      	ldrb	r3, [r1, r3]
 800420e:	fa22 f303 	lsr.w	r3, r2, r3
 8004212:	4a09      	ldr	r2, [pc, #36]	; (8004238 <HAL_RCC_ClockConfig+0x1c4>)
 8004214:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004216:	4b09      	ldr	r3, [pc, #36]	; (800423c <HAL_RCC_ClockConfig+0x1c8>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4618      	mov	r0, r3
 800421c:	f7fe f844 	bl	80022a8 <HAL_InitTick>

  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	40023c00 	.word	0x40023c00
 8004230:	40023800 	.word	0x40023800
 8004234:	08007170 	.word	0x08007170
 8004238:	20000018 	.word	0x20000018
 800423c:	2000001c 	.word	0x2000001c

08004240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004244:	b090      	sub	sp, #64	; 0x40
 8004246:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004248:	2300      	movs	r3, #0
 800424a:	637b      	str	r3, [r7, #52]	; 0x34
 800424c:	2300      	movs	r3, #0
 800424e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004250:	2300      	movs	r3, #0
 8004252:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004254:	2300      	movs	r3, #0
 8004256:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004258:	4b59      	ldr	r3, [pc, #356]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f003 030c 	and.w	r3, r3, #12
 8004260:	2b08      	cmp	r3, #8
 8004262:	d00d      	beq.n	8004280 <HAL_RCC_GetSysClockFreq+0x40>
 8004264:	2b08      	cmp	r3, #8
 8004266:	f200 80a1 	bhi.w	80043ac <HAL_RCC_GetSysClockFreq+0x16c>
 800426a:	2b00      	cmp	r3, #0
 800426c:	d002      	beq.n	8004274 <HAL_RCC_GetSysClockFreq+0x34>
 800426e:	2b04      	cmp	r3, #4
 8004270:	d003      	beq.n	800427a <HAL_RCC_GetSysClockFreq+0x3a>
 8004272:	e09b      	b.n	80043ac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004274:	4b53      	ldr	r3, [pc, #332]	; (80043c4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004276:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004278:	e09b      	b.n	80043b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800427a:	4b53      	ldr	r3, [pc, #332]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800427c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800427e:	e098      	b.n	80043b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004280:	4b4f      	ldr	r3, [pc, #316]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004288:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800428a:	4b4d      	ldr	r3, [pc, #308]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d028      	beq.n	80042e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004296:	4b4a      	ldr	r3, [pc, #296]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	099b      	lsrs	r3, r3, #6
 800429c:	2200      	movs	r2, #0
 800429e:	623b      	str	r3, [r7, #32]
 80042a0:	627a      	str	r2, [r7, #36]	; 0x24
 80042a2:	6a3b      	ldr	r3, [r7, #32]
 80042a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80042a8:	2100      	movs	r1, #0
 80042aa:	4b47      	ldr	r3, [pc, #284]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80042ac:	fb03 f201 	mul.w	r2, r3, r1
 80042b0:	2300      	movs	r3, #0
 80042b2:	fb00 f303 	mul.w	r3, r0, r3
 80042b6:	4413      	add	r3, r2
 80042b8:	4a43      	ldr	r2, [pc, #268]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80042ba:	fba0 1202 	umull	r1, r2, r0, r2
 80042be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042c0:	460a      	mov	r2, r1
 80042c2:	62ba      	str	r2, [r7, #40]	; 0x28
 80042c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042c6:	4413      	add	r3, r2
 80042c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042cc:	2200      	movs	r2, #0
 80042ce:	61bb      	str	r3, [r7, #24]
 80042d0:	61fa      	str	r2, [r7, #28]
 80042d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80042da:	f7fb ff8f 	bl	80001fc <__aeabi_uldivmod>
 80042de:	4602      	mov	r2, r0
 80042e0:	460b      	mov	r3, r1
 80042e2:	4613      	mov	r3, r2
 80042e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042e6:	e053      	b.n	8004390 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042e8:	4b35      	ldr	r3, [pc, #212]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x180>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	099b      	lsrs	r3, r3, #6
 80042ee:	2200      	movs	r2, #0
 80042f0:	613b      	str	r3, [r7, #16]
 80042f2:	617a      	str	r2, [r7, #20]
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80042fa:	f04f 0b00 	mov.w	fp, #0
 80042fe:	4652      	mov	r2, sl
 8004300:	465b      	mov	r3, fp
 8004302:	f04f 0000 	mov.w	r0, #0
 8004306:	f04f 0100 	mov.w	r1, #0
 800430a:	0159      	lsls	r1, r3, #5
 800430c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004310:	0150      	lsls	r0, r2, #5
 8004312:	4602      	mov	r2, r0
 8004314:	460b      	mov	r3, r1
 8004316:	ebb2 080a 	subs.w	r8, r2, sl
 800431a:	eb63 090b 	sbc.w	r9, r3, fp
 800431e:	f04f 0200 	mov.w	r2, #0
 8004322:	f04f 0300 	mov.w	r3, #0
 8004326:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800432a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800432e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004332:	ebb2 0408 	subs.w	r4, r2, r8
 8004336:	eb63 0509 	sbc.w	r5, r3, r9
 800433a:	f04f 0200 	mov.w	r2, #0
 800433e:	f04f 0300 	mov.w	r3, #0
 8004342:	00eb      	lsls	r3, r5, #3
 8004344:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004348:	00e2      	lsls	r2, r4, #3
 800434a:	4614      	mov	r4, r2
 800434c:	461d      	mov	r5, r3
 800434e:	eb14 030a 	adds.w	r3, r4, sl
 8004352:	603b      	str	r3, [r7, #0]
 8004354:	eb45 030b 	adc.w	r3, r5, fp
 8004358:	607b      	str	r3, [r7, #4]
 800435a:	f04f 0200 	mov.w	r2, #0
 800435e:	f04f 0300 	mov.w	r3, #0
 8004362:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004366:	4629      	mov	r1, r5
 8004368:	028b      	lsls	r3, r1, #10
 800436a:	4621      	mov	r1, r4
 800436c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004370:	4621      	mov	r1, r4
 8004372:	028a      	lsls	r2, r1, #10
 8004374:	4610      	mov	r0, r2
 8004376:	4619      	mov	r1, r3
 8004378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800437a:	2200      	movs	r2, #0
 800437c:	60bb      	str	r3, [r7, #8]
 800437e:	60fa      	str	r2, [r7, #12]
 8004380:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004384:	f7fb ff3a 	bl	80001fc <__aeabi_uldivmod>
 8004388:	4602      	mov	r2, r0
 800438a:	460b      	mov	r3, r1
 800438c:	4613      	mov	r3, r2
 800438e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004390:	4b0b      	ldr	r3, [pc, #44]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	0c1b      	lsrs	r3, r3, #16
 8004396:	f003 0303 	and.w	r3, r3, #3
 800439a:	3301      	adds	r3, #1
 800439c:	005b      	lsls	r3, r3, #1
 800439e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80043a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80043aa:	e002      	b.n	80043b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043ac:	4b05      	ldr	r3, [pc, #20]	; (80043c4 <HAL_RCC_GetSysClockFreq+0x184>)
 80043ae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80043b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3740      	adds	r7, #64	; 0x40
 80043b8:	46bd      	mov	sp, r7
 80043ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043be:	bf00      	nop
 80043c0:	40023800 	.word	0x40023800
 80043c4:	00f42400 	.word	0x00f42400
 80043c8:	017d7840 	.word	0x017d7840

080043cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043cc:	b480      	push	{r7}
 80043ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043d0:	4b03      	ldr	r3, [pc, #12]	; (80043e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80043d2:	681b      	ldr	r3, [r3, #0]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	20000018 	.word	0x20000018

080043e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043e8:	f7ff fff0 	bl	80043cc <HAL_RCC_GetHCLKFreq>
 80043ec:	4602      	mov	r2, r0
 80043ee:	4b05      	ldr	r3, [pc, #20]	; (8004404 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	0a9b      	lsrs	r3, r3, #10
 80043f4:	f003 0307 	and.w	r3, r3, #7
 80043f8:	4903      	ldr	r1, [pc, #12]	; (8004408 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043fa:	5ccb      	ldrb	r3, [r1, r3]
 80043fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004400:	4618      	mov	r0, r3
 8004402:	bd80      	pop	{r7, pc}
 8004404:	40023800 	.word	0x40023800
 8004408:	08007180 	.word	0x08007180

0800440c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004410:	f7ff ffdc 	bl	80043cc <HAL_RCC_GetHCLKFreq>
 8004414:	4602      	mov	r2, r0
 8004416:	4b05      	ldr	r3, [pc, #20]	; (800442c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	0b5b      	lsrs	r3, r3, #13
 800441c:	f003 0307 	and.w	r3, r3, #7
 8004420:	4903      	ldr	r1, [pc, #12]	; (8004430 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004422:	5ccb      	ldrb	r3, [r1, r3]
 8004424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004428:	4618      	mov	r0, r3
 800442a:	bd80      	pop	{r7, pc}
 800442c:	40023800 	.word	0x40023800
 8004430:	08007180 	.word	0x08007180

08004434 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800443c:	2300      	movs	r3, #0
 800443e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10b      	bne.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004458:	2b00      	cmp	r3, #0
 800445a:	d105      	bne.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004464:	2b00      	cmp	r3, #0
 8004466:	d075      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004468:	4b91      	ldr	r3, [pc, #580]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800446a:	2200      	movs	r2, #0
 800446c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800446e:	f7fd ff5f 	bl	8002330 <HAL_GetTick>
 8004472:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004474:	e008      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004476:	f7fd ff5b 	bl	8002330 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	2b02      	cmp	r3, #2
 8004482:	d901      	bls.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e189      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004488:	4b8a      	ldr	r3, [pc, #552]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1f0      	bne.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	2b00      	cmp	r3, #0
 800449e:	d009      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	019a      	lsls	r2, r3, #6
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	071b      	lsls	r3, r3, #28
 80044ac:	4981      	ldr	r1, [pc, #516]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d01f      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80044c0:	4b7c      	ldr	r3, [pc, #496]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044c6:	0f1b      	lsrs	r3, r3, #28
 80044c8:	f003 0307 	and.w	r3, r3, #7
 80044cc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	019a      	lsls	r2, r3, #6
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	061b      	lsls	r3, r3, #24
 80044da:	431a      	orrs	r2, r3
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	071b      	lsls	r3, r3, #28
 80044e0:	4974      	ldr	r1, [pc, #464]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80044e8:	4b72      	ldr	r3, [pc, #456]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044ee:	f023 021f 	bic.w	r2, r3, #31
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	69db      	ldr	r3, [r3, #28]
 80044f6:	3b01      	subs	r3, #1
 80044f8:	496e      	ldr	r1, [pc, #440]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00d      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	019a      	lsls	r2, r3, #6
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	061b      	lsls	r3, r3, #24
 8004518:	431a      	orrs	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	071b      	lsls	r3, r3, #28
 8004520:	4964      	ldr	r1, [pc, #400]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004522:	4313      	orrs	r3, r2
 8004524:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004528:	4b61      	ldr	r3, [pc, #388]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800452a:	2201      	movs	r2, #1
 800452c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800452e:	f7fd feff 	bl	8002330 <HAL_GetTick>
 8004532:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004534:	e008      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004536:	f7fd fefb 	bl	8002330 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d901      	bls.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e129      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004548:	4b5a      	ldr	r3, [pc, #360]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d0f0      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0304 	and.w	r3, r3, #4
 800455c:	2b00      	cmp	r3, #0
 800455e:	d105      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004568:	2b00      	cmp	r3, #0
 800456a:	d079      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800456c:	4b52      	ldr	r3, [pc, #328]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800456e:	2200      	movs	r2, #0
 8004570:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004572:	f7fd fedd 	bl	8002330 <HAL_GetTick>
 8004576:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004578:	e008      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800457a:	f7fd fed9 	bl	8002330 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d901      	bls.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e107      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800458c:	4b49      	ldr	r3, [pc, #292]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004594:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004598:	d0ef      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0304 	and.w	r3, r3, #4
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d020      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80045a6:	4b43      	ldr	r3, [pc, #268]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ac:	0f1b      	lsrs	r3, r3, #28
 80045ae:	f003 0307 	and.w	r3, r3, #7
 80045b2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	019a      	lsls	r2, r3, #6
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	061b      	lsls	r3, r3, #24
 80045c0:	431a      	orrs	r2, r3
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	071b      	lsls	r3, r3, #28
 80045c6:	493b      	ldr	r1, [pc, #236]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80045ce:	4b39      	ldr	r3, [pc, #228]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045d4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	3b01      	subs	r3, #1
 80045de:	021b      	lsls	r3, r3, #8
 80045e0:	4934      	ldr	r1, [pc, #208]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0308 	and.w	r3, r3, #8
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d01e      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80045f4:	4b2f      	ldr	r3, [pc, #188]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fa:	0e1b      	lsrs	r3, r3, #24
 80045fc:	f003 030f 	and.w	r3, r3, #15
 8004600:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	019a      	lsls	r2, r3, #6
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	061b      	lsls	r3, r3, #24
 800460c:	431a      	orrs	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	071b      	lsls	r3, r3, #28
 8004614:	4927      	ldr	r1, [pc, #156]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004616:	4313      	orrs	r3, r2
 8004618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800461c:	4b25      	ldr	r3, [pc, #148]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800461e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004622:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462a:	4922      	ldr	r1, [pc, #136]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800462c:	4313      	orrs	r3, r2
 800462e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004632:	4b21      	ldr	r3, [pc, #132]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004634:	2201      	movs	r2, #1
 8004636:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004638:	f7fd fe7a 	bl	8002330 <HAL_GetTick>
 800463c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800463e:	e008      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004640:	f7fd fe76 	bl	8002330 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d901      	bls.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e0a4      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004652:	4b18      	ldr	r3, [pc, #96]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800465a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800465e:	d1ef      	bne.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0320 	and.w	r3, r3, #32
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 808b 	beq.w	8004784 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800466e:	2300      	movs	r3, #0
 8004670:	60fb      	str	r3, [r7, #12]
 8004672:	4b10      	ldr	r3, [pc, #64]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	4a0f      	ldr	r2, [pc, #60]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800467c:	6413      	str	r3, [r2, #64]	; 0x40
 800467e:	4b0d      	ldr	r3, [pc, #52]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004686:	60fb      	str	r3, [r7, #12]
 8004688:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800468a:	4b0c      	ldr	r3, [pc, #48]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a0b      	ldr	r2, [pc, #44]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004694:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004696:	f7fd fe4b 	bl	8002330 <HAL_GetTick>
 800469a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800469c:	e010      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800469e:	f7fd fe47 	bl	8002330 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d909      	bls.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e075      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x368>
 80046b0:	42470068 	.word	0x42470068
 80046b4:	40023800 	.word	0x40023800
 80046b8:	42470070 	.word	0x42470070
 80046bc:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80046c0:	4b38      	ldr	r3, [pc, #224]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d0e8      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046cc:	4b36      	ldr	r3, [pc, #216]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80046ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046d4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d02f      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d028      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046ea:	4b2f      	ldr	r3, [pc, #188]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80046ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046f2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046f4:	4b2d      	ldr	r3, [pc, #180]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80046f6:	2201      	movs	r2, #1
 80046f8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046fa:	4b2c      	ldr	r3, [pc, #176]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004700:	4a29      	ldr	r2, [pc, #164]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004706:	4b28      	ldr	r3, [pc, #160]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	2b01      	cmp	r3, #1
 8004710:	d114      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004712:	f7fd fe0d 	bl	8002330 <HAL_GetTick>
 8004716:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004718:	e00a      	b.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800471a:	f7fd fe09 	bl	8002330 <HAL_GetTick>
 800471e:	4602      	mov	r2, r0
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	f241 3288 	movw	r2, #5000	; 0x1388
 8004728:	4293      	cmp	r3, r2
 800472a:	d901      	bls.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e035      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004730:	4b1d      	ldr	r3, [pc, #116]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0ee      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004740:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004744:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004748:	d10d      	bne.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800474a:	4b17      	ldr	r3, [pc, #92]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004756:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800475a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800475e:	4912      	ldr	r1, [pc, #72]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004760:	4313      	orrs	r3, r2
 8004762:	608b      	str	r3, [r1, #8]
 8004764:	e005      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004766:	4b10      	ldr	r3, [pc, #64]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	4a0f      	ldr	r2, [pc, #60]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800476c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004770:	6093      	str	r3, [r2, #8]
 8004772:	4b0d      	ldr	r3, [pc, #52]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004774:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800477e:	490a      	ldr	r1, [pc, #40]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004780:	4313      	orrs	r3, r2
 8004782:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0310 	and.w	r3, r3, #16
 800478c:	2b00      	cmp	r3, #0
 800478e:	d004      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004796:	4b06      	ldr	r3, [pc, #24]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004798:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3718      	adds	r7, #24
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	40007000 	.word	0x40007000
 80047a8:	40023800 	.word	0x40023800
 80047ac:	42470e40 	.word	0x42470e40
 80047b0:	424711e0 	.word	0x424711e0

080047b4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e073      	b.n	80048b2 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	7f5b      	ldrb	r3, [r3, #29]
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d105      	bne.n	80047e0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7fd fa7c 	bl	8001cd8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2202      	movs	r2, #2
 80047e4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f003 0310 	and.w	r3, r3, #16
 80047f0:	2b10      	cmp	r3, #16
 80047f2:	d055      	beq.n	80048a0 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	22ca      	movs	r2, #202	; 0xca
 80047fa:	625a      	str	r2, [r3, #36]	; 0x24
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2253      	movs	r2, #83	; 0x53
 8004802:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 fa49 	bl	8004c9c <RTC_EnterInitMode>
 800480a:	4603      	mov	r3, r0
 800480c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800480e:	7bfb      	ldrb	r3, [r7, #15]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d12c      	bne.n	800486e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	6812      	ldr	r2, [r2, #0]
 800481e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004822:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004826:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6899      	ldr	r1, [r3, #8]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	431a      	orrs	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	695b      	ldr	r3, [r3, #20]
 800483c:	431a      	orrs	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	430a      	orrs	r2, r1
 8004844:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	68d2      	ldr	r2, [r2, #12]
 800484e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6919      	ldr	r1, [r3, #16]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	041a      	lsls	r2, r3, #16
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	430a      	orrs	r2, r1
 8004862:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 fa50 	bl	8004d0a <RTC_ExitInitMode>
 800486a:	4603      	mov	r3, r0
 800486c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800486e:	7bfb      	ldrb	r3, [r7, #15]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d110      	bne.n	8004896 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004882:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	699a      	ldr	r2, [r3, #24]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	430a      	orrs	r2, r1
 8004894:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	22ff      	movs	r2, #255	; 0xff
 800489c:	625a      	str	r2, [r3, #36]	; 0x24
 800489e:	e001      	b.n	80048a4 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80048a0:	2300      	movs	r3, #0
 80048a2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80048a4:	7bfb      	ldrb	r3, [r7, #15]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d102      	bne.n	80048b0 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80048b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80048ba:	b590      	push	{r4, r7, lr}
 80048bc:	b087      	sub	sp, #28
 80048be:	af00      	add	r7, sp, #0
 80048c0:	60f8      	str	r0, [r7, #12]
 80048c2:	60b9      	str	r1, [r7, #8]
 80048c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	7f1b      	ldrb	r3, [r3, #28]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d101      	bne.n	80048d6 <HAL_RTC_SetTime+0x1c>
 80048d2:	2302      	movs	r3, #2
 80048d4:	e087      	b.n	80049e6 <HAL_RTC_SetTime+0x12c>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2201      	movs	r2, #1
 80048da:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2202      	movs	r2, #2
 80048e0:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d126      	bne.n	8004936 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d102      	bne.n	80048fc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	2200      	movs	r2, #0
 80048fa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	4618      	mov	r0, r3
 8004902:	f000 fa27 	bl	8004d54 <RTC_ByteToBcd2>
 8004906:	4603      	mov	r3, r0
 8004908:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	785b      	ldrb	r3, [r3, #1]
 800490e:	4618      	mov	r0, r3
 8004910:	f000 fa20 	bl	8004d54 <RTC_ByteToBcd2>
 8004914:	4603      	mov	r3, r0
 8004916:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004918:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	789b      	ldrb	r3, [r3, #2]
 800491e:	4618      	mov	r0, r3
 8004920:	f000 fa18 	bl	8004d54 <RTC_ByteToBcd2>
 8004924:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004926:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	78db      	ldrb	r3, [r3, #3]
 800492e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004930:	4313      	orrs	r3, r2
 8004932:	617b      	str	r3, [r7, #20]
 8004934:	e018      	b.n	8004968 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004940:	2b00      	cmp	r3, #0
 8004942:	d102      	bne.n	800494a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	2200      	movs	r2, #0
 8004948:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	785b      	ldrb	r3, [r3, #1]
 8004954:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004956:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800495c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	78db      	ldrb	r3, [r3, #3]
 8004962:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004964:	4313      	orrs	r3, r2
 8004966:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	22ca      	movs	r2, #202	; 0xca
 800496e:	625a      	str	r2, [r3, #36]	; 0x24
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2253      	movs	r2, #83	; 0x53
 8004976:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f000 f98f 	bl	8004c9c <RTC_EnterInitMode>
 800497e:	4603      	mov	r3, r0
 8004980:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004982:	7cfb      	ldrb	r3, [r7, #19]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d120      	bne.n	80049ca <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004992:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004996:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689a      	ldr	r2, [r3, #8]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80049a6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6899      	ldr	r1, [r3, #8]
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	68da      	ldr	r2, [r3, #12]
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	431a      	orrs	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	430a      	orrs	r2, r1
 80049be:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 f9a2 	bl	8004d0a <RTC_ExitInitMode>
 80049c6:	4603      	mov	r3, r0
 80049c8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80049ca:	7cfb      	ldrb	r3, [r7, #19]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d102      	bne.n	80049d6 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2201      	movs	r2, #1
 80049d4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	22ff      	movs	r2, #255	; 0xff
 80049dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	771a      	strb	r2, [r3, #28]

  return status;
 80049e4:	7cfb      	ldrb	r3, [r7, #19]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	371c      	adds	r7, #28
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd90      	pop	{r4, r7, pc}

080049ee <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b086      	sub	sp, #24
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	60f8      	str	r0, [r7, #12]
 80049f6:	60b9      	str	r1, [r7, #8]
 80049f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80049fa:	2300      	movs	r3, #0
 80049fc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004a20:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004a24:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	0c1b      	lsrs	r3, r3, #16
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a30:	b2da      	uxtb	r2, r3
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	0a1b      	lsrs	r3, r3, #8
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a40:	b2da      	uxtb	r2, r3
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a4e:	b2da      	uxtb	r2, r3
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	0d9b      	lsrs	r3, r3, #22
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	b2da      	uxtb	r2, r3
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d11a      	bne.n	8004aa0 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 f98e 	bl	8004d90 <RTC_Bcd2ToByte>
 8004a74:	4603      	mov	r3, r0
 8004a76:	461a      	mov	r2, r3
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	785b      	ldrb	r3, [r3, #1]
 8004a80:	4618      	mov	r0, r3
 8004a82:	f000 f985 	bl	8004d90 <RTC_Bcd2ToByte>
 8004a86:	4603      	mov	r3, r0
 8004a88:	461a      	mov	r2, r3
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	789b      	ldrb	r3, [r3, #2]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 f97c 	bl	8004d90 <RTC_Bcd2ToByte>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3718      	adds	r7, #24
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004aaa:	b590      	push	{r4, r7, lr}
 8004aac:	b087      	sub	sp, #28
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	60f8      	str	r0, [r7, #12]
 8004ab2:	60b9      	str	r1, [r7, #8]
 8004ab4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	7f1b      	ldrb	r3, [r3, #28]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d101      	bne.n	8004ac6 <HAL_RTC_SetDate+0x1c>
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	e071      	b.n	8004baa <HAL_RTC_SetDate+0x100>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10e      	bne.n	8004af6 <HAL_RTC_SetDate+0x4c>
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	785b      	ldrb	r3, [r3, #1]
 8004adc:	f003 0310 	and.w	r3, r3, #16
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d008      	beq.n	8004af6 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	785b      	ldrb	r3, [r3, #1]
 8004ae8:	f023 0310 	bic.w	r3, r3, #16
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	330a      	adds	r3, #10
 8004af0:	b2da      	uxtb	r2, r3
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d11c      	bne.n	8004b36 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	78db      	ldrb	r3, [r3, #3]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 f927 	bl	8004d54 <RTC_ByteToBcd2>
 8004b06:	4603      	mov	r3, r0
 8004b08:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	785b      	ldrb	r3, [r3, #1]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 f920 	bl	8004d54 <RTC_ByteToBcd2>
 8004b14:	4603      	mov	r3, r0
 8004b16:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004b18:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	789b      	ldrb	r3, [r3, #2]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 f918 	bl	8004d54 <RTC_ByteToBcd2>
 8004b24:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004b26:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004b30:	4313      	orrs	r3, r2
 8004b32:	617b      	str	r3, [r7, #20]
 8004b34:	e00e      	b.n	8004b54 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	78db      	ldrb	r3, [r3, #3]
 8004b3a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	785b      	ldrb	r3, [r3, #1]
 8004b40:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004b42:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004b48:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004b50:	4313      	orrs	r3, r2
 8004b52:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	22ca      	movs	r2, #202	; 0xca
 8004b5a:	625a      	str	r2, [r3, #36]	; 0x24
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2253      	movs	r2, #83	; 0x53
 8004b62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f000 f899 	bl	8004c9c <RTC_EnterInitMode>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004b6e:	7cfb      	ldrb	r3, [r7, #19]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d10c      	bne.n	8004b8e <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004b7e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004b82:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f000 f8c0 	bl	8004d0a <RTC_ExitInitMode>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004b8e:	7cfb      	ldrb	r3, [r7, #19]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d102      	bne.n	8004b9a <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2201      	movs	r2, #1
 8004b98:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	22ff      	movs	r2, #255	; 0xff
 8004ba0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	771a      	strb	r2, [r3, #28]

  return status;
 8004ba8:	7cfb      	ldrb	r3, [r7, #19]
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	371c      	adds	r7, #28
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd90      	pop	{r4, r7, pc}

08004bb2 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b086      	sub	sp, #24
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	60f8      	str	r0, [r7, #12]
 8004bba:	60b9      	str	r1, [r7, #8]
 8004bbc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004bcc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004bd0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	0c1b      	lsrs	r3, r3, #16
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	0a1b      	lsrs	r3, r3, #8
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	f003 031f 	and.w	r3, r3, #31
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bf4:	b2da      	uxtb	r2, r3
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	0b5b      	lsrs	r3, r3, #13
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	f003 0307 	and.w	r3, r3, #7
 8004c04:	b2da      	uxtb	r2, r3
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d11a      	bne.n	8004c46 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	78db      	ldrb	r3, [r3, #3]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f000 f8bb 	bl	8004d90 <RTC_Bcd2ToByte>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	785b      	ldrb	r3, [r3, #1]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f000 f8b2 	bl	8004d90 <RTC_Bcd2ToByte>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	461a      	mov	r2, r3
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	789b      	ldrb	r3, [r3, #2]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f000 f8a9 	bl	8004d90 <RTC_Bcd2ToByte>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	461a      	mov	r2, r3
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3718      	adds	r7, #24
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a0d      	ldr	r2, [pc, #52]	; (8004c98 <HAL_RTC_WaitForSynchro+0x48>)
 8004c62:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c64:	f7fd fb64 	bl	8002330 <HAL_GetTick>
 8004c68:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004c6a:	e009      	b.n	8004c80 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004c6c:	f7fd fb60 	bl	8002330 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c7a:	d901      	bls.n	8004c80 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e007      	b.n	8004c90 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	f003 0320 	and.w	r3, r3, #32
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d0ee      	beq.n	8004c6c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	00017f5f 	.word	0x00017f5f

08004c9c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d122      	bne.n	8004d00 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68da      	ldr	r2, [r3, #12]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004cc8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004cca:	f7fd fb31 	bl	8002330 <HAL_GetTick>
 8004cce:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004cd0:	e00c      	b.n	8004cec <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004cd2:	f7fd fb2d 	bl	8002330 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ce0:	d904      	bls.n	8004cec <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2204      	movs	r2, #4
 8004ce6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d102      	bne.n	8004d00 <RTC_EnterInitMode+0x64>
 8004cfa:	7bfb      	ldrb	r3, [r7, #15]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d1e8      	bne.n	8004cd2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b084      	sub	sp, #16
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d12:	2300      	movs	r3, #0
 8004d14:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68da      	ldr	r2, [r3, #12]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d24:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f003 0320 	and.w	r3, r3, #32
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d10a      	bne.n	8004d4a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f7ff ff8b 	bl	8004c50 <HAL_RTC_WaitForSynchro>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d004      	beq.n	8004d4a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2204      	movs	r2, #4
 8004d44:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004d62:	e005      	b.n	8004d70 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	3301      	adds	r3, #1
 8004d68:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004d6a:	79fb      	ldrb	r3, [r7, #7]
 8004d6c:	3b0a      	subs	r3, #10
 8004d6e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004d70:	79fb      	ldrb	r3, [r7, #7]
 8004d72:	2b09      	cmp	r3, #9
 8004d74:	d8f6      	bhi.n	8004d64 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	011b      	lsls	r3, r3, #4
 8004d7c:	b2da      	uxtb	r2, r3
 8004d7e:	79fb      	ldrb	r3, [r7, #7]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	b2db      	uxtb	r3, r3
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3714      	adds	r7, #20
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	4603      	mov	r3, r0
 8004d98:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8004d9e:	79fb      	ldrb	r3, [r7, #7]
 8004da0:	091b      	lsrs	r3, r3, #4
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	461a      	mov	r2, r3
 8004da6:	4613      	mov	r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4413      	add	r3, r2
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	b2da      	uxtb	r2, r3
 8004db4:	79fb      	ldrb	r3, [r7, #7]
 8004db6:	f003 030f 	and.w	r3, r3, #15
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	4413      	add	r3, r2
 8004dbe:	b2db      	uxtb	r3, r3
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3714      	adds	r7, #20
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e07b      	b.n	8004ed6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d108      	bne.n	8004df8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dee:	d009      	beq.n	8004e04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	61da      	str	r2, [r3, #28]
 8004df6:	e005      	b.n	8004e04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d106      	bne.n	8004e24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7fc ff84 	bl	8001d2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2202      	movs	r2, #2
 8004e28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e4c:	431a      	orrs	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e56:	431a      	orrs	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	431a      	orrs	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e74:	431a      	orrs	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	69db      	ldr	r3, [r3, #28]
 8004e7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e7e:	431a      	orrs	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a1b      	ldr	r3, [r3, #32]
 8004e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e88:	ea42 0103 	orr.w	r1, r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e90:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	0c1b      	lsrs	r3, r3, #16
 8004ea2:	f003 0104 	and.w	r1, r3, #4
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eaa:	f003 0210 	and.w	r2, r3, #16
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	69da      	ldr	r2, [r3, #28]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ec4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b088      	sub	sp, #32
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	60f8      	str	r0, [r7, #12]
 8004ee6:	60b9      	str	r1, [r7, #8]
 8004ee8:	603b      	str	r3, [r7, #0]
 8004eea:	4613      	mov	r3, r2
 8004eec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d101      	bne.n	8004f00 <HAL_SPI_Transmit+0x22>
 8004efc:	2302      	movs	r3, #2
 8004efe:	e12d      	b.n	800515c <HAL_SPI_Transmit+0x27e>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f08:	f7fd fa12 	bl	8002330 <HAL_GetTick>
 8004f0c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004f0e:	88fb      	ldrh	r3, [r7, #6]
 8004f10:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d002      	beq.n	8004f24 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004f1e:	2302      	movs	r3, #2
 8004f20:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f22:	e116      	b.n	8005152 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d002      	beq.n	8004f30 <HAL_SPI_Transmit+0x52>
 8004f2a:	88fb      	ldrh	r3, [r7, #6]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d102      	bne.n	8004f36 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f34:	e10d      	b.n	8005152 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2203      	movs	r2, #3
 8004f3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	68ba      	ldr	r2, [r7, #8]
 8004f48:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	88fa      	ldrh	r2, [r7, #6]
 8004f4e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	88fa      	ldrh	r2, [r7, #6]
 8004f54:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f7c:	d10f      	bne.n	8004f9e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f8c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f9c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa8:	2b40      	cmp	r3, #64	; 0x40
 8004faa:	d007      	beq.n	8004fbc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fc4:	d14f      	bne.n	8005066 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d002      	beq.n	8004fd4 <HAL_SPI_Transmit+0xf6>
 8004fce:	8afb      	ldrh	r3, [r7, #22]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d142      	bne.n	800505a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd8:	881a      	ldrh	r2, [r3, #0]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe4:	1c9a      	adds	r2, r3, #2
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ff8:	e02f      	b.n	800505a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f003 0302 	and.w	r3, r3, #2
 8005004:	2b02      	cmp	r3, #2
 8005006:	d112      	bne.n	800502e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500c:	881a      	ldrh	r2, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005018:	1c9a      	adds	r2, r3, #2
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005022:	b29b      	uxth	r3, r3
 8005024:	3b01      	subs	r3, #1
 8005026:	b29a      	uxth	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	86da      	strh	r2, [r3, #54]	; 0x36
 800502c:	e015      	b.n	800505a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800502e:	f7fd f97f 	bl	8002330 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	683a      	ldr	r2, [r7, #0]
 800503a:	429a      	cmp	r2, r3
 800503c:	d803      	bhi.n	8005046 <HAL_SPI_Transmit+0x168>
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005044:	d102      	bne.n	800504c <HAL_SPI_Transmit+0x16e>
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d106      	bne.n	800505a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005058:	e07b      	b.n	8005152 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800505e:	b29b      	uxth	r3, r3
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1ca      	bne.n	8004ffa <HAL_SPI_Transmit+0x11c>
 8005064:	e050      	b.n	8005108 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d002      	beq.n	8005074 <HAL_SPI_Transmit+0x196>
 800506e:	8afb      	ldrh	r3, [r7, #22]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d144      	bne.n	80050fe <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	330c      	adds	r3, #12
 800507e:	7812      	ldrb	r2, [r2, #0]
 8005080:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005086:	1c5a      	adds	r2, r3, #1
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005090:	b29b      	uxth	r3, r3
 8005092:	3b01      	subs	r3, #1
 8005094:	b29a      	uxth	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800509a:	e030      	b.n	80050fe <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d113      	bne.n	80050d2 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	330c      	adds	r3, #12
 80050b4:	7812      	ldrb	r2, [r2, #0]
 80050b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050bc:	1c5a      	adds	r2, r3, #1
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	3b01      	subs	r3, #1
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	86da      	strh	r2, [r3, #54]	; 0x36
 80050d0:	e015      	b.n	80050fe <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050d2:	f7fd f92d 	bl	8002330 <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	683a      	ldr	r2, [r7, #0]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d803      	bhi.n	80050ea <HAL_SPI_Transmit+0x20c>
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050e8:	d102      	bne.n	80050f0 <HAL_SPI_Transmit+0x212>
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d106      	bne.n	80050fe <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80050fc:	e029      	b.n	8005152 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005102:	b29b      	uxth	r3, r3
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1c9      	bne.n	800509c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005108:	69ba      	ldr	r2, [r7, #24]
 800510a:	6839      	ldr	r1, [r7, #0]
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f000 fbdf 	bl	80058d0 <SPI_EndRxTxTransaction>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d002      	beq.n	800511e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2220      	movs	r2, #32
 800511c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10a      	bne.n	800513c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005126:	2300      	movs	r3, #0
 8005128:	613b      	str	r3, [r7, #16]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	613b      	str	r3, [r7, #16]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	613b      	str	r3, [r7, #16]
 800513a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005140:	2b00      	cmp	r3, #0
 8005142:	d002      	beq.n	800514a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	77fb      	strb	r3, [r7, #31]
 8005148:	e003      	b.n	8005152 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800515a:	7ffb      	ldrb	r3, [r7, #31]
}
 800515c:	4618      	mov	r0, r3
 800515e:	3720      	adds	r7, #32
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b088      	sub	sp, #32
 8005168:	af02      	add	r7, sp, #8
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	603b      	str	r3, [r7, #0]
 8005170:	4613      	mov	r3, r2
 8005172:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005174:	2300      	movs	r3, #0
 8005176:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b01      	cmp	r3, #1
 8005182:	d002      	beq.n	800518a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005184:	2302      	movs	r3, #2
 8005186:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005188:	e0fb      	b.n	8005382 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005192:	d112      	bne.n	80051ba <HAL_SPI_Receive+0x56>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10e      	bne.n	80051ba <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2204      	movs	r2, #4
 80051a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80051a4:	88fa      	ldrh	r2, [r7, #6]
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	4613      	mov	r3, r2
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	68b9      	ldr	r1, [r7, #8]
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f000 f8ef 	bl	8005394 <HAL_SPI_TransmitReceive>
 80051b6:	4603      	mov	r3, r0
 80051b8:	e0e8      	b.n	800538c <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d101      	bne.n	80051c8 <HAL_SPI_Receive+0x64>
 80051c4:	2302      	movs	r3, #2
 80051c6:	e0e1      	b.n	800538c <HAL_SPI_Receive+0x228>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051d0:	f7fd f8ae 	bl	8002330 <HAL_GetTick>
 80051d4:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d002      	beq.n	80051e2 <HAL_SPI_Receive+0x7e>
 80051dc:	88fb      	ldrh	r3, [r7, #6]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d102      	bne.n	80051e8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80051e6:	e0cc      	b.n	8005382 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2204      	movs	r2, #4
 80051ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	68ba      	ldr	r2, [r7, #8]
 80051fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	88fa      	ldrh	r2, [r7, #6]
 8005200:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	88fa      	ldrh	r2, [r7, #6]
 8005206:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800522e:	d10f      	bne.n	8005250 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800523e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800524e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800525a:	2b40      	cmp	r3, #64	; 0x40
 800525c:	d007      	beq.n	800526e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800526c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d16a      	bne.n	800534c <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005276:	e032      	b.n	80052de <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	2b01      	cmp	r3, #1
 8005284:	d115      	bne.n	80052b2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f103 020c 	add.w	r2, r3, #12
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005292:	7812      	ldrb	r2, [r2, #0]
 8005294:	b2d2      	uxtb	r2, r2
 8005296:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529c:	1c5a      	adds	r2, r3, #1
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	3b01      	subs	r3, #1
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052b0:	e015      	b.n	80052de <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052b2:	f7fd f83d 	bl	8002330 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	683a      	ldr	r2, [r7, #0]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d803      	bhi.n	80052ca <HAL_SPI_Receive+0x166>
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052c8:	d102      	bne.n	80052d0 <HAL_SPI_Receive+0x16c>
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d106      	bne.n	80052de <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80052dc:	e051      	b.n	8005382 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1c7      	bne.n	8005278 <HAL_SPI_Receive+0x114>
 80052e8:	e035      	b.n	8005356 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d113      	bne.n	8005320 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68da      	ldr	r2, [r3, #12]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005302:	b292      	uxth	r2, r2
 8005304:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530a:	1c9a      	adds	r2, r3, #2
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005314:	b29b      	uxth	r3, r3
 8005316:	3b01      	subs	r3, #1
 8005318:	b29a      	uxth	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800531e:	e015      	b.n	800534c <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005320:	f7fd f806 	bl	8002330 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	683a      	ldr	r2, [r7, #0]
 800532c:	429a      	cmp	r2, r3
 800532e:	d803      	bhi.n	8005338 <HAL_SPI_Receive+0x1d4>
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005336:	d102      	bne.n	800533e <HAL_SPI_Receive+0x1da>
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d106      	bne.n	800534c <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800534a:	e01a      	b.n	8005382 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005350:	b29b      	uxth	r3, r3
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1c9      	bne.n	80052ea <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	6839      	ldr	r1, [r7, #0]
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f000 fa52 	bl	8005804 <SPI_EndRxTransaction>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d002      	beq.n	800536c <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2220      	movs	r2, #32
 800536a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005370:	2b00      	cmp	r3, #0
 8005372:	d002      	beq.n	800537a <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	75fb      	strb	r3, [r7, #23]
 8005378:	e003      	b.n	8005382 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800538a:	7dfb      	ldrb	r3, [r7, #23]
}
 800538c:	4618      	mov	r0, r3
 800538e:	3718      	adds	r7, #24
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b08c      	sub	sp, #48	; 0x30
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
 80053a0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80053a2:	2301      	movs	r3, #1
 80053a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80053a6:	2300      	movs	r3, #0
 80053a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d101      	bne.n	80053ba <HAL_SPI_TransmitReceive+0x26>
 80053b6:	2302      	movs	r3, #2
 80053b8:	e198      	b.n	80056ec <HAL_SPI_TransmitReceive+0x358>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053c2:	f7fc ffb5 	bl	8002330 <HAL_GetTick>
 80053c6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80053d8:	887b      	ldrh	r3, [r7, #2]
 80053da:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80053dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d00f      	beq.n	8005404 <HAL_SPI_TransmitReceive+0x70>
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053ea:	d107      	bne.n	80053fc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d103      	bne.n	80053fc <HAL_SPI_TransmitReceive+0x68>
 80053f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053f8:	2b04      	cmp	r3, #4
 80053fa:	d003      	beq.n	8005404 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80053fc:	2302      	movs	r3, #2
 80053fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005402:	e16d      	b.n	80056e0 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d005      	beq.n	8005416 <HAL_SPI_TransmitReceive+0x82>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d002      	beq.n	8005416 <HAL_SPI_TransmitReceive+0x82>
 8005410:	887b      	ldrh	r3, [r7, #2]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d103      	bne.n	800541e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800541c:	e160      	b.n	80056e0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b04      	cmp	r3, #4
 8005428:	d003      	beq.n	8005432 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2205      	movs	r2, #5
 800542e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	887a      	ldrh	r2, [r7, #2]
 8005442:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	887a      	ldrh	r2, [r7, #2]
 8005448:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	887a      	ldrh	r2, [r7, #2]
 8005454:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	887a      	ldrh	r2, [r7, #2]
 800545a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2200      	movs	r2, #0
 8005466:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005472:	2b40      	cmp	r3, #64	; 0x40
 8005474:	d007      	beq.n	8005486 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005484:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800548e:	d17c      	bne.n	800558a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d002      	beq.n	800549e <HAL_SPI_TransmitReceive+0x10a>
 8005498:	8b7b      	ldrh	r3, [r7, #26]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d16a      	bne.n	8005574 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a2:	881a      	ldrh	r2, [r3, #0]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ae:	1c9a      	adds	r2, r3, #2
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	3b01      	subs	r3, #1
 80054bc:	b29a      	uxth	r2, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054c2:	e057      	b.n	8005574 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f003 0302 	and.w	r3, r3, #2
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d11b      	bne.n	800550a <HAL_SPI_TransmitReceive+0x176>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d016      	beq.n	800550a <HAL_SPI_TransmitReceive+0x176>
 80054dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d113      	bne.n	800550a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e6:	881a      	ldrh	r2, [r3, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f2:	1c9a      	adds	r2, r3, #2
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	3b01      	subs	r3, #1
 8005500:	b29a      	uxth	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005506:	2300      	movs	r3, #0
 8005508:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f003 0301 	and.w	r3, r3, #1
 8005514:	2b01      	cmp	r3, #1
 8005516:	d119      	bne.n	800554c <HAL_SPI_TransmitReceive+0x1b8>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800551c:	b29b      	uxth	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d014      	beq.n	800554c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68da      	ldr	r2, [r3, #12]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552c:	b292      	uxth	r2, r2
 800552e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005534:	1c9a      	adds	r2, r3, #2
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800553e:	b29b      	uxth	r3, r3
 8005540:	3b01      	subs	r3, #1
 8005542:	b29a      	uxth	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005548:	2301      	movs	r3, #1
 800554a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800554c:	f7fc fef0 	bl	8002330 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005558:	429a      	cmp	r2, r3
 800555a:	d80b      	bhi.n	8005574 <HAL_SPI_TransmitReceive+0x1e0>
 800555c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005562:	d007      	beq.n	8005574 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005572:	e0b5      	b.n	80056e0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005578:	b29b      	uxth	r3, r3
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1a2      	bne.n	80054c4 <HAL_SPI_TransmitReceive+0x130>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005582:	b29b      	uxth	r3, r3
 8005584:	2b00      	cmp	r3, #0
 8005586:	d19d      	bne.n	80054c4 <HAL_SPI_TransmitReceive+0x130>
 8005588:	e080      	b.n	800568c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d002      	beq.n	8005598 <HAL_SPI_TransmitReceive+0x204>
 8005592:	8b7b      	ldrh	r3, [r7, #26]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d16f      	bne.n	8005678 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	330c      	adds	r3, #12
 80055a2:	7812      	ldrb	r2, [r2, #0]
 80055a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055aa:	1c5a      	adds	r2, r3, #1
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	3b01      	subs	r3, #1
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055be:	e05b      	b.n	8005678 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d11c      	bne.n	8005608 <HAL_SPI_TransmitReceive+0x274>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d017      	beq.n	8005608 <HAL_SPI_TransmitReceive+0x274>
 80055d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d114      	bne.n	8005608 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	330c      	adds	r3, #12
 80055e8:	7812      	ldrb	r2, [r2, #0]
 80055ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f0:	1c5a      	adds	r2, r3, #1
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	3b01      	subs	r3, #1
 80055fe:	b29a      	uxth	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005604:	2300      	movs	r3, #0
 8005606:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b01      	cmp	r3, #1
 8005614:	d119      	bne.n	800564a <HAL_SPI_TransmitReceive+0x2b6>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800561a:	b29b      	uxth	r3, r3
 800561c:	2b00      	cmp	r3, #0
 800561e:	d014      	beq.n	800564a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68da      	ldr	r2, [r3, #12]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562a:	b2d2      	uxtb	r2, r2
 800562c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005632:	1c5a      	adds	r2, r3, #1
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800563c:	b29b      	uxth	r3, r3
 800563e:	3b01      	subs	r3, #1
 8005640:	b29a      	uxth	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005646:	2301      	movs	r3, #1
 8005648:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800564a:	f7fc fe71 	bl	8002330 <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005656:	429a      	cmp	r2, r3
 8005658:	d803      	bhi.n	8005662 <HAL_SPI_TransmitReceive+0x2ce>
 800565a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005660:	d102      	bne.n	8005668 <HAL_SPI_TransmitReceive+0x2d4>
 8005662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005664:	2b00      	cmp	r3, #0
 8005666:	d107      	bne.n	8005678 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005676:	e033      	b.n	80056e0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800567c:	b29b      	uxth	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d19e      	bne.n	80055c0 <HAL_SPI_TransmitReceive+0x22c>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005686:	b29b      	uxth	r3, r3
 8005688:	2b00      	cmp	r3, #0
 800568a:	d199      	bne.n	80055c0 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800568c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800568e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005690:	68f8      	ldr	r0, [r7, #12]
 8005692:	f000 f91d 	bl	80058d0 <SPI_EndRxTxTransaction>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d006      	beq.n	80056aa <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2220      	movs	r2, #32
 80056a6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80056a8:	e01a      	b.n	80056e0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10a      	bne.n	80056c8 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056b2:	2300      	movs	r3, #0
 80056b4:	617b      	str	r3, [r7, #20]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	617b      	str	r3, [r7, #20]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	617b      	str	r3, [r7, #20]
 80056c6:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d003      	beq.n	80056d8 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056d6:	e003      	b.n	80056e0 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80056e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3730      	adds	r7, #48	; 0x30
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b088      	sub	sp, #32
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	603b      	str	r3, [r7, #0]
 8005700:	4613      	mov	r3, r2
 8005702:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005704:	f7fc fe14 	bl	8002330 <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570c:	1a9b      	subs	r3, r3, r2
 800570e:	683a      	ldr	r2, [r7, #0]
 8005710:	4413      	add	r3, r2
 8005712:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005714:	f7fc fe0c 	bl	8002330 <HAL_GetTick>
 8005718:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800571a:	4b39      	ldr	r3, [pc, #228]	; (8005800 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	015b      	lsls	r3, r3, #5
 8005720:	0d1b      	lsrs	r3, r3, #20
 8005722:	69fa      	ldr	r2, [r7, #28]
 8005724:	fb02 f303 	mul.w	r3, r2, r3
 8005728:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800572a:	e054      	b.n	80057d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005732:	d050      	beq.n	80057d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005734:	f7fc fdfc 	bl	8002330 <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	69fa      	ldr	r2, [r7, #28]
 8005740:	429a      	cmp	r2, r3
 8005742:	d902      	bls.n	800574a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d13d      	bne.n	80057c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005758:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005762:	d111      	bne.n	8005788 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800576c:	d004      	beq.n	8005778 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005776:	d107      	bne.n	8005788 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005786:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800578c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005790:	d10f      	bne.n	80057b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057a0:	601a      	str	r2, [r3, #0]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e017      	b.n	80057f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d101      	bne.n	80057d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80057cc:	2300      	movs	r3, #0
 80057ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	3b01      	subs	r3, #1
 80057d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	689a      	ldr	r2, [r3, #8]
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	4013      	ands	r3, r2
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	bf0c      	ite	eq
 80057e6:	2301      	moveq	r3, #1
 80057e8:	2300      	movne	r3, #0
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	461a      	mov	r2, r3
 80057ee:	79fb      	ldrb	r3, [r7, #7]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d19b      	bne.n	800572c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3720      	adds	r7, #32
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	20000018 	.word	0x20000018

08005804 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b086      	sub	sp, #24
 8005808:	af02      	add	r7, sp, #8
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005818:	d111      	bne.n	800583e <SPI_EndRxTransaction+0x3a>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005822:	d004      	beq.n	800582e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800582c:	d107      	bne.n	800583e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800583c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005846:	d12a      	bne.n	800589e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005850:	d012      	beq.n	8005878 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	9300      	str	r3, [sp, #0]
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	2200      	movs	r2, #0
 800585a:	2180      	movs	r1, #128	; 0x80
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f7ff ff49 	bl	80056f4 <SPI_WaitFlagStateUntilTimeout>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d02d      	beq.n	80058c4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800586c:	f043 0220 	orr.w	r2, r3, #32
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e026      	b.n	80058c6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	9300      	str	r3, [sp, #0]
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	2200      	movs	r2, #0
 8005880:	2101      	movs	r1, #1
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f7ff ff36 	bl	80056f4 <SPI_WaitFlagStateUntilTimeout>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d01a      	beq.n	80058c4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005892:	f043 0220 	orr.w	r2, r3, #32
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e013      	b.n	80058c6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	9300      	str	r3, [sp, #0]
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	2200      	movs	r2, #0
 80058a6:	2101      	movs	r1, #1
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f7ff ff23 	bl	80056f4 <SPI_WaitFlagStateUntilTimeout>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d007      	beq.n	80058c4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b8:	f043 0220 	orr.w	r2, r3, #32
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e000      	b.n	80058c6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
	...

080058d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b088      	sub	sp, #32
 80058d4:	af02      	add	r7, sp, #8
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	9300      	str	r3, [sp, #0]
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	2201      	movs	r2, #1
 80058e4:	2102      	movs	r1, #2
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f7ff ff04 	bl	80056f4 <SPI_WaitFlagStateUntilTimeout>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d007      	beq.n	8005902 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f6:	f043 0220 	orr.w	r2, r3, #32
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e032      	b.n	8005968 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005902:	4b1b      	ldr	r3, [pc, #108]	; (8005970 <SPI_EndRxTxTransaction+0xa0>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a1b      	ldr	r2, [pc, #108]	; (8005974 <SPI_EndRxTxTransaction+0xa4>)
 8005908:	fba2 2303 	umull	r2, r3, r2, r3
 800590c:	0d5b      	lsrs	r3, r3, #21
 800590e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005912:	fb02 f303 	mul.w	r3, r2, r3
 8005916:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005920:	d112      	bne.n	8005948 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	9300      	str	r3, [sp, #0]
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	2200      	movs	r2, #0
 800592a:	2180      	movs	r1, #128	; 0x80
 800592c:	68f8      	ldr	r0, [r7, #12]
 800592e:	f7ff fee1 	bl	80056f4 <SPI_WaitFlagStateUntilTimeout>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d016      	beq.n	8005966 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800593c:	f043 0220 	orr.w	r2, r3, #32
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e00f      	b.n	8005968 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00a      	beq.n	8005964 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	3b01      	subs	r3, #1
 8005952:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800595e:	2b80      	cmp	r3, #128	; 0x80
 8005960:	d0f2      	beq.n	8005948 <SPI_EndRxTxTransaction+0x78>
 8005962:	e000      	b.n	8005966 <SPI_EndRxTxTransaction+0x96>
        break;
 8005964:	bf00      	nop
  }

  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3718      	adds	r7, #24
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	20000018 	.word	0x20000018
 8005974:	165e9f81 	.word	0x165e9f81

08005978 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e041      	b.n	8005a0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005990:	b2db      	uxtb	r3, r3
 8005992:	2b00      	cmp	r3, #0
 8005994:	d106      	bne.n	80059a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f7fc fa62 	bl	8001e68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2202      	movs	r2, #2
 80059a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	3304      	adds	r3, #4
 80059b4:	4619      	mov	r1, r3
 80059b6:	4610      	mov	r0, r2
 80059b8:	f000 f9c0 	bl	8005d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3708      	adds	r7, #8
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
	...

08005a18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d001      	beq.n	8005a30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e04e      	b.n	8005ace <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2202      	movs	r2, #2
 8005a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68da      	ldr	r2, [r3, #12]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f042 0201 	orr.w	r2, r2, #1
 8005a46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a23      	ldr	r2, [pc, #140]	; (8005adc <HAL_TIM_Base_Start_IT+0xc4>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d022      	beq.n	8005a98 <HAL_TIM_Base_Start_IT+0x80>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a5a:	d01d      	beq.n	8005a98 <HAL_TIM_Base_Start_IT+0x80>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a1f      	ldr	r2, [pc, #124]	; (8005ae0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d018      	beq.n	8005a98 <HAL_TIM_Base_Start_IT+0x80>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a1e      	ldr	r2, [pc, #120]	; (8005ae4 <HAL_TIM_Base_Start_IT+0xcc>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d013      	beq.n	8005a98 <HAL_TIM_Base_Start_IT+0x80>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a1c      	ldr	r2, [pc, #112]	; (8005ae8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d00e      	beq.n	8005a98 <HAL_TIM_Base_Start_IT+0x80>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a1b      	ldr	r2, [pc, #108]	; (8005aec <HAL_TIM_Base_Start_IT+0xd4>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d009      	beq.n	8005a98 <HAL_TIM_Base_Start_IT+0x80>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a19      	ldr	r2, [pc, #100]	; (8005af0 <HAL_TIM_Base_Start_IT+0xd8>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d004      	beq.n	8005a98 <HAL_TIM_Base_Start_IT+0x80>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a18      	ldr	r2, [pc, #96]	; (8005af4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d111      	bne.n	8005abc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f003 0307 	and.w	r3, r3, #7
 8005aa2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2b06      	cmp	r3, #6
 8005aa8:	d010      	beq.n	8005acc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f042 0201 	orr.w	r2, r2, #1
 8005ab8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aba:	e007      	b.n	8005acc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f042 0201 	orr.w	r2, r2, #1
 8005aca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3714      	adds	r7, #20
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	40010000 	.word	0x40010000
 8005ae0:	40000400 	.word	0x40000400
 8005ae4:	40000800 	.word	0x40000800
 8005ae8:	40000c00 	.word	0x40000c00
 8005aec:	40010400 	.word	0x40010400
 8005af0:	40014000 	.word	0x40014000
 8005af4:	40001800 	.word	0x40001800

08005af8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	f003 0302 	and.w	r3, r3, #2
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d020      	beq.n	8005b5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f003 0302 	and.w	r3, r3, #2
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d01b      	beq.n	8005b5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f06f 0202 	mvn.w	r2, #2
 8005b2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2201      	movs	r2, #1
 8005b32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	f003 0303 	and.w	r3, r3, #3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d003      	beq.n	8005b4a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f8dc 	bl	8005d00 <HAL_TIM_IC_CaptureCallback>
 8005b48:	e005      	b.n	8005b56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f8ce 	bl	8005cec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 f8df 	bl	8005d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	f003 0304 	and.w	r3, r3, #4
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d020      	beq.n	8005ba8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f003 0304 	and.w	r3, r3, #4
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d01b      	beq.n	8005ba8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f06f 0204 	mvn.w	r2, #4
 8005b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2202      	movs	r2, #2
 8005b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f8b6 	bl	8005d00 <HAL_TIM_IC_CaptureCallback>
 8005b94:	e005      	b.n	8005ba2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f8a8 	bl	8005cec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 f8b9 	bl	8005d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	f003 0308 	and.w	r3, r3, #8
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d020      	beq.n	8005bf4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f003 0308 	and.w	r3, r3, #8
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d01b      	beq.n	8005bf4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f06f 0208 	mvn.w	r2, #8
 8005bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2204      	movs	r2, #4
 8005bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	f003 0303 	and.w	r3, r3, #3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d003      	beq.n	8005be2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f890 	bl	8005d00 <HAL_TIM_IC_CaptureCallback>
 8005be0:	e005      	b.n	8005bee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f882 	bl	8005cec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 f893 	bl	8005d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	f003 0310 	and.w	r3, r3, #16
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d020      	beq.n	8005c40 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f003 0310 	and.w	r3, r3, #16
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d01b      	beq.n	8005c40 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f06f 0210 	mvn.w	r2, #16
 8005c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2208      	movs	r2, #8
 8005c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	69db      	ldr	r3, [r3, #28]
 8005c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f86a 	bl	8005d00 <HAL_TIM_IC_CaptureCallback>
 8005c2c:	e005      	b.n	8005c3a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f85c 	bl	8005cec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 f86d 	bl	8005d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00c      	beq.n	8005c64 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f003 0301 	and.w	r3, r3, #1
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d007      	beq.n	8005c64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f06f 0201 	mvn.w	r2, #1
 8005c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f83a 	bl	8005cd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00c      	beq.n	8005c88 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d007      	beq.n	8005c88 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f98c 	bl	8005fa0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00c      	beq.n	8005cac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d007      	beq.n	8005cac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 f83e 	bl	8005d28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	f003 0320 	and.w	r3, r3, #32
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00c      	beq.n	8005cd0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f003 0320 	and.w	r3, r3, #32
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d007      	beq.n	8005cd0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f06f 0220 	mvn.w	r2, #32
 8005cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f95e 	bl	8005f8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cd0:	bf00      	nop
 8005cd2:	3710      	adds	r7, #16
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d1c:	bf00      	nop
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a46      	ldr	r2, [pc, #280]	; (8005e68 <TIM_Base_SetConfig+0x12c>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d013      	beq.n	8005d7c <TIM_Base_SetConfig+0x40>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d5a:	d00f      	beq.n	8005d7c <TIM_Base_SetConfig+0x40>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a43      	ldr	r2, [pc, #268]	; (8005e6c <TIM_Base_SetConfig+0x130>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d00b      	beq.n	8005d7c <TIM_Base_SetConfig+0x40>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a42      	ldr	r2, [pc, #264]	; (8005e70 <TIM_Base_SetConfig+0x134>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d007      	beq.n	8005d7c <TIM_Base_SetConfig+0x40>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a41      	ldr	r2, [pc, #260]	; (8005e74 <TIM_Base_SetConfig+0x138>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d003      	beq.n	8005d7c <TIM_Base_SetConfig+0x40>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a40      	ldr	r2, [pc, #256]	; (8005e78 <TIM_Base_SetConfig+0x13c>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d108      	bne.n	8005d8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a35      	ldr	r2, [pc, #212]	; (8005e68 <TIM_Base_SetConfig+0x12c>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d02b      	beq.n	8005dee <TIM_Base_SetConfig+0xb2>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d9c:	d027      	beq.n	8005dee <TIM_Base_SetConfig+0xb2>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a32      	ldr	r2, [pc, #200]	; (8005e6c <TIM_Base_SetConfig+0x130>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d023      	beq.n	8005dee <TIM_Base_SetConfig+0xb2>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a31      	ldr	r2, [pc, #196]	; (8005e70 <TIM_Base_SetConfig+0x134>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d01f      	beq.n	8005dee <TIM_Base_SetConfig+0xb2>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a30      	ldr	r2, [pc, #192]	; (8005e74 <TIM_Base_SetConfig+0x138>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d01b      	beq.n	8005dee <TIM_Base_SetConfig+0xb2>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a2f      	ldr	r2, [pc, #188]	; (8005e78 <TIM_Base_SetConfig+0x13c>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d017      	beq.n	8005dee <TIM_Base_SetConfig+0xb2>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a2e      	ldr	r2, [pc, #184]	; (8005e7c <TIM_Base_SetConfig+0x140>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d013      	beq.n	8005dee <TIM_Base_SetConfig+0xb2>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a2d      	ldr	r2, [pc, #180]	; (8005e80 <TIM_Base_SetConfig+0x144>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d00f      	beq.n	8005dee <TIM_Base_SetConfig+0xb2>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a2c      	ldr	r2, [pc, #176]	; (8005e84 <TIM_Base_SetConfig+0x148>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d00b      	beq.n	8005dee <TIM_Base_SetConfig+0xb2>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a2b      	ldr	r2, [pc, #172]	; (8005e88 <TIM_Base_SetConfig+0x14c>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d007      	beq.n	8005dee <TIM_Base_SetConfig+0xb2>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a2a      	ldr	r2, [pc, #168]	; (8005e8c <TIM_Base_SetConfig+0x150>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d003      	beq.n	8005dee <TIM_Base_SetConfig+0xb2>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a29      	ldr	r2, [pc, #164]	; (8005e90 <TIM_Base_SetConfig+0x154>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d108      	bne.n	8005e00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005df4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	689a      	ldr	r2, [r3, #8]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a10      	ldr	r2, [pc, #64]	; (8005e68 <TIM_Base_SetConfig+0x12c>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d003      	beq.n	8005e34 <TIM_Base_SetConfig+0xf8>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a12      	ldr	r2, [pc, #72]	; (8005e78 <TIM_Base_SetConfig+0x13c>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d103      	bne.n	8005e3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	691a      	ldr	r2, [r3, #16]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d105      	bne.n	8005e5a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	f023 0201 	bic.w	r2, r3, #1
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	611a      	str	r2, [r3, #16]
  }
}
 8005e5a:	bf00      	nop
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	40010000 	.word	0x40010000
 8005e6c:	40000400 	.word	0x40000400
 8005e70:	40000800 	.word	0x40000800
 8005e74:	40000c00 	.word	0x40000c00
 8005e78:	40010400 	.word	0x40010400
 8005e7c:	40014000 	.word	0x40014000
 8005e80:	40014400 	.word	0x40014400
 8005e84:	40014800 	.word	0x40014800
 8005e88:	40001800 	.word	0x40001800
 8005e8c:	40001c00 	.word	0x40001c00
 8005e90:	40002000 	.word	0x40002000

08005e94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d101      	bne.n	8005eac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ea8:	2302      	movs	r3, #2
 8005eaa:	e05a      	b.n	8005f62 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ed2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a21      	ldr	r2, [pc, #132]	; (8005f70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d022      	beq.n	8005f36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ef8:	d01d      	beq.n	8005f36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a1d      	ldr	r2, [pc, #116]	; (8005f74 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d018      	beq.n	8005f36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a1b      	ldr	r2, [pc, #108]	; (8005f78 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d013      	beq.n	8005f36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a1a      	ldr	r2, [pc, #104]	; (8005f7c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d00e      	beq.n	8005f36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a18      	ldr	r2, [pc, #96]	; (8005f80 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d009      	beq.n	8005f36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a17      	ldr	r2, [pc, #92]	; (8005f84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d004      	beq.n	8005f36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a15      	ldr	r2, [pc, #84]	; (8005f88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d10c      	bne.n	8005f50 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	68ba      	ldr	r2, [r7, #8]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68ba      	ldr	r2, [r7, #8]
 8005f4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	40010000 	.word	0x40010000
 8005f74:	40000400 	.word	0x40000400
 8005f78:	40000800 	.word	0x40000800
 8005f7c:	40000c00 	.word	0x40000c00
 8005f80:	40010400 	.word	0x40010400
 8005f84:	40014000 	.word	0x40014000
 8005f88:	40001800 	.word	0x40001800

08005f8c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fa8:	bf00      	nop
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d101      	bne.n	8005fc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e042      	b.n	800604c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d106      	bne.n	8005fe0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f7fb ff6c 	bl	8001eb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2224      	movs	r2, #36	; 0x24
 8005fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68da      	ldr	r2, [r3, #12]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ff6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 fdbd 	bl	8006b78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	691a      	ldr	r2, [r3, #16]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800600c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	695a      	ldr	r2, [r3, #20]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800601c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68da      	ldr	r2, [r3, #12]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800602c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2220      	movs	r2, #32
 8006038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2220      	movs	r2, #32
 8006040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3708      	adds	r7, #8
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b08a      	sub	sp, #40	; 0x28
 8006058:	af02      	add	r7, sp, #8
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	603b      	str	r3, [r7, #0]
 8006060:	4613      	mov	r3, r2
 8006062:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006064:	2300      	movs	r3, #0
 8006066:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800606e:	b2db      	uxtb	r3, r3
 8006070:	2b20      	cmp	r3, #32
 8006072:	d175      	bne.n	8006160 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d002      	beq.n	8006080 <HAL_UART_Transmit+0x2c>
 800607a:	88fb      	ldrh	r3, [r7, #6]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d101      	bne.n	8006084 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e06e      	b.n	8006162 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2221      	movs	r2, #33	; 0x21
 800608e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006092:	f7fc f94d 	bl	8002330 <HAL_GetTick>
 8006096:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	88fa      	ldrh	r2, [r7, #6]
 800609c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	88fa      	ldrh	r2, [r7, #6]
 80060a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ac:	d108      	bne.n	80060c0 <HAL_UART_Transmit+0x6c>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d104      	bne.n	80060c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80060b6:	2300      	movs	r3, #0
 80060b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	61bb      	str	r3, [r7, #24]
 80060be:	e003      	b.n	80060c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060c4:	2300      	movs	r3, #0
 80060c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80060c8:	e02e      	b.n	8006128 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	9300      	str	r3, [sp, #0]
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	2200      	movs	r2, #0
 80060d2:	2180      	movs	r1, #128	; 0x80
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	f000 fb1f 	bl	8006718 <UART_WaitOnFlagUntilTimeout>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d005      	beq.n	80060ec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2220      	movs	r2, #32
 80060e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e03a      	b.n	8006162 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10b      	bne.n	800610a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	881b      	ldrh	r3, [r3, #0]
 80060f6:	461a      	mov	r2, r3
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006100:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	3302      	adds	r3, #2
 8006106:	61bb      	str	r3, [r7, #24]
 8006108:	e007      	b.n	800611a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	781a      	ldrb	r2, [r3, #0]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	3301      	adds	r3, #1
 8006118:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800611e:	b29b      	uxth	r3, r3
 8006120:	3b01      	subs	r3, #1
 8006122:	b29a      	uxth	r2, r3
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800612c:	b29b      	uxth	r3, r3
 800612e:	2b00      	cmp	r3, #0
 8006130:	d1cb      	bne.n	80060ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	9300      	str	r3, [sp, #0]
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	2200      	movs	r2, #0
 800613a:	2140      	movs	r1, #64	; 0x40
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f000 faeb 	bl	8006718 <UART_WaitOnFlagUntilTimeout>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d005      	beq.n	8006154 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2220      	movs	r2, #32
 800614c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e006      	b.n	8006162 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2220      	movs	r2, #32
 8006158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800615c:	2300      	movs	r3, #0
 800615e:	e000      	b.n	8006162 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006160:	2302      	movs	r3, #2
  }
}
 8006162:	4618      	mov	r0, r3
 8006164:	3720      	adds	r7, #32
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800616a:	b580      	push	{r7, lr}
 800616c:	b084      	sub	sp, #16
 800616e:	af00      	add	r7, sp, #0
 8006170:	60f8      	str	r0, [r7, #12]
 8006172:	60b9      	str	r1, [r7, #8]
 8006174:	4613      	mov	r3, r2
 8006176:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800617e:	b2db      	uxtb	r3, r3
 8006180:	2b20      	cmp	r3, #32
 8006182:	d112      	bne.n	80061aa <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d002      	beq.n	8006190 <HAL_UART_Receive_IT+0x26>
 800618a:	88fb      	ldrh	r3, [r7, #6]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e00b      	b.n	80061ac <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800619a:	88fb      	ldrh	r3, [r7, #6]
 800619c:	461a      	mov	r2, r3
 800619e:	68b9      	ldr	r1, [r7, #8]
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f000 fb12 	bl	80067ca <UART_Start_Receive_IT>
 80061a6:	4603      	mov	r3, r0
 80061a8:	e000      	b.n	80061ac <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80061aa:	2302      	movs	r3, #2
  }
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b0ba      	sub	sp, #232	; 0xe8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80061da:	2300      	movs	r3, #0
 80061dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80061e0:	2300      	movs	r3, #0
 80061e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80061e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ea:	f003 030f 	and.w	r3, r3, #15
 80061ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80061f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d10f      	bne.n	800621a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061fe:	f003 0320 	and.w	r3, r3, #32
 8006202:	2b00      	cmp	r3, #0
 8006204:	d009      	beq.n	800621a <HAL_UART_IRQHandler+0x66>
 8006206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800620a:	f003 0320 	and.w	r3, r3, #32
 800620e:	2b00      	cmp	r3, #0
 8006210:	d003      	beq.n	800621a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 fbf2 	bl	80069fc <UART_Receive_IT>
      return;
 8006218:	e25b      	b.n	80066d2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800621a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800621e:	2b00      	cmp	r3, #0
 8006220:	f000 80de 	beq.w	80063e0 <HAL_UART_IRQHandler+0x22c>
 8006224:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006228:	f003 0301 	and.w	r3, r3, #1
 800622c:	2b00      	cmp	r3, #0
 800622e:	d106      	bne.n	800623e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006234:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006238:	2b00      	cmp	r3, #0
 800623a:	f000 80d1 	beq.w	80063e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800623e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006242:	f003 0301 	and.w	r3, r3, #1
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00b      	beq.n	8006262 <HAL_UART_IRQHandler+0xae>
 800624a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800624e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006252:	2b00      	cmp	r3, #0
 8006254:	d005      	beq.n	8006262 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800625a:	f043 0201 	orr.w	r2, r3, #1
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006266:	f003 0304 	and.w	r3, r3, #4
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00b      	beq.n	8006286 <HAL_UART_IRQHandler+0xd2>
 800626e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006272:	f003 0301 	and.w	r3, r3, #1
 8006276:	2b00      	cmp	r3, #0
 8006278:	d005      	beq.n	8006286 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800627e:	f043 0202 	orr.w	r2, r3, #2
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800628a:	f003 0302 	and.w	r3, r3, #2
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00b      	beq.n	80062aa <HAL_UART_IRQHandler+0xf6>
 8006292:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006296:	f003 0301 	and.w	r3, r3, #1
 800629a:	2b00      	cmp	r3, #0
 800629c:	d005      	beq.n	80062aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062a2:	f043 0204 	orr.w	r2, r3, #4
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80062aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ae:	f003 0308 	and.w	r3, r3, #8
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d011      	beq.n	80062da <HAL_UART_IRQHandler+0x126>
 80062b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062ba:	f003 0320 	and.w	r3, r3, #32
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d105      	bne.n	80062ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80062c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062c6:	f003 0301 	and.w	r3, r3, #1
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d005      	beq.n	80062da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d2:	f043 0208 	orr.w	r2, r3, #8
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062de:	2b00      	cmp	r3, #0
 80062e0:	f000 81f2 	beq.w	80066c8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062e8:	f003 0320 	and.w	r3, r3, #32
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d008      	beq.n	8006302 <HAL_UART_IRQHandler+0x14e>
 80062f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062f4:	f003 0320 	and.w	r3, r3, #32
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d002      	beq.n	8006302 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 fb7d 	bl	80069fc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	695b      	ldr	r3, [r3, #20]
 8006308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800630c:	2b40      	cmp	r3, #64	; 0x40
 800630e:	bf0c      	ite	eq
 8006310:	2301      	moveq	r3, #1
 8006312:	2300      	movne	r3, #0
 8006314:	b2db      	uxtb	r3, r3
 8006316:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800631e:	f003 0308 	and.w	r3, r3, #8
 8006322:	2b00      	cmp	r3, #0
 8006324:	d103      	bne.n	800632e <HAL_UART_IRQHandler+0x17a>
 8006326:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800632a:	2b00      	cmp	r3, #0
 800632c:	d04f      	beq.n	80063ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 fa85 	bl	800683e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800633e:	2b40      	cmp	r3, #64	; 0x40
 8006340:	d141      	bne.n	80063c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	3314      	adds	r3, #20
 8006348:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006350:	e853 3f00 	ldrex	r3, [r3]
 8006354:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006358:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800635c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006360:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	3314      	adds	r3, #20
 800636a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800636e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006372:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006376:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800637a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800637e:	e841 2300 	strex	r3, r2, [r1]
 8006382:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006386:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1d9      	bne.n	8006342 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006392:	2b00      	cmp	r3, #0
 8006394:	d013      	beq.n	80063be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800639a:	4a7e      	ldr	r2, [pc, #504]	; (8006594 <HAL_UART_IRQHandler+0x3e0>)
 800639c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7fc f975 	bl	8002692 <HAL_DMA_Abort_IT>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d016      	beq.n	80063dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80063b8:	4610      	mov	r0, r2
 80063ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063bc:	e00e      	b.n	80063dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 f994 	bl	80066ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063c4:	e00a      	b.n	80063dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 f990 	bl	80066ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063cc:	e006      	b.n	80063dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 f98c 	bl	80066ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80063da:	e175      	b.n	80066c8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063dc:	bf00      	nop
    return;
 80063de:	e173      	b.n	80066c8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	f040 814f 	bne.w	8006688 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80063ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ee:	f003 0310 	and.w	r3, r3, #16
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	f000 8148 	beq.w	8006688 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80063f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063fc:	f003 0310 	and.w	r3, r3, #16
 8006400:	2b00      	cmp	r3, #0
 8006402:	f000 8141 	beq.w	8006688 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006406:	2300      	movs	r3, #0
 8006408:	60bb      	str	r3, [r7, #8]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	60bb      	str	r3, [r7, #8]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	60bb      	str	r3, [r7, #8]
 800641a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006426:	2b40      	cmp	r3, #64	; 0x40
 8006428:	f040 80b6 	bne.w	8006598 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006438:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800643c:	2b00      	cmp	r3, #0
 800643e:	f000 8145 	beq.w	80066cc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006446:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800644a:	429a      	cmp	r2, r3
 800644c:	f080 813e 	bcs.w	80066cc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006456:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800645c:	69db      	ldr	r3, [r3, #28]
 800645e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006462:	f000 8088 	beq.w	8006576 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	330c      	adds	r3, #12
 800646c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006470:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006474:	e853 3f00 	ldrex	r3, [r3]
 8006478:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800647c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006480:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006484:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	330c      	adds	r3, #12
 800648e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006492:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006496:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800649e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80064a2:	e841 2300 	strex	r3, r2, [r1]
 80064a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80064aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1d9      	bne.n	8006466 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	3314      	adds	r3, #20
 80064b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064bc:	e853 3f00 	ldrex	r3, [r3]
 80064c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80064c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064c4:	f023 0301 	bic.w	r3, r3, #1
 80064c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	3314      	adds	r3, #20
 80064d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80064d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80064da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80064de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80064e2:	e841 2300 	strex	r3, r2, [r1]
 80064e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80064e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1e1      	bne.n	80064b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	3314      	adds	r3, #20
 80064f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064f8:	e853 3f00 	ldrex	r3, [r3]
 80064fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80064fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006504:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	3314      	adds	r3, #20
 800650e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006512:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006514:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006516:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006518:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800651a:	e841 2300 	strex	r3, r2, [r1]
 800651e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006520:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1e3      	bne.n	80064ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2220      	movs	r2, #32
 800652a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	330c      	adds	r3, #12
 800653a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800653e:	e853 3f00 	ldrex	r3, [r3]
 8006542:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006544:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006546:	f023 0310 	bic.w	r3, r3, #16
 800654a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	330c      	adds	r3, #12
 8006554:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006558:	65ba      	str	r2, [r7, #88]	; 0x58
 800655a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800655e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006560:	e841 2300 	strex	r3, r2, [r1]
 8006564:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006568:	2b00      	cmp	r3, #0
 800656a:	d1e3      	bne.n	8006534 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006570:	4618      	mov	r0, r3
 8006572:	f7fc f81e 	bl	80025b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2202      	movs	r2, #2
 800657a:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006584:	b29b      	uxth	r3, r3
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	b29b      	uxth	r3, r3
 800658a:	4619      	mov	r1, r3
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 f8b7 	bl	8006700 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006592:	e09b      	b.n	80066cc <HAL_UART_IRQHandler+0x518>
 8006594:	08006905 	.word	0x08006905
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f000 808e 	beq.w	80066d0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80065b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 8089 	beq.w	80066d0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	330c      	adds	r3, #12
 80065c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c8:	e853 3f00 	ldrex	r3, [r3]
 80065cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80065ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	330c      	adds	r3, #12
 80065de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80065e2:	647a      	str	r2, [r7, #68]	; 0x44
 80065e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065ea:	e841 2300 	strex	r3, r2, [r1]
 80065ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1e3      	bne.n	80065be <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	3314      	adds	r3, #20
 80065fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006600:	e853 3f00 	ldrex	r3, [r3]
 8006604:	623b      	str	r3, [r7, #32]
   return(result);
 8006606:	6a3b      	ldr	r3, [r7, #32]
 8006608:	f023 0301 	bic.w	r3, r3, #1
 800660c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	3314      	adds	r3, #20
 8006616:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800661a:	633a      	str	r2, [r7, #48]	; 0x30
 800661c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006622:	e841 2300 	strex	r3, r2, [r1]
 8006626:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1e3      	bne.n	80065f6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2220      	movs	r2, #32
 8006632:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	330c      	adds	r3, #12
 8006642:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	e853 3f00 	ldrex	r3, [r3]
 800664a:	60fb      	str	r3, [r7, #12]
   return(result);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f023 0310 	bic.w	r3, r3, #16
 8006652:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	330c      	adds	r3, #12
 800665c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006660:	61fa      	str	r2, [r7, #28]
 8006662:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006664:	69b9      	ldr	r1, [r7, #24]
 8006666:	69fa      	ldr	r2, [r7, #28]
 8006668:	e841 2300 	strex	r3, r2, [r1]
 800666c:	617b      	str	r3, [r7, #20]
   return(result);
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d1e3      	bne.n	800663c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2202      	movs	r2, #2
 8006678:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800667a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800667e:	4619      	mov	r1, r3
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 f83d 	bl	8006700 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006686:	e023      	b.n	80066d0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800668c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006690:	2b00      	cmp	r3, #0
 8006692:	d009      	beq.n	80066a8 <HAL_UART_IRQHandler+0x4f4>
 8006694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800669c:	2b00      	cmp	r3, #0
 800669e:	d003      	beq.n	80066a8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 f943 	bl	800692c <UART_Transmit_IT>
    return;
 80066a6:	e014      	b.n	80066d2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80066a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00e      	beq.n	80066d2 <HAL_UART_IRQHandler+0x51e>
 80066b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d008      	beq.n	80066d2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 f983 	bl	80069cc <UART_EndTransmit_IT>
    return;
 80066c6:	e004      	b.n	80066d2 <HAL_UART_IRQHandler+0x51e>
    return;
 80066c8:	bf00      	nop
 80066ca:	e002      	b.n	80066d2 <HAL_UART_IRQHandler+0x51e>
      return;
 80066cc:	bf00      	nop
 80066ce:	e000      	b.n	80066d2 <HAL_UART_IRQHandler+0x51e>
      return;
 80066d0:	bf00      	nop
  }
}
 80066d2:	37e8      	adds	r7, #232	; 0xe8
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	460b      	mov	r3, r1
 800670a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800670c:	bf00      	nop
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b086      	sub	sp, #24
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	603b      	str	r3, [r7, #0]
 8006724:	4613      	mov	r3, r2
 8006726:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006728:	e03b      	b.n	80067a2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800672a:	6a3b      	ldr	r3, [r7, #32]
 800672c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006730:	d037      	beq.n	80067a2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006732:	f7fb fdfd 	bl	8002330 <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	6a3a      	ldr	r2, [r7, #32]
 800673e:	429a      	cmp	r2, r3
 8006740:	d302      	bcc.n	8006748 <UART_WaitOnFlagUntilTimeout+0x30>
 8006742:	6a3b      	ldr	r3, [r7, #32]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d101      	bne.n	800674c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e03a      	b.n	80067c2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	f003 0304 	and.w	r3, r3, #4
 8006756:	2b00      	cmp	r3, #0
 8006758:	d023      	beq.n	80067a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	2b80      	cmp	r3, #128	; 0x80
 800675e:	d020      	beq.n	80067a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	2b40      	cmp	r3, #64	; 0x40
 8006764:	d01d      	beq.n	80067a2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0308 	and.w	r3, r3, #8
 8006770:	2b08      	cmp	r3, #8
 8006772:	d116      	bne.n	80067a2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006774:	2300      	movs	r3, #0
 8006776:	617b      	str	r3, [r7, #20]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	617b      	str	r3, [r7, #20]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	617b      	str	r3, [r7, #20]
 8006788:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800678a:	68f8      	ldr	r0, [r7, #12]
 800678c:	f000 f857 	bl	800683e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2208      	movs	r2, #8
 8006794:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e00f      	b.n	80067c2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	4013      	ands	r3, r2
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	bf0c      	ite	eq
 80067b2:	2301      	moveq	r3, #1
 80067b4:	2300      	movne	r3, #0
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	461a      	mov	r2, r3
 80067ba:	79fb      	ldrb	r3, [r7, #7]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d0b4      	beq.n	800672a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3718      	adds	r7, #24
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067ca:	b480      	push	{r7}
 80067cc:	b085      	sub	sp, #20
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	60f8      	str	r0, [r7, #12]
 80067d2:	60b9      	str	r1, [r7, #8]
 80067d4:	4613      	mov	r3, r2
 80067d6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	68ba      	ldr	r2, [r7, #8]
 80067dc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	88fa      	ldrh	r2, [r7, #6]
 80067e2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	88fa      	ldrh	r2, [r7, #6]
 80067e8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2222      	movs	r2, #34	; 0x22
 80067f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d007      	beq.n	8006810 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68da      	ldr	r2, [r3, #12]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800680e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	695a      	ldr	r2, [r3, #20]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f042 0201 	orr.w	r2, r2, #1
 800681e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68da      	ldr	r2, [r3, #12]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f042 0220 	orr.w	r2, r2, #32
 800682e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	3714      	adds	r7, #20
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr

0800683e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800683e:	b480      	push	{r7}
 8006840:	b095      	sub	sp, #84	; 0x54
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	330c      	adds	r3, #12
 800684c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006850:	e853 3f00 	ldrex	r3, [r3]
 8006854:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006858:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800685c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	330c      	adds	r3, #12
 8006864:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006866:	643a      	str	r2, [r7, #64]	; 0x40
 8006868:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800686c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800686e:	e841 2300 	strex	r3, r2, [r1]
 8006872:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1e5      	bne.n	8006846 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	3314      	adds	r3, #20
 8006880:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006882:	6a3b      	ldr	r3, [r7, #32]
 8006884:	e853 3f00 	ldrex	r3, [r3]
 8006888:	61fb      	str	r3, [r7, #28]
   return(result);
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	f023 0301 	bic.w	r3, r3, #1
 8006890:	64bb      	str	r3, [r7, #72]	; 0x48
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	3314      	adds	r3, #20
 8006898:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800689a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800689c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068a2:	e841 2300 	strex	r3, r2, [r1]
 80068a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1e5      	bne.n	800687a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d119      	bne.n	80068ea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	330c      	adds	r3, #12
 80068bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	e853 3f00 	ldrex	r3, [r3]
 80068c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	f023 0310 	bic.w	r3, r3, #16
 80068cc:	647b      	str	r3, [r7, #68]	; 0x44
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	330c      	adds	r3, #12
 80068d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068d6:	61ba      	str	r2, [r7, #24]
 80068d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068da:	6979      	ldr	r1, [r7, #20]
 80068dc:	69ba      	ldr	r2, [r7, #24]
 80068de:	e841 2300 	strex	r3, r2, [r1]
 80068e2:	613b      	str	r3, [r7, #16]
   return(result);
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1e5      	bne.n	80068b6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2220      	movs	r2, #32
 80068ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80068f8:	bf00      	nop
 80068fa:	3754      	adds	r7, #84	; 0x54
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006910:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f7ff fee4 	bl	80066ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006924:	bf00      	nop
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800693a:	b2db      	uxtb	r3, r3
 800693c:	2b21      	cmp	r3, #33	; 0x21
 800693e:	d13e      	bne.n	80069be <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006948:	d114      	bne.n	8006974 <UART_Transmit_IT+0x48>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d110      	bne.n	8006974 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	881b      	ldrh	r3, [r3, #0]
 800695c:	461a      	mov	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006966:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6a1b      	ldr	r3, [r3, #32]
 800696c:	1c9a      	adds	r2, r3, #2
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	621a      	str	r2, [r3, #32]
 8006972:	e008      	b.n	8006986 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a1b      	ldr	r3, [r3, #32]
 8006978:	1c59      	adds	r1, r3, #1
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	6211      	str	r1, [r2, #32]
 800697e:	781a      	ldrb	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800698a:	b29b      	uxth	r3, r3
 800698c:	3b01      	subs	r3, #1
 800698e:	b29b      	uxth	r3, r3
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	4619      	mov	r1, r3
 8006994:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006996:	2b00      	cmp	r3, #0
 8006998:	d10f      	bne.n	80069ba <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68da      	ldr	r2, [r3, #12]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069a8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68da      	ldr	r2, [r3, #12]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069b8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80069ba:	2300      	movs	r3, #0
 80069bc:	e000      	b.n	80069c0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80069be:	2302      	movs	r3, #2
  }
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3714      	adds	r7, #20
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68da      	ldr	r2, [r3, #12]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069e2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2220      	movs	r2, #32
 80069e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f7ff fe73 	bl	80066d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3708      	adds	r7, #8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b08c      	sub	sp, #48	; 0x30
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	2b22      	cmp	r3, #34	; 0x22
 8006a0e:	f040 80ae 	bne.w	8006b6e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a1a:	d117      	bne.n	8006a4c <UART_Receive_IT+0x50>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d113      	bne.n	8006a4c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006a24:	2300      	movs	r3, #0
 8006a26:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a2c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a44:	1c9a      	adds	r2, r3, #2
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	629a      	str	r2, [r3, #40]	; 0x28
 8006a4a:	e026      	b.n	8006a9a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a50:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006a52:	2300      	movs	r3, #0
 8006a54:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a5e:	d007      	beq.n	8006a70 <UART_Receive_IT+0x74>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10a      	bne.n	8006a7e <UART_Receive_IT+0x82>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d106      	bne.n	8006a7e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	b2da      	uxtb	r2, r3
 8006a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a7a:	701a      	strb	r2, [r3, #0]
 8006a7c:	e008      	b.n	8006a90 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a8a:	b2da      	uxtb	r2, r3
 8006a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a94:	1c5a      	adds	r2, r3, #1
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d15d      	bne.n	8006b6a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68da      	ldr	r2, [r3, #12]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f022 0220 	bic.w	r2, r2, #32
 8006abc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	68da      	ldr	r2, [r3, #12]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006acc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	695a      	ldr	r2, [r3, #20]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f022 0201 	bic.w	r2, r2, #1
 8006adc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2220      	movs	r2, #32
 8006ae2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d135      	bne.n	8006b60 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	330c      	adds	r3, #12
 8006b00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	e853 3f00 	ldrex	r3, [r3]
 8006b08:	613b      	str	r3, [r7, #16]
   return(result);
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	f023 0310 	bic.w	r3, r3, #16
 8006b10:	627b      	str	r3, [r7, #36]	; 0x24
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	330c      	adds	r3, #12
 8006b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b1a:	623a      	str	r2, [r7, #32]
 8006b1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1e:	69f9      	ldr	r1, [r7, #28]
 8006b20:	6a3a      	ldr	r2, [r7, #32]
 8006b22:	e841 2300 	strex	r3, r2, [r1]
 8006b26:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1e5      	bne.n	8006afa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0310 	and.w	r3, r3, #16
 8006b38:	2b10      	cmp	r3, #16
 8006b3a:	d10a      	bne.n	8006b52 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	60fb      	str	r3, [r7, #12]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	60fb      	str	r3, [r7, #12]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	60fb      	str	r3, [r7, #12]
 8006b50:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b56:	4619      	mov	r1, r3
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f7ff fdd1 	bl	8006700 <HAL_UARTEx_RxEventCallback>
 8006b5e:	e002      	b.n	8006b66 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f7fb fa41 	bl	8001fe8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006b66:	2300      	movs	r3, #0
 8006b68:	e002      	b.n	8006b70 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	e000      	b.n	8006b70 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006b6e:	2302      	movs	r3, #2
  }
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3730      	adds	r7, #48	; 0x30
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b7c:	b0c0      	sub	sp, #256	; 0x100
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b94:	68d9      	ldr	r1, [r3, #12]
 8006b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	ea40 0301 	orr.w	r3, r0, r1
 8006ba0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ba6:	689a      	ldr	r2, [r3, #8]
 8006ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	431a      	orrs	r2, r3
 8006bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bb4:	695b      	ldr	r3, [r3, #20]
 8006bb6:	431a      	orrs	r2, r3
 8006bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bbc:	69db      	ldr	r3, [r3, #28]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006bd0:	f021 010c 	bic.w	r1, r1, #12
 8006bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006bde:	430b      	orrs	r3, r1
 8006be0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	695b      	ldr	r3, [r3, #20]
 8006bea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bf2:	6999      	ldr	r1, [r3, #24]
 8006bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	ea40 0301 	orr.w	r3, r0, r1
 8006bfe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	4b8f      	ldr	r3, [pc, #572]	; (8006e44 <UART_SetConfig+0x2cc>)
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d005      	beq.n	8006c18 <UART_SetConfig+0xa0>
 8006c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	4b8d      	ldr	r3, [pc, #564]	; (8006e48 <UART_SetConfig+0x2d0>)
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d104      	bne.n	8006c22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c18:	f7fd fbf8 	bl	800440c <HAL_RCC_GetPCLK2Freq>
 8006c1c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006c20:	e003      	b.n	8006c2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c22:	f7fd fbdf 	bl	80043e4 <HAL_RCC_GetPCLK1Freq>
 8006c26:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c2e:	69db      	ldr	r3, [r3, #28]
 8006c30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c34:	f040 810c 	bne.w	8006e50 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c42:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006c46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006c4a:	4622      	mov	r2, r4
 8006c4c:	462b      	mov	r3, r5
 8006c4e:	1891      	adds	r1, r2, r2
 8006c50:	65b9      	str	r1, [r7, #88]	; 0x58
 8006c52:	415b      	adcs	r3, r3
 8006c54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006c5a:	4621      	mov	r1, r4
 8006c5c:	eb12 0801 	adds.w	r8, r2, r1
 8006c60:	4629      	mov	r1, r5
 8006c62:	eb43 0901 	adc.w	r9, r3, r1
 8006c66:	f04f 0200 	mov.w	r2, #0
 8006c6a:	f04f 0300 	mov.w	r3, #0
 8006c6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c7a:	4690      	mov	r8, r2
 8006c7c:	4699      	mov	r9, r3
 8006c7e:	4623      	mov	r3, r4
 8006c80:	eb18 0303 	adds.w	r3, r8, r3
 8006c84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c88:	462b      	mov	r3, r5
 8006c8a:	eb49 0303 	adc.w	r3, r9, r3
 8006c8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c9e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006ca2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	18db      	adds	r3, r3, r3
 8006caa:	653b      	str	r3, [r7, #80]	; 0x50
 8006cac:	4613      	mov	r3, r2
 8006cae:	eb42 0303 	adc.w	r3, r2, r3
 8006cb2:	657b      	str	r3, [r7, #84]	; 0x54
 8006cb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006cb8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006cbc:	f7f9 fa9e 	bl	80001fc <__aeabi_uldivmod>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	4b61      	ldr	r3, [pc, #388]	; (8006e4c <UART_SetConfig+0x2d4>)
 8006cc6:	fba3 2302 	umull	r2, r3, r3, r2
 8006cca:	095b      	lsrs	r3, r3, #5
 8006ccc:	011c      	lsls	r4, r3, #4
 8006cce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006cd8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006cdc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006ce0:	4642      	mov	r2, r8
 8006ce2:	464b      	mov	r3, r9
 8006ce4:	1891      	adds	r1, r2, r2
 8006ce6:	64b9      	str	r1, [r7, #72]	; 0x48
 8006ce8:	415b      	adcs	r3, r3
 8006cea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006cf0:	4641      	mov	r1, r8
 8006cf2:	eb12 0a01 	adds.w	sl, r2, r1
 8006cf6:	4649      	mov	r1, r9
 8006cf8:	eb43 0b01 	adc.w	fp, r3, r1
 8006cfc:	f04f 0200 	mov.w	r2, #0
 8006d00:	f04f 0300 	mov.w	r3, #0
 8006d04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d10:	4692      	mov	sl, r2
 8006d12:	469b      	mov	fp, r3
 8006d14:	4643      	mov	r3, r8
 8006d16:	eb1a 0303 	adds.w	r3, sl, r3
 8006d1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d1e:	464b      	mov	r3, r9
 8006d20:	eb4b 0303 	adc.w	r3, fp, r3
 8006d24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d34:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006d38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	18db      	adds	r3, r3, r3
 8006d40:	643b      	str	r3, [r7, #64]	; 0x40
 8006d42:	4613      	mov	r3, r2
 8006d44:	eb42 0303 	adc.w	r3, r2, r3
 8006d48:	647b      	str	r3, [r7, #68]	; 0x44
 8006d4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006d4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006d52:	f7f9 fa53 	bl	80001fc <__aeabi_uldivmod>
 8006d56:	4602      	mov	r2, r0
 8006d58:	460b      	mov	r3, r1
 8006d5a:	4611      	mov	r1, r2
 8006d5c:	4b3b      	ldr	r3, [pc, #236]	; (8006e4c <UART_SetConfig+0x2d4>)
 8006d5e:	fba3 2301 	umull	r2, r3, r3, r1
 8006d62:	095b      	lsrs	r3, r3, #5
 8006d64:	2264      	movs	r2, #100	; 0x64
 8006d66:	fb02 f303 	mul.w	r3, r2, r3
 8006d6a:	1acb      	subs	r3, r1, r3
 8006d6c:	00db      	lsls	r3, r3, #3
 8006d6e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006d72:	4b36      	ldr	r3, [pc, #216]	; (8006e4c <UART_SetConfig+0x2d4>)
 8006d74:	fba3 2302 	umull	r2, r3, r3, r2
 8006d78:	095b      	lsrs	r3, r3, #5
 8006d7a:	005b      	lsls	r3, r3, #1
 8006d7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d80:	441c      	add	r4, r3
 8006d82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d86:	2200      	movs	r2, #0
 8006d88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d8c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006d90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006d94:	4642      	mov	r2, r8
 8006d96:	464b      	mov	r3, r9
 8006d98:	1891      	adds	r1, r2, r2
 8006d9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006d9c:	415b      	adcs	r3, r3
 8006d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006da0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006da4:	4641      	mov	r1, r8
 8006da6:	1851      	adds	r1, r2, r1
 8006da8:	6339      	str	r1, [r7, #48]	; 0x30
 8006daa:	4649      	mov	r1, r9
 8006dac:	414b      	adcs	r3, r1
 8006dae:	637b      	str	r3, [r7, #52]	; 0x34
 8006db0:	f04f 0200 	mov.w	r2, #0
 8006db4:	f04f 0300 	mov.w	r3, #0
 8006db8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006dbc:	4659      	mov	r1, fp
 8006dbe:	00cb      	lsls	r3, r1, #3
 8006dc0:	4651      	mov	r1, sl
 8006dc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006dc6:	4651      	mov	r1, sl
 8006dc8:	00ca      	lsls	r2, r1, #3
 8006dca:	4610      	mov	r0, r2
 8006dcc:	4619      	mov	r1, r3
 8006dce:	4603      	mov	r3, r0
 8006dd0:	4642      	mov	r2, r8
 8006dd2:	189b      	adds	r3, r3, r2
 8006dd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006dd8:	464b      	mov	r3, r9
 8006dda:	460a      	mov	r2, r1
 8006ddc:	eb42 0303 	adc.w	r3, r2, r3
 8006de0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006df0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006df4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006df8:	460b      	mov	r3, r1
 8006dfa:	18db      	adds	r3, r3, r3
 8006dfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dfe:	4613      	mov	r3, r2
 8006e00:	eb42 0303 	adc.w	r3, r2, r3
 8006e04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e0a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006e0e:	f7f9 f9f5 	bl	80001fc <__aeabi_uldivmod>
 8006e12:	4602      	mov	r2, r0
 8006e14:	460b      	mov	r3, r1
 8006e16:	4b0d      	ldr	r3, [pc, #52]	; (8006e4c <UART_SetConfig+0x2d4>)
 8006e18:	fba3 1302 	umull	r1, r3, r3, r2
 8006e1c:	095b      	lsrs	r3, r3, #5
 8006e1e:	2164      	movs	r1, #100	; 0x64
 8006e20:	fb01 f303 	mul.w	r3, r1, r3
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	00db      	lsls	r3, r3, #3
 8006e28:	3332      	adds	r3, #50	; 0x32
 8006e2a:	4a08      	ldr	r2, [pc, #32]	; (8006e4c <UART_SetConfig+0x2d4>)
 8006e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e30:	095b      	lsrs	r3, r3, #5
 8006e32:	f003 0207 	and.w	r2, r3, #7
 8006e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4422      	add	r2, r4
 8006e3e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e40:	e106      	b.n	8007050 <UART_SetConfig+0x4d8>
 8006e42:	bf00      	nop
 8006e44:	40011000 	.word	0x40011000
 8006e48:	40011400 	.word	0x40011400
 8006e4c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e54:	2200      	movs	r2, #0
 8006e56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006e5a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006e5e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006e62:	4642      	mov	r2, r8
 8006e64:	464b      	mov	r3, r9
 8006e66:	1891      	adds	r1, r2, r2
 8006e68:	6239      	str	r1, [r7, #32]
 8006e6a:	415b      	adcs	r3, r3
 8006e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e72:	4641      	mov	r1, r8
 8006e74:	1854      	adds	r4, r2, r1
 8006e76:	4649      	mov	r1, r9
 8006e78:	eb43 0501 	adc.w	r5, r3, r1
 8006e7c:	f04f 0200 	mov.w	r2, #0
 8006e80:	f04f 0300 	mov.w	r3, #0
 8006e84:	00eb      	lsls	r3, r5, #3
 8006e86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e8a:	00e2      	lsls	r2, r4, #3
 8006e8c:	4614      	mov	r4, r2
 8006e8e:	461d      	mov	r5, r3
 8006e90:	4643      	mov	r3, r8
 8006e92:	18e3      	adds	r3, r4, r3
 8006e94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006e98:	464b      	mov	r3, r9
 8006e9a:	eb45 0303 	adc.w	r3, r5, r3
 8006e9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006eae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006eb2:	f04f 0200 	mov.w	r2, #0
 8006eb6:	f04f 0300 	mov.w	r3, #0
 8006eba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006ebe:	4629      	mov	r1, r5
 8006ec0:	008b      	lsls	r3, r1, #2
 8006ec2:	4621      	mov	r1, r4
 8006ec4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ec8:	4621      	mov	r1, r4
 8006eca:	008a      	lsls	r2, r1, #2
 8006ecc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006ed0:	f7f9 f994 	bl	80001fc <__aeabi_uldivmod>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	4b60      	ldr	r3, [pc, #384]	; (800705c <UART_SetConfig+0x4e4>)
 8006eda:	fba3 2302 	umull	r2, r3, r3, r2
 8006ede:	095b      	lsrs	r3, r3, #5
 8006ee0:	011c      	lsls	r4, r3, #4
 8006ee2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006eec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006ef0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006ef4:	4642      	mov	r2, r8
 8006ef6:	464b      	mov	r3, r9
 8006ef8:	1891      	adds	r1, r2, r2
 8006efa:	61b9      	str	r1, [r7, #24]
 8006efc:	415b      	adcs	r3, r3
 8006efe:	61fb      	str	r3, [r7, #28]
 8006f00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f04:	4641      	mov	r1, r8
 8006f06:	1851      	adds	r1, r2, r1
 8006f08:	6139      	str	r1, [r7, #16]
 8006f0a:	4649      	mov	r1, r9
 8006f0c:	414b      	adcs	r3, r1
 8006f0e:	617b      	str	r3, [r7, #20]
 8006f10:	f04f 0200 	mov.w	r2, #0
 8006f14:	f04f 0300 	mov.w	r3, #0
 8006f18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f1c:	4659      	mov	r1, fp
 8006f1e:	00cb      	lsls	r3, r1, #3
 8006f20:	4651      	mov	r1, sl
 8006f22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f26:	4651      	mov	r1, sl
 8006f28:	00ca      	lsls	r2, r1, #3
 8006f2a:	4610      	mov	r0, r2
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	4603      	mov	r3, r0
 8006f30:	4642      	mov	r2, r8
 8006f32:	189b      	adds	r3, r3, r2
 8006f34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f38:	464b      	mov	r3, r9
 8006f3a:	460a      	mov	r2, r1
 8006f3c:	eb42 0303 	adc.w	r3, r2, r3
 8006f40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f4e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006f50:	f04f 0200 	mov.w	r2, #0
 8006f54:	f04f 0300 	mov.w	r3, #0
 8006f58:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006f5c:	4649      	mov	r1, r9
 8006f5e:	008b      	lsls	r3, r1, #2
 8006f60:	4641      	mov	r1, r8
 8006f62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f66:	4641      	mov	r1, r8
 8006f68:	008a      	lsls	r2, r1, #2
 8006f6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006f6e:	f7f9 f945 	bl	80001fc <__aeabi_uldivmod>
 8006f72:	4602      	mov	r2, r0
 8006f74:	460b      	mov	r3, r1
 8006f76:	4611      	mov	r1, r2
 8006f78:	4b38      	ldr	r3, [pc, #224]	; (800705c <UART_SetConfig+0x4e4>)
 8006f7a:	fba3 2301 	umull	r2, r3, r3, r1
 8006f7e:	095b      	lsrs	r3, r3, #5
 8006f80:	2264      	movs	r2, #100	; 0x64
 8006f82:	fb02 f303 	mul.w	r3, r2, r3
 8006f86:	1acb      	subs	r3, r1, r3
 8006f88:	011b      	lsls	r3, r3, #4
 8006f8a:	3332      	adds	r3, #50	; 0x32
 8006f8c:	4a33      	ldr	r2, [pc, #204]	; (800705c <UART_SetConfig+0x4e4>)
 8006f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f92:	095b      	lsrs	r3, r3, #5
 8006f94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f98:	441c      	add	r4, r3
 8006f9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	673b      	str	r3, [r7, #112]	; 0x70
 8006fa2:	677a      	str	r2, [r7, #116]	; 0x74
 8006fa4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006fa8:	4642      	mov	r2, r8
 8006faa:	464b      	mov	r3, r9
 8006fac:	1891      	adds	r1, r2, r2
 8006fae:	60b9      	str	r1, [r7, #8]
 8006fb0:	415b      	adcs	r3, r3
 8006fb2:	60fb      	str	r3, [r7, #12]
 8006fb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006fb8:	4641      	mov	r1, r8
 8006fba:	1851      	adds	r1, r2, r1
 8006fbc:	6039      	str	r1, [r7, #0]
 8006fbe:	4649      	mov	r1, r9
 8006fc0:	414b      	adcs	r3, r1
 8006fc2:	607b      	str	r3, [r7, #4]
 8006fc4:	f04f 0200 	mov.w	r2, #0
 8006fc8:	f04f 0300 	mov.w	r3, #0
 8006fcc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006fd0:	4659      	mov	r1, fp
 8006fd2:	00cb      	lsls	r3, r1, #3
 8006fd4:	4651      	mov	r1, sl
 8006fd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fda:	4651      	mov	r1, sl
 8006fdc:	00ca      	lsls	r2, r1, #3
 8006fde:	4610      	mov	r0, r2
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	4642      	mov	r2, r8
 8006fe6:	189b      	adds	r3, r3, r2
 8006fe8:	66bb      	str	r3, [r7, #104]	; 0x68
 8006fea:	464b      	mov	r3, r9
 8006fec:	460a      	mov	r2, r1
 8006fee:	eb42 0303 	adc.w	r3, r2, r3
 8006ff2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	663b      	str	r3, [r7, #96]	; 0x60
 8006ffe:	667a      	str	r2, [r7, #100]	; 0x64
 8007000:	f04f 0200 	mov.w	r2, #0
 8007004:	f04f 0300 	mov.w	r3, #0
 8007008:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800700c:	4649      	mov	r1, r9
 800700e:	008b      	lsls	r3, r1, #2
 8007010:	4641      	mov	r1, r8
 8007012:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007016:	4641      	mov	r1, r8
 8007018:	008a      	lsls	r2, r1, #2
 800701a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800701e:	f7f9 f8ed 	bl	80001fc <__aeabi_uldivmod>
 8007022:	4602      	mov	r2, r0
 8007024:	460b      	mov	r3, r1
 8007026:	4b0d      	ldr	r3, [pc, #52]	; (800705c <UART_SetConfig+0x4e4>)
 8007028:	fba3 1302 	umull	r1, r3, r3, r2
 800702c:	095b      	lsrs	r3, r3, #5
 800702e:	2164      	movs	r1, #100	; 0x64
 8007030:	fb01 f303 	mul.w	r3, r1, r3
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	011b      	lsls	r3, r3, #4
 8007038:	3332      	adds	r3, #50	; 0x32
 800703a:	4a08      	ldr	r2, [pc, #32]	; (800705c <UART_SetConfig+0x4e4>)
 800703c:	fba2 2303 	umull	r2, r3, r2, r3
 8007040:	095b      	lsrs	r3, r3, #5
 8007042:	f003 020f 	and.w	r2, r3, #15
 8007046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4422      	add	r2, r4
 800704e:	609a      	str	r2, [r3, #8]
}
 8007050:	bf00      	nop
 8007052:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007056:	46bd      	mov	sp, r7
 8007058:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800705c:	51eb851f 	.word	0x51eb851f

08007060 <memset>:
 8007060:	4402      	add	r2, r0
 8007062:	4603      	mov	r3, r0
 8007064:	4293      	cmp	r3, r2
 8007066:	d100      	bne.n	800706a <memset+0xa>
 8007068:	4770      	bx	lr
 800706a:	f803 1b01 	strb.w	r1, [r3], #1
 800706e:	e7f9      	b.n	8007064 <memset+0x4>

08007070 <__libc_init_array>:
 8007070:	b570      	push	{r4, r5, r6, lr}
 8007072:	4d0d      	ldr	r5, [pc, #52]	; (80070a8 <__libc_init_array+0x38>)
 8007074:	4c0d      	ldr	r4, [pc, #52]	; (80070ac <__libc_init_array+0x3c>)
 8007076:	1b64      	subs	r4, r4, r5
 8007078:	10a4      	asrs	r4, r4, #2
 800707a:	2600      	movs	r6, #0
 800707c:	42a6      	cmp	r6, r4
 800707e:	d109      	bne.n	8007094 <__libc_init_array+0x24>
 8007080:	4d0b      	ldr	r5, [pc, #44]	; (80070b0 <__libc_init_array+0x40>)
 8007082:	4c0c      	ldr	r4, [pc, #48]	; (80070b4 <__libc_init_array+0x44>)
 8007084:	f000 f818 	bl	80070b8 <_init>
 8007088:	1b64      	subs	r4, r4, r5
 800708a:	10a4      	asrs	r4, r4, #2
 800708c:	2600      	movs	r6, #0
 800708e:	42a6      	cmp	r6, r4
 8007090:	d105      	bne.n	800709e <__libc_init_array+0x2e>
 8007092:	bd70      	pop	{r4, r5, r6, pc}
 8007094:	f855 3b04 	ldr.w	r3, [r5], #4
 8007098:	4798      	blx	r3
 800709a:	3601      	adds	r6, #1
 800709c:	e7ee      	b.n	800707c <__libc_init_array+0xc>
 800709e:	f855 3b04 	ldr.w	r3, [r5], #4
 80070a2:	4798      	blx	r3
 80070a4:	3601      	adds	r6, #1
 80070a6:	e7f2      	b.n	800708e <__libc_init_array+0x1e>
 80070a8:	08007190 	.word	0x08007190
 80070ac:	08007190 	.word	0x08007190
 80070b0:	08007190 	.word	0x08007190
 80070b4:	08007194 	.word	0x08007194

080070b8 <_init>:
 80070b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ba:	bf00      	nop
 80070bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070be:	bc08      	pop	{r3}
 80070c0:	469e      	mov	lr, r3
 80070c2:	4770      	bx	lr

080070c4 <_fini>:
 80070c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070c6:	bf00      	nop
 80070c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ca:	bc08      	pop	{r3}
 80070cc:	469e      	mov	lr, r3
 80070ce:	4770      	bx	lr
