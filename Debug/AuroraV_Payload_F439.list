
AuroraV_Payload_F439.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082bc  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08008468  08008468  00018468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008520  08008520  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  08008520  08008520  00018520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008528  08008528  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008528  08008528  00018528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800852c  0800852c  0001852c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08008530  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
 10 .bss          00000590  20000028  20000028  00020028  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200005b8  200005b8  00020028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001bdd6  00000000  00000000  0002009b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003ccf  00000000  00000000  0003be71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001690  00000000  00000000  0003fb40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001191  00000000  00000000  000411d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027b28  00000000  00000000  00042361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001d046  00000000  00000000  00069e89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e9c7a  00000000  00000000  00086ecf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005e60  00000000  00000000  00170b4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  001769ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000028 	.word	0x20000028
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08008450 	.word	0x08008450

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000002c 	.word	0x2000002c
 80001e8:	08008450 	.word	0x08008450

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <init_accel>:
uint8_t OUT_Y_L 				= 0x34;
uint8_t OUT_Y_H 				= 0x35;
uint8_t OUT_Z_L 				= 0x36;
uint8_t OUT_Z_H 				= 0x37;

HAL_StatusTypeDef init_accel(I2C_HandleTypeDef* hi2c) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;

	// Set standby mode
	ret = i2c_write_reg(hi2c, ADXL314_ADDR, &POWER_CTL_REG, 0x00);
 8000500:	4b16      	ldr	r3, [pc, #88]	; (800055c <init_accel+0x64>)
 8000502:	7819      	ldrb	r1, [r3, #0]
 8000504:	2300      	movs	r3, #0
 8000506:	4a16      	ldr	r2, [pc, #88]	; (8000560 <init_accel+0x68>)
 8000508:	6878      	ldr	r0, [r7, #4]
 800050a:	f000 fbe6 	bl	8000cda <i2c_write_reg>
 800050e:	4603      	mov	r3, r0
 8000510:	73fb      	strb	r3, [r7, #15]

	// Set to 200G right justified
	ret = i2c_write_reg(hi2c, ADXL314_ADDR, &DATA_FORMAT_REG, RIGHT_JUST);
 8000512:	4b12      	ldr	r3, [pc, #72]	; (800055c <init_accel+0x64>)
 8000514:	7819      	ldrb	r1, [r3, #0]
 8000516:	230b      	movs	r3, #11
 8000518:	4a12      	ldr	r2, [pc, #72]	; (8000564 <init_accel+0x6c>)
 800051a:	6878      	ldr	r0, [r7, #4]
 800051c:	f000 fbdd 	bl	8000cda <i2c_write_reg>
 8000520:	4603      	mov	r3, r0
 8000522:	73fb      	strb	r3, [r7, #15]

	// Set to 1kHz ODR
	ret = i2c_write_reg(hi2c, ADXL314_ADDR, &BW_RATE_REG, MASK_1kHz);
 8000524:	4b0d      	ldr	r3, [pc, #52]	; (800055c <init_accel+0x64>)
 8000526:	7819      	ldrb	r1, [r3, #0]
 8000528:	230a      	movs	r3, #10
 800052a:	4a0f      	ldr	r2, [pc, #60]	; (8000568 <init_accel+0x70>)
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	f000 fbd4 	bl	8000cda <i2c_write_reg>
 8000532:	4603      	mov	r3, r0
 8000534:	73fb      	strb	r3, [r7, #15]

	// Write the offset registers
	ret = writeOffset(hi2c);
 8000536:	6878      	ldr	r0, [r7, #4]
 8000538:	f000 f856 	bl	80005e8 <writeOffset>
 800053c:	4603      	mov	r3, r0
 800053e:	73fb      	strb	r3, [r7, #15]

	// Start measuring
	ret = i2c_write_reg(hi2c, ADXL314_ADDR, &POWER_CTL_REG, START_MEAS);
 8000540:	4b06      	ldr	r3, [pc, #24]	; (800055c <init_accel+0x64>)
 8000542:	7819      	ldrb	r1, [r3, #0]
 8000544:	2308      	movs	r3, #8
 8000546:	4a06      	ldr	r2, [pc, #24]	; (8000560 <init_accel+0x68>)
 8000548:	6878      	ldr	r0, [r7, #4]
 800054a:	f000 fbc6 	bl	8000cda <i2c_write_reg>
 800054e:	4603      	mov	r3, r0
 8000550:	73fb      	strb	r3, [r7, #15]

	return ret;
 8000552:	7bfb      	ldrb	r3, [r7, #15]
}
 8000554:	4618      	mov	r0, r3
 8000556:	3710      	adds	r7, #16
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	20000000 	.word	0x20000000
 8000560:	20000002 	.word	0x20000002
 8000564:	20000003 	.word	0x20000003
 8000568:	20000001 	.word	0x20000001

0800056c <readAccelerometer>:

void readAccelerometer(uint8_t values[6], I2C_HandleTypeDef* hi2c) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af02      	add	r7, sp, #8
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < 6; i++) {
 8000576:	2300      	movs	r3, #0
 8000578:	73fb      	strb	r3, [r7, #15]
 800057a:	e007      	b.n	800058c <readAccelerometer+0x20>
		values[i] = 0x00;
 800057c:	7bfb      	ldrb	r3, [r7, #15]
 800057e:	687a      	ldr	r2, [r7, #4]
 8000580:	4413      	add	r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 6; i++) {
 8000586:	7bfb      	ldrb	r3, [r7, #15]
 8000588:	3301      	adds	r3, #1
 800058a:	73fb      	strb	r3, [r7, #15]
 800058c:	7bfb      	ldrb	r3, [r7, #15]
 800058e:	2b05      	cmp	r3, #5
 8000590:	d9f4      	bls.n	800057c <readAccelerometer+0x10>
	}

	i2c_burst_read(hi2c, ADXL314_ADDR, OUT_X_L, 6, values);
 8000592:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <readAccelerometer+0x44>)
 8000594:	7819      	ldrb	r1, [r3, #0]
 8000596:	4b07      	ldr	r3, [pc, #28]	; (80005b4 <readAccelerometer+0x48>)
 8000598:	781a      	ldrb	r2, [r3, #0]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	2306      	movs	r3, #6
 80005a0:	6838      	ldr	r0, [r7, #0]
 80005a2:	f000 fb65 	bl	8000c70 <i2c_burst_read>
}
 80005a6:	bf00      	nop
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000000 	.word	0x20000000
 80005b4:	20000007 	.word	0x20000007

080005b8 <readAccel_whoami>:

uint8_t readAccel_whoami(I2C_HandleTypeDef* hi2c) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	uint8_t data = 0x00;
 80005c0:	2300      	movs	r3, #0
 80005c2:	73fb      	strb	r3, [r7, #15]
	i2c_read_reg(hi2c, &data, ADXL314_ADDR, &WHOAMI);
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <readAccel_whoami+0x28>)
 80005c6:	781a      	ldrb	r2, [r3, #0]
 80005c8:	f107 010f 	add.w	r1, r7, #15
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <readAccel_whoami+0x2c>)
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f000 fb25 	bl	8000c1e <i2c_read_reg>

	return data;
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3710      	adds	r7, #16
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000000 	.word	0x20000000
 80005e4:	20000044 	.word	0x20000044

080005e8 <writeOffset>:

HAL_StatusTypeDef writeOffset(I2C_HandleTypeDef* hi2c) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	// Define the X, Y and Z offsets
//	uint16_t offsetX = 0x0000;
//	uint16_t offsetY = 0x0000;
//	uint16_t offsetZ = 0x0000;

	uint16_t offsetX = 0xFF;
 80005f0:	23ff      	movs	r3, #255	; 0xff
 80005f2:	81fb      	strh	r3, [r7, #14]
	uint16_t offsetY = 0x04;
 80005f4:	2304      	movs	r3, #4
 80005f6:	81bb      	strh	r3, [r7, #12]
	uint16_t offsetZ = 0x0D;
 80005f8:	230d      	movs	r3, #13
 80005fa:	817b      	strh	r3, [r7, #10]

	ret = i2c_write_reg(hi2c, ADXL314_ADDR, &OFFSET_REG_X, offsetX);
 80005fc:	4b11      	ldr	r3, [pc, #68]	; (8000644 <writeOffset+0x5c>)
 80005fe:	7819      	ldrb	r1, [r3, #0]
 8000600:	89fb      	ldrh	r3, [r7, #14]
 8000602:	b2db      	uxtb	r3, r3
 8000604:	4a10      	ldr	r2, [pc, #64]	; (8000648 <writeOffset+0x60>)
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f000 fb67 	bl	8000cda <i2c_write_reg>
 800060c:	4603      	mov	r3, r0
 800060e:	727b      	strb	r3, [r7, #9]
	ret = i2c_write_reg(hi2c, ADXL314_ADDR, &OFFSET_REG_Y, offsetY);
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <writeOffset+0x5c>)
 8000612:	7819      	ldrb	r1, [r3, #0]
 8000614:	89bb      	ldrh	r3, [r7, #12]
 8000616:	b2db      	uxtb	r3, r3
 8000618:	4a0c      	ldr	r2, [pc, #48]	; (800064c <writeOffset+0x64>)
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f000 fb5d 	bl	8000cda <i2c_write_reg>
 8000620:	4603      	mov	r3, r0
 8000622:	727b      	strb	r3, [r7, #9]
	ret = i2c_write_reg(hi2c, ADXL314_ADDR, &OFFSET_REG_Z, offsetZ);
 8000624:	4b07      	ldr	r3, [pc, #28]	; (8000644 <writeOffset+0x5c>)
 8000626:	7819      	ldrb	r1, [r3, #0]
 8000628:	897b      	ldrh	r3, [r7, #10]
 800062a:	b2db      	uxtb	r3, r3
 800062c:	4a08      	ldr	r2, [pc, #32]	; (8000650 <writeOffset+0x68>)
 800062e:	6878      	ldr	r0, [r7, #4]
 8000630:	f000 fb53 	bl	8000cda <i2c_write_reg>
 8000634:	4603      	mov	r3, r0
 8000636:	727b      	strb	r3, [r7, #9]

	return ret;
 8000638:	7a7b      	ldrb	r3, [r7, #9]
}
 800063a:	4618      	mov	r0, r3
 800063c:	3710      	adds	r7, #16
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000000 	.word	0x20000000
 8000648:	20000004 	.word	0x20000004
 800064c:	20000005 	.word	0x20000005
 8000650:	20000006 	.word	0x20000006

08000654 <init_bme280>:
uint8_t OUT_HUM_H 			= 0xFD;
uint8_t CALIB_ST_1			= 0x88;
uint8_t CALIB_ST_2			= 0xE1;


HAL_StatusTypeDef init_bme280(I2C_HandleTypeDef* hi2c, uint8_t bme) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	460b      	mov	r3, r1
 800065e:	70fb      	strb	r3, [r7, #3]
	uint8_t bme_addr = getBME280Config(bme).bme_addr;
 8000660:	78fb      	ldrb	r3, [r7, #3]
 8000662:	4618      	mov	r0, r3
 8000664:	f000 f8e0 	bl	8000828 <getBME280Config>
 8000668:	4603      	mov	r3, r0
 800066a:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef ret;
	uint8_t control_reg = 0x00;
 800066c:	2300      	movs	r3, #0
 800066e:	737b      	strb	r3, [r7, #13]

	// Reset the sensor
	ret =  i2c_write_reg(hi2c, bme_addr, &RST_REG, RST);
 8000670:	7bf9      	ldrb	r1, [r7, #15]
 8000672:	23b6      	movs	r3, #182	; 0xb6
 8000674:	4a19      	ldr	r2, [pc, #100]	; (80006dc <init_bme280+0x88>)
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f000 fb2f 	bl	8000cda <i2c_write_reg>
 800067c:	4603      	mov	r3, r0
 800067e:	73bb      	strb	r3, [r7, #14]

	// Set humidity control register
	i2c_read_reg(hi2c, &control_reg, bme_addr, &CTRL_HUM_REG);
 8000680:	7bfa      	ldrb	r2, [r7, #15]
 8000682:	f107 010d 	add.w	r1, r7, #13
 8000686:	4b16      	ldr	r3, [pc, #88]	; (80006e0 <init_bme280+0x8c>)
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f000 fac8 	bl	8000c1e <i2c_read_reg>
	control_reg = control_reg & 0xF8;
 800068e:	7b7b      	ldrb	r3, [r7, #13]
 8000690:	f023 0307 	bic.w	r3, r3, #7
 8000694:	b2db      	uxtb	r3, r3
 8000696:	737b      	strb	r3, [r7, #13]
	control_reg = control_reg | CTRL_HUM_MSK;
 8000698:	7b7b      	ldrb	r3, [r7, #13]
 800069a:	f043 0301 	orr.w	r3, r3, #1
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	737b      	strb	r3, [r7, #13]
	ret = i2c_write_reg(hi2c, bme_addr, &CTRL_HUM_REG, control_reg);
 80006a2:	7b7b      	ldrb	r3, [r7, #13]
 80006a4:	7bf9      	ldrb	r1, [r7, #15]
 80006a6:	4a0e      	ldr	r2, [pc, #56]	; (80006e0 <init_bme280+0x8c>)
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f000 fb16 	bl	8000cda <i2c_write_reg>
 80006ae:	4603      	mov	r3, r0
 80006b0:	73bb      	strb	r3, [r7, #14]

	// Set measure control register
	ret = i2c_write_reg(hi2c, bme_addr, &CTRL_MEAS_REG, CTRL_MEAS_MSK);
 80006b2:	7bf9      	ldrb	r1, [r7, #15]
 80006b4:	2327      	movs	r3, #39	; 0x27
 80006b6:	4a0b      	ldr	r2, [pc, #44]	; (80006e4 <init_bme280+0x90>)
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f000 fb0e 	bl	8000cda <i2c_write_reg>
 80006be:	4603      	mov	r3, r0
 80006c0:	73bb      	strb	r3, [r7, #14]

	// Set the config register
	ret = i2c_write_reg(hi2c, bme_addr, &CONF_REG, CONF_MSK);
 80006c2:	7bf9      	ldrb	r1, [r7, #15]
 80006c4:	2300      	movs	r3, #0
 80006c6:	4a08      	ldr	r2, [pc, #32]	; (80006e8 <init_bme280+0x94>)
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f000 fb06 	bl	8000cda <i2c_write_reg>
 80006ce:	4603      	mov	r3, r0
 80006d0:	73bb      	strb	r3, [r7, #14]

	return ret;
 80006d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000009 	.word	0x20000009
 80006e0:	2000000a 	.word	0x2000000a
 80006e4:	2000000b 	.word	0x2000000b
 80006e8:	2000000c 	.word	0x2000000c

080006ec <readTempHumPres>:

void readTempHumPres(uint8_t values[6], I2C_HandleTypeDef* hi2c, uint8_t bme) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	; 0x28
 80006f0:	af02      	add	r7, sp, #8
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	4613      	mov	r3, r2
 80006f8:	71fb      	strb	r3, [r7, #7]
	uint8_t readings[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 80006fa:	4a27      	ldr	r2, [pc, #156]	; (8000798 <readTempHumPres+0xac>)
 80006fc:	f107 0314 	add.w	r3, r7, #20
 8000700:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000704:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t bme_addr = getBME280Config(bme).bme_addr;
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	4618      	mov	r0, r3
 800070c:	f000 f88c 	bl	8000828 <getBME280Config>
 8000710:	4603      	mov	r3, r0
 8000712:	777b      	strb	r3, [r7, #29]
	i2c_burst_read(hi2c, bme_addr, OUT_PRESS_H, 8, readings);
 8000714:	4b21      	ldr	r3, [pc, #132]	; (800079c <readTempHumPres+0xb0>)
 8000716:	781a      	ldrb	r2, [r3, #0]
 8000718:	7f79      	ldrb	r1, [r7, #29]
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	9300      	str	r3, [sp, #0]
 8000720:	2308      	movs	r3, #8
 8000722:	68b8      	ldr	r0, [r7, #8]
 8000724:	f000 faa4 	bl	8000c70 <i2c_burst_read>

	// Clear the 0 values on the xlsb registers
	uint8_t j = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	77fb      	strb	r3, [r7, #31]
    for(uint8_t i = 0; i < 8; i++) {
 800072c:	2300      	movs	r3, #0
 800072e:	77bb      	strb	r3, [r7, #30]
 8000730:	e014      	b.n	800075c <readTempHumPres+0x70>
        if(i != 2 && i != 5) {  // if the index is not 2 or 5
 8000732:	7fbb      	ldrb	r3, [r7, #30]
 8000734:	2b02      	cmp	r3, #2
 8000736:	d00e      	beq.n	8000756 <readTempHumPres+0x6a>
 8000738:	7fbb      	ldrb	r3, [r7, #30]
 800073a:	2b05      	cmp	r3, #5
 800073c:	d00b      	beq.n	8000756 <readTempHumPres+0x6a>
        	values[j] = readings[i];
 800073e:	7fba      	ldrb	r2, [r7, #30]
 8000740:	7ffb      	ldrb	r3, [r7, #31]
 8000742:	68f9      	ldr	r1, [r7, #12]
 8000744:	440b      	add	r3, r1
 8000746:	3220      	adds	r2, #32
 8000748:	443a      	add	r2, r7
 800074a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800074e:	701a      	strb	r2, [r3, #0]
            j++;
 8000750:	7ffb      	ldrb	r3, [r7, #31]
 8000752:	3301      	adds	r3, #1
 8000754:	77fb      	strb	r3, [r7, #31]
    for(uint8_t i = 0; i < 8; i++) {
 8000756:	7fbb      	ldrb	r3, [r7, #30]
 8000758:	3301      	adds	r3, #1
 800075a:	77bb      	strb	r3, [r7, #30]
 800075c:	7fbb      	ldrb	r3, [r7, #30]
 800075e:	2b07      	cmp	r3, #7
 8000760:	d9e7      	bls.n	8000732 <readTempHumPres+0x46>
        }
    }

    // Swap elements to make the array little endian
    swap(&values[0], &values[1]);
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	3301      	adds	r3, #1
 8000766:	4619      	mov	r1, r3
 8000768:	68f8      	ldr	r0, [r7, #12]
 800076a:	f000 f874 	bl	8000856 <swap>
    swap(&values[2], &values[3]);
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	1c9a      	adds	r2, r3, #2
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	3303      	adds	r3, #3
 8000776:	4619      	mov	r1, r3
 8000778:	4610      	mov	r0, r2
 800077a:	f000 f86c 	bl	8000856 <swap>
    swap(&values[4], &values[5]);
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	1d1a      	adds	r2, r3, #4
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	3305      	adds	r3, #5
 8000786:	4619      	mov	r1, r3
 8000788:	4610      	mov	r0, r2
 800078a:	f000 f864 	bl	8000856 <swap>
}
 800078e:	bf00      	nop
 8000790:	3720      	adds	r7, #32
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	08008468 	.word	0x08008468
 800079c:	2000000d 	.word	0x2000000d

080007a0 <readBME280_id_reg>:

uint8_t readBME280_id_reg(I2C_HandleTypeDef* hi2c, uint8_t bme) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	460b      	mov	r3, r1
 80007aa:	70fb      	strb	r3, [r7, #3]
	uint8_t bme_addr = getBME280Config(bme).bme_addr;
 80007ac:	78fb      	ldrb	r3, [r7, #3]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 f83a 	bl	8000828 <getBME280Config>
 80007b4:	4603      	mov	r3, r0
 80007b6:	73fb      	strb	r3, [r7, #15]
	uint8_t data = 0x00;
 80007b8:	2300      	movs	r3, #0
 80007ba:	73bb      	strb	r3, [r7, #14]
	i2c_read_reg(hi2c, &data, bme_addr, &ID_REG);
 80007bc:	7bfa      	ldrb	r2, [r7, #15]
 80007be:	f107 010e 	add.w	r1, r7, #14
 80007c2:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <readBME280_id_reg+0x34>)
 80007c4:	6878      	ldr	r0, [r7, #4]
 80007c6:	f000 fa2a 	bl	8000c1e <i2c_read_reg>

	return data;
 80007ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3710      	adds	r7, #16
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000008 	.word	0x20000008

080007d8 <readBME280_calib>:

void readBME280_calib(I2C_HandleTypeDef* hi2c, uint8_t bme, uint8_t calibration1[CALIB_CNT_1], uint8_t calibration2[CALIB_CNT_2]) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b088      	sub	sp, #32
 80007dc:	af02      	add	r7, sp, #8
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	607a      	str	r2, [r7, #4]
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	460b      	mov	r3, r1
 80007e6:	72fb      	strb	r3, [r7, #11]
	uint8_t bme_addr = getBME280Config(bme).bme_addr;
 80007e8:	7afb      	ldrb	r3, [r7, #11]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 f81c 	bl	8000828 <getBME280Config>
 80007f0:	4603      	mov	r3, r0
 80007f2:	75fb      	strb	r3, [r7, #23]
	i2c_burst_read(hi2c, bme_addr, CALIB_ST_1, CALIB_CNT_1, calibration1);
 80007f4:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <readBME280_calib+0x48>)
 80007f6:	781a      	ldrb	r2, [r3, #0]
 80007f8:	7df9      	ldrb	r1, [r7, #23]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	2319      	movs	r3, #25
 8000800:	68f8      	ldr	r0, [r7, #12]
 8000802:	f000 fa35 	bl	8000c70 <i2c_burst_read>
	i2c_burst_read(hi2c, bme_addr, CALIB_ST_2, CALIB_CNT_2, calibration2);
 8000806:	4b07      	ldr	r3, [pc, #28]	; (8000824 <readBME280_calib+0x4c>)
 8000808:	781a      	ldrb	r2, [r3, #0]
 800080a:	7df9      	ldrb	r1, [r7, #23]
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	9300      	str	r3, [sp, #0]
 8000810:	2307      	movs	r3, #7
 8000812:	68f8      	ldr	r0, [r7, #12]
 8000814:	f000 fa2c 	bl	8000c70 <i2c_burst_read>
}
 8000818:	bf00      	nop
 800081a:	3718      	adds	r7, #24
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	2000000e 	.word	0x2000000e
 8000824:	2000000f 	.word	0x2000000f

08000828 <getBME280Config>:

BME280_Config getBME280Config(uint8_t bme) {
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]
	BME280_Config config;
	if (bme == 0) {
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d102      	bne.n	800083e <getBME280Config+0x16>
		config.bme_addr = BME280_ADDR_0;
 8000838:	2376      	movs	r3, #118	; 0x76
 800083a:	733b      	strb	r3, [r7, #12]
 800083c:	e004      	b.n	8000848 <getBME280Config+0x20>
	} else if (bme == 1) {
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d101      	bne.n	8000848 <getBME280Config+0x20>
		config.bme_addr = BME280_ADDR_1;
 8000844:	2377      	movs	r3, #119	; 0x77
 8000846:	733b      	strb	r3, [r7, #12]
	}
    return config;
 8000848:	7b3b      	ldrb	r3, [r7, #12]
}
 800084a:	4618      	mov	r0, r3
 800084c:	3714      	adds	r7, #20
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <swap>:

void swap(uint8_t* a, uint8_t* b) {
 8000856:	b480      	push	{r7}
 8000858:	b085      	sub	sp, #20
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
 800085e:	6039      	str	r1, [r7, #0]
    uint8_t temp = *a;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	73fb      	strb	r3, [r7, #15]
    *a = *b;
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	781a      	ldrb	r2, [r3, #0]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	701a      	strb	r2, [r3, #0]
    *b = temp;
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	7bfa      	ldrb	r2, [r7, #15]
 8000872:	701a      	strb	r2, [r3, #0]
}
 8000874:	bf00      	nop
 8000876:	3714      	adds	r7, #20
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <check_busy>:
uint8_t FLASH_32K_ERS	= 0x52;			// Erase all memory within a 32K-byte block
uint8_t FLASH_ERASE		= 0xC7;			// Erase the entire chip
uint8_t RST_EN			= 0x66;			// Reset enable
uint8_t DEV_RST			= 0x99;			// Reset device

uint8_t check_busy(SPI_HandleTypeDef *hspi, GPIO_Config config, int timeout) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b088      	sub	sp, #32
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	1d38      	adds	r0, r7, #4
 800088a:	e880 0006 	stmia.w	r0, {r1, r2}
 800088e:	603b      	str	r3, [r7, #0]
	uint8_t ret_val = 0x00;
 8000890:	2300      	movs	r3, #0
 8000892:	77fb      	strb	r3, [r7, #31]

    // Get the current time
	uint32_t startTick = HAL_GetTick();
 8000894:	f002 f94c 	bl	8002b30 <HAL_GetTick>
 8000898:	61b8      	str	r0, [r7, #24]

	// Read the status register to ensure no write is currently in progress
	uint8_t busy = 0x01;
 800089a:	2301      	movs	r3, #1
 800089c:	77bb      	strb	r3, [r7, #30]
	while(busy) {
 800089e:	e015      	b.n	80008cc <check_busy+0x4c>
		// Check if there is a write in progress
		busy = (check_status_register(hspi, config) & 0x01);
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80008a6:	68f8      	ldr	r0, [r7, #12]
 80008a8:	f000 f818 	bl	80008dc <check_status_register>
 80008ac:	4603      	mov	r3, r0
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	77bb      	strb	r3, [r7, #30]

		uint32_t currTick = HAL_GetTick();
 80008b4:	f002 f93c 	bl	8002b30 <HAL_GetTick>
 80008b8:	6178      	str	r0, [r7, #20]

        // Check if the timeout has been reached
		if ((currTick - startTick) >= timeout) {
 80008ba:	697a      	ldr	r2, [r7, #20]
 80008bc:	69bb      	ldr	r3, [r7, #24]
 80008be:	1ad2      	subs	r2, r2, r3
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	429a      	cmp	r2, r3
 80008c4:	d302      	bcc.n	80008cc <check_busy+0x4c>
        	ret_val = 0x01;
 80008c6:	2301      	movs	r3, #1
 80008c8:	77fb      	strb	r3, [r7, #31]
            break;
 80008ca:	e002      	b.n	80008d2 <check_busy+0x52>
	while(busy) {
 80008cc:	7fbb      	ldrb	r3, [r7, #30]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d1e6      	bne.n	80008a0 <check_busy+0x20>
        }
	}

	return ret_val;
 80008d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3720      	adds	r7, #32
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <check_status_register>:

uint8_t check_status_register(SPI_HandleTypeDef *hspi, GPIO_Config config) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b088      	sub	sp, #32
 80008e0:	af02      	add	r7, sp, #8
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	e883 0006 	stmia.w	r3, {r1, r2}
	uint8_t status_reg = 0x00;
 80008ea:	2300      	movs	r3, #0
 80008ec:	75fb      	strb	r3, [r7, #23]
	spi_sendOp_readByte(&FLASH_READSR1, hspi, &status_reg, config.GPIOx, config.GPIO_Pin);
 80008ee:	6879      	ldr	r1, [r7, #4]
 80008f0:	893b      	ldrh	r3, [r7, #8]
 80008f2:	f107 0217 	add.w	r2, r7, #23
 80008f6:	9300      	str	r3, [sp, #0]
 80008f8:	460b      	mov	r3, r1
 80008fa:	68f9      	ldr	r1, [r7, #12]
 80008fc:	4803      	ldr	r0, [pc, #12]	; (800090c <check_status_register+0x30>)
 80008fe:	f001 fc1d 	bl	800213c <spi_sendOp_readByte>
	return status_reg;
 8000902:	7dfb      	ldrb	r3, [r7, #23]
}
 8000904:	4618      	mov	r0, r3
 8000906:	3718      	adds	r7, #24
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000012 	.word	0x20000012

08000910 <erase_chip_spi>:
 *      Author: aidencontini
 */

#include "data_output_spi.h"

HAL_StatusTypeDef erase_chip_spi(SPI_HandleTypeDef *hspi, GPIO_Config config) {
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	e883 0006 	stmia.w	r3, {r1, r2}
	check_busy(hspi, config, BSY_TIMEOUT_MS);
 800091e:	2305      	movs	r3, #5
 8000920:	1d3a      	adds	r2, r7, #4
 8000922:	ca06      	ldmia	r2, {r1, r2}
 8000924:	68f8      	ldr	r0, [r7, #12]
 8000926:	f7ff ffab 	bl	8000880 <check_busy>

	write_enable_spi(hspi, config);
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000930:	68f8      	ldr	r0, [r7, #12]
 8000932:	f000 f815 	bl	8000960 <write_enable_spi>
	perform_operation(&FLASH_ERASE, hspi, config.GPIOx, config.GPIO_Pin);
 8000936:	687a      	ldr	r2, [r7, #4]
 8000938:	893b      	ldrh	r3, [r7, #8]
 800093a:	68f9      	ldr	r1, [r7, #12]
 800093c:	4806      	ldr	r0, [pc, #24]	; (8000958 <erase_chip_spi+0x48>)
 800093e:	f001 fc23 	bl	8002188 <perform_operation>

	check_busy(hspi, config, CHIP_ERASE_TO);
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <erase_chip_spi+0x4c>)
 8000944:	1d3a      	adds	r2, r7, #4
 8000946:	ca06      	ldmia	r2, {r1, r2}
 8000948:	68f8      	ldr	r0, [r7, #12]
 800094a:	f7ff ff99 	bl	8000880 <check_busy>

	return HAL_OK;
 800094e:	2300      	movs	r3, #0
}
 8000950:	4618      	mov	r0, r3
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000015 	.word	0x20000015
 800095c:	00030d40 	.word	0x00030d40

08000960 <write_enable_spi>:
	check_busy(hspi, config, BLK_ERS_32K_TO);

	return HAL_OK;
}

void write_enable_spi(SPI_HandleTypeDef *hspi, GPIO_Config config) {
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	e883 0006 	stmia.w	r3, {r1, r2}
	perform_operation(&FLASH_WREN, hspi, config.GPIOx, config.GPIO_Pin);
 800096e:	687a      	ldr	r2, [r7, #4]
 8000970:	893b      	ldrh	r3, [r7, #8]
 8000972:	68f9      	ldr	r1, [r7, #12]
 8000974:	4803      	ldr	r0, [pc, #12]	; (8000984 <write_enable_spi+0x24>)
 8000976:	f001 fc07 	bl	8002188 <perform_operation>
}
 800097a:	bf00      	nop
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000010 	.word	0x20000010

08000988 <software_reset>:

void write_disable_spi(SPI_HandleTypeDef *hspi, GPIO_Config config) {
	perform_operation(&FLASH_WRDIS, hspi, config.GPIOx, config.GPIO_Pin);
}

void software_reset(SPI_HandleTypeDef *hspi, GPIO_Config config) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	e883 0006 	stmia.w	r3, {r1, r2}

	check_busy(hspi, config, BSY_TIMEOUT_MS);
 8000996:	2305      	movs	r3, #5
 8000998:	1d3a      	adds	r2, r7, #4
 800099a:	ca06      	ldmia	r2, {r1, r2}
 800099c:	68f8      	ldr	r0, [r7, #12]
 800099e:	f7ff ff6f 	bl	8000880 <check_busy>

	perform_operation(&RST_EN, hspi, config.GPIOx, config.GPIO_Pin);
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	893b      	ldrh	r3, [r7, #8]
 80009a6:	68f9      	ldr	r1, [r7, #12]
 80009a8:	4807      	ldr	r0, [pc, #28]	; (80009c8 <software_reset+0x40>)
 80009aa:	f001 fbed 	bl	8002188 <perform_operation>
	perform_operation(&DEV_RST, hspi, config.GPIOx, config.GPIO_Pin);
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	893b      	ldrh	r3, [r7, #8]
 80009b2:	68f9      	ldr	r1, [r7, #12]
 80009b4:	4805      	ldr	r0, [pc, #20]	; (80009cc <software_reset+0x44>)
 80009b6:	f001 fbe7 	bl	8002188 <perform_operation>

	HAL_Delay(5);
 80009ba:	2005      	movs	r0, #5
 80009bc:	f002 f8c4 	bl	8002b48 <HAL_Delay>
}
 80009c0:	bf00      	nop
 80009c2:	3710      	adds	r7, #16
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000016 	.word	0x20000016
 80009cc:	20000017 	.word	0x20000017

080009d0 <write_data_spi_dma>:
	spi_write_data(&FLASH_PGWR, PAGE_SIZE, page, hspi, addr, config.GPIOx, config.GPIO_Pin);

	return 0;
}

uint8_t write_data_spi_dma(uint8_t page[PAGE_SIZE], SPI_HandleTypeDef *hspi, uint32_t addr, GPIO_Config config) {
 80009d0:	b082      	sub	sp, #8
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b088      	sub	sp, #32
 80009d6:	af04      	add	r7, sp, #16
 80009d8:	60f8      	str	r0, [r7, #12]
 80009da:	60b9      	str	r1, [r7, #8]
 80009dc:	607a      	str	r2, [r7, #4]
 80009de:	61fb      	str	r3, [r7, #28]
	check_busy(hspi, config, BSY_TIMEOUT_MS);
 80009e0:	2305      	movs	r3, #5
 80009e2:	f107 021c 	add.w	r2, r7, #28
 80009e6:	ca06      	ldmia	r2, {r1, r2}
 80009e8:	68b8      	ldr	r0, [r7, #8]
 80009ea:	f7ff ff49 	bl	8000880 <check_busy>

	// Send the write enable signal
	write_enable_spi(hspi, config);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80009f6:	68b8      	ldr	r0, [r7, #8]
 80009f8:	f7ff ffb2 	bl	8000960 <write_enable_spi>
	spi_write_data_dma(&FLASH_PGWR, PAGE_SIZE, page, hspi, addr, config.GPIOx, config.GPIO_Pin);
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	8c3a      	ldrh	r2, [r7, #32]
 8000a00:	9202      	str	r2, [sp, #8]
 8000a02:	9301      	str	r3, [sp, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	9300      	str	r3, [sp, #0]
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	68fa      	ldr	r2, [r7, #12]
 8000a0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a10:	4805      	ldr	r0, [pc, #20]	; (8000a28 <write_data_spi_dma+0x58>)
 8000a12:	f001 fc20 	bl	8002256 <spi_write_data_dma>

	return 0;
 8000a16:	2300      	movs	r3, #0
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3710      	adds	r7, #16
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a22:	b002      	add	sp, #8
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	20000011 	.word	0x20000011

08000a2c <find_next_blank_page>:
 *      Author: aidencontini
 */

#include "data_read_spi.h"

uint32_t find_next_blank_page(SPI_HandleTypeDef *hspi, GPIO_PinState *end_of_flash_ptr, GPIO_Config config) {
 8000a2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000a30:	b091      	sub	sp, #68	; 0x44
 8000a32:	af04      	add	r7, sp, #16
 8000a34:	60f8      	str	r0, [r7, #12]
 8000a36:	60b9      	str	r1, [r7, #8]
 8000a38:	4639      	mov	r1, r7
 8000a3a:	e881 000c 	stmia.w	r1, {r2, r3}
 8000a3e:	466b      	mov	r3, sp
 8000a40:	461e      	mov	r6, r3
	uint8_t firstBytes = 4;
 8000a42:	2304      	movs	r3, #4
 8000a44:	77fb      	strb	r3, [r7, #31]

	uint8_t page_start[firstBytes];
 8000a46:	7ff9      	ldrb	r1, [r7, #31]
 8000a48:	460b      	mov	r3, r1
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	61bb      	str	r3, [r7, #24]
 8000a4e:	b2cb      	uxtb	r3, r1
 8000a50:	2200      	movs	r2, #0
 8000a52:	4698      	mov	r8, r3
 8000a54:	4691      	mov	r9, r2
 8000a56:	f04f 0200 	mov.w	r2, #0
 8000a5a:	f04f 0300 	mov.w	r3, #0
 8000a5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000a62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000a66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000a6a:	b2cb      	uxtb	r3, r1
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	461c      	mov	r4, r3
 8000a70:	4615      	mov	r5, r2
 8000a72:	f04f 0200 	mov.w	r2, #0
 8000a76:	f04f 0300 	mov.w	r3, #0
 8000a7a:	00eb      	lsls	r3, r5, #3
 8000a7c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000a80:	00e2      	lsls	r2, r4, #3
 8000a82:	460b      	mov	r3, r1
 8000a84:	3307      	adds	r3, #7
 8000a86:	08db      	lsrs	r3, r3, #3
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	ebad 0d03 	sub.w	sp, sp, r3
 8000a8e:	ab04      	add	r3, sp, #16
 8000a90:	3300      	adds	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < firstBytes; i++) {
 8000a94:	2300      	movs	r3, #0
 8000a96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a98:	e007      	b.n	8000aaa <find_next_blank_page+0x7e>
		page_start[i] = 0;
 8000a9a:	697a      	ldr	r2, [r7, #20]
 8000a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a9e:	4413      	add	r3, r2
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < firstBytes; i++) {
 8000aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000aaa:	7ffb      	ldrb	r3, [r7, #31]
 8000aac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	dbf3      	blt.n	8000a9a <find_next_blank_page+0x6e>
	}

	uint32_t page_start_concat = (page_start[0] << 24) | (page_start[1] << 16) | (page_start[2] << 8) | page_start[3];
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	061a      	lsls	r2, r3, #24
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	785b      	ldrb	r3, [r3, #1]
 8000abc:	041b      	lsls	r3, r3, #16
 8000abe:	431a      	orrs	r2, r3
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	789b      	ldrb	r3, [r3, #2]
 8000ac4:	021b      	lsls	r3, r3, #8
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	697a      	ldr	r2, [r7, #20]
 8000aca:	78d2      	ldrb	r2, [r2, #3]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t temp = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t page_address = temp;
 8000ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad6:	623b      	str	r3, [r7, #32]

	while ((page_start_concat != 0xFFFFFFFF) || (temp == NUM_OF_PAGES)) {
 8000ad8:	e027      	b.n	8000b2a <find_next_blank_page+0xfe>
		page_address = temp;
 8000ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000adc:	623b      	str	r3, [r7, #32]

		check_busy(hspi, config, BSY_TIMEOUT_MS);
 8000ade:	2305      	movs	r3, #5
 8000ae0:	463a      	mov	r2, r7
 8000ae2:	ca06      	ldmia	r2, {r1, r2}
 8000ae4:	68f8      	ldr	r0, [r7, #12]
 8000ae6:	f7ff fecb 	bl	8000880 <check_busy>

		spi_read_data(&FLASH_READEN, firstBytes, page_start, hspi, page_address, config.GPIOx, config.GPIO_Pin);
 8000aea:	7ffb      	ldrb	r3, [r7, #31]
 8000aec:	b299      	uxth	r1, r3
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	88ba      	ldrh	r2, [r7, #4]
 8000af2:	9202      	str	r2, [sp, #8]
 8000af4:	9301      	str	r3, [sp, #4]
 8000af6:	6a3b      	ldr	r3, [r7, #32]
 8000af8:	9300      	str	r3, [sp, #0]
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	697a      	ldr	r2, [r7, #20]
 8000afe:	4816      	ldr	r0, [pc, #88]	; (8000b58 <find_next_blank_page+0x12c>)
 8000b00:	f001 fb62 	bl	80021c8 <spi_read_data>

		page_start_concat = (page_start[0] << 24) | (page_start[1] << 16) | (page_start[2] << 8) | page_start[3];
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	061a      	lsls	r2, r3, #24
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	785b      	ldrb	r3, [r3, #1]
 8000b0e:	041b      	lsls	r3, r3, #16
 8000b10:	431a      	orrs	r2, r3
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	789b      	ldrb	r3, [r3, #2]
 8000b16:	021b      	lsls	r3, r3, #8
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	697a      	ldr	r2, [r7, #20]
 8000b1c:	78d2      	ldrb	r2, [r2, #3]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	62bb      	str	r3, [r7, #40]	; 0x28
		temp += PAGE_SIZE;
 8000b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b24:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
	while ((page_start_concat != 0xFFFFFFFF) || (temp == NUM_OF_PAGES)) {
 8000b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b30:	d1d3      	bne.n	8000ada <find_next_blank_page+0xae>
 8000b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b38:	d0cf      	beq.n	8000ada <find_next_blank_page+0xae>
	}

	if (page_address == (NUM_OF_PAGES * PAGE_SIZE)) {
 8000b3a:	6a3b      	ldr	r3, [r7, #32]
 8000b3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b40:	d102      	bne.n	8000b48 <find_next_blank_page+0x11c>
		*end_of_flash_ptr = GPIO_PIN_RESET;
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	2200      	movs	r2, #0
 8000b46:	701a      	strb	r2, [r3, #0]
	}
	return page_address;
 8000b48:	6a3b      	ldr	r3, [r7, #32]
 8000b4a:	46b5      	mov	sp, r6
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3734      	adds	r7, #52	; 0x34
 8000b50:	46bd      	mov	sp, r7
 8000b52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b56:	bf00      	nop
 8000b58:	20000013 	.word	0x20000013

08000b5c <read_page_spi>:

void read_page_spi(uint8_t data_read[PAGE_SIZE], SPI_HandleTypeDef *hspi, uint32_t addr, GPIO_Config config) {
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b088      	sub	sp, #32
 8000b62:	af04      	add	r7, sp, #16
 8000b64:	60f8      	str	r0, [r7, #12]
 8000b66:	60b9      	str	r1, [r7, #8]
 8000b68:	607a      	str	r2, [r7, #4]
 8000b6a:	61fb      	str	r3, [r7, #28]

	// Read the status register to ensure no write is currently in progress
	check_busy(hspi, config, BSY_TIMEOUT_MS);
 8000b6c:	2305      	movs	r3, #5
 8000b6e:	f107 021c 	add.w	r2, r7, #28
 8000b72:	ca06      	ldmia	r2, {r1, r2}
 8000b74:	68b8      	ldr	r0, [r7, #8]
 8000b76:	f7ff fe83 	bl	8000880 <check_busy>
	spi_read_data(&FLASH_READEN, PAGE_SIZE, data_read, hspi, addr, config.GPIOx, config.GPIO_Pin);
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	8c3a      	ldrh	r2, [r7, #32]
 8000b7e:	9202      	str	r2, [sp, #8]
 8000b80:	9301      	str	r3, [sp, #4]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	9300      	str	r3, [sp, #0]
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	68fa      	ldr	r2, [r7, #12]
 8000b8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b8e:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <read_page_spi+0x48>)
 8000b90:	f001 fb1a 	bl	80021c8 <spi_read_data>
}
 8000b94:	bf00      	nop
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b9e:	b002      	add	sp, #8
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	20000013 	.word	0x20000013

08000ba8 <read_manufacturer_id>:

void read_manufacturer_id(uint8_t manu[2], SPI_HandleTypeDef *hspi, GPIO_Config config) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	; 0x28
 8000bac:	af04      	add	r7, sp, #16
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	4639      	mov	r1, r7
 8000bb4:	e881 000c 	stmia.w	r1, {r2, r3}

	// Read the status register to ensure no write is currently in progress
	check_busy(hspi, config, BSY_TIMEOUT_MS);
 8000bb8:	2305      	movs	r3, #5
 8000bba:	463a      	mov	r2, r7
 8000bbc:	ca06      	ldmia	r2, {r1, r2}
 8000bbe:	68b8      	ldr	r0, [r7, #8]
 8000bc0:	f7ff fe5e 	bl	8000880 <check_busy>

	// Read the entire contents of a page starting from the given address
	uint8_t addr = 0x00;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	75fb      	strb	r3, [r7, #23]
	spi_read_data(&FLASH_READ_MANU, 2, manu, hspi, addr, config.GPIOx, config.GPIO_Pin);
 8000bc8:	7dfb      	ldrb	r3, [r7, #23]
 8000bca:	683a      	ldr	r2, [r7, #0]
 8000bcc:	88b9      	ldrh	r1, [r7, #4]
 8000bce:	9102      	str	r1, [sp, #8]
 8000bd0:	9201      	str	r2, [sp, #4]
 8000bd2:	9300      	str	r3, [sp, #0]
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	2102      	movs	r1, #2
 8000bda:	4803      	ldr	r0, [pc, #12]	; (8000be8 <read_manufacturer_id+0x40>)
 8000bdc:	f001 faf4 	bl	80021c8 <spi_read_data>
}
 8000be0:	bf00      	nop
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000014 	.word	0x20000014

08000bec <create_GPIO_Config>:
 */

#include "gpio_struct.h"

// Function to initialize the GPIO_Config struct
GPIO_Config create_GPIO_Config(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8000bec:	b480      	push	{r7}
 8000bee:	b087      	sub	sp, #28
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	80fb      	strh	r3, [r7, #6]
    GPIO_Config new_config;
    new_config.GPIOx = GPIOx;
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	613b      	str	r3, [r7, #16]
    new_config.GPIO_Pin = GPIO_Pin;
 8000bfe:	88fb      	ldrh	r3, [r7, #6]
 8000c00:	82bb      	strh	r3, [r7, #20]
    return new_config;
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	461a      	mov	r2, r3
 8000c06:	f107 0310 	add.w	r3, r7, #16
 8000c0a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c0e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000c12:	68f8      	ldr	r0, [r7, #12]
 8000c14:	371c      	adds	r7, #28
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <i2c_read_reg>:
 *      Author: aidencontini
 */

#include "i2c_driver.h"

HAL_StatusTypeDef i2c_read_reg(I2C_HandleTypeDef* hi2c, uint8_t* data_ptr, uint8_t dev_addr, uint8_t* register_addr) {
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b088      	sub	sp, #32
 8000c22:	af02      	add	r7, sp, #8
 8000c24:	60f8      	str	r0, [r7, #12]
 8000c26:	60b9      	str	r1, [r7, #8]
 8000c28:	603b      	str	r3, [r7, #0]
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(hi2c, (dev_addr << 1) & 0xFE, register_addr, 1, I2C_TIMEOUT_SML);
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	b299      	uxth	r1, r3
 8000c38:	2301      	movs	r3, #1
 8000c3a:	9300      	str	r3, [sp, #0]
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	683a      	ldr	r2, [r7, #0]
 8000c40:	68f8      	ldr	r0, [r7, #12]
 8000c42:	f003 f8f1 	bl	8003e28 <HAL_I2C_Master_Transmit>
	HAL_StatusTypeDef hal_status = HAL_I2C_Master_Receive(hi2c, (dev_addr << 1) | 0x01, data_ptr, 1, I2C_TIMEOUT_SML);
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	b21b      	sxth	r3, r3
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	b21b      	sxth	r3, r3
 8000c52:	b299      	uxth	r1, r3
 8000c54:	2301      	movs	r3, #1
 8000c56:	9300      	str	r3, [sp, #0]
 8000c58:	2301      	movs	r3, #1
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	68f8      	ldr	r0, [r7, #12]
 8000c5e:	f003 f9e1 	bl	8004024 <HAL_I2C_Master_Receive>
 8000c62:	4603      	mov	r3, r0
 8000c64:	75fb      	strb	r3, [r7, #23]
	return hal_status;
 8000c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3718      	adds	r7, #24
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <i2c_burst_read>:

HAL_StatusTypeDef i2c_burst_read(I2C_HandleTypeDef* hi2c, uint8_t dev_addr, uint8_t register_addr, uint8_t size, uint8_t data_buffer[size]) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af02      	add	r7, sp, #8
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	4608      	mov	r0, r1
 8000c7a:	4611      	mov	r1, r2
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4603      	mov	r3, r0
 8000c80:	70fb      	strb	r3, [r7, #3]
 8000c82:	460b      	mov	r3, r1
 8000c84:	70bb      	strb	r3, [r7, #2]
 8000c86:	4613      	mov	r3, r2
 8000c88:	707b      	strb	r3, [r7, #1]
	// In order to read multiple bytes, it is necessary to assert the most significant bit of the sub-address field.
	uint8_t addr = register_addr | 0x80;
 8000c8a:	78bb      	ldrb	r3, [r7, #2]
 8000c8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(hi2c, (dev_addr << 1) & 0xFE, &addr, 1, I2C_TIMEOUT_SML);
 8000c94:	78fb      	ldrb	r3, [r7, #3]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	b299      	uxth	r1, r3
 8000c9e:	f107 020e 	add.w	r2, r7, #14
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	9300      	str	r3, [sp, #0]
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f003 f8bd 	bl	8003e28 <HAL_I2C_Master_Transmit>
	HAL_StatusTypeDef hal_status =  HAL_I2C_Master_Receive(hi2c, (dev_addr << 1) | 0x01, data_buffer, size, I2C_TIMEOUT_LRG);
 8000cae:	78fb      	ldrb	r3, [r7, #3]
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	b21b      	sxth	r3, r3
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	b21b      	sxth	r3, r3
 8000cba:	b299      	uxth	r1, r3
 8000cbc:	787b      	ldrb	r3, [r7, #1]
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	220a      	movs	r2, #10
 8000cc2:	9200      	str	r2, [sp, #0]
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f003 f9ac 	bl	8004024 <HAL_I2C_Master_Receive>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	73fb      	strb	r3, [r7, #15]
	return hal_status;
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <i2c_write_reg>:
	HAL_I2C_Master_Transmit(hi2c, (dev_addr << 1) & 0xFE, &addr, 1, I2C_TIMEOUT_SML);
	HAL_StatusTypeDef hal_status =  HAL_I2C_Master_Receive(hi2c, (dev_addr << 1) | 0x01, data_buffer, size, I2C_TIMEOUT_LRG);
	return hal_status;
}

HAL_StatusTypeDef i2c_write_reg(I2C_HandleTypeDef* hi2c, uint8_t dev_addr, uint8_t* register_addr, uint8_t data) {
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b088      	sub	sp, #32
 8000cde:	af02      	add	r7, sp, #8
 8000ce0:	60f8      	str	r0, [r7, #12]
 8000ce2:	607a      	str	r2, [r7, #4]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	72fb      	strb	r3, [r7, #11]
 8000cea:	4613      	mov	r3, r2
 8000cec:	72bb      	strb	r3, [r7, #10]
	uint8_t data_tx[2] = {*register_addr, data};
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	753b      	strb	r3, [r7, #20]
 8000cf4:	7abb      	ldrb	r3, [r7, #10]
 8000cf6:	757b      	strb	r3, [r7, #21]
	HAL_StatusTypeDef hal_status = HAL_I2C_Master_Transmit(hi2c, (dev_addr << 1) & 0xFE, data_tx, 2, I2C_TIMEOUT_SML);
 8000cf8:	7afb      	ldrb	r3, [r7, #11]
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	b299      	uxth	r1, r3
 8000d02:	f107 0214 	add.w	r2, r7, #20
 8000d06:	2301      	movs	r3, #1
 8000d08:	9300      	str	r3, [sp, #0]
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	68f8      	ldr	r0, [r7, #12]
 8000d0e:	f003 f88b 	bl	8003e28 <HAL_I2C_Master_Transmit>
 8000d12:	4603      	mov	r3, r0
 8000d14:	75fb      	strb	r3, [r7, #23]
	return hal_status;
 8000d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d26:	f001 fe9d 	bl	8002a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d2a:	f000 f8c5 	bl	8000eb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d2e:	f000 fb01 	bl	8001334 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d32:	f000 fac9 	bl	80012c8 <MX_DMA_Init>
  MX_I2C1_Init();
 8000d36:	f000 f955 	bl	8000fe4 <MX_I2C1_Init>
  MX_RTC_Init();
 8000d3a:	f000 f9d3 	bl	80010e4 <MX_RTC_Init>
  MX_SPI1_Init();
 8000d3e:	f000 f9f7 	bl	8001130 <MX_SPI1_Init>
  MX_TIM6_Init();
 8000d42:	f000 fa61 	bl	8001208 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8000d46:	f000 fa95 	bl	8001274 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8000d4a:	f000 f98b 	bl	8001064 <MX_I2C2_Init>
  MX_SPI2_Init();
 8000d4e:	f000 fa25 	bl	800119c <MX_SPI2_Init>
  MX_CAN2_Init();
 8000d52:	f000 f913 	bl	8000f7c <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */
  systemInit();
 8000d56:	f000 fbcd 	bl	80014f4 <systemInit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Handle UART receive flag
	  if(uart2_rec_flag == 0x01) {
 8000d5a:	4b46      	ldr	r3, [pc, #280]	; (8000e74 <main+0x154>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d101      	bne.n	8000d66 <main+0x46>
		  handleUART();
 8000d62:	f000 fd0f 	bl	8001784 <handleUART>
	  }

	  // Handle Timer 6 overflow flag
	  if(tim6_overflow_flag == 0x01) {
 8000d66:	4b44      	ldr	r3, [pc, #272]	; (8000e78 <main+0x158>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d11a      	bne.n	8000da4 <main+0x84>
		  HAL_GPIO_TogglePin(led_orange.GPIOx, led_orange.GPIO_Pin);		// Toggle LED
 8000d6e:	4b43      	ldr	r3, [pc, #268]	; (8000e7c <main+0x15c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a42      	ldr	r2, [pc, #264]	; (8000e7c <main+0x15c>)
 8000d74:	8892      	ldrh	r2, [r2, #4]
 8000d76:	4611      	mov	r1, r2
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f002 fef6 	bl	8003b6a <HAL_GPIO_TogglePin>
		  readAllSensors(i2c_accel, i2c_bme280, &hrtc);
 8000d7e:	4b40      	ldr	r3, [pc, #256]	; (8000e80 <main+0x160>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a40      	ldr	r2, [pc, #256]	; (8000e84 <main+0x164>)
 8000d84:	6811      	ldr	r1, [r2, #0]
 8000d86:	4a40      	ldr	r2, [pc, #256]	; (8000e88 <main+0x168>)
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f001 f8ab 	bl	8001ee4 <readAllSensors>
		  tim6_overflow_flag = 0x00;
 8000d8e:	4b3a      	ldr	r3, [pc, #232]	; (8000e78 <main+0x158>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	701a      	strb	r2, [r3, #0]

//		  readTempSensor(&huart2, 0);

		  HAL_GPIO_TogglePin(led_orange.GPIOx, led_orange.GPIO_Pin);		// Toggle LED
 8000d94:	4b39      	ldr	r3, [pc, #228]	; (8000e7c <main+0x15c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a38      	ldr	r2, [pc, #224]	; (8000e7c <main+0x15c>)
 8000d9a:	8892      	ldrh	r2, [r2, #4]
 8000d9c:	4611      	mov	r1, r2
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f002 fee3 	bl	8003b6a <HAL_GPIO_TogglePin>
	  }

	  // Write data to flash when buffer is full
	  if(byte_tracker > (PAGE_SIZE - READ_SIZE)) {
 8000da4:	4b39      	ldr	r3, [pc, #228]	; (8000e8c <main+0x16c>)
 8000da6:	881b      	ldrh	r3, [r3, #0]
 8000da8:	2bec      	cmp	r3, #236	; 0xec
 8000daa:	d952      	bls.n	8000e52 <main+0x132>
		  GPIO_PinState flight_mode = HAL_GPIO_ReadPin(jmp_flight.GPIOx, jmp_flight.GPIO_Pin);
 8000dac:	4b38      	ldr	r3, [pc, #224]	; (8000e90 <main+0x170>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a37      	ldr	r2, [pc, #220]	; (8000e90 <main+0x170>)
 8000db2:	8892      	ldrh	r2, [r2, #4]
 8000db4:	4611      	mov	r1, r2
 8000db6:	4618      	mov	r0, r3
 8000db8:	f002 fea6 	bl	8003b08 <HAL_GPIO_ReadPin>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	71fb      	strb	r3, [r7, #7]
		  if((flight_mode & !(end_of_flash)) == GPIO_PIN_SET) {
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	4a34      	ldr	r2, [pc, #208]	; (8000e94 <main+0x174>)
 8000dc4:	7812      	ldrb	r2, [r2, #0]
 8000dc6:	2a00      	cmp	r2, #0
 8000dc8:	bf0c      	ite	eq
 8000dca:	2201      	moveq	r2, #1
 8000dcc:	2200      	movne	r2, #0
 8000dce:	b2d2      	uxtb	r2, r2
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d133      	bne.n	8000e3e <main+0x11e>
			  HAL_GPIO_WritePin(led_green.GPIOx, led_green.GPIO_Pin, GPIO_PIN_SET);		// Toggle LED when writing data
 8000dd6:	4b30      	ldr	r3, [pc, #192]	; (8000e98 <main+0x178>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a2f      	ldr	r2, [pc, #188]	; (8000e98 <main+0x178>)
 8000ddc:	8891      	ldrh	r1, [r2, #4]
 8000dde:	2201      	movs	r2, #1
 8000de0:	4618      	mov	r0, r3
 8000de2:	f002 fea9 	bl	8003b38 <HAL_GPIO_WritePin>

			  write_data_spi_dma(data_buffer_tx[buffer_tracker], &hspi1, next_blank_page, cs_spi1);
 8000de6:	4b2d      	ldr	r3, [pc, #180]	; (8000e9c <main+0x17c>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	021b      	lsls	r3, r3, #8
 8000dec:	4a2c      	ldr	r2, [pc, #176]	; (8000ea0 <main+0x180>)
 8000dee:	1898      	adds	r0, r3, r2
 8000df0:	4b2c      	ldr	r3, [pc, #176]	; (8000ea4 <main+0x184>)
 8000df2:	6819      	ldr	r1, [r3, #0]
 8000df4:	4b2c      	ldr	r3, [pc, #176]	; (8000ea8 <main+0x188>)
 8000df6:	685a      	ldr	r2, [r3, #4]
 8000df8:	9200      	str	r2, [sp, #0]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	460a      	mov	r2, r1
 8000dfe:	492b      	ldr	r1, [pc, #172]	; (8000eac <main+0x18c>)
 8000e00:	f7ff fde6 	bl	80009d0 <write_data_spi_dma>
			  write_data_spi_dma(data_buffer_tx[buffer_tracker], &hspi2, next_blank_page, cs_spi2);
 8000e04:	4b25      	ldr	r3, [pc, #148]	; (8000e9c <main+0x17c>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	021b      	lsls	r3, r3, #8
 8000e0a:	4a25      	ldr	r2, [pc, #148]	; (8000ea0 <main+0x180>)
 8000e0c:	1898      	adds	r0, r3, r2
 8000e0e:	4b25      	ldr	r3, [pc, #148]	; (8000ea4 <main+0x184>)
 8000e10:	6819      	ldr	r1, [r3, #0]
 8000e12:	4b27      	ldr	r3, [pc, #156]	; (8000eb0 <main+0x190>)
 8000e14:	685a      	ldr	r2, [r3, #4]
 8000e16:	9200      	str	r2, [sp, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	460a      	mov	r2, r1
 8000e1c:	4925      	ldr	r1, [pc, #148]	; (8000eb4 <main+0x194>)
 8000e1e:	f7ff fdd7 	bl	80009d0 <write_data_spi_dma>
			  next_blank_page += PAGE_SIZE;
 8000e22:	4b20      	ldr	r3, [pc, #128]	; (8000ea4 <main+0x184>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000e2a:	4a1e      	ldr	r2, [pc, #120]	; (8000ea4 <main+0x184>)
 8000e2c:	6013      	str	r3, [r2, #0]

			  HAL_GPIO_WritePin(led_green.GPIOx, led_green.GPIO_Pin, GPIO_PIN_RESET);		// Toggle LED when writing data
 8000e2e:	4b1a      	ldr	r3, [pc, #104]	; (8000e98 <main+0x178>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a19      	ldr	r2, [pc, #100]	; (8000e98 <main+0x178>)
 8000e34:	8891      	ldrh	r1, [r2, #4]
 8000e36:	2200      	movs	r2, #0
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f002 fe7d 	bl	8003b38 <HAL_GPIO_WritePin>
		  }

		// Reset the buffer trackers
		buffer_tracker = buffer_tracker ^ 0x01;
 8000e3e:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <main+0x17c>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	f083 0301 	eor.w	r3, r3, #1
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <main+0x17c>)
 8000e4a:	701a      	strb	r2, [r3, #0]
		byte_tracker = 0;
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <main+0x16c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	801a      	strh	r2, [r3, #0]
	  }

	  if(next_blank_page == (NUM_OF_PAGES*PAGE_SIZE)) {
 8000e52:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <main+0x184>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e5a:	f47f af7e 	bne.w	8000d5a <main+0x3a>
		  next_blank_page = find_next_blank_page(&hspi1, &end_of_flash, cs_spi1);
 8000e5e:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <main+0x188>)
 8000e60:	cb0c      	ldmia	r3, {r2, r3}
 8000e62:	490c      	ldr	r1, [pc, #48]	; (8000e94 <main+0x174>)
 8000e64:	4811      	ldr	r0, [pc, #68]	; (8000eac <main+0x18c>)
 8000e66:	f7ff fde1 	bl	8000a2c <find_next_blank_page>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ea4 <main+0x184>)
 8000e6e:	6013      	str	r3, [r2, #0]
	  if(uart2_rec_flag == 0x01) {
 8000e70:	e773      	b.n	8000d5a <main+0x3a>
 8000e72:	bf00      	nop
 8000e74:	20000342 	.word	0x20000342
 8000e78:	20000343 	.word	0x20000343
 8000e7c:	20000568 	.word	0x20000568
 8000e80:	20000338 	.word	0x20000338
 8000e84:	2000033c 	.word	0x2000033c
 8000e88:	20000118 	.word	0x20000118
 8000e8c:	20000564 	.word	0x20000564
 8000e90:	20000598 	.word	0x20000598
 8000e94:	20000566 	.word	0x20000566
 8000e98:	20000570 	.word	0x20000570
 8000e9c:	20000544 	.word	0x20000544
 8000ea0:	20000344 	.word	0x20000344
 8000ea4:	20000560 	.word	0x20000560
 8000ea8:	20000578 	.word	0x20000578
 8000eac:	20000138 	.word	0x20000138
 8000eb0:	20000588 	.word	0x20000588
 8000eb4:	20000190 	.word	0x20000190

08000eb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b094      	sub	sp, #80	; 0x50
 8000ebc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ebe:	f107 0320 	add.w	r3, r7, #32
 8000ec2:	2230      	movs	r2, #48	; 0x30
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f007 fa96 	bl	80083f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000edc:	2300      	movs	r3, #0
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	4b24      	ldr	r3, [pc, #144]	; (8000f74 <SystemClock_Config+0xbc>)
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee4:	4a23      	ldr	r2, [pc, #140]	; (8000f74 <SystemClock_Config+0xbc>)
 8000ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eea:	6413      	str	r3, [r2, #64]	; 0x40
 8000eec:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <SystemClock_Config+0xbc>)
 8000eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ef8:	2300      	movs	r3, #0
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	4b1e      	ldr	r3, [pc, #120]	; (8000f78 <SystemClock_Config+0xc0>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f04:	4a1c      	ldr	r2, [pc, #112]	; (8000f78 <SystemClock_Config+0xc0>)
 8000f06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f0a:	6013      	str	r3, [r2, #0]
 8000f0c:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <SystemClock_Config+0xc0>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f14:	607b      	str	r3, [r7, #4]
 8000f16:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000f18:	230a      	movs	r3, #10
 8000f1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f20:	2310      	movs	r3, #16
 8000f22:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f24:	2301      	movs	r3, #1
 8000f26:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f2c:	f107 0320 	add.w	r3, r7, #32
 8000f30:	4618      	mov	r0, r3
 8000f32:	f003 feab 	bl	8004c8c <HAL_RCC_OscConfig>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000f3c:	f000 fd67 	bl	8001a0e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f40:	230f      	movs	r3, #15
 8000f42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f44:	2300      	movs	r3, #0
 8000f46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f004 f90e 	bl	800517c <HAL_RCC_ClockConfig>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000f66:	f000 fd52 	bl	8001a0e <Error_Handler>
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	3750      	adds	r7, #80	; 0x50
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40007000 	.word	0x40007000

08000f7c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000f80:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <MX_CAN2_Init+0x60>)
 8000f82:	4a17      	ldr	r2, [pc, #92]	; (8000fe0 <MX_CAN2_Init+0x64>)
 8000f84:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000f86:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <MX_CAN2_Init+0x60>)
 8000f88:	2210      	movs	r2, #16
 8000f8a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000f8c:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <MX_CAN2_Init+0x60>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f92:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <MX_CAN2_Init+0x60>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000f98:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <MX_CAN2_Init+0x60>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000f9e:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <MX_CAN2_Init+0x60>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000fa4:	4b0d      	ldr	r3, [pc, #52]	; (8000fdc <MX_CAN2_Init+0x60>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000faa:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <MX_CAN2_Init+0x60>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <MX_CAN2_Init+0x60>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000fb6:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <MX_CAN2_Init+0x60>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000fbc:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <MX_CAN2_Init+0x60>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000fc2:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <MX_CAN2_Init+0x60>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000fc8:	4804      	ldr	r0, [pc, #16]	; (8000fdc <MX_CAN2_Init+0x60>)
 8000fca:	f001 fde1 	bl	8002b90 <HAL_CAN_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8000fd4:	f000 fd1b 	bl	8001a0e <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000048 	.word	0x20000048
 8000fe0:	40006800 	.word	0x40006800

08000fe4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fe8:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <MX_I2C1_Init+0x74>)
 8000fea:	4a1c      	ldr	r2, [pc, #112]	; (800105c <MX_I2C1_Init+0x78>)
 8000fec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fee:	4b1a      	ldr	r3, [pc, #104]	; (8001058 <MX_I2C1_Init+0x74>)
 8000ff0:	4a1b      	ldr	r2, [pc, #108]	; (8001060 <MX_I2C1_Init+0x7c>)
 8000ff2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ff4:	4b18      	ldr	r3, [pc, #96]	; (8001058 <MX_I2C1_Init+0x74>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ffa:	4b17      	ldr	r3, [pc, #92]	; (8001058 <MX_I2C1_Init+0x74>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001000:	4b15      	ldr	r3, [pc, #84]	; (8001058 <MX_I2C1_Init+0x74>)
 8001002:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001006:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001008:	4b13      	ldr	r3, [pc, #76]	; (8001058 <MX_I2C1_Init+0x74>)
 800100a:	2200      	movs	r2, #0
 800100c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800100e:	4b12      	ldr	r3, [pc, #72]	; (8001058 <MX_I2C1_Init+0x74>)
 8001010:	2200      	movs	r2, #0
 8001012:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001014:	4b10      	ldr	r3, [pc, #64]	; (8001058 <MX_I2C1_Init+0x74>)
 8001016:	2200      	movs	r2, #0
 8001018:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800101a:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <MX_I2C1_Init+0x74>)
 800101c:	2200      	movs	r2, #0
 800101e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001020:	480d      	ldr	r0, [pc, #52]	; (8001058 <MX_I2C1_Init+0x74>)
 8001022:	f002 fdbd 	bl	8003ba0 <HAL_I2C_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800102c:	f000 fcef 	bl	8001a0e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001030:	2100      	movs	r1, #0
 8001032:	4809      	ldr	r0, [pc, #36]	; (8001058 <MX_I2C1_Init+0x74>)
 8001034:	f003 fdae 	bl	8004b94 <HAL_I2CEx_ConfigAnalogFilter>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800103e:	f000 fce6 	bl	8001a0e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001042:	2100      	movs	r1, #0
 8001044:	4804      	ldr	r0, [pc, #16]	; (8001058 <MX_I2C1_Init+0x74>)
 8001046:	f003 fde1 	bl	8004c0c <HAL_I2CEx_ConfigDigitalFilter>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001050:	f000 fcdd 	bl	8001a0e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000070 	.word	0x20000070
 800105c:	40005400 	.word	0x40005400
 8001060:	000186a0 	.word	0x000186a0

08001064 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001068:	4b1b      	ldr	r3, [pc, #108]	; (80010d8 <MX_I2C2_Init+0x74>)
 800106a:	4a1c      	ldr	r2, [pc, #112]	; (80010dc <MX_I2C2_Init+0x78>)
 800106c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800106e:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <MX_I2C2_Init+0x74>)
 8001070:	4a1b      	ldr	r2, [pc, #108]	; (80010e0 <MX_I2C2_Init+0x7c>)
 8001072:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001074:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <MX_I2C2_Init+0x74>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800107a:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <MX_I2C2_Init+0x74>)
 800107c:	2200      	movs	r2, #0
 800107e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001080:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <MX_I2C2_Init+0x74>)
 8001082:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001086:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001088:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <MX_I2C2_Init+0x74>)
 800108a:	2200      	movs	r2, #0
 800108c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800108e:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <MX_I2C2_Init+0x74>)
 8001090:	2200      	movs	r2, #0
 8001092:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001094:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <MX_I2C2_Init+0x74>)
 8001096:	2200      	movs	r2, #0
 8001098:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800109a:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <MX_I2C2_Init+0x74>)
 800109c:	2200      	movs	r2, #0
 800109e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80010a0:	480d      	ldr	r0, [pc, #52]	; (80010d8 <MX_I2C2_Init+0x74>)
 80010a2:	f002 fd7d 	bl	8003ba0 <HAL_I2C_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80010ac:	f000 fcaf 	bl	8001a0e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010b0:	2100      	movs	r1, #0
 80010b2:	4809      	ldr	r0, [pc, #36]	; (80010d8 <MX_I2C2_Init+0x74>)
 80010b4:	f003 fd6e 	bl	8004b94 <HAL_I2CEx_ConfigAnalogFilter>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80010be:	f000 fca6 	bl	8001a0e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80010c2:	2100      	movs	r1, #0
 80010c4:	4804      	ldr	r0, [pc, #16]	; (80010d8 <MX_I2C2_Init+0x74>)
 80010c6:	f003 fda1 	bl	8004c0c <HAL_I2CEx_ConfigDigitalFilter>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80010d0:	f000 fc9d 	bl	8001a0e <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200000c4 	.word	0x200000c4
 80010dc:	40005800 	.word	0x40005800
 80010e0:	000186a0 	.word	0x000186a0

080010e4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010e8:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <MX_RTC_Init+0x44>)
 80010ea:	4a10      	ldr	r2, [pc, #64]	; (800112c <MX_RTC_Init+0x48>)
 80010ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <MX_RTC_Init+0x44>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <MX_RTC_Init+0x44>)
 80010f6:	227f      	movs	r2, #127	; 0x7f
 80010f8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80010fa:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <MX_RTC_Init+0x44>)
 80010fc:	22ff      	movs	r2, #255	; 0xff
 80010fe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001100:	4b09      	ldr	r3, [pc, #36]	; (8001128 <MX_RTC_Init+0x44>)
 8001102:	2200      	movs	r2, #0
 8001104:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001106:	4b08      	ldr	r3, [pc, #32]	; (8001128 <MX_RTC_Init+0x44>)
 8001108:	2200      	movs	r2, #0
 800110a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <MX_RTC_Init+0x44>)
 800110e:	2200      	movs	r2, #0
 8001110:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001112:	4805      	ldr	r0, [pc, #20]	; (8001128 <MX_RTC_Init+0x44>)
 8001114:	f004 fbd2 	bl	80058bc <HAL_RTC_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800111e:	f000 fc76 	bl	8001a0e <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000118 	.word	0x20000118
 800112c:	40002800 	.word	0x40002800

08001130 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001134:	4b17      	ldr	r3, [pc, #92]	; (8001194 <MX_SPI1_Init+0x64>)
 8001136:	4a18      	ldr	r2, [pc, #96]	; (8001198 <MX_SPI1_Init+0x68>)
 8001138:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800113a:	4b16      	ldr	r3, [pc, #88]	; (8001194 <MX_SPI1_Init+0x64>)
 800113c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001140:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001142:	4b14      	ldr	r3, [pc, #80]	; (8001194 <MX_SPI1_Init+0x64>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <MX_SPI1_Init+0x64>)
 800114a:	2200      	movs	r2, #0
 800114c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800114e:	4b11      	ldr	r3, [pc, #68]	; (8001194 <MX_SPI1_Init+0x64>)
 8001150:	2200      	movs	r2, #0
 8001152:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <MX_SPI1_Init+0x64>)
 8001156:	2200      	movs	r2, #0
 8001158:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <MX_SPI1_Init+0x64>)
 800115c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001160:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001162:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <MX_SPI1_Init+0x64>)
 8001164:	2200      	movs	r2, #0
 8001166:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001168:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <MX_SPI1_Init+0x64>)
 800116a:	2200      	movs	r2, #0
 800116c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <MX_SPI1_Init+0x64>)
 8001170:	2200      	movs	r2, #0
 8001172:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001174:	4b07      	ldr	r3, [pc, #28]	; (8001194 <MX_SPI1_Init+0x64>)
 8001176:	2200      	movs	r2, #0
 8001178:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <MX_SPI1_Init+0x64>)
 800117c:	220a      	movs	r2, #10
 800117e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001180:	4804      	ldr	r0, [pc, #16]	; (8001194 <MX_SPI1_Init+0x64>)
 8001182:	f004 fea7 	bl	8005ed4 <HAL_SPI_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800118c:	f000 fc3f 	bl	8001a0e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000138 	.word	0x20000138
 8001198:	40013000 	.word	0x40013000

0800119c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80011a0:	4b17      	ldr	r3, [pc, #92]	; (8001200 <MX_SPI2_Init+0x64>)
 80011a2:	4a18      	ldr	r2, [pc, #96]	; (8001204 <MX_SPI2_Init+0x68>)
 80011a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011a6:	4b16      	ldr	r3, [pc, #88]	; (8001200 <MX_SPI2_Init+0x64>)
 80011a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011ae:	4b14      	ldr	r3, [pc, #80]	; (8001200 <MX_SPI2_Init+0x64>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80011b4:	4b12      	ldr	r3, [pc, #72]	; (8001200 <MX_SPI2_Init+0x64>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <MX_SPI2_Init+0x64>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011c0:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <MX_SPI2_Init+0x64>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <MX_SPI2_Init+0x64>)
 80011c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011cc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011ce:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <MX_SPI2_Init+0x64>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011d4:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <MX_SPI2_Init+0x64>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <MX_SPI2_Init+0x64>)
 80011dc:	2200      	movs	r2, #0
 80011de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011e0:	4b07      	ldr	r3, [pc, #28]	; (8001200 <MX_SPI2_Init+0x64>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <MX_SPI2_Init+0x64>)
 80011e8:	220a      	movs	r2, #10
 80011ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011ec:	4804      	ldr	r0, [pc, #16]	; (8001200 <MX_SPI2_Init+0x64>)
 80011ee:	f004 fe71 	bl	8005ed4 <HAL_SPI_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80011f8:	f000 fc09 	bl	8001a0e <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000190 	.word	0x20000190
 8001204:	40003800 	.word	0x40003800

08001208 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800120e:	463b      	mov	r3, r7
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <MX_TIM6_Init+0x64>)
 8001218:	4a15      	ldr	r2, [pc, #84]	; (8001270 <MX_TIM6_Init+0x68>)
 800121a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 800121c:	4b13      	ldr	r3, [pc, #76]	; (800126c <MX_TIM6_Init+0x64>)
 800121e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001222:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <MX_TIM6_Init+0x64>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 40;
 800122a:	4b10      	ldr	r3, [pc, #64]	; (800126c <MX_TIM6_Init+0x64>)
 800122c:	2228      	movs	r2, #40	; 0x28
 800122e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001230:	4b0e      	ldr	r3, [pc, #56]	; (800126c <MX_TIM6_Init+0x64>)
 8001232:	2200      	movs	r2, #0
 8001234:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001236:	480d      	ldr	r0, [pc, #52]	; (800126c <MX_TIM6_Init+0x64>)
 8001238:	f005 fd6a 	bl	8006d10 <HAL_TIM_Base_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001242:	f000 fbe4 	bl	8001a0e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001246:	2300      	movs	r3, #0
 8001248:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800124a:	2300      	movs	r3, #0
 800124c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800124e:	463b      	mov	r3, r7
 8001250:	4619      	mov	r1, r3
 8001252:	4806      	ldr	r0, [pc, #24]	; (800126c <MX_TIM6_Init+0x64>)
 8001254:	f005 ffea 	bl	800722c <HAL_TIMEx_MasterConfigSynchronization>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800125e:	f000 fbd6 	bl	8001a0e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	200002a8 	.word	0x200002a8
 8001270:	40001000 	.word	0x40001000

08001274 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001278:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <MX_USART2_UART_Init+0x4c>)
 800127a:	4a12      	ldr	r2, [pc, #72]	; (80012c4 <MX_USART2_UART_Init+0x50>)
 800127c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800127e:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <MX_USART2_UART_Init+0x4c>)
 8001280:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001284:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <MX_USART2_UART_Init+0x4c>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800128c:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <MX_USART2_UART_Init+0x4c>)
 800128e:	2200      	movs	r2, #0
 8001290:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001292:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <MX_USART2_UART_Init+0x4c>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001298:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <MX_USART2_UART_Init+0x4c>)
 800129a:	220c      	movs	r2, #12
 800129c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800129e:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <MX_USART2_UART_Init+0x4c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <MX_USART2_UART_Init+0x4c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012aa:	4805      	ldr	r0, [pc, #20]	; (80012c0 <MX_USART2_UART_Init+0x4c>)
 80012ac:	f006 f84e 	bl	800734c <HAL_UART_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012b6:	f000 fbaa 	bl	8001a0e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200002f0 	.word	0x200002f0
 80012c4:	40004400 	.word	0x40004400

080012c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	4b17      	ldr	r3, [pc, #92]	; (8001330 <MX_DMA_Init+0x68>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a16      	ldr	r2, [pc, #88]	; (8001330 <MX_DMA_Init+0x68>)
 80012d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b14      	ldr	r3, [pc, #80]	; (8001330 <MX_DMA_Init+0x68>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	603b      	str	r3, [r7, #0]
 80012ee:	4b10      	ldr	r3, [pc, #64]	; (8001330 <MX_DMA_Init+0x68>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a0f      	ldr	r2, [pc, #60]	; (8001330 <MX_DMA_Init+0x68>)
 80012f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <MX_DMA_Init+0x68>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001302:	603b      	str	r3, [r7, #0]
 8001304:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001306:	2200      	movs	r2, #0
 8001308:	2100      	movs	r1, #0
 800130a:	200f      	movs	r0, #15
 800130c:	f001 fe17 	bl	8002f3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001310:	200f      	movs	r0, #15
 8001312:	f001 fe30 	bl	8002f76 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2100      	movs	r1, #0
 800131a:	203b      	movs	r0, #59	; 0x3b
 800131c:	f001 fe0f 	bl	8002f3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001320:	203b      	movs	r0, #59	; 0x3b
 8001322:	f001 fe28 	bl	8002f76 <HAL_NVIC_EnableIRQ>

}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40023800 	.word	0x40023800

08001334 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	; 0x28
 8001338:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133a:	f107 0314 	add.w	r3, r7, #20
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
 8001348:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	4b57      	ldr	r3, [pc, #348]	; (80014ac <MX_GPIO_Init+0x178>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a56      	ldr	r2, [pc, #344]	; (80014ac <MX_GPIO_Init+0x178>)
 8001354:	f043 0304 	orr.w	r3, r3, #4
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b54      	ldr	r3, [pc, #336]	; (80014ac <MX_GPIO_Init+0x178>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0304 	and.w	r3, r3, #4
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	4b50      	ldr	r3, [pc, #320]	; (80014ac <MX_GPIO_Init+0x178>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a4f      	ldr	r2, [pc, #316]	; (80014ac <MX_GPIO_Init+0x178>)
 8001370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b4d      	ldr	r3, [pc, #308]	; (80014ac <MX_GPIO_Init+0x178>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	60bb      	str	r3, [r7, #8]
 8001386:	4b49      	ldr	r3, [pc, #292]	; (80014ac <MX_GPIO_Init+0x178>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a48      	ldr	r2, [pc, #288]	; (80014ac <MX_GPIO_Init+0x178>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b46      	ldr	r3, [pc, #280]	; (80014ac <MX_GPIO_Init+0x178>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	607b      	str	r3, [r7, #4]
 80013a2:	4b42      	ldr	r3, [pc, #264]	; (80014ac <MX_GPIO_Init+0x178>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a41      	ldr	r2, [pc, #260]	; (80014ac <MX_GPIO_Init+0x178>)
 80013a8:	f043 0302 	orr.w	r3, r3, #2
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b3f      	ldr	r3, [pc, #252]	; (80014ac <MX_GPIO_Init+0x178>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	603b      	str	r3, [r7, #0]
 80013be:	4b3b      	ldr	r3, [pc, #236]	; (80014ac <MX_GPIO_Init+0x178>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a3a      	ldr	r2, [pc, #232]	; (80014ac <MX_GPIO_Init+0x178>)
 80013c4:	f043 0308 	orr.w	r3, r3, #8
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b38      	ldr	r3, [pc, #224]	; (80014ac <MX_GPIO_Init+0x178>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0308 	and.w	r3, r3, #8
 80013d2:	603b      	str	r3, [r7, #0]
 80013d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI2_WP_Pin|SPI2_CS_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2113      	movs	r1, #19
 80013da:	4835      	ldr	r0, [pc, #212]	; (80014b0 <MX_GPIO_Init+0x17c>)
 80013dc:	f002 fbac 	bl	8003b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_WP_GPIO_Port, SPI1_WP_Pin, GPIO_PIN_RESET);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2110      	movs	r1, #16
 80013e4:	4833      	ldr	r0, [pc, #204]	; (80014b4 <MX_GPIO_Init+0x180>)
 80013e6:	f002 fba7 	bl	8003b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 80013ea:	2200      	movs	r2, #0
 80013ec:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80013f0:	4831      	ldr	r0, [pc, #196]	; (80014b8 <MX_GPIO_Init+0x184>)
 80013f2:	f002 fba1 	bl	8003b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI2_WP_Pin */
  GPIO_InitStruct.Pin = SPI2_WP_Pin;
 80013f6:	2301      	movs	r3, #1
 80013f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fa:	2301      	movs	r3, #1
 80013fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013fe:	2301      	movs	r3, #1
 8001400:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001402:	2300      	movs	r3, #0
 8001404:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_WP_GPIO_Port, &GPIO_InitStruct);
 8001406:	f107 0314 	add.w	r3, r7, #20
 800140a:	4619      	mov	r1, r3
 800140c:	4828      	ldr	r0, [pc, #160]	; (80014b0 <MX_GPIO_Init+0x17c>)
 800140e:	f002 f9cf 	bl	80037b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_CS_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin|SPI1_CS_Pin;
 8001412:	2312      	movs	r3, #18
 8001414:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001416:	2301      	movs	r3, #1
 8001418:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141e:	2300      	movs	r3, #0
 8001420:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001422:	f107 0314 	add.w	r3, r7, #20
 8001426:	4619      	mov	r1, r3
 8001428:	4821      	ldr	r0, [pc, #132]	; (80014b0 <MX_GPIO_Init+0x17c>)
 800142a:	f002 f9c1 	bl	80037b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_WP_Pin */
  GPIO_InitStruct.Pin = SPI1_WP_Pin;
 800142e:	2310      	movs	r3, #16
 8001430:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001432:	2301      	movs	r3, #1
 8001434:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001436:	2301      	movs	r3, #1
 8001438:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143a:	2300      	movs	r3, #0
 800143c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_WP_GPIO_Port, &GPIO_InitStruct);
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	4619      	mov	r1, r3
 8001444:	481b      	ldr	r0, [pc, #108]	; (80014b4 <MX_GPIO_Init+0x180>)
 8001446:	f002 f9b3 	bl	80037b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : JMP_Flight_Pin */
  GPIO_InitStruct.Pin = JMP_Flight_Pin;
 800144a:	2302      	movs	r3, #2
 800144c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800144e:	2300      	movs	r3, #0
 8001450:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(JMP_Flight_GPIO_Port, &GPIO_InitStruct);
 8001456:	f107 0314 	add.w	r3, r7, #20
 800145a:	4619      	mov	r1, r3
 800145c:	4816      	ldr	r0, [pc, #88]	; (80014b8 <MX_GPIO_Init+0x184>)
 800145e:	f002 f9a7 	bl	80037b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8001462:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001468:	2301      	movs	r3, #1
 800146a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800146c:	2302      	movs	r3, #2
 800146e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001470:	2300      	movs	r3, #0
 8001472:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	4619      	mov	r1, r3
 800147a:	480f      	ldr	r0, [pc, #60]	; (80014b8 <MX_GPIO_Init+0x184>)
 800147c:	f002 f998 	bl	80037b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001480:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	2302      	movs	r3, #2
 8001488:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148e:	2303      	movs	r3, #3
 8001490:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001492:	2309      	movs	r3, #9
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	4619      	mov	r1, r3
 800149c:	4805      	ldr	r0, [pc, #20]	; (80014b4 <MX_GPIO_Init+0x180>)
 800149e:	f002 f987 	bl	80037b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014a2:	bf00      	nop
 80014a4:	3728      	adds	r7, #40	; 0x28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40020800 	.word	0x40020800
 80014b4:	40020000 	.word	0x40020000
 80014b8:	40020400 	.word	0x40020400

080014bc <clean_data_buffer>:

/* USER CODE BEGIN 4 */
void clean_data_buffer(uint16_t array_size, uint8_t data_array[array_size]) {
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	6039      	str	r1, [r7, #0]
 80014c6:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < array_size; ++i) {
 80014c8:	2300      	movs	r3, #0
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	e007      	b.n	80014de <clean_data_buffer+0x22>
    	data_array[i] = 0xFF;  // Initialize each element to 0xFF
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	4413      	add	r3, r2
 80014d4:	22ff      	movs	r2, #255	; 0xff
 80014d6:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < array_size; ++i) {
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	3301      	adds	r3, #1
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	68fa      	ldr	r2, [r7, #12]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	dbf3      	blt.n	80014ce <clean_data_buffer+0x12>
    }
}
 80014e6:	bf00      	nop
 80014e8:	bf00      	nop
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <systemInit>:

void systemInit() {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
	i2c_accel = &hi2c2;
 80014fa:	4b4f      	ldr	r3, [pc, #316]	; (8001638 <systemInit+0x144>)
 80014fc:	4a4f      	ldr	r2, [pc, #316]	; (800163c <systemInit+0x148>)
 80014fe:	601a      	str	r2, [r3, #0]
	i2c_bme280 = &hi2c1;
 8001500:	4b4f      	ldr	r3, [pc, #316]	; (8001640 <systemInit+0x14c>)
 8001502:	4a50      	ldr	r2, [pc, #320]	; (8001644 <systemInit+0x150>)
 8001504:	601a      	str	r2, [r3, #0]

	gpio_set_config();
 8001506:	f000 f8c5 	bl	8001694 <gpio_set_config>

	HAL_GPIO_WritePin(led_orange.GPIOx, led_orange.GPIO_Pin, GPIO_PIN_RESET);	// Turn LED off
 800150a:	4b4f      	ldr	r3, [pc, #316]	; (8001648 <systemInit+0x154>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a4e      	ldr	r2, [pc, #312]	; (8001648 <systemInit+0x154>)
 8001510:	8891      	ldrh	r1, [r2, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	4618      	mov	r0, r3
 8001516:	f002 fb0f 	bl	8003b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(cs_spi1.GPIOx, cs_spi1.GPIO_Pin, GPIO_PIN_SET);		// SET SPI CS High to disable bus 1
 800151a:	4b4c      	ldr	r3, [pc, #304]	; (800164c <systemInit+0x158>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a4b      	ldr	r2, [pc, #300]	; (800164c <systemInit+0x158>)
 8001520:	8891      	ldrh	r1, [r2, #4]
 8001522:	2201      	movs	r2, #1
 8001524:	4618      	mov	r0, r3
 8001526:	f002 fb07 	bl	8003b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(cs_spi2.GPIOx, cs_spi2.GPIO_Pin, GPIO_PIN_SET);		// SET SPI CS High to disable bus 2
 800152a:	4b49      	ldr	r3, [pc, #292]	; (8001650 <systemInit+0x15c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a48      	ldr	r2, [pc, #288]	; (8001650 <systemInit+0x15c>)
 8001530:	8891      	ldrh	r1, [r2, #4]
 8001532:	2201      	movs	r2, #1
 8001534:	4618      	mov	r0, r3
 8001536:	f002 faff 	bl	8003b38 <HAL_GPIO_WritePin>

	// Clean the data buffer and set all values to 0xFF
	next_blank_page = 0;
 800153a:	4b46      	ldr	r3, [pc, #280]	; (8001654 <systemInit+0x160>)
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]

	clean_data_buffer(PAGE_SIZE, data_buffer_tx[0]);
 8001540:	4945      	ldr	r1, [pc, #276]	; (8001658 <systemInit+0x164>)
 8001542:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001546:	f7ff ffb9 	bl	80014bc <clean_data_buffer>
	clean_data_buffer(PAGE_SIZE, data_buffer_tx[1]);
 800154a:	4944      	ldr	r1, [pc, #272]	; (800165c <systemInit+0x168>)
 800154c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001550:	f7ff ffb4 	bl	80014bc <clean_data_buffer>

	for (uint8_t i = 0; i < 6; i++) {
 8001554:	2300      	movs	r3, #0
 8001556:	73fb      	strb	r3, [r7, #15]
 8001558:	e00e      	b.n	8001578 <systemInit+0x84>
		accel_data[i] = 0x00;
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	4a40      	ldr	r2, [pc, #256]	; (8001660 <systemInit+0x16c>)
 800155e:	2100      	movs	r1, #0
 8001560:	54d1      	strb	r1, [r2, r3]
		bme280_data_1[i] = 0x00;
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	4a3f      	ldr	r2, [pc, #252]	; (8001664 <systemInit+0x170>)
 8001566:	2100      	movs	r1, #0
 8001568:	54d1      	strb	r1, [r2, r3]
		bme280_data_2[i] = 0x00;
 800156a:	7bfb      	ldrb	r3, [r7, #15]
 800156c:	4a3e      	ldr	r2, [pc, #248]	; (8001668 <systemInit+0x174>)
 800156e:	2100      	movs	r1, #0
 8001570:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 6; i++) {
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	3301      	adds	r3, #1
 8001576:	73fb      	strb	r3, [r7, #15]
 8001578:	7bfb      	ldrb	r3, [r7, #15]
 800157a:	2b05      	cmp	r3, #5
 800157c:	d9ed      	bls.n	800155a <systemInit+0x66>
	}

	// Initialise the peripherals
	init_accel(i2c_accel);
 800157e:	4b2e      	ldr	r3, [pc, #184]	; (8001638 <systemInit+0x144>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f7fe ffb8 	bl	80004f8 <init_accel>
	init_bme280(i2c_bme280, 0);
 8001588:	4b2d      	ldr	r3, [pc, #180]	; (8001640 <systemInit+0x14c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2100      	movs	r1, #0
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff f860 	bl	8000654 <init_bme280>
	init_bme280(i2c_bme280, 1);
 8001594:	4b2a      	ldr	r3, [pc, #168]	; (8001640 <systemInit+0x14c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2101      	movs	r1, #1
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff f85a 	bl	8000654 <init_bme280>
	software_reset(&hspi1, cs_spi1);
 80015a0:	4b2a      	ldr	r3, [pc, #168]	; (800164c <systemInit+0x158>)
 80015a2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80015a6:	4831      	ldr	r0, [pc, #196]	; (800166c <systemInit+0x178>)
 80015a8:	f7ff f9ee 	bl	8000988 <software_reset>
	software_reset(&hspi2, cs_spi2);
 80015ac:	4b28      	ldr	r3, [pc, #160]	; (8001650 <systemInit+0x15c>)
 80015ae:	e893 0006 	ldmia.w	r3, {r1, r2}
 80015b2:	482f      	ldr	r0, [pc, #188]	; (8001670 <systemInit+0x17c>)
 80015b4:	f7ff f9e8 	bl	8000988 <software_reset>

	int next_blank_page0 = find_next_blank_page(&hspi1, &end_of_flash, cs_spi1);
 80015b8:	4b24      	ldr	r3, [pc, #144]	; (800164c <systemInit+0x158>)
 80015ba:	cb0c      	ldmia	r3, {r2, r3}
 80015bc:	492d      	ldr	r1, [pc, #180]	; (8001674 <systemInit+0x180>)
 80015be:	482b      	ldr	r0, [pc, #172]	; (800166c <systemInit+0x178>)
 80015c0:	f7ff fa34 	bl	8000a2c <find_next_blank_page>
 80015c4:	4603      	mov	r3, r0
 80015c6:	60bb      	str	r3, [r7, #8]
	int next_blank_page1 = find_next_blank_page(&hspi2, &end_of_flash, cs_spi2);
 80015c8:	4b21      	ldr	r3, [pc, #132]	; (8001650 <systemInit+0x15c>)
 80015ca:	cb0c      	ldmia	r3, {r2, r3}
 80015cc:	4929      	ldr	r1, [pc, #164]	; (8001674 <systemInit+0x180>)
 80015ce:	4828      	ldr	r0, [pc, #160]	; (8001670 <systemInit+0x17c>)
 80015d0:	f7ff fa2c 	bl	8000a2c <find_next_blank_page>
 80015d4:	4603      	mov	r3, r0
 80015d6:	607b      	str	r3, [r7, #4]

	// Assign the value of next_blank_page to the larger of next_blank_page0 and next_blank_page1
	next_blank_page = (next_blank_page0 > next_blank_page1) ? next_blank_page0 : next_blank_page1;
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	4293      	cmp	r3, r2
 80015de:	bfb8      	it	lt
 80015e0:	4613      	movlt	r3, r2
 80015e2:	461a      	mov	r2, r3
 80015e4:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <systemInit+0x160>)
 80015e6:	601a      	str	r2, [r3, #0]

	buffer_ref = 0;
 80015e8:	4b23      	ldr	r3, [pc, #140]	; (8001678 <systemInit+0x184>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	701a      	strb	r2, [r3, #0]
	byte_tracker = 0;
 80015ee:	4b23      	ldr	r3, [pc, #140]	; (800167c <systemInit+0x188>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	801a      	strh	r2, [r3, #0]
	end_of_flash = GPIO_PIN_RESET;
 80015f4:	4b1f      	ldr	r3, [pc, #124]	; (8001674 <systemInit+0x180>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	701a      	strb	r2, [r3, #0]
	uart2_rec_flag = 0;
 80015fa:	4b21      	ldr	r3, [pc, #132]	; (8001680 <systemInit+0x18c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	701a      	strb	r2, [r3, #0]

	send_uart_hex(&huart2, systemStatus(&hspi1, &hspi2, i2c_bme280, i2c_accel));
 8001600:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <systemInit+0x14c>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <systemInit+0x144>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4919      	ldr	r1, [pc, #100]	; (8001670 <systemInit+0x17c>)
 800160a:	4818      	ldr	r0, [pc, #96]	; (800166c <systemInit+0x178>)
 800160c:	f000 fa04 	bl	8001a18 <systemStatus>
 8001610:	4603      	mov	r3, r0
 8001612:	4619      	mov	r1, r3
 8001614:	481b      	ldr	r0, [pc, #108]	; (8001684 <systemInit+0x190>)
 8001616:	f001 f9e6 	bl	80029e6 <send_uart_hex>

	// Initiate clocks, interrupts and DMA
	HAL_UART_Receive_IT(&huart2, UARTRxData, 2);
 800161a:	2202      	movs	r2, #2
 800161c:	491a      	ldr	r1, [pc, #104]	; (8001688 <systemInit+0x194>)
 800161e:	4819      	ldr	r0, [pc, #100]	; (8001684 <systemInit+0x190>)
 8001620:	f005 ff6f 	bl	8007502 <HAL_UART_Receive_IT>
	initialise_rtc_default(&hrtc);
 8001624:	4819      	ldr	r0, [pc, #100]	; (800168c <systemInit+0x198>)
 8001626:	f000 fd1b 	bl	8002060 <initialise_rtc_default>
	HAL_TIM_Base_Start_IT(&htim6);
 800162a:	4819      	ldr	r0, [pc, #100]	; (8001690 <systemInit+0x19c>)
 800162c:	f005 fbc0 	bl	8006db0 <HAL_TIM_Base_Start_IT>
}
 8001630:	bf00      	nop
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000338 	.word	0x20000338
 800163c:	200000c4 	.word	0x200000c4
 8001640:	2000033c 	.word	0x2000033c
 8001644:	20000070 	.word	0x20000070
 8001648:	20000568 	.word	0x20000568
 800164c:	20000578 	.word	0x20000578
 8001650:	20000588 	.word	0x20000588
 8001654:	20000560 	.word	0x20000560
 8001658:	20000344 	.word	0x20000344
 800165c:	20000444 	.word	0x20000444
 8001660:	20000548 	.word	0x20000548
 8001664:	20000550 	.word	0x20000550
 8001668:	20000558 	.word	0x20000558
 800166c:	20000138 	.word	0x20000138
 8001670:	20000190 	.word	0x20000190
 8001674:	20000566 	.word	0x20000566
 8001678:	2000055e 	.word	0x2000055e
 800167c:	20000564 	.word	0x20000564
 8001680:	20000342 	.word	0x20000342
 8001684:	200002f0 	.word	0x200002f0
 8001688:	20000340 	.word	0x20000340
 800168c:	20000118 	.word	0x20000118
 8001690:	200002a8 	.word	0x200002a8

08001694 <gpio_set_config>:

void gpio_set_config() {
 8001694:	b590      	push	{r4, r7, lr}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
	// Set LED gpio
	led_orange = create_GPIO_Config(GPIOB, GPIO_PIN_14);	// Orange LED (Heartbeat LED)
 800169a:	4c30      	ldr	r4, [pc, #192]	; (800175c <gpio_set_config+0xc8>)
 800169c:	463b      	mov	r3, r7
 800169e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016a2:	492f      	ldr	r1, [pc, #188]	; (8001760 <gpio_set_config+0xcc>)
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff faa1 	bl	8000bec <create_GPIO_Config>
 80016aa:	4622      	mov	r2, r4
 80016ac:	463b      	mov	r3, r7
 80016ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 80016b2:	e882 0003 	stmia.w	r2, {r0, r1}
	led_green = create_GPIO_Config(GPIOB, GPIO_PIN_7);		// Green LED (Hard Drive LED)
 80016b6:	4c2b      	ldr	r4, [pc, #172]	; (8001764 <gpio_set_config+0xd0>)
 80016b8:	463b      	mov	r3, r7
 80016ba:	2280      	movs	r2, #128	; 0x80
 80016bc:	4928      	ldr	r1, [pc, #160]	; (8001760 <gpio_set_config+0xcc>)
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff fa94 	bl	8000bec <create_GPIO_Config>
 80016c4:	4622      	mov	r2, r4
 80016c6:	463b      	mov	r3, r7
 80016c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80016cc:	e882 0003 	stmia.w	r2, {r0, r1}

	// SPI Flash 0 CS and WP
	cs_spi1 = create_GPIO_Config(GPIOC, GPIO_PIN_4);		// Change for SRAD
 80016d0:	4c25      	ldr	r4, [pc, #148]	; (8001768 <gpio_set_config+0xd4>)
 80016d2:	463b      	mov	r3, r7
 80016d4:	2210      	movs	r2, #16
 80016d6:	4925      	ldr	r1, [pc, #148]	; (800176c <gpio_set_config+0xd8>)
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff fa87 	bl	8000bec <create_GPIO_Config>
 80016de:	4622      	mov	r2, r4
 80016e0:	463b      	mov	r3, r7
 80016e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80016e6:	e882 0003 	stmia.w	r2, {r0, r1}
	wp_spi1 = create_GPIO_Config(GPIOA, GPIO_PIN_4);
 80016ea:	4c21      	ldr	r4, [pc, #132]	; (8001770 <gpio_set_config+0xdc>)
 80016ec:	463b      	mov	r3, r7
 80016ee:	2210      	movs	r2, #16
 80016f0:	4920      	ldr	r1, [pc, #128]	; (8001774 <gpio_set_config+0xe0>)
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fa7a 	bl	8000bec <create_GPIO_Config>
 80016f8:	4622      	mov	r2, r4
 80016fa:	463b      	mov	r3, r7
 80016fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001700:	e882 0003 	stmia.w	r2, {r0, r1}

	// SPI Flash 1 CS and WP
	cs_spi2 = create_GPIO_Config(GPIOC, GPIO_PIN_1);		// Change for SRAD
 8001704:	4c1c      	ldr	r4, [pc, #112]	; (8001778 <gpio_set_config+0xe4>)
 8001706:	463b      	mov	r3, r7
 8001708:	2202      	movs	r2, #2
 800170a:	4918      	ldr	r1, [pc, #96]	; (800176c <gpio_set_config+0xd8>)
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff fa6d 	bl	8000bec <create_GPIO_Config>
 8001712:	4622      	mov	r2, r4
 8001714:	463b      	mov	r3, r7
 8001716:	e893 0003 	ldmia.w	r3, {r0, r1}
 800171a:	e882 0003 	stmia.w	r2, {r0, r1}
	wp_spi2 = create_GPIO_Config(GPIOC, GPIO_PIN_0);
 800171e:	4c17      	ldr	r4, [pc, #92]	; (800177c <gpio_set_config+0xe8>)
 8001720:	463b      	mov	r3, r7
 8001722:	2201      	movs	r2, #1
 8001724:	4911      	ldr	r1, [pc, #68]	; (800176c <gpio_set_config+0xd8>)
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff fa60 	bl	8000bec <create_GPIO_Config>
 800172c:	4622      	mov	r2, r4
 800172e:	463b      	mov	r3, r7
 8001730:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001734:	e882 0003 	stmia.w	r2, {r0, r1}

	// Flight Jumper GPIO Input
	jmp_flight = create_GPIO_Config(GPIOB, GPIO_PIN_1);
 8001738:	4c11      	ldr	r4, [pc, #68]	; (8001780 <gpio_set_config+0xec>)
 800173a:	463b      	mov	r3, r7
 800173c:	2202      	movs	r2, #2
 800173e:	4908      	ldr	r1, [pc, #32]	; (8001760 <gpio_set_config+0xcc>)
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff fa53 	bl	8000bec <create_GPIO_Config>
 8001746:	4622      	mov	r2, r4
 8001748:	463b      	mov	r3, r7
 800174a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800174e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	bd90      	pop	{r4, r7, pc}
 800175a:	bf00      	nop
 800175c:	20000568 	.word	0x20000568
 8001760:	40020400 	.word	0x40020400
 8001764:	20000570 	.word	0x20000570
 8001768:	20000578 	.word	0x20000578
 800176c:	40020800 	.word	0x40020800
 8001770:	20000580 	.word	0x20000580
 8001774:	40020000 	.word	0x40020000
 8001778:	20000588 	.word	0x20000588
 800177c:	20000590 	.word	0x20000590
 8001780:	20000598 	.word	0x20000598

08001784 <handleUART>:

void handleUART() {
 8001784:	b590      	push	{r4, r7, lr}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
	UART_HandleTypeDef *huart = &huart2;
 800178a:	4b8b      	ldr	r3, [pc, #556]	; (80019b8 <handleUART+0x234>)
 800178c:	607b      	str	r3, [r7, #4]

	// Send Heartbeat to UART (data_rx[0] = "h")
	if (UARTRxData[0] == 0x68) {
 800178e:	4b8b      	ldr	r3, [pc, #556]	; (80019bc <handleUART+0x238>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b68      	cmp	r3, #104	; 0x68
 8001794:	d110      	bne.n	80017b8 <handleUART+0x34>
		heartbeatUART(huart);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 f990 	bl	8001abc <heartbeatUART>
		send_uart_hex(huart, systemStatus(&hspi1, &hspi2, i2c_bme280, i2c_accel));
 800179c:	4b88      	ldr	r3, [pc, #544]	; (80019c0 <handleUART+0x23c>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4b88      	ldr	r3, [pc, #544]	; (80019c4 <handleUART+0x240>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4988      	ldr	r1, [pc, #544]	; (80019c8 <handleUART+0x244>)
 80017a6:	4889      	ldr	r0, [pc, #548]	; (80019cc <handleUART+0x248>)
 80017a8:	f000 f936 	bl	8001a18 <systemStatus>
 80017ac:	4603      	mov	r3, r0
 80017ae:	4619      	mov	r1, r3
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f001 f918 	bl	80029e6 <send_uart_hex>
 80017b6:	e0f1      	b.n	800199c <handleUART+0x218>
	}

/***************************** SPI Flash ************************************************/
	// Erase specified flash chip (data_rx[0]  = "e")
	else if (UARTRxData[0] == 0x65) {
 80017b8:	4b80      	ldr	r3, [pc, #512]	; (80019bc <handleUART+0x238>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b65      	cmp	r3, #101	; 0x65
 80017be:	d11e      	bne.n	80017fe <handleUART+0x7a>
		if(decodeASCII(UARTRxData[1]) == 0) {
 80017c0:	4b7e      	ldr	r3, [pc, #504]	; (80019bc <handleUART+0x238>)
 80017c2:	785b      	ldrb	r3, [r3, #1]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f000 f909 	bl	80019dc <decodeASCII>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d106      	bne.n	80017de <handleUART+0x5a>
			eraseFlashSPI(&hspi1, huart, cs_spi1);
 80017d0:	4b7f      	ldr	r3, [pc, #508]	; (80019d0 <handleUART+0x24c>)
 80017d2:	cb0c      	ldmia	r3, {r2, r3}
 80017d4:	6879      	ldr	r1, [r7, #4]
 80017d6:	487d      	ldr	r0, [pc, #500]	; (80019cc <handleUART+0x248>)
 80017d8:	f000 f97c 	bl	8001ad4 <eraseFlashSPI>
 80017dc:	e0de      	b.n	800199c <handleUART+0x218>
		} else if (decodeASCII(UARTRxData[1]) == 1) {
 80017de:	4b77      	ldr	r3, [pc, #476]	; (80019bc <handleUART+0x238>)
 80017e0:	785b      	ldrb	r3, [r3, #1]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 f8fa 	bl	80019dc <decodeASCII>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	f040 80d6 	bne.w	800199c <handleUART+0x218>
			eraseFlashSPI(&hspi2, huart, cs_spi2);
 80017f0:	4b78      	ldr	r3, [pc, #480]	; (80019d4 <handleUART+0x250>)
 80017f2:	cb0c      	ldmia	r3, {r2, r3}
 80017f4:	6879      	ldr	r1, [r7, #4]
 80017f6:	4874      	ldr	r0, [pc, #464]	; (80019c8 <handleUART+0x244>)
 80017f8:	f000 f96c 	bl	8001ad4 <eraseFlashSPI>
 80017fc:	e0ce      	b.n	800199c <handleUART+0x218>
		}
	}

	// Read data from specified flash chip (data_rx[0] = "r")
	else if (UARTRxData[0] == 0x72) {
 80017fe:	4b6f      	ldr	r3, [pc, #444]	; (80019bc <handleUART+0x238>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b72      	cmp	r3, #114	; 0x72
 8001804:	d11e      	bne.n	8001844 <handleUART+0xc0>
		if(decodeASCII(UARTRxData[1]) == 0) {
 8001806:	4b6d      	ldr	r3, [pc, #436]	; (80019bc <handleUART+0x238>)
 8001808:	785b      	ldrb	r3, [r3, #1]
 800180a:	4618      	mov	r0, r3
 800180c:	f000 f8e6 	bl	80019dc <decodeASCII>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d106      	bne.n	8001824 <handleUART+0xa0>
			readFlashToUART(&hspi1, huart, cs_spi1);
 8001816:	4b6e      	ldr	r3, [pc, #440]	; (80019d0 <handleUART+0x24c>)
 8001818:	cb0c      	ldmia	r3, {r2, r3}
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	486b      	ldr	r0, [pc, #428]	; (80019cc <handleUART+0x248>)
 800181e:	f000 f995 	bl	8001b4c <readFlashToUART>
 8001822:	e0bb      	b.n	800199c <handleUART+0x218>
		} else if (decodeASCII(UARTRxData[1]) == 1) {
 8001824:	4b65      	ldr	r3, [pc, #404]	; (80019bc <handleUART+0x238>)
 8001826:	785b      	ldrb	r3, [r3, #1]
 8001828:	4618      	mov	r0, r3
 800182a:	f000 f8d7 	bl	80019dc <decodeASCII>
 800182e:	4603      	mov	r3, r0
 8001830:	2b01      	cmp	r3, #1
 8001832:	f040 80b3 	bne.w	800199c <handleUART+0x218>
			readFlashToUART(&hspi2, huart, cs_spi2);
 8001836:	4b67      	ldr	r3, [pc, #412]	; (80019d4 <handleUART+0x250>)
 8001838:	cb0c      	ldmia	r3, {r2, r3}
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	4862      	ldr	r0, [pc, #392]	; (80019c8 <handleUART+0x244>)
 800183e:	f000 f985 	bl	8001b4c <readFlashToUART>
 8001842:	e0ab      	b.n	800199c <handleUART+0x218>
		}
	}

	// Read Manufacturer over SPI (data_rx[0] = "m")
	else if (UARTRxData[0] == 0x6d) {
 8001844:	4b5d      	ldr	r3, [pc, #372]	; (80019bc <handleUART+0x238>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b6d      	cmp	r3, #109	; 0x6d
 800184a:	d11e      	bne.n	800188a <handleUART+0x106>
		if(decodeASCII(UARTRxData[1]) == 0) {
 800184c:	4b5b      	ldr	r3, [pc, #364]	; (80019bc <handleUART+0x238>)
 800184e:	785b      	ldrb	r3, [r3, #1]
 8001850:	4618      	mov	r0, r3
 8001852:	f000 f8c3 	bl	80019dc <decodeASCII>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d106      	bne.n	800186a <handleUART+0xe6>
			readFlashManuSPI(&hspi1, huart, cs_spi1);
 800185c:	4b5c      	ldr	r3, [pc, #368]	; (80019d0 <handleUART+0x24c>)
 800185e:	cb0c      	ldmia	r3, {r2, r3}
 8001860:	6879      	ldr	r1, [r7, #4]
 8001862:	485a      	ldr	r0, [pc, #360]	; (80019cc <handleUART+0x248>)
 8001864:	f000 f9de 	bl	8001c24 <readFlashManuSPI>
 8001868:	e098      	b.n	800199c <handleUART+0x218>
		} else if (decodeASCII(UARTRxData[1]) == 1) {
 800186a:	4b54      	ldr	r3, [pc, #336]	; (80019bc <handleUART+0x238>)
 800186c:	785b      	ldrb	r3, [r3, #1]
 800186e:	4618      	mov	r0, r3
 8001870:	f000 f8b4 	bl	80019dc <decodeASCII>
 8001874:	4603      	mov	r3, r0
 8001876:	2b01      	cmp	r3, #1
 8001878:	f040 8090 	bne.w	800199c <handleUART+0x218>
			readFlashManuSPI(&hspi2, huart, cs_spi2);
 800187c:	4b55      	ldr	r3, [pc, #340]	; (80019d4 <handleUART+0x250>)
 800187e:	cb0c      	ldmia	r3, {r2, r3}
 8001880:	6879      	ldr	r1, [r7, #4]
 8001882:	4851      	ldr	r0, [pc, #324]	; (80019c8 <handleUART+0x244>)
 8001884:	f000 f9ce 	bl	8001c24 <readFlashManuSPI>
 8001888:	e088      	b.n	800199c <handleUART+0x218>
		}
	}

	// Write a page over SPI (data_rx[0] = "w")
	else if (UARTRxData[0] == 0x77) {
 800188a:	4b4c      	ldr	r3, [pc, #304]	; (80019bc <handleUART+0x238>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b77      	cmp	r3, #119	; 0x77
 8001890:	d11d      	bne.n	80018ce <handleUART+0x14a>
		if(decodeASCII(UARTRxData[1]) == 0) {
 8001892:	4b4a      	ldr	r3, [pc, #296]	; (80019bc <handleUART+0x238>)
 8001894:	785b      	ldrb	r3, [r3, #1]
 8001896:	4618      	mov	r0, r3
 8001898:	f000 f8a0 	bl	80019dc <decodeASCII>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d106      	bne.n	80018b0 <handleUART+0x12c>
			writePageSPI_W(&hspi1, huart, cs_spi1);
 80018a2:	4b4b      	ldr	r3, [pc, #300]	; (80019d0 <handleUART+0x24c>)
 80018a4:	cb0c      	ldmia	r3, {r2, r3}
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	4848      	ldr	r0, [pc, #288]	; (80019cc <handleUART+0x248>)
 80018aa:	f000 f9db 	bl	8001c64 <writePageSPI_W>
 80018ae:	e075      	b.n	800199c <handleUART+0x218>
		} else if (decodeASCII(UARTRxData[1]) == 1) {
 80018b0:	4b42      	ldr	r3, [pc, #264]	; (80019bc <handleUART+0x238>)
 80018b2:	785b      	ldrb	r3, [r3, #1]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f000 f891 	bl	80019dc <decodeASCII>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d16d      	bne.n	800199c <handleUART+0x218>
			writePageSPI_W(&hspi2, huart, cs_spi2);
 80018c0:	4b44      	ldr	r3, [pc, #272]	; (80019d4 <handleUART+0x250>)
 80018c2:	cb0c      	ldmia	r3, {r2, r3}
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	4840      	ldr	r0, [pc, #256]	; (80019c8 <handleUART+0x244>)
 80018c8:	f000 f9cc 	bl	8001c64 <writePageSPI_W>
 80018cc:	e066      	b.n	800199c <handleUART+0x218>
		}
	}

	// Software reset flash chip over SPI (data_rx[0] = "x")
	else if (UARTRxData[0] == 0x78) {
 80018ce:	4b3b      	ldr	r3, [pc, #236]	; (80019bc <handleUART+0x238>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2b78      	cmp	r3, #120	; 0x78
 80018d4:	d11d      	bne.n	8001912 <handleUART+0x18e>
		if(decodeASCII(UARTRxData[1]) == 0) {
 80018d6:	4b39      	ldr	r3, [pc, #228]	; (80019bc <handleUART+0x238>)
 80018d8:	785b      	ldrb	r3, [r3, #1]
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 f87e 	bl	80019dc <decodeASCII>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d106      	bne.n	80018f4 <handleUART+0x170>
			resetSPIFlash(&hspi1, huart, cs_spi1);
 80018e6:	4b3a      	ldr	r3, [pc, #232]	; (80019d0 <handleUART+0x24c>)
 80018e8:	cb0c      	ldmia	r3, {r2, r3}
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	4837      	ldr	r0, [pc, #220]	; (80019cc <handleUART+0x248>)
 80018ee:	f000 fa0d 	bl	8001d0c <resetSPIFlash>
 80018f2:	e053      	b.n	800199c <handleUART+0x218>
		} else if (decodeASCII(UARTRxData[1]) == 1) {
 80018f4:	4b31      	ldr	r3, [pc, #196]	; (80019bc <handleUART+0x238>)
 80018f6:	785b      	ldrb	r3, [r3, #1]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f000 f86f 	bl	80019dc <decodeASCII>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b01      	cmp	r3, #1
 8001902:	d14b      	bne.n	800199c <handleUART+0x218>
			resetSPIFlash(&hspi2, huart, cs_spi2);
 8001904:	4b33      	ldr	r3, [pc, #204]	; (80019d4 <handleUART+0x250>)
 8001906:	cb0c      	ldmia	r3, {r2, r3}
 8001908:	6879      	ldr	r1, [r7, #4]
 800190a:	482f      	ldr	r0, [pc, #188]	; (80019c8 <handleUART+0x244>)
 800190c:	f000 f9fe 	bl	8001d0c <resetSPIFlash>
 8001910:	e044      	b.n	800199c <handleUART+0x218>
		}
	}

/*********************************** I2C Accelerometer ***********************************/
	// Read Accelerometer WhoAmI (data_rx[0] = "c")
	else if (UARTRxData[0] == 0x63) {
 8001912:	4b2a      	ldr	r3, [pc, #168]	; (80019bc <handleUART+0x238>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b63      	cmp	r3, #99	; 0x63
 8001918:	d106      	bne.n	8001928 <handleUART+0x1a4>
		checkAccelWhoAmI(i2c_accel, huart);
 800191a:	4b2a      	ldr	r3, [pc, #168]	; (80019c4 <handleUART+0x240>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	4618      	mov	r0, r3
 8001922:	f000 fa0b 	bl	8001d3c <checkAccelWhoAmI>
 8001926:	e039      	b.n	800199c <handleUART+0x218>
	}

	// Read the accelerometer and print to the UART[0] (data_rx [0] = "a")
	else if (UARTRxData[0] == 0x61) {
 8001928:	4b24      	ldr	r3, [pc, #144]	; (80019bc <handleUART+0x238>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b61      	cmp	r3, #97	; 0x61
 800192e:	d103      	bne.n	8001938 <handleUART+0x1b4>
		accelToUART(huart);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 fa17 	bl	8001d64 <accelToUART>
 8001936:	e031      	b.n	800199c <handleUART+0x218>
	}

/********************************** I2C BME280 *******************************************/
	// Read the temp sensor ID and print to the UART[0] (data_rx [0]= "b")
	else if (UARTRxData[0] == 0x62) {
 8001938:	4b20      	ldr	r3, [pc, #128]	; (80019bc <handleUART+0x238>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b62      	cmp	r3, #98	; 0x62
 800193e:	d10d      	bne.n	800195c <handleUART+0x1d8>
		readTempSensorID(i2c_bme280, huart, decodeASCII(UARTRxData[1]));
 8001940:	4b1f      	ldr	r3, [pc, #124]	; (80019c0 <handleUART+0x23c>)
 8001942:	681c      	ldr	r4, [r3, #0]
 8001944:	4b1d      	ldr	r3, [pc, #116]	; (80019bc <handleUART+0x238>)
 8001946:	785b      	ldrb	r3, [r3, #1]
 8001948:	4618      	mov	r0, r3
 800194a:	f000 f847 	bl	80019dc <decodeASCII>
 800194e:	4603      	mov	r3, r0
 8001950:	461a      	mov	r2, r3
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	4620      	mov	r0, r4
 8001956:	f000 fa21 	bl	8001d9c <readTempSensorID>
 800195a:	e01f      	b.n	800199c <handleUART+0x218>
	}

	// Read the temp sensor calibration registers and print to the UART (data_rx[0] = "p")
	else if (UARTRxData[0] == 0x70) {
 800195c:	4b17      	ldr	r3, [pc, #92]	; (80019bc <handleUART+0x238>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b70      	cmp	r3, #112	; 0x70
 8001962:	d10d      	bne.n	8001980 <handleUART+0x1fc>
		readTempCalibration(i2c_bme280, huart, decodeASCII(UARTRxData[1]));
 8001964:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <handleUART+0x23c>)
 8001966:	681c      	ldr	r4, [r3, #0]
 8001968:	4b14      	ldr	r3, [pc, #80]	; (80019bc <handleUART+0x238>)
 800196a:	785b      	ldrb	r3, [r3, #1]
 800196c:	4618      	mov	r0, r3
 800196e:	f000 f835 	bl	80019dc <decodeASCII>
 8001972:	4603      	mov	r3, r0
 8001974:	461a      	mov	r2, r3
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	4620      	mov	r0, r4
 800197a:	f000 fa24 	bl	8001dc6 <readTempCalibration>
 800197e:	e00d      	b.n	800199c <handleUART+0x218>
	}

	// Read the temp sensor and print to the UART[0] (data_rx [0]= "t")
	else if (UARTRxData[0] == 0x74) {
 8001980:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <handleUART+0x238>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b74      	cmp	r3, #116	; 0x74
 8001986:	d109      	bne.n	800199c <handleUART+0x218>
		readTempSensor(huart, decodeASCII(UARTRxData[1]));
 8001988:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <handleUART+0x238>)
 800198a:	785b      	ldrb	r3, [r3, #1]
 800198c:	4618      	mov	r0, r3
 800198e:	f000 f825 	bl	80019dc <decodeASCII>
 8001992:	4603      	mov	r3, r0
 8001994:	4619      	mov	r1, r3
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f000 fa6c 	bl	8001e74 <readTempSensor>
	}

	uart2_rec_flag = 0x00;
 800199c:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <handleUART+0x254>)
 800199e:	2200      	movs	r2, #0
 80019a0:	701a      	strb	r2, [r3, #0]
	UARTRxData[0] = 0x00;
 80019a2:	4b06      	ldr	r3, [pc, #24]	; (80019bc <handleUART+0x238>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	701a      	strb	r2, [r3, #0]
	UARTRxData[1] = 0x00;
 80019a8:	4b04      	ldr	r3, [pc, #16]	; (80019bc <handleUART+0x238>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	705a      	strb	r2, [r3, #1]
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd90      	pop	{r4, r7, pc}
 80019b6:	bf00      	nop
 80019b8:	200002f0 	.word	0x200002f0
 80019bc:	20000340 	.word	0x20000340
 80019c0:	2000033c 	.word	0x2000033c
 80019c4:	20000338 	.word	0x20000338
 80019c8:	20000190 	.word	0x20000190
 80019cc:	20000138 	.word	0x20000138
 80019d0:	20000578 	.word	0x20000578
 80019d4:	20000588 	.word	0x20000588
 80019d8:	20000342 	.word	0x20000342

080019dc <decodeASCII>:

uint8_t decodeASCII(uint8_t asciiVal) {
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	71fb      	strb	r3, [r7, #7]
	int returnVal = -1;
 80019e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019ea:	60fb      	str	r3, [r7, #12]
	if ((asciiVal >= 48) && (asciiVal <= 57)) {
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	2b2f      	cmp	r3, #47	; 0x2f
 80019f0:	d905      	bls.n	80019fe <decodeASCII+0x22>
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	2b39      	cmp	r3, #57	; 0x39
 80019f6:	d802      	bhi.n	80019fe <decodeASCII+0x22>
		returnVal = asciiVal - 48;
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	3b30      	subs	r3, #48	; 0x30
 80019fc:	60fb      	str	r3, [r7, #12]
	}
	return returnVal;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	b2db      	uxtb	r3, r3
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a12:	b672      	cpsid	i
}
 8001a14:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a16:	e7fe      	b.n	8001a16 <Error_Handler+0x8>

08001a18 <systemStatus>:

#include "peripheral_driver.h"
/***************************************************************************************************************
 * Generic Functions
 */
uint8_t systemStatus(SPI_HandleTypeDef *hspi1, SPI_HandleTypeDef *hspi2, I2C_HandleTypeDef* hi2c1, I2C_HandleTypeDef* hi2c2) {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
 8001a24:	603b      	str	r3, [r7, #0]
	uint8_t retVal = 0x00;
 8001a26:	2300      	movs	r3, #0
 8001a28:	75fb      	strb	r3, [r7, #23]

	// Check BME280_1
	if(readBME280_id_reg(hi2c1, 1) != 0x60) {			// Expected 0x60
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f7fe feb7 	bl	80007a0 <readBME280_id_reg>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b60      	cmp	r3, #96	; 0x60
 8001a36:	d003      	beq.n	8001a40 <systemStatus+0x28>
		retVal  = retVal | 0x10;
 8001a38:	7dfb      	ldrb	r3, [r7, #23]
 8001a3a:	f043 0310 	orr.w	r3, r3, #16
 8001a3e:	75fb      	strb	r3, [r7, #23]
	}

	// Check BME280_0
	if(readBME280_id_reg(hi2c1, 0) != 0x60) {			// Expected 0x60
 8001a40:	2100      	movs	r1, #0
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7fe feac 	bl	80007a0 <readBME280_id_reg>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b60      	cmp	r3, #96	; 0x60
 8001a4c:	d003      	beq.n	8001a56 <systemStatus+0x3e>
		retVal  = retVal | 0x08;
 8001a4e:	7dfb      	ldrb	r3, [r7, #23]
 8001a50:	f043 0308 	orr.w	r3, r3, #8
 8001a54:	75fb      	strb	r3, [r7, #23]
	}

	// Check Accelerometer
	if(readAccel_whoami(hi2c2) != 0xE5) {				// Expected 0xE5
 8001a56:	6838      	ldr	r0, [r7, #0]
 8001a58:	f7fe fdae 	bl	80005b8 <readAccel_whoami>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2be5      	cmp	r3, #229	; 0xe5
 8001a60:	d003      	beq.n	8001a6a <systemStatus+0x52>
		retVal  = retVal | 0x04;
 8001a62:	7dfb      	ldrb	r3, [r7, #23]
 8001a64:	f043 0304 	orr.w	r3, r3, #4
 8001a68:	75fb      	strb	r3, [r7, #23]
	}

	// Check SPIFlash_1
	uint8_t manu[2] = {0, 0};
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	82bb      	strh	r3, [r7, #20]
	read_manufacturer_id(manu, hspi2, cs_spi2);
 8001a6e:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <systemStatus+0x9c>)
 8001a70:	f107 0014 	add.w	r0, r7, #20
 8001a74:	cb0c      	ldmia	r3, {r2, r3}
 8001a76:	68b9      	ldr	r1, [r7, #8]
 8001a78:	f7ff f896 	bl	8000ba8 <read_manufacturer_id>
	if(manu[0] != 0xEF) {								// Expected 0xEF
 8001a7c:	7d3b      	ldrb	r3, [r7, #20]
 8001a7e:	2bef      	cmp	r3, #239	; 0xef
 8001a80:	d003      	beq.n	8001a8a <systemStatus+0x72>
		retVal  = retVal | 0x02;
 8001a82:	7dfb      	ldrb	r3, [r7, #23]
 8001a84:	f043 0302 	orr.w	r3, r3, #2
 8001a88:	75fb      	strb	r3, [r7, #23]
	}

	// Check SPIFlash_0
	uint8_t manu0[2] = {0, 0};
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	823b      	strh	r3, [r7, #16]
	read_manufacturer_id(manu0, hspi1, cs_spi1);
 8001a8e:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <systemStatus+0xa0>)
 8001a90:	f107 0010 	add.w	r0, r7, #16
 8001a94:	cb0c      	ldmia	r3, {r2, r3}
 8001a96:	68f9      	ldr	r1, [r7, #12]
 8001a98:	f7ff f886 	bl	8000ba8 <read_manufacturer_id>
	if(manu0[0] != 0xEF) {								// Expected 0xEF
 8001a9c:	7c3b      	ldrb	r3, [r7, #16]
 8001a9e:	2bef      	cmp	r3, #239	; 0xef
 8001aa0:	d003      	beq.n	8001aaa <systemStatus+0x92>
		retVal  = retVal | 0x01;
 8001aa2:	7dfb      	ldrb	r3, [r7, #23]
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	75fb      	strb	r3, [r7, #23]
	}
	return retVal;
 8001aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3718      	adds	r7, #24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20000588 	.word	0x20000588
 8001ab8:	20000578 	.word	0x20000578

08001abc <heartbeatUART>:

void heartbeatUART(UART_HandleTypeDef *huart) {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
	send_uart_hex(huart, 0x51);			// Transmit the heartbeat as device ID (0x51 = Q)
 8001ac4:	2151      	movs	r1, #81	; 0x51
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 ff8d 	bl	80029e6 <send_uart_hex>
}
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <eraseFlashSPI>:

/***************************************************************************************************************
 * SPI Flash Functions
 */
void eraseFlashSPI(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, GPIO_Config config) {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	4639      	mov	r1, r7
 8001ae0:	e881 000c 	stmia.w	r1, {r2, r3}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);		// Activate the "write out" LED
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	2180      	movs	r1, #128	; 0x80
 8001ae8:	4813      	ldr	r0, [pc, #76]	; (8001b38 <eraseFlashSPI+0x64>)
 8001aea:	f002 f825 	bl	8003b38 <HAL_GPIO_WritePin>
	if (erase_chip_spi(hspi, config) == HAL_OK) {
 8001aee:	463b      	mov	r3, r7
 8001af0:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f7fe ff0b 	bl	8000910 <erase_chip_spi>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d10d      	bne.n	8001b1c <eraseFlashSPI+0x48>
		send_uart_string(huart, "Successful Chip Erase\r\n");
 8001b00:	490e      	ldr	r1, [pc, #56]	; (8001b3c <eraseFlashSPI+0x68>)
 8001b02:	68b8      	ldr	r0, [r7, #8]
 8001b04:	f000 ff5b 	bl	80029be <send_uart_string>
		next_blank_page = find_next_blank_page(hspi, &end_of_flash, config);
 8001b08:	463b      	mov	r3, r7
 8001b0a:	cb0c      	ldmia	r3, {r2, r3}
 8001b0c:	490c      	ldr	r1, [pc, #48]	; (8001b40 <eraseFlashSPI+0x6c>)
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f7fe ff8c 	bl	8000a2c <find_next_blank_page>
 8001b14:	4603      	mov	r3, r0
 8001b16:	4a0b      	ldr	r2, [pc, #44]	; (8001b44 <eraseFlashSPI+0x70>)
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	e003      	b.n	8001b24 <eraseFlashSPI+0x50>
	} else {
		send_uart_string(huart, "Error during chip erase. Please check the connection and try again.\r\n");
 8001b1c:	490a      	ldr	r1, [pc, #40]	; (8001b48 <eraseFlashSPI+0x74>)
 8001b1e:	68b8      	ldr	r0, [r7, #8]
 8001b20:	f000 ff4d 	bl	80029be <send_uart_string>
	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);	// Deactivate the "write out" LED
 8001b24:	2200      	movs	r2, #0
 8001b26:	2180      	movs	r1, #128	; 0x80
 8001b28:	4803      	ldr	r0, [pc, #12]	; (8001b38 <eraseFlashSPI+0x64>)
 8001b2a:	f002 f805 	bl	8003b38 <HAL_GPIO_WritePin>
}
 8001b2e:	bf00      	nop
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40020400 	.word	0x40020400
 8001b3c:	08008470 	.word	0x08008470
 8001b40:	20000566 	.word	0x20000566
 8001b44:	20000560 	.word	0x20000560
 8001b48:	08008488 	.word	0x08008488

08001b4c <readFlashToUART>:

void readFlashToUART(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, GPIO_Config config) {
 8001b4c:	b590      	push	{r4, r7, lr}
 8001b4e:	b0cb      	sub	sp, #300	; 0x12c
 8001b50:	af02      	add	r7, sp, #8
 8001b52:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8001b56:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 8001b5a:	6020      	str	r0, [r4, #0]
 8001b5c:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8001b60:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 8001b64:	6001      	str	r1, [r0, #0]
 8001b66:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8001b6a:	f5a1 7190 	sub.w	r1, r1, #288	; 0x120
 8001b6e:	e881 000c 	stmia.w	r1, {r2, r3}
	uint32_t num_of_pages = next_blank_page;
 8001b72:	4b2a      	ldr	r3, [pc, #168]	; (8001c1c <readFlashToUART+0xd0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	if(num_of_pages == 0) {
 8001b7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d103      	bne.n	8001b8a <readFlashToUART+0x3e>
		num_of_pages = PAGE_SIZE;
 8001b82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b86:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	}
	num_of_pages = num_of_pages/PAGE_SIZE;
 8001b8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001b8e:	0a1b      	lsrs	r3, r3, #8
 8001b90:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	uint32_t address = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET);		// Activate the "write out" LED
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	2180      	movs	r1, #128	; 0x80
 8001b9e:	4820      	ldr	r0, [pc, #128]	; (8001c20 <readFlashToUART+0xd4>)
 8001ba0:	f001 ffca 	bl	8003b38 <HAL_GPIO_WritePin>

	for (int i = 0; i < (num_of_pages); i++) {
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001baa:	e026      	b.n	8001bfa <readFlashToUART+0xae>
		uint8_t page[PAGE_SIZE];
		read_page_spi(page, hspi, address, config);
 8001bac:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001bb0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001bb4:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001bb8:	f5a2 718a 	sub.w	r1, r2, #276	; 0x114
 8001bbc:	f107 0014 	add.w	r0, r7, #20
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	9200      	str	r2, [sp, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001bca:	6809      	ldr	r1, [r1, #0]
 8001bcc:	f7fe ffc6 	bl	8000b5c <read_page_spi>
		uart_transmit_page(huart, page);						// Transmit the data//
 8001bd0:	f107 0214 	add.w	r2, r7, #20
 8001bd4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001bd8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001bdc:	4611      	mov	r1, r2
 8001bde:	6818      	ldr	r0, [r3, #0]
 8001be0:	f000 fedc 	bl	800299c <uart_transmit_page>
		address += PAGE_SIZE;
 8001be4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001be8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001bec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	for (int i = 0; i < (num_of_pages); i++) {
 8001bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001bfe:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d8d2      	bhi.n	8001bac <readFlashToUART+0x60>
	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);	// Deactivate the "write out" LED
 8001c06:	2200      	movs	r2, #0
 8001c08:	2180      	movs	r1, #128	; 0x80
 8001c0a:	4805      	ldr	r0, [pc, #20]	; (8001c20 <readFlashToUART+0xd4>)
 8001c0c:	f001 ff94 	bl	8003b38 <HAL_GPIO_WritePin>
}
 8001c10:	bf00      	nop
 8001c12:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd90      	pop	{r4, r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000560 	.word	0x20000560
 8001c20:	40020400 	.word	0x40020400

08001c24 <readFlashManuSPI>:

void readFlashManuSPI(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, GPIO_Config config) {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	4639      	mov	r1, r7
 8001c30:	e881 000c 	stmia.w	r1, {r2, r3}
	uint8_t manu[2] = {0, 0};
 8001c34:	2300      	movs	r3, #0
 8001c36:	82bb      	strh	r3, [r7, #20]
	read_manufacturer_id(manu, hspi, config);
 8001c38:	f107 0014 	add.w	r0, r7, #20
 8001c3c:	463b      	mov	r3, r7
 8001c3e:	cb0c      	ldmia	r3, {r2, r3}
 8001c40:	68f9      	ldr	r1, [r7, #12]
 8001c42:	f7fe ffb1 	bl	8000ba8 <read_manufacturer_id>
	send_uart_hex(huart, manu[0]);
 8001c46:	7d3b      	ldrb	r3, [r7, #20]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	68b8      	ldr	r0, [r7, #8]
 8001c4c:	f000 fecb 	bl	80029e6 <send_uart_hex>
	send_uart_hex(huart, manu[1]);
 8001c50:	7d7b      	ldrb	r3, [r7, #21]
 8001c52:	4619      	mov	r1, r3
 8001c54:	68b8      	ldr	r0, [r7, #8]
 8001c56:	f000 fec6 	bl	80029e6 <send_uart_hex>
}
 8001c5a:	bf00      	nop
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
	...

08001c64 <writePageSPI_W>:

void writePageSPI_W(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, GPIO_Config config) {
 8001c64:	b590      	push	{r4, r7, lr}
 8001c66:	b0c9      	sub	sp, #292	; 0x124
 8001c68:	af02      	add	r7, sp, #8
 8001c6a:	f507 748c 	add.w	r4, r7, #280	; 0x118
 8001c6e:	f5a4 7486 	sub.w	r4, r4, #268	; 0x10c
 8001c72:	6020      	str	r0, [r4, #0]
 8001c74:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8001c78:	f5a0 7088 	sub.w	r0, r0, #272	; 0x110
 8001c7c:	6001      	str	r1, [r0, #0]
 8001c7e:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8001c82:	f5a1 718c 	sub.w	r1, r1, #280	; 0x118
 8001c86:	e881 000c 	stmia.w	r1, {r2, r3}
	uint8_t data_out[PAGE_SIZE];
	for (int i = 0; i < PAGE_SIZE; i++) {
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001c90:	e00d      	b.n	8001cae <writePageSPI_W+0x4a>
		data_out[i] = 0x77;		// Make all data in the page 'w'
 8001c92:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001c96:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 8001c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001c9e:	4413      	add	r3, r2
 8001ca0:	2277      	movs	r2, #119	; 0x77
 8001ca2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < PAGE_SIZE; i++) {
 8001ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001ca8:	3301      	adds	r3, #1
 8001caa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001cb2:	2bff      	cmp	r3, #255	; 0xff
 8001cb4:	dded      	ble.n	8001c92 <writePageSPI_W+0x2e>
	}
	write_data_spi_dma(data_out, hspi, next_blank_page, config);
 8001cb6:	4b13      	ldr	r3, [pc, #76]	; (8001d04 <writePageSPI_W+0xa0>)
 8001cb8:	681c      	ldr	r4, [r3, #0]
 8001cba:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001cbe:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001cc2:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001cc6:	f5a2 7186 	sub.w	r1, r2, #268	; 0x10c
 8001cca:	f107 0014 	add.w	r0, r7, #20
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	9200      	str	r2, [sp, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4622      	mov	r2, r4
 8001cd6:	6809      	ldr	r1, [r1, #0]
 8001cd8:	f7fe fe7a 	bl	80009d0 <write_data_spi_dma>
	next_blank_page += PAGE_SIZE;
 8001cdc:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <writePageSPI_W+0xa0>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001ce4:	4a07      	ldr	r2, [pc, #28]	; (8001d04 <writePageSPI_W+0xa0>)
 8001ce6:	6013      	str	r3, [r2, #0]

	send_uart_string(huart, "Successful Page Written\r\n");
 8001ce8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001cec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001cf0:	4905      	ldr	r1, [pc, #20]	; (8001d08 <writePageSPI_W+0xa4>)
 8001cf2:	6818      	ldr	r0, [r3, #0]
 8001cf4:	f000 fe63 	bl	80029be <send_uart_string>
}
 8001cf8:	bf00      	nop
 8001cfa:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd90      	pop	{r4, r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000560 	.word	0x20000560
 8001d08:	080084d0 	.word	0x080084d0

08001d0c <resetSPIFlash>:

void resetSPIFlash(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, GPIO_Config config) {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	4639      	mov	r1, r7
 8001d18:	e881 000c 	stmia.w	r1, {r2, r3}
	software_reset(hspi, config);
 8001d1c:	463b      	mov	r3, r7
 8001d1e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f7fe fe30 	bl	8000988 <software_reset>
	send_uart_string(huart, "Flash Chip Reset\r\n");
 8001d28:	4903      	ldr	r1, [pc, #12]	; (8001d38 <resetSPIFlash+0x2c>)
 8001d2a:	68b8      	ldr	r0, [r7, #8]
 8001d2c:	f000 fe47 	bl	80029be <send_uart_string>
}
 8001d30:	bf00      	nop
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	080084ec 	.word	0x080084ec

08001d3c <checkAccelWhoAmI>:

/***************************************************************************************************************
 * I2C Accelerometer Functions
 */
void checkAccelWhoAmI(I2C_HandleTypeDef* hi2c, UART_HandleTypeDef *huart) {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
	uint8_t whoami = readAccel_whoami(hi2c);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7fe fc36 	bl	80005b8 <readAccel_whoami>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	73fb      	strb	r3, [r7, #15]
	send_uart_hex(huart, whoami);
 8001d50:	7bfb      	ldrb	r3, [r7, #15]
 8001d52:	4619      	mov	r1, r3
 8001d54:	6838      	ldr	r0, [r7, #0]
 8001d56:	f000 fe46 	bl	80029e6 <send_uart_hex>
}
 8001d5a:	bf00      	nop
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
	...

08001d64 <accelToUART>:

void accelToUART(UART_HandleTypeDef *huart) {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 6; i++) {
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	e00a      	b.n	8001d88 <accelToUART+0x24>
		send_uart_hex(huart, accel_data[i]);
 8001d72:	4a09      	ldr	r2, [pc, #36]	; (8001d98 <accelToUART+0x34>)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4413      	add	r3, r2
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 fe32 	bl	80029e6 <send_uart_hex>
	for (int i = 0; i < 6; i++) {
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	3301      	adds	r3, #1
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2b05      	cmp	r3, #5
 8001d8c:	ddf1      	ble.n	8001d72 <accelToUART+0xe>
	}
}
 8001d8e:	bf00      	nop
 8001d90:	bf00      	nop
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20000548 	.word	0x20000548

08001d9c <readTempSensorID>:

/***************************************************************************************************************
 * I2C BME280 Sensor Functions
 */
void readTempSensorID(I2C_HandleTypeDef* hi2c, UART_HandleTypeDef *huart, uint8_t tempNo) {
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	4613      	mov	r3, r2
 8001da8:	71fb      	strb	r3, [r7, #7]
	send_uart_hex(huart, readBME280_id_reg(hi2c, tempNo));
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	4619      	mov	r1, r3
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f7fe fcf6 	bl	80007a0 <readBME280_id_reg>
 8001db4:	4603      	mov	r3, r0
 8001db6:	4619      	mov	r1, r3
 8001db8:	68b8      	ldr	r0, [r7, #8]
 8001dba:	f000 fe14 	bl	80029e6 <send_uart_hex>
}
 8001dbe:	bf00      	nop
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <readTempCalibration>:

void readTempCalibration(I2C_HandleTypeDef* hi2c, UART_HandleTypeDef *huart, uint8_t tempNo) {
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b090      	sub	sp, #64	; 0x40
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	60f8      	str	r0, [r7, #12]
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	71fb      	strb	r3, [r7, #7]
	uint8_t calibration1[25];
	uint8_t calibration2[7];

	for (uint8_t i = 0; i < CALIB_CNT_1; i++) {
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001dda:	e016      	b.n	8001e0a <readTempCalibration+0x44>
		calibration1[i] = 0x00;
 8001ddc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001de0:	3340      	adds	r3, #64	; 0x40
 8001de2:	443b      	add	r3, r7
 8001de4:	2200      	movs	r2, #0
 8001de6:	f803 2c28 	strb.w	r2, [r3, #-40]
		if (i < CALIB_CNT_2) {
 8001dea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001dee:	2b06      	cmp	r3, #6
 8001df0:	d806      	bhi.n	8001e00 <readTempCalibration+0x3a>
			calibration2[i] = 0x00;
 8001df2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001df6:	3340      	adds	r3, #64	; 0x40
 8001df8:	443b      	add	r3, r7
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (uint8_t i = 0; i < CALIB_CNT_1; i++) {
 8001e00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001e04:	3301      	adds	r3, #1
 8001e06:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001e0a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001e0e:	2b18      	cmp	r3, #24
 8001e10:	d9e4      	bls.n	8001ddc <readTempCalibration+0x16>
		}
	}

	readBME280_calib(hi2c, tempNo, calibration1, calibration2);
 8001e12:	f107 0310 	add.w	r3, r7, #16
 8001e16:	f107 0218 	add.w	r2, r7, #24
 8001e1a:	79f9      	ldrb	r1, [r7, #7]
 8001e1c:	68f8      	ldr	r0, [r7, #12]
 8001e1e:	f7fe fcdb 	bl	80007d8 <readBME280_calib>

	for (int i = 0; i < 25; i++) {
 8001e22:	2300      	movs	r3, #0
 8001e24:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e26:	e00b      	b.n	8001e40 <readTempCalibration+0x7a>
	  send_uart_hex(huart, calibration1[i]);
 8001e28:	f107 0218 	add.w	r2, r7, #24
 8001e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e2e:	4413      	add	r3, r2
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	4619      	mov	r1, r3
 8001e34:	68b8      	ldr	r0, [r7, #8]
 8001e36:	f000 fdd6 	bl	80029e6 <send_uart_hex>
	for (int i = 0; i < 25; i++) {
 8001e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e42:	2b18      	cmp	r3, #24
 8001e44:	ddf0      	ble.n	8001e28 <readTempCalibration+0x62>
	}

	for (int i = 0; i < 7; i++) {
 8001e46:	2300      	movs	r3, #0
 8001e48:	637b      	str	r3, [r7, #52]	; 0x34
 8001e4a:	e00b      	b.n	8001e64 <readTempCalibration+0x9e>
	  send_uart_hex(huart, calibration2[i]);
 8001e4c:	f107 0210 	add.w	r2, r7, #16
 8001e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e52:	4413      	add	r3, r2
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	4619      	mov	r1, r3
 8001e58:	68b8      	ldr	r0, [r7, #8]
 8001e5a:	f000 fdc4 	bl	80029e6 <send_uart_hex>
	for (int i = 0; i < 7; i++) {
 8001e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e60:	3301      	adds	r3, #1
 8001e62:	637b      	str	r3, [r7, #52]	; 0x34
 8001e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e66:	2b06      	cmp	r3, #6
 8001e68:	ddf0      	ble.n	8001e4c <readTempCalibration+0x86>
	}
}
 8001e6a:	bf00      	nop
 8001e6c:	bf00      	nop
 8001e6e:	3740      	adds	r7, #64	; 0x40
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <readTempSensor>:

void readTempSensor(UART_HandleTypeDef *huart, uint8_t tempNo) {
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	70fb      	strb	r3, [r7, #3]
	if (tempNo == 0) {
 8001e80:	78fb      	ldrb	r3, [r7, #3]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d111      	bne.n	8001eaa <readTempSensor+0x36>
		for (int i = 0; i < 6; i++) {
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	e00a      	b.n	8001ea2 <readTempSensor+0x2e>
			send_uart_hex(huart, bme280_data_1[i]);
 8001e8c:	4a13      	ldr	r2, [pc, #76]	; (8001edc <readTempSensor+0x68>)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	4413      	add	r3, r2
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	4619      	mov	r1, r3
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 fda5 	bl	80029e6 <send_uart_hex>
		for (int i = 0; i < 6; i++) {
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2b05      	cmp	r3, #5
 8001ea6:	ddf1      	ble.n	8001e8c <readTempSensor+0x18>
	} else if (tempNo == 1) {
		for (int i = 0; i < 6; i++) {
			send_uart_hex(huart, bme280_data_2[i]);
		}
	}
}
 8001ea8:	e013      	b.n	8001ed2 <readTempSensor+0x5e>
	} else if (tempNo == 1) {
 8001eaa:	78fb      	ldrb	r3, [r7, #3]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d110      	bne.n	8001ed2 <readTempSensor+0x5e>
		for (int i = 0; i < 6; i++) {
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	e00a      	b.n	8001ecc <readTempSensor+0x58>
			send_uart_hex(huart, bme280_data_2[i]);
 8001eb6:	4a0a      	ldr	r2, [pc, #40]	; (8001ee0 <readTempSensor+0x6c>)
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	4413      	add	r3, r2
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 fd90 	bl	80029e6 <send_uart_hex>
		for (int i = 0; i < 6; i++) {
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	60bb      	str	r3, [r7, #8]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	2b05      	cmp	r3, #5
 8001ed0:	ddf1      	ble.n	8001eb6 <readTempSensor+0x42>
}
 8001ed2:	bf00      	nop
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000550 	.word	0x20000550
 8001ee0:	20000558 	.word	0x20000558

08001ee4 <readAllSensors>:

/***************************************************************************************************************
 * Process All Sensors
 */
void readAllSensors(I2C_HandleTypeDef* hi2c_accel, I2C_HandleTypeDef* hi2c_temp, RTC_HandleTypeDef* hrtc) {
 8001ee4:	b590      	push	{r4, r7, lr}
 8001ee6:	b08b      	sub	sp, #44	; 0x2c
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
	// Read Accelerometer Data
	readAccelerometer(accel_data, hi2c_accel);
 8001ef0:	68f9      	ldr	r1, [r7, #12]
 8001ef2:	4855      	ldr	r0, [pc, #340]	; (8002048 <readAllSensors+0x164>)
 8001ef4:	f7fe fb3a 	bl	800056c <readAccelerometer>

	// Read BME280 Data
	readTempHumPres(bme280_data_1, hi2c_temp, 0);
 8001ef8:	2200      	movs	r2, #0
 8001efa:	68b9      	ldr	r1, [r7, #8]
 8001efc:	4853      	ldr	r0, [pc, #332]	; (800204c <readAllSensors+0x168>)
 8001efe:	f7fe fbf5 	bl	80006ec <readTempHumPres>
	readTempHumPres(bme280_data_2, hi2c_temp, 1);
 8001f02:	2201      	movs	r2, #1
 8001f04:	68b9      	ldr	r1, [r7, #8]
 8001f06:	4852      	ldr	r0, [pc, #328]	; (8002050 <readAllSensors+0x16c>)
 8001f08:	f7fe fbf0 	bl	80006ec <readTempHumPres>

	uint16_t time = getTimestampMilliseconds(hrtc);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f8c1 	bl	8002094 <getTimestampMilliseconds>
 8001f12:	4603      	mov	r3, r0
 8001f14:	82fb      	strh	r3, [r7, #22]
	uint8_t array_ptr = 0;
 8001f16:	2300      	movs	r3, #0
 8001f18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// Store the new read in the buffer if there is space
	if (byte_tracker < (PAGE_SIZE - READ_SIZE)) {
 8001f1c:	4b4d      	ldr	r3, [pc, #308]	; (8002054 <readAllSensors+0x170>)
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	2beb      	cmp	r3, #235	; 0xeb
 8001f22:	f200 808c 	bhi.w	800203e <readAllSensors+0x15a>
		data_buffer_tx[buffer_tracker][byte_tracker + 0] = (uint8_t) ((time >> 8) & 0xFF);
 8001f26:	8afb      	ldrh	r3, [r7, #22]
 8001f28:	0a1b      	lsrs	r3, r3, #8
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	4b4a      	ldr	r3, [pc, #296]	; (8002058 <readAllSensors+0x174>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	461c      	mov	r4, r3
 8001f32:	4b48      	ldr	r3, [pc, #288]	; (8002054 <readAllSensors+0x170>)
 8001f34:	881b      	ldrh	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	b2d1      	uxtb	r1, r2
 8001f3a:	4a48      	ldr	r2, [pc, #288]	; (800205c <readAllSensors+0x178>)
 8001f3c:	0223      	lsls	r3, r4, #8
 8001f3e:	4413      	add	r3, r2
 8001f40:	4403      	add	r3, r0
 8001f42:	460a      	mov	r2, r1
 8001f44:	701a      	strb	r2, [r3, #0]
		data_buffer_tx[buffer_tracker][byte_tracker + 1] = (uint8_t) (time & 0xFF); // Least significant byte (LSB)
 8001f46:	4b44      	ldr	r3, [pc, #272]	; (8002058 <readAllSensors+0x174>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	4b41      	ldr	r3, [pc, #260]	; (8002054 <readAllSensors+0x170>)
 8001f4e:	881b      	ldrh	r3, [r3, #0]
 8001f50:	3301      	adds	r3, #1
 8001f52:	8af9      	ldrh	r1, [r7, #22]
 8001f54:	b2c8      	uxtb	r0, r1
 8001f56:	4941      	ldr	r1, [pc, #260]	; (800205c <readAllSensors+0x178>)
 8001f58:	0212      	lsls	r2, r2, #8
 8001f5a:	440a      	add	r2, r1
 8001f5c:	4413      	add	r3, r2
 8001f5e:	4602      	mov	r2, r0
 8001f60:	701a      	strb	r2, [r3, #0]

		array_ptr += 2;
 8001f62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f66:	3302      	adds	r3, #2
 8001f68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for (int i = 0; i < 6; i++) {
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	623b      	str	r3, [r7, #32]
 8001f70:	e01a      	b.n	8001fa8 <readAllSensors+0xc4>
		  data_buffer_tx[buffer_tracker][byte_tracker + array_ptr] = accel_data[i];
 8001f72:	4b39      	ldr	r3, [pc, #228]	; (8002058 <readAllSensors+0x174>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	461c      	mov	r4, r3
 8001f78:	4b36      	ldr	r3, [pc, #216]	; (8002054 <readAllSensors+0x170>)
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f82:	4413      	add	r3, r2
 8001f84:	4930      	ldr	r1, [pc, #192]	; (8002048 <readAllSensors+0x164>)
 8001f86:	6a3a      	ldr	r2, [r7, #32]
 8001f88:	440a      	add	r2, r1
 8001f8a:	7810      	ldrb	r0, [r2, #0]
 8001f8c:	4933      	ldr	r1, [pc, #204]	; (800205c <readAllSensors+0x178>)
 8001f8e:	0222      	lsls	r2, r4, #8
 8001f90:	440a      	add	r2, r1
 8001f92:	4413      	add	r3, r2
 8001f94:	4602      	mov	r2, r0
 8001f96:	701a      	strb	r2, [r3, #0]
		  array_ptr += 1;
 8001f98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for (int i = 0; i < 6; i++) {
 8001fa2:	6a3b      	ldr	r3, [r7, #32]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	623b      	str	r3, [r7, #32]
 8001fa8:	6a3b      	ldr	r3, [r7, #32]
 8001faa:	2b05      	cmp	r3, #5
 8001fac:	dde1      	ble.n	8001f72 <readAllSensors+0x8e>
		}

		for (int i = 0; i < 6; i++) {
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61fb      	str	r3, [r7, #28]
 8001fb2:	e01a      	b.n	8001fea <readAllSensors+0x106>
		  data_buffer_tx[buffer_tracker][byte_tracker + array_ptr] = bme280_data_1[i];
 8001fb4:	4b28      	ldr	r3, [pc, #160]	; (8002058 <readAllSensors+0x174>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	461c      	mov	r4, r3
 8001fba:	4b26      	ldr	r3, [pc, #152]	; (8002054 <readAllSensors+0x170>)
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fc4:	4413      	add	r3, r2
 8001fc6:	4921      	ldr	r1, [pc, #132]	; (800204c <readAllSensors+0x168>)
 8001fc8:	69fa      	ldr	r2, [r7, #28]
 8001fca:	440a      	add	r2, r1
 8001fcc:	7810      	ldrb	r0, [r2, #0]
 8001fce:	4923      	ldr	r1, [pc, #140]	; (800205c <readAllSensors+0x178>)
 8001fd0:	0222      	lsls	r2, r4, #8
 8001fd2:	440a      	add	r2, r1
 8001fd4:	4413      	add	r3, r2
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	701a      	strb	r2, [r3, #0]
		  array_ptr += 1;
 8001fda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fde:	3301      	adds	r3, #1
 8001fe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for (int i = 0; i < 6; i++) {
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	61fb      	str	r3, [r7, #28]
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	2b05      	cmp	r3, #5
 8001fee:	dde1      	ble.n	8001fb4 <readAllSensors+0xd0>
		}

		for (int i = 0; i < 6; i++) {
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	61bb      	str	r3, [r7, #24]
 8001ff4:	e01a      	b.n	800202c <readAllSensors+0x148>
		  data_buffer_tx[buffer_tracker][byte_tracker + array_ptr] = bme280_data_2[i];
 8001ff6:	4b18      	ldr	r3, [pc, #96]	; (8002058 <readAllSensors+0x174>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	461c      	mov	r4, r3
 8001ffc:	4b15      	ldr	r3, [pc, #84]	; (8002054 <readAllSensors+0x170>)
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	461a      	mov	r2, r3
 8002002:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002006:	4413      	add	r3, r2
 8002008:	4911      	ldr	r1, [pc, #68]	; (8002050 <readAllSensors+0x16c>)
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	440a      	add	r2, r1
 800200e:	7810      	ldrb	r0, [r2, #0]
 8002010:	4912      	ldr	r1, [pc, #72]	; (800205c <readAllSensors+0x178>)
 8002012:	0222      	lsls	r2, r4, #8
 8002014:	440a      	add	r2, r1
 8002016:	4413      	add	r3, r2
 8002018:	4602      	mov	r2, r0
 800201a:	701a      	strb	r2, [r3, #0]
		  array_ptr += 1;
 800201c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002020:	3301      	adds	r3, #1
 8002022:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for (int i = 0; i < 6; i++) {
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	3301      	adds	r3, #1
 800202a:	61bb      	str	r3, [r7, #24]
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	2b05      	cmp	r3, #5
 8002030:	dde1      	ble.n	8001ff6 <readAllSensors+0x112>
		}

		byte_tracker = byte_tracker + READ_SIZE;
 8002032:	4b08      	ldr	r3, [pc, #32]	; (8002054 <readAllSensors+0x170>)
 8002034:	881b      	ldrh	r3, [r3, #0]
 8002036:	3314      	adds	r3, #20
 8002038:	b29a      	uxth	r2, r3
 800203a:	4b06      	ldr	r3, [pc, #24]	; (8002054 <readAllSensors+0x170>)
 800203c:	801a      	strh	r2, [r3, #0]
	}
}
 800203e:	bf00      	nop
 8002040:	372c      	adds	r7, #44	; 0x2c
 8002042:	46bd      	mov	sp, r7
 8002044:	bd90      	pop	{r4, r7, pc}
 8002046:	bf00      	nop
 8002048:	20000548 	.word	0x20000548
 800204c:	20000550 	.word	0x20000550
 8002050:	20000558 	.word	0x20000558
 8002054:	20000564 	.word	0x20000564
 8002058:	20000544 	.word	0x20000544
 800205c:	20000344 	.word	0x20000344

08002060 <initialise_rtc_default>:
    .Month = RTC_MONTH_JANUARY, // Set default month (e.g., January)
    .Date = 1, // Set default day of the month
    .Year = 24 // Set default year (e.g., 2021)
};

void initialise_rtc_default(RTC_HandleTypeDef* hrtc) {
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
	// Reset RTC on boot
	HAL_RTC_MspInit(hrtc); // Initialize RTC hardware
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 fa31 	bl	80024d0 <HAL_RTC_MspInit>
	HAL_RTC_SetTime(hrtc, &defaultTime, RTC_FORMAT_BIN); // Set default time
 800206e:	2200      	movs	r2, #0
 8002070:	4906      	ldr	r1, [pc, #24]	; (800208c <initialise_rtc_default+0x2c>)
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f003 fca5 	bl	80059c2 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(hrtc, &defaultDate, RTC_FORMAT_BIN); // Set default date
 8002078:	2200      	movs	r2, #0
 800207a:	4905      	ldr	r1, [pc, #20]	; (8002090 <initialise_rtc_default+0x30>)
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f003 fd98 	bl	8005bb2 <HAL_RTC_SetDate>
}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	200005a0 	.word	0x200005a0
 8002090:	20000018 	.word	0x20000018

08002094 <getTimestampMilliseconds>:

uint32_t getTimestampMilliseconds(RTC_HandleTypeDef* hrtc) {
 8002094:	b580      	push	{r7, lr}
 8002096:	b08c      	sub	sp, #48	; 0x30
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
    RTC_TimeTypeDef rtcTime;
    RTC_DateTypeDef rtcDate;

    // Read RTC time and date
    HAL_RTC_GetTime(hrtc, &rtcTime, RTC_FORMAT_BIN);
 800209c:	f107 0310 	add.w	r3, r7, #16
 80020a0:	2200      	movs	r2, #0
 80020a2:	4619      	mov	r1, r3
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f003 fd26 	bl	8005af6 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(hrtc, &rtcDate, RTC_FORMAT_BIN);
 80020aa:	f107 030c 	add.w	r3, r7, #12
 80020ae:	2200      	movs	r2, #0
 80020b0:	4619      	mov	r1, r3
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f003 fe01 	bl	8005cba <HAL_RTC_GetDate>

    // Calculate timestamp in milliseconds
    uint32_t timestampSeconds = rtcTime.Seconds + rtcTime.Minutes * 60 + rtcTime.Hours * 3600;
 80020b8:	7cbb      	ldrb	r3, [r7, #18]
 80020ba:	4619      	mov	r1, r3
 80020bc:	7c7b      	ldrb	r3, [r7, #17]
 80020be:	461a      	mov	r2, r3
 80020c0:	4613      	mov	r3, r2
 80020c2:	011b      	lsls	r3, r3, #4
 80020c4:	1a9b      	subs	r3, r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	18ca      	adds	r2, r1, r3
 80020ca:	7c3b      	ldrb	r3, [r7, #16]
 80020cc:	4619      	mov	r1, r3
 80020ce:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80020d2:	fb01 f303 	mul.w	r3, r1, r3
 80020d6:	4413      	add	r3, r2
 80020d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t timestampMilliseconds = timestampSeconds * 1000;
 80020da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020e0:	fb02 f303 	mul.w	r3, r2, r3
 80020e4:	62bb      	str	r3, [r7, #40]	; 0x28
    float subsecondsFraction = (float)(rtcTime.SecondFraction - rtcTime.SubSeconds) / (rtcTime.SecondFraction + 1);
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	ee07 3a90 	vmov	s15, r3
 80020f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	3301      	adds	r3, #1
 80020f8:	ee07 3a90 	vmov	s15, r3
 80020fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002100:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002104:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    timestampMilliseconds += subsecondsFraction * 1000;
 8002108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210a:	ee07 3a90 	vmov	s15, r3
 800210e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002112:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002116:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002138 <getTimestampMilliseconds+0xa4>
 800211a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800211e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002122:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002126:	ee17 3a90 	vmov	r3, s15
 800212a:	62bb      	str	r3, [r7, #40]	; 0x28

    return timestampMilliseconds;
 800212c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800212e:	4618      	mov	r0, r3
 8002130:	3730      	adds	r7, #48	; 0x30
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	447a0000 	.word	0x447a0000

0800213c <spi_sendOp_readByte>:
#ifndef SRC_SPI_DRIVER_C_
#define SRC_SPI_DRIVER_C_

#include "spi_driver.h"

HAL_StatusTypeDef spi_sendOp_readByte(uint8_t* opcode, SPI_HandleTypeDef *hspi, uint8_t* data_ptr, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
 8002148:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status;
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);	// Set the chip select pin to low to initiate SPI comms
 800214a:	8c3b      	ldrh	r3, [r7, #32]
 800214c:	2200      	movs	r2, #0
 800214e:	4619      	mov	r1, r3
 8002150:	6838      	ldr	r0, [r7, #0]
 8002152:	f001 fcf1 	bl	8003b38 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, opcode, 1, TIMEOUT_SML);			// Write the write enable value to the Flash to initial reading
 8002156:	2302      	movs	r3, #2
 8002158:	2201      	movs	r2, #1
 800215a:	68f9      	ldr	r1, [r7, #12]
 800215c:	68b8      	ldr	r0, [r7, #8]
 800215e:	f003 ff42 	bl	8005fe6 <HAL_SPI_Transmit>
	status = HAL_SPI_Receive(hspi, data_ptr, 1, TIMEOUT_SML);
 8002162:	2302      	movs	r3, #2
 8002164:	2201      	movs	r2, #1
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	68b8      	ldr	r0, [r7, #8]
 800216a:	f004 f87f 	bl	800626c <HAL_SPI_Receive>
 800216e:	4603      	mov	r3, r0
 8002170:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);
 8002172:	8c3b      	ldrh	r3, [r7, #32]
 8002174:	2201      	movs	r2, #1
 8002176:	4619      	mov	r1, r3
 8002178:	6838      	ldr	r0, [r7, #0]
 800217a:	f001 fcdd 	bl	8003b38 <HAL_GPIO_WritePin>
	return status;
 800217e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002180:	4618      	mov	r0, r3
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <perform_operation>:

HAL_StatusTypeDef perform_operation(uint8_t* opcode, SPI_HandleTypeDef *hspi, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
 8002194:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef status;
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);				// Set the chip select pin to low to initiate SPI comms
 8002196:	887b      	ldrh	r3, [r7, #2]
 8002198:	2200      	movs	r2, #0
 800219a:	4619      	mov	r1, r3
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f001 fccb 	bl	8003b38 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(hspi, opcode, 1, TIMEOUT_SML);				// Write the opcode value
 80021a2:	2302      	movs	r3, #2
 80021a4:	2201      	movs	r2, #1
 80021a6:	68f9      	ldr	r1, [r7, #12]
 80021a8:	68b8      	ldr	r0, [r7, #8]
 80021aa:	f003 ff1c 	bl	8005fe6 <HAL_SPI_Transmit>
 80021ae:	4603      	mov	r3, r0
 80021b0:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);
 80021b2:	887b      	ldrh	r3, [r7, #2]
 80021b4:	2201      	movs	r2, #1
 80021b6:	4619      	mov	r1, r3
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f001 fcbd 	bl	8003b38 <HAL_GPIO_WritePin>

	return status;
 80021be:	7dfb      	ldrb	r3, [r7, #23]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <spi_read_data>:

HAL_StatusTypeDef spi_read_data(uint8_t* opcode, uint16_t data_size, uint8_t data_read[data_size], SPI_HandleTypeDef *hspi, uint32_t addr, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	607a      	str	r2, [r7, #4]
 80021d2:	603b      	str	r3, [r7, #0]
 80021d4:	460b      	mov	r3, r1
 80021d6:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef status;

	// Split the 24 bit address into three 8 bit ints
	uint8_t addrL = addr & 0xFF;  // Get the low byte
 80021d8:	6a3b      	ldr	r3, [r7, #32]
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	75bb      	strb	r3, [r7, #22]
	uint8_t addrM = (addr >> 8) & 0xFF;  // Get the middle byte
 80021de:	6a3b      	ldr	r3, [r7, #32]
 80021e0:	0a1b      	lsrs	r3, r3, #8
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	757b      	strb	r3, [r7, #21]
	uint8_t addrH = (addr >> 16) & 0xFF;  // Get the high byte
 80021e6:	6a3b      	ldr	r3, [r7, #32]
 80021e8:	0c1b      	lsrs	r3, r3, #16
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	753b      	strb	r3, [r7, #20]

	// Read the data denoted by the given address
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);
 80021ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80021f0:	2200      	movs	r2, #0
 80021f2:	4619      	mov	r1, r3
 80021f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80021f6:	f001 fc9f 	bl	8003b38 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, opcode, 1, TIMEOUT_SML);	// Write the read enable value
 80021fa:	2302      	movs	r3, #2
 80021fc:	2201      	movs	r2, #1
 80021fe:	68f9      	ldr	r1, [r7, #12]
 8002200:	6838      	ldr	r0, [r7, #0]
 8002202:	f003 fef0 	bl	8005fe6 <HAL_SPI_Transmit>

	// Transmit the 24 bit address of the page to initialise read from
	HAL_SPI_Transmit(hspi, &addrH, 1, TIMEOUT_SML);
 8002206:	f107 0114 	add.w	r1, r7, #20
 800220a:	2302      	movs	r3, #2
 800220c:	2201      	movs	r2, #1
 800220e:	6838      	ldr	r0, [r7, #0]
 8002210:	f003 fee9 	bl	8005fe6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &addrM, 1, TIMEOUT_SML);
 8002214:	f107 0115 	add.w	r1, r7, #21
 8002218:	2302      	movs	r3, #2
 800221a:	2201      	movs	r2, #1
 800221c:	6838      	ldr	r0, [r7, #0]
 800221e:	f003 fee2 	bl	8005fe6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &addrL, 1, TIMEOUT_SML);
 8002222:	f107 0116 	add.w	r1, r7, #22
 8002226:	2302      	movs	r3, #2
 8002228:	2201      	movs	r2, #1
 800222a:	6838      	ldr	r0, [r7, #0]
 800222c:	f003 fedb 	bl	8005fe6 <HAL_SPI_Transmit>

	status = HAL_SPI_Receive(hspi, data_read, data_size, TIMEOUT_LRG);
 8002230:	897a      	ldrh	r2, [r7, #10]
 8002232:	2364      	movs	r3, #100	; 0x64
 8002234:	6879      	ldr	r1, [r7, #4]
 8002236:	6838      	ldr	r0, [r7, #0]
 8002238:	f004 f818 	bl	800626c <HAL_SPI_Receive>
 800223c:	4603      	mov	r3, r0
 800223e:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);
 8002240:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002242:	2201      	movs	r2, #1
 8002244:	4619      	mov	r1, r3
 8002246:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002248:	f001 fc76 	bl	8003b38 <HAL_GPIO_WritePin>

	return status;
 800224c:	7dfb      	ldrb	r3, [r7, #23]
}
 800224e:	4618      	mov	r0, r3
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <spi_write_data_dma>:
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);	// Set the chip select pin to high to remove the Flash from the SPI bus

	return status;
}

HAL_StatusTypeDef spi_write_data_dma(uint8_t* opcode, uint16_t data_size, uint8_t data_write[data_size], SPI_HandleTypeDef *hspi, uint32_t addr, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 8002256:	b580      	push	{r7, lr}
 8002258:	b086      	sub	sp, #24
 800225a:	af00      	add	r7, sp, #0
 800225c:	60f8      	str	r0, [r7, #12]
 800225e:	607a      	str	r2, [r7, #4]
 8002260:	603b      	str	r3, [r7, #0]
 8002262:	460b      	mov	r3, r1
 8002264:	817b      	strh	r3, [r7, #10]
    HAL_StatusTypeDef status;

    // Split the 24 bit address into three 8 bit ints
    uint8_t addrL = addr & 0xFF;  			// Get the low byte
 8002266:	6a3b      	ldr	r3, [r7, #32]
 8002268:	b2db      	uxtb	r3, r3
 800226a:	75bb      	strb	r3, [r7, #22]
    uint8_t addrM = (addr >> 8) & 0xFF;  	// Get the middle byte
 800226c:	6a3b      	ldr	r3, [r7, #32]
 800226e:	0a1b      	lsrs	r3, r3, #8
 8002270:	b2db      	uxtb	r3, r3
 8002272:	757b      	strb	r3, [r7, #21]
    uint8_t addrH = (addr >> 16) & 0xFF;  	// Get the high byte
 8002274:	6a3b      	ldr	r3, [r7, #32]
 8002276:	0c1b      	lsrs	r3, r3, #16
 8002278:	b2db      	uxtb	r3, r3
 800227a:	753b      	strb	r3, [r7, #20]

    // Send the PageWrite command
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);	// Set the chip select pin to low to initiate SPI comms
 800227c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800227e:	2200      	movs	r2, #0
 8002280:	4619      	mov	r1, r3
 8002282:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002284:	f001 fc58 	bl	8003b38 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(hspi, opcode, 1, TIMEOUT_SML);					// Write the write enable value to the Flash to initial writing
 8002288:	2302      	movs	r3, #2
 800228a:	2201      	movs	r2, #1
 800228c:	68f9      	ldr	r1, [r7, #12]
 800228e:	6838      	ldr	r0, [r7, #0]
 8002290:	f003 fea9 	bl	8005fe6 <HAL_SPI_Transmit>

    // Transmit the 24 bit address of the page to write to
    HAL_SPI_Transmit(hspi, &addrH, 1, TIMEOUT_SML);
 8002294:	f107 0114 	add.w	r1, r7, #20
 8002298:	2302      	movs	r3, #2
 800229a:	2201      	movs	r2, #1
 800229c:	6838      	ldr	r0, [r7, #0]
 800229e:	f003 fea2 	bl	8005fe6 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hspi, &addrM, 1, TIMEOUT_SML);
 80022a2:	f107 0115 	add.w	r1, r7, #21
 80022a6:	2302      	movs	r3, #2
 80022a8:	2201      	movs	r2, #1
 80022aa:	6838      	ldr	r0, [r7, #0]
 80022ac:	f003 fe9b 	bl	8005fe6 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hspi, &addrL, 1, TIMEOUT_SML);
 80022b0:	f107 0116 	add.w	r1, r7, #22
 80022b4:	2302      	movs	r3, #2
 80022b6:	2201      	movs	r2, #1
 80022b8:	6838      	ldr	r0, [r7, #0]
 80022ba:	f003 fe94 	bl	8005fe6 <HAL_SPI_Transmit>

    // Start the DMA transfer
    status = HAL_SPI_Transmit_DMA(hspi, data_write, data_size);
 80022be:	897b      	ldrh	r3, [r7, #10]
 80022c0:	461a      	mov	r2, r3
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	6838      	ldr	r0, [r7, #0]
 80022c6:	f004 fa99 	bl	80067fc <HAL_SPI_Transmit_DMA>
 80022ca:	4603      	mov	r3, r0
 80022cc:	75fb      	strb	r3, [r7, #23]

    return status;
 80022ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	607b      	str	r3, [r7, #4]
 80022e2:	4b10      	ldr	r3, [pc, #64]	; (8002324 <HAL_MspInit+0x4c>)
 80022e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e6:	4a0f      	ldr	r2, [pc, #60]	; (8002324 <HAL_MspInit+0x4c>)
 80022e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022ec:	6453      	str	r3, [r2, #68]	; 0x44
 80022ee:	4b0d      	ldr	r3, [pc, #52]	; (8002324 <HAL_MspInit+0x4c>)
 80022f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022f6:	607b      	str	r3, [r7, #4]
 80022f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	603b      	str	r3, [r7, #0]
 80022fe:	4b09      	ldr	r3, [pc, #36]	; (8002324 <HAL_MspInit+0x4c>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	4a08      	ldr	r2, [pc, #32]	; (8002324 <HAL_MspInit+0x4c>)
 8002304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002308:	6413      	str	r3, [r2, #64]	; 0x40
 800230a:	4b06      	ldr	r3, [pc, #24]	; (8002324 <HAL_MspInit+0x4c>)
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002312:	603b      	str	r3, [r7, #0]
 8002314:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	40023800 	.word	0x40023800

08002328 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08a      	sub	sp, #40	; 0x28
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002330:	f107 0314 	add.w	r3, r7, #20
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]
 800233e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a20      	ldr	r2, [pc, #128]	; (80023c8 <HAL_CAN_MspInit+0xa0>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d139      	bne.n	80023be <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	613b      	str	r3, [r7, #16]
 800234e:	4b1f      	ldr	r3, [pc, #124]	; (80023cc <HAL_CAN_MspInit+0xa4>)
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	4a1e      	ldr	r2, [pc, #120]	; (80023cc <HAL_CAN_MspInit+0xa4>)
 8002354:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002358:	6413      	str	r3, [r2, #64]	; 0x40
 800235a:	4b1c      	ldr	r3, [pc, #112]	; (80023cc <HAL_CAN_MspInit+0xa4>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002362:	613b      	str	r3, [r7, #16]
 8002364:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	4b18      	ldr	r3, [pc, #96]	; (80023cc <HAL_CAN_MspInit+0xa4>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	4a17      	ldr	r2, [pc, #92]	; (80023cc <HAL_CAN_MspInit+0xa4>)
 8002370:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002374:	6413      	str	r3, [r2, #64]	; 0x40
 8002376:	4b15      	ldr	r3, [pc, #84]	; (80023cc <HAL_CAN_MspInit+0xa4>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	60bb      	str	r3, [r7, #8]
 8002386:	4b11      	ldr	r3, [pc, #68]	; (80023cc <HAL_CAN_MspInit+0xa4>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	4a10      	ldr	r2, [pc, #64]	; (80023cc <HAL_CAN_MspInit+0xa4>)
 800238c:	f043 0302 	orr.w	r3, r3, #2
 8002390:	6313      	str	r3, [r2, #48]	; 0x30
 8002392:	4b0e      	ldr	r3, [pc, #56]	; (80023cc <HAL_CAN_MspInit+0xa4>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	60bb      	str	r3, [r7, #8]
 800239c:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB5     ------> CAN2_RX
    PB6     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800239e:	2360      	movs	r3, #96	; 0x60
 80023a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a2:	2302      	movs	r3, #2
 80023a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023aa:	2303      	movs	r3, #3
 80023ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80023ae:	2309      	movs	r3, #9
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023b2:	f107 0314 	add.w	r3, r7, #20
 80023b6:	4619      	mov	r1, r3
 80023b8:	4805      	ldr	r0, [pc, #20]	; (80023d0 <HAL_CAN_MspInit+0xa8>)
 80023ba:	f001 f9f9 	bl	80037b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80023be:	bf00      	nop
 80023c0:	3728      	adds	r7, #40	; 0x28
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40006800 	.word	0x40006800
 80023cc:	40023800 	.word	0x40023800
 80023d0:	40020400 	.word	0x40020400

080023d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08c      	sub	sp, #48	; 0x30
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023dc:	f107 031c 	add.w	r3, r7, #28
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	60da      	str	r2, [r3, #12]
 80023ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a33      	ldr	r2, [pc, #204]	; (80024c0 <HAL_I2C_MspInit+0xec>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d12d      	bne.n	8002452 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	61bb      	str	r3, [r7, #24]
 80023fa:	4b32      	ldr	r3, [pc, #200]	; (80024c4 <HAL_I2C_MspInit+0xf0>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	4a31      	ldr	r2, [pc, #196]	; (80024c4 <HAL_I2C_MspInit+0xf0>)
 8002400:	f043 0302 	orr.w	r3, r3, #2
 8002404:	6313      	str	r3, [r2, #48]	; 0x30
 8002406:	4b2f      	ldr	r3, [pc, #188]	; (80024c4 <HAL_I2C_MspInit+0xf0>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	61bb      	str	r3, [r7, #24]
 8002410:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002412:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002416:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002418:	2312      	movs	r3, #18
 800241a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241c:	2300      	movs	r3, #0
 800241e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002420:	2303      	movs	r3, #3
 8002422:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002424:	2304      	movs	r3, #4
 8002426:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002428:	f107 031c 	add.w	r3, r7, #28
 800242c:	4619      	mov	r1, r3
 800242e:	4826      	ldr	r0, [pc, #152]	; (80024c8 <HAL_I2C_MspInit+0xf4>)
 8002430:	f001 f9be 	bl	80037b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]
 8002438:	4b22      	ldr	r3, [pc, #136]	; (80024c4 <HAL_I2C_MspInit+0xf0>)
 800243a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243c:	4a21      	ldr	r2, [pc, #132]	; (80024c4 <HAL_I2C_MspInit+0xf0>)
 800243e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002442:	6413      	str	r3, [r2, #64]	; 0x40
 8002444:	4b1f      	ldr	r3, [pc, #124]	; (80024c4 <HAL_I2C_MspInit+0xf0>)
 8002446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800244c:	617b      	str	r3, [r7, #20]
 800244e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002450:	e031      	b.n	80024b6 <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a1d      	ldr	r2, [pc, #116]	; (80024cc <HAL_I2C_MspInit+0xf8>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d12c      	bne.n	80024b6 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800245c:	2300      	movs	r3, #0
 800245e:	613b      	str	r3, [r7, #16]
 8002460:	4b18      	ldr	r3, [pc, #96]	; (80024c4 <HAL_I2C_MspInit+0xf0>)
 8002462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002464:	4a17      	ldr	r2, [pc, #92]	; (80024c4 <HAL_I2C_MspInit+0xf0>)
 8002466:	f043 0302 	orr.w	r3, r3, #2
 800246a:	6313      	str	r3, [r2, #48]	; 0x30
 800246c:	4b15      	ldr	r3, [pc, #84]	; (80024c4 <HAL_I2C_MspInit+0xf0>)
 800246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	613b      	str	r3, [r7, #16]
 8002476:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002478:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800247c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800247e:	2312      	movs	r3, #18
 8002480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002482:	2300      	movs	r3, #0
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002486:	2303      	movs	r3, #3
 8002488:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800248a:	2304      	movs	r3, #4
 800248c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800248e:	f107 031c 	add.w	r3, r7, #28
 8002492:	4619      	mov	r1, r3
 8002494:	480c      	ldr	r0, [pc, #48]	; (80024c8 <HAL_I2C_MspInit+0xf4>)
 8002496:	f001 f98b 	bl	80037b0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <HAL_I2C_MspInit+0xf0>)
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	4a08      	ldr	r2, [pc, #32]	; (80024c4 <HAL_I2C_MspInit+0xf0>)
 80024a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024a8:	6413      	str	r3, [r2, #64]	; 0x40
 80024aa:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <HAL_I2C_MspInit+0xf0>)
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]
}
 80024b6:	bf00      	nop
 80024b8:	3730      	adds	r7, #48	; 0x30
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40005400 	.word	0x40005400
 80024c4:	40023800 	.word	0x40023800
 80024c8:	40020400 	.word	0x40020400
 80024cc:	40005800 	.word	0x40005800

080024d0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08e      	sub	sp, #56	; 0x38
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024d8:	f107 0308 	add.w	r3, r7, #8
 80024dc:	2230      	movs	r2, #48	; 0x30
 80024de:	2100      	movs	r1, #0
 80024e0:	4618      	mov	r0, r3
 80024e2:	f005 ff89 	bl	80083f8 <memset>
  if(hrtc->Instance==RTC)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a0c      	ldr	r2, [pc, #48]	; (800251c <HAL_RTC_MspInit+0x4c>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d111      	bne.n	8002514 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80024f0:	2320      	movs	r3, #32
 80024f2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80024f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024f8:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024fa:	f107 0308 	add.w	r3, r7, #8
 80024fe:	4618      	mov	r0, r3
 8002500:	f003 f81c 	bl	800553c <HAL_RCCEx_PeriphCLKConfig>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800250a:	f7ff fa80 	bl	8001a0e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800250e:	4b04      	ldr	r3, [pc, #16]	; (8002520 <HAL_RTC_MspInit+0x50>)
 8002510:	2201      	movs	r2, #1
 8002512:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002514:	bf00      	nop
 8002516:	3738      	adds	r7, #56	; 0x38
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40002800 	.word	0x40002800
 8002520:	42470e3c 	.word	0x42470e3c

08002524 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b08c      	sub	sp, #48	; 0x30
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800252c:	f107 031c 	add.w	r3, r7, #28
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	60da      	str	r2, [r3, #12]
 800253a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a6f      	ldr	r2, [pc, #444]	; (8002700 <HAL_SPI_MspInit+0x1dc>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d15b      	bne.n	80025fe <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	61bb      	str	r3, [r7, #24]
 800254a:	4b6e      	ldr	r3, [pc, #440]	; (8002704 <HAL_SPI_MspInit+0x1e0>)
 800254c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254e:	4a6d      	ldr	r2, [pc, #436]	; (8002704 <HAL_SPI_MspInit+0x1e0>)
 8002550:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002554:	6453      	str	r3, [r2, #68]	; 0x44
 8002556:	4b6b      	ldr	r3, [pc, #428]	; (8002704 <HAL_SPI_MspInit+0x1e0>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800255e:	61bb      	str	r3, [r7, #24]
 8002560:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	617b      	str	r3, [r7, #20]
 8002566:	4b67      	ldr	r3, [pc, #412]	; (8002704 <HAL_SPI_MspInit+0x1e0>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	4a66      	ldr	r2, [pc, #408]	; (8002704 <HAL_SPI_MspInit+0x1e0>)
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	6313      	str	r3, [r2, #48]	; 0x30
 8002572:	4b64      	ldr	r3, [pc, #400]	; (8002704 <HAL_SPI_MspInit+0x1e0>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	617b      	str	r3, [r7, #20]
 800257c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800257e:	23e0      	movs	r3, #224	; 0xe0
 8002580:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002582:	2302      	movs	r3, #2
 8002584:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002586:	2300      	movs	r3, #0
 8002588:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800258a:	2303      	movs	r3, #3
 800258c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800258e:	2305      	movs	r3, #5
 8002590:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002592:	f107 031c 	add.w	r3, r7, #28
 8002596:	4619      	mov	r1, r3
 8002598:	485b      	ldr	r0, [pc, #364]	; (8002708 <HAL_SPI_MspInit+0x1e4>)
 800259a:	f001 f909 	bl	80037b0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800259e:	4b5b      	ldr	r3, [pc, #364]	; (800270c <HAL_SPI_MspInit+0x1e8>)
 80025a0:	4a5b      	ldr	r2, [pc, #364]	; (8002710 <HAL_SPI_MspInit+0x1ec>)
 80025a2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80025a4:	4b59      	ldr	r3, [pc, #356]	; (800270c <HAL_SPI_MspInit+0x1e8>)
 80025a6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80025aa:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025ac:	4b57      	ldr	r3, [pc, #348]	; (800270c <HAL_SPI_MspInit+0x1e8>)
 80025ae:	2240      	movs	r2, #64	; 0x40
 80025b0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025b2:	4b56      	ldr	r3, [pc, #344]	; (800270c <HAL_SPI_MspInit+0x1e8>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025b8:	4b54      	ldr	r3, [pc, #336]	; (800270c <HAL_SPI_MspInit+0x1e8>)
 80025ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025be:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025c0:	4b52      	ldr	r3, [pc, #328]	; (800270c <HAL_SPI_MspInit+0x1e8>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025c6:	4b51      	ldr	r3, [pc, #324]	; (800270c <HAL_SPI_MspInit+0x1e8>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80025cc:	4b4f      	ldr	r3, [pc, #316]	; (800270c <HAL_SPI_MspInit+0x1e8>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80025d2:	4b4e      	ldr	r3, [pc, #312]	; (800270c <HAL_SPI_MspInit+0x1e8>)
 80025d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80025d8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025da:	4b4c      	ldr	r3, [pc, #304]	; (800270c <HAL_SPI_MspInit+0x1e8>)
 80025dc:	2200      	movs	r2, #0
 80025de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80025e0:	484a      	ldr	r0, [pc, #296]	; (800270c <HAL_SPI_MspInit+0x1e8>)
 80025e2:	f000 fce3 	bl	8002fac <HAL_DMA_Init>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80025ec:	f7ff fa0f 	bl	8001a0e <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a46      	ldr	r2, [pc, #280]	; (800270c <HAL_SPI_MspInit+0x1e8>)
 80025f4:	649a      	str	r2, [r3, #72]	; 0x48
 80025f6:	4a45      	ldr	r2, [pc, #276]	; (800270c <HAL_SPI_MspInit+0x1e8>)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80025fc:	e07b      	b.n	80026f6 <HAL_SPI_MspInit+0x1d2>
  else if(hspi->Instance==SPI2)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a44      	ldr	r2, [pc, #272]	; (8002714 <HAL_SPI_MspInit+0x1f0>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d176      	bne.n	80026f6 <HAL_SPI_MspInit+0x1d2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002608:	2300      	movs	r3, #0
 800260a:	613b      	str	r3, [r7, #16]
 800260c:	4b3d      	ldr	r3, [pc, #244]	; (8002704 <HAL_SPI_MspInit+0x1e0>)
 800260e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002610:	4a3c      	ldr	r2, [pc, #240]	; (8002704 <HAL_SPI_MspInit+0x1e0>)
 8002612:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002616:	6413      	str	r3, [r2, #64]	; 0x40
 8002618:	4b3a      	ldr	r3, [pc, #232]	; (8002704 <HAL_SPI_MspInit+0x1e0>)
 800261a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002620:	613b      	str	r3, [r7, #16]
 8002622:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002624:	2300      	movs	r3, #0
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	4b36      	ldr	r3, [pc, #216]	; (8002704 <HAL_SPI_MspInit+0x1e0>)
 800262a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262c:	4a35      	ldr	r2, [pc, #212]	; (8002704 <HAL_SPI_MspInit+0x1e0>)
 800262e:	f043 0304 	orr.w	r3, r3, #4
 8002632:	6313      	str	r3, [r2, #48]	; 0x30
 8002634:	4b33      	ldr	r3, [pc, #204]	; (8002704 <HAL_SPI_MspInit+0x1e0>)
 8002636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002640:	2300      	movs	r3, #0
 8002642:	60bb      	str	r3, [r7, #8]
 8002644:	4b2f      	ldr	r3, [pc, #188]	; (8002704 <HAL_SPI_MspInit+0x1e0>)
 8002646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002648:	4a2e      	ldr	r2, [pc, #184]	; (8002704 <HAL_SPI_MspInit+0x1e0>)
 800264a:	f043 0308 	orr.w	r3, r3, #8
 800264e:	6313      	str	r3, [r2, #48]	; 0x30
 8002650:	4b2c      	ldr	r3, [pc, #176]	; (8002704 <HAL_SPI_MspInit+0x1e0>)
 8002652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	60bb      	str	r3, [r7, #8]
 800265a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800265c:	230c      	movs	r3, #12
 800265e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002660:	2302      	movs	r3, #2
 8002662:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002664:	2300      	movs	r3, #0
 8002666:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002668:	2303      	movs	r3, #3
 800266a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800266c:	2305      	movs	r3, #5
 800266e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002670:	f107 031c 	add.w	r3, r7, #28
 8002674:	4619      	mov	r1, r3
 8002676:	4828      	ldr	r0, [pc, #160]	; (8002718 <HAL_SPI_MspInit+0x1f4>)
 8002678:	f001 f89a 	bl	80037b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800267c:	2308      	movs	r3, #8
 800267e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002680:	2302      	movs	r3, #2
 8002682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002684:	2300      	movs	r3, #0
 8002686:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002688:	2303      	movs	r3, #3
 800268a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800268c:	2305      	movs	r3, #5
 800268e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002690:	f107 031c 	add.w	r3, r7, #28
 8002694:	4619      	mov	r1, r3
 8002696:	4821      	ldr	r0, [pc, #132]	; (800271c <HAL_SPI_MspInit+0x1f8>)
 8002698:	f001 f88a 	bl	80037b0 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800269c:	4b20      	ldr	r3, [pc, #128]	; (8002720 <HAL_SPI_MspInit+0x1fc>)
 800269e:	4a21      	ldr	r2, [pc, #132]	; (8002724 <HAL_SPI_MspInit+0x200>)
 80026a0:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80026a2:	4b1f      	ldr	r3, [pc, #124]	; (8002720 <HAL_SPI_MspInit+0x1fc>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026a8:	4b1d      	ldr	r3, [pc, #116]	; (8002720 <HAL_SPI_MspInit+0x1fc>)
 80026aa:	2240      	movs	r2, #64	; 0x40
 80026ac:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026ae:	4b1c      	ldr	r3, [pc, #112]	; (8002720 <HAL_SPI_MspInit+0x1fc>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026b4:	4b1a      	ldr	r3, [pc, #104]	; (8002720 <HAL_SPI_MspInit+0x1fc>)
 80026b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026ba:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026bc:	4b18      	ldr	r3, [pc, #96]	; (8002720 <HAL_SPI_MspInit+0x1fc>)
 80026be:	2200      	movs	r2, #0
 80026c0:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026c2:	4b17      	ldr	r3, [pc, #92]	; (8002720 <HAL_SPI_MspInit+0x1fc>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80026c8:	4b15      	ldr	r3, [pc, #84]	; (8002720 <HAL_SPI_MspInit+0x1fc>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80026ce:	4b14      	ldr	r3, [pc, #80]	; (8002720 <HAL_SPI_MspInit+0x1fc>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026d4:	4b12      	ldr	r3, [pc, #72]	; (8002720 <HAL_SPI_MspInit+0x1fc>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80026da:	4811      	ldr	r0, [pc, #68]	; (8002720 <HAL_SPI_MspInit+0x1fc>)
 80026dc:	f000 fc66 	bl	8002fac <HAL_DMA_Init>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_SPI_MspInit+0x1c6>
      Error_Handler();
 80026e6:	f7ff f992 	bl	8001a0e <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a0c      	ldr	r2, [pc, #48]	; (8002720 <HAL_SPI_MspInit+0x1fc>)
 80026ee:	649a      	str	r2, [r3, #72]	; 0x48
 80026f0:	4a0b      	ldr	r2, [pc, #44]	; (8002720 <HAL_SPI_MspInit+0x1fc>)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80026f6:	bf00      	nop
 80026f8:	3730      	adds	r7, #48	; 0x30
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40013000 	.word	0x40013000
 8002704:	40023800 	.word	0x40023800
 8002708:	40020000 	.word	0x40020000
 800270c:	200001e8 	.word	0x200001e8
 8002710:	40026458 	.word	0x40026458
 8002714:	40003800 	.word	0x40003800
 8002718:	40020800 	.word	0x40020800
 800271c:	40020c00 	.word	0x40020c00
 8002720:	20000248 	.word	0x20000248
 8002724:	40026070 	.word	0x40026070

08002728 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a0e      	ldr	r2, [pc, #56]	; (8002770 <HAL_TIM_Base_MspInit+0x48>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d115      	bne.n	8002766 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800273a:	2300      	movs	r3, #0
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	4b0d      	ldr	r3, [pc, #52]	; (8002774 <HAL_TIM_Base_MspInit+0x4c>)
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	4a0c      	ldr	r2, [pc, #48]	; (8002774 <HAL_TIM_Base_MspInit+0x4c>)
 8002744:	f043 0310 	orr.w	r3, r3, #16
 8002748:	6413      	str	r3, [r2, #64]	; 0x40
 800274a:	4b0a      	ldr	r3, [pc, #40]	; (8002774 <HAL_TIM_Base_MspInit+0x4c>)
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	f003 0310 	and.w	r3, r3, #16
 8002752:	60fb      	str	r3, [r7, #12]
 8002754:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002756:	2200      	movs	r2, #0
 8002758:	2100      	movs	r1, #0
 800275a:	2036      	movs	r0, #54	; 0x36
 800275c:	f000 fbef 	bl	8002f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002760:	2036      	movs	r0, #54	; 0x36
 8002762:	f000 fc08 	bl	8002f76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002766:	bf00      	nop
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40001000 	.word	0x40001000
 8002774:	40023800 	.word	0x40023800

08002778 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b08a      	sub	sp, #40	; 0x28
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002780:	f107 0314 	add.w	r3, r7, #20
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	60da      	str	r2, [r3, #12]
 800278e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a1d      	ldr	r2, [pc, #116]	; (800280c <HAL_UART_MspInit+0x94>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d133      	bne.n	8002802 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	613b      	str	r3, [r7, #16]
 800279e:	4b1c      	ldr	r3, [pc, #112]	; (8002810 <HAL_UART_MspInit+0x98>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	4a1b      	ldr	r2, [pc, #108]	; (8002810 <HAL_UART_MspInit+0x98>)
 80027a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027a8:	6413      	str	r3, [r2, #64]	; 0x40
 80027aa:	4b19      	ldr	r3, [pc, #100]	; (8002810 <HAL_UART_MspInit+0x98>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b2:	613b      	str	r3, [r7, #16]
 80027b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	60fb      	str	r3, [r7, #12]
 80027ba:	4b15      	ldr	r3, [pc, #84]	; (8002810 <HAL_UART_MspInit+0x98>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	4a14      	ldr	r2, [pc, #80]	; (8002810 <HAL_UART_MspInit+0x98>)
 80027c0:	f043 0308 	orr.w	r3, r3, #8
 80027c4:	6313      	str	r3, [r2, #48]	; 0x30
 80027c6:	4b12      	ldr	r3, [pc, #72]	; (8002810 <HAL_UART_MspInit+0x98>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	f003 0308 	and.w	r3, r3, #8
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80027d2:	2360      	movs	r3, #96	; 0x60
 80027d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d6:	2302      	movs	r3, #2
 80027d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027de:	2303      	movs	r3, #3
 80027e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027e2:	2307      	movs	r3, #7
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027e6:	f107 0314 	add.w	r3, r7, #20
 80027ea:	4619      	mov	r1, r3
 80027ec:	4809      	ldr	r0, [pc, #36]	; (8002814 <HAL_UART_MspInit+0x9c>)
 80027ee:	f000 ffdf 	bl	80037b0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80027f2:	2200      	movs	r2, #0
 80027f4:	2100      	movs	r1, #0
 80027f6:	2026      	movs	r0, #38	; 0x26
 80027f8:	f000 fba1 	bl	8002f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80027fc:	2026      	movs	r0, #38	; 0x26
 80027fe:	f000 fbba 	bl	8002f76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002802:	bf00      	nop
 8002804:	3728      	adds	r7, #40	; 0x28
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40004400 	.word	0x40004400
 8002810:	40023800 	.word	0x40023800
 8002814:	40020c00 	.word	0x40020c00

08002818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800281c:	e7fe      	b.n	800281c <NMI_Handler+0x4>

0800281e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800281e:	b480      	push	{r7}
 8002820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002822:	e7fe      	b.n	8002822 <HardFault_Handler+0x4>

08002824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002828:	e7fe      	b.n	8002828 <MemManage_Handler+0x4>

0800282a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800282a:	b480      	push	{r7}
 800282c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800282e:	e7fe      	b.n	800282e <BusFault_Handler+0x4>

08002830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002834:	e7fe      	b.n	8002834 <UsageFault_Handler+0x4>

08002836 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002836:	b480      	push	{r7}
 8002838:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800283a:	bf00      	nop
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002848:	bf00      	nop
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002852:	b480      	push	{r7}
 8002854:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002864:	f000 f950 	bl	8002b08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002868:	bf00      	nop
 800286a:	bd80      	pop	{r7, pc}

0800286c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002870:	4802      	ldr	r0, [pc, #8]	; (800287c <DMA1_Stream4_IRQHandler+0x10>)
 8002872:	f000 fd33 	bl	80032dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002876:	bf00      	nop
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	20000248 	.word	0x20000248

08002880 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002884:	4802      	ldr	r0, [pc, #8]	; (8002890 <USART2_IRQHandler+0x10>)
 8002886:	f004 fe61 	bl	800754c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800288a:	bf00      	nop
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	200002f0 	.word	0x200002f0

08002894 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002898:	4803      	ldr	r0, [pc, #12]	; (80028a8 <TIM6_DAC_IRQHandler+0x14>)
 800289a:	f004 faf9 	bl	8006e90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  tim6_overflow_flag = 0x01;
 800289e:	4b03      	ldr	r3, [pc, #12]	; (80028ac <TIM6_DAC_IRQHandler+0x18>)
 80028a0:	2201      	movs	r2, #1
 80028a2:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80028a4:	bf00      	nop
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	200002a8 	.word	0x200002a8
 80028ac:	20000343 	.word	0x20000343

080028b0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80028b4:	4802      	ldr	r0, [pc, #8]	; (80028c0 <DMA2_Stream3_IRQHandler+0x10>)
 80028b6:	f000 fd11 	bl	80032dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	200001e8 	.word	0x200001e8

080028c4 <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
	// Pull CS pin high to deselect the device
    if (hspi->Instance == SPI1) {
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a18      	ldr	r2, [pc, #96]	; (8002934 <HAL_SPI_TxCpltCallback+0x70>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d108      	bne.n	80028e8 <HAL_SPI_TxCpltCallback+0x24>
        // Pull CS pin high for SPI1 to deselect the device
    	HAL_GPIO_WritePin(cs_spi1.GPIOx, cs_spi1.GPIO_Pin, GPIO_PIN_SET);
 80028d6:	4b18      	ldr	r3, [pc, #96]	; (8002938 <HAL_SPI_TxCpltCallback+0x74>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a17      	ldr	r2, [pc, #92]	; (8002938 <HAL_SPI_TxCpltCallback+0x74>)
 80028dc:	8891      	ldrh	r1, [r2, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	4618      	mov	r0, r3
 80028e2:	f001 f929 	bl	8003b38 <HAL_GPIO_WritePin>
 80028e6:	e00c      	b.n	8002902 <HAL_SPI_TxCpltCallback+0x3e>
    } else if (hspi->Instance == SPI2) {
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a13      	ldr	r2, [pc, #76]	; (800293c <HAL_SPI_TxCpltCallback+0x78>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d107      	bne.n	8002902 <HAL_SPI_TxCpltCallback+0x3e>
        // Pull CS pin high for SPI2 to deselect the device
    	HAL_GPIO_WritePin(cs_spi2.GPIOx, cs_spi2.GPIO_Pin, GPIO_PIN_SET);
 80028f2:	4b13      	ldr	r3, [pc, #76]	; (8002940 <HAL_SPI_TxCpltCallback+0x7c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a12      	ldr	r2, [pc, #72]	; (8002940 <HAL_SPI_TxCpltCallback+0x7c>)
 80028f8:	8891      	ldrh	r1, [r2, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	4618      	mov	r0, r3
 80028fe:	f001 f91b 	bl	8003b38 <HAL_GPIO_WritePin>
    }

    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 0202 	bic.w	r2, r2, #2
 8002910:	605a      	str	r2, [r3, #4]
    clean_data_buffer(PAGE_SIZE, data_buffer_tx[buffer_tracker ^ 0x01]);
 8002912:	4b0c      	ldr	r3, [pc, #48]	; (8002944 <HAL_SPI_TxCpltCallback+0x80>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	f083 0301 	eor.w	r3, r3, #1
 800291a:	b2db      	uxtb	r3, r3
 800291c:	021b      	lsls	r3, r3, #8
 800291e:	4a0a      	ldr	r2, [pc, #40]	; (8002948 <HAL_SPI_TxCpltCallback+0x84>)
 8002920:	4413      	add	r3, r2
 8002922:	4619      	mov	r1, r3
 8002924:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002928:	f7fe fdc8 	bl	80014bc <clean_data_buffer>
}
 800292c:	bf00      	nop
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40013000 	.word	0x40013000
 8002938:	20000578 	.word	0x20000578
 800293c:	40003800 	.word	0x40003800
 8002940:	20000588 	.word	0x20000588
 8002944:	20000544 	.word	0x20000544
 8002948:	20000344 	.word	0x20000344

0800294c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
	uart2_rec_flag = 0x01;
 8002954:	4b05      	ldr	r3, [pc, #20]	; (800296c <HAL_UART_RxCpltCallback+0x20>)
 8002956:	2201      	movs	r2, #1
 8002958:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, UARTRxData, 2);
 800295a:	2202      	movs	r2, #2
 800295c:	4904      	ldr	r1, [pc, #16]	; (8002970 <HAL_UART_RxCpltCallback+0x24>)
 800295e:	4805      	ldr	r0, [pc, #20]	; (8002974 <HAL_UART_RxCpltCallback+0x28>)
 8002960:	f004 fdcf 	bl	8007502 <HAL_UART_Receive_IT>
}
 8002964:	bf00      	nop
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	20000342 	.word	0x20000342
 8002970:	20000340 	.word	0x20000340
 8002974:	200002f0 	.word	0x200002f0

08002978 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800297c:	4b06      	ldr	r3, [pc, #24]	; (8002998 <SystemInit+0x20>)
 800297e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002982:	4a05      	ldr	r2, [pc, #20]	; (8002998 <SystemInit+0x20>)
 8002984:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002988:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800298c:	bf00      	nop
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	e000ed00 	.word	0xe000ed00

0800299c <uart_transmit_page>:

#include "uart_transmit.h"
/**
 * Transmit one single page over the UART interface
 */
void uart_transmit_page(UART_HandleTypeDef *huart, uint8_t page[PAGE_SIZE]) {
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huart, page, PAGE_SIZE, HAL_MAX_DELAY);
 80029a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029ae:	6839      	ldr	r1, [r7, #0]
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f004 fd1b 	bl	80073ec <HAL_UART_Transmit>
}
 80029b6:	bf00      	nop
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <send_uart_string>:

void send_uart_string(UART_HandleTypeDef *huart, const char *str) {
 80029be:	b580      	push	{r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
 80029c6:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 80029c8:	6838      	ldr	r0, [r7, #0]
 80029ca:	f7fd fc0f 	bl	80001ec <strlen>
 80029ce:	4603      	mov	r3, r0
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029d6:	6839      	ldr	r1, [r7, #0]
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f004 fd07 	bl	80073ec <HAL_UART_Transmit>
}
 80029de:	bf00      	nop
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <send_uart_hex>:
	// Call the send_uart_string function to send the value to UART
	send_uart_string(huart, value_str);
	send_uart_string(huart, "\r\n");
}

void send_uart_hex(UART_HandleTypeDef *huart, uint8_t value) {
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b084      	sub	sp, #16
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
 80029ee:	460b      	mov	r3, r1
 80029f0:	70fb      	strb	r3, [r7, #3]
	uint8_t buffer[1];
	buffer[0] = value;
 80029f2:	78fb      	ldrb	r3, [r7, #3]
 80029f4:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(huart, buffer, 1, HAL_MAX_DELAY);
 80029f6:	f107 010c 	add.w	r1, r7, #12
 80029fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029fe:	2201      	movs	r2, #1
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f004 fcf3 	bl	80073ec <HAL_UART_Transmit>
}
 8002a06:	bf00      	nop
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
	...

08002a10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002a10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a48 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002a14:	f7ff ffb0 	bl	8002978 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a18:	480c      	ldr	r0, [pc, #48]	; (8002a4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a1a:	490d      	ldr	r1, [pc, #52]	; (8002a50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a1c:	4a0d      	ldr	r2, [pc, #52]	; (8002a54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a20:	e002      	b.n	8002a28 <LoopCopyDataInit>

08002a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a26:	3304      	adds	r3, #4

08002a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a2c:	d3f9      	bcc.n	8002a22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a2e:	4a0a      	ldr	r2, [pc, #40]	; (8002a58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a30:	4c0a      	ldr	r4, [pc, #40]	; (8002a5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a34:	e001      	b.n	8002a3a <LoopFillZerobss>

08002a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a38:	3204      	adds	r2, #4

08002a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a3c:	d3fb      	bcc.n	8002a36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a3e:	f005 fce3 	bl	8008408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a42:	f7fe f96d 	bl	8000d20 <main>
  bx  lr    
 8002a46:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002a48:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a50:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8002a54:	08008530 	.word	0x08008530
  ldr r2, =_sbss
 8002a58:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8002a5c:	200005b8 	.word	0x200005b8

08002a60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a60:	e7fe      	b.n	8002a60 <ADC_IRQHandler>
	...

08002a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a68:	4b0e      	ldr	r3, [pc, #56]	; (8002aa4 <HAL_Init+0x40>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a0d      	ldr	r2, [pc, #52]	; (8002aa4 <HAL_Init+0x40>)
 8002a6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a74:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <HAL_Init+0x40>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a0a      	ldr	r2, [pc, #40]	; (8002aa4 <HAL_Init+0x40>)
 8002a7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a80:	4b08      	ldr	r3, [pc, #32]	; (8002aa4 <HAL_Init+0x40>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a07      	ldr	r2, [pc, #28]	; (8002aa4 <HAL_Init+0x40>)
 8002a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a8c:	2003      	movs	r0, #3
 8002a8e:	f000 fa4b 	bl	8002f28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a92:	200f      	movs	r0, #15
 8002a94:	f000 f808 	bl	8002aa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a98:	f7ff fc1e 	bl	80022d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40023c00 	.word	0x40023c00

08002aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ab0:	4b12      	ldr	r3, [pc, #72]	; (8002afc <HAL_InitTick+0x54>)
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	4b12      	ldr	r3, [pc, #72]	; (8002b00 <HAL_InitTick+0x58>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	4619      	mov	r1, r3
 8002aba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 fa63 	bl	8002f92 <HAL_SYSTICK_Config>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e00e      	b.n	8002af4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b0f      	cmp	r3, #15
 8002ada:	d80a      	bhi.n	8002af2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002adc:	2200      	movs	r2, #0
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ae4:	f000 fa2b 	bl	8002f3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ae8:	4a06      	ldr	r2, [pc, #24]	; (8002b04 <HAL_InitTick+0x5c>)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
 8002af0:	e000      	b.n	8002af4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	2000001c 	.word	0x2000001c
 8002b00:	20000024 	.word	0x20000024
 8002b04:	20000020 	.word	0x20000020

08002b08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b0c:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <HAL_IncTick+0x20>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	461a      	mov	r2, r3
 8002b12:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <HAL_IncTick+0x24>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4413      	add	r3, r2
 8002b18:	4a04      	ldr	r2, [pc, #16]	; (8002b2c <HAL_IncTick+0x24>)
 8002b1a:	6013      	str	r3, [r2, #0]
}
 8002b1c:	bf00      	nop
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	20000024 	.word	0x20000024
 8002b2c:	200005b4 	.word	0x200005b4

08002b30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  return uwTick;
 8002b34:	4b03      	ldr	r3, [pc, #12]	; (8002b44 <HAL_GetTick+0x14>)
 8002b36:	681b      	ldr	r3, [r3, #0]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	200005b4 	.word	0x200005b4

08002b48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b50:	f7ff ffee 	bl	8002b30 <HAL_GetTick>
 8002b54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b60:	d005      	beq.n	8002b6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b62:	4b0a      	ldr	r3, [pc, #40]	; (8002b8c <HAL_Delay+0x44>)
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	461a      	mov	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b6e:	bf00      	nop
 8002b70:	f7ff ffde 	bl	8002b30 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d8f7      	bhi.n	8002b70 <HAL_Delay+0x28>
  {
  }
}
 8002b80:	bf00      	nop
 8002b82:	bf00      	nop
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20000024 	.word	0x20000024

08002b90 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e0ed      	b.n	8002d7e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d102      	bne.n	8002bb4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7ff fbba 	bl	8002328 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f042 0201 	orr.w	r2, r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bc4:	f7ff ffb4 	bl	8002b30 <HAL_GetTick>
 8002bc8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002bca:	e012      	b.n	8002bf2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002bcc:	f7ff ffb0 	bl	8002b30 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b0a      	cmp	r3, #10
 8002bd8:	d90b      	bls.n	8002bf2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bde:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2205      	movs	r2, #5
 8002bea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e0c5      	b.n	8002d7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d0e5      	beq.n	8002bcc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 0202 	bic.w	r2, r2, #2
 8002c0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c10:	f7ff ff8e 	bl	8002b30 <HAL_GetTick>
 8002c14:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c16:	e012      	b.n	8002c3e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c18:	f7ff ff8a 	bl	8002b30 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b0a      	cmp	r3, #10
 8002c24:	d90b      	bls.n	8002c3e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2205      	movs	r2, #5
 8002c36:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e09f      	b.n	8002d7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1e5      	bne.n	8002c18 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	7e1b      	ldrb	r3, [r3, #24]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d108      	bne.n	8002c66 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	e007      	b.n	8002c76 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c74:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	7e5b      	ldrb	r3, [r3, #25]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d108      	bne.n	8002c90 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	e007      	b.n	8002ca0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	7e9b      	ldrb	r3, [r3, #26]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d108      	bne.n	8002cba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f042 0220 	orr.w	r2, r2, #32
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	e007      	b.n	8002cca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f022 0220 	bic.w	r2, r2, #32
 8002cc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	7edb      	ldrb	r3, [r3, #27]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d108      	bne.n	8002ce4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0210 	bic.w	r2, r2, #16
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	e007      	b.n	8002cf4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 0210 	orr.w	r2, r2, #16
 8002cf2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	7f1b      	ldrb	r3, [r3, #28]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d108      	bne.n	8002d0e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f042 0208 	orr.w	r2, r2, #8
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	e007      	b.n	8002d1e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0208 	bic.w	r2, r2, #8
 8002d1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	7f5b      	ldrb	r3, [r3, #29]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d108      	bne.n	8002d38 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f042 0204 	orr.w	r2, r2, #4
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	e007      	b.n	8002d48 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 0204 	bic.w	r2, r2, #4
 8002d46:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	431a      	orrs	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	ea42 0103 	orr.w	r1, r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	1e5a      	subs	r2, r3, #1
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
	...

08002d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d98:	4b0c      	ldr	r3, [pc, #48]	; (8002dcc <__NVIC_SetPriorityGrouping+0x44>)
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002da4:	4013      	ands	r3, r2
 8002da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002db0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dba:	4a04      	ldr	r2, [pc, #16]	; (8002dcc <__NVIC_SetPriorityGrouping+0x44>)
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	60d3      	str	r3, [r2, #12]
}
 8002dc0:	bf00      	nop
 8002dc2:	3714      	adds	r7, #20
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	e000ed00 	.word	0xe000ed00

08002dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dd4:	4b04      	ldr	r3, [pc, #16]	; (8002de8 <__NVIC_GetPriorityGrouping+0x18>)
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	0a1b      	lsrs	r3, r3, #8
 8002dda:	f003 0307 	and.w	r3, r3, #7
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	e000ed00 	.word	0xe000ed00

08002dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	4603      	mov	r3, r0
 8002df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	db0b      	blt.n	8002e16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dfe:	79fb      	ldrb	r3, [r7, #7]
 8002e00:	f003 021f 	and.w	r2, r3, #31
 8002e04:	4907      	ldr	r1, [pc, #28]	; (8002e24 <__NVIC_EnableIRQ+0x38>)
 8002e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0a:	095b      	lsrs	r3, r3, #5
 8002e0c:	2001      	movs	r0, #1
 8002e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	e000e100 	.word	0xe000e100

08002e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	6039      	str	r1, [r7, #0]
 8002e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	db0a      	blt.n	8002e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	b2da      	uxtb	r2, r3
 8002e40:	490c      	ldr	r1, [pc, #48]	; (8002e74 <__NVIC_SetPriority+0x4c>)
 8002e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e46:	0112      	lsls	r2, r2, #4
 8002e48:	b2d2      	uxtb	r2, r2
 8002e4a:	440b      	add	r3, r1
 8002e4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e50:	e00a      	b.n	8002e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	4908      	ldr	r1, [pc, #32]	; (8002e78 <__NVIC_SetPriority+0x50>)
 8002e58:	79fb      	ldrb	r3, [r7, #7]
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	3b04      	subs	r3, #4
 8002e60:	0112      	lsls	r2, r2, #4
 8002e62:	b2d2      	uxtb	r2, r2
 8002e64:	440b      	add	r3, r1
 8002e66:	761a      	strb	r2, [r3, #24]
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	e000e100 	.word	0xe000e100
 8002e78:	e000ed00 	.word	0xe000ed00

08002e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b089      	sub	sp, #36	; 0x24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	f1c3 0307 	rsb	r3, r3, #7
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	bf28      	it	cs
 8002e9a:	2304      	movcs	r3, #4
 8002e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	3304      	adds	r3, #4
 8002ea2:	2b06      	cmp	r3, #6
 8002ea4:	d902      	bls.n	8002eac <NVIC_EncodePriority+0x30>
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	3b03      	subs	r3, #3
 8002eaa:	e000      	b.n	8002eae <NVIC_EncodePriority+0x32>
 8002eac:	2300      	movs	r3, #0
 8002eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	43da      	mvns	r2, r3
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	401a      	ands	r2, r3
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ec4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	fa01 f303 	lsl.w	r3, r1, r3
 8002ece:	43d9      	mvns	r1, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed4:	4313      	orrs	r3, r2
         );
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3724      	adds	r7, #36	; 0x24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
	...

08002ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ef4:	d301      	bcc.n	8002efa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e00f      	b.n	8002f1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002efa:	4a0a      	ldr	r2, [pc, #40]	; (8002f24 <SysTick_Config+0x40>)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3b01      	subs	r3, #1
 8002f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f02:	210f      	movs	r1, #15
 8002f04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f08:	f7ff ff8e 	bl	8002e28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f0c:	4b05      	ldr	r3, [pc, #20]	; (8002f24 <SysTick_Config+0x40>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f12:	4b04      	ldr	r3, [pc, #16]	; (8002f24 <SysTick_Config+0x40>)
 8002f14:	2207      	movs	r2, #7
 8002f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	e000e010 	.word	0xe000e010

08002f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f7ff ff29 	bl	8002d88 <__NVIC_SetPriorityGrouping>
}
 8002f36:	bf00      	nop
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b086      	sub	sp, #24
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	4603      	mov	r3, r0
 8002f46:	60b9      	str	r1, [r7, #8]
 8002f48:	607a      	str	r2, [r7, #4]
 8002f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f50:	f7ff ff3e 	bl	8002dd0 <__NVIC_GetPriorityGrouping>
 8002f54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	68b9      	ldr	r1, [r7, #8]
 8002f5a:	6978      	ldr	r0, [r7, #20]
 8002f5c:	f7ff ff8e 	bl	8002e7c <NVIC_EncodePriority>
 8002f60:	4602      	mov	r2, r0
 8002f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f66:	4611      	mov	r1, r2
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff ff5d 	bl	8002e28 <__NVIC_SetPriority>
}
 8002f6e:	bf00      	nop
 8002f70:	3718      	adds	r7, #24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b082      	sub	sp, #8
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff ff31 	bl	8002dec <__NVIC_EnableIRQ>
}
 8002f8a:	bf00      	nop
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b082      	sub	sp, #8
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7ff ffa2 	bl	8002ee4 <SysTick_Config>
 8002fa0:	4603      	mov	r3, r0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
	...

08002fac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002fb8:	f7ff fdba 	bl	8002b30 <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e099      	b.n	80030fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2202      	movs	r2, #2
 8002fcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 0201 	bic.w	r2, r2, #1
 8002fe6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fe8:	e00f      	b.n	800300a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fea:	f7ff fda1 	bl	8002b30 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b05      	cmp	r3, #5
 8002ff6:	d908      	bls.n	800300a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2203      	movs	r2, #3
 8003002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e078      	b.n	80030fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1e8      	bne.n	8002fea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	4b38      	ldr	r3, [pc, #224]	; (8003104 <HAL_DMA_Init+0x158>)
 8003024:	4013      	ands	r3, r2
 8003026:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003036:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003042:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800304e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	4313      	orrs	r3, r2
 800305a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	2b04      	cmp	r3, #4
 8003062:	d107      	bne.n	8003074 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306c:	4313      	orrs	r3, r2
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	4313      	orrs	r3, r2
 8003072:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	f023 0307 	bic.w	r3, r3, #7
 800308a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	4313      	orrs	r3, r2
 8003094:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	2b04      	cmp	r3, #4
 800309c:	d117      	bne.n	80030ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00e      	beq.n	80030ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 fb01 	bl	80036b8 <DMA_CheckFifoParam>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d008      	beq.n	80030ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2240      	movs	r2, #64	; 0x40
 80030c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80030ca:	2301      	movs	r3, #1
 80030cc:	e016      	b.n	80030fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 fab8 	bl	800364c <DMA_CalcBaseAndBitshift>
 80030dc:	4603      	mov	r3, r0
 80030de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e4:	223f      	movs	r2, #63	; 0x3f
 80030e6:	409a      	lsls	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3718      	adds	r7, #24
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	f010803f 	.word	0xf010803f

08003108 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
 8003114:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003116:	2300      	movs	r3, #0
 8003118:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003126:	2b01      	cmp	r3, #1
 8003128:	d101      	bne.n	800312e <HAL_DMA_Start_IT+0x26>
 800312a:	2302      	movs	r3, #2
 800312c:	e040      	b.n	80031b0 <HAL_DMA_Start_IT+0xa8>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b01      	cmp	r3, #1
 8003140:	d12f      	bne.n	80031a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2202      	movs	r2, #2
 8003146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	68b9      	ldr	r1, [r7, #8]
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 fa4a 	bl	80035f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003160:	223f      	movs	r2, #63	; 0x3f
 8003162:	409a      	lsls	r2, r3
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0216 	orr.w	r2, r2, #22
 8003176:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317c:	2b00      	cmp	r3, #0
 800317e:	d007      	beq.n	8003190 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0208 	orr.w	r2, r2, #8
 800318e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 0201 	orr.w	r2, r2, #1
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	e005      	b.n	80031ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031aa:	2302      	movs	r3, #2
 80031ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80031ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80031c6:	f7ff fcb3 	bl	8002b30 <HAL_GetTick>
 80031ca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d008      	beq.n	80031ea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2280      	movs	r2, #128	; 0x80
 80031dc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e052      	b.n	8003290 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0216 	bic.w	r2, r2, #22
 80031f8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	695a      	ldr	r2, [r3, #20]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003208:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	2b00      	cmp	r3, #0
 8003210:	d103      	bne.n	800321a <HAL_DMA_Abort+0x62>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003216:	2b00      	cmp	r3, #0
 8003218:	d007      	beq.n	800322a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0208 	bic.w	r2, r2, #8
 8003228:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0201 	bic.w	r2, r2, #1
 8003238:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800323a:	e013      	b.n	8003264 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800323c:	f7ff fc78 	bl	8002b30 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b05      	cmp	r3, #5
 8003248:	d90c      	bls.n	8003264 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2220      	movs	r2, #32
 800324e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2203      	movs	r2, #3
 8003254:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e015      	b.n	8003290 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1e4      	bne.n	800323c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003276:	223f      	movs	r2, #63	; 0x3f
 8003278:	409a      	lsls	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d004      	beq.n	80032b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2280      	movs	r2, #128	; 0x80
 80032b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e00c      	b.n	80032d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2205      	movs	r2, #5
 80032ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 0201 	bic.w	r2, r2, #1
 80032cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80032e8:	4b8e      	ldr	r3, [pc, #568]	; (8003524 <HAL_DMA_IRQHandler+0x248>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a8e      	ldr	r2, [pc, #568]	; (8003528 <HAL_DMA_IRQHandler+0x24c>)
 80032ee:	fba2 2303 	umull	r2, r3, r2, r3
 80032f2:	0a9b      	lsrs	r3, r3, #10
 80032f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003306:	2208      	movs	r2, #8
 8003308:	409a      	lsls	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	4013      	ands	r3, r2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d01a      	beq.n	8003348 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	d013      	beq.n	8003348 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 0204 	bic.w	r2, r2, #4
 800332e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003334:	2208      	movs	r2, #8
 8003336:	409a      	lsls	r2, r3
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003340:	f043 0201 	orr.w	r2, r3, #1
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800334c:	2201      	movs	r2, #1
 800334e:	409a      	lsls	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4013      	ands	r3, r2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d012      	beq.n	800337e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00b      	beq.n	800337e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800336a:	2201      	movs	r2, #1
 800336c:	409a      	lsls	r2, r3
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003376:	f043 0202 	orr.w	r2, r3, #2
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003382:	2204      	movs	r2, #4
 8003384:	409a      	lsls	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	4013      	ands	r3, r2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d012      	beq.n	80033b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00b      	beq.n	80033b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a0:	2204      	movs	r2, #4
 80033a2:	409a      	lsls	r2, r3
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ac:	f043 0204 	orr.w	r2, r3, #4
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b8:	2210      	movs	r2, #16
 80033ba:	409a      	lsls	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4013      	ands	r3, r2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d043      	beq.n	800344c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0308 	and.w	r3, r3, #8
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d03c      	beq.n	800344c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d6:	2210      	movs	r2, #16
 80033d8:	409a      	lsls	r2, r3
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d018      	beq.n	800341e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d108      	bne.n	800340c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d024      	beq.n	800344c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	4798      	blx	r3
 800340a:	e01f      	b.n	800344c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003410:	2b00      	cmp	r3, #0
 8003412:	d01b      	beq.n	800344c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	4798      	blx	r3
 800341c:	e016      	b.n	800344c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003428:	2b00      	cmp	r3, #0
 800342a:	d107      	bne.n	800343c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0208 	bic.w	r2, r2, #8
 800343a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	2b00      	cmp	r3, #0
 8003442:	d003      	beq.n	800344c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003450:	2220      	movs	r2, #32
 8003452:	409a      	lsls	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4013      	ands	r3, r2
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 808f 	beq.w	800357c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0310 	and.w	r3, r3, #16
 8003468:	2b00      	cmp	r3, #0
 800346a:	f000 8087 	beq.w	800357c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003472:	2220      	movs	r2, #32
 8003474:	409a      	lsls	r2, r3
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b05      	cmp	r3, #5
 8003484:	d136      	bne.n	80034f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 0216 	bic.w	r2, r2, #22
 8003494:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	695a      	ldr	r2, [r3, #20]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d103      	bne.n	80034b6 <HAL_DMA_IRQHandler+0x1da>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d007      	beq.n	80034c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0208 	bic.w	r2, r2, #8
 80034c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ca:	223f      	movs	r2, #63	; 0x3f
 80034cc:	409a      	lsls	r2, r3
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d07e      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	4798      	blx	r3
        }
        return;
 80034f2:	e079      	b.n	80035e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d01d      	beq.n	800353e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10d      	bne.n	800352c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003514:	2b00      	cmp	r3, #0
 8003516:	d031      	beq.n	800357c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	4798      	blx	r3
 8003520:	e02c      	b.n	800357c <HAL_DMA_IRQHandler+0x2a0>
 8003522:	bf00      	nop
 8003524:	2000001c 	.word	0x2000001c
 8003528:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003530:	2b00      	cmp	r3, #0
 8003532:	d023      	beq.n	800357c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	4798      	blx	r3
 800353c:	e01e      	b.n	800357c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10f      	bne.n	800356c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f022 0210 	bic.w	r2, r2, #16
 800355a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003580:	2b00      	cmp	r3, #0
 8003582:	d032      	beq.n	80035ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	2b00      	cmp	r3, #0
 800358e:	d022      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2205      	movs	r2, #5
 8003594:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 0201 	bic.w	r2, r2, #1
 80035a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	3301      	adds	r3, #1
 80035ac:	60bb      	str	r3, [r7, #8]
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d307      	bcc.n	80035c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1f2      	bne.n	80035a8 <HAL_DMA_IRQHandler+0x2cc>
 80035c2:	e000      	b.n	80035c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80035c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d005      	beq.n	80035ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	4798      	blx	r3
 80035e6:	e000      	b.n	80035ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80035e8:	bf00      	nop
    }
  }
}
 80035ea:	3718      	adds	r7, #24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
 80035fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800360c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	2b40      	cmp	r3, #64	; 0x40
 800361c:	d108      	bne.n	8003630 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800362e:	e007      	b.n	8003640 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68ba      	ldr	r2, [r7, #8]
 8003636:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	60da      	str	r2, [r3, #12]
}
 8003640:	bf00      	nop
 8003642:	3714      	adds	r7, #20
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	b2db      	uxtb	r3, r3
 800365a:	3b10      	subs	r3, #16
 800365c:	4a14      	ldr	r2, [pc, #80]	; (80036b0 <DMA_CalcBaseAndBitshift+0x64>)
 800365e:	fba2 2303 	umull	r2, r3, r2, r3
 8003662:	091b      	lsrs	r3, r3, #4
 8003664:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003666:	4a13      	ldr	r2, [pc, #76]	; (80036b4 <DMA_CalcBaseAndBitshift+0x68>)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4413      	add	r3, r2
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	461a      	mov	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2b03      	cmp	r3, #3
 8003678:	d909      	bls.n	800368e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003682:	f023 0303 	bic.w	r3, r3, #3
 8003686:	1d1a      	adds	r2, r3, #4
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	659a      	str	r2, [r3, #88]	; 0x58
 800368c:	e007      	b.n	800369e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003696:	f023 0303 	bic.w	r3, r3, #3
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	aaaaaaab 	.word	0xaaaaaaab
 80036b4:	08008518 	.word	0x08008518

080036b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036c0:	2300      	movs	r3, #0
 80036c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d11f      	bne.n	8003712 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	2b03      	cmp	r3, #3
 80036d6:	d856      	bhi.n	8003786 <DMA_CheckFifoParam+0xce>
 80036d8:	a201      	add	r2, pc, #4	; (adr r2, 80036e0 <DMA_CheckFifoParam+0x28>)
 80036da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036de:	bf00      	nop
 80036e0:	080036f1 	.word	0x080036f1
 80036e4:	08003703 	.word	0x08003703
 80036e8:	080036f1 	.word	0x080036f1
 80036ec:	08003787 	.word	0x08003787
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d046      	beq.n	800378a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003700:	e043      	b.n	800378a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003706:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800370a:	d140      	bne.n	800378e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003710:	e03d      	b.n	800378e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800371a:	d121      	bne.n	8003760 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	2b03      	cmp	r3, #3
 8003720:	d837      	bhi.n	8003792 <DMA_CheckFifoParam+0xda>
 8003722:	a201      	add	r2, pc, #4	; (adr r2, 8003728 <DMA_CheckFifoParam+0x70>)
 8003724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003728:	08003739 	.word	0x08003739
 800372c:	0800373f 	.word	0x0800373f
 8003730:	08003739 	.word	0x08003739
 8003734:	08003751 	.word	0x08003751
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	73fb      	strb	r3, [r7, #15]
      break;
 800373c:	e030      	b.n	80037a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003742:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d025      	beq.n	8003796 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800374e:	e022      	b.n	8003796 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003754:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003758:	d11f      	bne.n	800379a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800375e:	e01c      	b.n	800379a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	2b02      	cmp	r3, #2
 8003764:	d903      	bls.n	800376e <DMA_CheckFifoParam+0xb6>
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2b03      	cmp	r3, #3
 800376a:	d003      	beq.n	8003774 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800376c:	e018      	b.n	80037a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	73fb      	strb	r3, [r7, #15]
      break;
 8003772:	e015      	b.n	80037a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003778:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00e      	beq.n	800379e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	73fb      	strb	r3, [r7, #15]
      break;
 8003784:	e00b      	b.n	800379e <DMA_CheckFifoParam+0xe6>
      break;
 8003786:	bf00      	nop
 8003788:	e00a      	b.n	80037a0 <DMA_CheckFifoParam+0xe8>
      break;
 800378a:	bf00      	nop
 800378c:	e008      	b.n	80037a0 <DMA_CheckFifoParam+0xe8>
      break;
 800378e:	bf00      	nop
 8003790:	e006      	b.n	80037a0 <DMA_CheckFifoParam+0xe8>
      break;
 8003792:	bf00      	nop
 8003794:	e004      	b.n	80037a0 <DMA_CheckFifoParam+0xe8>
      break;
 8003796:	bf00      	nop
 8003798:	e002      	b.n	80037a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800379a:	bf00      	nop
 800379c:	e000      	b.n	80037a0 <DMA_CheckFifoParam+0xe8>
      break;
 800379e:	bf00      	nop
    }
  } 
  
  return status; 
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop

080037b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b089      	sub	sp, #36	; 0x24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037ba:	2300      	movs	r3, #0
 80037bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037be:	2300      	movs	r3, #0
 80037c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037c2:	2300      	movs	r3, #0
 80037c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037c6:	2300      	movs	r3, #0
 80037c8:	61fb      	str	r3, [r7, #28]
 80037ca:	e177      	b.n	8003abc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037cc:	2201      	movs	r2, #1
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	4013      	ands	r3, r2
 80037de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	f040 8166 	bne.w	8003ab6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f003 0303 	and.w	r3, r3, #3
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d005      	beq.n	8003802 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d130      	bne.n	8003864 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	005b      	lsls	r3, r3, #1
 800380c:	2203      	movs	r2, #3
 800380e:	fa02 f303 	lsl.w	r3, r2, r3
 8003812:	43db      	mvns	r3, r3
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	4013      	ands	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	68da      	ldr	r2, [r3, #12]
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	4313      	orrs	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003838:	2201      	movs	r2, #1
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	43db      	mvns	r3, r3
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	4013      	ands	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	091b      	lsrs	r3, r3, #4
 800384e:	f003 0201 	and.w	r2, r3, #1
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	fa02 f303 	lsl.w	r3, r2, r3
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	4313      	orrs	r3, r2
 800385c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f003 0303 	and.w	r3, r3, #3
 800386c:	2b03      	cmp	r3, #3
 800386e:	d017      	beq.n	80038a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	2203      	movs	r2, #3
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	43db      	mvns	r3, r3
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	4013      	ands	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	4313      	orrs	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f003 0303 	and.w	r3, r3, #3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d123      	bne.n	80038f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	08da      	lsrs	r2, r3, #3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3208      	adds	r2, #8
 80038b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	220f      	movs	r2, #15
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	43db      	mvns	r3, r3
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	4013      	ands	r3, r2
 80038ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	691a      	ldr	r2, [r3, #16]
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	f003 0307 	and.w	r3, r3, #7
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	08da      	lsrs	r2, r3, #3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	3208      	adds	r2, #8
 80038ee:	69b9      	ldr	r1, [r7, #24]
 80038f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	2203      	movs	r2, #3
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	43db      	mvns	r3, r3
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	4013      	ands	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f003 0203 	and.w	r2, r3, #3
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	4313      	orrs	r3, r2
 8003920:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 80c0 	beq.w	8003ab6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003936:	2300      	movs	r3, #0
 8003938:	60fb      	str	r3, [r7, #12]
 800393a:	4b66      	ldr	r3, [pc, #408]	; (8003ad4 <HAL_GPIO_Init+0x324>)
 800393c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393e:	4a65      	ldr	r2, [pc, #404]	; (8003ad4 <HAL_GPIO_Init+0x324>)
 8003940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003944:	6453      	str	r3, [r2, #68]	; 0x44
 8003946:	4b63      	ldr	r3, [pc, #396]	; (8003ad4 <HAL_GPIO_Init+0x324>)
 8003948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800394e:	60fb      	str	r3, [r7, #12]
 8003950:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003952:	4a61      	ldr	r2, [pc, #388]	; (8003ad8 <HAL_GPIO_Init+0x328>)
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	089b      	lsrs	r3, r3, #2
 8003958:	3302      	adds	r3, #2
 800395a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800395e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	f003 0303 	and.w	r3, r3, #3
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	220f      	movs	r2, #15
 800396a:	fa02 f303 	lsl.w	r3, r2, r3
 800396e:	43db      	mvns	r3, r3
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	4013      	ands	r3, r2
 8003974:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a58      	ldr	r2, [pc, #352]	; (8003adc <HAL_GPIO_Init+0x32c>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d037      	beq.n	80039ee <HAL_GPIO_Init+0x23e>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a57      	ldr	r2, [pc, #348]	; (8003ae0 <HAL_GPIO_Init+0x330>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d031      	beq.n	80039ea <HAL_GPIO_Init+0x23a>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a56      	ldr	r2, [pc, #344]	; (8003ae4 <HAL_GPIO_Init+0x334>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d02b      	beq.n	80039e6 <HAL_GPIO_Init+0x236>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a55      	ldr	r2, [pc, #340]	; (8003ae8 <HAL_GPIO_Init+0x338>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d025      	beq.n	80039e2 <HAL_GPIO_Init+0x232>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a54      	ldr	r2, [pc, #336]	; (8003aec <HAL_GPIO_Init+0x33c>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d01f      	beq.n	80039de <HAL_GPIO_Init+0x22e>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a53      	ldr	r2, [pc, #332]	; (8003af0 <HAL_GPIO_Init+0x340>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d019      	beq.n	80039da <HAL_GPIO_Init+0x22a>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a52      	ldr	r2, [pc, #328]	; (8003af4 <HAL_GPIO_Init+0x344>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d013      	beq.n	80039d6 <HAL_GPIO_Init+0x226>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a51      	ldr	r2, [pc, #324]	; (8003af8 <HAL_GPIO_Init+0x348>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d00d      	beq.n	80039d2 <HAL_GPIO_Init+0x222>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a50      	ldr	r2, [pc, #320]	; (8003afc <HAL_GPIO_Init+0x34c>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d007      	beq.n	80039ce <HAL_GPIO_Init+0x21e>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a4f      	ldr	r2, [pc, #316]	; (8003b00 <HAL_GPIO_Init+0x350>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d101      	bne.n	80039ca <HAL_GPIO_Init+0x21a>
 80039c6:	2309      	movs	r3, #9
 80039c8:	e012      	b.n	80039f0 <HAL_GPIO_Init+0x240>
 80039ca:	230a      	movs	r3, #10
 80039cc:	e010      	b.n	80039f0 <HAL_GPIO_Init+0x240>
 80039ce:	2308      	movs	r3, #8
 80039d0:	e00e      	b.n	80039f0 <HAL_GPIO_Init+0x240>
 80039d2:	2307      	movs	r3, #7
 80039d4:	e00c      	b.n	80039f0 <HAL_GPIO_Init+0x240>
 80039d6:	2306      	movs	r3, #6
 80039d8:	e00a      	b.n	80039f0 <HAL_GPIO_Init+0x240>
 80039da:	2305      	movs	r3, #5
 80039dc:	e008      	b.n	80039f0 <HAL_GPIO_Init+0x240>
 80039de:	2304      	movs	r3, #4
 80039e0:	e006      	b.n	80039f0 <HAL_GPIO_Init+0x240>
 80039e2:	2303      	movs	r3, #3
 80039e4:	e004      	b.n	80039f0 <HAL_GPIO_Init+0x240>
 80039e6:	2302      	movs	r3, #2
 80039e8:	e002      	b.n	80039f0 <HAL_GPIO_Init+0x240>
 80039ea:	2301      	movs	r3, #1
 80039ec:	e000      	b.n	80039f0 <HAL_GPIO_Init+0x240>
 80039ee:	2300      	movs	r3, #0
 80039f0:	69fa      	ldr	r2, [r7, #28]
 80039f2:	f002 0203 	and.w	r2, r2, #3
 80039f6:	0092      	lsls	r2, r2, #2
 80039f8:	4093      	lsls	r3, r2
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a00:	4935      	ldr	r1, [pc, #212]	; (8003ad8 <HAL_GPIO_Init+0x328>)
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	089b      	lsrs	r3, r3, #2
 8003a06:	3302      	adds	r3, #2
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a0e:	4b3d      	ldr	r3, [pc, #244]	; (8003b04 <HAL_GPIO_Init+0x354>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	43db      	mvns	r3, r3
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a32:	4a34      	ldr	r2, [pc, #208]	; (8003b04 <HAL_GPIO_Init+0x354>)
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a38:	4b32      	ldr	r3, [pc, #200]	; (8003b04 <HAL_GPIO_Init+0x354>)
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	43db      	mvns	r3, r3
 8003a42:	69ba      	ldr	r2, [r7, #24]
 8003a44:	4013      	ands	r3, r2
 8003a46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d003      	beq.n	8003a5c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a5c:	4a29      	ldr	r2, [pc, #164]	; (8003b04 <HAL_GPIO_Init+0x354>)
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a62:	4b28      	ldr	r3, [pc, #160]	; (8003b04 <HAL_GPIO_Init+0x354>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	43db      	mvns	r3, r3
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a86:	4a1f      	ldr	r2, [pc, #124]	; (8003b04 <HAL_GPIO_Init+0x354>)
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a8c:	4b1d      	ldr	r3, [pc, #116]	; (8003b04 <HAL_GPIO_Init+0x354>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	43db      	mvns	r3, r3
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ab0:	4a14      	ldr	r2, [pc, #80]	; (8003b04 <HAL_GPIO_Init+0x354>)
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	3301      	adds	r3, #1
 8003aba:	61fb      	str	r3, [r7, #28]
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	2b0f      	cmp	r3, #15
 8003ac0:	f67f ae84 	bls.w	80037cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ac4:	bf00      	nop
 8003ac6:	bf00      	nop
 8003ac8:	3724      	adds	r7, #36	; 0x24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	40023800 	.word	0x40023800
 8003ad8:	40013800 	.word	0x40013800
 8003adc:	40020000 	.word	0x40020000
 8003ae0:	40020400 	.word	0x40020400
 8003ae4:	40020800 	.word	0x40020800
 8003ae8:	40020c00 	.word	0x40020c00
 8003aec:	40021000 	.word	0x40021000
 8003af0:	40021400 	.word	0x40021400
 8003af4:	40021800 	.word	0x40021800
 8003af8:	40021c00 	.word	0x40021c00
 8003afc:	40022000 	.word	0x40022000
 8003b00:	40022400 	.word	0x40022400
 8003b04:	40013c00 	.word	0x40013c00

08003b08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	460b      	mov	r3, r1
 8003b12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691a      	ldr	r2, [r3, #16]
 8003b18:	887b      	ldrh	r3, [r7, #2]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d002      	beq.n	8003b26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b20:	2301      	movs	r3, #1
 8003b22:	73fb      	strb	r3, [r7, #15]
 8003b24:	e001      	b.n	8003b2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b26:	2300      	movs	r3, #0
 8003b28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3714      	adds	r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	460b      	mov	r3, r1
 8003b42:	807b      	strh	r3, [r7, #2]
 8003b44:	4613      	mov	r3, r2
 8003b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b48:	787b      	ldrb	r3, [r7, #1]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b4e:	887a      	ldrh	r2, [r7, #2]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b54:	e003      	b.n	8003b5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b56:	887b      	ldrh	r3, [r7, #2]
 8003b58:	041a      	lsls	r2, r3, #16
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	619a      	str	r2, [r3, #24]
}
 8003b5e:	bf00      	nop
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b085      	sub	sp, #20
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
 8003b72:	460b      	mov	r3, r1
 8003b74:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b7c:	887a      	ldrh	r2, [r7, #2]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	4013      	ands	r3, r2
 8003b82:	041a      	lsls	r2, r3, #16
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	43d9      	mvns	r1, r3
 8003b88:	887b      	ldrh	r3, [r7, #2]
 8003b8a:	400b      	ands	r3, r1
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	619a      	str	r2, [r3, #24]
}
 8003b92:	bf00      	nop
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
	...

08003ba0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e12b      	b.n	8003e0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d106      	bne.n	8003bcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f7fe fc04 	bl	80023d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2224      	movs	r2, #36	; 0x24
 8003bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 0201 	bic.w	r2, r2, #1
 8003be2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bf2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c04:	f001 fc72 	bl	80054ec <HAL_RCC_GetPCLK1Freq>
 8003c08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	4a81      	ldr	r2, [pc, #516]	; (8003e14 <HAL_I2C_Init+0x274>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d807      	bhi.n	8003c24 <HAL_I2C_Init+0x84>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	4a80      	ldr	r2, [pc, #512]	; (8003e18 <HAL_I2C_Init+0x278>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	bf94      	ite	ls
 8003c1c:	2301      	movls	r3, #1
 8003c1e:	2300      	movhi	r3, #0
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	e006      	b.n	8003c32 <HAL_I2C_Init+0x92>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4a7d      	ldr	r2, [pc, #500]	; (8003e1c <HAL_I2C_Init+0x27c>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	bf94      	ite	ls
 8003c2c:	2301      	movls	r3, #1
 8003c2e:	2300      	movhi	r3, #0
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e0e7      	b.n	8003e0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	4a78      	ldr	r2, [pc, #480]	; (8003e20 <HAL_I2C_Init+0x280>)
 8003c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c42:	0c9b      	lsrs	r3, r3, #18
 8003c44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	4a6a      	ldr	r2, [pc, #424]	; (8003e14 <HAL_I2C_Init+0x274>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d802      	bhi.n	8003c74 <HAL_I2C_Init+0xd4>
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	3301      	adds	r3, #1
 8003c72:	e009      	b.n	8003c88 <HAL_I2C_Init+0xe8>
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c7a:	fb02 f303 	mul.w	r3, r2, r3
 8003c7e:	4a69      	ldr	r2, [pc, #420]	; (8003e24 <HAL_I2C_Init+0x284>)
 8003c80:	fba2 2303 	umull	r2, r3, r2, r3
 8003c84:	099b      	lsrs	r3, r3, #6
 8003c86:	3301      	adds	r3, #1
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6812      	ldr	r2, [r2, #0]
 8003c8c:	430b      	orrs	r3, r1
 8003c8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	495c      	ldr	r1, [pc, #368]	; (8003e14 <HAL_I2C_Init+0x274>)
 8003ca4:	428b      	cmp	r3, r1
 8003ca6:	d819      	bhi.n	8003cdc <HAL_I2C_Init+0x13c>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	1e59      	subs	r1, r3, #1
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cb6:	1c59      	adds	r1, r3, #1
 8003cb8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003cbc:	400b      	ands	r3, r1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00a      	beq.n	8003cd8 <HAL_I2C_Init+0x138>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	1e59      	subs	r1, r3, #1
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cd6:	e051      	b.n	8003d7c <HAL_I2C_Init+0x1dc>
 8003cd8:	2304      	movs	r3, #4
 8003cda:	e04f      	b.n	8003d7c <HAL_I2C_Init+0x1dc>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d111      	bne.n	8003d08 <HAL_I2C_Init+0x168>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	1e58      	subs	r0, r3, #1
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6859      	ldr	r1, [r3, #4]
 8003cec:	460b      	mov	r3, r1
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	440b      	add	r3, r1
 8003cf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	bf0c      	ite	eq
 8003d00:	2301      	moveq	r3, #1
 8003d02:	2300      	movne	r3, #0
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	e012      	b.n	8003d2e <HAL_I2C_Init+0x18e>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	1e58      	subs	r0, r3, #1
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6859      	ldr	r1, [r3, #4]
 8003d10:	460b      	mov	r3, r1
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	440b      	add	r3, r1
 8003d16:	0099      	lsls	r1, r3, #2
 8003d18:	440b      	add	r3, r1
 8003d1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d1e:	3301      	adds	r3, #1
 8003d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	bf0c      	ite	eq
 8003d28:	2301      	moveq	r3, #1
 8003d2a:	2300      	movne	r3, #0
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <HAL_I2C_Init+0x196>
 8003d32:	2301      	movs	r3, #1
 8003d34:	e022      	b.n	8003d7c <HAL_I2C_Init+0x1dc>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10e      	bne.n	8003d5c <HAL_I2C_Init+0x1bc>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	1e58      	subs	r0, r3, #1
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6859      	ldr	r1, [r3, #4]
 8003d46:	460b      	mov	r3, r1
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	440b      	add	r3, r1
 8003d4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d50:	3301      	adds	r3, #1
 8003d52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d5a:	e00f      	b.n	8003d7c <HAL_I2C_Init+0x1dc>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	1e58      	subs	r0, r3, #1
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6859      	ldr	r1, [r3, #4]
 8003d64:	460b      	mov	r3, r1
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	440b      	add	r3, r1
 8003d6a:	0099      	lsls	r1, r3, #2
 8003d6c:	440b      	add	r3, r1
 8003d6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d72:	3301      	adds	r3, #1
 8003d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d7c:	6879      	ldr	r1, [r7, #4]
 8003d7e:	6809      	ldr	r1, [r1, #0]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	69da      	ldr	r2, [r3, #28]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003daa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	6911      	ldr	r1, [r2, #16]
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	68d2      	ldr	r2, [r2, #12]
 8003db6:	4311      	orrs	r1, r2
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6812      	ldr	r2, [r2, #0]
 8003dbc:	430b      	orrs	r3, r1
 8003dbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	695a      	ldr	r2, [r3, #20]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0201 	orr.w	r2, r2, #1
 8003dea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2220      	movs	r2, #32
 8003df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	000186a0 	.word	0x000186a0
 8003e18:	001e847f 	.word	0x001e847f
 8003e1c:	003d08ff 	.word	0x003d08ff
 8003e20:	431bde83 	.word	0x431bde83
 8003e24:	10624dd3 	.word	0x10624dd3

08003e28 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b088      	sub	sp, #32
 8003e2c:	af02      	add	r7, sp, #8
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	607a      	str	r2, [r7, #4]
 8003e32:	461a      	mov	r2, r3
 8003e34:	460b      	mov	r3, r1
 8003e36:	817b      	strh	r3, [r7, #10]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e3c:	f7fe fe78 	bl	8002b30 <HAL_GetTick>
 8003e40:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b20      	cmp	r3, #32
 8003e4c:	f040 80e0 	bne.w	8004010 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	9300      	str	r3, [sp, #0]
 8003e54:	2319      	movs	r3, #25
 8003e56:	2201      	movs	r2, #1
 8003e58:	4970      	ldr	r1, [pc, #448]	; (800401c <HAL_I2C_Master_Transmit+0x1f4>)
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f000 fc64 	bl	8004728 <I2C_WaitOnFlagUntilTimeout>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e66:	2302      	movs	r3, #2
 8003e68:	e0d3      	b.n	8004012 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d101      	bne.n	8003e78 <HAL_I2C_Master_Transmit+0x50>
 8003e74:	2302      	movs	r3, #2
 8003e76:	e0cc      	b.n	8004012 <HAL_I2C_Master_Transmit+0x1ea>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d007      	beq.n	8003e9e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f042 0201 	orr.w	r2, r2, #1
 8003e9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2221      	movs	r2, #33	; 0x21
 8003eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2210      	movs	r2, #16
 8003eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	893a      	ldrh	r2, [r7, #8]
 8003ece:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	4a50      	ldr	r2, [pc, #320]	; (8004020 <HAL_I2C_Master_Transmit+0x1f8>)
 8003ede:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ee0:	8979      	ldrh	r1, [r7, #10]
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	6a3a      	ldr	r2, [r7, #32]
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 face 	bl	8004488 <I2C_MasterRequestWrite>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e08d      	b.n	8004012 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	613b      	str	r3, [r7, #16]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	613b      	str	r3, [r7, #16]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	613b      	str	r3, [r7, #16]
 8003f0a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003f0c:	e066      	b.n	8003fdc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	6a39      	ldr	r1, [r7, #32]
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f000 fd22 	bl	800495c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00d      	beq.n	8003f3a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d107      	bne.n	8003f36 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e06b      	b.n	8004012 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3e:	781a      	ldrb	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	1c5a      	adds	r2, r3, #1
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	3b01      	subs	r3, #1
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f62:	3b01      	subs	r3, #1
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b04      	cmp	r3, #4
 8003f76:	d11b      	bne.n	8003fb0 <HAL_I2C_Master_Transmit+0x188>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d017      	beq.n	8003fb0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	781a      	ldrb	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f90:	1c5a      	adds	r2, r3, #1
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	6a39      	ldr	r1, [r7, #32]
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f000 fd19 	bl	80049ec <I2C_WaitOnBTFFlagUntilTimeout>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00d      	beq.n	8003fdc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc4:	2b04      	cmp	r3, #4
 8003fc6:	d107      	bne.n	8003fd8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fd6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e01a      	b.n	8004012 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d194      	bne.n	8003f0e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ff2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800400c:	2300      	movs	r3, #0
 800400e:	e000      	b.n	8004012 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004010:	2302      	movs	r3, #2
  }
}
 8004012:	4618      	mov	r0, r3
 8004014:	3718      	adds	r7, #24
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	00100002 	.word	0x00100002
 8004020:	ffff0000 	.word	0xffff0000

08004024 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b08c      	sub	sp, #48	; 0x30
 8004028:	af02      	add	r7, sp, #8
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	607a      	str	r2, [r7, #4]
 800402e:	461a      	mov	r2, r3
 8004030:	460b      	mov	r3, r1
 8004032:	817b      	strh	r3, [r7, #10]
 8004034:	4613      	mov	r3, r2
 8004036:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004038:	f7fe fd7a 	bl	8002b30 <HAL_GetTick>
 800403c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b20      	cmp	r3, #32
 8004048:	f040 8217 	bne.w	800447a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	2319      	movs	r3, #25
 8004052:	2201      	movs	r2, #1
 8004054:	497c      	ldr	r1, [pc, #496]	; (8004248 <HAL_I2C_Master_Receive+0x224>)
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f000 fb66 	bl	8004728 <I2C_WaitOnFlagUntilTimeout>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004062:	2302      	movs	r3, #2
 8004064:	e20a      	b.n	800447c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800406c:	2b01      	cmp	r3, #1
 800406e:	d101      	bne.n	8004074 <HAL_I2C_Master_Receive+0x50>
 8004070:	2302      	movs	r3, #2
 8004072:	e203      	b.n	800447c <HAL_I2C_Master_Receive+0x458>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b01      	cmp	r3, #1
 8004088:	d007      	beq.n	800409a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f042 0201 	orr.w	r2, r2, #1
 8004098:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2222      	movs	r2, #34	; 0x22
 80040ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2210      	movs	r2, #16
 80040b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	893a      	ldrh	r2, [r7, #8]
 80040ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	4a5c      	ldr	r2, [pc, #368]	; (800424c <HAL_I2C_Master_Receive+0x228>)
 80040da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80040dc:	8979      	ldrh	r1, [r7, #10]
 80040de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f000 fa52 	bl	800458c <I2C_MasterRequestRead>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e1c4      	b.n	800447c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d113      	bne.n	8004122 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040fa:	2300      	movs	r3, #0
 80040fc:	623b      	str	r3, [r7, #32]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	623b      	str	r3, [r7, #32]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	623b      	str	r3, [r7, #32]
 800410e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	e198      	b.n	8004454 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004126:	2b01      	cmp	r3, #1
 8004128:	d11b      	bne.n	8004162 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004138:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800413a:	2300      	movs	r3, #0
 800413c:	61fb      	str	r3, [r7, #28]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	61fb      	str	r3, [r7, #28]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	61fb      	str	r3, [r7, #28]
 800414e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	e178      	b.n	8004454 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004166:	2b02      	cmp	r3, #2
 8004168:	d11b      	bne.n	80041a2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004178:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004188:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800418a:	2300      	movs	r3, #0
 800418c:	61bb      	str	r3, [r7, #24]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	61bb      	str	r3, [r7, #24]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	61bb      	str	r3, [r7, #24]
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	e158      	b.n	8004454 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041b2:	2300      	movs	r3, #0
 80041b4:	617b      	str	r3, [r7, #20]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	617b      	str	r3, [r7, #20]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	617b      	str	r3, [r7, #20]
 80041c6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80041c8:	e144      	b.n	8004454 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ce:	2b03      	cmp	r3, #3
 80041d0:	f200 80f1 	bhi.w	80043b6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d123      	bne.n	8004224 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 fc4b 	bl	8004a7c <I2C_WaitOnRXNEFlagUntilTimeout>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e145      	b.n	800447c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	691a      	ldr	r2, [r3, #16]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	b2d2      	uxtb	r2, r2
 80041fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	1c5a      	adds	r2, r3, #1
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800420c:	3b01      	subs	r3, #1
 800420e:	b29a      	uxth	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004218:	b29b      	uxth	r3, r3
 800421a:	3b01      	subs	r3, #1
 800421c:	b29a      	uxth	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004222:	e117      	b.n	8004454 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004228:	2b02      	cmp	r3, #2
 800422a:	d14e      	bne.n	80042ca <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800422c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004232:	2200      	movs	r2, #0
 8004234:	4906      	ldr	r1, [pc, #24]	; (8004250 <HAL_I2C_Master_Receive+0x22c>)
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f000 fa76 	bl	8004728 <I2C_WaitOnFlagUntilTimeout>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d008      	beq.n	8004254 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e11a      	b.n	800447c <HAL_I2C_Master_Receive+0x458>
 8004246:	bf00      	nop
 8004248:	00100002 	.word	0x00100002
 800424c:	ffff0000 	.word	0xffff0000
 8004250:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004262:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	691a      	ldr	r2, [r3, #16]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426e:	b2d2      	uxtb	r2, r2
 8004270:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	1c5a      	adds	r2, r3, #1
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004280:	3b01      	subs	r3, #1
 8004282:	b29a      	uxth	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428c:	b29b      	uxth	r3, r3
 800428e:	3b01      	subs	r3, #1
 8004290:	b29a      	uxth	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	691a      	ldr	r2, [r3, #16]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a0:	b2d2      	uxtb	r2, r2
 80042a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	1c5a      	adds	r2, r3, #1
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b2:	3b01      	subs	r3, #1
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042be:	b29b      	uxth	r3, r3
 80042c0:	3b01      	subs	r3, #1
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042c8:	e0c4      	b.n	8004454 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d0:	2200      	movs	r2, #0
 80042d2:	496c      	ldr	r1, [pc, #432]	; (8004484 <HAL_I2C_Master_Receive+0x460>)
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f000 fa27 	bl	8004728 <I2C_WaitOnFlagUntilTimeout>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e0cb      	b.n	800447c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	691a      	ldr	r2, [r3, #16]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fe:	b2d2      	uxtb	r2, r2
 8004300:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004306:	1c5a      	adds	r2, r3, #1
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004310:	3b01      	subs	r3, #1
 8004312:	b29a      	uxth	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431c:	b29b      	uxth	r3, r3
 800431e:	3b01      	subs	r3, #1
 8004320:	b29a      	uxth	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432c:	2200      	movs	r2, #0
 800432e:	4955      	ldr	r1, [pc, #340]	; (8004484 <HAL_I2C_Master_Receive+0x460>)
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f000 f9f9 	bl	8004728 <I2C_WaitOnFlagUntilTimeout>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e09d      	b.n	800447c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800434e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	691a      	ldr	r2, [r3, #16]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	b2d2      	uxtb	r2, r2
 800435c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	1c5a      	adds	r2, r3, #1
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800436c:	3b01      	subs	r3, #1
 800436e:	b29a      	uxth	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004378:	b29b      	uxth	r3, r3
 800437a:	3b01      	subs	r3, #1
 800437c:	b29a      	uxth	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	691a      	ldr	r2, [r3, #16]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438c:	b2d2      	uxtb	r2, r2
 800438e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004394:	1c5a      	adds	r2, r3, #1
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800439e:	3b01      	subs	r3, #1
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043b4:	e04e      	b.n	8004454 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 fb5e 	bl	8004a7c <I2C_WaitOnRXNEFlagUntilTimeout>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e058      	b.n	800447c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	691a      	ldr	r2, [r3, #16]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d4:	b2d2      	uxtb	r2, r2
 80043d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043dc:	1c5a      	adds	r2, r3, #1
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	3b01      	subs	r3, #1
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	f003 0304 	and.w	r3, r3, #4
 8004406:	2b04      	cmp	r3, #4
 8004408:	d124      	bne.n	8004454 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800440e:	2b03      	cmp	r3, #3
 8004410:	d107      	bne.n	8004422 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004420:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	691a      	ldr	r2, [r3, #16]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442c:	b2d2      	uxtb	r2, r2
 800442e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	1c5a      	adds	r2, r3, #1
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800443e:	3b01      	subs	r3, #1
 8004440:	b29a      	uxth	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800444a:	b29b      	uxth	r3, r3
 800444c:	3b01      	subs	r3, #1
 800444e:	b29a      	uxth	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004458:	2b00      	cmp	r3, #0
 800445a:	f47f aeb6 	bne.w	80041ca <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2220      	movs	r2, #32
 8004462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004476:	2300      	movs	r3, #0
 8004478:	e000      	b.n	800447c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800447a:	2302      	movs	r3, #2
  }
}
 800447c:	4618      	mov	r0, r3
 800447e:	3728      	adds	r7, #40	; 0x28
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	00010004 	.word	0x00010004

08004488 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b088      	sub	sp, #32
 800448c:	af02      	add	r7, sp, #8
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	607a      	str	r2, [r7, #4]
 8004492:	603b      	str	r3, [r7, #0]
 8004494:	460b      	mov	r3, r1
 8004496:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	d006      	beq.n	80044b2 <I2C_MasterRequestWrite+0x2a>
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d003      	beq.n	80044b2 <I2C_MasterRequestWrite+0x2a>
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044b0:	d108      	bne.n	80044c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044c0:	601a      	str	r2, [r3, #0]
 80044c2:	e00b      	b.n	80044dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c8:	2b12      	cmp	r3, #18
 80044ca:	d107      	bne.n	80044dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f000 f91d 	bl	8004728 <I2C_WaitOnFlagUntilTimeout>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00d      	beq.n	8004510 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004502:	d103      	bne.n	800450c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f44f 7200 	mov.w	r2, #512	; 0x200
 800450a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e035      	b.n	800457c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004518:	d108      	bne.n	800452c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800451a:	897b      	ldrh	r3, [r7, #10]
 800451c:	b2db      	uxtb	r3, r3
 800451e:	461a      	mov	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004528:	611a      	str	r2, [r3, #16]
 800452a:	e01b      	b.n	8004564 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800452c:	897b      	ldrh	r3, [r7, #10]
 800452e:	11db      	asrs	r3, r3, #7
 8004530:	b2db      	uxtb	r3, r3
 8004532:	f003 0306 	and.w	r3, r3, #6
 8004536:	b2db      	uxtb	r3, r3
 8004538:	f063 030f 	orn	r3, r3, #15
 800453c:	b2da      	uxtb	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	490e      	ldr	r1, [pc, #56]	; (8004584 <I2C_MasterRequestWrite+0xfc>)
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f000 f966 	bl	800481c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e010      	b.n	800457c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800455a:	897b      	ldrh	r3, [r7, #10]
 800455c:	b2da      	uxtb	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	4907      	ldr	r1, [pc, #28]	; (8004588 <I2C_MasterRequestWrite+0x100>)
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f000 f956 	bl	800481c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e000      	b.n	800457c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3718      	adds	r7, #24
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	00010008 	.word	0x00010008
 8004588:	00010002 	.word	0x00010002

0800458c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b088      	sub	sp, #32
 8004590:	af02      	add	r7, sp, #8
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	607a      	str	r2, [r7, #4]
 8004596:	603b      	str	r3, [r7, #0]
 8004598:	460b      	mov	r3, r1
 800459a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045b0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	2b08      	cmp	r3, #8
 80045b6:	d006      	beq.n	80045c6 <I2C_MasterRequestRead+0x3a>
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d003      	beq.n	80045c6 <I2C_MasterRequestRead+0x3a>
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045c4:	d108      	bne.n	80045d8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045d4:	601a      	str	r2, [r3, #0]
 80045d6:	e00b      	b.n	80045f0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045dc:	2b11      	cmp	r3, #17
 80045de:	d107      	bne.n	80045f0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f000 f893 	bl	8004728 <I2C_WaitOnFlagUntilTimeout>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00d      	beq.n	8004624 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004616:	d103      	bne.n	8004620 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800461e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e079      	b.n	8004718 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800462c:	d108      	bne.n	8004640 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800462e:	897b      	ldrh	r3, [r7, #10]
 8004630:	b2db      	uxtb	r3, r3
 8004632:	f043 0301 	orr.w	r3, r3, #1
 8004636:	b2da      	uxtb	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	611a      	str	r2, [r3, #16]
 800463e:	e05f      	b.n	8004700 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004640:	897b      	ldrh	r3, [r7, #10]
 8004642:	11db      	asrs	r3, r3, #7
 8004644:	b2db      	uxtb	r3, r3
 8004646:	f003 0306 	and.w	r3, r3, #6
 800464a:	b2db      	uxtb	r3, r3
 800464c:	f063 030f 	orn	r3, r3, #15
 8004650:	b2da      	uxtb	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	4930      	ldr	r1, [pc, #192]	; (8004720 <I2C_MasterRequestRead+0x194>)
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f000 f8dc 	bl	800481c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e054      	b.n	8004718 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800466e:	897b      	ldrh	r3, [r7, #10]
 8004670:	b2da      	uxtb	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	4929      	ldr	r1, [pc, #164]	; (8004724 <I2C_MasterRequestRead+0x198>)
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f000 f8cc 	bl	800481c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e044      	b.n	8004718 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800468e:	2300      	movs	r3, #0
 8004690:	613b      	str	r3, [r7, #16]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	613b      	str	r3, [r7, #16]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	613b      	str	r3, [r7, #16]
 80046a2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046b2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f000 f831 	bl	8004728 <I2C_WaitOnFlagUntilTimeout>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00d      	beq.n	80046e8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046da:	d103      	bne.n	80046e4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046e2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e017      	b.n	8004718 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80046e8:	897b      	ldrh	r3, [r7, #10]
 80046ea:	11db      	asrs	r3, r3, #7
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	f003 0306 	and.w	r3, r3, #6
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	f063 030e 	orn	r3, r3, #14
 80046f8:	b2da      	uxtb	r2, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	4907      	ldr	r1, [pc, #28]	; (8004724 <I2C_MasterRequestRead+0x198>)
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f000 f888 	bl	800481c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e000      	b.n	8004718 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3718      	adds	r7, #24
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	00010008 	.word	0x00010008
 8004724:	00010002 	.word	0x00010002

08004728 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	603b      	str	r3, [r7, #0]
 8004734:	4613      	mov	r3, r2
 8004736:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004738:	e048      	b.n	80047cc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004740:	d044      	beq.n	80047cc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004742:	f7fe f9f5 	bl	8002b30 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	429a      	cmp	r2, r3
 8004750:	d302      	bcc.n	8004758 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d139      	bne.n	80047cc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	0c1b      	lsrs	r3, r3, #16
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b01      	cmp	r3, #1
 8004760:	d10d      	bne.n	800477e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	43da      	mvns	r2, r3
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	4013      	ands	r3, r2
 800476e:	b29b      	uxth	r3, r3
 8004770:	2b00      	cmp	r3, #0
 8004772:	bf0c      	ite	eq
 8004774:	2301      	moveq	r3, #1
 8004776:	2300      	movne	r3, #0
 8004778:	b2db      	uxtb	r3, r3
 800477a:	461a      	mov	r2, r3
 800477c:	e00c      	b.n	8004798 <I2C_WaitOnFlagUntilTimeout+0x70>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	43da      	mvns	r2, r3
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	4013      	ands	r3, r2
 800478a:	b29b      	uxth	r3, r3
 800478c:	2b00      	cmp	r3, #0
 800478e:	bf0c      	ite	eq
 8004790:	2301      	moveq	r3, #1
 8004792:	2300      	movne	r3, #0
 8004794:	b2db      	uxtb	r3, r3
 8004796:	461a      	mov	r2, r3
 8004798:	79fb      	ldrb	r3, [r7, #7]
 800479a:	429a      	cmp	r2, r3
 800479c:	d116      	bne.n	80047cc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2220      	movs	r2, #32
 80047a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b8:	f043 0220 	orr.w	r2, r3, #32
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e023      	b.n	8004814 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	0c1b      	lsrs	r3, r3, #16
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d10d      	bne.n	80047f2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	43da      	mvns	r2, r3
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	4013      	ands	r3, r2
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	bf0c      	ite	eq
 80047e8:	2301      	moveq	r3, #1
 80047ea:	2300      	movne	r3, #0
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	461a      	mov	r2, r3
 80047f0:	e00c      	b.n	800480c <I2C_WaitOnFlagUntilTimeout+0xe4>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	43da      	mvns	r2, r3
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	4013      	ands	r3, r2
 80047fe:	b29b      	uxth	r3, r3
 8004800:	2b00      	cmp	r3, #0
 8004802:	bf0c      	ite	eq
 8004804:	2301      	moveq	r3, #1
 8004806:	2300      	movne	r3, #0
 8004808:	b2db      	uxtb	r3, r3
 800480a:	461a      	mov	r2, r3
 800480c:	79fb      	ldrb	r3, [r7, #7]
 800480e:	429a      	cmp	r2, r3
 8004810:	d093      	beq.n	800473a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
 8004828:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800482a:	e071      	b.n	8004910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800483a:	d123      	bne.n	8004884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800484a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004854:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2220      	movs	r2, #32
 8004860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004870:	f043 0204 	orr.w	r2, r3, #4
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e067      	b.n	8004954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800488a:	d041      	beq.n	8004910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800488c:	f7fe f950 	bl	8002b30 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	429a      	cmp	r2, r3
 800489a:	d302      	bcc.n	80048a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d136      	bne.n	8004910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	0c1b      	lsrs	r3, r3, #16
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d10c      	bne.n	80048c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	43da      	mvns	r2, r3
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	4013      	ands	r3, r2
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	bf14      	ite	ne
 80048be:	2301      	movne	r3, #1
 80048c0:	2300      	moveq	r3, #0
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	e00b      	b.n	80048de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	43da      	mvns	r2, r3
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	4013      	ands	r3, r2
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	bf14      	ite	ne
 80048d8:	2301      	movne	r3, #1
 80048da:	2300      	moveq	r3, #0
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d016      	beq.n	8004910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2220      	movs	r2, #32
 80048ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fc:	f043 0220 	orr.w	r2, r3, #32
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e021      	b.n	8004954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	0c1b      	lsrs	r3, r3, #16
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b01      	cmp	r3, #1
 8004918:	d10c      	bne.n	8004934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	43da      	mvns	r2, r3
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	4013      	ands	r3, r2
 8004926:	b29b      	uxth	r3, r3
 8004928:	2b00      	cmp	r3, #0
 800492a:	bf14      	ite	ne
 800492c:	2301      	movne	r3, #1
 800492e:	2300      	moveq	r3, #0
 8004930:	b2db      	uxtb	r3, r3
 8004932:	e00b      	b.n	800494c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	43da      	mvns	r2, r3
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	4013      	ands	r3, r2
 8004940:	b29b      	uxth	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	bf14      	ite	ne
 8004946:	2301      	movne	r3, #1
 8004948:	2300      	moveq	r3, #0
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b00      	cmp	r3, #0
 800494e:	f47f af6d 	bne.w	800482c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004968:	e034      	b.n	80049d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f000 f8e3 	bl	8004b36 <I2C_IsAcknowledgeFailed>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d001      	beq.n	800497a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e034      	b.n	80049e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004980:	d028      	beq.n	80049d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004982:	f7fe f8d5 	bl	8002b30 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	429a      	cmp	r2, r3
 8004990:	d302      	bcc.n	8004998 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d11d      	bne.n	80049d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a2:	2b80      	cmp	r3, #128	; 0x80
 80049a4:	d016      	beq.n	80049d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2220      	movs	r2, #32
 80049b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c0:	f043 0220 	orr.w	r2, r3, #32
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e007      	b.n	80049e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049de:	2b80      	cmp	r3, #128	; 0x80
 80049e0:	d1c3      	bne.n	800496a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049f8:	e034      	b.n	8004a64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f000 f89b 	bl	8004b36 <I2C_IsAcknowledgeFailed>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e034      	b.n	8004a74 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a10:	d028      	beq.n	8004a64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a12:	f7fe f88d 	bl	8002b30 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d302      	bcc.n	8004a28 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d11d      	bne.n	8004a64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	f003 0304 	and.w	r3, r3, #4
 8004a32:	2b04      	cmp	r3, #4
 8004a34:	d016      	beq.n	8004a64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a50:	f043 0220 	orr.w	r2, r3, #32
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e007      	b.n	8004a74 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	f003 0304 	and.w	r3, r3, #4
 8004a6e:	2b04      	cmp	r3, #4
 8004a70:	d1c3      	bne.n	80049fa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a88:	e049      	b.n	8004b1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	f003 0310 	and.w	r3, r3, #16
 8004a94:	2b10      	cmp	r3, #16
 8004a96:	d119      	bne.n	8004acc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f06f 0210 	mvn.w	r2, #16
 8004aa0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e030      	b.n	8004b2e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004acc:	f7fe f830 	bl	8002b30 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	68ba      	ldr	r2, [r7, #8]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d302      	bcc.n	8004ae2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d11d      	bne.n	8004b1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aec:	2b40      	cmp	r3, #64	; 0x40
 8004aee:	d016      	beq.n	8004b1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2220      	movs	r2, #32
 8004afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0a:	f043 0220 	orr.w	r2, r3, #32
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e007      	b.n	8004b2e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b28:	2b40      	cmp	r3, #64	; 0x40
 8004b2a:	d1ae      	bne.n	8004a8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b4c:	d11b      	bne.n	8004b86 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b56:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2220      	movs	r2, #32
 8004b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	f043 0204 	orr.w	r2, r3, #4
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e000      	b.n	8004b88 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b20      	cmp	r3, #32
 8004ba8:	d129      	bne.n	8004bfe <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2224      	movs	r2, #36	; 0x24
 8004bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 0201 	bic.w	r2, r2, #1
 8004bc0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f022 0210 	bic.w	r2, r2, #16
 8004bd0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	683a      	ldr	r2, [r7, #0]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f042 0201 	orr.w	r2, r2, #1
 8004bf0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2220      	movs	r2, #32
 8004bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	e000      	b.n	8004c00 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004bfe:	2302      	movs	r3, #2
  }
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004c16:	2300      	movs	r3, #0
 8004c18:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b20      	cmp	r3, #32
 8004c24:	d12a      	bne.n	8004c7c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2224      	movs	r2, #36	; 0x24
 8004c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f022 0201 	bic.w	r2, r2, #1
 8004c3c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c44:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004c46:	89fb      	ldrh	r3, [r7, #14]
 8004c48:	f023 030f 	bic.w	r3, r3, #15
 8004c4c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	89fb      	ldrh	r3, [r7, #14]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	89fa      	ldrh	r2, [r7, #14]
 8004c5e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f042 0201 	orr.w	r2, r2, #1
 8004c6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2220      	movs	r2, #32
 8004c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	e000      	b.n	8004c7e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004c7c:	2302      	movs	r3, #2
  }
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
	...

08004c8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e267      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d075      	beq.n	8004d96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004caa:	4b88      	ldr	r3, [pc, #544]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 030c 	and.w	r3, r3, #12
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	d00c      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cb6:	4b85      	ldr	r3, [pc, #532]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004cbe:	2b08      	cmp	r3, #8
 8004cc0:	d112      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cc2:	4b82      	ldr	r3, [pc, #520]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cce:	d10b      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cd0:	4b7e      	ldr	r3, [pc, #504]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d05b      	beq.n	8004d94 <HAL_RCC_OscConfig+0x108>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d157      	bne.n	8004d94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e242      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cf0:	d106      	bne.n	8004d00 <HAL_RCC_OscConfig+0x74>
 8004cf2:	4b76      	ldr	r3, [pc, #472]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a75      	ldr	r2, [pc, #468]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cfc:	6013      	str	r3, [r2, #0]
 8004cfe:	e01d      	b.n	8004d3c <HAL_RCC_OscConfig+0xb0>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d08:	d10c      	bne.n	8004d24 <HAL_RCC_OscConfig+0x98>
 8004d0a:	4b70      	ldr	r3, [pc, #448]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a6f      	ldr	r2, [pc, #444]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d14:	6013      	str	r3, [r2, #0]
 8004d16:	4b6d      	ldr	r3, [pc, #436]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a6c      	ldr	r2, [pc, #432]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d20:	6013      	str	r3, [r2, #0]
 8004d22:	e00b      	b.n	8004d3c <HAL_RCC_OscConfig+0xb0>
 8004d24:	4b69      	ldr	r3, [pc, #420]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a68      	ldr	r2, [pc, #416]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d2e:	6013      	str	r3, [r2, #0]
 8004d30:	4b66      	ldr	r3, [pc, #408]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a65      	ldr	r2, [pc, #404]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d013      	beq.n	8004d6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d44:	f7fd fef4 	bl	8002b30 <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d4a:	e008      	b.n	8004d5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d4c:	f7fd fef0 	bl	8002b30 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b64      	cmp	r3, #100	; 0x64
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e207      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d5e:	4b5b      	ldr	r3, [pc, #364]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d0f0      	beq.n	8004d4c <HAL_RCC_OscConfig+0xc0>
 8004d6a:	e014      	b.n	8004d96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d6c:	f7fd fee0 	bl	8002b30 <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d74:	f7fd fedc 	bl	8002b30 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b64      	cmp	r3, #100	; 0x64
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e1f3      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d86:	4b51      	ldr	r3, [pc, #324]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1f0      	bne.n	8004d74 <HAL_RCC_OscConfig+0xe8>
 8004d92:	e000      	b.n	8004d96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d063      	beq.n	8004e6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004da2:	4b4a      	ldr	r3, [pc, #296]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f003 030c 	and.w	r3, r3, #12
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00b      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dae:	4b47      	ldr	r3, [pc, #284]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	d11c      	bne.n	8004df4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dba:	4b44      	ldr	r3, [pc, #272]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d116      	bne.n	8004df4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dc6:	4b41      	ldr	r3, [pc, #260]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d005      	beq.n	8004dde <HAL_RCC_OscConfig+0x152>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d001      	beq.n	8004dde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e1c7      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dde:	4b3b      	ldr	r3, [pc, #236]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	4937      	ldr	r1, [pc, #220]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004df2:	e03a      	b.n	8004e6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d020      	beq.n	8004e3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dfc:	4b34      	ldr	r3, [pc, #208]	; (8004ed0 <HAL_RCC_OscConfig+0x244>)
 8004dfe:	2201      	movs	r2, #1
 8004e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e02:	f7fd fe95 	bl	8002b30 <HAL_GetTick>
 8004e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e08:	e008      	b.n	8004e1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e0a:	f7fd fe91 	bl	8002b30 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d901      	bls.n	8004e1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e1a8      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e1c:	4b2b      	ldr	r3, [pc, #172]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d0f0      	beq.n	8004e0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e28:	4b28      	ldr	r3, [pc, #160]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	00db      	lsls	r3, r3, #3
 8004e36:	4925      	ldr	r1, [pc, #148]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	600b      	str	r3, [r1, #0]
 8004e3c:	e015      	b.n	8004e6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e3e:	4b24      	ldr	r3, [pc, #144]	; (8004ed0 <HAL_RCC_OscConfig+0x244>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e44:	f7fd fe74 	bl	8002b30 <HAL_GetTick>
 8004e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e4a:	e008      	b.n	8004e5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e4c:	f7fd fe70 	bl	8002b30 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d901      	bls.n	8004e5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e187      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e5e:	4b1b      	ldr	r3, [pc, #108]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0302 	and.w	r3, r3, #2
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1f0      	bne.n	8004e4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0308 	and.w	r3, r3, #8
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d036      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d016      	beq.n	8004eac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e7e:	4b15      	ldr	r3, [pc, #84]	; (8004ed4 <HAL_RCC_OscConfig+0x248>)
 8004e80:	2201      	movs	r2, #1
 8004e82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e84:	f7fd fe54 	bl	8002b30 <HAL_GetTick>
 8004e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e8a:	e008      	b.n	8004e9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e8c:	f7fd fe50 	bl	8002b30 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e167      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e9e:	4b0b      	ldr	r3, [pc, #44]	; (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d0f0      	beq.n	8004e8c <HAL_RCC_OscConfig+0x200>
 8004eaa:	e01b      	b.n	8004ee4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004eac:	4b09      	ldr	r3, [pc, #36]	; (8004ed4 <HAL_RCC_OscConfig+0x248>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eb2:	f7fd fe3d 	bl	8002b30 <HAL_GetTick>
 8004eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eb8:	e00e      	b.n	8004ed8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004eba:	f7fd fe39 	bl	8002b30 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d907      	bls.n	8004ed8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e150      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
 8004ecc:	40023800 	.word	0x40023800
 8004ed0:	42470000 	.word	0x42470000
 8004ed4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ed8:	4b88      	ldr	r3, [pc, #544]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004eda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1ea      	bne.n	8004eba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 8097 	beq.w	8005020 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ef6:	4b81      	ldr	r3, [pc, #516]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10f      	bne.n	8004f22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f02:	2300      	movs	r3, #0
 8004f04:	60bb      	str	r3, [r7, #8]
 8004f06:	4b7d      	ldr	r3, [pc, #500]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0a:	4a7c      	ldr	r2, [pc, #496]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f10:	6413      	str	r3, [r2, #64]	; 0x40
 8004f12:	4b7a      	ldr	r3, [pc, #488]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f1a:	60bb      	str	r3, [r7, #8]
 8004f1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f22:	4b77      	ldr	r3, [pc, #476]	; (8005100 <HAL_RCC_OscConfig+0x474>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d118      	bne.n	8004f60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f2e:	4b74      	ldr	r3, [pc, #464]	; (8005100 <HAL_RCC_OscConfig+0x474>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a73      	ldr	r2, [pc, #460]	; (8005100 <HAL_RCC_OscConfig+0x474>)
 8004f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f3a:	f7fd fdf9 	bl	8002b30 <HAL_GetTick>
 8004f3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f40:	e008      	b.n	8004f54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f42:	f7fd fdf5 	bl	8002b30 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d901      	bls.n	8004f54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e10c      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f54:	4b6a      	ldr	r3, [pc, #424]	; (8005100 <HAL_RCC_OscConfig+0x474>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d0f0      	beq.n	8004f42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d106      	bne.n	8004f76 <HAL_RCC_OscConfig+0x2ea>
 8004f68:	4b64      	ldr	r3, [pc, #400]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6c:	4a63      	ldr	r2, [pc, #396]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f6e:	f043 0301 	orr.w	r3, r3, #1
 8004f72:	6713      	str	r3, [r2, #112]	; 0x70
 8004f74:	e01c      	b.n	8004fb0 <HAL_RCC_OscConfig+0x324>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	2b05      	cmp	r3, #5
 8004f7c:	d10c      	bne.n	8004f98 <HAL_RCC_OscConfig+0x30c>
 8004f7e:	4b5f      	ldr	r3, [pc, #380]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f82:	4a5e      	ldr	r2, [pc, #376]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f84:	f043 0304 	orr.w	r3, r3, #4
 8004f88:	6713      	str	r3, [r2, #112]	; 0x70
 8004f8a:	4b5c      	ldr	r3, [pc, #368]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f8e:	4a5b      	ldr	r2, [pc, #364]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f90:	f043 0301 	orr.w	r3, r3, #1
 8004f94:	6713      	str	r3, [r2, #112]	; 0x70
 8004f96:	e00b      	b.n	8004fb0 <HAL_RCC_OscConfig+0x324>
 8004f98:	4b58      	ldr	r3, [pc, #352]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9c:	4a57      	ldr	r2, [pc, #348]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f9e:	f023 0301 	bic.w	r3, r3, #1
 8004fa2:	6713      	str	r3, [r2, #112]	; 0x70
 8004fa4:	4b55      	ldr	r3, [pc, #340]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa8:	4a54      	ldr	r2, [pc, #336]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004faa:	f023 0304 	bic.w	r3, r3, #4
 8004fae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d015      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb8:	f7fd fdba 	bl	8002b30 <HAL_GetTick>
 8004fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fbe:	e00a      	b.n	8004fd6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fc0:	f7fd fdb6 	bl	8002b30 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e0cb      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fd6:	4b49      	ldr	r3, [pc, #292]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8004fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d0ee      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x334>
 8004fe2:	e014      	b.n	800500e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fe4:	f7fd fda4 	bl	8002b30 <HAL_GetTick>
 8004fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fea:	e00a      	b.n	8005002 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fec:	f7fd fda0 	bl	8002b30 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e0b5      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005002:	4b3e      	ldr	r3, [pc, #248]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8005004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1ee      	bne.n	8004fec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800500e:	7dfb      	ldrb	r3, [r7, #23]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d105      	bne.n	8005020 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005014:	4b39      	ldr	r3, [pc, #228]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8005016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005018:	4a38      	ldr	r2, [pc, #224]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 800501a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800501e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 80a1 	beq.w	800516c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800502a:	4b34      	ldr	r3, [pc, #208]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 030c 	and.w	r3, r3, #12
 8005032:	2b08      	cmp	r3, #8
 8005034:	d05c      	beq.n	80050f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	2b02      	cmp	r3, #2
 800503c:	d141      	bne.n	80050c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800503e:	4b31      	ldr	r3, [pc, #196]	; (8005104 <HAL_RCC_OscConfig+0x478>)
 8005040:	2200      	movs	r2, #0
 8005042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005044:	f7fd fd74 	bl	8002b30 <HAL_GetTick>
 8005048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800504c:	f7fd fd70 	bl	8002b30 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b02      	cmp	r3, #2
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e087      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800505e:	4b27      	ldr	r3, [pc, #156]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1f0      	bne.n	800504c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	69da      	ldr	r2, [r3, #28]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	431a      	orrs	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005078:	019b      	lsls	r3, r3, #6
 800507a:	431a      	orrs	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005080:	085b      	lsrs	r3, r3, #1
 8005082:	3b01      	subs	r3, #1
 8005084:	041b      	lsls	r3, r3, #16
 8005086:	431a      	orrs	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508c:	061b      	lsls	r3, r3, #24
 800508e:	491b      	ldr	r1, [pc, #108]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 8005090:	4313      	orrs	r3, r2
 8005092:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005094:	4b1b      	ldr	r3, [pc, #108]	; (8005104 <HAL_RCC_OscConfig+0x478>)
 8005096:	2201      	movs	r2, #1
 8005098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800509a:	f7fd fd49 	bl	8002b30 <HAL_GetTick>
 800509e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050a0:	e008      	b.n	80050b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050a2:	f7fd fd45 	bl	8002b30 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d901      	bls.n	80050b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e05c      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050b4:	4b11      	ldr	r3, [pc, #68]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d0f0      	beq.n	80050a2 <HAL_RCC_OscConfig+0x416>
 80050c0:	e054      	b.n	800516c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050c2:	4b10      	ldr	r3, [pc, #64]	; (8005104 <HAL_RCC_OscConfig+0x478>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c8:	f7fd fd32 	bl	8002b30 <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ce:	e008      	b.n	80050e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050d0:	f7fd fd2e 	bl	8002b30 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e045      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050e2:	4b06      	ldr	r3, [pc, #24]	; (80050fc <HAL_RCC_OscConfig+0x470>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1f0      	bne.n	80050d0 <HAL_RCC_OscConfig+0x444>
 80050ee:	e03d      	b.n	800516c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d107      	bne.n	8005108 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e038      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
 80050fc:	40023800 	.word	0x40023800
 8005100:	40007000 	.word	0x40007000
 8005104:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005108:	4b1b      	ldr	r3, [pc, #108]	; (8005178 <HAL_RCC_OscConfig+0x4ec>)
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d028      	beq.n	8005168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005120:	429a      	cmp	r2, r3
 8005122:	d121      	bne.n	8005168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800512e:	429a      	cmp	r2, r3
 8005130:	d11a      	bne.n	8005168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005138:	4013      	ands	r3, r2
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800513e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005140:	4293      	cmp	r3, r2
 8005142:	d111      	bne.n	8005168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514e:	085b      	lsrs	r3, r3, #1
 8005150:	3b01      	subs	r3, #1
 8005152:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005154:	429a      	cmp	r2, r3
 8005156:	d107      	bne.n	8005168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005162:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005164:	429a      	cmp	r2, r3
 8005166:	d001      	beq.n	800516c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e000      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3718      	adds	r7, #24
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	40023800 	.word	0x40023800

0800517c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e0cc      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005190:	4b68      	ldr	r3, [pc, #416]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 030f 	and.w	r3, r3, #15
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	429a      	cmp	r2, r3
 800519c:	d90c      	bls.n	80051b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800519e:	4b65      	ldr	r3, [pc, #404]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	b2d2      	uxtb	r2, r2
 80051a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051a6:	4b63      	ldr	r3, [pc, #396]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 030f 	and.w	r3, r3, #15
 80051ae:	683a      	ldr	r2, [r7, #0]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d001      	beq.n	80051b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e0b8      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d020      	beq.n	8005206 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0304 	and.w	r3, r3, #4
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d005      	beq.n	80051dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051d0:	4b59      	ldr	r3, [pc, #356]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	4a58      	ldr	r2, [pc, #352]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80051da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0308 	and.w	r3, r3, #8
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d005      	beq.n	80051f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051e8:	4b53      	ldr	r3, [pc, #332]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	4a52      	ldr	r2, [pc, #328]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80051f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051f4:	4b50      	ldr	r3, [pc, #320]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	494d      	ldr	r1, [pc, #308]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 8005202:	4313      	orrs	r3, r2
 8005204:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b00      	cmp	r3, #0
 8005210:	d044      	beq.n	800529c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d107      	bne.n	800522a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800521a:	4b47      	ldr	r3, [pc, #284]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d119      	bne.n	800525a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e07f      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2b02      	cmp	r3, #2
 8005230:	d003      	beq.n	800523a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005236:	2b03      	cmp	r3, #3
 8005238:	d107      	bne.n	800524a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800523a:	4b3f      	ldr	r3, [pc, #252]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d109      	bne.n	800525a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e06f      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800524a:	4b3b      	ldr	r3, [pc, #236]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e067      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800525a:	4b37      	ldr	r3, [pc, #220]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f023 0203 	bic.w	r2, r3, #3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	4934      	ldr	r1, [pc, #208]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 8005268:	4313      	orrs	r3, r2
 800526a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800526c:	f7fd fc60 	bl	8002b30 <HAL_GetTick>
 8005270:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005272:	e00a      	b.n	800528a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005274:	f7fd fc5c 	bl	8002b30 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005282:	4293      	cmp	r3, r2
 8005284:	d901      	bls.n	800528a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e04f      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800528a:	4b2b      	ldr	r3, [pc, #172]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f003 020c 	and.w	r2, r3, #12
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	429a      	cmp	r2, r3
 800529a:	d1eb      	bne.n	8005274 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800529c:	4b25      	ldr	r3, [pc, #148]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 030f 	and.w	r3, r3, #15
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d20c      	bcs.n	80052c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052aa:	4b22      	ldr	r3, [pc, #136]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052b2:	4b20      	ldr	r3, [pc, #128]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 030f 	and.w	r3, r3, #15
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d001      	beq.n	80052c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e032      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d008      	beq.n	80052e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052d0:	4b19      	ldr	r3, [pc, #100]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	4916      	ldr	r1, [pc, #88]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0308 	and.w	r3, r3, #8
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d009      	beq.n	8005302 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052ee:	4b12      	ldr	r3, [pc, #72]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	490e      	ldr	r1, [pc, #56]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005302:	f000 f821 	bl	8005348 <HAL_RCC_GetSysClockFreq>
 8005306:	4602      	mov	r2, r0
 8005308:	4b0b      	ldr	r3, [pc, #44]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	091b      	lsrs	r3, r3, #4
 800530e:	f003 030f 	and.w	r3, r3, #15
 8005312:	490a      	ldr	r1, [pc, #40]	; (800533c <HAL_RCC_ClockConfig+0x1c0>)
 8005314:	5ccb      	ldrb	r3, [r1, r3]
 8005316:	fa22 f303 	lsr.w	r3, r2, r3
 800531a:	4a09      	ldr	r2, [pc, #36]	; (8005340 <HAL_RCC_ClockConfig+0x1c4>)
 800531c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800531e:	4b09      	ldr	r3, [pc, #36]	; (8005344 <HAL_RCC_ClockConfig+0x1c8>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4618      	mov	r0, r3
 8005324:	f7fd fbc0 	bl	8002aa8 <HAL_InitTick>

  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	40023c00 	.word	0x40023c00
 8005338:	40023800 	.word	0x40023800
 800533c:	08008500 	.word	0x08008500
 8005340:	2000001c 	.word	0x2000001c
 8005344:	20000020 	.word	0x20000020

08005348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800534c:	b090      	sub	sp, #64	; 0x40
 800534e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005350:	2300      	movs	r3, #0
 8005352:	637b      	str	r3, [r7, #52]	; 0x34
 8005354:	2300      	movs	r3, #0
 8005356:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005358:	2300      	movs	r3, #0
 800535a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800535c:	2300      	movs	r3, #0
 800535e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005360:	4b59      	ldr	r3, [pc, #356]	; (80054c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f003 030c 	and.w	r3, r3, #12
 8005368:	2b08      	cmp	r3, #8
 800536a:	d00d      	beq.n	8005388 <HAL_RCC_GetSysClockFreq+0x40>
 800536c:	2b08      	cmp	r3, #8
 800536e:	f200 80a1 	bhi.w	80054b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8005372:	2b00      	cmp	r3, #0
 8005374:	d002      	beq.n	800537c <HAL_RCC_GetSysClockFreq+0x34>
 8005376:	2b04      	cmp	r3, #4
 8005378:	d003      	beq.n	8005382 <HAL_RCC_GetSysClockFreq+0x3a>
 800537a:	e09b      	b.n	80054b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800537c:	4b53      	ldr	r3, [pc, #332]	; (80054cc <HAL_RCC_GetSysClockFreq+0x184>)
 800537e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005380:	e09b      	b.n	80054ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005382:	4b53      	ldr	r3, [pc, #332]	; (80054d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005384:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005386:	e098      	b.n	80054ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005388:	4b4f      	ldr	r3, [pc, #316]	; (80054c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005390:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005392:	4b4d      	ldr	r3, [pc, #308]	; (80054c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d028      	beq.n	80053f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800539e:	4b4a      	ldr	r3, [pc, #296]	; (80054c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	099b      	lsrs	r3, r3, #6
 80053a4:	2200      	movs	r2, #0
 80053a6:	623b      	str	r3, [r7, #32]
 80053a8:	627a      	str	r2, [r7, #36]	; 0x24
 80053aa:	6a3b      	ldr	r3, [r7, #32]
 80053ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80053b0:	2100      	movs	r1, #0
 80053b2:	4b47      	ldr	r3, [pc, #284]	; (80054d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80053b4:	fb03 f201 	mul.w	r2, r3, r1
 80053b8:	2300      	movs	r3, #0
 80053ba:	fb00 f303 	mul.w	r3, r0, r3
 80053be:	4413      	add	r3, r2
 80053c0:	4a43      	ldr	r2, [pc, #268]	; (80054d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80053c2:	fba0 1202 	umull	r1, r2, r0, r2
 80053c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053c8:	460a      	mov	r2, r1
 80053ca:	62ba      	str	r2, [r7, #40]	; 0x28
 80053cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053ce:	4413      	add	r3, r2
 80053d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d4:	2200      	movs	r2, #0
 80053d6:	61bb      	str	r3, [r7, #24]
 80053d8:	61fa      	str	r2, [r7, #28]
 80053da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80053e2:	f7fa ff0b 	bl	80001fc <__aeabi_uldivmod>
 80053e6:	4602      	mov	r2, r0
 80053e8:	460b      	mov	r3, r1
 80053ea:	4613      	mov	r3, r2
 80053ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053ee:	e053      	b.n	8005498 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053f0:	4b35      	ldr	r3, [pc, #212]	; (80054c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	099b      	lsrs	r3, r3, #6
 80053f6:	2200      	movs	r2, #0
 80053f8:	613b      	str	r3, [r7, #16]
 80053fa:	617a      	str	r2, [r7, #20]
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005402:	f04f 0b00 	mov.w	fp, #0
 8005406:	4652      	mov	r2, sl
 8005408:	465b      	mov	r3, fp
 800540a:	f04f 0000 	mov.w	r0, #0
 800540e:	f04f 0100 	mov.w	r1, #0
 8005412:	0159      	lsls	r1, r3, #5
 8005414:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005418:	0150      	lsls	r0, r2, #5
 800541a:	4602      	mov	r2, r0
 800541c:	460b      	mov	r3, r1
 800541e:	ebb2 080a 	subs.w	r8, r2, sl
 8005422:	eb63 090b 	sbc.w	r9, r3, fp
 8005426:	f04f 0200 	mov.w	r2, #0
 800542a:	f04f 0300 	mov.w	r3, #0
 800542e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005432:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005436:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800543a:	ebb2 0408 	subs.w	r4, r2, r8
 800543e:	eb63 0509 	sbc.w	r5, r3, r9
 8005442:	f04f 0200 	mov.w	r2, #0
 8005446:	f04f 0300 	mov.w	r3, #0
 800544a:	00eb      	lsls	r3, r5, #3
 800544c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005450:	00e2      	lsls	r2, r4, #3
 8005452:	4614      	mov	r4, r2
 8005454:	461d      	mov	r5, r3
 8005456:	eb14 030a 	adds.w	r3, r4, sl
 800545a:	603b      	str	r3, [r7, #0]
 800545c:	eb45 030b 	adc.w	r3, r5, fp
 8005460:	607b      	str	r3, [r7, #4]
 8005462:	f04f 0200 	mov.w	r2, #0
 8005466:	f04f 0300 	mov.w	r3, #0
 800546a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800546e:	4629      	mov	r1, r5
 8005470:	028b      	lsls	r3, r1, #10
 8005472:	4621      	mov	r1, r4
 8005474:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005478:	4621      	mov	r1, r4
 800547a:	028a      	lsls	r2, r1, #10
 800547c:	4610      	mov	r0, r2
 800547e:	4619      	mov	r1, r3
 8005480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005482:	2200      	movs	r2, #0
 8005484:	60bb      	str	r3, [r7, #8]
 8005486:	60fa      	str	r2, [r7, #12]
 8005488:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800548c:	f7fa feb6 	bl	80001fc <__aeabi_uldivmod>
 8005490:	4602      	mov	r2, r0
 8005492:	460b      	mov	r3, r1
 8005494:	4613      	mov	r3, r2
 8005496:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005498:	4b0b      	ldr	r3, [pc, #44]	; (80054c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	0c1b      	lsrs	r3, r3, #16
 800549e:	f003 0303 	and.w	r3, r3, #3
 80054a2:	3301      	adds	r3, #1
 80054a4:	005b      	lsls	r3, r3, #1
 80054a6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80054a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80054aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80054b2:	e002      	b.n	80054ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054b4:	4b05      	ldr	r3, [pc, #20]	; (80054cc <HAL_RCC_GetSysClockFreq+0x184>)
 80054b6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80054b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3740      	adds	r7, #64	; 0x40
 80054c0:	46bd      	mov	sp, r7
 80054c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054c6:	bf00      	nop
 80054c8:	40023800 	.word	0x40023800
 80054cc:	00f42400 	.word	0x00f42400
 80054d0:	017d7840 	.word	0x017d7840

080054d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054d4:	b480      	push	{r7}
 80054d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054d8:	4b03      	ldr	r3, [pc, #12]	; (80054e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80054da:	681b      	ldr	r3, [r3, #0]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	2000001c 	.word	0x2000001c

080054ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80054f0:	f7ff fff0 	bl	80054d4 <HAL_RCC_GetHCLKFreq>
 80054f4:	4602      	mov	r2, r0
 80054f6:	4b05      	ldr	r3, [pc, #20]	; (800550c <HAL_RCC_GetPCLK1Freq+0x20>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	0a9b      	lsrs	r3, r3, #10
 80054fc:	f003 0307 	and.w	r3, r3, #7
 8005500:	4903      	ldr	r1, [pc, #12]	; (8005510 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005502:	5ccb      	ldrb	r3, [r1, r3]
 8005504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005508:	4618      	mov	r0, r3
 800550a:	bd80      	pop	{r7, pc}
 800550c:	40023800 	.word	0x40023800
 8005510:	08008510 	.word	0x08008510

08005514 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005518:	f7ff ffdc 	bl	80054d4 <HAL_RCC_GetHCLKFreq>
 800551c:	4602      	mov	r2, r0
 800551e:	4b05      	ldr	r3, [pc, #20]	; (8005534 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	0b5b      	lsrs	r3, r3, #13
 8005524:	f003 0307 	and.w	r3, r3, #7
 8005528:	4903      	ldr	r1, [pc, #12]	; (8005538 <HAL_RCC_GetPCLK2Freq+0x24>)
 800552a:	5ccb      	ldrb	r3, [r1, r3]
 800552c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005530:	4618      	mov	r0, r3
 8005532:	bd80      	pop	{r7, pc}
 8005534:	40023800 	.word	0x40023800
 8005538:	08008510 	.word	0x08008510

0800553c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005544:	2300      	movs	r3, #0
 8005546:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005548:	2300      	movs	r3, #0
 800554a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10b      	bne.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005560:	2b00      	cmp	r3, #0
 8005562:	d105      	bne.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800556c:	2b00      	cmp	r3, #0
 800556e:	d075      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005570:	4b91      	ldr	r3, [pc, #580]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005572:	2200      	movs	r2, #0
 8005574:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005576:	f7fd fadb 	bl	8002b30 <HAL_GetTick>
 800557a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800557c:	e008      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800557e:	f7fd fad7 	bl	8002b30 <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	2b02      	cmp	r3, #2
 800558a:	d901      	bls.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e189      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005590:	4b8a      	ldr	r3, [pc, #552]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1f0      	bne.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d009      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	019a      	lsls	r2, r3, #6
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	071b      	lsls	r3, r3, #28
 80055b4:	4981      	ldr	r1, [pc, #516]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0302 	and.w	r3, r3, #2
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d01f      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80055c8:	4b7c      	ldr	r3, [pc, #496]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055ce:	0f1b      	lsrs	r3, r3, #28
 80055d0:	f003 0307 	and.w	r3, r3, #7
 80055d4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	019a      	lsls	r2, r3, #6
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	061b      	lsls	r3, r3, #24
 80055e2:	431a      	orrs	r2, r3
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	071b      	lsls	r3, r3, #28
 80055e8:	4974      	ldr	r1, [pc, #464]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80055f0:	4b72      	ldr	r3, [pc, #456]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055f6:	f023 021f 	bic.w	r2, r3, #31
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	69db      	ldr	r3, [r3, #28]
 80055fe:	3b01      	subs	r3, #1
 8005600:	496e      	ldr	r1, [pc, #440]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005602:	4313      	orrs	r3, r2
 8005604:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00d      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	019a      	lsls	r2, r3, #6
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	061b      	lsls	r3, r3, #24
 8005620:	431a      	orrs	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	071b      	lsls	r3, r3, #28
 8005628:	4964      	ldr	r1, [pc, #400]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800562a:	4313      	orrs	r3, r2
 800562c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005630:	4b61      	ldr	r3, [pc, #388]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005632:	2201      	movs	r2, #1
 8005634:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005636:	f7fd fa7b 	bl	8002b30 <HAL_GetTick>
 800563a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800563c:	e008      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800563e:	f7fd fa77 	bl	8002b30 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b02      	cmp	r3, #2
 800564a:	d901      	bls.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e129      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005650:	4b5a      	ldr	r3, [pc, #360]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d0f0      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0304 	and.w	r3, r3, #4
 8005664:	2b00      	cmp	r3, #0
 8005666:	d105      	bne.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005670:	2b00      	cmp	r3, #0
 8005672:	d079      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005674:	4b52      	ldr	r3, [pc, #328]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005676:	2200      	movs	r2, #0
 8005678:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800567a:	f7fd fa59 	bl	8002b30 <HAL_GetTick>
 800567e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005680:	e008      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005682:	f7fd fa55 	bl	8002b30 <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	2b02      	cmp	r3, #2
 800568e:	d901      	bls.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e107      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005694:	4b49      	ldr	r3, [pc, #292]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800569c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056a0:	d0ef      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0304 	and.w	r3, r3, #4
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d020      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80056ae:	4b43      	ldr	r3, [pc, #268]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056b4:	0f1b      	lsrs	r3, r3, #28
 80056b6:	f003 0307 	and.w	r3, r3, #7
 80056ba:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	019a      	lsls	r2, r3, #6
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	061b      	lsls	r3, r3, #24
 80056c8:	431a      	orrs	r2, r3
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	071b      	lsls	r3, r3, #28
 80056ce:	493b      	ldr	r1, [pc, #236]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80056d6:	4b39      	ldr	r3, [pc, #228]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056dc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a1b      	ldr	r3, [r3, #32]
 80056e4:	3b01      	subs	r3, #1
 80056e6:	021b      	lsls	r3, r3, #8
 80056e8:	4934      	ldr	r1, [pc, #208]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0308 	and.w	r3, r3, #8
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d01e      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80056fc:	4b2f      	ldr	r3, [pc, #188]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005702:	0e1b      	lsrs	r3, r3, #24
 8005704:	f003 030f 	and.w	r3, r3, #15
 8005708:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	019a      	lsls	r2, r3, #6
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	061b      	lsls	r3, r3, #24
 8005714:	431a      	orrs	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	071b      	lsls	r3, r3, #28
 800571c:	4927      	ldr	r1, [pc, #156]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800571e:	4313      	orrs	r3, r2
 8005720:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005724:	4b25      	ldr	r3, [pc, #148]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005726:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800572a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005732:	4922      	ldr	r1, [pc, #136]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005734:	4313      	orrs	r3, r2
 8005736:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800573a:	4b21      	ldr	r3, [pc, #132]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800573c:	2201      	movs	r2, #1
 800573e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005740:	f7fd f9f6 	bl	8002b30 <HAL_GetTick>
 8005744:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005746:	e008      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005748:	f7fd f9f2 	bl	8002b30 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	2b02      	cmp	r3, #2
 8005754:	d901      	bls.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e0a4      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800575a:	4b18      	ldr	r3, [pc, #96]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005766:	d1ef      	bne.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0320 	and.w	r3, r3, #32
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 808b 	beq.w	800588c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005776:	2300      	movs	r3, #0
 8005778:	60fb      	str	r3, [r7, #12]
 800577a:	4b10      	ldr	r3, [pc, #64]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800577c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577e:	4a0f      	ldr	r2, [pc, #60]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005784:	6413      	str	r3, [r2, #64]	; 0x40
 8005786:	4b0d      	ldr	r3, [pc, #52]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800578e:	60fb      	str	r3, [r7, #12]
 8005790:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005792:	4b0c      	ldr	r3, [pc, #48]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a0b      	ldr	r2, [pc, #44]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800579c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800579e:	f7fd f9c7 	bl	8002b30 <HAL_GetTick>
 80057a2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80057a4:	e010      	b.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80057a6:	f7fd f9c3 	bl	8002b30 <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d909      	bls.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e075      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80057b8:	42470068 	.word	0x42470068
 80057bc:	40023800 	.word	0x40023800
 80057c0:	42470070 	.word	0x42470070
 80057c4:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80057c8:	4b38      	ldr	r3, [pc, #224]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d0e8      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80057d4:	4b36      	ldr	r3, [pc, #216]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057dc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d02f      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d028      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057f2:	4b2f      	ldr	r3, [pc, #188]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057fa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80057fc:	4b2d      	ldr	r3, [pc, #180]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80057fe:	2201      	movs	r2, #1
 8005800:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005802:	4b2c      	ldr	r3, [pc, #176]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005804:	2200      	movs	r2, #0
 8005806:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005808:	4a29      	ldr	r2, [pc, #164]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800580e:	4b28      	ldr	r3, [pc, #160]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005812:	f003 0301 	and.w	r3, r3, #1
 8005816:	2b01      	cmp	r3, #1
 8005818:	d114      	bne.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800581a:	f7fd f989 	bl	8002b30 <HAL_GetTick>
 800581e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005820:	e00a      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005822:	f7fd f985 	bl	8002b30 <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005830:	4293      	cmp	r3, r2
 8005832:	d901      	bls.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e035      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005838:	4b1d      	ldr	r3, [pc, #116]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800583a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800583c:	f003 0302 	and.w	r3, r3, #2
 8005840:	2b00      	cmp	r3, #0
 8005842:	d0ee      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005848:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800584c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005850:	d10d      	bne.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005852:	4b17      	ldr	r3, [pc, #92]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005866:	4912      	ldr	r1, [pc, #72]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005868:	4313      	orrs	r3, r2
 800586a:	608b      	str	r3, [r1, #8]
 800586c:	e005      	b.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800586e:	4b10      	ldr	r3, [pc, #64]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	4a0f      	ldr	r2, [pc, #60]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005874:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005878:	6093      	str	r3, [r2, #8]
 800587a:	4b0d      	ldr	r3, [pc, #52]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800587c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005882:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005886:	490a      	ldr	r1, [pc, #40]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005888:	4313      	orrs	r3, r2
 800588a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0310 	and.w	r3, r3, #16
 8005894:	2b00      	cmp	r3, #0
 8005896:	d004      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800589e:	4b06      	ldr	r3, [pc, #24]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80058a0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3718      	adds	r7, #24
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	40007000 	.word	0x40007000
 80058b0:	40023800 	.word	0x40023800
 80058b4:	42470e40 	.word	0x42470e40
 80058b8:	424711e0 	.word	0x424711e0

080058bc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d101      	bne.n	80058d2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e073      	b.n	80059ba <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	7f5b      	ldrb	r3, [r3, #29]
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d105      	bne.n	80058e8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f7fc fdf4 	bl	80024d0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2202      	movs	r2, #2
 80058ec:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f003 0310 	and.w	r3, r3, #16
 80058f8:	2b10      	cmp	r3, #16
 80058fa:	d055      	beq.n	80059a8 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	22ca      	movs	r2, #202	; 0xca
 8005902:	625a      	str	r2, [r3, #36]	; 0x24
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2253      	movs	r2, #83	; 0x53
 800590a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 fa49 	bl	8005da4 <RTC_EnterInitMode>
 8005912:	4603      	mov	r3, r0
 8005914:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005916:	7bfb      	ldrb	r3, [r7, #15]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d12c      	bne.n	8005976 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	6812      	ldr	r2, [r2, #0]
 8005926:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800592a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800592e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6899      	ldr	r1, [r3, #8]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685a      	ldr	r2, [r3, #4]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	431a      	orrs	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	431a      	orrs	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	430a      	orrs	r2, r1
 800594c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	68d2      	ldr	r2, [r2, #12]
 8005956:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	6919      	ldr	r1, [r3, #16]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	041a      	lsls	r2, r3, #16
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	430a      	orrs	r2, r1
 800596a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 fa50 	bl	8005e12 <RTC_ExitInitMode>
 8005972:	4603      	mov	r3, r0
 8005974:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005976:	7bfb      	ldrb	r3, [r7, #15]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d110      	bne.n	800599e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800598a:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	699a      	ldr	r2, [r3, #24]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	430a      	orrs	r2, r1
 800599c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	22ff      	movs	r2, #255	; 0xff
 80059a4:	625a      	str	r2, [r3, #36]	; 0x24
 80059a6:	e001      	b.n	80059ac <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80059a8:	2300      	movs	r3, #0
 80059aa:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80059ac:	7bfb      	ldrb	r3, [r7, #15]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d102      	bne.n	80059b8 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2201      	movs	r2, #1
 80059b6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80059b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80059c2:	b590      	push	{r4, r7, lr}
 80059c4:	b087      	sub	sp, #28
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	60f8      	str	r0, [r7, #12]
 80059ca:	60b9      	str	r1, [r7, #8]
 80059cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80059ce:	2300      	movs	r3, #0
 80059d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	7f1b      	ldrb	r3, [r3, #28]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d101      	bne.n	80059de <HAL_RTC_SetTime+0x1c>
 80059da:	2302      	movs	r3, #2
 80059dc:	e087      	b.n	8005aee <HAL_RTC_SetTime+0x12c>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2201      	movs	r2, #1
 80059e2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2202      	movs	r2, #2
 80059e8:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d126      	bne.n	8005a3e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d102      	bne.n	8005a04 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	2200      	movs	r2, #0
 8005a02:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f000 fa27 	bl	8005e5c <RTC_ByteToBcd2>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	785b      	ldrb	r3, [r3, #1]
 8005a16:	4618      	mov	r0, r3
 8005a18:	f000 fa20 	bl	8005e5c <RTC_ByteToBcd2>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005a20:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	789b      	ldrb	r3, [r3, #2]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f000 fa18 	bl	8005e5c <RTC_ByteToBcd2>
 8005a2c:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005a2e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	78db      	ldrb	r3, [r3, #3]
 8005a36:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	617b      	str	r3, [r7, #20]
 8005a3c:	e018      	b.n	8005a70 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d102      	bne.n	8005a52 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	785b      	ldrb	r3, [r3, #1]
 8005a5c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005a5e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005a64:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	78db      	ldrb	r3, [r3, #3]
 8005a6a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	22ca      	movs	r2, #202	; 0xca
 8005a76:	625a      	str	r2, [r3, #36]	; 0x24
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2253      	movs	r2, #83	; 0x53
 8005a7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f000 f98f 	bl	8005da4 <RTC_EnterInitMode>
 8005a86:	4603      	mov	r3, r0
 8005a88:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005a8a:	7cfb      	ldrb	r3, [r7, #19]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d120      	bne.n	8005ad2 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005a9a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005a9e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	689a      	ldr	r2, [r3, #8]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005aae:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6899      	ldr	r1, [r3, #8]
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	68da      	ldr	r2, [r3, #12]
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	431a      	orrs	r2, r3
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005ac8:	68f8      	ldr	r0, [r7, #12]
 8005aca:	f000 f9a2 	bl	8005e12 <RTC_ExitInitMode>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005ad2:	7cfb      	ldrb	r3, [r7, #19]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d102      	bne.n	8005ade <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2201      	movs	r2, #1
 8005adc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	22ff      	movs	r2, #255	; 0xff
 8005ae4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	771a      	strb	r2, [r3, #28]

  return status;
 8005aec:	7cfb      	ldrb	r3, [r7, #19]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	371c      	adds	r7, #28
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd90      	pop	{r4, r7, pc}

08005af6 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b086      	sub	sp, #24
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	60f8      	str	r0, [r7, #12]
 8005afe:	60b9      	str	r1, [r7, #8]
 8005b00:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005b02:	2300      	movs	r3, #0
 8005b04:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005b28:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005b2c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	0c1b      	lsrs	r3, r3, #16
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b38:	b2da      	uxtb	r2, r3
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	0a1b      	lsrs	r3, r3, #8
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b48:	b2da      	uxtb	r2, r3
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	0d9b      	lsrs	r3, r3, #22
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	f003 0301 	and.w	r3, r3, #1
 8005b66:	b2da      	uxtb	r2, r3
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d11a      	bne.n	8005ba8 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 f98e 	bl	8005e98 <RTC_Bcd2ToByte>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	461a      	mov	r2, r3
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	785b      	ldrb	r3, [r3, #1]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f000 f985 	bl	8005e98 <RTC_Bcd2ToByte>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	461a      	mov	r2, r3
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	789b      	ldrb	r3, [r3, #2]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f000 f97c 	bl	8005e98 <RTC_Bcd2ToByte>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3718      	adds	r7, #24
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005bb2:	b590      	push	{r4, r7, lr}
 8005bb4:	b087      	sub	sp, #28
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	60f8      	str	r0, [r7, #12]
 8005bba:	60b9      	str	r1, [r7, #8]
 8005bbc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	7f1b      	ldrb	r3, [r3, #28]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d101      	bne.n	8005bce <HAL_RTC_SetDate+0x1c>
 8005bca:	2302      	movs	r3, #2
 8005bcc:	e071      	b.n	8005cb2 <HAL_RTC_SetDate+0x100>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2202      	movs	r2, #2
 8005bd8:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10e      	bne.n	8005bfe <HAL_RTC_SetDate+0x4c>
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	785b      	ldrb	r3, [r3, #1]
 8005be4:	f003 0310 	and.w	r3, r3, #16
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d008      	beq.n	8005bfe <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	785b      	ldrb	r3, [r3, #1]
 8005bf0:	f023 0310 	bic.w	r3, r3, #16
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	330a      	adds	r3, #10
 8005bf8:	b2da      	uxtb	r2, r3
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d11c      	bne.n	8005c3e <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	78db      	ldrb	r3, [r3, #3]
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f000 f927 	bl	8005e5c <RTC_ByteToBcd2>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	785b      	ldrb	r3, [r3, #1]
 8005c16:	4618      	mov	r0, r3
 8005c18:	f000 f920 	bl	8005e5c <RTC_ByteToBcd2>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005c20:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	789b      	ldrb	r3, [r3, #2]
 8005c26:	4618      	mov	r0, r3
 8005c28:	f000 f918 	bl	8005e5c <RTC_ByteToBcd2>
 8005c2c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005c2e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	617b      	str	r3, [r7, #20]
 8005c3c:	e00e      	b.n	8005c5c <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	78db      	ldrb	r3, [r3, #3]
 8005c42:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	785b      	ldrb	r3, [r3, #1]
 8005c48:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005c4a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005c50:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	22ca      	movs	r2, #202	; 0xca
 8005c62:	625a      	str	r2, [r3, #36]	; 0x24
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2253      	movs	r2, #83	; 0x53
 8005c6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f000 f899 	bl	8005da4 <RTC_EnterInitMode>
 8005c72:	4603      	mov	r3, r0
 8005c74:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005c76:	7cfb      	ldrb	r3, [r7, #19]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10c      	bne.n	8005c96 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005c86:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005c8a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f000 f8c0 	bl	8005e12 <RTC_ExitInitMode>
 8005c92:	4603      	mov	r3, r0
 8005c94:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005c96:	7cfb      	ldrb	r3, [r7, #19]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d102      	bne.n	8005ca2 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	22ff      	movs	r2, #255	; 0xff
 8005ca8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	771a      	strb	r2, [r3, #28]

  return status;
 8005cb0:	7cfb      	ldrb	r3, [r7, #19]
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	371c      	adds	r7, #28
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd90      	pop	{r4, r7, pc}

08005cba <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b086      	sub	sp, #24
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	60f8      	str	r0, [r7, #12]
 8005cc2:	60b9      	str	r1, [r7, #8]
 8005cc4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005cd4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005cd8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	0c1b      	lsrs	r3, r3, #16
 8005cde:	b2da      	uxtb	r2, r3
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	0a1b      	lsrs	r3, r3, #8
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	f003 031f 	and.w	r3, r3, #31
 8005cee:	b2da      	uxtb	r2, r3
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cfc:	b2da      	uxtb	r2, r3
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	0b5b      	lsrs	r3, r3, #13
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	f003 0307 	and.w	r3, r3, #7
 8005d0c:	b2da      	uxtb	r2, r3
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d11a      	bne.n	8005d4e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	78db      	ldrb	r3, [r3, #3]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f000 f8bb 	bl	8005e98 <RTC_Bcd2ToByte>
 8005d22:	4603      	mov	r3, r0
 8005d24:	461a      	mov	r2, r3
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	785b      	ldrb	r3, [r3, #1]
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f000 f8b2 	bl	8005e98 <RTC_Bcd2ToByte>
 8005d34:	4603      	mov	r3, r0
 8005d36:	461a      	mov	r2, r3
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	789b      	ldrb	r3, [r3, #2]
 8005d40:	4618      	mov	r0, r3
 8005d42:	f000 f8a9 	bl	8005e98 <RTC_Bcd2ToByte>
 8005d46:	4603      	mov	r3, r0
 8005d48:	461a      	mov	r2, r3
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3718      	adds	r7, #24
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d60:	2300      	movs	r3, #0
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a0d      	ldr	r2, [pc, #52]	; (8005da0 <HAL_RTC_WaitForSynchro+0x48>)
 8005d6a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d6c:	f7fc fee0 	bl	8002b30 <HAL_GetTick>
 8005d70:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005d72:	e009      	b.n	8005d88 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005d74:	f7fc fedc 	bl	8002b30 <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d82:	d901      	bls.n	8005d88 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e007      	b.n	8005d98 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	f003 0320 	and.w	r3, r3, #32
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d0ee      	beq.n	8005d74 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3710      	adds	r7, #16
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	00017f5f 	.word	0x00017f5f

08005da4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005dac:	2300      	movs	r3, #0
 8005dae:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005db0:	2300      	movs	r3, #0
 8005db2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d122      	bne.n	8005e08 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68da      	ldr	r2, [r3, #12]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005dd0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005dd2:	f7fc fead 	bl	8002b30 <HAL_GetTick>
 8005dd6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005dd8:	e00c      	b.n	8005df4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005dda:	f7fc fea9 	bl	8002b30 <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005de8:	d904      	bls.n	8005df4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2204      	movs	r2, #4
 8005dee:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d102      	bne.n	8005e08 <RTC_EnterInitMode+0x64>
 8005e02:	7bfb      	ldrb	r3, [r7, #15]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d1e8      	bne.n	8005dda <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b084      	sub	sp, #16
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68da      	ldr	r2, [r3, #12]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e2c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	f003 0320 	and.w	r3, r3, #32
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10a      	bne.n	8005e52 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f7ff ff8b 	bl	8005d58 <HAL_RTC_WaitForSynchro>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d004      	beq.n	8005e52 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2204      	movs	r2, #4
 8005e4c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	4603      	mov	r3, r0
 8005e64:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005e66:	2300      	movs	r3, #0
 8005e68:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005e6a:	e005      	b.n	8005e78 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8005e72:	79fb      	ldrb	r3, [r7, #7]
 8005e74:	3b0a      	subs	r3, #10
 8005e76:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005e78:	79fb      	ldrb	r3, [r7, #7]
 8005e7a:	2b09      	cmp	r3, #9
 8005e7c:	d8f6      	bhi.n	8005e6c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	011b      	lsls	r3, r3, #4
 8005e84:	b2da      	uxtb	r2, r3
 8005e86:	79fb      	ldrb	r3, [r7, #7]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	b2db      	uxtb	r3, r3
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3714      	adds	r7, #20
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8005ea6:	79fb      	ldrb	r3, [r7, #7]
 8005ea8:	091b      	lsrs	r3, r3, #4
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	461a      	mov	r2, r3
 8005eae:	4613      	mov	r3, r2
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4413      	add	r3, r2
 8005eb4:	005b      	lsls	r3, r3, #1
 8005eb6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	b2da      	uxtb	r2, r3
 8005ebc:	79fb      	ldrb	r3, [r7, #7]
 8005ebe:	f003 030f 	and.w	r3, r3, #15
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	4413      	add	r3, r2
 8005ec6:	b2db      	uxtb	r3, r3
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3714      	adds	r7, #20
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d101      	bne.n	8005ee6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e07b      	b.n	8005fde <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d108      	bne.n	8005f00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ef6:	d009      	beq.n	8005f0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	61da      	str	r2, [r3, #28]
 8005efe:	e005      	b.n	8005f0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d106      	bne.n	8005f2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7fc fafc 	bl	8002524 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2202      	movs	r2, #2
 8005f30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f42:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f54:	431a      	orrs	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f5e:	431a      	orrs	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	f003 0302 	and.w	r3, r3, #2
 8005f68:	431a      	orrs	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	f003 0301 	and.w	r3, r3, #1
 8005f72:	431a      	orrs	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f7c:	431a      	orrs	r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	69db      	ldr	r3, [r3, #28]
 8005f82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f86:	431a      	orrs	r2, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a1b      	ldr	r3, [r3, #32]
 8005f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f90:	ea42 0103 	orr.w	r1, r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f98:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	699b      	ldr	r3, [r3, #24]
 8005fa8:	0c1b      	lsrs	r3, r3, #16
 8005faa:	f003 0104 	and.w	r1, r3, #4
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb2:	f003 0210 	and.w	r2, r3, #16
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	430a      	orrs	r2, r1
 8005fbc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	69da      	ldr	r2, [r3, #28]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fcc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3708      	adds	r7, #8
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b088      	sub	sp, #32
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	60f8      	str	r0, [r7, #12]
 8005fee:	60b9      	str	r1, [r7, #8]
 8005ff0:	603b      	str	r3, [r7, #0]
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006000:	2b01      	cmp	r3, #1
 8006002:	d101      	bne.n	8006008 <HAL_SPI_Transmit+0x22>
 8006004:	2302      	movs	r3, #2
 8006006:	e12d      	b.n	8006264 <HAL_SPI_Transmit+0x27e>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006010:	f7fc fd8e 	bl	8002b30 <HAL_GetTick>
 8006014:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006016:	88fb      	ldrh	r3, [r7, #6]
 8006018:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b01      	cmp	r3, #1
 8006024:	d002      	beq.n	800602c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006026:	2302      	movs	r3, #2
 8006028:	77fb      	strb	r3, [r7, #31]
    goto error;
 800602a:	e116      	b.n	800625a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d002      	beq.n	8006038 <HAL_SPI_Transmit+0x52>
 8006032:	88fb      	ldrh	r3, [r7, #6]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d102      	bne.n	800603e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800603c:	e10d      	b.n	800625a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2203      	movs	r2, #3
 8006042:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	88fa      	ldrh	r2, [r7, #6]
 8006056:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	88fa      	ldrh	r2, [r7, #6]
 800605c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006084:	d10f      	bne.n	80060a6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006094:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b0:	2b40      	cmp	r3, #64	; 0x40
 80060b2:	d007      	beq.n	80060c4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060cc:	d14f      	bne.n	800616e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d002      	beq.n	80060dc <HAL_SPI_Transmit+0xf6>
 80060d6:	8afb      	ldrh	r3, [r7, #22]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d142      	bne.n	8006162 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e0:	881a      	ldrh	r2, [r3, #0]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ec:	1c9a      	adds	r2, r3, #2
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	3b01      	subs	r3, #1
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006100:	e02f      	b.n	8006162 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f003 0302 	and.w	r3, r3, #2
 800610c:	2b02      	cmp	r3, #2
 800610e:	d112      	bne.n	8006136 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006114:	881a      	ldrh	r2, [r3, #0]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006120:	1c9a      	adds	r2, r3, #2
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800612a:	b29b      	uxth	r3, r3
 800612c:	3b01      	subs	r3, #1
 800612e:	b29a      	uxth	r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	86da      	strh	r2, [r3, #54]	; 0x36
 8006134:	e015      	b.n	8006162 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006136:	f7fc fcfb 	bl	8002b30 <HAL_GetTick>
 800613a:	4602      	mov	r2, r0
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	683a      	ldr	r2, [r7, #0]
 8006142:	429a      	cmp	r2, r3
 8006144:	d803      	bhi.n	800614e <HAL_SPI_Transmit+0x168>
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800614c:	d102      	bne.n	8006154 <HAL_SPI_Transmit+0x16e>
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d106      	bne.n	8006162 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006160:	e07b      	b.n	800625a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006166:	b29b      	uxth	r3, r3
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1ca      	bne.n	8006102 <HAL_SPI_Transmit+0x11c>
 800616c:	e050      	b.n	8006210 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d002      	beq.n	800617c <HAL_SPI_Transmit+0x196>
 8006176:	8afb      	ldrh	r3, [r7, #22]
 8006178:	2b01      	cmp	r3, #1
 800617a:	d144      	bne.n	8006206 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	330c      	adds	r3, #12
 8006186:	7812      	ldrb	r2, [r2, #0]
 8006188:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618e:	1c5a      	adds	r2, r3, #1
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006198:	b29b      	uxth	r3, r3
 800619a:	3b01      	subs	r3, #1
 800619c:	b29a      	uxth	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80061a2:	e030      	b.n	8006206 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f003 0302 	and.w	r3, r3, #2
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d113      	bne.n	80061da <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	330c      	adds	r3, #12
 80061bc:	7812      	ldrb	r2, [r2, #0]
 80061be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c4:	1c5a      	adds	r2, r3, #1
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	3b01      	subs	r3, #1
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	86da      	strh	r2, [r3, #54]	; 0x36
 80061d8:	e015      	b.n	8006206 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061da:	f7fc fca9 	bl	8002b30 <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	683a      	ldr	r2, [r7, #0]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d803      	bhi.n	80061f2 <HAL_SPI_Transmit+0x20c>
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061f0:	d102      	bne.n	80061f8 <HAL_SPI_Transmit+0x212>
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d106      	bne.n	8006206 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80061f8:	2303      	movs	r3, #3
 80061fa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006204:	e029      	b.n	800625a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800620a:	b29b      	uxth	r3, r3
 800620c:	2b00      	cmp	r3, #0
 800620e:	d1c9      	bne.n	80061a4 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006210:	69ba      	ldr	r2, [r7, #24]
 8006212:	6839      	ldr	r1, [r7, #0]
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f000 fd27 	bl	8006c68 <SPI_EndRxTxTransaction>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d002      	beq.n	8006226 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2220      	movs	r2, #32
 8006224:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d10a      	bne.n	8006244 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800622e:	2300      	movs	r3, #0
 8006230:	613b      	str	r3, [r7, #16]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	613b      	str	r3, [r7, #16]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	613b      	str	r3, [r7, #16]
 8006242:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006248:	2b00      	cmp	r3, #0
 800624a:	d002      	beq.n	8006252 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	77fb      	strb	r3, [r7, #31]
 8006250:	e003      	b.n	800625a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2201      	movs	r2, #1
 8006256:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006262:	7ffb      	ldrb	r3, [r7, #31]
}
 8006264:	4618      	mov	r0, r3
 8006266:	3720      	adds	r7, #32
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b088      	sub	sp, #32
 8006270:	af02      	add	r7, sp, #8
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	603b      	str	r3, [r7, #0]
 8006278:	4613      	mov	r3, r2
 800627a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800627c:	2300      	movs	r3, #0
 800627e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b01      	cmp	r3, #1
 800628a:	d002      	beq.n	8006292 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800628c:	2302      	movs	r3, #2
 800628e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006290:	e0fb      	b.n	800648a <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800629a:	d112      	bne.n	80062c2 <HAL_SPI_Receive+0x56>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d10e      	bne.n	80062c2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2204      	movs	r2, #4
 80062a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80062ac:	88fa      	ldrh	r2, [r7, #6]
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	9300      	str	r3, [sp, #0]
 80062b2:	4613      	mov	r3, r2
 80062b4:	68ba      	ldr	r2, [r7, #8]
 80062b6:	68b9      	ldr	r1, [r7, #8]
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f000 f8ef 	bl	800649c <HAL_SPI_TransmitReceive>
 80062be:	4603      	mov	r3, r0
 80062c0:	e0e8      	b.n	8006494 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d101      	bne.n	80062d0 <HAL_SPI_Receive+0x64>
 80062cc:	2302      	movs	r3, #2
 80062ce:	e0e1      	b.n	8006494 <HAL_SPI_Receive+0x228>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062d8:	f7fc fc2a 	bl	8002b30 <HAL_GetTick>
 80062dc:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d002      	beq.n	80062ea <HAL_SPI_Receive+0x7e>
 80062e4:	88fb      	ldrh	r3, [r7, #6]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d102      	bne.n	80062f0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80062ee:	e0cc      	b.n	800648a <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2204      	movs	r2, #4
 80062f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	88fa      	ldrh	r2, [r7, #6]
 8006308:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	88fa      	ldrh	r2, [r7, #6]
 800630e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006336:	d10f      	bne.n	8006358 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006346:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006356:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006362:	2b40      	cmp	r3, #64	; 0x40
 8006364:	d007      	beq.n	8006376 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006374:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d16a      	bne.n	8006454 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800637e:	e032      	b.n	80063e6 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f003 0301 	and.w	r3, r3, #1
 800638a:	2b01      	cmp	r3, #1
 800638c:	d115      	bne.n	80063ba <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f103 020c 	add.w	r2, r3, #12
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639a:	7812      	ldrb	r2, [r2, #0]
 800639c:	b2d2      	uxtb	r2, r2
 800639e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a4:	1c5a      	adds	r2, r3, #1
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	3b01      	subs	r3, #1
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063b8:	e015      	b.n	80063e6 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063ba:	f7fc fbb9 	bl	8002b30 <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	683a      	ldr	r2, [r7, #0]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d803      	bhi.n	80063d2 <HAL_SPI_Receive+0x166>
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063d0:	d102      	bne.n	80063d8 <HAL_SPI_Receive+0x16c>
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d106      	bne.n	80063e6 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80063d8:	2303      	movs	r3, #3
 80063da:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80063e4:	e051      	b.n	800648a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1c7      	bne.n	8006380 <HAL_SPI_Receive+0x114>
 80063f0:	e035      	b.n	800645e <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	f003 0301 	and.w	r3, r3, #1
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d113      	bne.n	8006428 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68da      	ldr	r2, [r3, #12]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640a:	b292      	uxth	r2, r2
 800640c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006412:	1c9a      	adds	r2, r3, #2
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800641c:	b29b      	uxth	r3, r3
 800641e:	3b01      	subs	r3, #1
 8006420:	b29a      	uxth	r2, r3
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006426:	e015      	b.n	8006454 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006428:	f7fc fb82 	bl	8002b30 <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	683a      	ldr	r2, [r7, #0]
 8006434:	429a      	cmp	r2, r3
 8006436:	d803      	bhi.n	8006440 <HAL_SPI_Receive+0x1d4>
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800643e:	d102      	bne.n	8006446 <HAL_SPI_Receive+0x1da>
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d106      	bne.n	8006454 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2201      	movs	r2, #1
 800644e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006452:	e01a      	b.n	800648a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006458:	b29b      	uxth	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1c9      	bne.n	80063f2 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	6839      	ldr	r1, [r7, #0]
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	f000 fb9a 	bl	8006b9c <SPI_EndRxTransaction>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d002      	beq.n	8006474 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2220      	movs	r2, #32
 8006472:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006478:	2b00      	cmp	r3, #0
 800647a:	d002      	beq.n	8006482 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	75fb      	strb	r3, [r7, #23]
 8006480:	e003      	b.n	800648a <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006492:	7dfb      	ldrb	r3, [r7, #23]
}
 8006494:	4618      	mov	r0, r3
 8006496:	3718      	adds	r7, #24
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b08c      	sub	sp, #48	; 0x30
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
 80064a8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80064aa:	2301      	movs	r3, #1
 80064ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80064ae:	2300      	movs	r3, #0
 80064b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d101      	bne.n	80064c2 <HAL_SPI_TransmitReceive+0x26>
 80064be:	2302      	movs	r3, #2
 80064c0:	e198      	b.n	80067f4 <HAL_SPI_TransmitReceive+0x358>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064ca:	f7fc fb31 	bl	8002b30 <HAL_GetTick>
 80064ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80064e0:	887b      	ldrh	r3, [r7, #2]
 80064e2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80064e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d00f      	beq.n	800650c <HAL_SPI_TransmitReceive+0x70>
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064f2:	d107      	bne.n	8006504 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d103      	bne.n	8006504 <HAL_SPI_TransmitReceive+0x68>
 80064fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006500:	2b04      	cmp	r3, #4
 8006502:	d003      	beq.n	800650c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006504:	2302      	movs	r3, #2
 8006506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800650a:	e16d      	b.n	80067e8 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d005      	beq.n	800651e <HAL_SPI_TransmitReceive+0x82>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d002      	beq.n	800651e <HAL_SPI_TransmitReceive+0x82>
 8006518:	887b      	ldrh	r3, [r7, #2]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d103      	bne.n	8006526 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006524:	e160      	b.n	80067e8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b04      	cmp	r3, #4
 8006530:	d003      	beq.n	800653a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2205      	movs	r2, #5
 8006536:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	887a      	ldrh	r2, [r7, #2]
 800654a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	887a      	ldrh	r2, [r7, #2]
 8006550:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	68ba      	ldr	r2, [r7, #8]
 8006556:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	887a      	ldrh	r2, [r7, #2]
 800655c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	887a      	ldrh	r2, [r7, #2]
 8006562:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2200      	movs	r2, #0
 800656e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800657a:	2b40      	cmp	r3, #64	; 0x40
 800657c:	d007      	beq.n	800658e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800658c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006596:	d17c      	bne.n	8006692 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d002      	beq.n	80065a6 <HAL_SPI_TransmitReceive+0x10a>
 80065a0:	8b7b      	ldrh	r3, [r7, #26]
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d16a      	bne.n	800667c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065aa:	881a      	ldrh	r2, [r3, #0]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b6:	1c9a      	adds	r2, r3, #2
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	3b01      	subs	r3, #1
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065ca:	e057      	b.n	800667c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	f003 0302 	and.w	r3, r3, #2
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d11b      	bne.n	8006612 <HAL_SPI_TransmitReceive+0x176>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065de:	b29b      	uxth	r3, r3
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d016      	beq.n	8006612 <HAL_SPI_TransmitReceive+0x176>
 80065e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d113      	bne.n	8006612 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ee:	881a      	ldrh	r2, [r3, #0]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fa:	1c9a      	adds	r2, r3, #2
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006604:	b29b      	uxth	r3, r3
 8006606:	3b01      	subs	r3, #1
 8006608:	b29a      	uxth	r2, r3
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800660e:	2300      	movs	r3, #0
 8006610:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	f003 0301 	and.w	r3, r3, #1
 800661c:	2b01      	cmp	r3, #1
 800661e:	d119      	bne.n	8006654 <HAL_SPI_TransmitReceive+0x1b8>
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006624:	b29b      	uxth	r3, r3
 8006626:	2b00      	cmp	r3, #0
 8006628:	d014      	beq.n	8006654 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68da      	ldr	r2, [r3, #12]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006634:	b292      	uxth	r2, r2
 8006636:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663c:	1c9a      	adds	r2, r3, #2
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006646:	b29b      	uxth	r3, r3
 8006648:	3b01      	subs	r3, #1
 800664a:	b29a      	uxth	r2, r3
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006650:	2301      	movs	r3, #1
 8006652:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006654:	f7fc fa6c 	bl	8002b30 <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006660:	429a      	cmp	r2, r3
 8006662:	d80b      	bhi.n	800667c <HAL_SPI_TransmitReceive+0x1e0>
 8006664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006666:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800666a:	d007      	beq.n	800667c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800666c:	2303      	movs	r3, #3
 800666e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2201      	movs	r2, #1
 8006676:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800667a:	e0b5      	b.n	80067e8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006680:	b29b      	uxth	r3, r3
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1a2      	bne.n	80065cc <HAL_SPI_TransmitReceive+0x130>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800668a:	b29b      	uxth	r3, r3
 800668c:	2b00      	cmp	r3, #0
 800668e:	d19d      	bne.n	80065cc <HAL_SPI_TransmitReceive+0x130>
 8006690:	e080      	b.n	8006794 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d002      	beq.n	80066a0 <HAL_SPI_TransmitReceive+0x204>
 800669a:	8b7b      	ldrh	r3, [r7, #26]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d16f      	bne.n	8006780 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	330c      	adds	r3, #12
 80066aa:	7812      	ldrb	r2, [r2, #0]
 80066ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b2:	1c5a      	adds	r2, r3, #1
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066bc:	b29b      	uxth	r3, r3
 80066be:	3b01      	subs	r3, #1
 80066c0:	b29a      	uxth	r2, r3
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066c6:	e05b      	b.n	8006780 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	f003 0302 	and.w	r3, r3, #2
 80066d2:	2b02      	cmp	r3, #2
 80066d4:	d11c      	bne.n	8006710 <HAL_SPI_TransmitReceive+0x274>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066da:	b29b      	uxth	r3, r3
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d017      	beq.n	8006710 <HAL_SPI_TransmitReceive+0x274>
 80066e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d114      	bne.n	8006710 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	330c      	adds	r3, #12
 80066f0:	7812      	ldrb	r2, [r2, #0]
 80066f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f8:	1c5a      	adds	r2, r3, #1
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006702:	b29b      	uxth	r3, r3
 8006704:	3b01      	subs	r3, #1
 8006706:	b29a      	uxth	r2, r3
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800670c:	2300      	movs	r3, #0
 800670e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	f003 0301 	and.w	r3, r3, #1
 800671a:	2b01      	cmp	r3, #1
 800671c:	d119      	bne.n	8006752 <HAL_SPI_TransmitReceive+0x2b6>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006722:	b29b      	uxth	r3, r3
 8006724:	2b00      	cmp	r3, #0
 8006726:	d014      	beq.n	8006752 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68da      	ldr	r2, [r3, #12]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006732:	b2d2      	uxtb	r2, r2
 8006734:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673a:	1c5a      	adds	r2, r3, #1
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006744:	b29b      	uxth	r3, r3
 8006746:	3b01      	subs	r3, #1
 8006748:	b29a      	uxth	r2, r3
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800674e:	2301      	movs	r3, #1
 8006750:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006752:	f7fc f9ed 	bl	8002b30 <HAL_GetTick>
 8006756:	4602      	mov	r2, r0
 8006758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800675e:	429a      	cmp	r2, r3
 8006760:	d803      	bhi.n	800676a <HAL_SPI_TransmitReceive+0x2ce>
 8006762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006764:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006768:	d102      	bne.n	8006770 <HAL_SPI_TransmitReceive+0x2d4>
 800676a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676c:	2b00      	cmp	r3, #0
 800676e:	d107      	bne.n	8006780 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800677e:	e033      	b.n	80067e8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006784:	b29b      	uxth	r3, r3
 8006786:	2b00      	cmp	r3, #0
 8006788:	d19e      	bne.n	80066c8 <HAL_SPI_TransmitReceive+0x22c>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800678e:	b29b      	uxth	r3, r3
 8006790:	2b00      	cmp	r3, #0
 8006792:	d199      	bne.n	80066c8 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006796:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f000 fa65 	bl	8006c68 <SPI_EndRxTxTransaction>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d006      	beq.n	80067b2 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2220      	movs	r2, #32
 80067ae:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80067b0:	e01a      	b.n	80067e8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d10a      	bne.n	80067d0 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067ba:	2300      	movs	r3, #0
 80067bc:	617b      	str	r3, [r7, #20]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	617b      	str	r3, [r7, #20]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	617b      	str	r3, [r7, #20]
 80067ce:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d003      	beq.n	80067e0 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067de:	e003      	b.n	80067e8 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80067f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3730      	adds	r7, #48	; 0x30
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b086      	sub	sp, #24
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	4613      	mov	r3, r2
 8006808:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800680a:	2300      	movs	r3, #0
 800680c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006814:	2b01      	cmp	r3, #1
 8006816:	d101      	bne.n	800681c <HAL_SPI_Transmit_DMA+0x20>
 8006818:	2302      	movs	r3, #2
 800681a:	e097      	b.n	800694c <HAL_SPI_Transmit_DMA+0x150>
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b01      	cmp	r3, #1
 800682e:	d002      	beq.n	8006836 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8006830:	2302      	movs	r3, #2
 8006832:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006834:	e085      	b.n	8006942 <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d002      	beq.n	8006842 <HAL_SPI_Transmit_DMA+0x46>
 800683c:	88fb      	ldrh	r3, [r7, #6]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d102      	bne.n	8006848 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006846:	e07c      	b.n	8006942 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2203      	movs	r2, #3
 800684c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2200      	movs	r2, #0
 8006854:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	68ba      	ldr	r2, [r7, #8]
 800685a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	88fa      	ldrh	r2, [r7, #6]
 8006860:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	88fa      	ldrh	r2, [r7, #6]
 8006866:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2200      	movs	r2, #0
 8006872:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2200      	movs	r2, #0
 8006884:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800688e:	d10f      	bne.n	80068b0 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800689e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068ae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068b4:	4a27      	ldr	r2, [pc, #156]	; (8006954 <HAL_SPI_Transmit_DMA+0x158>)
 80068b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068bc:	4a26      	ldr	r2, [pc, #152]	; (8006958 <HAL_SPI_Transmit_DMA+0x15c>)
 80068be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068c4:	4a25      	ldr	r2, [pc, #148]	; (800695c <HAL_SPI_Transmit_DMA+0x160>)
 80068c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068cc:	2200      	movs	r2, #0
 80068ce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d8:	4619      	mov	r1, r3
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	330c      	adds	r3, #12
 80068e0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068e6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80068e8:	f7fc fc0e 	bl	8003108 <HAL_DMA_Start_IT>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d008      	beq.n	8006904 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068f6:	f043 0210 	orr.w	r2, r3, #16
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	75fb      	strb	r3, [r7, #23]

    goto error;
 8006902:	e01e      	b.n	8006942 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800690e:	2b40      	cmp	r3, #64	; 0x40
 8006910:	d007      	beq.n	8006922 <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006920:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	685a      	ldr	r2, [r3, #4]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f042 0220 	orr.w	r2, r2, #32
 8006930:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	685a      	ldr	r2, [r3, #4]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f042 0202 	orr.w	r2, r2, #2
 8006940:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800694a:	7dfb      	ldrb	r3, [r7, #23]
}
 800694c:	4618      	mov	r0, r3
 800694e:	3718      	adds	r7, #24
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	08006a31 	.word	0x08006a31
 8006958:	08006989 	.word	0x08006989
 800695c:	08006a4d 	.word	0x08006a4d

08006960 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b086      	sub	sp, #24
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006994:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006996:	f7fc f8cb 	bl	8002b30 <HAL_GetTick>
 800699a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069aa:	d03b      	beq.n	8006a24 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	685a      	ldr	r2, [r3, #4]
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f022 0220 	bic.w	r2, r2, #32
 80069ba:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	685a      	ldr	r2, [r3, #4]
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f022 0202 	bic.w	r2, r2, #2
 80069ca:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	2164      	movs	r1, #100	; 0x64
 80069d0:	6978      	ldr	r0, [r7, #20]
 80069d2:	f000 f949 	bl	8006c68 <SPI_EndRxTxTransaction>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d005      	beq.n	80069e8 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069e0:	f043 0220 	orr.w	r2, r3, #32
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10a      	bne.n	8006a06 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80069f0:	2300      	movs	r3, #0
 80069f2:	60fb      	str	r3, [r7, #12]
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	60fb      	str	r3, [r7, #12]
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	60fb      	str	r3, [r7, #12]
 8006a04:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d003      	beq.n	8006a24 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006a1c:	6978      	ldr	r0, [r7, #20]
 8006a1e:	f7ff ffa9 	bl	8006974 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006a22:	e002      	b.n	8006a2a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006a24:	6978      	ldr	r0, [r7, #20]
 8006a26:	f7fb ff4d 	bl	80028c4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006a2a:	3718      	adds	r7, #24
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	f7ff ff8e 	bl	8006960 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006a44:	bf00      	nop
 8006a46:	3710      	adds	r7, #16
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a58:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f022 0203 	bic.w	r2, r2, #3
 8006a68:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a6e:	f043 0210 	orr.w	r2, r3, #16
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2201      	movs	r2, #1
 8006a7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f7ff ff78 	bl	8006974 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006a84:	bf00      	nop
 8006a86:	3710      	adds	r7, #16
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b088      	sub	sp, #32
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	603b      	str	r3, [r7, #0]
 8006a98:	4613      	mov	r3, r2
 8006a9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006a9c:	f7fc f848 	bl	8002b30 <HAL_GetTick>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa4:	1a9b      	subs	r3, r3, r2
 8006aa6:	683a      	ldr	r2, [r7, #0]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006aac:	f7fc f840 	bl	8002b30 <HAL_GetTick>
 8006ab0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006ab2:	4b39      	ldr	r3, [pc, #228]	; (8006b98 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	015b      	lsls	r3, r3, #5
 8006ab8:	0d1b      	lsrs	r3, r3, #20
 8006aba:	69fa      	ldr	r2, [r7, #28]
 8006abc:	fb02 f303 	mul.w	r3, r2, r3
 8006ac0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ac2:	e054      	b.n	8006b6e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006aca:	d050      	beq.n	8006b6e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006acc:	f7fc f830 	bl	8002b30 <HAL_GetTick>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	69fa      	ldr	r2, [r7, #28]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d902      	bls.n	8006ae2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d13d      	bne.n	8006b5e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	685a      	ldr	r2, [r3, #4]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006af0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006afa:	d111      	bne.n	8006b20 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b04:	d004      	beq.n	8006b10 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b0e:	d107      	bne.n	8006b20 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b28:	d10f      	bne.n	8006b4a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b38:	601a      	str	r2, [r3, #0]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	e017      	b.n	8006b8e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d101      	bne.n	8006b68 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006b64:	2300      	movs	r3, #0
 8006b66:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	689a      	ldr	r2, [r3, #8]
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	4013      	ands	r3, r2
 8006b78:	68ba      	ldr	r2, [r7, #8]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	bf0c      	ite	eq
 8006b7e:	2301      	moveq	r3, #1
 8006b80:	2300      	movne	r3, #0
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	461a      	mov	r2, r3
 8006b86:	79fb      	ldrb	r3, [r7, #7]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d19b      	bne.n	8006ac4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3720      	adds	r7, #32
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	2000001c 	.word	0x2000001c

08006b9c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b086      	sub	sp, #24
 8006ba0:	af02      	add	r7, sp, #8
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bb0:	d111      	bne.n	8006bd6 <SPI_EndRxTransaction+0x3a>
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bba:	d004      	beq.n	8006bc6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bc4:	d107      	bne.n	8006bd6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bd4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bde:	d12a      	bne.n	8006c36 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006be8:	d012      	beq.n	8006c10 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	9300      	str	r3, [sp, #0]
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	2180      	movs	r1, #128	; 0x80
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f7ff ff49 	bl	8006a8c <SPI_WaitFlagStateUntilTimeout>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d02d      	beq.n	8006c5c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c04:	f043 0220 	orr.w	r2, r3, #32
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e026      	b.n	8006c5e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	9300      	str	r3, [sp, #0]
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	2200      	movs	r2, #0
 8006c18:	2101      	movs	r1, #1
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f7ff ff36 	bl	8006a8c <SPI_WaitFlagStateUntilTimeout>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d01a      	beq.n	8006c5c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c2a:	f043 0220 	orr.w	r2, r3, #32
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	e013      	b.n	8006c5e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	9300      	str	r3, [sp, #0]
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	2101      	movs	r1, #1
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f7ff ff23 	bl	8006a8c <SPI_WaitFlagStateUntilTimeout>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d007      	beq.n	8006c5c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c50:	f043 0220 	orr.w	r2, r3, #32
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006c58:	2303      	movs	r3, #3
 8006c5a:	e000      	b.n	8006c5e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3710      	adds	r7, #16
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
	...

08006c68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b088      	sub	sp, #32
 8006c6c:	af02      	add	r7, sp, #8
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	9300      	str	r3, [sp, #0]
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	2102      	movs	r1, #2
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	f7ff ff04 	bl	8006a8c <SPI_WaitFlagStateUntilTimeout>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d007      	beq.n	8006c9a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c8e:	f043 0220 	orr.w	r2, r3, #32
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e032      	b.n	8006d00 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006c9a:	4b1b      	ldr	r3, [pc, #108]	; (8006d08 <SPI_EndRxTxTransaction+0xa0>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a1b      	ldr	r2, [pc, #108]	; (8006d0c <SPI_EndRxTxTransaction+0xa4>)
 8006ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ca4:	0d5b      	lsrs	r3, r3, #21
 8006ca6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006caa:	fb02 f303 	mul.w	r3, r2, r3
 8006cae:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cb8:	d112      	bne.n	8006ce0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	9300      	str	r3, [sp, #0]
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	2180      	movs	r1, #128	; 0x80
 8006cc4:	68f8      	ldr	r0, [r7, #12]
 8006cc6:	f7ff fee1 	bl	8006a8c <SPI_WaitFlagStateUntilTimeout>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d016      	beq.n	8006cfe <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cd4:	f043 0220 	orr.w	r2, r3, #32
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	e00f      	b.n	8006d00 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00a      	beq.n	8006cfc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cf6:	2b80      	cmp	r3, #128	; 0x80
 8006cf8:	d0f2      	beq.n	8006ce0 <SPI_EndRxTxTransaction+0x78>
 8006cfa:	e000      	b.n	8006cfe <SPI_EndRxTxTransaction+0x96>
        break;
 8006cfc:	bf00      	nop
  }

  return HAL_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3718      	adds	r7, #24
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	2000001c 	.word	0x2000001c
 8006d0c:	165e9f81 	.word	0x165e9f81

08006d10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d101      	bne.n	8006d22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e041      	b.n	8006da6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d106      	bne.n	8006d3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f7fb fcf6 	bl	8002728 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2202      	movs	r2, #2
 8006d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	3304      	adds	r3, #4
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	4610      	mov	r0, r2
 8006d50:	f000 f9c0 	bl	80070d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3708      	adds	r7, #8
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
	...

08006db0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d001      	beq.n	8006dc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e04e      	b.n	8006e66 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2202      	movs	r2, #2
 8006dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68da      	ldr	r2, [r3, #12]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f042 0201 	orr.w	r2, r2, #1
 8006dde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a23      	ldr	r2, [pc, #140]	; (8006e74 <HAL_TIM_Base_Start_IT+0xc4>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d022      	beq.n	8006e30 <HAL_TIM_Base_Start_IT+0x80>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006df2:	d01d      	beq.n	8006e30 <HAL_TIM_Base_Start_IT+0x80>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a1f      	ldr	r2, [pc, #124]	; (8006e78 <HAL_TIM_Base_Start_IT+0xc8>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d018      	beq.n	8006e30 <HAL_TIM_Base_Start_IT+0x80>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a1e      	ldr	r2, [pc, #120]	; (8006e7c <HAL_TIM_Base_Start_IT+0xcc>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d013      	beq.n	8006e30 <HAL_TIM_Base_Start_IT+0x80>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a1c      	ldr	r2, [pc, #112]	; (8006e80 <HAL_TIM_Base_Start_IT+0xd0>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d00e      	beq.n	8006e30 <HAL_TIM_Base_Start_IT+0x80>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a1b      	ldr	r2, [pc, #108]	; (8006e84 <HAL_TIM_Base_Start_IT+0xd4>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d009      	beq.n	8006e30 <HAL_TIM_Base_Start_IT+0x80>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a19      	ldr	r2, [pc, #100]	; (8006e88 <HAL_TIM_Base_Start_IT+0xd8>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d004      	beq.n	8006e30 <HAL_TIM_Base_Start_IT+0x80>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a18      	ldr	r2, [pc, #96]	; (8006e8c <HAL_TIM_Base_Start_IT+0xdc>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d111      	bne.n	8006e54 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	f003 0307 	and.w	r3, r3, #7
 8006e3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2b06      	cmp	r3, #6
 8006e40:	d010      	beq.n	8006e64 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f042 0201 	orr.w	r2, r2, #1
 8006e50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e52:	e007      	b.n	8006e64 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f042 0201 	orr.w	r2, r2, #1
 8006e62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	40010000 	.word	0x40010000
 8006e78:	40000400 	.word	0x40000400
 8006e7c:	40000800 	.word	0x40000800
 8006e80:	40000c00 	.word	0x40000c00
 8006e84:	40010400 	.word	0x40010400
 8006e88:	40014000 	.word	0x40014000
 8006e8c:	40001800 	.word	0x40001800

08006e90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	f003 0302 	and.w	r3, r3, #2
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d020      	beq.n	8006ef4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f003 0302 	and.w	r3, r3, #2
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d01b      	beq.n	8006ef4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f06f 0202 	mvn.w	r2, #2
 8006ec4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	699b      	ldr	r3, [r3, #24]
 8006ed2:	f003 0303 	and.w	r3, r3, #3
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d003      	beq.n	8006ee2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 f8dc 	bl	8007098 <HAL_TIM_IC_CaptureCallback>
 8006ee0:	e005      	b.n	8006eee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f8ce 	bl	8007084 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 f8df 	bl	80070ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	f003 0304 	and.w	r3, r3, #4
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d020      	beq.n	8006f40 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f003 0304 	and.w	r3, r3, #4
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d01b      	beq.n	8006f40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f06f 0204 	mvn.w	r2, #4
 8006f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2202      	movs	r2, #2
 8006f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	699b      	ldr	r3, [r3, #24]
 8006f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d003      	beq.n	8006f2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 f8b6 	bl	8007098 <HAL_TIM_IC_CaptureCallback>
 8006f2c:	e005      	b.n	8006f3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 f8a8 	bl	8007084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 f8b9 	bl	80070ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	f003 0308 	and.w	r3, r3, #8
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d020      	beq.n	8006f8c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f003 0308 	and.w	r3, r3, #8
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d01b      	beq.n	8006f8c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f06f 0208 	mvn.w	r2, #8
 8006f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2204      	movs	r2, #4
 8006f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	69db      	ldr	r3, [r3, #28]
 8006f6a:	f003 0303 	and.w	r3, r3, #3
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d003      	beq.n	8006f7a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 f890 	bl	8007098 <HAL_TIM_IC_CaptureCallback>
 8006f78:	e005      	b.n	8006f86 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f882 	bl	8007084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 f893 	bl	80070ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	f003 0310 	and.w	r3, r3, #16
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d020      	beq.n	8006fd8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f003 0310 	and.w	r3, r3, #16
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d01b      	beq.n	8006fd8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f06f 0210 	mvn.w	r2, #16
 8006fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2208      	movs	r2, #8
 8006fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	69db      	ldr	r3, [r3, #28]
 8006fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d003      	beq.n	8006fc6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 f86a 	bl	8007098 <HAL_TIM_IC_CaptureCallback>
 8006fc4:	e005      	b.n	8006fd2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 f85c 	bl	8007084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 f86d 	bl	80070ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	f003 0301 	and.w	r3, r3, #1
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00c      	beq.n	8006ffc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f003 0301 	and.w	r3, r3, #1
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d007      	beq.n	8006ffc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f06f 0201 	mvn.w	r2, #1
 8006ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 f83a 	bl	8007070 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00c      	beq.n	8007020 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800700c:	2b00      	cmp	r3, #0
 800700e:	d007      	beq.n	8007020 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 f98c 	bl	8007338 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00c      	beq.n	8007044 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007030:	2b00      	cmp	r3, #0
 8007032:	d007      	beq.n	8007044 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800703c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 f83e 	bl	80070c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	f003 0320 	and.w	r3, r3, #32
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00c      	beq.n	8007068 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f003 0320 	and.w	r3, r3, #32
 8007054:	2b00      	cmp	r3, #0
 8007056:	d007      	beq.n	8007068 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f06f 0220 	mvn.w	r2, #32
 8007060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 f95e 	bl	8007324 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007068:	bf00      	nop
 800706a:	3710      	adds	r7, #16
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007078:	bf00      	nop
 800707a:	370c      	adds	r7, #12
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800708c:	bf00      	nop
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80070a0:	bf00      	nop
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070b4:	bf00      	nop
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070c8:	bf00      	nop
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a46      	ldr	r2, [pc, #280]	; (8007200 <TIM_Base_SetConfig+0x12c>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d013      	beq.n	8007114 <TIM_Base_SetConfig+0x40>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070f2:	d00f      	beq.n	8007114 <TIM_Base_SetConfig+0x40>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a43      	ldr	r2, [pc, #268]	; (8007204 <TIM_Base_SetConfig+0x130>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d00b      	beq.n	8007114 <TIM_Base_SetConfig+0x40>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a42      	ldr	r2, [pc, #264]	; (8007208 <TIM_Base_SetConfig+0x134>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d007      	beq.n	8007114 <TIM_Base_SetConfig+0x40>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a41      	ldr	r2, [pc, #260]	; (800720c <TIM_Base_SetConfig+0x138>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d003      	beq.n	8007114 <TIM_Base_SetConfig+0x40>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a40      	ldr	r2, [pc, #256]	; (8007210 <TIM_Base_SetConfig+0x13c>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d108      	bne.n	8007126 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800711a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	4313      	orrs	r3, r2
 8007124:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a35      	ldr	r2, [pc, #212]	; (8007200 <TIM_Base_SetConfig+0x12c>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d02b      	beq.n	8007186 <TIM_Base_SetConfig+0xb2>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007134:	d027      	beq.n	8007186 <TIM_Base_SetConfig+0xb2>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a32      	ldr	r2, [pc, #200]	; (8007204 <TIM_Base_SetConfig+0x130>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d023      	beq.n	8007186 <TIM_Base_SetConfig+0xb2>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a31      	ldr	r2, [pc, #196]	; (8007208 <TIM_Base_SetConfig+0x134>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d01f      	beq.n	8007186 <TIM_Base_SetConfig+0xb2>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a30      	ldr	r2, [pc, #192]	; (800720c <TIM_Base_SetConfig+0x138>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d01b      	beq.n	8007186 <TIM_Base_SetConfig+0xb2>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a2f      	ldr	r2, [pc, #188]	; (8007210 <TIM_Base_SetConfig+0x13c>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d017      	beq.n	8007186 <TIM_Base_SetConfig+0xb2>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a2e      	ldr	r2, [pc, #184]	; (8007214 <TIM_Base_SetConfig+0x140>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d013      	beq.n	8007186 <TIM_Base_SetConfig+0xb2>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a2d      	ldr	r2, [pc, #180]	; (8007218 <TIM_Base_SetConfig+0x144>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d00f      	beq.n	8007186 <TIM_Base_SetConfig+0xb2>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a2c      	ldr	r2, [pc, #176]	; (800721c <TIM_Base_SetConfig+0x148>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d00b      	beq.n	8007186 <TIM_Base_SetConfig+0xb2>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a2b      	ldr	r2, [pc, #172]	; (8007220 <TIM_Base_SetConfig+0x14c>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d007      	beq.n	8007186 <TIM_Base_SetConfig+0xb2>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a2a      	ldr	r2, [pc, #168]	; (8007224 <TIM_Base_SetConfig+0x150>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d003      	beq.n	8007186 <TIM_Base_SetConfig+0xb2>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a29      	ldr	r2, [pc, #164]	; (8007228 <TIM_Base_SetConfig+0x154>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d108      	bne.n	8007198 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800718c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	4313      	orrs	r3, r2
 8007196:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	695b      	ldr	r3, [r3, #20]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	689a      	ldr	r2, [r3, #8]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a10      	ldr	r2, [pc, #64]	; (8007200 <TIM_Base_SetConfig+0x12c>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d003      	beq.n	80071cc <TIM_Base_SetConfig+0xf8>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a12      	ldr	r2, [pc, #72]	; (8007210 <TIM_Base_SetConfig+0x13c>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d103      	bne.n	80071d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	691a      	ldr	r2, [r3, #16]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	f003 0301 	and.w	r3, r3, #1
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d105      	bne.n	80071f2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	f023 0201 	bic.w	r2, r3, #1
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	611a      	str	r2, [r3, #16]
  }
}
 80071f2:	bf00      	nop
 80071f4:	3714      	adds	r7, #20
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr
 80071fe:	bf00      	nop
 8007200:	40010000 	.word	0x40010000
 8007204:	40000400 	.word	0x40000400
 8007208:	40000800 	.word	0x40000800
 800720c:	40000c00 	.word	0x40000c00
 8007210:	40010400 	.word	0x40010400
 8007214:	40014000 	.word	0x40014000
 8007218:	40014400 	.word	0x40014400
 800721c:	40014800 	.word	0x40014800
 8007220:	40001800 	.word	0x40001800
 8007224:	40001c00 	.word	0x40001c00
 8007228:	40002000 	.word	0x40002000

0800722c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800722c:	b480      	push	{r7}
 800722e:	b085      	sub	sp, #20
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800723c:	2b01      	cmp	r3, #1
 800723e:	d101      	bne.n	8007244 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007240:	2302      	movs	r3, #2
 8007242:	e05a      	b.n	80072fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2202      	movs	r2, #2
 8007250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800726a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	4313      	orrs	r3, r2
 8007274:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a21      	ldr	r2, [pc, #132]	; (8007308 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d022      	beq.n	80072ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007290:	d01d      	beq.n	80072ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a1d      	ldr	r2, [pc, #116]	; (800730c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d018      	beq.n	80072ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a1b      	ldr	r2, [pc, #108]	; (8007310 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d013      	beq.n	80072ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a1a      	ldr	r2, [pc, #104]	; (8007314 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d00e      	beq.n	80072ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a18      	ldr	r2, [pc, #96]	; (8007318 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d009      	beq.n	80072ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a17      	ldr	r2, [pc, #92]	; (800731c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d004      	beq.n	80072ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a15      	ldr	r2, [pc, #84]	; (8007320 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d10c      	bne.n	80072e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	68ba      	ldr	r2, [r7, #8]
 80072dc:	4313      	orrs	r3, r2
 80072de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68ba      	ldr	r2, [r7, #8]
 80072e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3714      	adds	r7, #20
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	40010000 	.word	0x40010000
 800730c:	40000400 	.word	0x40000400
 8007310:	40000800 	.word	0x40000800
 8007314:	40000c00 	.word	0x40000c00
 8007318:	40010400 	.word	0x40010400
 800731c:	40014000 	.word	0x40014000
 8007320:	40001800 	.word	0x40001800

08007324 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d101      	bne.n	800735e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e042      	b.n	80073e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007364:	b2db      	uxtb	r3, r3
 8007366:	2b00      	cmp	r3, #0
 8007368:	d106      	bne.n	8007378 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f7fb fa00 	bl	8002778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2224      	movs	r2, #36	; 0x24
 800737c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	68da      	ldr	r2, [r3, #12]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800738e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 fdbd 	bl	8007f10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	691a      	ldr	r2, [r3, #16]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	695a      	ldr	r2, [r3, #20]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	68da      	ldr	r2, [r3, #12]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80073c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2220      	movs	r2, #32
 80073d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2220      	movs	r2, #32
 80073d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3708      	adds	r7, #8
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b08a      	sub	sp, #40	; 0x28
 80073f0:	af02      	add	r7, sp, #8
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	603b      	str	r3, [r7, #0]
 80073f8:	4613      	mov	r3, r2
 80073fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80073fc:	2300      	movs	r3, #0
 80073fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007406:	b2db      	uxtb	r3, r3
 8007408:	2b20      	cmp	r3, #32
 800740a:	d175      	bne.n	80074f8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d002      	beq.n	8007418 <HAL_UART_Transmit+0x2c>
 8007412:	88fb      	ldrh	r3, [r7, #6]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d101      	bne.n	800741c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	e06e      	b.n	80074fa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2200      	movs	r2, #0
 8007420:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2221      	movs	r2, #33	; 0x21
 8007426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800742a:	f7fb fb81 	bl	8002b30 <HAL_GetTick>
 800742e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	88fa      	ldrh	r2, [r7, #6]
 8007434:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	88fa      	ldrh	r2, [r7, #6]
 800743a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007444:	d108      	bne.n	8007458 <HAL_UART_Transmit+0x6c>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d104      	bne.n	8007458 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800744e:	2300      	movs	r3, #0
 8007450:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	61bb      	str	r3, [r7, #24]
 8007456:	e003      	b.n	8007460 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800745c:	2300      	movs	r3, #0
 800745e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007460:	e02e      	b.n	80074c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	9300      	str	r3, [sp, #0]
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	2200      	movs	r2, #0
 800746a:	2180      	movs	r1, #128	; 0x80
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	f000 fb1f 	bl	8007ab0 <UART_WaitOnFlagUntilTimeout>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d005      	beq.n	8007484 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2220      	movs	r2, #32
 800747c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8007480:	2303      	movs	r3, #3
 8007482:	e03a      	b.n	80074fa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d10b      	bne.n	80074a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	881b      	ldrh	r3, [r3, #0]
 800748e:	461a      	mov	r2, r3
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007498:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	3302      	adds	r3, #2
 800749e:	61bb      	str	r3, [r7, #24]
 80074a0:	e007      	b.n	80074b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	781a      	ldrb	r2, [r3, #0]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	3301      	adds	r3, #1
 80074b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	3b01      	subs	r3, #1
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d1cb      	bne.n	8007462 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	2200      	movs	r2, #0
 80074d2:	2140      	movs	r1, #64	; 0x40
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	f000 faeb 	bl	8007ab0 <UART_WaitOnFlagUntilTimeout>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d005      	beq.n	80074ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2220      	movs	r2, #32
 80074e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80074e8:	2303      	movs	r3, #3
 80074ea:	e006      	b.n	80074fa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2220      	movs	r2, #32
 80074f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80074f4:	2300      	movs	r3, #0
 80074f6:	e000      	b.n	80074fa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80074f8:	2302      	movs	r3, #2
  }
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3720      	adds	r7, #32
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}

08007502 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007502:	b580      	push	{r7, lr}
 8007504:	b084      	sub	sp, #16
 8007506:	af00      	add	r7, sp, #0
 8007508:	60f8      	str	r0, [r7, #12]
 800750a:	60b9      	str	r1, [r7, #8]
 800750c:	4613      	mov	r3, r2
 800750e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007516:	b2db      	uxtb	r3, r3
 8007518:	2b20      	cmp	r3, #32
 800751a:	d112      	bne.n	8007542 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d002      	beq.n	8007528 <HAL_UART_Receive_IT+0x26>
 8007522:	88fb      	ldrh	r3, [r7, #6]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d101      	bne.n	800752c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007528:	2301      	movs	r3, #1
 800752a:	e00b      	b.n	8007544 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2200      	movs	r2, #0
 8007530:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007532:	88fb      	ldrh	r3, [r7, #6]
 8007534:	461a      	mov	r2, r3
 8007536:	68b9      	ldr	r1, [r7, #8]
 8007538:	68f8      	ldr	r0, [r7, #12]
 800753a:	f000 fb12 	bl	8007b62 <UART_Start_Receive_IT>
 800753e:	4603      	mov	r3, r0
 8007540:	e000      	b.n	8007544 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007542:	2302      	movs	r3, #2
  }
}
 8007544:	4618      	mov	r0, r3
 8007546:	3710      	adds	r7, #16
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b0ba      	sub	sp, #232	; 0xe8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	695b      	ldr	r3, [r3, #20]
 800756e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007572:	2300      	movs	r3, #0
 8007574:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007578:	2300      	movs	r3, #0
 800757a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800757e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007582:	f003 030f 	and.w	r3, r3, #15
 8007586:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800758a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800758e:	2b00      	cmp	r3, #0
 8007590:	d10f      	bne.n	80075b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007596:	f003 0320 	and.w	r3, r3, #32
 800759a:	2b00      	cmp	r3, #0
 800759c:	d009      	beq.n	80075b2 <HAL_UART_IRQHandler+0x66>
 800759e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075a2:	f003 0320 	and.w	r3, r3, #32
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d003      	beq.n	80075b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 fbf2 	bl	8007d94 <UART_Receive_IT>
      return;
 80075b0:	e25b      	b.n	8007a6a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80075b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	f000 80de 	beq.w	8007778 <HAL_UART_IRQHandler+0x22c>
 80075bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075c0:	f003 0301 	and.w	r3, r3, #1
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d106      	bne.n	80075d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80075c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	f000 80d1 	beq.w	8007778 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80075d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075da:	f003 0301 	and.w	r3, r3, #1
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00b      	beq.n	80075fa <HAL_UART_IRQHandler+0xae>
 80075e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d005      	beq.n	80075fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075f2:	f043 0201 	orr.w	r2, r3, #1
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80075fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075fe:	f003 0304 	and.w	r3, r3, #4
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00b      	beq.n	800761e <HAL_UART_IRQHandler+0xd2>
 8007606:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800760a:	f003 0301 	and.w	r3, r3, #1
 800760e:	2b00      	cmp	r3, #0
 8007610:	d005      	beq.n	800761e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007616:	f043 0202 	orr.w	r2, r3, #2
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800761e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007622:	f003 0302 	and.w	r3, r3, #2
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00b      	beq.n	8007642 <HAL_UART_IRQHandler+0xf6>
 800762a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800762e:	f003 0301 	and.w	r3, r3, #1
 8007632:	2b00      	cmp	r3, #0
 8007634:	d005      	beq.n	8007642 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800763a:	f043 0204 	orr.w	r2, r3, #4
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007646:	f003 0308 	and.w	r3, r3, #8
 800764a:	2b00      	cmp	r3, #0
 800764c:	d011      	beq.n	8007672 <HAL_UART_IRQHandler+0x126>
 800764e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007652:	f003 0320 	and.w	r3, r3, #32
 8007656:	2b00      	cmp	r3, #0
 8007658:	d105      	bne.n	8007666 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800765a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800765e:	f003 0301 	and.w	r3, r3, #1
 8007662:	2b00      	cmp	r3, #0
 8007664:	d005      	beq.n	8007672 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800766a:	f043 0208 	orr.w	r2, r3, #8
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007676:	2b00      	cmp	r3, #0
 8007678:	f000 81f2 	beq.w	8007a60 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800767c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007680:	f003 0320 	and.w	r3, r3, #32
 8007684:	2b00      	cmp	r3, #0
 8007686:	d008      	beq.n	800769a <HAL_UART_IRQHandler+0x14e>
 8007688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800768c:	f003 0320 	and.w	r3, r3, #32
 8007690:	2b00      	cmp	r3, #0
 8007692:	d002      	beq.n	800769a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 fb7d 	bl	8007d94 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	695b      	ldr	r3, [r3, #20]
 80076a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a4:	2b40      	cmp	r3, #64	; 0x40
 80076a6:	bf0c      	ite	eq
 80076a8:	2301      	moveq	r3, #1
 80076aa:	2300      	movne	r3, #0
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076b6:	f003 0308 	and.w	r3, r3, #8
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d103      	bne.n	80076c6 <HAL_UART_IRQHandler+0x17a>
 80076be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d04f      	beq.n	8007766 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 fa85 	bl	8007bd6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	695b      	ldr	r3, [r3, #20]
 80076d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076d6:	2b40      	cmp	r3, #64	; 0x40
 80076d8:	d141      	bne.n	800775e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	3314      	adds	r3, #20
 80076e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076e8:	e853 3f00 	ldrex	r3, [r3]
 80076ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80076f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	3314      	adds	r3, #20
 8007702:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007706:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800770a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007712:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007716:	e841 2300 	strex	r3, r2, [r1]
 800771a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800771e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d1d9      	bne.n	80076da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800772a:	2b00      	cmp	r3, #0
 800772c:	d013      	beq.n	8007756 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007732:	4a7e      	ldr	r2, [pc, #504]	; (800792c <HAL_UART_IRQHandler+0x3e0>)
 8007734:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800773a:	4618      	mov	r0, r3
 800773c:	f7fb fdac 	bl	8003298 <HAL_DMA_Abort_IT>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d016      	beq.n	8007774 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800774a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007750:	4610      	mov	r0, r2
 8007752:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007754:	e00e      	b.n	8007774 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f994 	bl	8007a84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800775c:	e00a      	b.n	8007774 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 f990 	bl	8007a84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007764:	e006      	b.n	8007774 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f98c 	bl	8007a84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007772:	e175      	b.n	8007a60 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007774:	bf00      	nop
    return;
 8007776:	e173      	b.n	8007a60 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800777c:	2b01      	cmp	r3, #1
 800777e:	f040 814f 	bne.w	8007a20 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007786:	f003 0310 	and.w	r3, r3, #16
 800778a:	2b00      	cmp	r3, #0
 800778c:	f000 8148 	beq.w	8007a20 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007794:	f003 0310 	and.w	r3, r3, #16
 8007798:	2b00      	cmp	r3, #0
 800779a:	f000 8141 	beq.w	8007a20 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800779e:	2300      	movs	r3, #0
 80077a0:	60bb      	str	r3, [r7, #8]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	60bb      	str	r3, [r7, #8]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	60bb      	str	r3, [r7, #8]
 80077b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	695b      	ldr	r3, [r3, #20]
 80077ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077be:	2b40      	cmp	r3, #64	; 0x40
 80077c0:	f040 80b6 	bne.w	8007930 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80077d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	f000 8145 	beq.w	8007a64 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80077de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077e2:	429a      	cmp	r2, r3
 80077e4:	f080 813e 	bcs.w	8007a64 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077ee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077f4:	69db      	ldr	r3, [r3, #28]
 80077f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077fa:	f000 8088 	beq.w	800790e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	330c      	adds	r3, #12
 8007804:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007808:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800780c:	e853 3f00 	ldrex	r3, [r3]
 8007810:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007814:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007818:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800781c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	330c      	adds	r3, #12
 8007826:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800782a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800782e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007832:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007836:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800783a:	e841 2300 	strex	r3, r2, [r1]
 800783e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007842:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007846:	2b00      	cmp	r3, #0
 8007848:	d1d9      	bne.n	80077fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	3314      	adds	r3, #20
 8007850:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007852:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007854:	e853 3f00 	ldrex	r3, [r3]
 8007858:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800785a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800785c:	f023 0301 	bic.w	r3, r3, #1
 8007860:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	3314      	adds	r3, #20
 800786a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800786e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007872:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007874:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007876:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800787a:	e841 2300 	strex	r3, r2, [r1]
 800787e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007880:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1e1      	bne.n	800784a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	3314      	adds	r3, #20
 800788c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007890:	e853 3f00 	ldrex	r3, [r3]
 8007894:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007896:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007898:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800789c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	3314      	adds	r3, #20
 80078a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80078aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80078ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80078b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80078b2:	e841 2300 	strex	r3, r2, [r1]
 80078b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80078b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1e3      	bne.n	8007886 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2220      	movs	r2, #32
 80078c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	330c      	adds	r3, #12
 80078d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078d6:	e853 3f00 	ldrex	r3, [r3]
 80078da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80078dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078de:	f023 0310 	bic.w	r3, r3, #16
 80078e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	330c      	adds	r3, #12
 80078ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80078f0:	65ba      	str	r2, [r7, #88]	; 0x58
 80078f2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80078f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078f8:	e841 2300 	strex	r3, r2, [r1]
 80078fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80078fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007900:	2b00      	cmp	r3, #0
 8007902:	d1e3      	bne.n	80078cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007908:	4618      	mov	r0, r3
 800790a:	f7fb fc55 	bl	80031b8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2202      	movs	r2, #2
 8007912:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800791c:	b29b      	uxth	r3, r3
 800791e:	1ad3      	subs	r3, r2, r3
 8007920:	b29b      	uxth	r3, r3
 8007922:	4619      	mov	r1, r3
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 f8b7 	bl	8007a98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800792a:	e09b      	b.n	8007a64 <HAL_UART_IRQHandler+0x518>
 800792c:	08007c9d 	.word	0x08007c9d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007938:	b29b      	uxth	r3, r3
 800793a:	1ad3      	subs	r3, r2, r3
 800793c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007944:	b29b      	uxth	r3, r3
 8007946:	2b00      	cmp	r3, #0
 8007948:	f000 808e 	beq.w	8007a68 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800794c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007950:	2b00      	cmp	r3, #0
 8007952:	f000 8089 	beq.w	8007a68 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	330c      	adds	r3, #12
 800795c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007960:	e853 3f00 	ldrex	r3, [r3]
 8007964:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007968:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800796c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	330c      	adds	r3, #12
 8007976:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800797a:	647a      	str	r2, [r7, #68]	; 0x44
 800797c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007980:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007982:	e841 2300 	strex	r3, r2, [r1]
 8007986:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1e3      	bne.n	8007956 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	3314      	adds	r3, #20
 8007994:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007998:	e853 3f00 	ldrex	r3, [r3]
 800799c:	623b      	str	r3, [r7, #32]
   return(result);
 800799e:	6a3b      	ldr	r3, [r7, #32]
 80079a0:	f023 0301 	bic.w	r3, r3, #1
 80079a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	3314      	adds	r3, #20
 80079ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80079b2:	633a      	str	r2, [r7, #48]	; 0x30
 80079b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079ba:	e841 2300 	strex	r3, r2, [r1]
 80079be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d1e3      	bne.n	800798e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2220      	movs	r2, #32
 80079ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	330c      	adds	r3, #12
 80079da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	e853 3f00 	ldrex	r3, [r3]
 80079e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f023 0310 	bic.w	r3, r3, #16
 80079ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	330c      	adds	r3, #12
 80079f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80079f8:	61fa      	str	r2, [r7, #28]
 80079fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fc:	69b9      	ldr	r1, [r7, #24]
 80079fe:	69fa      	ldr	r2, [r7, #28]
 8007a00:	e841 2300 	strex	r3, r2, [r1]
 8007a04:	617b      	str	r3, [r7, #20]
   return(result);
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1e3      	bne.n	80079d4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2202      	movs	r2, #2
 8007a10:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a16:	4619      	mov	r1, r3
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 f83d 	bl	8007a98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007a1e:	e023      	b.n	8007a68 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007a20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d009      	beq.n	8007a40 <HAL_UART_IRQHandler+0x4f4>
 8007a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d003      	beq.n	8007a40 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 f943 	bl	8007cc4 <UART_Transmit_IT>
    return;
 8007a3e:	e014      	b.n	8007a6a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00e      	beq.n	8007a6a <HAL_UART_IRQHandler+0x51e>
 8007a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d008      	beq.n	8007a6a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 f983 	bl	8007d64 <UART_EndTransmit_IT>
    return;
 8007a5e:	e004      	b.n	8007a6a <HAL_UART_IRQHandler+0x51e>
    return;
 8007a60:	bf00      	nop
 8007a62:	e002      	b.n	8007a6a <HAL_UART_IRQHandler+0x51e>
      return;
 8007a64:	bf00      	nop
 8007a66:	e000      	b.n	8007a6a <HAL_UART_IRQHandler+0x51e>
      return;
 8007a68:	bf00      	nop
  }
}
 8007a6a:	37e8      	adds	r7, #232	; 0xe8
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007a78:	bf00      	nop
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007a8c:	bf00      	nop
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007aa4:	bf00      	nop
 8007aa6:	370c      	adds	r7, #12
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	603b      	str	r3, [r7, #0]
 8007abc:	4613      	mov	r3, r2
 8007abe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ac0:	e03b      	b.n	8007b3a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ac2:	6a3b      	ldr	r3, [r7, #32]
 8007ac4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ac8:	d037      	beq.n	8007b3a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007aca:	f7fb f831 	bl	8002b30 <HAL_GetTick>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	1ad3      	subs	r3, r2, r3
 8007ad4:	6a3a      	ldr	r2, [r7, #32]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d302      	bcc.n	8007ae0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ada:	6a3b      	ldr	r3, [r7, #32]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d101      	bne.n	8007ae4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ae0:	2303      	movs	r3, #3
 8007ae2:	e03a      	b.n	8007b5a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	f003 0304 	and.w	r3, r3, #4
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d023      	beq.n	8007b3a <UART_WaitOnFlagUntilTimeout+0x8a>
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	2b80      	cmp	r3, #128	; 0x80
 8007af6:	d020      	beq.n	8007b3a <UART_WaitOnFlagUntilTimeout+0x8a>
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	2b40      	cmp	r3, #64	; 0x40
 8007afc:	d01d      	beq.n	8007b3a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f003 0308 	and.w	r3, r3, #8
 8007b08:	2b08      	cmp	r3, #8
 8007b0a:	d116      	bne.n	8007b3a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	617b      	str	r3, [r7, #20]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	617b      	str	r3, [r7, #20]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	617b      	str	r3, [r7, #20]
 8007b20:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b22:	68f8      	ldr	r0, [r7, #12]
 8007b24:	f000 f857 	bl	8007bd6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2208      	movs	r2, #8
 8007b2c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	e00f      	b.n	8007b5a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	4013      	ands	r3, r2
 8007b44:	68ba      	ldr	r2, [r7, #8]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	bf0c      	ite	eq
 8007b4a:	2301      	moveq	r3, #1
 8007b4c:	2300      	movne	r3, #0
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	461a      	mov	r2, r3
 8007b52:	79fb      	ldrb	r3, [r7, #7]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d0b4      	beq.n	8007ac2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3718      	adds	r7, #24
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b62:	b480      	push	{r7}
 8007b64:	b085      	sub	sp, #20
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	60f8      	str	r0, [r7, #12]
 8007b6a:	60b9      	str	r1, [r7, #8]
 8007b6c:	4613      	mov	r3, r2
 8007b6e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	68ba      	ldr	r2, [r7, #8]
 8007b74:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	88fa      	ldrh	r2, [r7, #6]
 8007b7a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	88fa      	ldrh	r2, [r7, #6]
 8007b80:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2200      	movs	r2, #0
 8007b86:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2222      	movs	r2, #34	; 0x22
 8007b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d007      	beq.n	8007ba8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	68da      	ldr	r2, [r3, #12]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ba6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	695a      	ldr	r2, [r3, #20]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f042 0201 	orr.w	r2, r2, #1
 8007bb6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68da      	ldr	r2, [r3, #12]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f042 0220 	orr.w	r2, r2, #32
 8007bc6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr

08007bd6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007bd6:	b480      	push	{r7}
 8007bd8:	b095      	sub	sp, #84	; 0x54
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	330c      	adds	r3, #12
 8007be4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007be8:	e853 3f00 	ldrex	r3, [r3]
 8007bec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	330c      	adds	r3, #12
 8007bfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007bfe:	643a      	str	r2, [r7, #64]	; 0x40
 8007c00:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c02:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c06:	e841 2300 	strex	r3, r2, [r1]
 8007c0a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1e5      	bne.n	8007bde <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	3314      	adds	r3, #20
 8007c18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1a:	6a3b      	ldr	r3, [r7, #32]
 8007c1c:	e853 3f00 	ldrex	r3, [r3]
 8007c20:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	f023 0301 	bic.w	r3, r3, #1
 8007c28:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	3314      	adds	r3, #20
 8007c30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c3a:	e841 2300 	strex	r3, r2, [r1]
 8007c3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d1e5      	bne.n	8007c12 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d119      	bne.n	8007c82 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	330c      	adds	r3, #12
 8007c54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	e853 3f00 	ldrex	r3, [r3]
 8007c5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	f023 0310 	bic.w	r3, r3, #16
 8007c64:	647b      	str	r3, [r7, #68]	; 0x44
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	330c      	adds	r3, #12
 8007c6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c6e:	61ba      	str	r2, [r7, #24]
 8007c70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c72:	6979      	ldr	r1, [r7, #20]
 8007c74:	69ba      	ldr	r2, [r7, #24]
 8007c76:	e841 2300 	strex	r3, r2, [r1]
 8007c7a:	613b      	str	r3, [r7, #16]
   return(result);
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d1e5      	bne.n	8007c4e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2220      	movs	r2, #32
 8007c86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007c90:	bf00      	nop
 8007c92:	3754      	adds	r7, #84	; 0x54
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2200      	movs	r2, #0
 8007cae:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	f7ff fee4 	bl	8007a84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cbc:	bf00      	nop
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b085      	sub	sp, #20
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	2b21      	cmp	r3, #33	; 0x21
 8007cd6:	d13e      	bne.n	8007d56 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ce0:	d114      	bne.n	8007d0c <UART_Transmit_IT+0x48>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d110      	bne.n	8007d0c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a1b      	ldr	r3, [r3, #32]
 8007cee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	881b      	ldrh	r3, [r3, #0]
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007cfe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6a1b      	ldr	r3, [r3, #32]
 8007d04:	1c9a      	adds	r2, r3, #2
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	621a      	str	r2, [r3, #32]
 8007d0a:	e008      	b.n	8007d1e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6a1b      	ldr	r3, [r3, #32]
 8007d10:	1c59      	adds	r1, r3, #1
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	6211      	str	r1, [r2, #32]
 8007d16:	781a      	ldrb	r2, [r3, #0]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	3b01      	subs	r3, #1
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d10f      	bne.n	8007d52 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68da      	ldr	r2, [r3, #12]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d40:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	68da      	ldr	r2, [r3, #12]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d50:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007d52:	2300      	movs	r3, #0
 8007d54:	e000      	b.n	8007d58 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007d56:	2302      	movs	r3, #2
  }
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3714      	adds	r7, #20
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	68da      	ldr	r2, [r3, #12]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d7a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2220      	movs	r2, #32
 8007d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f7ff fe73 	bl	8007a70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3708      	adds	r7, #8
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b08c      	sub	sp, #48	; 0x30
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	2b22      	cmp	r3, #34	; 0x22
 8007da6:	f040 80ae 	bne.w	8007f06 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007db2:	d117      	bne.n	8007de4 <UART_Receive_IT+0x50>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	691b      	ldr	r3, [r3, #16]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d113      	bne.n	8007de4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dd2:	b29a      	uxth	r2, r3
 8007dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ddc:	1c9a      	adds	r2, r3, #2
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	629a      	str	r2, [r3, #40]	; 0x28
 8007de2:	e026      	b.n	8007e32 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007dea:	2300      	movs	r3, #0
 8007dec:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007df6:	d007      	beq.n	8007e08 <UART_Receive_IT+0x74>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d10a      	bne.n	8007e16 <UART_Receive_IT+0x82>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	691b      	ldr	r3, [r3, #16]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d106      	bne.n	8007e16 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	b2da      	uxtb	r2, r3
 8007e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e12:	701a      	strb	r2, [r3, #0]
 8007e14:	e008      	b.n	8007e28 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e22:	b2da      	uxtb	r2, r3
 8007e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e26:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e2c:	1c5a      	adds	r2, r3, #1
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	3b01      	subs	r3, #1
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	4619      	mov	r1, r3
 8007e40:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d15d      	bne.n	8007f02 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68da      	ldr	r2, [r3, #12]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f022 0220 	bic.w	r2, r2, #32
 8007e54:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	68da      	ldr	r2, [r3, #12]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	695a      	ldr	r2, [r3, #20]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f022 0201 	bic.w	r2, r2, #1
 8007e74:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2220      	movs	r2, #32
 8007e7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d135      	bne.n	8007ef8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	330c      	adds	r3, #12
 8007e98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	e853 3f00 	ldrex	r3, [r3]
 8007ea0:	613b      	str	r3, [r7, #16]
   return(result);
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	f023 0310 	bic.w	r3, r3, #16
 8007ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	330c      	adds	r3, #12
 8007eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eb2:	623a      	str	r2, [r7, #32]
 8007eb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb6:	69f9      	ldr	r1, [r7, #28]
 8007eb8:	6a3a      	ldr	r2, [r7, #32]
 8007eba:	e841 2300 	strex	r3, r2, [r1]
 8007ebe:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ec0:	69bb      	ldr	r3, [r7, #24]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d1e5      	bne.n	8007e92 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 0310 	and.w	r3, r3, #16
 8007ed0:	2b10      	cmp	r3, #16
 8007ed2:	d10a      	bne.n	8007eea <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	60fb      	str	r3, [r7, #12]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	60fb      	str	r3, [r7, #12]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	60fb      	str	r3, [r7, #12]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007eee:	4619      	mov	r1, r3
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f7ff fdd1 	bl	8007a98 <HAL_UARTEx_RxEventCallback>
 8007ef6:	e002      	b.n	8007efe <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f7fa fd27 	bl	800294c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007efe:	2300      	movs	r3, #0
 8007f00:	e002      	b.n	8007f08 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007f02:	2300      	movs	r3, #0
 8007f04:	e000      	b.n	8007f08 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007f06:	2302      	movs	r3, #2
  }
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3730      	adds	r7, #48	; 0x30
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f14:	b0c0      	sub	sp, #256	; 0x100
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	691b      	ldr	r3, [r3, #16]
 8007f24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f2c:	68d9      	ldr	r1, [r3, #12]
 8007f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	ea40 0301 	orr.w	r3, r0, r1
 8007f38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f3e:	689a      	ldr	r2, [r3, #8]
 8007f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f44:	691b      	ldr	r3, [r3, #16]
 8007f46:	431a      	orrs	r2, r3
 8007f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f4c:	695b      	ldr	r3, [r3, #20]
 8007f4e:	431a      	orrs	r2, r3
 8007f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f54:	69db      	ldr	r3, [r3, #28]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007f68:	f021 010c 	bic.w	r1, r1, #12
 8007f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007f76:	430b      	orrs	r3, r1
 8007f78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	695b      	ldr	r3, [r3, #20]
 8007f82:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f8a:	6999      	ldr	r1, [r3, #24]
 8007f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	ea40 0301 	orr.w	r3, r0, r1
 8007f96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	4b8f      	ldr	r3, [pc, #572]	; (80081dc <UART_SetConfig+0x2cc>)
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d005      	beq.n	8007fb0 <UART_SetConfig+0xa0>
 8007fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	4b8d      	ldr	r3, [pc, #564]	; (80081e0 <UART_SetConfig+0x2d0>)
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d104      	bne.n	8007fba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007fb0:	f7fd fab0 	bl	8005514 <HAL_RCC_GetPCLK2Freq>
 8007fb4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007fb8:	e003      	b.n	8007fc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007fba:	f7fd fa97 	bl	80054ec <HAL_RCC_GetPCLK1Freq>
 8007fbe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fc6:	69db      	ldr	r3, [r3, #28]
 8007fc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fcc:	f040 810c 	bne.w	80081e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007fd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007fda:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007fde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007fe2:	4622      	mov	r2, r4
 8007fe4:	462b      	mov	r3, r5
 8007fe6:	1891      	adds	r1, r2, r2
 8007fe8:	65b9      	str	r1, [r7, #88]	; 0x58
 8007fea:	415b      	adcs	r3, r3
 8007fec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007fee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007ff2:	4621      	mov	r1, r4
 8007ff4:	eb12 0801 	adds.w	r8, r2, r1
 8007ff8:	4629      	mov	r1, r5
 8007ffa:	eb43 0901 	adc.w	r9, r3, r1
 8007ffe:	f04f 0200 	mov.w	r2, #0
 8008002:	f04f 0300 	mov.w	r3, #0
 8008006:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800800a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800800e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008012:	4690      	mov	r8, r2
 8008014:	4699      	mov	r9, r3
 8008016:	4623      	mov	r3, r4
 8008018:	eb18 0303 	adds.w	r3, r8, r3
 800801c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008020:	462b      	mov	r3, r5
 8008022:	eb49 0303 	adc.w	r3, r9, r3
 8008026:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800802a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008036:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800803a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800803e:	460b      	mov	r3, r1
 8008040:	18db      	adds	r3, r3, r3
 8008042:	653b      	str	r3, [r7, #80]	; 0x50
 8008044:	4613      	mov	r3, r2
 8008046:	eb42 0303 	adc.w	r3, r2, r3
 800804a:	657b      	str	r3, [r7, #84]	; 0x54
 800804c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008050:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008054:	f7f8 f8d2 	bl	80001fc <__aeabi_uldivmod>
 8008058:	4602      	mov	r2, r0
 800805a:	460b      	mov	r3, r1
 800805c:	4b61      	ldr	r3, [pc, #388]	; (80081e4 <UART_SetConfig+0x2d4>)
 800805e:	fba3 2302 	umull	r2, r3, r3, r2
 8008062:	095b      	lsrs	r3, r3, #5
 8008064:	011c      	lsls	r4, r3, #4
 8008066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800806a:	2200      	movs	r2, #0
 800806c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008070:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008074:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008078:	4642      	mov	r2, r8
 800807a:	464b      	mov	r3, r9
 800807c:	1891      	adds	r1, r2, r2
 800807e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008080:	415b      	adcs	r3, r3
 8008082:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008084:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008088:	4641      	mov	r1, r8
 800808a:	eb12 0a01 	adds.w	sl, r2, r1
 800808e:	4649      	mov	r1, r9
 8008090:	eb43 0b01 	adc.w	fp, r3, r1
 8008094:	f04f 0200 	mov.w	r2, #0
 8008098:	f04f 0300 	mov.w	r3, #0
 800809c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80080a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80080a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80080a8:	4692      	mov	sl, r2
 80080aa:	469b      	mov	fp, r3
 80080ac:	4643      	mov	r3, r8
 80080ae:	eb1a 0303 	adds.w	r3, sl, r3
 80080b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80080b6:	464b      	mov	r3, r9
 80080b8:	eb4b 0303 	adc.w	r3, fp, r3
 80080bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80080c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80080cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80080d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80080d4:	460b      	mov	r3, r1
 80080d6:	18db      	adds	r3, r3, r3
 80080d8:	643b      	str	r3, [r7, #64]	; 0x40
 80080da:	4613      	mov	r3, r2
 80080dc:	eb42 0303 	adc.w	r3, r2, r3
 80080e0:	647b      	str	r3, [r7, #68]	; 0x44
 80080e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80080e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80080ea:	f7f8 f887 	bl	80001fc <__aeabi_uldivmod>
 80080ee:	4602      	mov	r2, r0
 80080f0:	460b      	mov	r3, r1
 80080f2:	4611      	mov	r1, r2
 80080f4:	4b3b      	ldr	r3, [pc, #236]	; (80081e4 <UART_SetConfig+0x2d4>)
 80080f6:	fba3 2301 	umull	r2, r3, r3, r1
 80080fa:	095b      	lsrs	r3, r3, #5
 80080fc:	2264      	movs	r2, #100	; 0x64
 80080fe:	fb02 f303 	mul.w	r3, r2, r3
 8008102:	1acb      	subs	r3, r1, r3
 8008104:	00db      	lsls	r3, r3, #3
 8008106:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800810a:	4b36      	ldr	r3, [pc, #216]	; (80081e4 <UART_SetConfig+0x2d4>)
 800810c:	fba3 2302 	umull	r2, r3, r3, r2
 8008110:	095b      	lsrs	r3, r3, #5
 8008112:	005b      	lsls	r3, r3, #1
 8008114:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008118:	441c      	add	r4, r3
 800811a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800811e:	2200      	movs	r2, #0
 8008120:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008124:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008128:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800812c:	4642      	mov	r2, r8
 800812e:	464b      	mov	r3, r9
 8008130:	1891      	adds	r1, r2, r2
 8008132:	63b9      	str	r1, [r7, #56]	; 0x38
 8008134:	415b      	adcs	r3, r3
 8008136:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008138:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800813c:	4641      	mov	r1, r8
 800813e:	1851      	adds	r1, r2, r1
 8008140:	6339      	str	r1, [r7, #48]	; 0x30
 8008142:	4649      	mov	r1, r9
 8008144:	414b      	adcs	r3, r1
 8008146:	637b      	str	r3, [r7, #52]	; 0x34
 8008148:	f04f 0200 	mov.w	r2, #0
 800814c:	f04f 0300 	mov.w	r3, #0
 8008150:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008154:	4659      	mov	r1, fp
 8008156:	00cb      	lsls	r3, r1, #3
 8008158:	4651      	mov	r1, sl
 800815a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800815e:	4651      	mov	r1, sl
 8008160:	00ca      	lsls	r2, r1, #3
 8008162:	4610      	mov	r0, r2
 8008164:	4619      	mov	r1, r3
 8008166:	4603      	mov	r3, r0
 8008168:	4642      	mov	r2, r8
 800816a:	189b      	adds	r3, r3, r2
 800816c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008170:	464b      	mov	r3, r9
 8008172:	460a      	mov	r2, r1
 8008174:	eb42 0303 	adc.w	r3, r2, r3
 8008178:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800817c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008188:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800818c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008190:	460b      	mov	r3, r1
 8008192:	18db      	adds	r3, r3, r3
 8008194:	62bb      	str	r3, [r7, #40]	; 0x28
 8008196:	4613      	mov	r3, r2
 8008198:	eb42 0303 	adc.w	r3, r2, r3
 800819c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800819e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80081a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80081a6:	f7f8 f829 	bl	80001fc <__aeabi_uldivmod>
 80081aa:	4602      	mov	r2, r0
 80081ac:	460b      	mov	r3, r1
 80081ae:	4b0d      	ldr	r3, [pc, #52]	; (80081e4 <UART_SetConfig+0x2d4>)
 80081b0:	fba3 1302 	umull	r1, r3, r3, r2
 80081b4:	095b      	lsrs	r3, r3, #5
 80081b6:	2164      	movs	r1, #100	; 0x64
 80081b8:	fb01 f303 	mul.w	r3, r1, r3
 80081bc:	1ad3      	subs	r3, r2, r3
 80081be:	00db      	lsls	r3, r3, #3
 80081c0:	3332      	adds	r3, #50	; 0x32
 80081c2:	4a08      	ldr	r2, [pc, #32]	; (80081e4 <UART_SetConfig+0x2d4>)
 80081c4:	fba2 2303 	umull	r2, r3, r2, r3
 80081c8:	095b      	lsrs	r3, r3, #5
 80081ca:	f003 0207 	and.w	r2, r3, #7
 80081ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4422      	add	r2, r4
 80081d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80081d8:	e106      	b.n	80083e8 <UART_SetConfig+0x4d8>
 80081da:	bf00      	nop
 80081dc:	40011000 	.word	0x40011000
 80081e0:	40011400 	.word	0x40011400
 80081e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80081e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081ec:	2200      	movs	r2, #0
 80081ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80081f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80081f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80081fa:	4642      	mov	r2, r8
 80081fc:	464b      	mov	r3, r9
 80081fe:	1891      	adds	r1, r2, r2
 8008200:	6239      	str	r1, [r7, #32]
 8008202:	415b      	adcs	r3, r3
 8008204:	627b      	str	r3, [r7, #36]	; 0x24
 8008206:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800820a:	4641      	mov	r1, r8
 800820c:	1854      	adds	r4, r2, r1
 800820e:	4649      	mov	r1, r9
 8008210:	eb43 0501 	adc.w	r5, r3, r1
 8008214:	f04f 0200 	mov.w	r2, #0
 8008218:	f04f 0300 	mov.w	r3, #0
 800821c:	00eb      	lsls	r3, r5, #3
 800821e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008222:	00e2      	lsls	r2, r4, #3
 8008224:	4614      	mov	r4, r2
 8008226:	461d      	mov	r5, r3
 8008228:	4643      	mov	r3, r8
 800822a:	18e3      	adds	r3, r4, r3
 800822c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008230:	464b      	mov	r3, r9
 8008232:	eb45 0303 	adc.w	r3, r5, r3
 8008236:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800823a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008246:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800824a:	f04f 0200 	mov.w	r2, #0
 800824e:	f04f 0300 	mov.w	r3, #0
 8008252:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008256:	4629      	mov	r1, r5
 8008258:	008b      	lsls	r3, r1, #2
 800825a:	4621      	mov	r1, r4
 800825c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008260:	4621      	mov	r1, r4
 8008262:	008a      	lsls	r2, r1, #2
 8008264:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008268:	f7f7 ffc8 	bl	80001fc <__aeabi_uldivmod>
 800826c:	4602      	mov	r2, r0
 800826e:	460b      	mov	r3, r1
 8008270:	4b60      	ldr	r3, [pc, #384]	; (80083f4 <UART_SetConfig+0x4e4>)
 8008272:	fba3 2302 	umull	r2, r3, r3, r2
 8008276:	095b      	lsrs	r3, r3, #5
 8008278:	011c      	lsls	r4, r3, #4
 800827a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800827e:	2200      	movs	r2, #0
 8008280:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008284:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008288:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800828c:	4642      	mov	r2, r8
 800828e:	464b      	mov	r3, r9
 8008290:	1891      	adds	r1, r2, r2
 8008292:	61b9      	str	r1, [r7, #24]
 8008294:	415b      	adcs	r3, r3
 8008296:	61fb      	str	r3, [r7, #28]
 8008298:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800829c:	4641      	mov	r1, r8
 800829e:	1851      	adds	r1, r2, r1
 80082a0:	6139      	str	r1, [r7, #16]
 80082a2:	4649      	mov	r1, r9
 80082a4:	414b      	adcs	r3, r1
 80082a6:	617b      	str	r3, [r7, #20]
 80082a8:	f04f 0200 	mov.w	r2, #0
 80082ac:	f04f 0300 	mov.w	r3, #0
 80082b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80082b4:	4659      	mov	r1, fp
 80082b6:	00cb      	lsls	r3, r1, #3
 80082b8:	4651      	mov	r1, sl
 80082ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082be:	4651      	mov	r1, sl
 80082c0:	00ca      	lsls	r2, r1, #3
 80082c2:	4610      	mov	r0, r2
 80082c4:	4619      	mov	r1, r3
 80082c6:	4603      	mov	r3, r0
 80082c8:	4642      	mov	r2, r8
 80082ca:	189b      	adds	r3, r3, r2
 80082cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80082d0:	464b      	mov	r3, r9
 80082d2:	460a      	mov	r2, r1
 80082d4:	eb42 0303 	adc.w	r3, r2, r3
 80082d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80082dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80082e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80082e8:	f04f 0200 	mov.w	r2, #0
 80082ec:	f04f 0300 	mov.w	r3, #0
 80082f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80082f4:	4649      	mov	r1, r9
 80082f6:	008b      	lsls	r3, r1, #2
 80082f8:	4641      	mov	r1, r8
 80082fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80082fe:	4641      	mov	r1, r8
 8008300:	008a      	lsls	r2, r1, #2
 8008302:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008306:	f7f7 ff79 	bl	80001fc <__aeabi_uldivmod>
 800830a:	4602      	mov	r2, r0
 800830c:	460b      	mov	r3, r1
 800830e:	4611      	mov	r1, r2
 8008310:	4b38      	ldr	r3, [pc, #224]	; (80083f4 <UART_SetConfig+0x4e4>)
 8008312:	fba3 2301 	umull	r2, r3, r3, r1
 8008316:	095b      	lsrs	r3, r3, #5
 8008318:	2264      	movs	r2, #100	; 0x64
 800831a:	fb02 f303 	mul.w	r3, r2, r3
 800831e:	1acb      	subs	r3, r1, r3
 8008320:	011b      	lsls	r3, r3, #4
 8008322:	3332      	adds	r3, #50	; 0x32
 8008324:	4a33      	ldr	r2, [pc, #204]	; (80083f4 <UART_SetConfig+0x4e4>)
 8008326:	fba2 2303 	umull	r2, r3, r2, r3
 800832a:	095b      	lsrs	r3, r3, #5
 800832c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008330:	441c      	add	r4, r3
 8008332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008336:	2200      	movs	r2, #0
 8008338:	673b      	str	r3, [r7, #112]	; 0x70
 800833a:	677a      	str	r2, [r7, #116]	; 0x74
 800833c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008340:	4642      	mov	r2, r8
 8008342:	464b      	mov	r3, r9
 8008344:	1891      	adds	r1, r2, r2
 8008346:	60b9      	str	r1, [r7, #8]
 8008348:	415b      	adcs	r3, r3
 800834a:	60fb      	str	r3, [r7, #12]
 800834c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008350:	4641      	mov	r1, r8
 8008352:	1851      	adds	r1, r2, r1
 8008354:	6039      	str	r1, [r7, #0]
 8008356:	4649      	mov	r1, r9
 8008358:	414b      	adcs	r3, r1
 800835a:	607b      	str	r3, [r7, #4]
 800835c:	f04f 0200 	mov.w	r2, #0
 8008360:	f04f 0300 	mov.w	r3, #0
 8008364:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008368:	4659      	mov	r1, fp
 800836a:	00cb      	lsls	r3, r1, #3
 800836c:	4651      	mov	r1, sl
 800836e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008372:	4651      	mov	r1, sl
 8008374:	00ca      	lsls	r2, r1, #3
 8008376:	4610      	mov	r0, r2
 8008378:	4619      	mov	r1, r3
 800837a:	4603      	mov	r3, r0
 800837c:	4642      	mov	r2, r8
 800837e:	189b      	adds	r3, r3, r2
 8008380:	66bb      	str	r3, [r7, #104]	; 0x68
 8008382:	464b      	mov	r3, r9
 8008384:	460a      	mov	r2, r1
 8008386:	eb42 0303 	adc.w	r3, r2, r3
 800838a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800838c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	2200      	movs	r2, #0
 8008394:	663b      	str	r3, [r7, #96]	; 0x60
 8008396:	667a      	str	r2, [r7, #100]	; 0x64
 8008398:	f04f 0200 	mov.w	r2, #0
 800839c:	f04f 0300 	mov.w	r3, #0
 80083a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80083a4:	4649      	mov	r1, r9
 80083a6:	008b      	lsls	r3, r1, #2
 80083a8:	4641      	mov	r1, r8
 80083aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80083ae:	4641      	mov	r1, r8
 80083b0:	008a      	lsls	r2, r1, #2
 80083b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80083b6:	f7f7 ff21 	bl	80001fc <__aeabi_uldivmod>
 80083ba:	4602      	mov	r2, r0
 80083bc:	460b      	mov	r3, r1
 80083be:	4b0d      	ldr	r3, [pc, #52]	; (80083f4 <UART_SetConfig+0x4e4>)
 80083c0:	fba3 1302 	umull	r1, r3, r3, r2
 80083c4:	095b      	lsrs	r3, r3, #5
 80083c6:	2164      	movs	r1, #100	; 0x64
 80083c8:	fb01 f303 	mul.w	r3, r1, r3
 80083cc:	1ad3      	subs	r3, r2, r3
 80083ce:	011b      	lsls	r3, r3, #4
 80083d0:	3332      	adds	r3, #50	; 0x32
 80083d2:	4a08      	ldr	r2, [pc, #32]	; (80083f4 <UART_SetConfig+0x4e4>)
 80083d4:	fba2 2303 	umull	r2, r3, r2, r3
 80083d8:	095b      	lsrs	r3, r3, #5
 80083da:	f003 020f 	and.w	r2, r3, #15
 80083de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4422      	add	r2, r4
 80083e6:	609a      	str	r2, [r3, #8]
}
 80083e8:	bf00      	nop
 80083ea:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80083ee:	46bd      	mov	sp, r7
 80083f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083f4:	51eb851f 	.word	0x51eb851f

080083f8 <memset>:
 80083f8:	4402      	add	r2, r0
 80083fa:	4603      	mov	r3, r0
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d100      	bne.n	8008402 <memset+0xa>
 8008400:	4770      	bx	lr
 8008402:	f803 1b01 	strb.w	r1, [r3], #1
 8008406:	e7f9      	b.n	80083fc <memset+0x4>

08008408 <__libc_init_array>:
 8008408:	b570      	push	{r4, r5, r6, lr}
 800840a:	4d0d      	ldr	r5, [pc, #52]	; (8008440 <__libc_init_array+0x38>)
 800840c:	4c0d      	ldr	r4, [pc, #52]	; (8008444 <__libc_init_array+0x3c>)
 800840e:	1b64      	subs	r4, r4, r5
 8008410:	10a4      	asrs	r4, r4, #2
 8008412:	2600      	movs	r6, #0
 8008414:	42a6      	cmp	r6, r4
 8008416:	d109      	bne.n	800842c <__libc_init_array+0x24>
 8008418:	4d0b      	ldr	r5, [pc, #44]	; (8008448 <__libc_init_array+0x40>)
 800841a:	4c0c      	ldr	r4, [pc, #48]	; (800844c <__libc_init_array+0x44>)
 800841c:	f000 f818 	bl	8008450 <_init>
 8008420:	1b64      	subs	r4, r4, r5
 8008422:	10a4      	asrs	r4, r4, #2
 8008424:	2600      	movs	r6, #0
 8008426:	42a6      	cmp	r6, r4
 8008428:	d105      	bne.n	8008436 <__libc_init_array+0x2e>
 800842a:	bd70      	pop	{r4, r5, r6, pc}
 800842c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008430:	4798      	blx	r3
 8008432:	3601      	adds	r6, #1
 8008434:	e7ee      	b.n	8008414 <__libc_init_array+0xc>
 8008436:	f855 3b04 	ldr.w	r3, [r5], #4
 800843a:	4798      	blx	r3
 800843c:	3601      	adds	r6, #1
 800843e:	e7f2      	b.n	8008426 <__libc_init_array+0x1e>
 8008440:	08008528 	.word	0x08008528
 8008444:	08008528 	.word	0x08008528
 8008448:	08008528 	.word	0x08008528
 800844c:	0800852c 	.word	0x0800852c

08008450 <_init>:
 8008450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008452:	bf00      	nop
 8008454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008456:	bc08      	pop	{r3}
 8008458:	469e      	mov	lr, r3
 800845a:	4770      	bx	lr

0800845c <_fini>:
 800845c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800845e:	bf00      	nop
 8008460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008462:	bc08      	pop	{r3}
 8008464:	469e      	mov	lr, r3
 8008466:	4770      	bx	lr
