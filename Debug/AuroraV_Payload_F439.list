
AuroraV_Payload_F439.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c38  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08006de4  08006de4  00016de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e6c  08006e6c  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08006e6c  08006e6c  00016e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e74  08006e74  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e74  08006e74  00016e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e78  08006e78  00016e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08006e7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
 10 .bss          000002f0  20000024  20000024  00020024  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000314  20000314  00020024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 14 .debug_info   000189bb  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000370c  00000000  00000000  00038a52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001430  00000000  00000000  0003c160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000fc6  00000000  00000000  0003d590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000270f1  00000000  00000000  0003e556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001a96c  00000000  00000000  00065647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e6f77  00000000  00000000  0007ffb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005438  00000000  00000000  00166f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0016c364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000024 	.word	0x20000024
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006dcc 	.word	0x08006dcc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000028 	.word	0x20000028
 80001e8:	08006dcc 	.word	0x08006dcc

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <init_accel>:
uint8_t OUT_Y_L 				= 0x2A;
uint8_t OUT_Y_H 				= 0x2B;
uint8_t OUT_Z_L 				= 0x2C;
uint8_t OUT_Z_H 				= 0x2D;

HAL_StatusTypeDef init_accel(I2C_HandleTypeDef* hi2c) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;

	// Write Control Register 1
	ret = i2c_write_reg(hi2c, H3LIS331DL_ADDR, &CTRL_REG1, MASK_1kHz);
 8000500:	2118      	movs	r1, #24
 8000502:	233f      	movs	r3, #63	; 0x3f
 8000504:	4a09      	ldr	r2, [pc, #36]	; (800052c <init_accel+0x34>)
 8000506:	6878      	ldr	r0, [r7, #4]
 8000508:	f000 fb5d 	bl	8000bc6 <i2c_write_reg>
 800050c:	4603      	mov	r3, r0
 800050e:	73fb      	strb	r3, [r7, #15]

	// Write Control Register 4
	ret = i2c_write_reg(hi2c, H3LIS331DL_ADDR, &CTRL_REG4, MASK_100G);
 8000510:	2118      	movs	r1, #24
 8000512:	2300      	movs	r3, #0
 8000514:	4a06      	ldr	r2, [pc, #24]	; (8000530 <init_accel+0x38>)
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	f000 fb55 	bl	8000bc6 <i2c_write_reg>
 800051c:	4603      	mov	r3, r0
 800051e:	73fb      	strb	r3, [r7, #15]
	return ret;
 8000520:	7bfb      	ldrb	r3, [r7, #15]
}
 8000522:	4618      	mov	r0, r3
 8000524:	3710      	adds	r7, #16
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	20000000 	.word	0x20000000
 8000530:	20000001 	.word	0x20000001

08000534 <readAccelerometer>:

void readAccelerometer(uint8_t values[6], I2C_HandleTypeDef* hi2c) {
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af02      	add	r7, sp, #8
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
	i2c_burst_read(hi2c, H3LIS331DL_ADDR, OUT_X_L, 6, values);
 800053e:	2118      	movs	r1, #24
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <readAccelerometer+0x24>)
 8000542:	781a      	ldrb	r2, [r3, #0]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	9300      	str	r3, [sp, #0]
 8000548:	2306      	movs	r3, #6
 800054a:	6838      	ldr	r0, [r7, #0]
 800054c:	f000 fb0a 	bl	8000b64 <i2c_burst_read>
}
 8000550:	bf00      	nop
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000003 	.word	0x20000003

0800055c <readAccel_whoami>:

uint8_t readAccel_whoami(I2C_HandleTypeDef* hi2c) {
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	return i2c_read_reg(hi2c, H3LIS331DL_ADDR, &WHOAMI);
 8000564:	2318      	movs	r3, #24
 8000566:	4a05      	ldr	r2, [pc, #20]	; (800057c <readAccel_whoami+0x20>)
 8000568:	4619      	mov	r1, r3
 800056a:	6878      	ldr	r0, [r7, #4]
 800056c:	f000 fad2 	bl	8000b14 <i2c_read_reg>
 8000570:	4603      	mov	r3, r0
}
 8000572:	4618      	mov	r0, r3
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000002 	.word	0x20000002

08000580 <init_bme280>:
uint8_t OUT_HUM_H 			= 0xFD;
uint8_t CALIB_ST_1			= 0x88;
uint8_t CALIB_ST_2			= 0xE1;


HAL_StatusTypeDef init_bme280(I2C_HandleTypeDef* hi2c, uint8_t bme) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	460b      	mov	r3, r1
 800058a:	70fb      	strb	r3, [r7, #3]
	uint8_t bme_addr = getBME280Config(bme).bme_addr;
 800058c:	78fb      	ldrb	r3, [r7, #3]
 800058e:	4618      	mov	r0, r3
 8000590:	f000 f8d8 	bl	8000744 <getBME280Config>
 8000594:	4603      	mov	r3, r0
 8000596:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef ret;
	uint8_t control_reg = 0x00;
 8000598:	2300      	movs	r3, #0
 800059a:	73bb      	strb	r3, [r7, #14]

	// Reset the sensor
	ret =  i2c_write_reg(hi2c, bme_addr, &RST_REG, RST);
 800059c:	7bf9      	ldrb	r1, [r7, #15]
 800059e:	23b6      	movs	r3, #182	; 0xb6
 80005a0:	4a19      	ldr	r2, [pc, #100]	; (8000608 <init_bme280+0x88>)
 80005a2:	6878      	ldr	r0, [r7, #4]
 80005a4:	f000 fb0f 	bl	8000bc6 <i2c_write_reg>
 80005a8:	4603      	mov	r3, r0
 80005aa:	737b      	strb	r3, [r7, #13]

	// Set humidity control register
	control_reg = i2c_read_reg(hi2c, bme_addr, &CTRL_HUM_REG);
 80005ac:	7bfb      	ldrb	r3, [r7, #15]
 80005ae:	4a17      	ldr	r2, [pc, #92]	; (800060c <init_bme280+0x8c>)
 80005b0:	4619      	mov	r1, r3
 80005b2:	6878      	ldr	r0, [r7, #4]
 80005b4:	f000 faae 	bl	8000b14 <i2c_read_reg>
 80005b8:	4603      	mov	r3, r0
 80005ba:	73bb      	strb	r3, [r7, #14]
	control_reg = control_reg & 0xF8;
 80005bc:	7bbb      	ldrb	r3, [r7, #14]
 80005be:	f023 0307 	bic.w	r3, r3, #7
 80005c2:	73bb      	strb	r3, [r7, #14]
	control_reg = control_reg | CTRL_HUM_MSK;
 80005c4:	7bbb      	ldrb	r3, [r7, #14]
 80005c6:	f043 0301 	orr.w	r3, r3, #1
 80005ca:	73bb      	strb	r3, [r7, #14]
	ret = i2c_write_reg(hi2c, bme_addr, &CTRL_HUM_REG, control_reg);
 80005cc:	7bbb      	ldrb	r3, [r7, #14]
 80005ce:	7bf9      	ldrb	r1, [r7, #15]
 80005d0:	4a0e      	ldr	r2, [pc, #56]	; (800060c <init_bme280+0x8c>)
 80005d2:	6878      	ldr	r0, [r7, #4]
 80005d4:	f000 faf7 	bl	8000bc6 <i2c_write_reg>
 80005d8:	4603      	mov	r3, r0
 80005da:	737b      	strb	r3, [r7, #13]

	// Set measure control register
	ret = i2c_write_reg(hi2c, bme_addr, &CTRL_MEAS_REG, CTRL_MEAS_MSK);
 80005dc:	7bf9      	ldrb	r1, [r7, #15]
 80005de:	2327      	movs	r3, #39	; 0x27
 80005e0:	4a0b      	ldr	r2, [pc, #44]	; (8000610 <init_bme280+0x90>)
 80005e2:	6878      	ldr	r0, [r7, #4]
 80005e4:	f000 faef 	bl	8000bc6 <i2c_write_reg>
 80005e8:	4603      	mov	r3, r0
 80005ea:	737b      	strb	r3, [r7, #13]

	// Set the config register
	ret = i2c_write_reg(hi2c, bme_addr, &CONF_REG, CONF_MSK);
 80005ec:	7bf9      	ldrb	r1, [r7, #15]
 80005ee:	2300      	movs	r3, #0
 80005f0:	4a08      	ldr	r2, [pc, #32]	; (8000614 <init_bme280+0x94>)
 80005f2:	6878      	ldr	r0, [r7, #4]
 80005f4:	f000 fae7 	bl	8000bc6 <i2c_write_reg>
 80005f8:	4603      	mov	r3, r0
 80005fa:	737b      	strb	r3, [r7, #13]

	return ret;
 80005fc:	7b7b      	ldrb	r3, [r7, #13]
}
 80005fe:	4618      	mov	r0, r3
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000005 	.word	0x20000005
 800060c:	20000006 	.word	0x20000006
 8000610:	20000007 	.word	0x20000007
 8000614:	20000008 	.word	0x20000008

08000618 <readTempHumPres>:

void readTempHumPres(uint8_t values[6], I2C_HandleTypeDef* hi2c, uint8_t bme) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b08a      	sub	sp, #40	; 0x28
 800061c:	af02      	add	r7, sp, #8
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	4613      	mov	r3, r2
 8000624:	71fb      	strb	r3, [r7, #7]
	uint8_t readings[8];
	uint8_t bme_addr = getBME280Config(bme).bme_addr;
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	4618      	mov	r0, r3
 800062a:	f000 f88b 	bl	8000744 <getBME280Config>
 800062e:	4603      	mov	r3, r0
 8000630:	777b      	strb	r3, [r7, #29]
	i2c_burst_read(hi2c, bme_addr, OUT_PRESS_H, 8, readings);
 8000632:	4b20      	ldr	r3, [pc, #128]	; (80006b4 <readTempHumPres+0x9c>)
 8000634:	781a      	ldrb	r2, [r3, #0]
 8000636:	7f79      	ldrb	r1, [r7, #29]
 8000638:	f107 0314 	add.w	r3, r7, #20
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2308      	movs	r3, #8
 8000640:	68b8      	ldr	r0, [r7, #8]
 8000642:	f000 fa8f 	bl	8000b64 <i2c_burst_read>

	// Clear the 0 values on the xlsb registers
	uint8_t j = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	77fb      	strb	r3, [r7, #31]
    for(uint8_t i = 0; i < 8; i++) {
 800064a:	2300      	movs	r3, #0
 800064c:	77bb      	strb	r3, [r7, #30]
 800064e:	e014      	b.n	800067a <readTempHumPres+0x62>
        if(i != 2 && i != 5) {  // if the index is not 2 or 5
 8000650:	7fbb      	ldrb	r3, [r7, #30]
 8000652:	2b02      	cmp	r3, #2
 8000654:	d00e      	beq.n	8000674 <readTempHumPres+0x5c>
 8000656:	7fbb      	ldrb	r3, [r7, #30]
 8000658:	2b05      	cmp	r3, #5
 800065a:	d00b      	beq.n	8000674 <readTempHumPres+0x5c>
        	values[j] = readings[i];
 800065c:	7fba      	ldrb	r2, [r7, #30]
 800065e:	7ffb      	ldrb	r3, [r7, #31]
 8000660:	68f9      	ldr	r1, [r7, #12]
 8000662:	440b      	add	r3, r1
 8000664:	3220      	adds	r2, #32
 8000666:	443a      	add	r2, r7
 8000668:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800066c:	701a      	strb	r2, [r3, #0]
            j++;
 800066e:	7ffb      	ldrb	r3, [r7, #31]
 8000670:	3301      	adds	r3, #1
 8000672:	77fb      	strb	r3, [r7, #31]
    for(uint8_t i = 0; i < 8; i++) {
 8000674:	7fbb      	ldrb	r3, [r7, #30]
 8000676:	3301      	adds	r3, #1
 8000678:	77bb      	strb	r3, [r7, #30]
 800067a:	7fbb      	ldrb	r3, [r7, #30]
 800067c:	2b07      	cmp	r3, #7
 800067e:	d9e7      	bls.n	8000650 <readTempHumPres+0x38>
        }
    }

    // Swap elements to make the array little endian
    swap(&values[0], &values[1]);
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	3301      	adds	r3, #1
 8000684:	4619      	mov	r1, r3
 8000686:	68f8      	ldr	r0, [r7, #12]
 8000688:	f000 f873 	bl	8000772 <swap>
    swap(&values[2], &values[3]);
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	1c9a      	adds	r2, r3, #2
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	3303      	adds	r3, #3
 8000694:	4619      	mov	r1, r3
 8000696:	4610      	mov	r0, r2
 8000698:	f000 f86b 	bl	8000772 <swap>
    swap(&values[4], &values[5]);
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	1d1a      	adds	r2, r3, #4
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	3305      	adds	r3, #5
 80006a4:	4619      	mov	r1, r3
 80006a6:	4610      	mov	r0, r2
 80006a8:	f000 f863 	bl	8000772 <swap>
}
 80006ac:	bf00      	nop
 80006ae:	3720      	adds	r7, #32
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000009 	.word	0x20000009

080006b8 <readBME280_id_reg>:

uint8_t readBME280_id_reg(I2C_HandleTypeDef* hi2c, uint8_t bme) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	460b      	mov	r3, r1
 80006c2:	70fb      	strb	r3, [r7, #3]
	uint8_t bme_addr = getBME280Config(bme).bme_addr;
 80006c4:	78fb      	ldrb	r3, [r7, #3]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 f83c 	bl	8000744 <getBME280Config>
 80006cc:	4603      	mov	r3, r0
 80006ce:	73fb      	strb	r3, [r7, #15]
	return i2c_read_reg(hi2c, bme_addr, &ID_REG);
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
 80006d2:	4a05      	ldr	r2, [pc, #20]	; (80006e8 <readBME280_id_reg+0x30>)
 80006d4:	4619      	mov	r1, r3
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f000 fa1c 	bl	8000b14 <i2c_read_reg>
 80006dc:	4603      	mov	r3, r0
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3710      	adds	r7, #16
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000004 	.word	0x20000004

080006ec <readBME280_calib>:

void readBME280_calib(I2C_HandleTypeDef* hi2c, uint8_t bme, uint8_t calibration1[CALIB_CNT_1], uint8_t calibration2[CALIB_CNT_2]) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b088      	sub	sp, #32
 80006f0:	af02      	add	r7, sp, #8
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	607a      	str	r2, [r7, #4]
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	460b      	mov	r3, r1
 80006fa:	72fb      	strb	r3, [r7, #11]
	uint8_t bme_addr = getBME280Config(bme).bme_addr;
 80006fc:	7afb      	ldrb	r3, [r7, #11]
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 f820 	bl	8000744 <getBME280Config>
 8000704:	4603      	mov	r3, r0
 8000706:	75fb      	strb	r3, [r7, #23]
	i2c_burst_read(hi2c, CALIB_ST_1, OUT_PRESS_H, CALIB_CNT_1, calibration1);
 8000708:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <readBME280_calib+0x4c>)
 800070a:	7819      	ldrb	r1, [r3, #0]
 800070c:	4b0b      	ldr	r3, [pc, #44]	; (800073c <readBME280_calib+0x50>)
 800070e:	781a      	ldrb	r2, [r3, #0]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	2319      	movs	r3, #25
 8000716:	68f8      	ldr	r0, [r7, #12]
 8000718:	f000 fa24 	bl	8000b64 <i2c_burst_read>
	i2c_burst_read(hi2c, CALIB_ST_2, OUT_PRESS_H, CALIB_CNT_2, calibration2);
 800071c:	4b08      	ldr	r3, [pc, #32]	; (8000740 <readBME280_calib+0x54>)
 800071e:	7819      	ldrb	r1, [r3, #0]
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <readBME280_calib+0x50>)
 8000722:	781a      	ldrb	r2, [r3, #0]
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	9300      	str	r3, [sp, #0]
 8000728:	2307      	movs	r3, #7
 800072a:	68f8      	ldr	r0, [r7, #12]
 800072c:	f000 fa1a 	bl	8000b64 <i2c_burst_read>
}
 8000730:	bf00      	nop
 8000732:	3718      	adds	r7, #24
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	2000000a 	.word	0x2000000a
 800073c:	20000009 	.word	0x20000009
 8000740:	2000000b 	.word	0x2000000b

08000744 <getBME280Config>:

BME280_Config getBME280Config(uint8_t bme) {
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
	BME280_Config config;
	if (bme == 0) {
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d102      	bne.n	800075a <getBME280Config+0x16>
		config.bme_addr = BME280_ADDR_0;
 8000754:	2376      	movs	r3, #118	; 0x76
 8000756:	733b      	strb	r3, [r7, #12]
 8000758:	e004      	b.n	8000764 <getBME280Config+0x20>
	} else if (bme == 1) {
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	2b01      	cmp	r3, #1
 800075e:	d101      	bne.n	8000764 <getBME280Config+0x20>
		config.bme_addr = BME280_ADDR_1;
 8000760:	2377      	movs	r3, #119	; 0x77
 8000762:	733b      	strb	r3, [r7, #12]
	}
    return config;
 8000764:	7b3b      	ldrb	r3, [r7, #12]
}
 8000766:	4618      	mov	r0, r3
 8000768:	3714      	adds	r7, #20
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr

08000772 <swap>:

void swap(uint8_t* a, uint8_t* b) {
 8000772:	b480      	push	{r7}
 8000774:	b085      	sub	sp, #20
 8000776:	af00      	add	r7, sp, #0
 8000778:	6078      	str	r0, [r7, #4]
 800077a:	6039      	str	r1, [r7, #0]
    uint8_t temp = *a;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	73fb      	strb	r3, [r7, #15]
    *a = *b;
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	781a      	ldrb	r2, [r3, #0]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	701a      	strb	r2, [r3, #0]
    *b = temp;
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	7bfa      	ldrb	r2, [r7, #15]
 800078e:	701a      	strb	r2, [r3, #0]
}
 8000790:	bf00      	nop
 8000792:	3714      	adds	r7, #20
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr

0800079c <getGPIOConfig>:
uint8_t FLASH_READEN 	= 0x03;			// Read enable to begin reading data
uint8_t FLASH_READ_MANU	= 0x90;			// Instruction code to read the manufacturer ID
uint8_t FLASH_32K_ERS	= 0x52;			// Erase all memory within a 32K-byte block
uint8_t FLASH_ERASE		= 0x60;			// Erase the entire chip

GPIO_Config getGPIOConfig(uint8_t flashNo) {
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	460b      	mov	r3, r1
 80007a6:	70fb      	strb	r3, [r7, #3]
    GPIO_Config config;

    if (flashNo == 0) {
 80007a8:	78fb      	ldrb	r3, [r7, #3]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d104      	bne.n	80007b8 <getGPIOConfig+0x1c>
        config.GPIOx = GPIOD;
 80007ae:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <getGPIOConfig+0x48>)
 80007b0:	60bb      	str	r3, [r7, #8]
        config.GPIO_Pin_CS = GPIO_PIN_2;
 80007b2:	2304      	movs	r3, #4
 80007b4:	81bb      	strh	r3, [r7, #12]
 80007b6:	e007      	b.n	80007c8 <getGPIOConfig+0x2c>
    } else if (flashNo == 1) {
 80007b8:	78fb      	ldrb	r3, [r7, #3]
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d104      	bne.n	80007c8 <getGPIOConfig+0x2c>
        config.GPIOx = GPIOB;
 80007be:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <getGPIOConfig+0x4c>)
 80007c0:	60bb      	str	r3, [r7, #8]
        config.GPIO_Pin_CS = GPIO_PIN_12;
 80007c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c6:	81bb      	strh	r3, [r7, #12]
    }

    return config;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	461a      	mov	r2, r3
 80007cc:	f107 0308 	add.w	r3, r7, #8
 80007d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007d4:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	3714      	adds	r7, #20
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	40020c00 	.word	0x40020c00
 80007e8:	40020400 	.word	0x40020400

080007ec <erase_chip_spi>:
 *      Author: aidencontini
 */

#include "data_output_spi.h"

HAL_StatusTypeDef erase_chip_spi(SPI_HandleTypeDef *hspi, uint8_t flashNo) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	460b      	mov	r3, r1
 80007f6:	70fb      	strb	r3, [r7, #3]
	GPIO_Config config = getGPIOConfig(flashNo);
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	78fa      	ldrb	r2, [r7, #3]
 80007fe:	4611      	mov	r1, r2
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff ffcb 	bl	800079c <getGPIOConfig>

	uint8_t busy = 0x01;
 8000806:	2301      	movs	r3, #1
 8000808:	75fb      	strb	r3, [r7, #23]
	while(busy) {
 800080a:	e008      	b.n	800081e <erase_chip_spi+0x32>
		busy = (check_status_register(hspi, flashNo) & 0x01);	// Check if there is a write in progress
 800080c:	78fb      	ldrb	r3, [r7, #3]
 800080e:	4619      	mov	r1, r3
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f000 f887 	bl	8000924 <check_status_register>
 8000816:	4603      	mov	r3, r0
 8000818:	f003 0301 	and.w	r3, r3, #1
 800081c:	75fb      	strb	r3, [r7, #23]
	while(busy) {
 800081e:	7dfb      	ldrb	r3, [r7, #23]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d1f3      	bne.n	800080c <erase_chip_spi+0x20>
	}

	write_enable_spi(hspi, flashNo);
 8000824:	78fb      	ldrb	r3, [r7, #3]
 8000826:	4619      	mov	r1, r3
 8000828:	6878      	ldr	r0, [r7, #4]
 800082a:	f000 f81d 	bl	8000868 <write_enable_spi>
	perform_operation(&FLASH_ERASE, hspi, config.GPIOx, config.GPIO_Pin_CS);
 800082e:	68fa      	ldr	r2, [r7, #12]
 8000830:	8a3b      	ldrh	r3, [r7, #16]
 8000832:	6879      	ldr	r1, [r7, #4]
 8000834:	480b      	ldr	r0, [pc, #44]	; (8000864 <erase_chip_spi+0x78>)
 8000836:	f000 fdd0 	bl	80013da <perform_operation>

	busy = 0x01;
 800083a:	2301      	movs	r3, #1
 800083c:	75fb      	strb	r3, [r7, #23]
	while(busy) {
 800083e:	e008      	b.n	8000852 <erase_chip_spi+0x66>
		busy = (check_status_register(hspi, flashNo) & 0x01);	// Check if there is a write in progress
 8000840:	78fb      	ldrb	r3, [r7, #3]
 8000842:	4619      	mov	r1, r3
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f000 f86d 	bl	8000924 <check_status_register>
 800084a:	4603      	mov	r3, r0
 800084c:	f003 0301 	and.w	r3, r3, #1
 8000850:	75fb      	strb	r3, [r7, #23]
	while(busy) {
 8000852:	7dfb      	ldrb	r3, [r7, #23]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d1f3      	bne.n	8000840 <erase_chip_spi+0x54>
	}

	return HAL_OK;
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	3718      	adds	r7, #24
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000010 	.word	0x20000010

08000868 <write_enable_spi>:

	write_enable_spi(hspi, flashNo);
	perform_operation(&FLASH_32K_ERS, hspi, config.GPIOx, config.GPIO_Pin_CS);
}

void write_enable_spi(SPI_HandleTypeDef *hspi, uint8_t flashNo) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	460b      	mov	r3, r1
 8000872:	70fb      	strb	r3, [r7, #3]
	GPIO_Config config = getGPIOConfig(flashNo);
 8000874:	f107 0308 	add.w	r3, r7, #8
 8000878:	78fa      	ldrb	r2, [r7, #3]
 800087a:	4611      	mov	r1, r2
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff ff8d 	bl	800079c <getGPIOConfig>
	perform_operation(&FLASH_WREN, hspi, config.GPIOx, config.GPIO_Pin_CS);
 8000882:	68ba      	ldr	r2, [r7, #8]
 8000884:	89bb      	ldrh	r3, [r7, #12]
 8000886:	6879      	ldr	r1, [r7, #4]
 8000888:	4803      	ldr	r0, [pc, #12]	; (8000898 <write_enable_spi+0x30>)
 800088a:	f000 fda6 	bl	80013da <perform_operation>
}
 800088e:	bf00      	nop
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	2000000c 	.word	0x2000000c

0800089c <write_data_spi>:
void write_disable_spi(SPI_HandleTypeDef *hspi, uint8_t flashNo) {
	GPIO_Config config = getGPIOConfig(flashNo);
	perform_operation(&FLASH_WRDIS, hspi, config.GPIOx, config.GPIO_Pin_CS);
}

uint8_t write_data_spi(uint8_t page[PAGE_SIZE], GPIO_PinState flight_mode, SPI_HandleTypeDef *hspi, int addr, uint8_t flashNo) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b08c      	sub	sp, #48	; 0x30
 80008a0:	af04      	add	r7, sp, #16
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	607a      	str	r2, [r7, #4]
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	460b      	mov	r3, r1
 80008aa:	72fb      	strb	r3, [r7, #11]
	GPIO_Config config = getGPIOConfig(flashNo);
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80008b4:	4611      	mov	r1, r2
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff ff70 	bl	800079c <getGPIOConfig>
	uint8_t exit = EXIT_FAILURE;
 80008bc:	2301      	movs	r3, #1
 80008be:	77fb      	strb	r3, [r7, #31]

	// If in flight mode, write data out to flash
	if(flight_mode == GPIO_PIN_SET) {
 80008c0:	7afb      	ldrb	r3, [r7, #11]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d125      	bne.n	8000912 <write_data_spi+0x76>

		uint8_t busy = 0x01;
 80008c6:	2301      	movs	r3, #1
 80008c8:	77bb      	strb	r3, [r7, #30]
		while(busy) {
 80008ca:	e009      	b.n	80008e0 <write_data_spi+0x44>
			busy = (check_status_register(hspi, flashNo) & 0x01);	// Check if there is a write in progress
 80008cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80008d0:	4619      	mov	r1, r3
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f000 f826 	bl	8000924 <check_status_register>
 80008d8:	4603      	mov	r3, r0
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	77bb      	strb	r3, [r7, #30]
		while(busy) {
 80008e0:	7fbb      	ldrb	r3, [r7, #30]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d1f2      	bne.n	80008cc <write_data_spi+0x30>
		}

		// Send the write enable signal
		write_enable_spi(hspi, flashNo);
 80008e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80008ea:	4619      	mov	r1, r3
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	f7ff ffbb 	bl	8000868 <write_enable_spi>
		spi_write_data(&FLASH_PGWR, PAGE_SIZE, page, hspi, addr, config.GPIOx, config.GPIO_Pin_CS);
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	697a      	ldr	r2, [r7, #20]
 80008f6:	8b39      	ldrh	r1, [r7, #24]
 80008f8:	9102      	str	r1, [sp, #8]
 80008fa:	9201      	str	r2, [sp, #4]
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	68fa      	ldr	r2, [r7, #12]
 8000902:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000906:	4806      	ldr	r0, [pc, #24]	; (8000920 <write_data_spi+0x84>)
 8000908:	f000 fdc8 	bl	800149c <spi_write_data>
		exit = EXIT_SUCCESS;
 800090c:	2300      	movs	r3, #0
 800090e:	77fb      	strb	r3, [r7, #31]
 8000910:	e001      	b.n	8000916 <write_data_spi+0x7a>

	// If not in flight mode, exit
	} else {
		exit = EXIT_SUCCESS;
 8000912:	2300      	movs	r3, #0
 8000914:	77fb      	strb	r3, [r7, #31]
	}
	return exit;
 8000916:	7ffb      	ldrb	r3, [r7, #31]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3720      	adds	r7, #32
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	2000000d 	.word	0x2000000d

08000924 <check_status_register>:
 *      Author: aidencontini
 */

#include "data_read_spi.h"

uint8_t check_status_register(SPI_HandleTypeDef *hspi, uint8_t flashNo) {
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	460b      	mov	r3, r1
 800092e:	70fb      	strb	r3, [r7, #3]
	GPIO_Config config = getGPIOConfig(flashNo);
 8000930:	f107 0308 	add.w	r3, r7, #8
 8000934:	78fa      	ldrb	r2, [r7, #3]
 8000936:	4611      	mov	r1, r2
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff ff2f 	bl	800079c <getGPIOConfig>
	return spi_sendOp_readByte(&FLASH_READSR1, hspi, config.GPIOx, config.GPIO_Pin_CS);
 800093e:	68ba      	ldr	r2, [r7, #8]
 8000940:	89bb      	ldrh	r3, [r7, #12]
 8000942:	6879      	ldr	r1, [r7, #4]
 8000944:	4803      	ldr	r0, [pc, #12]	; (8000954 <check_status_register+0x30>)
 8000946:	f000 fd21 	bl	800138c <spi_sendOp_readByte>
 800094a:	4603      	mov	r3, r0
}
 800094c:	4618      	mov	r0, r3
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	2000000e 	.word	0x2000000e

08000958 <find_next_blank_page>:

uint32_t find_next_blank_page(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, GPIO_PinState *end_of_flash_ptr, uint8_t flashNo) {
 8000958:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800095c:	b093      	sub	sp, #76	; 0x4c
 800095e:	af04      	add	r7, sp, #16
 8000960:	60f8      	str	r0, [r7, #12]
 8000962:	60b9      	str	r1, [r7, #8]
 8000964:	607a      	str	r2, [r7, #4]
 8000966:	70fb      	strb	r3, [r7, #3]
 8000968:	466b      	mov	r3, sp
 800096a:	461e      	mov	r6, r3
	uint8_t firstBytes = 4;
 800096c:	2304      	movs	r3, #4
 800096e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	GPIO_Config config = getGPIOConfig(flashNo);
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	78fa      	ldrb	r2, [r7, #3]
 8000978:	4611      	mov	r1, r2
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff ff0e 	bl	800079c <getGPIOConfig>

	uint8_t page_start[firstBytes];
 8000980:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8000984:	460b      	mov	r3, r1
 8000986:	3b01      	subs	r3, #1
 8000988:	623b      	str	r3, [r7, #32]
 800098a:	b2cb      	uxtb	r3, r1
 800098c:	2200      	movs	r2, #0
 800098e:	4698      	mov	r8, r3
 8000990:	4691      	mov	r9, r2
 8000992:	f04f 0200 	mov.w	r2, #0
 8000996:	f04f 0300 	mov.w	r3, #0
 800099a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800099e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80009a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80009a6:	b2cb      	uxtb	r3, r1
 80009a8:	2200      	movs	r2, #0
 80009aa:	461c      	mov	r4, r3
 80009ac:	4615      	mov	r5, r2
 80009ae:	f04f 0200 	mov.w	r2, #0
 80009b2:	f04f 0300 	mov.w	r3, #0
 80009b6:	00eb      	lsls	r3, r5, #3
 80009b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80009bc:	00e2      	lsls	r2, r4, #3
 80009be:	460b      	mov	r3, r1
 80009c0:	3307      	adds	r3, #7
 80009c2:	08db      	lsrs	r3, r3, #3
 80009c4:	00db      	lsls	r3, r3, #3
 80009c6:	ebad 0d03 	sub.w	sp, sp, r3
 80009ca:	ab04      	add	r3, sp, #16
 80009cc:	3300      	adds	r3, #0
 80009ce:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < firstBytes; i++) {
 80009d0:	2300      	movs	r3, #0
 80009d2:	637b      	str	r3, [r7, #52]	; 0x34
 80009d4:	e007      	b.n	80009e6 <find_next_blank_page+0x8e>
		page_start[i] = 0;
 80009d6:	69fa      	ldr	r2, [r7, #28]
 80009d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009da:	4413      	add	r3, r2
 80009dc:	2200      	movs	r2, #0
 80009de:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < firstBytes; i++) {
 80009e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009e2:	3301      	adds	r3, #1
 80009e4:	637b      	str	r3, [r7, #52]	; 0x34
 80009e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80009ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009ec:	429a      	cmp	r2, r3
 80009ee:	dbf2      	blt.n	80009d6 <find_next_blank_page+0x7e>
	}

	uint32_t page_start_concat = (page_start[0] << 24) | (page_start[1] << 16) | (page_start[2] << 8) | page_start[3];
 80009f0:	69fb      	ldr	r3, [r7, #28]
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	061a      	lsls	r2, r3, #24
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	785b      	ldrb	r3, [r3, #1]
 80009fa:	041b      	lsls	r3, r3, #16
 80009fc:	431a      	orrs	r2, r3
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	789b      	ldrb	r3, [r3, #2]
 8000a02:	021b      	lsls	r3, r3, #8
 8000a04:	4313      	orrs	r3, r2
 8000a06:	69fa      	ldr	r2, [r7, #28]
 8000a08:	78d2      	ldrb	r2, [r2, #3]
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t temp = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t page_address = temp;
 8000a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a14:	62bb      	str	r3, [r7, #40]	; 0x28

	while ((page_start_concat != 0xFFFFFFFF) || (temp == NUM_OF_PAGES)) {
 8000a16:	e034      	b.n	8000a82 <find_next_blank_page+0x12a>
		page_address = temp;
 8000a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28

		uint8_t busy = 0x01;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while(busy) {
 8000a22:	e009      	b.n	8000a38 <find_next_blank_page+0xe0>
			busy = (check_status_register(hspi, flashNo) & 0x01);	// Check if there is a write in progress
 8000a24:	78fb      	ldrb	r3, [r7, #3]
 8000a26:	4619      	mov	r1, r3
 8000a28:	68f8      	ldr	r0, [r7, #12]
 8000a2a:	f7ff ff7b 	bl	8000924 <check_status_register>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	f003 0301 	and.w	r3, r3, #1
 8000a34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while(busy) {
 8000a38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d1f1      	bne.n	8000a24 <find_next_blank_page+0xcc>
		}

		spi_read_data(&FLASH_READEN, firstBytes, page_start, hspi, page_address, config.GPIOx, config.GPIO_Pin_CS);
 8000a40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a44:	b299      	uxth	r1, r3
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	8b3a      	ldrh	r2, [r7, #24]
 8000a4a:	9202      	str	r2, [sp, #8]
 8000a4c:	9301      	str	r3, [sp, #4]
 8000a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	69fa      	ldr	r2, [r7, #28]
 8000a56:	4816      	ldr	r0, [pc, #88]	; (8000ab0 <find_next_blank_page+0x158>)
 8000a58:	f000 fcdc 	bl	8001414 <spi_read_data>

		page_start_concat = (page_start[0] << 24) | (page_start[1] << 16) | (page_start[2] << 8) | page_start[3];
 8000a5c:	69fb      	ldr	r3, [r7, #28]
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	061a      	lsls	r2, r3, #24
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	785b      	ldrb	r3, [r3, #1]
 8000a66:	041b      	lsls	r3, r3, #16
 8000a68:	431a      	orrs	r2, r3
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	789b      	ldrb	r3, [r3, #2]
 8000a6e:	021b      	lsls	r3, r3, #8
 8000a70:	4313      	orrs	r3, r2
 8000a72:	69fa      	ldr	r2, [r7, #28]
 8000a74:	78d2      	ldrb	r2, [r2, #3]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	633b      	str	r3, [r7, #48]	; 0x30
		temp += PAGE_SIZE;
 8000a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a7c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000a80:	62fb      	str	r3, [r7, #44]	; 0x2c
	while ((page_start_concat != 0xFFFFFFFF) || (temp == NUM_OF_PAGES)) {
 8000a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a88:	d1c6      	bne.n	8000a18 <find_next_blank_page+0xc0>
 8000a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a90:	d0c2      	beq.n	8000a18 <find_next_blank_page+0xc0>
	}

	if (page_address == (NUM_OF_PAGES * PAGE_SIZE)) {
 8000a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a98:	d102      	bne.n	8000aa0 <find_next_blank_page+0x148>
		*end_of_flash_ptr = GPIO_PIN_RESET;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	701a      	strb	r2, [r3, #0]
	}
	return page_address;
 8000aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa2:	46b5      	mov	sp, r6
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	373c      	adds	r7, #60	; 0x3c
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000aae:	bf00      	nop
 8000ab0:	2000000f 	.word	0x2000000f

08000ab4 <read_page_spi>:

void read_page_spi(uint8_t data_read[PAGE_SIZE], SPI_HandleTypeDef *hspi, uint32_t addr, uint8_t flashNo) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08c      	sub	sp, #48	; 0x30
 8000ab8:	af04      	add	r7, sp, #16
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]
 8000ac0:	70fb      	strb	r3, [r7, #3]
	GPIO_Config config = getGPIOConfig(flashNo);
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	78fa      	ldrb	r2, [r7, #3]
 8000ac8:	4611      	mov	r1, r2
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff fe66 	bl	800079c <getGPIOConfig>

	// Read the status register to ensure no write is currently in progress
	uint8_t busy = 0x01;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	77fb      	strb	r3, [r7, #31]
	while(busy) {
 8000ad4:	e008      	b.n	8000ae8 <read_page_spi+0x34>
		busy = (check_status_register(hspi, flashNo) & 0x01);	// Check if there is a write in progress
 8000ad6:	78fb      	ldrb	r3, [r7, #3]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	68b8      	ldr	r0, [r7, #8]
 8000adc:	f7ff ff22 	bl	8000924 <check_status_register>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	77fb      	strb	r3, [r7, #31]
	while(busy) {
 8000ae8:	7ffb      	ldrb	r3, [r7, #31]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d1f3      	bne.n	8000ad6 <read_page_spi+0x22>
	}

	spi_read_data(&FLASH_READEN, PAGE_SIZE, data_read, hspi, addr, config.GPIOx, config.GPIO_Pin_CS);
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	8b3a      	ldrh	r2, [r7, #24]
 8000af2:	9202      	str	r2, [sp, #8]
 8000af4:	9301      	str	r3, [sp, #4]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	9300      	str	r3, [sp, #0]
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	68fa      	ldr	r2, [r7, #12]
 8000afe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b02:	4803      	ldr	r0, [pc, #12]	; (8000b10 <read_page_spi+0x5c>)
 8000b04:	f000 fc86 	bl	8001414 <spi_read_data>
}
 8000b08:	bf00      	nop
 8000b0a:	3720      	adds	r7, #32
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	2000000f 	.word	0x2000000f

08000b14 <i2c_read_reg>:
 *      Author: aidencontini
 */

#include "i2c_driver.h"

uint8_t i2c_read_reg(I2C_HandleTypeDef* hi2c, uint8_t dev_addr, uint8_t* register_addr) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b088      	sub	sp, #32
 8000b18:	af02      	add	r7, sp, #8
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	460b      	mov	r3, r1
 8000b1e:	607a      	str	r2, [r7, #4]
 8000b20:	72fb      	strb	r3, [r7, #11]
	uint8_t read = 0x00;
 8000b22:	2300      	movs	r3, #0
 8000b24:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Master_Transmit(hi2c, (dev_addr << 1) | 0x00, register_addr, 1, 100);
 8000b26:	7afb      	ldrb	r3, [r7, #11]
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	b299      	uxth	r1, r3
 8000b2e:	2364      	movs	r3, #100	; 0x64
 8000b30:	9300      	str	r3, [sp, #0]
 8000b32:	2301      	movs	r3, #1
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	68f8      	ldr	r0, [r7, #12]
 8000b38:	f001 fe78 	bl	800282c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, (dev_addr << 1) | 0x01, &read, 1, 100);
 8000b3c:	7afb      	ldrb	r3, [r7, #11]
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	b21b      	sxth	r3, r3
 8000b42:	f043 0301 	orr.w	r3, r3, #1
 8000b46:	b21b      	sxth	r3, r3
 8000b48:	b299      	uxth	r1, r3
 8000b4a:	f107 0217 	add.w	r2, r7, #23
 8000b4e:	2364      	movs	r3, #100	; 0x64
 8000b50:	9300      	str	r3, [sp, #0]
 8000b52:	2301      	movs	r3, #1
 8000b54:	68f8      	ldr	r0, [r7, #12]
 8000b56:	f001 ff67 	bl	8002a28 <HAL_I2C_Master_Receive>
	return read;
 8000b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3718      	adds	r7, #24
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <i2c_burst_read>:

void i2c_burst_read(I2C_HandleTypeDef* hi2c, uint8_t dev_addr, uint8_t register_addr, uint8_t size, uint8_t data_buffer[size]) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af02      	add	r7, sp, #8
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	4608      	mov	r0, r1
 8000b6e:	4611      	mov	r1, r2
 8000b70:	461a      	mov	r2, r3
 8000b72:	4603      	mov	r3, r0
 8000b74:	70fb      	strb	r3, [r7, #3]
 8000b76:	460b      	mov	r3, r1
 8000b78:	70bb      	strb	r3, [r7, #2]
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	707b      	strb	r3, [r7, #1]
	// In order to read multiple bytes, it is necessary to assert the most significant bit of the sub-address field.
	uint8_t addr = register_addr | 0x80;
 8000b7e:	78bb      	ldrb	r3, [r7, #2]
 8000b80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Master_Transmit(hi2c, (dev_addr << 1) | 0x00, &addr, 1, 100);
 8000b88:	78fb      	ldrb	r3, [r7, #3]
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	b299      	uxth	r1, r3
 8000b90:	f107 020f 	add.w	r2, r7, #15
 8000b94:	2364      	movs	r3, #100	; 0x64
 8000b96:	9300      	str	r3, [sp, #0]
 8000b98:	2301      	movs	r3, #1
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f001 fe46 	bl	800282c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, (dev_addr << 1) | 0x01, data_buffer, size, 100);
 8000ba0:	78fb      	ldrb	r3, [r7, #3]
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	b21b      	sxth	r3, r3
 8000ba6:	f043 0301 	orr.w	r3, r3, #1
 8000baa:	b21b      	sxth	r3, r3
 8000bac:	b299      	uxth	r1, r3
 8000bae:	787b      	ldrb	r3, [r7, #1]
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	2264      	movs	r2, #100	; 0x64
 8000bb4:	9200      	str	r2, [sp, #0]
 8000bb6:	69ba      	ldr	r2, [r7, #24]
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f001 ff35 	bl	8002a28 <HAL_I2C_Master_Receive>
}
 8000bbe:	bf00      	nop
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <i2c_write_reg>:

HAL_StatusTypeDef i2c_write_reg(I2C_HandleTypeDef* hi2c, uint8_t dev_addr, uint8_t* register_addr, uint8_t data) {
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b088      	sub	sp, #32
 8000bca:	af02      	add	r7, sp, #8
 8000bcc:	60f8      	str	r0, [r7, #12]
 8000bce:	607a      	str	r2, [r7, #4]
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	72fb      	strb	r3, [r7, #11]
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	72bb      	strb	r3, [r7, #10]
	uint8_t data_tx[2] = {*register_addr, data};
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	753b      	strb	r3, [r7, #20]
 8000be0:	7abb      	ldrb	r3, [r7, #10]
 8000be2:	757b      	strb	r3, [r7, #21]
	return HAL_I2C_Master_Transmit(hi2c, (dev_addr << 1) | 0x00, data_tx, 2, 100);
 8000be4:	7afb      	ldrb	r3, [r7, #11]
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	b299      	uxth	r1, r3
 8000bec:	f107 0214 	add.w	r2, r7, #20
 8000bf0:	2364      	movs	r3, #100	; 0x64
 8000bf2:	9300      	str	r3, [sp, #0]
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	68f8      	ldr	r0, [r7, #12]
 8000bf8:	f001 fe18 	bl	800282c <HAL_I2C_Master_Transmit>
 8000bfc:	4603      	mov	r3, r0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3718      	adds	r7, #24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
	...

08000c08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c0e:	f001 f8bb 	bl	8001d88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c12:	f000 f8a7 	bl	8000d64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c16:	f000 fa43 	bl	80010a0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c1a:	f000 f905 	bl	8000e28 <MX_I2C1_Init>
  MX_RTC_Init();
 8000c1e:	f000 f983 	bl	8000f28 <MX_RTC_Init>
  MX_SPI1_Init();
 8000c22:	f000 f9a7 	bl	8000f74 <MX_SPI1_Init>
  MX_TIM6_Init();
 8000c26:	f000 f9db 	bl	8000fe0 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8000c2a:	f000 fa0f 	bl	800104c <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8000c2e:	f000 f93b 	bl	8000ea8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, UARTRxData,1);			// Initiate the UART Receive interrupt
 8000c32:	2201      	movs	r2, #1
 8000c34:	493e      	ldr	r1, [pc, #248]	; (8000d30 <main+0x128>)
 8000c36:	483f      	ldr	r0, [pc, #252]	; (8000d34 <main+0x12c>)
 8000c38:	f005 f84d 	bl	8005cd6 <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);	// Turn LED off
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2180      	movs	r1, #128	; 0x80
 8000c40:	483d      	ldr	r0, [pc, #244]	; (8000d38 <main+0x130>)
 8000c42:	f001 fc7b 	bl	800253c <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim6);
 8000c46:	483d      	ldr	r0, [pc, #244]	; (8000d3c <main+0x134>)
 8000c48:	f004 fc6c 	bl	8005524 <HAL_TIM_Base_Start_IT>
  byte_tracker = 0;
 8000c4c:	4b3c      	ldr	r3, [pc, #240]	; (8000d40 <main+0x138>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	801a      	strh	r2, [r3, #0]
  end_of_flash = GPIO_PIN_SET;
 8000c52:	4b3c      	ldr	r3, [pc, #240]	; (8000d44 <main+0x13c>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	701a      	strb	r2, [r3, #0]
  clean_data_buffer();
 8000c58:	f000 fb0a 	bl	8001270 <clean_data_buffer>
  initialise_rtc_default(&hrtc);
 8000c5c:	483a      	ldr	r0, [pc, #232]	; (8000d48 <main+0x140>)
 8000c5e:	f000 fb27 	bl	80012b0 <initialise_rtc_default>
  init_accel(&hi2c1);
 8000c62:	483a      	ldr	r0, [pc, #232]	; (8000d4c <main+0x144>)
 8000c64:	f7ff fc48 	bl	80004f8 <init_accel>
  init_bme280(&hi2c2, 0);
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4839      	ldr	r0, [pc, #228]	; (8000d50 <main+0x148>)
 8000c6c:	f7ff fc88 	bl	8000580 <init_bme280>
//  init_bme280(&hi2c2, 1);
  HAL_UART_Receive_IT(&huart2, UARTRxData,1);				// Initiate the UART Receive interrupt
 8000c70:	2201      	movs	r2, #1
 8000c72:	492f      	ldr	r1, [pc, #188]	; (8000d30 <main+0x128>)
 8000c74:	482f      	ldr	r0, [pc, #188]	; (8000d34 <main+0x12c>)
 8000c76:	f005 f82e 	bl	8005cd6 <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);		// SET SPI CS High to disable bus
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	2104      	movs	r1, #4
 8000c7e:	4835      	ldr	r0, [pc, #212]	; (8000d54 <main+0x14c>)
 8000c80:	f001 fc5c 	bl	800253c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);		// Turn LED off
 8000c84:	2200      	movs	r2, #0
 8000c86:	2180      	movs	r1, #128	; 0x80
 8000c88:	482b      	ldr	r0, [pc, #172]	; (8000d38 <main+0x130>)
 8000c8a:	f001 fc57 	bl	800253c <HAL_GPIO_WritePin>

  /**
  next_blank_page = find_next_blank_page(&hspi1, &huart2, &end_of_flash);
  **/

  HAL_TIM_Base_Start_IT(&htim6);
 8000c8e:	482b      	ldr	r0, [pc, #172]	; (8000d3c <main+0x134>)
 8000c90:	f004 fc48 	bl	8005524 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // If at the end of the data buffer, write the page out
    if(byte_tracker > (PAGE_SIZE - READ_SIZE)) {
 8000c94:	4b2a      	ldr	r3, [pc, #168]	; (8000d40 <main+0x138>)
 8000c96:	881b      	ldrh	r3, [r3, #0]
 8000c98:	2bec      	cmp	r3, #236	; 0xec
 8000c9a:	d9fb      	bls.n	8000c94 <main+0x8c>
      GPIO_PinState flight_mode = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8000c9c:	2102      	movs	r1, #2
 8000c9e:	4826      	ldr	r0, [pc, #152]	; (8000d38 <main+0x130>)
 8000ca0:	f001 fc34 	bl	800250c <HAL_GPIO_ReadPin>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	71fb      	strb	r3, [r7, #7]
      if((flight_mode & end_of_flash) == GPIO_PIN_SET) {
 8000ca8:	4b26      	ldr	r3, [pc, #152]	; (8000d44 <main+0x13c>)
 8000caa:	781a      	ldrb	r2, [r3, #0]
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d136      	bne.n	8000d24 <main+0x11c>
        // Disable interrupts briefly
        HAL_UART_AbortReceive_IT(&huart2); // Disable UART receive interrupt
 8000cb6:	481f      	ldr	r0, [pc, #124]	; (8000d34 <main+0x12c>)
 8000cb8:	f005 f832 	bl	8005d20 <HAL_UART_AbortReceive_IT>
        HAL_TIM_Base_Stop_IT(&htim6); // Disable timer interrupt
 8000cbc:	481f      	ldr	r0, [pc, #124]	; (8000d3c <main+0x134>)
 8000cbe:	f004 fca1 	bl	8005604 <HAL_TIM_Base_Stop_IT>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);		// Toggle LED when writing data
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	2180      	movs	r1, #128	; 0x80
 8000cc6:	481c      	ldr	r0, [pc, #112]	; (8000d38 <main+0x130>)
 8000cc8:	f001 fc38 	bl	800253c <HAL_GPIO_WritePin>
        write_data_spi(data_buffer, flight_mode, &hspi1, next_blank_page, 0);
 8000ccc:	4b22      	ldr	r3, [pc, #136]	; (8000d58 <main+0x150>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	79f9      	ldrb	r1, [r7, #7]
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	4a20      	ldr	r2, [pc, #128]	; (8000d5c <main+0x154>)
 8000cdc:	4820      	ldr	r0, [pc, #128]	; (8000d60 <main+0x158>)
 8000cde:	f7ff fddd 	bl	800089c <write_data_spi>
        next_blank_page += PAGE_SIZE;
 8000ce2:	4b1d      	ldr	r3, [pc, #116]	; (8000d58 <main+0x150>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000cea:	4a1b      	ldr	r2, [pc, #108]	; (8000d58 <main+0x150>)
 8000cec:	6013      	str	r3, [r2, #0]

        // Renenable interrupts
        HAL_UART_Receive_IT(&huart2, UARTRxData,1);			// Initiate the UART Receive interrupt
 8000cee:	2201      	movs	r2, #1
 8000cf0:	490f      	ldr	r1, [pc, #60]	; (8000d30 <main+0x128>)
 8000cf2:	4810      	ldr	r0, [pc, #64]	; (8000d34 <main+0x12c>)
 8000cf4:	f004 ffef 	bl	8005cd6 <HAL_UART_Receive_IT>
        HAL_TIM_Base_Start_IT(&htim6);
 8000cf8:	4810      	ldr	r0, [pc, #64]	; (8000d3c <main+0x134>)
 8000cfa:	f004 fc13 	bl	8005524 <HAL_TIM_Base_Start_IT>

        if(next_blank_page == (NUM_OF_PAGES*PAGE_SIZE)) {
 8000cfe:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <main+0x150>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d06:	d108      	bne.n	8000d1a <main+0x112>
          next_blank_page = find_next_blank_page(&hspi1, &huart2, &end_of_flash, 0);
 8000d08:	2300      	movs	r3, #0
 8000d0a:	4a0e      	ldr	r2, [pc, #56]	; (8000d44 <main+0x13c>)
 8000d0c:	4909      	ldr	r1, [pc, #36]	; (8000d34 <main+0x12c>)
 8000d0e:	4813      	ldr	r0, [pc, #76]	; (8000d5c <main+0x154>)
 8000d10:	f7ff fe22 	bl	8000958 <find_next_blank_page>
 8000d14:	4603      	mov	r3, r0
 8000d16:	4a10      	ldr	r2, [pc, #64]	; (8000d58 <main+0x150>)
 8000d18:	6013      	str	r3, [r2, #0]
        }
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);		// Toggle LED when writing data
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2180      	movs	r1, #128	; 0x80
 8000d1e:	4806      	ldr	r0, [pc, #24]	; (8000d38 <main+0x130>)
 8000d20:	f001 fc0c 	bl	800253c <HAL_GPIO_WritePin>
      }
      byte_tracker = 0;
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <main+0x138>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	801a      	strh	r2, [r3, #0]
      clean_data_buffer();
 8000d2a:	f000 faa1 	bl	8001270 <clean_data_buffer>
    if(byte_tracker > (PAGE_SIZE - READ_SIZE)) {
 8000d2e:	e7b1      	b.n	8000c94 <main+0x8c>
 8000d30:	200001f0 	.word	0x200001f0
 8000d34:	200001a8 	.word	0x200001a8
 8000d38:	40020400 	.word	0x40020400
 8000d3c:	20000160 	.word	0x20000160
 8000d40:	200002f8 	.word	0x200002f8
 8000d44:	200002fa 	.word	0x200002fa
 8000d48:	200000e8 	.word	0x200000e8
 8000d4c:	20000040 	.word	0x20000040
 8000d50:	20000094 	.word	0x20000094
 8000d54:	40020c00 	.word	0x40020c00
 8000d58:	200002f4 	.word	0x200002f4
 8000d5c:	20000108 	.word	0x20000108
 8000d60:	200001f4 	.word	0x200001f4

08000d64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b094      	sub	sp, #80	; 0x50
 8000d68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6a:	f107 0320 	add.w	r3, r7, #32
 8000d6e:	2230      	movs	r2, #48	; 0x30
 8000d70:	2100      	movs	r1, #0
 8000d72:	4618      	mov	r0, r3
 8000d74:	f005 fffe 	bl	8006d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d78:	f107 030c 	add.w	r3, r7, #12
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	4b24      	ldr	r3, [pc, #144]	; (8000e20 <SystemClock_Config+0xbc>)
 8000d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d90:	4a23      	ldr	r2, [pc, #140]	; (8000e20 <SystemClock_Config+0xbc>)
 8000d92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d96:	6413      	str	r3, [r2, #64]	; 0x40
 8000d98:	4b21      	ldr	r3, [pc, #132]	; (8000e20 <SystemClock_Config+0xbc>)
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000da4:	2300      	movs	r3, #0
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	4b1e      	ldr	r3, [pc, #120]	; (8000e24 <SystemClock_Config+0xc0>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000db0:	4a1c      	ldr	r2, [pc, #112]	; (8000e24 <SystemClock_Config+0xc0>)
 8000db2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db6:	6013      	str	r3, [r2, #0]
 8000db8:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <SystemClock_Config+0xc0>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000dc4:	230a      	movs	r3, #10
 8000dc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dcc:	2310      	movs	r3, #16
 8000dce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd8:	f107 0320 	add.w	r3, r7, #32
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f002 fc57 	bl	8003690 <HAL_RCC_OscConfig>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000de8:	f000 fa5c 	bl	80012a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dec:	230f      	movs	r3, #15
 8000dee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000df0:	2300      	movs	r3, #0
 8000df2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e00:	f107 030c 	add.w	r3, r7, #12
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f002 feba 	bl	8003b80 <HAL_RCC_ClockConfig>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000e12:	f000 fa47 	bl	80012a4 <Error_Handler>
  }
}
 8000e16:	bf00      	nop
 8000e18:	3750      	adds	r7, #80	; 0x50
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40007000 	.word	0x40007000

08000e28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e2c:	4b1b      	ldr	r3, [pc, #108]	; (8000e9c <MX_I2C1_Init+0x74>)
 8000e2e:	4a1c      	ldr	r2, [pc, #112]	; (8000ea0 <MX_I2C1_Init+0x78>)
 8000e30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e32:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <MX_I2C1_Init+0x74>)
 8000e34:	4a1b      	ldr	r2, [pc, #108]	; (8000ea4 <MX_I2C1_Init+0x7c>)
 8000e36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e38:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <MX_I2C1_Init+0x74>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e3e:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <MX_I2C1_Init+0x74>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e44:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <MX_I2C1_Init+0x74>)
 8000e46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e4c:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <MX_I2C1_Init+0x74>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e52:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <MX_I2C1_Init+0x74>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e58:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <MX_I2C1_Init+0x74>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <MX_I2C1_Init+0x74>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e64:	480d      	ldr	r0, [pc, #52]	; (8000e9c <MX_I2C1_Init+0x74>)
 8000e66:	f001 fb9d 	bl	80025a4 <HAL_I2C_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e70:	f000 fa18 	bl	80012a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e74:	2100      	movs	r1, #0
 8000e76:	4809      	ldr	r0, [pc, #36]	; (8000e9c <MX_I2C1_Init+0x74>)
 8000e78:	f002 fb8e 	bl	8003598 <HAL_I2CEx_ConfigAnalogFilter>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000e82:	f000 fa0f 	bl	80012a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e86:	2100      	movs	r1, #0
 8000e88:	4804      	ldr	r0, [pc, #16]	; (8000e9c <MX_I2C1_Init+0x74>)
 8000e8a:	f002 fbc1 	bl	8003610 <HAL_I2CEx_ConfigDigitalFilter>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000e94:	f000 fa06 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000040 	.word	0x20000040
 8000ea0:	40005400 	.word	0x40005400
 8000ea4:	000186a0 	.word	0x000186a0

08000ea8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000eac:	4b1b      	ldr	r3, [pc, #108]	; (8000f1c <MX_I2C2_Init+0x74>)
 8000eae:	4a1c      	ldr	r2, [pc, #112]	; (8000f20 <MX_I2C2_Init+0x78>)
 8000eb0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000eb2:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <MX_I2C2_Init+0x74>)
 8000eb4:	4a1b      	ldr	r2, [pc, #108]	; (8000f24 <MX_I2C2_Init+0x7c>)
 8000eb6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000eb8:	4b18      	ldr	r3, [pc, #96]	; (8000f1c <MX_I2C2_Init+0x74>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000ebe:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <MX_I2C2_Init+0x74>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ec4:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <MX_I2C2_Init+0x74>)
 8000ec6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000eca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ecc:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <MX_I2C2_Init+0x74>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000ed2:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <MX_I2C2_Init+0x74>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ed8:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <MX_I2C2_Init+0x74>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ede:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <MX_I2C2_Init+0x74>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ee4:	480d      	ldr	r0, [pc, #52]	; (8000f1c <MX_I2C2_Init+0x74>)
 8000ee6:	f001 fb5d 	bl	80025a4 <HAL_I2C_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000ef0:	f000 f9d8 	bl	80012a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4809      	ldr	r0, [pc, #36]	; (8000f1c <MX_I2C2_Init+0x74>)
 8000ef8:	f002 fb4e 	bl	8003598 <HAL_I2CEx_ConfigAnalogFilter>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000f02:	f000 f9cf 	bl	80012a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000f06:	2100      	movs	r1, #0
 8000f08:	4804      	ldr	r0, [pc, #16]	; (8000f1c <MX_I2C2_Init+0x74>)
 8000f0a:	f002 fb81 	bl	8003610 <HAL_I2CEx_ConfigDigitalFilter>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000f14:	f000 f9c6 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000094 	.word	0x20000094
 8000f20:	40005800 	.word	0x40005800
 8000f24:	000186a0 	.word	0x000186a0

08000f28 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <MX_RTC_Init+0x44>)
 8000f2e:	4a10      	ldr	r2, [pc, #64]	; (8000f70 <MX_RTC_Init+0x48>)
 8000f30:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <MX_RTC_Init+0x44>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f38:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <MX_RTC_Init+0x44>)
 8000f3a:	227f      	movs	r2, #127	; 0x7f
 8000f3c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <MX_RTC_Init+0x44>)
 8000f40:	22ff      	movs	r2, #255	; 0xff
 8000f42:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f44:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <MX_RTC_Init+0x44>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f4a:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <MX_RTC_Init+0x44>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <MX_RTC_Init+0x44>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f56:	4805      	ldr	r0, [pc, #20]	; (8000f6c <MX_RTC_Init+0x44>)
 8000f58:	f003 f9b2 	bl	80042c0 <HAL_RTC_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000f62:	f000 f99f 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	200000e8 	.word	0x200000e8
 8000f70:	40002800 	.word	0x40002800

08000f74 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f78:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <MX_SPI1_Init+0x64>)
 8000f7a:	4a18      	ldr	r2, [pc, #96]	; (8000fdc <MX_SPI1_Init+0x68>)
 8000f7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f7e:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <MX_SPI1_Init+0x64>)
 8000f80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f86:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <MX_SPI1_Init+0x64>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <MX_SPI1_Init+0x64>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f92:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <MX_SPI1_Init+0x64>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f98:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <MX_SPI1_Init+0x64>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <MX_SPI1_Init+0x64>)
 8000fa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fa4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <MX_SPI1_Init+0x64>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fac:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <MX_SPI1_Init+0x64>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fb2:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <MX_SPI1_Init+0x64>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fb8:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <MX_SPI1_Init+0x64>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <MX_SPI1_Init+0x64>)
 8000fc0:	220a      	movs	r2, #10
 8000fc2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fc4:	4804      	ldr	r0, [pc, #16]	; (8000fd8 <MX_SPI1_Init+0x64>)
 8000fc6:	f003 fc87 	bl	80048d8 <HAL_SPI_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000fd0:	f000 f968 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000108 	.word	0x20000108
 8000fdc:	40013000 	.word	0x40013000

08000fe0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000fee:	4b15      	ldr	r3, [pc, #84]	; (8001044 <MX_TIM6_Init+0x64>)
 8000ff0:	4a15      	ldr	r2, [pc, #84]	; (8001048 <MX_TIM6_Init+0x68>)
 8000ff2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15999;
 8000ff4:	4b13      	ldr	r3, [pc, #76]	; (8001044 <MX_TIM6_Init+0x64>)
 8000ff6:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000ffa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ffc:	4b11      	ldr	r3, [pc, #68]	; (8001044 <MX_TIM6_Init+0x64>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8001002:	4b10      	ldr	r3, [pc, #64]	; (8001044 <MX_TIM6_Init+0x64>)
 8001004:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001008:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800100a:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <MX_TIM6_Init+0x64>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001010:	480c      	ldr	r0, [pc, #48]	; (8001044 <MX_TIM6_Init+0x64>)
 8001012:	f004 fa37 	bl	8005484 <HAL_TIM_Base_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800101c:	f000 f942 	bl	80012a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001020:	2300      	movs	r3, #0
 8001022:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001024:	2300      	movs	r3, #0
 8001026:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001028:	463b      	mov	r3, r7
 800102a:	4619      	mov	r1, r3
 800102c:	4805      	ldr	r0, [pc, #20]	; (8001044 <MX_TIM6_Init+0x64>)
 800102e:	f004 fce7 	bl	8005a00 <HAL_TIMEx_MasterConfigSynchronization>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001038:	f000 f934 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000160 	.word	0x20000160
 8001048:	40001000 	.word	0x40001000

0800104c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001050:	4b11      	ldr	r3, [pc, #68]	; (8001098 <MX_USART2_UART_Init+0x4c>)
 8001052:	4a12      	ldr	r2, [pc, #72]	; (800109c <MX_USART2_UART_Init+0x50>)
 8001054:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001056:	4b10      	ldr	r3, [pc, #64]	; (8001098 <MX_USART2_UART_Init+0x4c>)
 8001058:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800105c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800105e:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <MX_USART2_UART_Init+0x4c>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <MX_USART2_UART_Init+0x4c>)
 8001066:	2200      	movs	r2, #0
 8001068:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800106a:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <MX_USART2_UART_Init+0x4c>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001070:	4b09      	ldr	r3, [pc, #36]	; (8001098 <MX_USART2_UART_Init+0x4c>)
 8001072:	220c      	movs	r2, #12
 8001074:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001076:	4b08      	ldr	r3, [pc, #32]	; (8001098 <MX_USART2_UART_Init+0x4c>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <MX_USART2_UART_Init+0x4c>)
 800107e:	2200      	movs	r2, #0
 8001080:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001082:	4805      	ldr	r0, [pc, #20]	; (8001098 <MX_USART2_UART_Init+0x4c>)
 8001084:	f004 fd4c 	bl	8005b20 <HAL_UART_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800108e:	f000 f909 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200001a8 	.word	0x200001a8
 800109c:	40004400 	.word	0x40004400

080010a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08a      	sub	sp, #40	; 0x28
 80010a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]
 80010b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	613b      	str	r3, [r7, #16]
 80010ba:	4b68      	ldr	r3, [pc, #416]	; (800125c <MX_GPIO_Init+0x1bc>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a67      	ldr	r2, [pc, #412]	; (800125c <MX_GPIO_Init+0x1bc>)
 80010c0:	f043 0304 	orr.w	r3, r3, #4
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b65      	ldr	r3, [pc, #404]	; (800125c <MX_GPIO_Init+0x1bc>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0304 	and.w	r3, r3, #4
 80010ce:	613b      	str	r3, [r7, #16]
 80010d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	4b61      	ldr	r3, [pc, #388]	; (800125c <MX_GPIO_Init+0x1bc>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a60      	ldr	r2, [pc, #384]	; (800125c <MX_GPIO_Init+0x1bc>)
 80010dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b5e      	ldr	r3, [pc, #376]	; (800125c <MX_GPIO_Init+0x1bc>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	4b5a      	ldr	r3, [pc, #360]	; (800125c <MX_GPIO_Init+0x1bc>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a59      	ldr	r2, [pc, #356]	; (800125c <MX_GPIO_Init+0x1bc>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b57      	ldr	r3, [pc, #348]	; (800125c <MX_GPIO_Init+0x1bc>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	4b53      	ldr	r3, [pc, #332]	; (800125c <MX_GPIO_Init+0x1bc>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a52      	ldr	r2, [pc, #328]	; (800125c <MX_GPIO_Init+0x1bc>)
 8001114:	f043 0302 	orr.w	r3, r3, #2
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b50      	ldr	r3, [pc, #320]	; (800125c <MX_GPIO_Init+0x1bc>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	603b      	str	r3, [r7, #0]
 800112a:	4b4c      	ldr	r3, [pc, #304]	; (800125c <MX_GPIO_Init+0x1bc>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a4b      	ldr	r2, [pc, #300]	; (800125c <MX_GPIO_Init+0x1bc>)
 8001130:	f043 0308 	orr.w	r3, r3, #8
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b49      	ldr	r3, [pc, #292]	; (800125c <MX_GPIO_Init+0x1bc>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0308 	and.w	r3, r3, #8
 800113e:	603b      	str	r3, [r7, #0]
 8001140:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_WP_GPIO_Port, SPI2_WP_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	2101      	movs	r1, #1
 8001146:	4846      	ldr	r0, [pc, #280]	; (8001260 <MX_GPIO_Init+0x1c0>)
 8001148:	f001 f9f8 	bl	800253c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 800114c:	2200      	movs	r2, #0
 800114e:	f44f 41a1 	mov.w	r1, #20608	; 0x5080
 8001152:	4844      	ldr	r0, [pc, #272]	; (8001264 <MX_GPIO_Init+0x1c4>)
 8001154:	f001 f9f2 	bl	800253c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI1_WP_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8001158:	2200      	movs	r2, #0
 800115a:	f244 0104 	movw	r1, #16388	; 0x4004
 800115e:	4842      	ldr	r0, [pc, #264]	; (8001268 <MX_GPIO_Init+0x1c8>)
 8001160:	f001 f9ec 	bl	800253c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI2_WP_Pin */
  GPIO_InitStruct.Pin = SPI2_WP_Pin;
 8001164:	2301      	movs	r3, #1
 8001166:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001168:	2301      	movs	r3, #1
 800116a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800116c:	2301      	movs	r3, #1
 800116e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_WP_GPIO_Port, &GPIO_InitStruct);
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	4619      	mov	r1, r3
 800117a:	4839      	ldr	r0, [pc, #228]	; (8001260 <MX_GPIO_Init+0x1c0>)
 800117c:	f001 f81a 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001180:	230c      	movs	r3, #12
 8001182:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118c:	2303      	movs	r3, #3
 800118e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001190:	2305      	movs	r3, #5
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4619      	mov	r1, r3
 800119a:	4831      	ldr	r0, [pc, #196]	; (8001260 <MX_GPIO_Init+0x1c0>)
 800119c:	f001 f80a 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : JMP_Flight_Pin */
  GPIO_InitStruct.Pin = JMP_Flight_Pin;
 80011a0:	2302      	movs	r3, #2
 80011a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011a8:	2302      	movs	r3, #2
 80011aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(JMP_Flight_GPIO_Port, &GPIO_InitStruct);
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	4619      	mov	r1, r3
 80011b2:	482c      	ldr	r0, [pc, #176]	; (8001264 <MX_GPIO_Init+0x1c4>)
 80011b4:	f000 fffe 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 80011b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011be:	2301      	movs	r3, #1
 80011c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c2:	2301      	movs	r3, #1
 80011c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c6:	2300      	movs	r3, #0
 80011c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 80011ca:	f107 0314 	add.w	r3, r7, #20
 80011ce:	4619      	mov	r1, r3
 80011d0:	4824      	ldr	r0, [pc, #144]	; (8001264 <MX_GPIO_Init+0x1c4>)
 80011d2:	f000 ffef 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 80011d6:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80011da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011dc:	2301      	movs	r3, #1
 80011de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011e0:	2302      	movs	r3, #2
 80011e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	4619      	mov	r1, r3
 80011ee:	481d      	ldr	r0, [pc, #116]	; (8001264 <MX_GPIO_Init+0x1c4>)
 80011f0:	f000 ffe0 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_WP_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_WP_Pin|SPI1_CS_Pin;
 80011f4:	f244 0304 	movw	r3, #16388	; 0x4004
 80011f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fa:	2301      	movs	r3, #1
 80011fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011fe:	2301      	movs	r3, #1
 8001200:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	4619      	mov	r1, r3
 800120c:	4816      	ldr	r0, [pc, #88]	; (8001268 <MX_GPIO_Init+0x1c8>)
 800120e:	f000 ffd1 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001212:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001216:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001220:	2303      	movs	r3, #3
 8001222:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001224:	2309      	movs	r3, #9
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4619      	mov	r1, r3
 800122e:	480f      	ldr	r0, [pc, #60]	; (800126c <MX_GPIO_Init+0x1cc>)
 8001230:	f000 ffc0 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001234:	2308      	movs	r3, #8
 8001236:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2302      	movs	r3, #2
 800123a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001240:	2303      	movs	r3, #3
 8001242:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001244:	2305      	movs	r3, #5
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4619      	mov	r1, r3
 800124e:	4806      	ldr	r0, [pc, #24]	; (8001268 <MX_GPIO_Init+0x1c8>)
 8001250:	f000 ffb0 	bl	80021b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001254:	bf00      	nop
 8001256:	3728      	adds	r7, #40	; 0x28
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40023800 	.word	0x40023800
 8001260:	40020800 	.word	0x40020800
 8001264:	40020400 	.word	0x40020400
 8001268:	40020c00 	.word	0x40020c00
 800126c:	40020000 	.word	0x40020000

08001270 <clean_data_buffer>:

/* USER CODE BEGIN 4 */
void clean_data_buffer() {
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
    for (int i = 0; i < PAGE_SIZE; ++i) {
 8001276:	2300      	movs	r3, #0
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	e007      	b.n	800128c <clean_data_buffer+0x1c>
        data_buffer[i] = 0xFF;  // Initialize each element to 0xFF
 800127c:	4a08      	ldr	r2, [pc, #32]	; (80012a0 <clean_data_buffer+0x30>)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4413      	add	r3, r2
 8001282:	22ff      	movs	r2, #255	; 0xff
 8001284:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < PAGE_SIZE; ++i) {
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	3301      	adds	r3, #1
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2bff      	cmp	r3, #255	; 0xff
 8001290:	ddf4      	ble.n	800127c <clean_data_buffer+0xc>
    }
}
 8001292:	bf00      	nop
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	200001f4 	.word	0x200001f4

080012a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a8:	b672      	cpsid	i
}
 80012aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ac:	e7fe      	b.n	80012ac <Error_Handler+0x8>
	...

080012b0 <initialise_rtc_default>:
    .Month = RTC_MONTH_JANUARY, // Set default month (e.g., January)
    .Date = 1, // Set default day of the month
    .Year = 24 // Set default year (e.g., 2021)
};

void initialise_rtc_default(RTC_HandleTypeDef* hrtc) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	// Reset RTC on boot
	HAL_RTC_MspInit(hrtc); // Initialize RTC hardware
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f000 f9db 	bl	8001674 <HAL_RTC_MspInit>
	HAL_RTC_SetTime(hrtc, &defaultTime, RTC_FORMAT_BIN); // Set default time
 80012be:	2200      	movs	r2, #0
 80012c0:	4906      	ldr	r1, [pc, #24]	; (80012dc <initialise_rtc_default+0x2c>)
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f003 f87f 	bl	80043c6 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(hrtc, &defaultDate, RTC_FORMAT_BIN); // Set default date
 80012c8:	2200      	movs	r2, #0
 80012ca:	4905      	ldr	r1, [pc, #20]	; (80012e0 <initialise_rtc_default+0x30>)
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f003 f972 	bl	80045b6 <HAL_RTC_SetDate>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	200002fc 	.word	0x200002fc
 80012e0:	20000014 	.word	0x20000014

080012e4 <getTimestampMilliseconds>:

uint32_t getTimestampMilliseconds(RTC_HandleTypeDef* hrtc) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08c      	sub	sp, #48	; 0x30
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
    RTC_TimeTypeDef rtcTime;
    RTC_DateTypeDef rtcDate;

    // Read RTC time and date
    HAL_RTC_GetTime(hrtc, &rtcTime, RTC_FORMAT_BIN);
 80012ec:	f107 0310 	add.w	r3, r7, #16
 80012f0:	2200      	movs	r2, #0
 80012f2:	4619      	mov	r1, r3
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f003 f900 	bl	80044fa <HAL_RTC_GetTime>
    HAL_RTC_GetDate(hrtc, &rtcDate, RTC_FORMAT_BIN);
 80012fa:	f107 030c 	add.w	r3, r7, #12
 80012fe:	2200      	movs	r2, #0
 8001300:	4619      	mov	r1, r3
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f003 f9db 	bl	80046be <HAL_RTC_GetDate>

    // Calculate timestamp in milliseconds
    uint32_t timestampSeconds = rtcTime.Seconds + rtcTime.Minutes * 60 + rtcTime.Hours * 3600;
 8001308:	7cbb      	ldrb	r3, [r7, #18]
 800130a:	4619      	mov	r1, r3
 800130c:	7c7b      	ldrb	r3, [r7, #17]
 800130e:	461a      	mov	r2, r3
 8001310:	4613      	mov	r3, r2
 8001312:	011b      	lsls	r3, r3, #4
 8001314:	1a9b      	subs	r3, r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	18ca      	adds	r2, r1, r3
 800131a:	7c3b      	ldrb	r3, [r7, #16]
 800131c:	4619      	mov	r1, r3
 800131e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001322:	fb01 f303 	mul.w	r3, r1, r3
 8001326:	4413      	add	r3, r2
 8001328:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t timestampMilliseconds = timestampSeconds * 1000;
 800132a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800132c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001330:	fb02 f303 	mul.w	r3, r2, r3
 8001334:	62bb      	str	r3, [r7, #40]	; 0x28
    float subsecondsFraction = (float)(rtcTime.SecondFraction - rtcTime.SubSeconds) / (rtcTime.SecondFraction + 1);
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	ee07 3a90 	vmov	s15, r3
 8001340:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	3301      	adds	r3, #1
 8001348:	ee07 3a90 	vmov	s15, r3
 800134c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001350:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001354:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    timestampMilliseconds += subsecondsFraction * 1000;
 8001358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800135a:	ee07 3a90 	vmov	s15, r3
 800135e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001362:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001366:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001388 <getTimestampMilliseconds+0xa4>
 800136a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800136e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001372:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001376:	ee17 3a90 	vmov	r3, s15
 800137a:	62bb      	str	r3, [r7, #40]	; 0x28

    return timestampMilliseconds;
 800137c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800137e:	4618      	mov	r0, r3
 8001380:	3730      	adds	r7, #48	; 0x30
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	447a0000 	.word	0x447a0000

0800138c <spi_sendOp_readByte>:
#ifndef SRC_SPI_DRIVER_C_
#define SRC_SPI_DRIVER_C_

#include "spi_driver.h"

uint8_t spi_sendOp_readByte(uint8_t* opcode, SPI_HandleTypeDef *hspi, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
 8001398:	807b      	strh	r3, [r7, #2]
	uint8_t ret_data = 0x00;
 800139a:	2300      	movs	r3, #0
 800139c:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);	// Set the chip select pin to low to initiate SPI comms
 800139e:	887b      	ldrh	r3, [r7, #2]
 80013a0:	2200      	movs	r2, #0
 80013a2:	4619      	mov	r1, r3
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f001 f8c9 	bl	800253c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, opcode, 1, 100);	// Write the write enable value to the Flash to initial reading
 80013aa:	2364      	movs	r3, #100	; 0x64
 80013ac:	2201      	movs	r2, #1
 80013ae:	68f9      	ldr	r1, [r7, #12]
 80013b0:	68b8      	ldr	r0, [r7, #8]
 80013b2:	f003 fb1a 	bl	80049ea <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, &ret_data, 1, 100);
 80013b6:	f107 0117 	add.w	r1, r7, #23
 80013ba:	2364      	movs	r3, #100	; 0x64
 80013bc:	2201      	movs	r2, #1
 80013be:	68b8      	ldr	r0, [r7, #8]
 80013c0:	f003 fc56 	bl	8004c70 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);
 80013c4:	887b      	ldrh	r3, [r7, #2]
 80013c6:	2201      	movs	r2, #1
 80013c8:	4619      	mov	r1, r3
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f001 f8b6 	bl	800253c <HAL_GPIO_WritePin>

	return ret_data;
 80013d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <perform_operation>:

void perform_operation(uint8_t* opcode, SPI_HandleTypeDef *hspi, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 80013da:	b580      	push	{r7, lr}
 80013dc:	b084      	sub	sp, #16
 80013de:	af00      	add	r7, sp, #0
 80013e0:	60f8      	str	r0, [r7, #12]
 80013e2:	60b9      	str	r1, [r7, #8]
 80013e4:	607a      	str	r2, [r7, #4]
 80013e6:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);	// Set the chip select pin to low to initiate SPI comms
 80013e8:	887b      	ldrh	r3, [r7, #2]
 80013ea:	2200      	movs	r2, #0
 80013ec:	4619      	mov	r1, r3
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f001 f8a4 	bl	800253c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, opcode, 1, 100);				// Write the opcode value
 80013f4:	2364      	movs	r3, #100	; 0x64
 80013f6:	2201      	movs	r2, #1
 80013f8:	68f9      	ldr	r1, [r7, #12]
 80013fa:	68b8      	ldr	r0, [r7, #8]
 80013fc:	f003 faf5 	bl	80049ea <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);
 8001400:	887b      	ldrh	r3, [r7, #2]
 8001402:	2201      	movs	r2, #1
 8001404:	4619      	mov	r1, r3
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f001 f898 	bl	800253c <HAL_GPIO_WritePin>
}
 800140c:	bf00      	nop
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <spi_read_data>:


void spi_read_data(uint8_t* opcode, uint16_t data_size, uint8_t data_read[data_size], SPI_HandleTypeDef *hspi, uint32_t addr, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	607a      	str	r2, [r7, #4]
 800141e:	603b      	str	r3, [r7, #0]
 8001420:	460b      	mov	r3, r1
 8001422:	817b      	strh	r3, [r7, #10]
	// Split the 24 bit address into three 8 bit ints
	uint8_t addrL = addr & 0xFF;  // Get the low byte
 8001424:	6a3b      	ldr	r3, [r7, #32]
 8001426:	b2db      	uxtb	r3, r3
 8001428:	75fb      	strb	r3, [r7, #23]
	uint8_t addrM = (addr >> 8) & 0xFF;  // Get the middle byte
 800142a:	6a3b      	ldr	r3, [r7, #32]
 800142c:	0a1b      	lsrs	r3, r3, #8
 800142e:	b2db      	uxtb	r3, r3
 8001430:	75bb      	strb	r3, [r7, #22]
	uint8_t addrH = (addr >> 16) & 0xFF;  // Get the high byte
 8001432:	6a3b      	ldr	r3, [r7, #32]
 8001434:	0c1b      	lsrs	r3, r3, #16
 8001436:	b2db      	uxtb	r3, r3
 8001438:	757b      	strb	r3, [r7, #21]

	// Read the data denoted by the given address
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);
 800143a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800143c:	2200      	movs	r2, #0
 800143e:	4619      	mov	r1, r3
 8001440:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001442:	f001 f87b 	bl	800253c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, opcode, 1, 100);	// Write the read enable value
 8001446:	2364      	movs	r3, #100	; 0x64
 8001448:	2201      	movs	r2, #1
 800144a:	68f9      	ldr	r1, [r7, #12]
 800144c:	6838      	ldr	r0, [r7, #0]
 800144e:	f003 facc 	bl	80049ea <HAL_SPI_Transmit>

	// Transmit the 24 bit address of the page to initialise read from
	HAL_SPI_Transmit(hspi, &addrH, 1, 100);
 8001452:	f107 0115 	add.w	r1, r7, #21
 8001456:	2364      	movs	r3, #100	; 0x64
 8001458:	2201      	movs	r2, #1
 800145a:	6838      	ldr	r0, [r7, #0]
 800145c:	f003 fac5 	bl	80049ea <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &addrM, 1, 100);
 8001460:	f107 0116 	add.w	r1, r7, #22
 8001464:	2364      	movs	r3, #100	; 0x64
 8001466:	2201      	movs	r2, #1
 8001468:	6838      	ldr	r0, [r7, #0]
 800146a:	f003 fabe 	bl	80049ea <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &addrL, 1, 100);
 800146e:	f107 0117 	add.w	r1, r7, #23
 8001472:	2364      	movs	r3, #100	; 0x64
 8001474:	2201      	movs	r2, #1
 8001476:	6838      	ldr	r0, [r7, #0]
 8001478:	f003 fab7 	bl	80049ea <HAL_SPI_Transmit>

	HAL_SPI_Receive(hspi, data_read, 4, 100);
 800147c:	2364      	movs	r3, #100	; 0x64
 800147e:	2204      	movs	r2, #4
 8001480:	6879      	ldr	r1, [r7, #4]
 8001482:	6838      	ldr	r0, [r7, #0]
 8001484:	f003 fbf4 	bl	8004c70 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);
 8001488:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800148a:	2201      	movs	r2, #1
 800148c:	4619      	mov	r1, r3
 800148e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001490:	f001 f854 	bl	800253c <HAL_GPIO_WritePin>
}
 8001494:	bf00      	nop
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <spi_write_data>:

void spi_write_data(uint8_t* opcode, uint16_t data_size, uint8_t data_write[data_size], SPI_HandleTypeDef *hspi, uint32_t addr, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	607a      	str	r2, [r7, #4]
 80014a6:	603b      	str	r3, [r7, #0]
 80014a8:	460b      	mov	r3, r1
 80014aa:	817b      	strh	r3, [r7, #10]
	// Split the 24 bit address into three 8 bit ints
	uint8_t addrL = addr & 0xFF;  			// Get the low byte
 80014ac:	6a3b      	ldr	r3, [r7, #32]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	75fb      	strb	r3, [r7, #23]
	uint8_t addrM = (addr >> 8) & 0xFF;  	// Get the middle byte
 80014b2:	6a3b      	ldr	r3, [r7, #32]
 80014b4:	0a1b      	lsrs	r3, r3, #8
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	75bb      	strb	r3, [r7, #22]
	uint8_t addrH = (addr >> 16) & 0xFF;  	// Get the high byte
 80014ba:	6a3b      	ldr	r3, [r7, #32]
 80014bc:	0c1b      	lsrs	r3, r3, #16
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	757b      	strb	r3, [r7, #21]

	// Send the PageWrite command
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);	// Set the chip select pin to low to initiate SPI comms
 80014c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80014c4:	2200      	movs	r2, #0
 80014c6:	4619      	mov	r1, r3
 80014c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014ca:	f001 f837 	bl	800253c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, opcode, 1, 100);					// Write the write enable value to the Flash to initial writing
 80014ce:	2364      	movs	r3, #100	; 0x64
 80014d0:	2201      	movs	r2, #1
 80014d2:	68f9      	ldr	r1, [r7, #12]
 80014d4:	6838      	ldr	r0, [r7, #0]
 80014d6:	f003 fa88 	bl	80049ea <HAL_SPI_Transmit>

	// Transmit the 24 bit address of the page to write to
	HAL_SPI_Transmit(hspi, &addrH, 1, 100);
 80014da:	f107 0115 	add.w	r1, r7, #21
 80014de:	2364      	movs	r3, #100	; 0x64
 80014e0:	2201      	movs	r2, #1
 80014e2:	6838      	ldr	r0, [r7, #0]
 80014e4:	f003 fa81 	bl	80049ea <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &addrM, 1, 100);
 80014e8:	f107 0116 	add.w	r1, r7, #22
 80014ec:	2364      	movs	r3, #100	; 0x64
 80014ee:	2201      	movs	r2, #1
 80014f0:	6838      	ldr	r0, [r7, #0]
 80014f2:	f003 fa7a 	bl	80049ea <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &addrL, 1, 100);
 80014f6:	f107 0117 	add.w	r1, r7, #23
 80014fa:	2364      	movs	r3, #100	; 0x64
 80014fc:	2201      	movs	r2, #1
 80014fe:	6838      	ldr	r0, [r7, #0]
 8001500:	f003 fa73 	bl	80049ea <HAL_SPI_Transmit>

	// Transmit the data to be written
	HAL_SPI_Transmit(hspi, data_write, data_size, 1000);
 8001504:	897a      	ldrh	r2, [r7, #10]
 8001506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	6838      	ldr	r0, [r7, #0]
 800150e:	f003 fa6c 	bl	80049ea <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);	// Set the chip select pin to high to remove the Flash from the SPI bus
 8001512:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001514:	2201      	movs	r2, #1
 8001516:	4619      	mov	r1, r3
 8001518:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800151a:	f001 f80f 	bl	800253c <HAL_GPIO_WritePin>
}
 800151e:	bf00      	nop
 8001520:	3718      	adds	r7, #24
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	607b      	str	r3, [r7, #4]
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <HAL_MspInit+0x4c>)
 8001534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001536:	4a0f      	ldr	r2, [pc, #60]	; (8001574 <HAL_MspInit+0x4c>)
 8001538:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800153c:	6453      	str	r3, [r2, #68]	; 0x44
 800153e:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <HAL_MspInit+0x4c>)
 8001540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	603b      	str	r3, [r7, #0]
 800154e:	4b09      	ldr	r3, [pc, #36]	; (8001574 <HAL_MspInit+0x4c>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	4a08      	ldr	r2, [pc, #32]	; (8001574 <HAL_MspInit+0x4c>)
 8001554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001558:	6413      	str	r3, [r2, #64]	; 0x40
 800155a:	4b06      	ldr	r3, [pc, #24]	; (8001574 <HAL_MspInit+0x4c>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001562:	603b      	str	r3, [r7, #0]
 8001564:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	40023800 	.word	0x40023800

08001578 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08c      	sub	sp, #48	; 0x30
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	f107 031c 	add.w	r3, r7, #28
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a33      	ldr	r2, [pc, #204]	; (8001664 <HAL_I2C_MspInit+0xec>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d12d      	bne.n	80015f6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	61bb      	str	r3, [r7, #24]
 800159e:	4b32      	ldr	r3, [pc, #200]	; (8001668 <HAL_I2C_MspInit+0xf0>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a31      	ldr	r2, [pc, #196]	; (8001668 <HAL_I2C_MspInit+0xf0>)
 80015a4:	f043 0302 	orr.w	r3, r3, #2
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b2f      	ldr	r3, [pc, #188]	; (8001668 <HAL_I2C_MspInit+0xf0>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	61bb      	str	r3, [r7, #24]
 80015b4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015bc:	2312      	movs	r3, #18
 80015be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c4:	2303      	movs	r3, #3
 80015c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015c8:	2304      	movs	r3, #4
 80015ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015cc:	f107 031c 	add.w	r3, r7, #28
 80015d0:	4619      	mov	r1, r3
 80015d2:	4826      	ldr	r0, [pc, #152]	; (800166c <HAL_I2C_MspInit+0xf4>)
 80015d4:	f000 fdee 	bl	80021b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	4b22      	ldr	r3, [pc, #136]	; (8001668 <HAL_I2C_MspInit+0xf0>)
 80015de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e0:	4a21      	ldr	r2, [pc, #132]	; (8001668 <HAL_I2C_MspInit+0xf0>)
 80015e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015e6:	6413      	str	r3, [r2, #64]	; 0x40
 80015e8:	4b1f      	ldr	r3, [pc, #124]	; (8001668 <HAL_I2C_MspInit+0xf0>)
 80015ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f0:	617b      	str	r3, [r7, #20]
 80015f2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80015f4:	e031      	b.n	800165a <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a1d      	ldr	r2, [pc, #116]	; (8001670 <HAL_I2C_MspInit+0xf8>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d12c      	bne.n	800165a <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001600:	2300      	movs	r3, #0
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	4b18      	ldr	r3, [pc, #96]	; (8001668 <HAL_I2C_MspInit+0xf0>)
 8001606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001608:	4a17      	ldr	r2, [pc, #92]	; (8001668 <HAL_I2C_MspInit+0xf0>)
 800160a:	f043 0302 	orr.w	r3, r3, #2
 800160e:	6313      	str	r3, [r2, #48]	; 0x30
 8001610:	4b15      	ldr	r3, [pc, #84]	; (8001668 <HAL_I2C_MspInit+0xf0>)
 8001612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	613b      	str	r3, [r7, #16]
 800161a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800161c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001620:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001622:	2312      	movs	r3, #18
 8001624:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162a:	2303      	movs	r3, #3
 800162c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800162e:	2304      	movs	r3, #4
 8001630:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001632:	f107 031c 	add.w	r3, r7, #28
 8001636:	4619      	mov	r1, r3
 8001638:	480c      	ldr	r0, [pc, #48]	; (800166c <HAL_I2C_MspInit+0xf4>)
 800163a:	f000 fdbb 	bl	80021b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	4b09      	ldr	r3, [pc, #36]	; (8001668 <HAL_I2C_MspInit+0xf0>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	4a08      	ldr	r2, [pc, #32]	; (8001668 <HAL_I2C_MspInit+0xf0>)
 8001648:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800164c:	6413      	str	r3, [r2, #64]	; 0x40
 800164e:	4b06      	ldr	r3, [pc, #24]	; (8001668 <HAL_I2C_MspInit+0xf0>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
}
 800165a:	bf00      	nop
 800165c:	3730      	adds	r7, #48	; 0x30
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40005400 	.word	0x40005400
 8001668:	40023800 	.word	0x40023800
 800166c:	40020400 	.word	0x40020400
 8001670:	40005800 	.word	0x40005800

08001674 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08e      	sub	sp, #56	; 0x38
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800167c:	f107 0308 	add.w	r3, r7, #8
 8001680:	2230      	movs	r2, #48	; 0x30
 8001682:	2100      	movs	r1, #0
 8001684:	4618      	mov	r0, r3
 8001686:	f005 fb75 	bl	8006d74 <memset>
  if(hrtc->Instance==RTC)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a0c      	ldr	r2, [pc, #48]	; (80016c0 <HAL_RTC_MspInit+0x4c>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d111      	bne.n	80016b8 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001694:	2320      	movs	r3, #32
 8001696:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001698:	f44f 7300 	mov.w	r3, #512	; 0x200
 800169c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800169e:	f107 0308 	add.w	r3, r7, #8
 80016a2:	4618      	mov	r0, r3
 80016a4:	f002 fc4c 	bl	8003f40 <HAL_RCCEx_PeriphCLKConfig>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80016ae:	f7ff fdf9 	bl	80012a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80016b2:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <HAL_RTC_MspInit+0x50>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80016b8:	bf00      	nop
 80016ba:	3738      	adds	r7, #56	; 0x38
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40002800 	.word	0x40002800
 80016c4:	42470e3c 	.word	0x42470e3c

080016c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08a      	sub	sp, #40	; 0x28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a19      	ldr	r2, [pc, #100]	; (800174c <HAL_SPI_MspInit+0x84>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d12b      	bne.n	8001742 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	4b18      	ldr	r3, [pc, #96]	; (8001750 <HAL_SPI_MspInit+0x88>)
 80016f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f2:	4a17      	ldr	r2, [pc, #92]	; (8001750 <HAL_SPI_MspInit+0x88>)
 80016f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016f8:	6453      	str	r3, [r2, #68]	; 0x44
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <HAL_SPI_MspInit+0x88>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <HAL_SPI_MspInit+0x88>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a10      	ldr	r2, [pc, #64]	; (8001750 <HAL_SPI_MspInit+0x88>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <HAL_SPI_MspInit+0x88>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001722:	23e0      	movs	r3, #224	; 0xe0
 8001724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001726:	2302      	movs	r3, #2
 8001728:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172e:	2303      	movs	r3, #3
 8001730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001732:	2305      	movs	r3, #5
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001736:	f107 0314 	add.w	r3, r7, #20
 800173a:	4619      	mov	r1, r3
 800173c:	4805      	ldr	r0, [pc, #20]	; (8001754 <HAL_SPI_MspInit+0x8c>)
 800173e:	f000 fd39 	bl	80021b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001742:	bf00      	nop
 8001744:	3728      	adds	r7, #40	; 0x28
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40013000 	.word	0x40013000
 8001750:	40023800 	.word	0x40023800
 8001754:	40020000 	.word	0x40020000

08001758 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a0e      	ldr	r2, [pc, #56]	; (80017a0 <HAL_TIM_Base_MspInit+0x48>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d115      	bne.n	8001796 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <HAL_TIM_Base_MspInit+0x4c>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	4a0c      	ldr	r2, [pc, #48]	; (80017a4 <HAL_TIM_Base_MspInit+0x4c>)
 8001774:	f043 0310 	orr.w	r3, r3, #16
 8001778:	6413      	str	r3, [r2, #64]	; 0x40
 800177a:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <HAL_TIM_Base_MspInit+0x4c>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	f003 0310 	and.w	r3, r3, #16
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001786:	2200      	movs	r2, #0
 8001788:	2100      	movs	r1, #0
 800178a:	2036      	movs	r0, #54	; 0x36
 800178c:	f000 fc49 	bl	8002022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001790:	2036      	movs	r0, #54	; 0x36
 8001792:	f000 fc62 	bl	800205a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001796:	bf00      	nop
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40001000 	.word	0x40001000
 80017a4:	40023800 	.word	0x40023800

080017a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	; 0x28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b0:	f107 0314 	add.w	r3, r7, #20
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a1d      	ldr	r2, [pc, #116]	; (800183c <HAL_UART_MspInit+0x94>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d133      	bne.n	8001832 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	4b1c      	ldr	r3, [pc, #112]	; (8001840 <HAL_UART_MspInit+0x98>)
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	4a1b      	ldr	r2, [pc, #108]	; (8001840 <HAL_UART_MspInit+0x98>)
 80017d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d8:	6413      	str	r3, [r2, #64]	; 0x40
 80017da:	4b19      	ldr	r3, [pc, #100]	; (8001840 <HAL_UART_MspInit+0x98>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	4b15      	ldr	r3, [pc, #84]	; (8001840 <HAL_UART_MspInit+0x98>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a14      	ldr	r2, [pc, #80]	; (8001840 <HAL_UART_MspInit+0x98>)
 80017f0:	f043 0308 	orr.w	r3, r3, #8
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b12      	ldr	r3, [pc, #72]	; (8001840 <HAL_UART_MspInit+0x98>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0308 	and.w	r3, r3, #8
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001802:	2360      	movs	r3, #96	; 0x60
 8001804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180e:	2303      	movs	r3, #3
 8001810:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001812:	2307      	movs	r3, #7
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001816:	f107 0314 	add.w	r3, r7, #20
 800181a:	4619      	mov	r1, r3
 800181c:	4809      	ldr	r0, [pc, #36]	; (8001844 <HAL_UART_MspInit+0x9c>)
 800181e:	f000 fcc9 	bl	80021b4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	2100      	movs	r1, #0
 8001826:	2026      	movs	r0, #38	; 0x26
 8001828:	f000 fbfb 	bl	8002022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800182c:	2026      	movs	r0, #38	; 0x26
 800182e:	f000 fc14 	bl	800205a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001832:	bf00      	nop
 8001834:	3728      	adds	r7, #40	; 0x28
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40004400 	.word	0x40004400
 8001840:	40023800 	.word	0x40023800
 8001844:	40020c00 	.word	0x40020c00

08001848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800184c:	e7fe      	b.n	800184c <NMI_Handler+0x4>

0800184e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001852:	e7fe      	b.n	8001852 <HardFault_Handler+0x4>

08001854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001858:	e7fe      	b.n	8001858 <MemManage_Handler+0x4>

0800185a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800185e:	e7fe      	b.n	800185e <BusFault_Handler+0x4>

08001860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001864:	e7fe      	b.n	8001864 <UsageFault_Handler+0x4>

08001866 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001894:	f000 faca 	bl	8001e2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001898:	bf00      	nop
 800189a:	bd80      	pop	{r7, pc}

0800189c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018a0:	4802      	ldr	r0, [pc, #8]	; (80018ac <USART2_IRQHandler+0x10>)
 80018a2:	f004 faef 	bl	8005e84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	200001a8 	.word	0x200001a8

080018b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80018b4:	b08b      	sub	sp, #44	; 0x2c
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	466b      	mov	r3, sp
 80018ba:	461e      	mov	r6, r3
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018bc:	484d      	ldr	r0, [pc, #308]	; (80019f4 <TIM6_DAC_IRQHandler+0x144>)
 80018be:	f003 fed0 	bl	8005662 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /*******************************
	*
	*/
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80018c2:	2180      	movs	r1, #128	; 0x80
 80018c4:	484c      	ldr	r0, [pc, #304]	; (80019f8 <TIM6_DAC_IRQHandler+0x148>)
 80018c6:	f000 fe52 	bl	800256e <HAL_GPIO_TogglePin>
  uint8_t cnt = 6;
 80018ca:	2306      	movs	r3, #6
 80018cc:	76fb      	strb	r3, [r7, #27]
  uint8_t readings[cnt];
 80018ce:	7ef9      	ldrb	r1, [r7, #27]
 80018d0:	460b      	mov	r3, r1
 80018d2:	3b01      	subs	r3, #1
 80018d4:	617b      	str	r3, [r7, #20]
 80018d6:	b2cb      	uxtb	r3, r1
 80018d8:	2200      	movs	r2, #0
 80018da:	4698      	mov	r8, r3
 80018dc:	4691      	mov	r9, r2
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	f04f 0300 	mov.w	r3, #0
 80018e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018f2:	b2cb      	uxtb	r3, r1
 80018f4:	2200      	movs	r2, #0
 80018f6:	461c      	mov	r4, r3
 80018f8:	4615      	mov	r5, r2
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	f04f 0300 	mov.w	r3, #0
 8001902:	00eb      	lsls	r3, r5, #3
 8001904:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001908:	00e2      	lsls	r2, r4, #3
 800190a:	460b      	mov	r3, r1
 800190c:	3307      	adds	r3, #7
 800190e:	08db      	lsrs	r3, r3, #3
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	ebad 0d03 	sub.w	sp, sp, r3
 8001916:	466b      	mov	r3, sp
 8001918:	3300      	adds	r3, #0
 800191a:	613b      	str	r3, [r7, #16]
//  readAccelerometer(readings, &hi2c1);
  readTempHumPres(readings, &hi2c2, 0);
 800191c:	2200      	movs	r2, #0
 800191e:	4937      	ldr	r1, [pc, #220]	; (80019fc <TIM6_DAC_IRQHandler+0x14c>)
 8001920:	6938      	ldr	r0, [r7, #16]
 8001922:	f7fe fe79 	bl	8000618 <readTempHumPres>
  for (int i = 0; i < cnt; i++) {
 8001926:	2300      	movs	r3, #0
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
 800192a:	e00a      	b.n	8001942 <TIM6_DAC_IRQHandler+0x92>
	  send_uart_hex(&huart2, readings[i]);
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001930:	4413      	add	r3, r2
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	4619      	mov	r1, r3
 8001936:	4832      	ldr	r0, [pc, #200]	; (8001a00 <TIM6_DAC_IRQHandler+0x150>)
 8001938:	f000 f9e7 	bl	8001d0a <send_uart_hex>
  for (int i = 0; i < cnt; i++) {
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	3301      	adds	r3, #1
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
 8001942:	7efb      	ldrb	r3, [r7, #27]
 8001944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001946:	429a      	cmp	r2, r3
 8001948:	dbf0      	blt.n	800192c <TIM6_DAC_IRQHandler+0x7c>
  /***************************
   *
   */

  uint8_t accel_data[6];
  readAccelerometer(accel_data, &hi2c1);
 800194a:	1d3b      	adds	r3, r7, #4
 800194c:	492d      	ldr	r1, [pc, #180]	; (8001a04 <TIM6_DAC_IRQHandler+0x154>)
 800194e:	4618      	mov	r0, r3
 8001950:	f7fe fdf0 	bl	8000534 <readAccelerometer>

  uint32_t time = getTimestampMilliseconds(&hrtc);
 8001954:	482c      	ldr	r0, [pc, #176]	; (8001a08 <TIM6_DAC_IRQHandler+0x158>)
 8001956:	f7ff fcc5 	bl	80012e4 <getTimestampMilliseconds>
 800195a:	60f8      	str	r0, [r7, #12]

  // Store the time in the buffer
  if (byte_tracker < (PAGE_SIZE - READ_SIZE)) {
 800195c:	4b2b      	ldr	r3, [pc, #172]	; (8001a0c <TIM6_DAC_IRQHandler+0x15c>)
 800195e:	881b      	ldrh	r3, [r3, #0]
 8001960:	2beb      	cmp	r3, #235	; 0xeb
 8001962:	d841      	bhi.n	80019e8 <TIM6_DAC_IRQHandler+0x138>
    data_buffer[byte_tracker + 0] = (uint8_t) ((time >> 24) & 0xFF); // Most significant byte (MSB)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	0e19      	lsrs	r1, r3, #24
 8001968:	4b28      	ldr	r3, [pc, #160]	; (8001a0c <TIM6_DAC_IRQHandler+0x15c>)
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	461a      	mov	r2, r3
 800196e:	b2c9      	uxtb	r1, r1
 8001970:	4b27      	ldr	r3, [pc, #156]	; (8001a10 <TIM6_DAC_IRQHandler+0x160>)
 8001972:	5499      	strb	r1, [r3, r2]
    data_buffer[byte_tracker + 1] = (uint8_t) ((time >> 16) & 0xFF);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	0c1a      	lsrs	r2, r3, #16
 8001978:	4b24      	ldr	r3, [pc, #144]	; (8001a0c <TIM6_DAC_IRQHandler+0x15c>)
 800197a:	881b      	ldrh	r3, [r3, #0]
 800197c:	3301      	adds	r3, #1
 800197e:	b2d1      	uxtb	r1, r2
 8001980:	4a23      	ldr	r2, [pc, #140]	; (8001a10 <TIM6_DAC_IRQHandler+0x160>)
 8001982:	54d1      	strb	r1, [r2, r3]
    data_buffer[byte_tracker + 2] = (uint8_t) ((time >> 8) & 0xFF);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	0a1a      	lsrs	r2, r3, #8
 8001988:	4b20      	ldr	r3, [pc, #128]	; (8001a0c <TIM6_DAC_IRQHandler+0x15c>)
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	3302      	adds	r3, #2
 800198e:	b2d1      	uxtb	r1, r2
 8001990:	4a1f      	ldr	r2, [pc, #124]	; (8001a10 <TIM6_DAC_IRQHandler+0x160>)
 8001992:	54d1      	strb	r1, [r2, r3]
    data_buffer[byte_tracker + 3] = (uint8_t) (time & 0xFF); // Least significant byte (LSB)
 8001994:	4b1d      	ldr	r3, [pc, #116]	; (8001a0c <TIM6_DAC_IRQHandler+0x15c>)
 8001996:	881b      	ldrh	r3, [r3, #0]
 8001998:	3303      	adds	r3, #3
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	b2d1      	uxtb	r1, r2
 800199e:	4a1c      	ldr	r2, [pc, #112]	; (8001a10 <TIM6_DAC_IRQHandler+0x160>)
 80019a0:	54d1      	strb	r1, [r2, r3]

    uint8_t array_ptr = 4;
 80019a2:	2304      	movs	r3, #4
 80019a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    for (int i = 0; i < 6; i++) {
 80019a8:	2300      	movs	r3, #0
 80019aa:	61fb      	str	r3, [r7, #28]
 80019ac:	e013      	b.n	80019d6 <TIM6_DAC_IRQHandler+0x126>
      data_buffer[byte_tracker + array_ptr] = accel_data[i];
 80019ae:	4b17      	ldr	r3, [pc, #92]	; (8001a0c <TIM6_DAC_IRQHandler+0x15c>)
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	461a      	mov	r2, r3
 80019b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019b8:	4413      	add	r3, r2
 80019ba:	1d39      	adds	r1, r7, #4
 80019bc:	69fa      	ldr	r2, [r7, #28]
 80019be:	440a      	add	r2, r1
 80019c0:	7811      	ldrb	r1, [r2, #0]
 80019c2:	4a13      	ldr	r2, [pc, #76]	; (8001a10 <TIM6_DAC_IRQHandler+0x160>)
 80019c4:	54d1      	strb	r1, [r2, r3]
      array_ptr += 1;
 80019c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019ca:	3301      	adds	r3, #1
 80019cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    for (int i = 0; i < 6; i++) {
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	3301      	adds	r3, #1
 80019d4:	61fb      	str	r3, [r7, #28]
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	2b05      	cmp	r3, #5
 80019da:	dde8      	ble.n	80019ae <TIM6_DAC_IRQHandler+0xfe>
    }
    byte_tracker = byte_tracker + 10;
 80019dc:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <TIM6_DAC_IRQHandler+0x15c>)
 80019de:	881b      	ldrh	r3, [r3, #0]
 80019e0:	330a      	adds	r3, #10
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <TIM6_DAC_IRQHandler+0x15c>)
 80019e6:	801a      	strh	r2, [r3, #0]
 80019e8:	46b5      	mov	sp, r6
  }
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	372c      	adds	r7, #44	; 0x2c
 80019ee:	46bd      	mov	sp, r7
 80019f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80019f4:	20000160 	.word	0x20000160
 80019f8:	40020400 	.word	0x40020400
 80019fc:	20000094 	.word	0x20000094
 8001a00:	200001a8 	.word	0x200001a8
 8001a04:	20000040 	.word	0x20000040
 8001a08:	200000e8 	.word	0x200000e8
 8001a0c:	200002f8 	.word	0x200002f8
 8001a10:	200001f4 	.word	0x200001f4

08001a14 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b0d4      	sub	sp, #336	; 0x150
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001a1e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001a22:	6018      	str	r0, [r3, #0]
	// Read the received data
	uint8_t received_data = huart2.Instance->DR;
 8001a24:	4b92      	ldr	r3, [pc, #584]	; (8001c70 <HAL_UART_RxCpltCallback+0x25c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137

	// Check if the received data matches the expected value (0x68 = 'h')
	if (received_data == 0x68) {
 8001a2e:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8001a32:	2b68      	cmp	r3, #104	; 0x68
 8001a34:	d112      	bne.n	8001a5c <HAL_UART_RxCpltCallback+0x48>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET);		// Activate the "write out" LED
 8001a36:	2201      	movs	r2, #1
 8001a38:	2180      	movs	r1, #128	; 0x80
 8001a3a:	488e      	ldr	r0, [pc, #568]	; (8001c74 <HAL_UART_RxCpltCallback+0x260>)
 8001a3c:	f000 fd7e 	bl	800253c <HAL_GPIO_WritePin>
		send_uart_string(huart, "**Heartbeat**\r\n");			// Transmit the data
 8001a40:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001a44:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001a48:	498b      	ldr	r1, [pc, #556]	; (8001c78 <HAL_UART_RxCpltCallback+0x264>)
 8001a4a:	6818      	ldr	r0, [r3, #0]
 8001a4c:	f000 f949 	bl	8001ce2 <send_uart_string>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);	// Deactivate the "write out" LED
 8001a50:	2200      	movs	r2, #0
 8001a52:	2180      	movs	r1, #128	; 0x80
 8001a54:	4887      	ldr	r0, [pc, #540]	; (8001c74 <HAL_UART_RxCpltCallback+0x260>)
 8001a56:	f000 fd71 	bl	800253c <HAL_GPIO_WritePin>
 8001a5a:	e0fe      	b.n	8001c5a <HAL_UART_RxCpltCallback+0x246>
	}

	// Check if the received data matches the expected value (0x65 = 'e')
	else if (received_data == 0x65) {
 8001a5c:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8001a60:	2b65      	cmp	r3, #101	; 0x65
 8001a62:	d12f      	bne.n	8001ac4 <HAL_UART_RxCpltCallback+0xb0>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET);		// Activate the "write out" LED
 8001a64:	2201      	movs	r2, #1
 8001a66:	2180      	movs	r1, #128	; 0x80
 8001a68:	4882      	ldr	r0, [pc, #520]	; (8001c74 <HAL_UART_RxCpltCallback+0x260>)
 8001a6a:	f000 fd67 	bl	800253c <HAL_GPIO_WritePin>
		if (erase_chip_spi(&hspi1, 0) == HAL_OK) {
 8001a6e:	2100      	movs	r1, #0
 8001a70:	4882      	ldr	r0, [pc, #520]	; (8001c7c <HAL_UART_RxCpltCallback+0x268>)
 8001a72:	f7fe febb 	bl	80007ec <erase_chip_spi>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d115      	bne.n	8001aa8 <HAL_UART_RxCpltCallback+0x94>
			send_uart_string(huart, "Successful Chip Erase\r\n");
 8001a7c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001a80:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001a84:	497e      	ldr	r1, [pc, #504]	; (8001c80 <HAL_UART_RxCpltCallback+0x26c>)
 8001a86:	6818      	ldr	r0, [r3, #0]
 8001a88:	f000 f92b 	bl	8001ce2 <send_uart_string>
			next_blank_page = find_next_blank_page(&hspi1, huart, &end_of_flash, 0);
 8001a8c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001a90:	f5a3 71a6 	sub.w	r1, r3, #332	; 0x14c
 8001a94:	2300      	movs	r3, #0
 8001a96:	4a7b      	ldr	r2, [pc, #492]	; (8001c84 <HAL_UART_RxCpltCallback+0x270>)
 8001a98:	6809      	ldr	r1, [r1, #0]
 8001a9a:	4878      	ldr	r0, [pc, #480]	; (8001c7c <HAL_UART_RxCpltCallback+0x268>)
 8001a9c:	f7fe ff5c 	bl	8000958 <find_next_blank_page>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	4a79      	ldr	r2, [pc, #484]	; (8001c88 <HAL_UART_RxCpltCallback+0x274>)
 8001aa4:	6013      	str	r3, [r2, #0]
 8001aa6:	e007      	b.n	8001ab8 <HAL_UART_RxCpltCallback+0xa4>
		} else {
			send_uart_string(huart, "Error during chip erase. Please check the connection and try again.\r\n");
 8001aa8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001aac:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001ab0:	4976      	ldr	r1, [pc, #472]	; (8001c8c <HAL_UART_RxCpltCallback+0x278>)
 8001ab2:	6818      	ldr	r0, [r3, #0]
 8001ab4:	f000 f915 	bl	8001ce2 <send_uart_string>
		}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);	// Deactivate the "write out" LED
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2180      	movs	r1, #128	; 0x80
 8001abc:	486d      	ldr	r0, [pc, #436]	; (8001c74 <HAL_UART_RxCpltCallback+0x260>)
 8001abe:	f000 fd3d 	bl	800253c <HAL_GPIO_WritePin>
 8001ac2:	e0ca      	b.n	8001c5a <HAL_UART_RxCpltCallback+0x246>
	}

	// Check if the received data matches the expected value (0x72 = 'r')
	else if (received_data == 0x72) {
 8001ac4:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8001ac8:	2b72      	cmp	r3, #114	; 0x72
 8001aca:	d145      	bne.n	8001b58 <HAL_UART_RxCpltCallback+0x144>
		uint32_t num_of_pages = next_blank_page;
 8001acc:	4b6e      	ldr	r3, [pc, #440]	; (8001c88 <HAL_UART_RxCpltCallback+0x274>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
		if(num_of_pages == 0) {
 8001ad4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d103      	bne.n	8001ae4 <HAL_UART_RxCpltCallback+0xd0>
			num_of_pages = PAGE_SIZE;
 8001adc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ae0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
		}
		num_of_pages = num_of_pages/PAGE_SIZE;
 8001ae4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001ae8:	0a1b      	lsrs	r3, r3, #8
 8001aea:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
		uint32_t address = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET);		// Activate the "write out" LED
 8001af4:	2201      	movs	r2, #1
 8001af6:	2180      	movs	r1, #128	; 0x80
 8001af8:	485e      	ldr	r0, [pc, #376]	; (8001c74 <HAL_UART_RxCpltCallback+0x260>)
 8001afa:	f000 fd1f 	bl	800253c <HAL_GPIO_WritePin>

		for (int i = 0; i < (num_of_pages); i++) {
 8001afe:	2300      	movs	r3, #0
 8001b00:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8001b04:	e01c      	b.n	8001b40 <HAL_UART_RxCpltCallback+0x12c>
			uint8_t page[PAGE_SIZE];
			read_page_spi(page, &hspi1, address, 0);//
 8001b06:	f107 0008 	add.w	r0, r7, #8
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001b10:	495a      	ldr	r1, [pc, #360]	; (8001c7c <HAL_UART_RxCpltCallback+0x268>)
 8001b12:	f7fe ffcf 	bl	8000ab4 <read_page_spi>
			uart_transmit_page(huart, page);						// Transmit the data//
 8001b16:	f107 0208 	add.w	r2, r7, #8
 8001b1a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001b1e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001b22:	4611      	mov	r1, r2
 8001b24:	6818      	ldr	r0, [r3, #0]
 8001b26:	f000 f8cb 	bl	8001cc0 <uart_transmit_page>
			address += PAGE_SIZE;
 8001b2a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001b2e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001b32:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
		for (int i = 0; i < (num_of_pages); i++) {
 8001b36:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8001b40:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001b44:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d8dc      	bhi.n	8001b06 <HAL_UART_RxCpltCallback+0xf2>
		}

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);	// Deactivate the "write out" LED
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2180      	movs	r1, #128	; 0x80
 8001b50:	4848      	ldr	r0, [pc, #288]	; (8001c74 <HAL_UART_RxCpltCallback+0x260>)
 8001b52:	f000 fcf3 	bl	800253c <HAL_GPIO_WritePin>
 8001b56:	e080      	b.n	8001c5a <HAL_UART_RxCpltCallback+0x246>

		next_blank_page += PAGE_SIZE;
	}
************************************************************************************/
	// Read Accelerometer CTRL1 (data_rx = "c")
	else if (received_data == 0x63) {
 8001b58:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8001b5c:	2b63      	cmp	r3, #99	; 0x63
 8001b5e:	d10e      	bne.n	8001b7e <HAL_UART_RxCpltCallback+0x16a>
		uint8_t ctrl = readAccel_whoami(&hi2c1);
 8001b60:	484b      	ldr	r0, [pc, #300]	; (8001c90 <HAL_UART_RxCpltCallback+0x27c>)
 8001b62:	f7fe fcfb 	bl	800055c <readAccel_whoami>
 8001b66:	4603      	mov	r3, r0
 8001b68:	f887 3135 	strb.w	r3, [r7, #309]	; 0x135
		HAL_UART_Transmit(&huart2, &ctrl, 1, HAL_MAX_DELAY);
 8001b6c:	f207 1135 	addw	r1, r7, #309	; 0x135
 8001b70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b74:	2201      	movs	r2, #1
 8001b76:	483e      	ldr	r0, [pc, #248]	; (8001c70 <HAL_UART_RxCpltCallback+0x25c>)
 8001b78:	f004 f822 	bl	8005bc0 <HAL_UART_Transmit>
 8001b7c:	e06d      	b.n	8001c5a <HAL_UART_RxCpltCallback+0x246>
	}

	// Read the accelerometer and print to the UART (data_rx = "a")
	else if (received_data == 0x61) {
 8001b7e:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8001b82:	2b61      	cmp	r3, #97	; 0x61
 8001b84:	d11d      	bne.n	8001bc2 <HAL_UART_RxCpltCallback+0x1ae>
		uint8_t readings[6];
		readAccelerometer(readings, &hi2c1);
 8001b86:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001b8a:	4941      	ldr	r1, [pc, #260]	; (8001c90 <HAL_UART_RxCpltCallback+0x27c>)
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7fe fcd1 	bl	8000534 <readAccelerometer>
		for (int i = 0; i < 6; i++) {
 8001b92:	2300      	movs	r3, #0
 8001b94:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8001b98:	e00e      	b.n	8001bb8 <HAL_UART_RxCpltCallback+0x1a4>
			send_uart_hex(&huart2, readings[i]);
 8001b9a:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 8001b9e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001ba2:	4413      	add	r3, r2
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4831      	ldr	r0, [pc, #196]	; (8001c70 <HAL_UART_RxCpltCallback+0x25c>)
 8001baa:	f000 f8ae 	bl	8001d0a <send_uart_hex>
		for (int i = 0; i < 6; i++) {
 8001bae:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8001bb8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001bbc:	2b05      	cmp	r3, #5
 8001bbe:	ddec      	ble.n	8001b9a <HAL_UART_RxCpltCallback+0x186>
 8001bc0:	e04b      	b.n	8001c5a <HAL_UART_RxCpltCallback+0x246>
		}
	}

	// Read the temp sensor and print to the UART (data_rx = "t")
	else if (received_data == 0x74) {
 8001bc2:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8001bc6:	2b74      	cmp	r3, #116	; 0x74
 8001bc8:	d10d      	bne.n	8001be6 <HAL_UART_RxCpltCallback+0x1d2>
		uint8_t reading = readBME280_id_reg(&hi2c2, 0);
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4831      	ldr	r0, [pc, #196]	; (8001c94 <HAL_UART_RxCpltCallback+0x280>)
 8001bce:	f7fe fd73 	bl	80006b8 <readBME280_id_reg>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
		send_uart_hex(&huart2, reading);
 8001bd8:	f897 3136 	ldrb.w	r3, [r7, #310]	; 0x136
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4824      	ldr	r0, [pc, #144]	; (8001c70 <HAL_UART_RxCpltCallback+0x25c>)
 8001be0:	f000 f893 	bl	8001d0a <send_uart_hex>
 8001be4:	e039      	b.n	8001c5a <HAL_UART_RxCpltCallback+0x246>
	}

	// Read the temp sensor calibration registers and print to the UART (data_rx = "p")
	else if (received_data == 0x70) {
 8001be6:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8001bea:	2b70      	cmp	r3, #112	; 0x70
 8001bec:	d135      	bne.n	8001c5a <HAL_UART_RxCpltCallback+0x246>
		uint8_t calibration1[25];
		uint8_t calibration2[7];
		readBME280_calib(&hi2c2, 0, calibration1, calibration2);
 8001bee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001bf2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	4826      	ldr	r0, [pc, #152]	; (8001c94 <HAL_UART_RxCpltCallback+0x280>)
 8001bfa:	f7fe fd77 	bl	80006ec <readBME280_calib>
		for (int i = 0; i < 25; i++) {
 8001bfe:	2300      	movs	r3, #0
 8001c00:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001c04:	e00e      	b.n	8001c24 <HAL_UART_RxCpltCallback+0x210>
		  send_uart_hex(&huart2, calibration1[i]);
 8001c06:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001c0a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001c0e:	4413      	add	r3, r2
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	4619      	mov	r1, r3
 8001c14:	4816      	ldr	r0, [pc, #88]	; (8001c70 <HAL_UART_RxCpltCallback+0x25c>)
 8001c16:	f000 f878 	bl	8001d0a <send_uart_hex>
		for (int i = 0; i < 25; i++) {
 8001c1a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001c1e:	3301      	adds	r3, #1
 8001c20:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001c24:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001c28:	2b18      	cmp	r3, #24
 8001c2a:	ddec      	ble.n	8001c06 <HAL_UART_RxCpltCallback+0x1f2>
		}

		for (int i = 0; i < 7; i++) {
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001c32:	e00e      	b.n	8001c52 <HAL_UART_RxCpltCallback+0x23e>
		  send_uart_hex(&huart2, calibration2[i]);
 8001c34:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001c38:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001c3c:	4413      	add	r3, r2
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	4619      	mov	r1, r3
 8001c42:	480b      	ldr	r0, [pc, #44]	; (8001c70 <HAL_UART_RxCpltCallback+0x25c>)
 8001c44:	f000 f861 	bl	8001d0a <send_uart_hex>
		for (int i = 0; i < 7; i++) {
 8001c48:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001c52:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001c56:	2b06      	cmp	r3, #6
 8001c58:	ddec      	ble.n	8001c34 <HAL_UART_RxCpltCallback+0x220>
		}
	}


	HAL_UART_Receive_IT(&huart2, UARTRxData, 1);
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	490e      	ldr	r1, [pc, #56]	; (8001c98 <HAL_UART_RxCpltCallback+0x284>)
 8001c5e:	4804      	ldr	r0, [pc, #16]	; (8001c70 <HAL_UART_RxCpltCallback+0x25c>)
 8001c60:	f004 f839 	bl	8005cd6 <HAL_UART_Receive_IT>
}
 8001c64:	bf00      	nop
 8001c66:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	200001a8 	.word	0x200001a8
 8001c74:	40020400 	.word	0x40020400
 8001c78:	08006de4 	.word	0x08006de4
 8001c7c:	20000108 	.word	0x20000108
 8001c80:	08006df4 	.word	0x08006df4
 8001c84:	200002fa 	.word	0x200002fa
 8001c88:	200002f4 	.word	0x200002f4
 8001c8c:	08006e0c 	.word	0x08006e0c
 8001c90:	20000040 	.word	0x20000040
 8001c94:	20000094 	.word	0x20000094
 8001c98:	200001f0 	.word	0x200001f0

08001c9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <SystemInit+0x20>)
 8001ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ca6:	4a05      	ldr	r2, [pc, #20]	; (8001cbc <SystemInit+0x20>)
 8001ca8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <uart_transmit_page>:

#include "uart_transmit.h"
/**
 * Transmit one single page over the UART interface
 */
void uart_transmit_page(UART_HandleTypeDef *huart, uint8_t page[PAGE_SIZE]) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huart, page, PAGE_SIZE, HAL_MAX_DELAY);
 8001cca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cd2:	6839      	ldr	r1, [r7, #0]
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f003 ff73 	bl	8005bc0 <HAL_UART_Transmit>
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <send_uart_string>:

void send_uart_string(UART_HandleTypeDef *huart, const char *str) {
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
 8001cea:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8001cec:	6838      	ldr	r0, [r7, #0]
 8001cee:	f7fe fa7d 	bl	80001ec <strlen>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cfa:	6839      	ldr	r1, [r7, #0]
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f003 ff5f 	bl	8005bc0 <HAL_UART_Transmit>
}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <send_uart_hex>:
	// Call the send_uart_string function to send the value to UART
	send_uart_string(huart, value_str);
	send_uart_string(huart, "\r\n");
}

void send_uart_hex(UART_HandleTypeDef *huart, uint8_t value) {
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b084      	sub	sp, #16
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
 8001d12:	460b      	mov	r3, r1
 8001d14:	70fb      	strb	r3, [r7, #3]
	uint8_t buffer[1];
	buffer[0] = value;
 8001d16:	78fb      	ldrb	r3, [r7, #3]
 8001d18:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(huart, buffer, 1, HAL_MAX_DELAY);
 8001d1a:	f107 010c 	add.w	r1, r7, #12
 8001d1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d22:	2201      	movs	r2, #1
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f003 ff4b 	bl	8005bc0 <HAL_UART_Transmit>
}
 8001d2a:	bf00      	nop
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
	...

08001d34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d6c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d38:	f7ff ffb0 	bl	8001c9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d3c:	480c      	ldr	r0, [pc, #48]	; (8001d70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d3e:	490d      	ldr	r1, [pc, #52]	; (8001d74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d40:	4a0d      	ldr	r2, [pc, #52]	; (8001d78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d44:	e002      	b.n	8001d4c <LoopCopyDataInit>

08001d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d4a:	3304      	adds	r3, #4

08001d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d50:	d3f9      	bcc.n	8001d46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d52:	4a0a      	ldr	r2, [pc, #40]	; (8001d7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d54:	4c0a      	ldr	r4, [pc, #40]	; (8001d80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d58:	e001      	b.n	8001d5e <LoopFillZerobss>

08001d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d5c:	3204      	adds	r2, #4

08001d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d60:	d3fb      	bcc.n	8001d5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d62:	f005 f80f 	bl	8006d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d66:	f7fe ff4f 	bl	8000c08 <main>
  bx  lr    
 8001d6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d6c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001d70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d74:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001d78:	08006e7c 	.word	0x08006e7c
  ldr r2, =_sbss
 8001d7c:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001d80:	20000314 	.word	0x20000314

08001d84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d84:	e7fe      	b.n	8001d84 <ADC_IRQHandler>
	...

08001d88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d8c:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <HAL_Init+0x40>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a0d      	ldr	r2, [pc, #52]	; (8001dc8 <HAL_Init+0x40>)
 8001d92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d98:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <HAL_Init+0x40>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a0a      	ldr	r2, [pc, #40]	; (8001dc8 <HAL_Init+0x40>)
 8001d9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001da2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001da4:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <HAL_Init+0x40>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a07      	ldr	r2, [pc, #28]	; (8001dc8 <HAL_Init+0x40>)
 8001daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001db0:	2003      	movs	r0, #3
 8001db2:	f000 f92b 	bl	800200c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001db6:	200f      	movs	r0, #15
 8001db8:	f000 f808 	bl	8001dcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dbc:	f7ff fbb4 	bl	8001528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40023c00 	.word	0x40023c00

08001dcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dd4:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <HAL_InitTick+0x54>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <HAL_InitTick+0x58>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001de2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dea:	4618      	mov	r0, r3
 8001dec:	f000 f943 	bl	8002076 <HAL_SYSTICK_Config>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e00e      	b.n	8001e18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b0f      	cmp	r3, #15
 8001dfe:	d80a      	bhi.n	8001e16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e00:	2200      	movs	r2, #0
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e08:	f000 f90b 	bl	8002022 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e0c:	4a06      	ldr	r2, [pc, #24]	; (8001e28 <HAL_InitTick+0x5c>)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	e000      	b.n	8001e18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	20000018 	.word	0x20000018
 8001e24:	20000020 	.word	0x20000020
 8001e28:	2000001c 	.word	0x2000001c

08001e2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e30:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <HAL_IncTick+0x20>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	461a      	mov	r2, r3
 8001e36:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <HAL_IncTick+0x24>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	4a04      	ldr	r2, [pc, #16]	; (8001e50 <HAL_IncTick+0x24>)
 8001e3e:	6013      	str	r3, [r2, #0]
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	20000020 	.word	0x20000020
 8001e50:	20000310 	.word	0x20000310

08001e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return uwTick;
 8001e58:	4b03      	ldr	r3, [pc, #12]	; (8001e68 <HAL_GetTick+0x14>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	20000310 	.word	0x20000310

08001e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e88:	4013      	ands	r3, r2
 8001e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e9e:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	60d3      	str	r3, [r2, #12]
}
 8001ea4:	bf00      	nop
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb8:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <__NVIC_GetPriorityGrouping+0x18>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	0a1b      	lsrs	r3, r3, #8
 8001ebe:	f003 0307 	and.w	r3, r3, #7
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	db0b      	blt.n	8001efa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	f003 021f 	and.w	r2, r3, #31
 8001ee8:	4907      	ldr	r1, [pc, #28]	; (8001f08 <__NVIC_EnableIRQ+0x38>)
 8001eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eee:	095b      	lsrs	r3, r3, #5
 8001ef0:	2001      	movs	r0, #1
 8001ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	e000e100 	.word	0xe000e100

08001f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	6039      	str	r1, [r7, #0]
 8001f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	db0a      	blt.n	8001f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	490c      	ldr	r1, [pc, #48]	; (8001f58 <__NVIC_SetPriority+0x4c>)
 8001f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2a:	0112      	lsls	r2, r2, #4
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	440b      	add	r3, r1
 8001f30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f34:	e00a      	b.n	8001f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	4908      	ldr	r1, [pc, #32]	; (8001f5c <__NVIC_SetPriority+0x50>)
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	3b04      	subs	r3, #4
 8001f44:	0112      	lsls	r2, r2, #4
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	440b      	add	r3, r1
 8001f4a:	761a      	strb	r2, [r3, #24]
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000e100 	.word	0xe000e100
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b089      	sub	sp, #36	; 0x24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f1c3 0307 	rsb	r3, r3, #7
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	bf28      	it	cs
 8001f7e:	2304      	movcs	r3, #4
 8001f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	3304      	adds	r3, #4
 8001f86:	2b06      	cmp	r3, #6
 8001f88:	d902      	bls.n	8001f90 <NVIC_EncodePriority+0x30>
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	3b03      	subs	r3, #3
 8001f8e:	e000      	b.n	8001f92 <NVIC_EncodePriority+0x32>
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43da      	mvns	r2, r3
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fa8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb2:	43d9      	mvns	r1, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb8:	4313      	orrs	r3, r2
         );
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3724      	adds	r7, #36	; 0x24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
	...

08001fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fd8:	d301      	bcc.n	8001fde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e00f      	b.n	8001ffe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fde:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <SysTick_Config+0x40>)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fe6:	210f      	movs	r1, #15
 8001fe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fec:	f7ff ff8e 	bl	8001f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ff0:	4b05      	ldr	r3, [pc, #20]	; (8002008 <SysTick_Config+0x40>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ff6:	4b04      	ldr	r3, [pc, #16]	; (8002008 <SysTick_Config+0x40>)
 8001ff8:	2207      	movs	r2, #7
 8001ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	e000e010 	.word	0xe000e010

0800200c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7ff ff29 	bl	8001e6c <__NVIC_SetPriorityGrouping>
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002022:	b580      	push	{r7, lr}
 8002024:	b086      	sub	sp, #24
 8002026:	af00      	add	r7, sp, #0
 8002028:	4603      	mov	r3, r0
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	607a      	str	r2, [r7, #4]
 800202e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002034:	f7ff ff3e 	bl	8001eb4 <__NVIC_GetPriorityGrouping>
 8002038:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	68b9      	ldr	r1, [r7, #8]
 800203e:	6978      	ldr	r0, [r7, #20]
 8002040:	f7ff ff8e 	bl	8001f60 <NVIC_EncodePriority>
 8002044:	4602      	mov	r2, r0
 8002046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800204a:	4611      	mov	r1, r2
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff ff5d 	bl	8001f0c <__NVIC_SetPriority>
}
 8002052:	bf00      	nop
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	4603      	mov	r3, r0
 8002062:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ff31 	bl	8001ed0 <__NVIC_EnableIRQ>
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff ffa2 	bl	8001fc8 <SysTick_Config>
 8002084:	4603      	mov	r3, r0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b084      	sub	sp, #16
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800209c:	f7ff feda 	bl	8001e54 <HAL_GetTick>
 80020a0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d008      	beq.n	80020c0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2280      	movs	r2, #128	; 0x80
 80020b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e052      	b.n	8002166 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 0216 	bic.w	r2, r2, #22
 80020ce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	695a      	ldr	r2, [r3, #20]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020de:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d103      	bne.n	80020f0 <HAL_DMA_Abort+0x62>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d007      	beq.n	8002100 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 0208 	bic.w	r2, r2, #8
 80020fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0201 	bic.w	r2, r2, #1
 800210e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002110:	e013      	b.n	800213a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002112:	f7ff fe9f 	bl	8001e54 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b05      	cmp	r3, #5
 800211e:	d90c      	bls.n	800213a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2220      	movs	r2, #32
 8002124:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2203      	movs	r2, #3
 800212a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e015      	b.n	8002166 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1e4      	bne.n	8002112 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800214c:	223f      	movs	r2, #63	; 0x3f
 800214e:	409a      	lsls	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d004      	beq.n	800218c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2280      	movs	r2, #128	; 0x80
 8002186:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e00c      	b.n	80021a6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2205      	movs	r2, #5
 8002190:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0201 	bic.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
	...

080021b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b089      	sub	sp, #36	; 0x24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ca:	2300      	movs	r3, #0
 80021cc:	61fb      	str	r3, [r7, #28]
 80021ce:	e177      	b.n	80024c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021d0:	2201      	movs	r2, #1
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	4013      	ands	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	f040 8166 	bne.w	80024ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d005      	beq.n	8002206 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002202:	2b02      	cmp	r3, #2
 8002204:	d130      	bne.n	8002268 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	2203      	movs	r2, #3
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43db      	mvns	r3, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4013      	ands	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	68da      	ldr	r2, [r3, #12]
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4313      	orrs	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800223c:	2201      	movs	r2, #1
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	091b      	lsrs	r3, r3, #4
 8002252:	f003 0201 	and.w	r2, r3, #1
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 0303 	and.w	r3, r3, #3
 8002270:	2b03      	cmp	r3, #3
 8002272:	d017      	beq.n	80022a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	2203      	movs	r2, #3
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 0303 	and.w	r3, r3, #3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d123      	bne.n	80022f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	08da      	lsrs	r2, r3, #3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3208      	adds	r2, #8
 80022b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	220f      	movs	r2, #15
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	691a      	ldr	r2, [r3, #16]
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	08da      	lsrs	r2, r3, #3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3208      	adds	r2, #8
 80022f2:	69b9      	ldr	r1, [r7, #24]
 80022f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	2203      	movs	r2, #3
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4013      	ands	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 0203 	and.w	r2, r3, #3
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4313      	orrs	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 80c0 	beq.w	80024ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	4b66      	ldr	r3, [pc, #408]	; (80024d8 <HAL_GPIO_Init+0x324>)
 8002340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002342:	4a65      	ldr	r2, [pc, #404]	; (80024d8 <HAL_GPIO_Init+0x324>)
 8002344:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002348:	6453      	str	r3, [r2, #68]	; 0x44
 800234a:	4b63      	ldr	r3, [pc, #396]	; (80024d8 <HAL_GPIO_Init+0x324>)
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002356:	4a61      	ldr	r2, [pc, #388]	; (80024dc <HAL_GPIO_Init+0x328>)
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	089b      	lsrs	r3, r3, #2
 800235c:	3302      	adds	r3, #2
 800235e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002362:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	220f      	movs	r2, #15
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4013      	ands	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a58      	ldr	r2, [pc, #352]	; (80024e0 <HAL_GPIO_Init+0x32c>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d037      	beq.n	80023f2 <HAL_GPIO_Init+0x23e>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a57      	ldr	r2, [pc, #348]	; (80024e4 <HAL_GPIO_Init+0x330>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d031      	beq.n	80023ee <HAL_GPIO_Init+0x23a>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a56      	ldr	r2, [pc, #344]	; (80024e8 <HAL_GPIO_Init+0x334>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d02b      	beq.n	80023ea <HAL_GPIO_Init+0x236>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a55      	ldr	r2, [pc, #340]	; (80024ec <HAL_GPIO_Init+0x338>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d025      	beq.n	80023e6 <HAL_GPIO_Init+0x232>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a54      	ldr	r2, [pc, #336]	; (80024f0 <HAL_GPIO_Init+0x33c>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d01f      	beq.n	80023e2 <HAL_GPIO_Init+0x22e>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a53      	ldr	r2, [pc, #332]	; (80024f4 <HAL_GPIO_Init+0x340>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d019      	beq.n	80023de <HAL_GPIO_Init+0x22a>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a52      	ldr	r2, [pc, #328]	; (80024f8 <HAL_GPIO_Init+0x344>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d013      	beq.n	80023da <HAL_GPIO_Init+0x226>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a51      	ldr	r2, [pc, #324]	; (80024fc <HAL_GPIO_Init+0x348>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d00d      	beq.n	80023d6 <HAL_GPIO_Init+0x222>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a50      	ldr	r2, [pc, #320]	; (8002500 <HAL_GPIO_Init+0x34c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d007      	beq.n	80023d2 <HAL_GPIO_Init+0x21e>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a4f      	ldr	r2, [pc, #316]	; (8002504 <HAL_GPIO_Init+0x350>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d101      	bne.n	80023ce <HAL_GPIO_Init+0x21a>
 80023ca:	2309      	movs	r3, #9
 80023cc:	e012      	b.n	80023f4 <HAL_GPIO_Init+0x240>
 80023ce:	230a      	movs	r3, #10
 80023d0:	e010      	b.n	80023f4 <HAL_GPIO_Init+0x240>
 80023d2:	2308      	movs	r3, #8
 80023d4:	e00e      	b.n	80023f4 <HAL_GPIO_Init+0x240>
 80023d6:	2307      	movs	r3, #7
 80023d8:	e00c      	b.n	80023f4 <HAL_GPIO_Init+0x240>
 80023da:	2306      	movs	r3, #6
 80023dc:	e00a      	b.n	80023f4 <HAL_GPIO_Init+0x240>
 80023de:	2305      	movs	r3, #5
 80023e0:	e008      	b.n	80023f4 <HAL_GPIO_Init+0x240>
 80023e2:	2304      	movs	r3, #4
 80023e4:	e006      	b.n	80023f4 <HAL_GPIO_Init+0x240>
 80023e6:	2303      	movs	r3, #3
 80023e8:	e004      	b.n	80023f4 <HAL_GPIO_Init+0x240>
 80023ea:	2302      	movs	r3, #2
 80023ec:	e002      	b.n	80023f4 <HAL_GPIO_Init+0x240>
 80023ee:	2301      	movs	r3, #1
 80023f0:	e000      	b.n	80023f4 <HAL_GPIO_Init+0x240>
 80023f2:	2300      	movs	r3, #0
 80023f4:	69fa      	ldr	r2, [r7, #28]
 80023f6:	f002 0203 	and.w	r2, r2, #3
 80023fa:	0092      	lsls	r2, r2, #2
 80023fc:	4093      	lsls	r3, r2
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4313      	orrs	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002404:	4935      	ldr	r1, [pc, #212]	; (80024dc <HAL_GPIO_Init+0x328>)
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	089b      	lsrs	r3, r3, #2
 800240a:	3302      	adds	r3, #2
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002412:	4b3d      	ldr	r3, [pc, #244]	; (8002508 <HAL_GPIO_Init+0x354>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	43db      	mvns	r3, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4013      	ands	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	4313      	orrs	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002436:	4a34      	ldr	r2, [pc, #208]	; (8002508 <HAL_GPIO_Init+0x354>)
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800243c:	4b32      	ldr	r3, [pc, #200]	; (8002508 <HAL_GPIO_Init+0x354>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	43db      	mvns	r3, r3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4013      	ands	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	4313      	orrs	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002460:	4a29      	ldr	r2, [pc, #164]	; (8002508 <HAL_GPIO_Init+0x354>)
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002466:	4b28      	ldr	r3, [pc, #160]	; (8002508 <HAL_GPIO_Init+0x354>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	43db      	mvns	r3, r3
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4013      	ands	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	4313      	orrs	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800248a:	4a1f      	ldr	r2, [pc, #124]	; (8002508 <HAL_GPIO_Init+0x354>)
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002490:	4b1d      	ldr	r3, [pc, #116]	; (8002508 <HAL_GPIO_Init+0x354>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	43db      	mvns	r3, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4013      	ands	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d003      	beq.n	80024b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024b4:	4a14      	ldr	r2, [pc, #80]	; (8002508 <HAL_GPIO_Init+0x354>)
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	3301      	adds	r3, #1
 80024be:	61fb      	str	r3, [r7, #28]
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	2b0f      	cmp	r3, #15
 80024c4:	f67f ae84 	bls.w	80021d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024c8:	bf00      	nop
 80024ca:	bf00      	nop
 80024cc:	3724      	adds	r7, #36	; 0x24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	40023800 	.word	0x40023800
 80024dc:	40013800 	.word	0x40013800
 80024e0:	40020000 	.word	0x40020000
 80024e4:	40020400 	.word	0x40020400
 80024e8:	40020800 	.word	0x40020800
 80024ec:	40020c00 	.word	0x40020c00
 80024f0:	40021000 	.word	0x40021000
 80024f4:	40021400 	.word	0x40021400
 80024f8:	40021800 	.word	0x40021800
 80024fc:	40021c00 	.word	0x40021c00
 8002500:	40022000 	.word	0x40022000
 8002504:	40022400 	.word	0x40022400
 8002508:	40013c00 	.word	0x40013c00

0800250c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	691a      	ldr	r2, [r3, #16]
 800251c:	887b      	ldrh	r3, [r7, #2]
 800251e:	4013      	ands	r3, r2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d002      	beq.n	800252a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002524:	2301      	movs	r3, #1
 8002526:	73fb      	strb	r3, [r7, #15]
 8002528:	e001      	b.n	800252e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800252a:	2300      	movs	r3, #0
 800252c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800252e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002530:	4618      	mov	r0, r3
 8002532:	3714      	adds	r7, #20
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	460b      	mov	r3, r1
 8002546:	807b      	strh	r3, [r7, #2]
 8002548:	4613      	mov	r3, r2
 800254a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800254c:	787b      	ldrb	r3, [r7, #1]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002552:	887a      	ldrh	r2, [r7, #2]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002558:	e003      	b.n	8002562 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800255a:	887b      	ldrh	r3, [r7, #2]
 800255c:	041a      	lsls	r2, r3, #16
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	619a      	str	r2, [r3, #24]
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800256e:	b480      	push	{r7}
 8002570:	b085      	sub	sp, #20
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
 8002576:	460b      	mov	r3, r1
 8002578:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002580:	887a      	ldrh	r2, [r7, #2]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	4013      	ands	r3, r2
 8002586:	041a      	lsls	r2, r3, #16
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	43d9      	mvns	r1, r3
 800258c:	887b      	ldrh	r3, [r7, #2]
 800258e:	400b      	ands	r3, r1
 8002590:	431a      	orrs	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	619a      	str	r2, [r3, #24]
}
 8002596:	bf00      	nop
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
	...

080025a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e12b      	b.n	800280e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d106      	bne.n	80025d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7fe ffd4 	bl	8001578 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2224      	movs	r2, #36	; 0x24
 80025d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 0201 	bic.w	r2, r2, #1
 80025e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002606:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002608:	f001 fc72 	bl	8003ef0 <HAL_RCC_GetPCLK1Freq>
 800260c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	4a81      	ldr	r2, [pc, #516]	; (8002818 <HAL_I2C_Init+0x274>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d807      	bhi.n	8002628 <HAL_I2C_Init+0x84>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4a80      	ldr	r2, [pc, #512]	; (800281c <HAL_I2C_Init+0x278>)
 800261c:	4293      	cmp	r3, r2
 800261e:	bf94      	ite	ls
 8002620:	2301      	movls	r3, #1
 8002622:	2300      	movhi	r3, #0
 8002624:	b2db      	uxtb	r3, r3
 8002626:	e006      	b.n	8002636 <HAL_I2C_Init+0x92>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	4a7d      	ldr	r2, [pc, #500]	; (8002820 <HAL_I2C_Init+0x27c>)
 800262c:	4293      	cmp	r3, r2
 800262e:	bf94      	ite	ls
 8002630:	2301      	movls	r3, #1
 8002632:	2300      	movhi	r3, #0
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e0e7      	b.n	800280e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	4a78      	ldr	r2, [pc, #480]	; (8002824 <HAL_I2C_Init+0x280>)
 8002642:	fba2 2303 	umull	r2, r3, r2, r3
 8002646:	0c9b      	lsrs	r3, r3, #18
 8002648:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68ba      	ldr	r2, [r7, #8]
 800265a:	430a      	orrs	r2, r1
 800265c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	4a6a      	ldr	r2, [pc, #424]	; (8002818 <HAL_I2C_Init+0x274>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d802      	bhi.n	8002678 <HAL_I2C_Init+0xd4>
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	3301      	adds	r3, #1
 8002676:	e009      	b.n	800268c <HAL_I2C_Init+0xe8>
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800267e:	fb02 f303 	mul.w	r3, r2, r3
 8002682:	4a69      	ldr	r2, [pc, #420]	; (8002828 <HAL_I2C_Init+0x284>)
 8002684:	fba2 2303 	umull	r2, r3, r2, r3
 8002688:	099b      	lsrs	r3, r3, #6
 800268a:	3301      	adds	r3, #1
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6812      	ldr	r2, [r2, #0]
 8002690:	430b      	orrs	r3, r1
 8002692:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800269e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	495c      	ldr	r1, [pc, #368]	; (8002818 <HAL_I2C_Init+0x274>)
 80026a8:	428b      	cmp	r3, r1
 80026aa:	d819      	bhi.n	80026e0 <HAL_I2C_Init+0x13c>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	1e59      	subs	r1, r3, #1
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80026ba:	1c59      	adds	r1, r3, #1
 80026bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80026c0:	400b      	ands	r3, r1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00a      	beq.n	80026dc <HAL_I2C_Init+0x138>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	1e59      	subs	r1, r3, #1
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80026d4:	3301      	adds	r3, #1
 80026d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026da:	e051      	b.n	8002780 <HAL_I2C_Init+0x1dc>
 80026dc:	2304      	movs	r3, #4
 80026de:	e04f      	b.n	8002780 <HAL_I2C_Init+0x1dc>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d111      	bne.n	800270c <HAL_I2C_Init+0x168>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	1e58      	subs	r0, r3, #1
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6859      	ldr	r1, [r3, #4]
 80026f0:	460b      	mov	r3, r1
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	440b      	add	r3, r1
 80026f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026fa:	3301      	adds	r3, #1
 80026fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002700:	2b00      	cmp	r3, #0
 8002702:	bf0c      	ite	eq
 8002704:	2301      	moveq	r3, #1
 8002706:	2300      	movne	r3, #0
 8002708:	b2db      	uxtb	r3, r3
 800270a:	e012      	b.n	8002732 <HAL_I2C_Init+0x18e>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	1e58      	subs	r0, r3, #1
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6859      	ldr	r1, [r3, #4]
 8002714:	460b      	mov	r3, r1
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	440b      	add	r3, r1
 800271a:	0099      	lsls	r1, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002722:	3301      	adds	r3, #1
 8002724:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002728:	2b00      	cmp	r3, #0
 800272a:	bf0c      	ite	eq
 800272c:	2301      	moveq	r3, #1
 800272e:	2300      	movne	r3, #0
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <HAL_I2C_Init+0x196>
 8002736:	2301      	movs	r3, #1
 8002738:	e022      	b.n	8002780 <HAL_I2C_Init+0x1dc>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10e      	bne.n	8002760 <HAL_I2C_Init+0x1bc>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	1e58      	subs	r0, r3, #1
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6859      	ldr	r1, [r3, #4]
 800274a:	460b      	mov	r3, r1
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	440b      	add	r3, r1
 8002750:	fbb0 f3f3 	udiv	r3, r0, r3
 8002754:	3301      	adds	r3, #1
 8002756:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800275a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800275e:	e00f      	b.n	8002780 <HAL_I2C_Init+0x1dc>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	1e58      	subs	r0, r3, #1
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6859      	ldr	r1, [r3, #4]
 8002768:	460b      	mov	r3, r1
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	0099      	lsls	r1, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	fbb0 f3f3 	udiv	r3, r0, r3
 8002776:	3301      	adds	r3, #1
 8002778:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800277c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002780:	6879      	ldr	r1, [r7, #4]
 8002782:	6809      	ldr	r1, [r1, #0]
 8002784:	4313      	orrs	r3, r2
 8002786:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69da      	ldr	r2, [r3, #28]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	431a      	orrs	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6911      	ldr	r1, [r2, #16]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	68d2      	ldr	r2, [r2, #12]
 80027ba:	4311      	orrs	r1, r2
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6812      	ldr	r2, [r2, #0]
 80027c0:	430b      	orrs	r3, r1
 80027c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	695a      	ldr	r2, [r3, #20]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f042 0201 	orr.w	r2, r2, #1
 80027ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2220      	movs	r2, #32
 80027fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	000186a0 	.word	0x000186a0
 800281c:	001e847f 	.word	0x001e847f
 8002820:	003d08ff 	.word	0x003d08ff
 8002824:	431bde83 	.word	0x431bde83
 8002828:	10624dd3 	.word	0x10624dd3

0800282c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b088      	sub	sp, #32
 8002830:	af02      	add	r7, sp, #8
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	607a      	str	r2, [r7, #4]
 8002836:	461a      	mov	r2, r3
 8002838:	460b      	mov	r3, r1
 800283a:	817b      	strh	r3, [r7, #10]
 800283c:	4613      	mov	r3, r2
 800283e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002840:	f7ff fb08 	bl	8001e54 <HAL_GetTick>
 8002844:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b20      	cmp	r3, #32
 8002850:	f040 80e0 	bne.w	8002a14 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	2319      	movs	r3, #25
 800285a:	2201      	movs	r2, #1
 800285c:	4970      	ldr	r1, [pc, #448]	; (8002a20 <HAL_I2C_Master_Transmit+0x1f4>)
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f000 fc64 	bl	800312c <I2C_WaitOnFlagUntilTimeout>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800286a:	2302      	movs	r3, #2
 800286c:	e0d3      	b.n	8002a16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002874:	2b01      	cmp	r3, #1
 8002876:	d101      	bne.n	800287c <HAL_I2C_Master_Transmit+0x50>
 8002878:	2302      	movs	r3, #2
 800287a:	e0cc      	b.n	8002a16 <HAL_I2C_Master_Transmit+0x1ea>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b01      	cmp	r3, #1
 8002890:	d007      	beq.n	80028a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f042 0201 	orr.w	r2, r2, #1
 80028a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2221      	movs	r2, #33	; 0x21
 80028b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2210      	movs	r2, #16
 80028be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	893a      	ldrh	r2, [r7, #8]
 80028d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d8:	b29a      	uxth	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	4a50      	ldr	r2, [pc, #320]	; (8002a24 <HAL_I2C_Master_Transmit+0x1f8>)
 80028e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80028e4:	8979      	ldrh	r1, [r7, #10]
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	6a3a      	ldr	r2, [r7, #32]
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 face 	bl	8002e8c <I2C_MasterRequestWrite>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e08d      	b.n	8002a16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028fa:	2300      	movs	r3, #0
 80028fc:	613b      	str	r3, [r7, #16]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	613b      	str	r3, [r7, #16]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	613b      	str	r3, [r7, #16]
 800290e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002910:	e066      	b.n	80029e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	6a39      	ldr	r1, [r7, #32]
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 fd22 	bl	8003360 <I2C_WaitOnTXEFlagUntilTimeout>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00d      	beq.n	800293e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	2b04      	cmp	r3, #4
 8002928:	d107      	bne.n	800293a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002938:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e06b      	b.n	8002a16 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	781a      	ldrb	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294e:	1c5a      	adds	r2, r3, #1
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002958:	b29b      	uxth	r3, r3
 800295a:	3b01      	subs	r3, #1
 800295c:	b29a      	uxth	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002966:	3b01      	subs	r3, #1
 8002968:	b29a      	uxth	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	695b      	ldr	r3, [r3, #20]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b04      	cmp	r3, #4
 800297a:	d11b      	bne.n	80029b4 <HAL_I2C_Master_Transmit+0x188>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002980:	2b00      	cmp	r3, #0
 8002982:	d017      	beq.n	80029b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	781a      	ldrb	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	1c5a      	adds	r2, r3, #1
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800299e:	b29b      	uxth	r3, r3
 80029a0:	3b01      	subs	r3, #1
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ac:	3b01      	subs	r3, #1
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	6a39      	ldr	r1, [r7, #32]
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f000 fd19 	bl	80033f0 <I2C_WaitOnBTFFlagUntilTimeout>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00d      	beq.n	80029e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	2b04      	cmp	r3, #4
 80029ca:	d107      	bne.n	80029dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e01a      	b.n	8002a16 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d194      	bne.n	8002912 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2220      	movs	r2, #32
 80029fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a10:	2300      	movs	r3, #0
 8002a12:	e000      	b.n	8002a16 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002a14:	2302      	movs	r3, #2
  }
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	00100002 	.word	0x00100002
 8002a24:	ffff0000 	.word	0xffff0000

08002a28 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b08c      	sub	sp, #48	; 0x30
 8002a2c:	af02      	add	r7, sp, #8
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	607a      	str	r2, [r7, #4]
 8002a32:	461a      	mov	r2, r3
 8002a34:	460b      	mov	r3, r1
 8002a36:	817b      	strh	r3, [r7, #10]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a3c:	f7ff fa0a 	bl	8001e54 <HAL_GetTick>
 8002a40:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b20      	cmp	r3, #32
 8002a4c:	f040 8217 	bne.w	8002e7e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	2319      	movs	r3, #25
 8002a56:	2201      	movs	r2, #1
 8002a58:	497c      	ldr	r1, [pc, #496]	; (8002c4c <HAL_I2C_Master_Receive+0x224>)
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 fb66 	bl	800312c <I2C_WaitOnFlagUntilTimeout>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002a66:	2302      	movs	r3, #2
 8002a68:	e20a      	b.n	8002e80 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d101      	bne.n	8002a78 <HAL_I2C_Master_Receive+0x50>
 8002a74:	2302      	movs	r3, #2
 8002a76:	e203      	b.n	8002e80 <HAL_I2C_Master_Receive+0x458>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d007      	beq.n	8002a9e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f042 0201 	orr.w	r2, r2, #1
 8002a9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2222      	movs	r2, #34	; 0x22
 8002ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2210      	movs	r2, #16
 8002aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	893a      	ldrh	r2, [r7, #8]
 8002ace:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	4a5c      	ldr	r2, [pc, #368]	; (8002c50 <HAL_I2C_Master_Receive+0x228>)
 8002ade:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ae0:	8979      	ldrh	r1, [r7, #10]
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f000 fa52 	bl	8002f90 <I2C_MasterRequestRead>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e1c4      	b.n	8002e80 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d113      	bne.n	8002b26 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002afe:	2300      	movs	r3, #0
 8002b00:	623b      	str	r3, [r7, #32]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	623b      	str	r3, [r7, #32]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	623b      	str	r3, [r7, #32]
 8002b12:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	e198      	b.n	8002e58 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d11b      	bne.n	8002b66 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b3e:	2300      	movs	r3, #0
 8002b40:	61fb      	str	r3, [r7, #28]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	61fb      	str	r3, [r7, #28]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	61fb      	str	r3, [r7, #28]
 8002b52:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	e178      	b.n	8002e58 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d11b      	bne.n	8002ba6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b7c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61bb      	str	r3, [r7, #24]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	61bb      	str	r3, [r7, #24]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	61bb      	str	r3, [r7, #24]
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	e158      	b.n	8002e58 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	617b      	str	r3, [r7, #20]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	617b      	str	r3, [r7, #20]
 8002bca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002bcc:	e144      	b.n	8002e58 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd2:	2b03      	cmp	r3, #3
 8002bd4:	f200 80f1 	bhi.w	8002dba <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d123      	bne.n	8002c28 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002be2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f000 fc4b 	bl	8003480 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e145      	b.n	8002e80 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691a      	ldr	r2, [r3, #16]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	1c5a      	adds	r2, r3, #1
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c26:	e117      	b.n	8002e58 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d14e      	bne.n	8002cce <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c36:	2200      	movs	r2, #0
 8002c38:	4906      	ldr	r1, [pc, #24]	; (8002c54 <HAL_I2C_Master_Receive+0x22c>)
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f000 fa76 	bl	800312c <I2C_WaitOnFlagUntilTimeout>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d008      	beq.n	8002c58 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e11a      	b.n	8002e80 <HAL_I2C_Master_Receive+0x458>
 8002c4a:	bf00      	nop
 8002c4c:	00100002 	.word	0x00100002
 8002c50:	ffff0000 	.word	0xffff0000
 8002c54:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	691a      	ldr	r2, [r3, #16]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c72:	b2d2      	uxtb	r2, r2
 8002c74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	1c5a      	adds	r2, r3, #1
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c84:	3b01      	subs	r3, #1
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	3b01      	subs	r3, #1
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	691a      	ldr	r2, [r3, #16]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	b2d2      	uxtb	r2, r2
 8002ca6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	1c5a      	adds	r2, r3, #1
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ccc:	e0c4      	b.n	8002e58 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	496c      	ldr	r1, [pc, #432]	; (8002e88 <HAL_I2C_Master_Receive+0x460>)
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f000 fa27 	bl	800312c <I2C_WaitOnFlagUntilTimeout>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e0cb      	b.n	8002e80 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cf6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	691a      	ldr	r2, [r3, #16]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	1c5a      	adds	r2, r3, #1
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d14:	3b01      	subs	r3, #1
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	3b01      	subs	r3, #1
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d30:	2200      	movs	r2, #0
 8002d32:	4955      	ldr	r1, [pc, #340]	; (8002e88 <HAL_I2C_Master_Receive+0x460>)
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 f9f9 	bl	800312c <I2C_WaitOnFlagUntilTimeout>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e09d      	b.n	8002e80 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	691a      	ldr	r2, [r3, #16]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	b2d2      	uxtb	r2, r2
 8002d60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d66:	1c5a      	adds	r2, r3, #1
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d70:	3b01      	subs	r3, #1
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	691a      	ldr	r2, [r3, #16]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	b2d2      	uxtb	r2, r2
 8002d92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	1c5a      	adds	r2, r3, #1
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da2:	3b01      	subs	r3, #1
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002db8:	e04e      	b.n	8002e58 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 fb5e 	bl	8003480 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e058      	b.n	8002e80 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	691a      	ldr	r2, [r3, #16]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dea:	3b01      	subs	r3, #1
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d124      	bne.n	8002e58 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e12:	2b03      	cmp	r3, #3
 8002e14:	d107      	bne.n	8002e26 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e24:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	691a      	ldr	r2, [r3, #16]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	b2d2      	uxtb	r2, r2
 8002e32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	1c5a      	adds	r2, r3, #1
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e42:	3b01      	subs	r3, #1
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	3b01      	subs	r3, #1
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f47f aeb6 	bne.w	8002bce <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2220      	movs	r2, #32
 8002e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	e000      	b.n	8002e80 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002e7e:	2302      	movs	r3, #2
  }
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3728      	adds	r7, #40	; 0x28
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	00010004 	.word	0x00010004

08002e8c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b088      	sub	sp, #32
 8002e90:	af02      	add	r7, sp, #8
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	607a      	str	r2, [r7, #4]
 8002e96:	603b      	str	r3, [r7, #0]
 8002e98:	460b      	mov	r3, r1
 8002e9a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	2b08      	cmp	r3, #8
 8002ea6:	d006      	beq.n	8002eb6 <I2C_MasterRequestWrite+0x2a>
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d003      	beq.n	8002eb6 <I2C_MasterRequestWrite+0x2a>
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002eb4:	d108      	bne.n	8002ec8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	e00b      	b.n	8002ee0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ecc:	2b12      	cmp	r3, #18
 8002ece:	d107      	bne.n	8002ee0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ede:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 f91d 	bl	800312c <I2C_WaitOnFlagUntilTimeout>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00d      	beq.n	8002f14 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f06:	d103      	bne.n	8002f10 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e035      	b.n	8002f80 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f1c:	d108      	bne.n	8002f30 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f1e:	897b      	ldrh	r3, [r7, #10]
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	461a      	mov	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f2c:	611a      	str	r2, [r3, #16]
 8002f2e:	e01b      	b.n	8002f68 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f30:	897b      	ldrh	r3, [r7, #10]
 8002f32:	11db      	asrs	r3, r3, #7
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	f003 0306 	and.w	r3, r3, #6
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	f063 030f 	orn	r3, r3, #15
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	490e      	ldr	r1, [pc, #56]	; (8002f88 <I2C_MasterRequestWrite+0xfc>)
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 f966 	bl	8003220 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e010      	b.n	8002f80 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f5e:	897b      	ldrh	r3, [r7, #10]
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	4907      	ldr	r1, [pc, #28]	; (8002f8c <I2C_MasterRequestWrite+0x100>)
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 f956 	bl	8003220 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e000      	b.n	8002f80 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	00010008 	.word	0x00010008
 8002f8c:	00010002 	.word	0x00010002

08002f90 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b088      	sub	sp, #32
 8002f94:	af02      	add	r7, sp, #8
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	607a      	str	r2, [r7, #4]
 8002f9a:	603b      	str	r3, [r7, #0]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fb4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	2b08      	cmp	r3, #8
 8002fba:	d006      	beq.n	8002fca <I2C_MasterRequestRead+0x3a>
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d003      	beq.n	8002fca <I2C_MasterRequestRead+0x3a>
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002fc8:	d108      	bne.n	8002fdc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	e00b      	b.n	8002ff4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe0:	2b11      	cmp	r3, #17
 8002fe2:	d107      	bne.n	8002ff4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ff2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	9300      	str	r3, [sp, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f000 f893 	bl	800312c <I2C_WaitOnFlagUntilTimeout>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00d      	beq.n	8003028 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003016:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800301a:	d103      	bne.n	8003024 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003022:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e079      	b.n	800311c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003030:	d108      	bne.n	8003044 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003032:	897b      	ldrh	r3, [r7, #10]
 8003034:	b2db      	uxtb	r3, r3
 8003036:	f043 0301 	orr.w	r3, r3, #1
 800303a:	b2da      	uxtb	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	611a      	str	r2, [r3, #16]
 8003042:	e05f      	b.n	8003104 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003044:	897b      	ldrh	r3, [r7, #10]
 8003046:	11db      	asrs	r3, r3, #7
 8003048:	b2db      	uxtb	r3, r3
 800304a:	f003 0306 	and.w	r3, r3, #6
 800304e:	b2db      	uxtb	r3, r3
 8003050:	f063 030f 	orn	r3, r3, #15
 8003054:	b2da      	uxtb	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	4930      	ldr	r1, [pc, #192]	; (8003124 <I2C_MasterRequestRead+0x194>)
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f000 f8dc 	bl	8003220 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e054      	b.n	800311c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003072:	897b      	ldrh	r3, [r7, #10]
 8003074:	b2da      	uxtb	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	4929      	ldr	r1, [pc, #164]	; (8003128 <I2C_MasterRequestRead+0x198>)
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f000 f8cc 	bl	8003220 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e044      	b.n	800311c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003092:	2300      	movs	r3, #0
 8003094:	613b      	str	r3, [r7, #16]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	613b      	str	r3, [r7, #16]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030b6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 f831 	bl	800312c <I2C_WaitOnFlagUntilTimeout>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00d      	beq.n	80030ec <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030de:	d103      	bne.n	80030e8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030e6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e017      	b.n	800311c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80030ec:	897b      	ldrh	r3, [r7, #10]
 80030ee:	11db      	asrs	r3, r3, #7
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	f003 0306 	and.w	r3, r3, #6
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	f063 030e 	orn	r3, r3, #14
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	4907      	ldr	r1, [pc, #28]	; (8003128 <I2C_MasterRequestRead+0x198>)
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 f888 	bl	8003220 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e000      	b.n	800311c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3718      	adds	r7, #24
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	00010008 	.word	0x00010008
 8003128:	00010002 	.word	0x00010002

0800312c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	603b      	str	r3, [r7, #0]
 8003138:	4613      	mov	r3, r2
 800313a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800313c:	e048      	b.n	80031d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003144:	d044      	beq.n	80031d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003146:	f7fe fe85 	bl	8001e54 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	429a      	cmp	r2, r3
 8003154:	d302      	bcc.n	800315c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d139      	bne.n	80031d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	0c1b      	lsrs	r3, r3, #16
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b01      	cmp	r3, #1
 8003164:	d10d      	bne.n	8003182 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	43da      	mvns	r2, r3
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	4013      	ands	r3, r2
 8003172:	b29b      	uxth	r3, r3
 8003174:	2b00      	cmp	r3, #0
 8003176:	bf0c      	ite	eq
 8003178:	2301      	moveq	r3, #1
 800317a:	2300      	movne	r3, #0
 800317c:	b2db      	uxtb	r3, r3
 800317e:	461a      	mov	r2, r3
 8003180:	e00c      	b.n	800319c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	43da      	mvns	r2, r3
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	4013      	ands	r3, r2
 800318e:	b29b      	uxth	r3, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	bf0c      	ite	eq
 8003194:	2301      	moveq	r3, #1
 8003196:	2300      	movne	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	461a      	mov	r2, r3
 800319c:	79fb      	ldrb	r3, [r7, #7]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d116      	bne.n	80031d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2220      	movs	r2, #32
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031bc:	f043 0220 	orr.w	r2, r3, #32
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e023      	b.n	8003218 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	0c1b      	lsrs	r3, r3, #16
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d10d      	bne.n	80031f6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	43da      	mvns	r2, r3
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	4013      	ands	r3, r2
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	bf0c      	ite	eq
 80031ec:	2301      	moveq	r3, #1
 80031ee:	2300      	movne	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	461a      	mov	r2, r3
 80031f4:	e00c      	b.n	8003210 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	43da      	mvns	r2, r3
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	4013      	ands	r3, r2
 8003202:	b29b      	uxth	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	bf0c      	ite	eq
 8003208:	2301      	moveq	r3, #1
 800320a:	2300      	movne	r3, #0
 800320c:	b2db      	uxtb	r3, r3
 800320e:	461a      	mov	r2, r3
 8003210:	79fb      	ldrb	r3, [r7, #7]
 8003212:	429a      	cmp	r2, r3
 8003214:	d093      	beq.n	800313e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
 800322c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800322e:	e071      	b.n	8003314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800323a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800323e:	d123      	bne.n	8003288 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800324e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003258:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2220      	movs	r2, #32
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003274:	f043 0204 	orr.w	r2, r3, #4
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e067      	b.n	8003358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800328e:	d041      	beq.n	8003314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003290:	f7fe fde0 	bl	8001e54 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	429a      	cmp	r2, r3
 800329e:	d302      	bcc.n	80032a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d136      	bne.n	8003314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	0c1b      	lsrs	r3, r3, #16
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d10c      	bne.n	80032ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	43da      	mvns	r2, r3
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	4013      	ands	r3, r2
 80032bc:	b29b      	uxth	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	bf14      	ite	ne
 80032c2:	2301      	movne	r3, #1
 80032c4:	2300      	moveq	r3, #0
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	e00b      	b.n	80032e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	43da      	mvns	r2, r3
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	4013      	ands	r3, r2
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	bf14      	ite	ne
 80032dc:	2301      	movne	r3, #1
 80032de:	2300      	moveq	r3, #0
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d016      	beq.n	8003314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2220      	movs	r2, #32
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	f043 0220 	orr.w	r2, r3, #32
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e021      	b.n	8003358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	0c1b      	lsrs	r3, r3, #16
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b01      	cmp	r3, #1
 800331c:	d10c      	bne.n	8003338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	43da      	mvns	r2, r3
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	4013      	ands	r3, r2
 800332a:	b29b      	uxth	r3, r3
 800332c:	2b00      	cmp	r3, #0
 800332e:	bf14      	ite	ne
 8003330:	2301      	movne	r3, #1
 8003332:	2300      	moveq	r3, #0
 8003334:	b2db      	uxtb	r3, r3
 8003336:	e00b      	b.n	8003350 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	43da      	mvns	r2, r3
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	4013      	ands	r3, r2
 8003344:	b29b      	uxth	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	bf14      	ite	ne
 800334a:	2301      	movne	r3, #1
 800334c:	2300      	moveq	r3, #0
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b00      	cmp	r3, #0
 8003352:	f47f af6d 	bne.w	8003230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800336c:	e034      	b.n	80033d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f000 f8e3 	bl	800353a <I2C_IsAcknowledgeFailed>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e034      	b.n	80033e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003384:	d028      	beq.n	80033d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003386:	f7fe fd65 	bl	8001e54 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	429a      	cmp	r2, r3
 8003394:	d302      	bcc.n	800339c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d11d      	bne.n	80033d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a6:	2b80      	cmp	r3, #128	; 0x80
 80033a8:	d016      	beq.n	80033d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2220      	movs	r2, #32
 80033b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	f043 0220 	orr.w	r2, r3, #32
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e007      	b.n	80033e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e2:	2b80      	cmp	r3, #128	; 0x80
 80033e4:	d1c3      	bne.n	800336e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033fc:	e034      	b.n	8003468 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f000 f89b 	bl	800353a <I2C_IsAcknowledgeFailed>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e034      	b.n	8003478 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003414:	d028      	beq.n	8003468 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003416:	f7fe fd1d 	bl	8001e54 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	68ba      	ldr	r2, [r7, #8]
 8003422:	429a      	cmp	r2, r3
 8003424:	d302      	bcc.n	800342c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d11d      	bne.n	8003468 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	f003 0304 	and.w	r3, r3, #4
 8003436:	2b04      	cmp	r3, #4
 8003438:	d016      	beq.n	8003468 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2220      	movs	r2, #32
 8003444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003454:	f043 0220 	orr.w	r2, r3, #32
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e007      	b.n	8003478 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	f003 0304 	and.w	r3, r3, #4
 8003472:	2b04      	cmp	r3, #4
 8003474:	d1c3      	bne.n	80033fe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800348c:	e049      	b.n	8003522 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	f003 0310 	and.w	r3, r3, #16
 8003498:	2b10      	cmp	r3, #16
 800349a:	d119      	bne.n	80034d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f06f 0210 	mvn.w	r2, #16
 80034a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e030      	b.n	8003532 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034d0:	f7fe fcc0 	bl	8001e54 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d302      	bcc.n	80034e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d11d      	bne.n	8003522 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f0:	2b40      	cmp	r3, #64	; 0x40
 80034f2:	d016      	beq.n	8003522 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2220      	movs	r2, #32
 80034fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	f043 0220 	orr.w	r2, r3, #32
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e007      	b.n	8003532 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352c:	2b40      	cmp	r3, #64	; 0x40
 800352e:	d1ae      	bne.n	800348e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800353a:	b480      	push	{r7}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800354c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003550:	d11b      	bne.n	800358a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800355a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2220      	movs	r2, #32
 8003566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	f043 0204 	orr.w	r2, r3, #4
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b20      	cmp	r3, #32
 80035ac:	d129      	bne.n	8003602 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2224      	movs	r2, #36	; 0x24
 80035b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 0201 	bic.w	r2, r2, #1
 80035c4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 0210 	bic.w	r2, r2, #16
 80035d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f042 0201 	orr.w	r2, r2, #1
 80035f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2220      	movs	r2, #32
 80035fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80035fe:	2300      	movs	r3, #0
 8003600:	e000      	b.n	8003604 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003602:	2302      	movs	r3, #2
  }
}
 8003604:	4618      	mov	r0, r3
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800361a:	2300      	movs	r3, #0
 800361c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b20      	cmp	r3, #32
 8003628:	d12a      	bne.n	8003680 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2224      	movs	r2, #36	; 0x24
 800362e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0201 	bic.w	r2, r2, #1
 8003640:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800364a:	89fb      	ldrh	r3, [r7, #14]
 800364c:	f023 030f 	bic.w	r3, r3, #15
 8003650:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	b29a      	uxth	r2, r3
 8003656:	89fb      	ldrh	r3, [r7, #14]
 8003658:	4313      	orrs	r3, r2
 800365a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	89fa      	ldrh	r2, [r7, #14]
 8003662:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0201 	orr.w	r2, r2, #1
 8003672:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2220      	movs	r2, #32
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800367c:	2300      	movs	r3, #0
 800367e:	e000      	b.n	8003682 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003680:	2302      	movs	r3, #2
  }
}
 8003682:	4618      	mov	r0, r3
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
	...

08003690 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e267      	b.n	8003b72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d075      	beq.n	800379a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036ae:	4b88      	ldr	r3, [pc, #544]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 030c 	and.w	r3, r3, #12
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	d00c      	beq.n	80036d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036ba:	4b85      	ldr	r3, [pc, #532]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036c2:	2b08      	cmp	r3, #8
 80036c4:	d112      	bne.n	80036ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036c6:	4b82      	ldr	r3, [pc, #520]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036d2:	d10b      	bne.n	80036ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d4:	4b7e      	ldr	r3, [pc, #504]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d05b      	beq.n	8003798 <HAL_RCC_OscConfig+0x108>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d157      	bne.n	8003798 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e242      	b.n	8003b72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036f4:	d106      	bne.n	8003704 <HAL_RCC_OscConfig+0x74>
 80036f6:	4b76      	ldr	r3, [pc, #472]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a75      	ldr	r2, [pc, #468]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 80036fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003700:	6013      	str	r3, [r2, #0]
 8003702:	e01d      	b.n	8003740 <HAL_RCC_OscConfig+0xb0>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800370c:	d10c      	bne.n	8003728 <HAL_RCC_OscConfig+0x98>
 800370e:	4b70      	ldr	r3, [pc, #448]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a6f      	ldr	r2, [pc, #444]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 8003714:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003718:	6013      	str	r3, [r2, #0]
 800371a:	4b6d      	ldr	r3, [pc, #436]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a6c      	ldr	r2, [pc, #432]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 8003720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003724:	6013      	str	r3, [r2, #0]
 8003726:	e00b      	b.n	8003740 <HAL_RCC_OscConfig+0xb0>
 8003728:	4b69      	ldr	r3, [pc, #420]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a68      	ldr	r2, [pc, #416]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 800372e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003732:	6013      	str	r3, [r2, #0]
 8003734:	4b66      	ldr	r3, [pc, #408]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a65      	ldr	r2, [pc, #404]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 800373a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800373e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d013      	beq.n	8003770 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003748:	f7fe fb84 	bl	8001e54 <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800374e:	e008      	b.n	8003762 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003750:	f7fe fb80 	bl	8001e54 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b64      	cmp	r3, #100	; 0x64
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e207      	b.n	8003b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003762:	4b5b      	ldr	r3, [pc, #364]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d0f0      	beq.n	8003750 <HAL_RCC_OscConfig+0xc0>
 800376e:	e014      	b.n	800379a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003770:	f7fe fb70 	bl	8001e54 <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003778:	f7fe fb6c 	bl	8001e54 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b64      	cmp	r3, #100	; 0x64
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e1f3      	b.n	8003b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800378a:	4b51      	ldr	r3, [pc, #324]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1f0      	bne.n	8003778 <HAL_RCC_OscConfig+0xe8>
 8003796:	e000      	b.n	800379a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003798:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d063      	beq.n	800386e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037a6:	4b4a      	ldr	r3, [pc, #296]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 030c 	and.w	r3, r3, #12
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00b      	beq.n	80037ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037b2:	4b47      	ldr	r3, [pc, #284]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037ba:	2b08      	cmp	r3, #8
 80037bc:	d11c      	bne.n	80037f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037be:	4b44      	ldr	r3, [pc, #272]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d116      	bne.n	80037f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ca:	4b41      	ldr	r3, [pc, #260]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d005      	beq.n	80037e2 <HAL_RCC_OscConfig+0x152>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d001      	beq.n	80037e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e1c7      	b.n	8003b72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037e2:	4b3b      	ldr	r3, [pc, #236]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	4937      	ldr	r1, [pc, #220]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037f6:	e03a      	b.n	800386e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d020      	beq.n	8003842 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003800:	4b34      	ldr	r3, [pc, #208]	; (80038d4 <HAL_RCC_OscConfig+0x244>)
 8003802:	2201      	movs	r2, #1
 8003804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003806:	f7fe fb25 	bl	8001e54 <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800380c:	e008      	b.n	8003820 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800380e:	f7fe fb21 	bl	8001e54 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e1a8      	b.n	8003b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003820:	4b2b      	ldr	r3, [pc, #172]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0f0      	beq.n	800380e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800382c:	4b28      	ldr	r3, [pc, #160]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	4925      	ldr	r1, [pc, #148]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 800383c:	4313      	orrs	r3, r2
 800383e:	600b      	str	r3, [r1, #0]
 8003840:	e015      	b.n	800386e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003842:	4b24      	ldr	r3, [pc, #144]	; (80038d4 <HAL_RCC_OscConfig+0x244>)
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003848:	f7fe fb04 	bl	8001e54 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003850:	f7fe fb00 	bl	8001e54 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e187      	b.n	8003b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003862:	4b1b      	ldr	r3, [pc, #108]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1f0      	bne.n	8003850 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0308 	and.w	r3, r3, #8
 8003876:	2b00      	cmp	r3, #0
 8003878:	d036      	beq.n	80038e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d016      	beq.n	80038b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003882:	4b15      	ldr	r3, [pc, #84]	; (80038d8 <HAL_RCC_OscConfig+0x248>)
 8003884:	2201      	movs	r2, #1
 8003886:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003888:	f7fe fae4 	bl	8001e54 <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003890:	f7fe fae0 	bl	8001e54 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b02      	cmp	r3, #2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e167      	b.n	8003b72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038a2:	4b0b      	ldr	r3, [pc, #44]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 80038a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d0f0      	beq.n	8003890 <HAL_RCC_OscConfig+0x200>
 80038ae:	e01b      	b.n	80038e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038b0:	4b09      	ldr	r3, [pc, #36]	; (80038d8 <HAL_RCC_OscConfig+0x248>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038b6:	f7fe facd 	bl	8001e54 <HAL_GetTick>
 80038ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038bc:	e00e      	b.n	80038dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038be:	f7fe fac9 	bl	8001e54 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d907      	bls.n	80038dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e150      	b.n	8003b72 <HAL_RCC_OscConfig+0x4e2>
 80038d0:	40023800 	.word	0x40023800
 80038d4:	42470000 	.word	0x42470000
 80038d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038dc:	4b88      	ldr	r3, [pc, #544]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 80038de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1ea      	bne.n	80038be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0304 	and.w	r3, r3, #4
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f000 8097 	beq.w	8003a24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038f6:	2300      	movs	r3, #0
 80038f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038fa:	4b81      	ldr	r3, [pc, #516]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10f      	bne.n	8003926 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003906:	2300      	movs	r3, #0
 8003908:	60bb      	str	r3, [r7, #8]
 800390a:	4b7d      	ldr	r3, [pc, #500]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	4a7c      	ldr	r2, [pc, #496]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 8003910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003914:	6413      	str	r3, [r2, #64]	; 0x40
 8003916:	4b7a      	ldr	r3, [pc, #488]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800391e:	60bb      	str	r3, [r7, #8]
 8003920:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003922:	2301      	movs	r3, #1
 8003924:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003926:	4b77      	ldr	r3, [pc, #476]	; (8003b04 <HAL_RCC_OscConfig+0x474>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392e:	2b00      	cmp	r3, #0
 8003930:	d118      	bne.n	8003964 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003932:	4b74      	ldr	r3, [pc, #464]	; (8003b04 <HAL_RCC_OscConfig+0x474>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a73      	ldr	r2, [pc, #460]	; (8003b04 <HAL_RCC_OscConfig+0x474>)
 8003938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800393c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800393e:	f7fe fa89 	bl	8001e54 <HAL_GetTick>
 8003942:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003944:	e008      	b.n	8003958 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003946:	f7fe fa85 	bl	8001e54 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e10c      	b.n	8003b72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003958:	4b6a      	ldr	r3, [pc, #424]	; (8003b04 <HAL_RCC_OscConfig+0x474>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003960:	2b00      	cmp	r3, #0
 8003962:	d0f0      	beq.n	8003946 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d106      	bne.n	800397a <HAL_RCC_OscConfig+0x2ea>
 800396c:	4b64      	ldr	r3, [pc, #400]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 800396e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003970:	4a63      	ldr	r2, [pc, #396]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 8003972:	f043 0301 	orr.w	r3, r3, #1
 8003976:	6713      	str	r3, [r2, #112]	; 0x70
 8003978:	e01c      	b.n	80039b4 <HAL_RCC_OscConfig+0x324>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	2b05      	cmp	r3, #5
 8003980:	d10c      	bne.n	800399c <HAL_RCC_OscConfig+0x30c>
 8003982:	4b5f      	ldr	r3, [pc, #380]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 8003984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003986:	4a5e      	ldr	r2, [pc, #376]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 8003988:	f043 0304 	orr.w	r3, r3, #4
 800398c:	6713      	str	r3, [r2, #112]	; 0x70
 800398e:	4b5c      	ldr	r3, [pc, #368]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 8003990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003992:	4a5b      	ldr	r2, [pc, #364]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 8003994:	f043 0301 	orr.w	r3, r3, #1
 8003998:	6713      	str	r3, [r2, #112]	; 0x70
 800399a:	e00b      	b.n	80039b4 <HAL_RCC_OscConfig+0x324>
 800399c:	4b58      	ldr	r3, [pc, #352]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 800399e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a0:	4a57      	ldr	r2, [pc, #348]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 80039a2:	f023 0301 	bic.w	r3, r3, #1
 80039a6:	6713      	str	r3, [r2, #112]	; 0x70
 80039a8:	4b55      	ldr	r3, [pc, #340]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 80039aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ac:	4a54      	ldr	r2, [pc, #336]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 80039ae:	f023 0304 	bic.w	r3, r3, #4
 80039b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d015      	beq.n	80039e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039bc:	f7fe fa4a 	bl	8001e54 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c2:	e00a      	b.n	80039da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039c4:	f7fe fa46 	bl	8001e54 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e0cb      	b.n	8003b72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039da:	4b49      	ldr	r3, [pc, #292]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 80039dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d0ee      	beq.n	80039c4 <HAL_RCC_OscConfig+0x334>
 80039e6:	e014      	b.n	8003a12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039e8:	f7fe fa34 	bl	8001e54 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ee:	e00a      	b.n	8003a06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039f0:	f7fe fa30 	bl	8001e54 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e0b5      	b.n	8003b72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a06:	4b3e      	ldr	r3, [pc, #248]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 8003a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1ee      	bne.n	80039f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a12:	7dfb      	ldrb	r3, [r7, #23]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d105      	bne.n	8003a24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a18:	4b39      	ldr	r3, [pc, #228]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1c:	4a38      	ldr	r2, [pc, #224]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 8003a1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 80a1 	beq.w	8003b70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a2e:	4b34      	ldr	r3, [pc, #208]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 030c 	and.w	r3, r3, #12
 8003a36:	2b08      	cmp	r3, #8
 8003a38:	d05c      	beq.n	8003af4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d141      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a42:	4b31      	ldr	r3, [pc, #196]	; (8003b08 <HAL_RCC_OscConfig+0x478>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a48:	f7fe fa04 	bl	8001e54 <HAL_GetTick>
 8003a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a50:	f7fe fa00 	bl	8001e54 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e087      	b.n	8003b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a62:	4b27      	ldr	r3, [pc, #156]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1f0      	bne.n	8003a50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69da      	ldr	r2, [r3, #28]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	019b      	lsls	r3, r3, #6
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a84:	085b      	lsrs	r3, r3, #1
 8003a86:	3b01      	subs	r3, #1
 8003a88:	041b      	lsls	r3, r3, #16
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a90:	061b      	lsls	r3, r3, #24
 8003a92:	491b      	ldr	r1, [pc, #108]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a98:	4b1b      	ldr	r3, [pc, #108]	; (8003b08 <HAL_RCC_OscConfig+0x478>)
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a9e:	f7fe f9d9 	bl	8001e54 <HAL_GetTick>
 8003aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aa4:	e008      	b.n	8003ab8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aa6:	f7fe f9d5 	bl	8001e54 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e05c      	b.n	8003b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ab8:	4b11      	ldr	r3, [pc, #68]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0f0      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x416>
 8003ac4:	e054      	b.n	8003b70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ac6:	4b10      	ldr	r3, [pc, #64]	; (8003b08 <HAL_RCC_OscConfig+0x478>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003acc:	f7fe f9c2 	bl	8001e54 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ad4:	f7fe f9be 	bl	8001e54 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e045      	b.n	8003b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ae6:	4b06      	ldr	r3, [pc, #24]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1f0      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x444>
 8003af2:	e03d      	b.n	8003b70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d107      	bne.n	8003b0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e038      	b.n	8003b72 <HAL_RCC_OscConfig+0x4e2>
 8003b00:	40023800 	.word	0x40023800
 8003b04:	40007000 	.word	0x40007000
 8003b08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b0c:	4b1b      	ldr	r3, [pc, #108]	; (8003b7c <HAL_RCC_OscConfig+0x4ec>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d028      	beq.n	8003b6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d121      	bne.n	8003b6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d11a      	bne.n	8003b6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d111      	bne.n	8003b6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b52:	085b      	lsrs	r3, r3, #1
 8003b54:	3b01      	subs	r3, #1
 8003b56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d107      	bne.n	8003b6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d001      	beq.n	8003b70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e000      	b.n	8003b72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3718      	adds	r7, #24
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	40023800 	.word	0x40023800

08003b80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e0cc      	b.n	8003d2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b94:	4b68      	ldr	r3, [pc, #416]	; (8003d38 <HAL_RCC_ClockConfig+0x1b8>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 030f 	and.w	r3, r3, #15
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d90c      	bls.n	8003bbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba2:	4b65      	ldr	r3, [pc, #404]	; (8003d38 <HAL_RCC_ClockConfig+0x1b8>)
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	b2d2      	uxtb	r2, r2
 8003ba8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003baa:	4b63      	ldr	r3, [pc, #396]	; (8003d38 <HAL_RCC_ClockConfig+0x1b8>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d001      	beq.n	8003bbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e0b8      	b.n	8003d2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d020      	beq.n	8003c0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0304 	and.w	r3, r3, #4
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d005      	beq.n	8003be0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bd4:	4b59      	ldr	r3, [pc, #356]	; (8003d3c <HAL_RCC_ClockConfig+0x1bc>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	4a58      	ldr	r2, [pc, #352]	; (8003d3c <HAL_RCC_ClockConfig+0x1bc>)
 8003bda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0308 	and.w	r3, r3, #8
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d005      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bec:	4b53      	ldr	r3, [pc, #332]	; (8003d3c <HAL_RCC_ClockConfig+0x1bc>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	4a52      	ldr	r2, [pc, #328]	; (8003d3c <HAL_RCC_ClockConfig+0x1bc>)
 8003bf2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bf6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bf8:	4b50      	ldr	r3, [pc, #320]	; (8003d3c <HAL_RCC_ClockConfig+0x1bc>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	494d      	ldr	r1, [pc, #308]	; (8003d3c <HAL_RCC_ClockConfig+0x1bc>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d044      	beq.n	8003ca0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d107      	bne.n	8003c2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c1e:	4b47      	ldr	r3, [pc, #284]	; (8003d3c <HAL_RCC_ClockConfig+0x1bc>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d119      	bne.n	8003c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e07f      	b.n	8003d2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d003      	beq.n	8003c3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c3a:	2b03      	cmp	r3, #3
 8003c3c:	d107      	bne.n	8003c4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c3e:	4b3f      	ldr	r3, [pc, #252]	; (8003d3c <HAL_RCC_ClockConfig+0x1bc>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d109      	bne.n	8003c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e06f      	b.n	8003d2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c4e:	4b3b      	ldr	r3, [pc, #236]	; (8003d3c <HAL_RCC_ClockConfig+0x1bc>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e067      	b.n	8003d2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c5e:	4b37      	ldr	r3, [pc, #220]	; (8003d3c <HAL_RCC_ClockConfig+0x1bc>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f023 0203 	bic.w	r2, r3, #3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	4934      	ldr	r1, [pc, #208]	; (8003d3c <HAL_RCC_ClockConfig+0x1bc>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c70:	f7fe f8f0 	bl	8001e54 <HAL_GetTick>
 8003c74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c76:	e00a      	b.n	8003c8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c78:	f7fe f8ec 	bl	8001e54 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e04f      	b.n	8003d2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c8e:	4b2b      	ldr	r3, [pc, #172]	; (8003d3c <HAL_RCC_ClockConfig+0x1bc>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 020c 	and.w	r2, r3, #12
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d1eb      	bne.n	8003c78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ca0:	4b25      	ldr	r3, [pc, #148]	; (8003d38 <HAL_RCC_ClockConfig+0x1b8>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 030f 	and.w	r3, r3, #15
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d20c      	bcs.n	8003cc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cae:	4b22      	ldr	r3, [pc, #136]	; (8003d38 <HAL_RCC_ClockConfig+0x1b8>)
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	b2d2      	uxtb	r2, r2
 8003cb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cb6:	4b20      	ldr	r3, [pc, #128]	; (8003d38 <HAL_RCC_ClockConfig+0x1b8>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d001      	beq.n	8003cc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e032      	b.n	8003d2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0304 	and.w	r3, r3, #4
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d008      	beq.n	8003ce6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cd4:	4b19      	ldr	r3, [pc, #100]	; (8003d3c <HAL_RCC_ClockConfig+0x1bc>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	4916      	ldr	r1, [pc, #88]	; (8003d3c <HAL_RCC_ClockConfig+0x1bc>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0308 	and.w	r3, r3, #8
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d009      	beq.n	8003d06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cf2:	4b12      	ldr	r3, [pc, #72]	; (8003d3c <HAL_RCC_ClockConfig+0x1bc>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	00db      	lsls	r3, r3, #3
 8003d00:	490e      	ldr	r1, [pc, #56]	; (8003d3c <HAL_RCC_ClockConfig+0x1bc>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d06:	f000 f821 	bl	8003d4c <HAL_RCC_GetSysClockFreq>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	4b0b      	ldr	r3, [pc, #44]	; (8003d3c <HAL_RCC_ClockConfig+0x1bc>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	091b      	lsrs	r3, r3, #4
 8003d12:	f003 030f 	and.w	r3, r3, #15
 8003d16:	490a      	ldr	r1, [pc, #40]	; (8003d40 <HAL_RCC_ClockConfig+0x1c0>)
 8003d18:	5ccb      	ldrb	r3, [r1, r3]
 8003d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d1e:	4a09      	ldr	r2, [pc, #36]	; (8003d44 <HAL_RCC_ClockConfig+0x1c4>)
 8003d20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d22:	4b09      	ldr	r3, [pc, #36]	; (8003d48 <HAL_RCC_ClockConfig+0x1c8>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7fe f850 	bl	8001dcc <HAL_InitTick>

  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	40023c00 	.word	0x40023c00
 8003d3c:	40023800 	.word	0x40023800
 8003d40:	08006e54 	.word	0x08006e54
 8003d44:	20000018 	.word	0x20000018
 8003d48:	2000001c 	.word	0x2000001c

08003d4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d50:	b090      	sub	sp, #64	; 0x40
 8003d52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	637b      	str	r3, [r7, #52]	; 0x34
 8003d58:	2300      	movs	r3, #0
 8003d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003d60:	2300      	movs	r3, #0
 8003d62:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d64:	4b59      	ldr	r3, [pc, #356]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x180>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f003 030c 	and.w	r3, r3, #12
 8003d6c:	2b08      	cmp	r3, #8
 8003d6e:	d00d      	beq.n	8003d8c <HAL_RCC_GetSysClockFreq+0x40>
 8003d70:	2b08      	cmp	r3, #8
 8003d72:	f200 80a1 	bhi.w	8003eb8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d002      	beq.n	8003d80 <HAL_RCC_GetSysClockFreq+0x34>
 8003d7a:	2b04      	cmp	r3, #4
 8003d7c:	d003      	beq.n	8003d86 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d7e:	e09b      	b.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d80:	4b53      	ldr	r3, [pc, #332]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d82:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003d84:	e09b      	b.n	8003ebe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d86:	4b53      	ldr	r3, [pc, #332]	; (8003ed4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d88:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d8a:	e098      	b.n	8003ebe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d8c:	4b4f      	ldr	r3, [pc, #316]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x180>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d94:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d96:	4b4d      	ldr	r3, [pc, #308]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x180>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d028      	beq.n	8003df4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003da2:	4b4a      	ldr	r3, [pc, #296]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x180>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	099b      	lsrs	r3, r3, #6
 8003da8:	2200      	movs	r2, #0
 8003daa:	623b      	str	r3, [r7, #32]
 8003dac:	627a      	str	r2, [r7, #36]	; 0x24
 8003dae:	6a3b      	ldr	r3, [r7, #32]
 8003db0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003db4:	2100      	movs	r1, #0
 8003db6:	4b47      	ldr	r3, [pc, #284]	; (8003ed4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003db8:	fb03 f201 	mul.w	r2, r3, r1
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	fb00 f303 	mul.w	r3, r0, r3
 8003dc2:	4413      	add	r3, r2
 8003dc4:	4a43      	ldr	r2, [pc, #268]	; (8003ed4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003dc6:	fba0 1202 	umull	r1, r2, r0, r2
 8003dca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003dcc:	460a      	mov	r2, r1
 8003dce:	62ba      	str	r2, [r7, #40]	; 0x28
 8003dd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dd2:	4413      	add	r3, r2
 8003dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dd8:	2200      	movs	r2, #0
 8003dda:	61bb      	str	r3, [r7, #24]
 8003ddc:	61fa      	str	r2, [r7, #28]
 8003dde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003de2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003de6:	f7fc fa09 	bl	80001fc <__aeabi_uldivmod>
 8003dea:	4602      	mov	r2, r0
 8003dec:	460b      	mov	r3, r1
 8003dee:	4613      	mov	r3, r2
 8003df0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003df2:	e053      	b.n	8003e9c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003df4:	4b35      	ldr	r3, [pc, #212]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x180>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	099b      	lsrs	r3, r3, #6
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	613b      	str	r3, [r7, #16]
 8003dfe:	617a      	str	r2, [r7, #20]
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003e06:	f04f 0b00 	mov.w	fp, #0
 8003e0a:	4652      	mov	r2, sl
 8003e0c:	465b      	mov	r3, fp
 8003e0e:	f04f 0000 	mov.w	r0, #0
 8003e12:	f04f 0100 	mov.w	r1, #0
 8003e16:	0159      	lsls	r1, r3, #5
 8003e18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e1c:	0150      	lsls	r0, r2, #5
 8003e1e:	4602      	mov	r2, r0
 8003e20:	460b      	mov	r3, r1
 8003e22:	ebb2 080a 	subs.w	r8, r2, sl
 8003e26:	eb63 090b 	sbc.w	r9, r3, fp
 8003e2a:	f04f 0200 	mov.w	r2, #0
 8003e2e:	f04f 0300 	mov.w	r3, #0
 8003e32:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003e36:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003e3a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003e3e:	ebb2 0408 	subs.w	r4, r2, r8
 8003e42:	eb63 0509 	sbc.w	r5, r3, r9
 8003e46:	f04f 0200 	mov.w	r2, #0
 8003e4a:	f04f 0300 	mov.w	r3, #0
 8003e4e:	00eb      	lsls	r3, r5, #3
 8003e50:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e54:	00e2      	lsls	r2, r4, #3
 8003e56:	4614      	mov	r4, r2
 8003e58:	461d      	mov	r5, r3
 8003e5a:	eb14 030a 	adds.w	r3, r4, sl
 8003e5e:	603b      	str	r3, [r7, #0]
 8003e60:	eb45 030b 	adc.w	r3, r5, fp
 8003e64:	607b      	str	r3, [r7, #4]
 8003e66:	f04f 0200 	mov.w	r2, #0
 8003e6a:	f04f 0300 	mov.w	r3, #0
 8003e6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e72:	4629      	mov	r1, r5
 8003e74:	028b      	lsls	r3, r1, #10
 8003e76:	4621      	mov	r1, r4
 8003e78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e7c:	4621      	mov	r1, r4
 8003e7e:	028a      	lsls	r2, r1, #10
 8003e80:	4610      	mov	r0, r2
 8003e82:	4619      	mov	r1, r3
 8003e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e86:	2200      	movs	r2, #0
 8003e88:	60bb      	str	r3, [r7, #8]
 8003e8a:	60fa      	str	r2, [r7, #12]
 8003e8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e90:	f7fc f9b4 	bl	80001fc <__aeabi_uldivmod>
 8003e94:	4602      	mov	r2, r0
 8003e96:	460b      	mov	r3, r1
 8003e98:	4613      	mov	r3, r2
 8003e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e9c:	4b0b      	ldr	r3, [pc, #44]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x180>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	0c1b      	lsrs	r3, r3, #16
 8003ea2:	f003 0303 	and.w	r3, r3, #3
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003eac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003eb6:	e002      	b.n	8003ebe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003eb8:	4b05      	ldr	r3, [pc, #20]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003eba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ebc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3740      	adds	r7, #64	; 0x40
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003eca:	bf00      	nop
 8003ecc:	40023800 	.word	0x40023800
 8003ed0:	00f42400 	.word	0x00f42400
 8003ed4:	017d7840 	.word	0x017d7840

08003ed8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003edc:	4b03      	ldr	r3, [pc, #12]	; (8003eec <HAL_RCC_GetHCLKFreq+0x14>)
 8003ede:	681b      	ldr	r3, [r3, #0]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	20000018 	.word	0x20000018

08003ef0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ef4:	f7ff fff0 	bl	8003ed8 <HAL_RCC_GetHCLKFreq>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	4b05      	ldr	r3, [pc, #20]	; (8003f10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	0a9b      	lsrs	r3, r3, #10
 8003f00:	f003 0307 	and.w	r3, r3, #7
 8003f04:	4903      	ldr	r1, [pc, #12]	; (8003f14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f06:	5ccb      	ldrb	r3, [r1, r3]
 8003f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	40023800 	.word	0x40023800
 8003f14:	08006e64 	.word	0x08006e64

08003f18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f1c:	f7ff ffdc 	bl	8003ed8 <HAL_RCC_GetHCLKFreq>
 8003f20:	4602      	mov	r2, r0
 8003f22:	4b05      	ldr	r3, [pc, #20]	; (8003f38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	0b5b      	lsrs	r3, r3, #13
 8003f28:	f003 0307 	and.w	r3, r3, #7
 8003f2c:	4903      	ldr	r1, [pc, #12]	; (8003f3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f2e:	5ccb      	ldrb	r3, [r1, r3]
 8003f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40023800 	.word	0x40023800
 8003f3c:	08006e64 	.word	0x08006e64

08003f40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10b      	bne.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d105      	bne.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d075      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003f74:	4b91      	ldr	r3, [pc, #580]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f7a:	f7fd ff6b 	bl	8001e54 <HAL_GetTick>
 8003f7e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f80:	e008      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f82:	f7fd ff67 	bl	8001e54 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e189      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f94:	4b8a      	ldr	r3, [pc, #552]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1f0      	bne.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d009      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	019a      	lsls	r2, r3, #6
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	071b      	lsls	r3, r3, #28
 8003fb8:	4981      	ldr	r1, [pc, #516]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d01f      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003fcc:	4b7c      	ldr	r3, [pc, #496]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fd2:	0f1b      	lsrs	r3, r3, #28
 8003fd4:	f003 0307 	and.w	r3, r3, #7
 8003fd8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	019a      	lsls	r2, r3, #6
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	061b      	lsls	r3, r3, #24
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	071b      	lsls	r3, r3, #28
 8003fec:	4974      	ldr	r1, [pc, #464]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003ff4:	4b72      	ldr	r3, [pc, #456]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ff6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ffa:	f023 021f 	bic.w	r2, r3, #31
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	3b01      	subs	r3, #1
 8004004:	496e      	ldr	r1, [pc, #440]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004006:	4313      	orrs	r3, r2
 8004008:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00d      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	019a      	lsls	r2, r3, #6
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	061b      	lsls	r3, r3, #24
 8004024:	431a      	orrs	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	071b      	lsls	r3, r3, #28
 800402c:	4964      	ldr	r1, [pc, #400]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800402e:	4313      	orrs	r3, r2
 8004030:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004034:	4b61      	ldr	r3, [pc, #388]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004036:	2201      	movs	r2, #1
 8004038:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800403a:	f7fd ff0b 	bl	8001e54 <HAL_GetTick>
 800403e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004040:	e008      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004042:	f7fd ff07 	bl	8001e54 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d901      	bls.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e129      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004054:	4b5a      	ldr	r3, [pc, #360]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0f0      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0304 	and.w	r3, r3, #4
 8004068:	2b00      	cmp	r3, #0
 800406a:	d105      	bne.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004074:	2b00      	cmp	r3, #0
 8004076:	d079      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004078:	4b52      	ldr	r3, [pc, #328]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800407a:	2200      	movs	r2, #0
 800407c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800407e:	f7fd fee9 	bl	8001e54 <HAL_GetTick>
 8004082:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004084:	e008      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004086:	f7fd fee5 	bl	8001e54 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b02      	cmp	r3, #2
 8004092:	d901      	bls.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e107      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004098:	4b49      	ldr	r3, [pc, #292]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040a4:	d0ef      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0304 	and.w	r3, r3, #4
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d020      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80040b2:	4b43      	ldr	r3, [pc, #268]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80040b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b8:	0f1b      	lsrs	r3, r3, #28
 80040ba:	f003 0307 	and.w	r3, r3, #7
 80040be:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	019a      	lsls	r2, r3, #6
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	061b      	lsls	r3, r3, #24
 80040cc:	431a      	orrs	r2, r3
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	071b      	lsls	r3, r3, #28
 80040d2:	493b      	ldr	r1, [pc, #236]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80040da:	4b39      	ldr	r3, [pc, #228]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80040dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	3b01      	subs	r3, #1
 80040ea:	021b      	lsls	r3, r3, #8
 80040ec:	4934      	ldr	r1, [pc, #208]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0308 	and.w	r3, r3, #8
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d01e      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004100:	4b2f      	ldr	r3, [pc, #188]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004106:	0e1b      	lsrs	r3, r3, #24
 8004108:	f003 030f 	and.w	r3, r3, #15
 800410c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	019a      	lsls	r2, r3, #6
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	061b      	lsls	r3, r3, #24
 8004118:	431a      	orrs	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	071b      	lsls	r3, r3, #28
 8004120:	4927      	ldr	r1, [pc, #156]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004122:	4313      	orrs	r3, r2
 8004124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004128:	4b25      	ldr	r3, [pc, #148]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800412a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800412e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	4922      	ldr	r1, [pc, #136]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004138:	4313      	orrs	r3, r2
 800413a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800413e:	4b21      	ldr	r3, [pc, #132]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004140:	2201      	movs	r2, #1
 8004142:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004144:	f7fd fe86 	bl	8001e54 <HAL_GetTick>
 8004148:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800414a:	e008      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800414c:	f7fd fe82 	bl	8001e54 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e0a4      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800415e:	4b18      	ldr	r3, [pc, #96]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004166:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800416a:	d1ef      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0320 	and.w	r3, r3, #32
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 808b 	beq.w	8004290 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800417a:	2300      	movs	r3, #0
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	4b10      	ldr	r3, [pc, #64]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	4a0f      	ldr	r2, [pc, #60]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004188:	6413      	str	r3, [r2, #64]	; 0x40
 800418a:	4b0d      	ldr	r3, [pc, #52]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004196:	4b0c      	ldr	r3, [pc, #48]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a0b      	ldr	r2, [pc, #44]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800419c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041a0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80041a2:	f7fd fe57 	bl	8001e54 <HAL_GetTick>
 80041a6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80041a8:	e010      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80041aa:	f7fd fe53 	bl	8001e54 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d909      	bls.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e075      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80041bc:	42470068 	.word	0x42470068
 80041c0:	40023800 	.word	0x40023800
 80041c4:	42470070 	.word	0x42470070
 80041c8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80041cc:	4b38      	ldr	r3, [pc, #224]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d0e8      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041d8:	4b36      	ldr	r3, [pc, #216]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80041da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041e0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d02f      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d028      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041f6:	4b2f      	ldr	r3, [pc, #188]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80041f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041fe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004200:	4b2d      	ldr	r3, [pc, #180]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004202:	2201      	movs	r2, #1
 8004204:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004206:	4b2c      	ldr	r3, [pc, #176]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004208:	2200      	movs	r2, #0
 800420a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800420c:	4a29      	ldr	r2, [pc, #164]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004212:	4b28      	ldr	r3, [pc, #160]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b01      	cmp	r3, #1
 800421c:	d114      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800421e:	f7fd fe19 	bl	8001e54 <HAL_GetTick>
 8004222:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004224:	e00a      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004226:	f7fd fe15 	bl	8001e54 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	f241 3288 	movw	r2, #5000	; 0x1388
 8004234:	4293      	cmp	r3, r2
 8004236:	d901      	bls.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e035      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800423c:	4b1d      	ldr	r3, [pc, #116]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800423e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0ee      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004250:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004254:	d10d      	bne.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004256:	4b17      	ldr	r3, [pc, #92]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004262:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800426a:	4912      	ldr	r1, [pc, #72]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800426c:	4313      	orrs	r3, r2
 800426e:	608b      	str	r3, [r1, #8]
 8004270:	e005      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004272:	4b10      	ldr	r3, [pc, #64]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	4a0f      	ldr	r2, [pc, #60]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004278:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800427c:	6093      	str	r3, [r2, #8]
 800427e:	4b0d      	ldr	r3, [pc, #52]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004280:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004286:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800428a:	490a      	ldr	r1, [pc, #40]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800428c:	4313      	orrs	r3, r2
 800428e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0310 	and.w	r3, r3, #16
 8004298:	2b00      	cmp	r3, #0
 800429a:	d004      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80042a2:	4b06      	ldr	r3, [pc, #24]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80042a4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3718      	adds	r7, #24
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	40007000 	.word	0x40007000
 80042b4:	40023800 	.word	0x40023800
 80042b8:	42470e40 	.word	0x42470e40
 80042bc:	424711e0 	.word	0x424711e0

080042c0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e073      	b.n	80043be <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	7f5b      	ldrb	r3, [r3, #29]
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d105      	bne.n	80042ec <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7fd f9c4 	bl	8001674 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f003 0310 	and.w	r3, r3, #16
 80042fc:	2b10      	cmp	r3, #16
 80042fe:	d055      	beq.n	80043ac <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	22ca      	movs	r2, #202	; 0xca
 8004306:	625a      	str	r2, [r3, #36]	; 0x24
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2253      	movs	r2, #83	; 0x53
 800430e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 fa49 	bl	80047a8 <RTC_EnterInitMode>
 8004316:	4603      	mov	r3, r0
 8004318:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800431a:	7bfb      	ldrb	r3, [r7, #15]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d12c      	bne.n	800437a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	6812      	ldr	r2, [r2, #0]
 800432a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800432e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004332:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	6899      	ldr	r1, [r3, #8]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	431a      	orrs	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	431a      	orrs	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	68d2      	ldr	r2, [r2, #12]
 800435a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6919      	ldr	r1, [r3, #16]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	041a      	lsls	r2, r3, #16
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	430a      	orrs	r2, r1
 800436e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 fa50 	bl	8004816 <RTC_ExitInitMode>
 8004376:	4603      	mov	r3, r0
 8004378:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800437a:	7bfb      	ldrb	r3, [r7, #15]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d110      	bne.n	80043a2 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800438e:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	699a      	ldr	r2, [r3, #24]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	22ff      	movs	r2, #255	; 0xff
 80043a8:	625a      	str	r2, [r3, #36]	; 0x24
 80043aa:	e001      	b.n	80043b0 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80043ac:	2300      	movs	r3, #0
 80043ae:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80043b0:	7bfb      	ldrb	r3, [r7, #15]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d102      	bne.n	80043bc <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80043bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80043c6:	b590      	push	{r4, r7, lr}
 80043c8:	b087      	sub	sp, #28
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	60f8      	str	r0, [r7, #12]
 80043ce:	60b9      	str	r1, [r7, #8]
 80043d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80043d2:	2300      	movs	r3, #0
 80043d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	7f1b      	ldrb	r3, [r3, #28]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d101      	bne.n	80043e2 <HAL_RTC_SetTime+0x1c>
 80043de:	2302      	movs	r3, #2
 80043e0:	e087      	b.n	80044f2 <HAL_RTC_SetTime+0x12c>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2201      	movs	r2, #1
 80043e6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2202      	movs	r2, #2
 80043ec:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d126      	bne.n	8004442 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d102      	bne.n	8004408 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	2200      	movs	r2, #0
 8004406:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	4618      	mov	r0, r3
 800440e:	f000 fa27 	bl	8004860 <RTC_ByteToBcd2>
 8004412:	4603      	mov	r3, r0
 8004414:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	785b      	ldrb	r3, [r3, #1]
 800441a:	4618      	mov	r0, r3
 800441c:	f000 fa20 	bl	8004860 <RTC_ByteToBcd2>
 8004420:	4603      	mov	r3, r0
 8004422:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004424:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	789b      	ldrb	r3, [r3, #2]
 800442a:	4618      	mov	r0, r3
 800442c:	f000 fa18 	bl	8004860 <RTC_ByteToBcd2>
 8004430:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004432:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	78db      	ldrb	r3, [r3, #3]
 800443a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800443c:	4313      	orrs	r3, r2
 800443e:	617b      	str	r3, [r7, #20]
 8004440:	e018      	b.n	8004474 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444c:	2b00      	cmp	r3, #0
 800444e:	d102      	bne.n	8004456 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	2200      	movs	r2, #0
 8004454:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	785b      	ldrb	r3, [r3, #1]
 8004460:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004462:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004468:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	78db      	ldrb	r3, [r3, #3]
 800446e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004470:	4313      	orrs	r3, r2
 8004472:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	22ca      	movs	r2, #202	; 0xca
 800447a:	625a      	str	r2, [r3, #36]	; 0x24
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2253      	movs	r2, #83	; 0x53
 8004482:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f000 f98f 	bl	80047a8 <RTC_EnterInitMode>
 800448a:	4603      	mov	r3, r0
 800448c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800448e:	7cfb      	ldrb	r3, [r7, #19]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d120      	bne.n	80044d6 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800449e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80044a2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689a      	ldr	r2, [r3, #8]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80044b2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6899      	ldr	r1, [r3, #8]
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	68da      	ldr	r2, [r3, #12]
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	431a      	orrs	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	430a      	orrs	r2, r1
 80044ca:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f000 f9a2 	bl	8004816 <RTC_ExitInitMode>
 80044d2:	4603      	mov	r3, r0
 80044d4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80044d6:	7cfb      	ldrb	r3, [r7, #19]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d102      	bne.n	80044e2 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2201      	movs	r2, #1
 80044e0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	22ff      	movs	r2, #255	; 0xff
 80044e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	771a      	strb	r2, [r3, #28]

  return status;
 80044f0:	7cfb      	ldrb	r3, [r7, #19]
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	371c      	adds	r7, #28
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd90      	pop	{r4, r7, pc}

080044fa <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b086      	sub	sp, #24
 80044fe:	af00      	add	r7, sp, #0
 8004500:	60f8      	str	r0, [r7, #12]
 8004502:	60b9      	str	r1, [r7, #8]
 8004504:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004506:	2300      	movs	r3, #0
 8004508:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800452c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004530:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	0c1b      	lsrs	r3, r3, #16
 8004536:	b2db      	uxtb	r3, r3
 8004538:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800453c:	b2da      	uxtb	r2, r3
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	0a1b      	lsrs	r3, r3, #8
 8004546:	b2db      	uxtb	r3, r3
 8004548:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800454c:	b2da      	uxtb	r2, r3
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	b2db      	uxtb	r3, r3
 8004556:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800455a:	b2da      	uxtb	r2, r3
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	0d9b      	lsrs	r3, r3, #22
 8004564:	b2db      	uxtb	r3, r3
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	b2da      	uxtb	r2, r3
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d11a      	bne.n	80045ac <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	4618      	mov	r0, r3
 800457c:	f000 f98e 	bl	800489c <RTC_Bcd2ToByte>
 8004580:	4603      	mov	r3, r0
 8004582:	461a      	mov	r2, r3
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	785b      	ldrb	r3, [r3, #1]
 800458c:	4618      	mov	r0, r3
 800458e:	f000 f985 	bl	800489c <RTC_Bcd2ToByte>
 8004592:	4603      	mov	r3, r0
 8004594:	461a      	mov	r2, r3
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	789b      	ldrb	r3, [r3, #2]
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 f97c 	bl	800489c <RTC_Bcd2ToByte>
 80045a4:	4603      	mov	r3, r0
 80045a6:	461a      	mov	r2, r3
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3718      	adds	r7, #24
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80045b6:	b590      	push	{r4, r7, lr}
 80045b8:	b087      	sub	sp, #28
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	60f8      	str	r0, [r7, #12]
 80045be:	60b9      	str	r1, [r7, #8]
 80045c0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80045c2:	2300      	movs	r3, #0
 80045c4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	7f1b      	ldrb	r3, [r3, #28]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d101      	bne.n	80045d2 <HAL_RTC_SetDate+0x1c>
 80045ce:	2302      	movs	r3, #2
 80045d0:	e071      	b.n	80046b6 <HAL_RTC_SetDate+0x100>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2201      	movs	r2, #1
 80045d6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2202      	movs	r2, #2
 80045dc:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d10e      	bne.n	8004602 <HAL_RTC_SetDate+0x4c>
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	785b      	ldrb	r3, [r3, #1]
 80045e8:	f003 0310 	and.w	r3, r3, #16
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d008      	beq.n	8004602 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	785b      	ldrb	r3, [r3, #1]
 80045f4:	f023 0310 	bic.w	r3, r3, #16
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	330a      	adds	r3, #10
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d11c      	bne.n	8004642 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	78db      	ldrb	r3, [r3, #3]
 800460c:	4618      	mov	r0, r3
 800460e:	f000 f927 	bl	8004860 <RTC_ByteToBcd2>
 8004612:	4603      	mov	r3, r0
 8004614:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	785b      	ldrb	r3, [r3, #1]
 800461a:	4618      	mov	r0, r3
 800461c:	f000 f920 	bl	8004860 <RTC_ByteToBcd2>
 8004620:	4603      	mov	r3, r0
 8004622:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004624:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	789b      	ldrb	r3, [r3, #2]
 800462a:	4618      	mov	r0, r3
 800462c:	f000 f918 	bl	8004860 <RTC_ByteToBcd2>
 8004630:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004632:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800463c:	4313      	orrs	r3, r2
 800463e:	617b      	str	r3, [r7, #20]
 8004640:	e00e      	b.n	8004660 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	78db      	ldrb	r3, [r3, #3]
 8004646:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	785b      	ldrb	r3, [r3, #1]
 800464c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800464e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004654:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800465c:	4313      	orrs	r3, r2
 800465e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	22ca      	movs	r2, #202	; 0xca
 8004666:	625a      	str	r2, [r3, #36]	; 0x24
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2253      	movs	r2, #83	; 0x53
 800466e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	f000 f899 	bl	80047a8 <RTC_EnterInitMode>
 8004676:	4603      	mov	r3, r0
 8004678:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800467a:	7cfb      	ldrb	r3, [r7, #19]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d10c      	bne.n	800469a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800468a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800468e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f000 f8c0 	bl	8004816 <RTC_ExitInitMode>
 8004696:	4603      	mov	r3, r0
 8004698:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800469a:	7cfb      	ldrb	r3, [r7, #19]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d102      	bne.n	80046a6 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2201      	movs	r2, #1
 80046a4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	22ff      	movs	r2, #255	; 0xff
 80046ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	771a      	strb	r2, [r3, #28]

  return status;
 80046b4:	7cfb      	ldrb	r3, [r7, #19]
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	371c      	adds	r7, #28
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd90      	pop	{r4, r7, pc}

080046be <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b086      	sub	sp, #24
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	60f8      	str	r0, [r7, #12]
 80046c6:	60b9      	str	r1, [r7, #8]
 80046c8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80046d8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80046dc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	0c1b      	lsrs	r3, r3, #16
 80046e2:	b2da      	uxtb	r2, r3
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	0a1b      	lsrs	r3, r3, #8
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	f003 031f 	and.w	r3, r3, #31
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004700:	b2da      	uxtb	r2, r3
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	0b5b      	lsrs	r3, r3, #13
 800470a:	b2db      	uxtb	r3, r3
 800470c:	f003 0307 	and.w	r3, r3, #7
 8004710:	b2da      	uxtb	r2, r3
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d11a      	bne.n	8004752 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	78db      	ldrb	r3, [r3, #3]
 8004720:	4618      	mov	r0, r3
 8004722:	f000 f8bb 	bl	800489c <RTC_Bcd2ToByte>
 8004726:	4603      	mov	r3, r0
 8004728:	461a      	mov	r2, r3
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	785b      	ldrb	r3, [r3, #1]
 8004732:	4618      	mov	r0, r3
 8004734:	f000 f8b2 	bl	800489c <RTC_Bcd2ToByte>
 8004738:	4603      	mov	r3, r0
 800473a:	461a      	mov	r2, r3
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	789b      	ldrb	r3, [r3, #2]
 8004744:	4618      	mov	r0, r3
 8004746:	f000 f8a9 	bl	800489c <RTC_Bcd2ToByte>
 800474a:	4603      	mov	r3, r0
 800474c:	461a      	mov	r2, r3
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3718      	adds	r7, #24
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004764:	2300      	movs	r3, #0
 8004766:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a0d      	ldr	r2, [pc, #52]	; (80047a4 <HAL_RTC_WaitForSynchro+0x48>)
 800476e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004770:	f7fd fb70 	bl	8001e54 <HAL_GetTick>
 8004774:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004776:	e009      	b.n	800478c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004778:	f7fd fb6c 	bl	8001e54 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004786:	d901      	bls.n	800478c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e007      	b.n	800479c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	f003 0320 	and.w	r3, r3, #32
 8004796:	2b00      	cmp	r3, #0
 8004798:	d0ee      	beq.n	8004778 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3710      	adds	r7, #16
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	00017f5f 	.word	0x00017f5f

080047a8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047b0:	2300      	movs	r3, #0
 80047b2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80047b4:	2300      	movs	r3, #0
 80047b6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d122      	bne.n	800480c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68da      	ldr	r2, [r3, #12]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80047d4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80047d6:	f7fd fb3d 	bl	8001e54 <HAL_GetTick>
 80047da:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80047dc:	e00c      	b.n	80047f8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80047de:	f7fd fb39 	bl	8001e54 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047ec:	d904      	bls.n	80047f8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2204      	movs	r2, #4
 80047f2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004802:	2b00      	cmp	r3, #0
 8004804:	d102      	bne.n	800480c <RTC_EnterInitMode+0x64>
 8004806:	7bfb      	ldrb	r3, [r7, #15]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d1e8      	bne.n	80047de <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800480c:	7bfb      	ldrb	r3, [r7, #15]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b084      	sub	sp, #16
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800481e:	2300      	movs	r3, #0
 8004820:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68da      	ldr	r2, [r3, #12]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004830:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f003 0320 	and.w	r3, r3, #32
 800483c:	2b00      	cmp	r3, #0
 800483e:	d10a      	bne.n	8004856 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f7ff ff8b 	bl	800475c <HAL_RTC_WaitForSynchro>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d004      	beq.n	8004856 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2204      	movs	r2, #4
 8004850:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004856:	7bfb      	ldrb	r3, [r7, #15]
}
 8004858:	4618      	mov	r0, r3
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	4603      	mov	r3, r0
 8004868:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800486a:	2300      	movs	r3, #0
 800486c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800486e:	e005      	b.n	800487c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	3301      	adds	r3, #1
 8004874:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004876:	79fb      	ldrb	r3, [r7, #7]
 8004878:	3b0a      	subs	r3, #10
 800487a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800487c:	79fb      	ldrb	r3, [r7, #7]
 800487e:	2b09      	cmp	r3, #9
 8004880:	d8f6      	bhi.n	8004870 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	b2db      	uxtb	r3, r3
 8004886:	011b      	lsls	r3, r3, #4
 8004888:	b2da      	uxtb	r2, r3
 800488a:	79fb      	ldrb	r3, [r7, #7]
 800488c:	4313      	orrs	r3, r2
 800488e:	b2db      	uxtb	r3, r3
}
 8004890:	4618      	mov	r0, r3
 8004892:	3714      	adds	r7, #20
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	4603      	mov	r3, r0
 80048a4:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80048a6:	2300      	movs	r3, #0
 80048a8:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80048aa:	79fb      	ldrb	r3, [r7, #7]
 80048ac:	091b      	lsrs	r3, r3, #4
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	461a      	mov	r2, r3
 80048b2:	4613      	mov	r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	b2da      	uxtb	r2, r3
 80048c0:	79fb      	ldrb	r3, [r7, #7]
 80048c2:	f003 030f 	and.w	r3, r3, #15
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	4413      	add	r3, r2
 80048ca:	b2db      	uxtb	r3, r3
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e07b      	b.n	80049e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d108      	bne.n	8004904 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048fa:	d009      	beq.n	8004910 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	61da      	str	r2, [r3, #28]
 8004902:	e005      	b.n	8004910 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d106      	bne.n	8004930 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7fc fecc 	bl	80016c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2202      	movs	r2, #2
 8004934:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004946:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004958:	431a      	orrs	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004962:	431a      	orrs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	431a      	orrs	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	431a      	orrs	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004980:	431a      	orrs	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800498a:	431a      	orrs	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a1b      	ldr	r3, [r3, #32]
 8004990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004994:	ea42 0103 	orr.w	r1, r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	0c1b      	lsrs	r3, r3, #16
 80049ae:	f003 0104 	and.w	r1, r3, #4
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b6:	f003 0210 	and.w	r2, r3, #16
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	430a      	orrs	r2, r1
 80049c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	69da      	ldr	r2, [r3, #28]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3708      	adds	r7, #8
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b088      	sub	sp, #32
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	60f8      	str	r0, [r7, #12]
 80049f2:	60b9      	str	r1, [r7, #8]
 80049f4:	603b      	str	r3, [r7, #0]
 80049f6:	4613      	mov	r3, r2
 80049f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049fa:	2300      	movs	r3, #0
 80049fc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d101      	bne.n	8004a0c <HAL_SPI_Transmit+0x22>
 8004a08:	2302      	movs	r3, #2
 8004a0a:	e12d      	b.n	8004c68 <HAL_SPI_Transmit+0x27e>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a14:	f7fd fa1e 	bl	8001e54 <HAL_GetTick>
 8004a18:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a1a:	88fb      	ldrh	r3, [r7, #6]
 8004a1c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d002      	beq.n	8004a30 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a2a:	2302      	movs	r3, #2
 8004a2c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a2e:	e116      	b.n	8004c5e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d002      	beq.n	8004a3c <HAL_SPI_Transmit+0x52>
 8004a36:	88fb      	ldrh	r3, [r7, #6]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d102      	bne.n	8004a42 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a40:	e10d      	b.n	8004c5e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2203      	movs	r2, #3
 8004a46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	88fa      	ldrh	r2, [r7, #6]
 8004a5a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	88fa      	ldrh	r2, [r7, #6]
 8004a60:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a88:	d10f      	bne.n	8004aaa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a98:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004aa8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab4:	2b40      	cmp	r3, #64	; 0x40
 8004ab6:	d007      	beq.n	8004ac8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ac6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ad0:	d14f      	bne.n	8004b72 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d002      	beq.n	8004ae0 <HAL_SPI_Transmit+0xf6>
 8004ada:	8afb      	ldrh	r3, [r7, #22]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d142      	bne.n	8004b66 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae4:	881a      	ldrh	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af0:	1c9a      	adds	r2, r3, #2
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	3b01      	subs	r3, #1
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b04:	e02f      	b.n	8004b66 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f003 0302 	and.w	r3, r3, #2
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d112      	bne.n	8004b3a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b18:	881a      	ldrh	r2, [r3, #0]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b24:	1c9a      	adds	r2, r3, #2
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	3b01      	subs	r3, #1
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b38:	e015      	b.n	8004b66 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b3a:	f7fd f98b 	bl	8001e54 <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d803      	bhi.n	8004b52 <HAL_SPI_Transmit+0x168>
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b50:	d102      	bne.n	8004b58 <HAL_SPI_Transmit+0x16e>
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d106      	bne.n	8004b66 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004b64:	e07b      	b.n	8004c5e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1ca      	bne.n	8004b06 <HAL_SPI_Transmit+0x11c>
 8004b70:	e050      	b.n	8004c14 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d002      	beq.n	8004b80 <HAL_SPI_Transmit+0x196>
 8004b7a:	8afb      	ldrh	r3, [r7, #22]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d144      	bne.n	8004c0a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	330c      	adds	r3, #12
 8004b8a:	7812      	ldrb	r2, [r2, #0]
 8004b8c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b92:	1c5a      	adds	r2, r3, #1
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004ba6:	e030      	b.n	8004c0a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d113      	bne.n	8004bde <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	330c      	adds	r3, #12
 8004bc0:	7812      	ldrb	r2, [r2, #0]
 8004bc2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc8:	1c5a      	adds	r2, r3, #1
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	86da      	strh	r2, [r3, #54]	; 0x36
 8004bdc:	e015      	b.n	8004c0a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bde:	f7fd f939 	bl	8001e54 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d803      	bhi.n	8004bf6 <HAL_SPI_Transmit+0x20c>
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bf4:	d102      	bne.n	8004bfc <HAL_SPI_Transmit+0x212>
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d106      	bne.n	8004c0a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004c08:	e029      	b.n	8004c5e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1c9      	bne.n	8004ba8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c14:	69ba      	ldr	r2, [r7, #24]
 8004c16:	6839      	ldr	r1, [r7, #0]
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f000 fbdf 	bl	80053dc <SPI_EndRxTxTransaction>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d002      	beq.n	8004c2a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2220      	movs	r2, #32
 8004c28:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10a      	bne.n	8004c48 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c32:	2300      	movs	r3, #0
 8004c34:	613b      	str	r3, [r7, #16]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	613b      	str	r3, [r7, #16]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	613b      	str	r3, [r7, #16]
 8004c46:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d002      	beq.n	8004c56 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	77fb      	strb	r3, [r7, #31]
 8004c54:	e003      	b.n	8004c5e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c66:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3720      	adds	r7, #32
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b088      	sub	sp, #32
 8004c74:	af02      	add	r7, sp, #8
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	603b      	str	r3, [r7, #0]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c80:	2300      	movs	r3, #0
 8004c82:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d002      	beq.n	8004c96 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004c90:	2302      	movs	r3, #2
 8004c92:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c94:	e0fb      	b.n	8004e8e <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c9e:	d112      	bne.n	8004cc6 <HAL_SPI_Receive+0x56>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10e      	bne.n	8004cc6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2204      	movs	r2, #4
 8004cac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004cb0:	88fa      	ldrh	r2, [r7, #6]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	68b9      	ldr	r1, [r7, #8]
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f000 f8ef 	bl	8004ea0 <HAL_SPI_TransmitReceive>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	e0e8      	b.n	8004e98 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d101      	bne.n	8004cd4 <HAL_SPI_Receive+0x64>
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	e0e1      	b.n	8004e98 <HAL_SPI_Receive+0x228>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cdc:	f7fd f8ba 	bl	8001e54 <HAL_GetTick>
 8004ce0:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d002      	beq.n	8004cee <HAL_SPI_Receive+0x7e>
 8004ce8:	88fb      	ldrh	r3, [r7, #6]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d102      	bne.n	8004cf4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004cf2:	e0cc      	b.n	8004e8e <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2204      	movs	r2, #4
 8004cf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	68ba      	ldr	r2, [r7, #8]
 8004d06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	88fa      	ldrh	r2, [r7, #6]
 8004d0c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	88fa      	ldrh	r2, [r7, #6]
 8004d12:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d3a:	d10f      	bne.n	8004d5c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d4a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d5a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d66:	2b40      	cmp	r3, #64	; 0x40
 8004d68:	d007      	beq.n	8004d7a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d78:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d16a      	bne.n	8004e58 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004d82:	e032      	b.n	8004dea <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d115      	bne.n	8004dbe <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f103 020c 	add.w	r2, r3, #12
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9e:	7812      	ldrb	r2, [r2, #0]
 8004da0:	b2d2      	uxtb	r2, r2
 8004da2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da8:	1c5a      	adds	r2, r3, #1
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	3b01      	subs	r3, #1
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004dbc:	e015      	b.n	8004dea <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dbe:	f7fd f849 	bl	8001e54 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d803      	bhi.n	8004dd6 <HAL_SPI_Receive+0x166>
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dd4:	d102      	bne.n	8004ddc <HAL_SPI_Receive+0x16c>
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d106      	bne.n	8004dea <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004de8:	e051      	b.n	8004e8e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1c7      	bne.n	8004d84 <HAL_SPI_Receive+0x114>
 8004df4:	e035      	b.n	8004e62 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f003 0301 	and.w	r3, r3, #1
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d113      	bne.n	8004e2c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68da      	ldr	r2, [r3, #12]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0e:	b292      	uxth	r2, r2
 8004e10:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e16:	1c9a      	adds	r2, r3, #2
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	3b01      	subs	r3, #1
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e2a:	e015      	b.n	8004e58 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e2c:	f7fd f812 	bl	8001e54 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	683a      	ldr	r2, [r7, #0]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d803      	bhi.n	8004e44 <HAL_SPI_Receive+0x1d4>
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e42:	d102      	bne.n	8004e4a <HAL_SPI_Receive+0x1da>
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d106      	bne.n	8004e58 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004e56:	e01a      	b.n	8004e8e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1c9      	bne.n	8004df6 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	6839      	ldr	r1, [r7, #0]
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f000 fa52 	bl	8005310 <SPI_EndRxTransaction>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d002      	beq.n	8004e78 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2220      	movs	r2, #32
 8004e76:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d002      	beq.n	8004e86 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	75fb      	strb	r3, [r7, #23]
 8004e84:	e003      	b.n	8004e8e <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3718      	adds	r7, #24
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b08c      	sub	sp, #48	; 0x30
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
 8004eac:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d101      	bne.n	8004ec6 <HAL_SPI_TransmitReceive+0x26>
 8004ec2:	2302      	movs	r3, #2
 8004ec4:	e198      	b.n	80051f8 <HAL_SPI_TransmitReceive+0x358>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ece:	f7fc ffc1 	bl	8001e54 <HAL_GetTick>
 8004ed2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004ee4:	887b      	ldrh	r3, [r7, #2]
 8004ee6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ee8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d00f      	beq.n	8004f10 <HAL_SPI_TransmitReceive+0x70>
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ef6:	d107      	bne.n	8004f08 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d103      	bne.n	8004f08 <HAL_SPI_TransmitReceive+0x68>
 8004f00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f04:	2b04      	cmp	r3, #4
 8004f06:	d003      	beq.n	8004f10 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004f08:	2302      	movs	r3, #2
 8004f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004f0e:	e16d      	b.n	80051ec <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d005      	beq.n	8004f22 <HAL_SPI_TransmitReceive+0x82>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d002      	beq.n	8004f22 <HAL_SPI_TransmitReceive+0x82>
 8004f1c:	887b      	ldrh	r3, [r7, #2]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d103      	bne.n	8004f2a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004f28:	e160      	b.n	80051ec <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b04      	cmp	r3, #4
 8004f34:	d003      	beq.n	8004f3e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2205      	movs	r2, #5
 8004f3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	887a      	ldrh	r2, [r7, #2]
 8004f4e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	887a      	ldrh	r2, [r7, #2]
 8004f54:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	887a      	ldrh	r2, [r7, #2]
 8004f60:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	887a      	ldrh	r2, [r7, #2]
 8004f66:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f7e:	2b40      	cmp	r3, #64	; 0x40
 8004f80:	d007      	beq.n	8004f92 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f9a:	d17c      	bne.n	8005096 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d002      	beq.n	8004faa <HAL_SPI_TransmitReceive+0x10a>
 8004fa4:	8b7b      	ldrh	r3, [r7, #26]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d16a      	bne.n	8005080 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fae:	881a      	ldrh	r2, [r3, #0]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fba:	1c9a      	adds	r2, r3, #2
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fce:	e057      	b.n	8005080 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d11b      	bne.n	8005016 <HAL_SPI_TransmitReceive+0x176>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d016      	beq.n	8005016 <HAL_SPI_TransmitReceive+0x176>
 8004fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d113      	bne.n	8005016 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff2:	881a      	ldrh	r2, [r3, #0]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffe:	1c9a      	adds	r2, r3, #2
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005008:	b29b      	uxth	r3, r3
 800500a:	3b01      	subs	r3, #1
 800500c:	b29a      	uxth	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005012:	2300      	movs	r3, #0
 8005014:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	2b01      	cmp	r3, #1
 8005022:	d119      	bne.n	8005058 <HAL_SPI_TransmitReceive+0x1b8>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005028:	b29b      	uxth	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d014      	beq.n	8005058 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68da      	ldr	r2, [r3, #12]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005038:	b292      	uxth	r2, r2
 800503a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005040:	1c9a      	adds	r2, r3, #2
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800504a:	b29b      	uxth	r3, r3
 800504c:	3b01      	subs	r3, #1
 800504e:	b29a      	uxth	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005054:	2301      	movs	r3, #1
 8005056:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005058:	f7fc fefc 	bl	8001e54 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005064:	429a      	cmp	r2, r3
 8005066:	d80b      	bhi.n	8005080 <HAL_SPI_TransmitReceive+0x1e0>
 8005068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800506a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800506e:	d007      	beq.n	8005080 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800507e:	e0b5      	b.n	80051ec <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005084:	b29b      	uxth	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1a2      	bne.n	8004fd0 <HAL_SPI_TransmitReceive+0x130>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800508e:	b29b      	uxth	r3, r3
 8005090:	2b00      	cmp	r3, #0
 8005092:	d19d      	bne.n	8004fd0 <HAL_SPI_TransmitReceive+0x130>
 8005094:	e080      	b.n	8005198 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d002      	beq.n	80050a4 <HAL_SPI_TransmitReceive+0x204>
 800509e:	8b7b      	ldrh	r3, [r7, #26]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d16f      	bne.n	8005184 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	330c      	adds	r3, #12
 80050ae:	7812      	ldrb	r2, [r2, #0]
 80050b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b6:	1c5a      	adds	r2, r3, #1
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	3b01      	subs	r3, #1
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050ca:	e05b      	b.n	8005184 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d11c      	bne.n	8005114 <HAL_SPI_TransmitReceive+0x274>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050de:	b29b      	uxth	r3, r3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d017      	beq.n	8005114 <HAL_SPI_TransmitReceive+0x274>
 80050e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d114      	bne.n	8005114 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	330c      	adds	r3, #12
 80050f4:	7812      	ldrb	r2, [r2, #0]
 80050f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fc:	1c5a      	adds	r2, r3, #1
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005106:	b29b      	uxth	r3, r3
 8005108:	3b01      	subs	r3, #1
 800510a:	b29a      	uxth	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005110:	2300      	movs	r3, #0
 8005112:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b01      	cmp	r3, #1
 8005120:	d119      	bne.n	8005156 <HAL_SPI_TransmitReceive+0x2b6>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005126:	b29b      	uxth	r3, r3
 8005128:	2b00      	cmp	r3, #0
 800512a:	d014      	beq.n	8005156 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68da      	ldr	r2, [r3, #12]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005136:	b2d2      	uxtb	r2, r2
 8005138:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513e:	1c5a      	adds	r2, r3, #1
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005148:	b29b      	uxth	r3, r3
 800514a:	3b01      	subs	r3, #1
 800514c:	b29a      	uxth	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005152:	2301      	movs	r3, #1
 8005154:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005156:	f7fc fe7d 	bl	8001e54 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005162:	429a      	cmp	r2, r3
 8005164:	d803      	bhi.n	800516e <HAL_SPI_TransmitReceive+0x2ce>
 8005166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005168:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800516c:	d102      	bne.n	8005174 <HAL_SPI_TransmitReceive+0x2d4>
 800516e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005170:	2b00      	cmp	r3, #0
 8005172:	d107      	bne.n	8005184 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005182:	e033      	b.n	80051ec <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005188:	b29b      	uxth	r3, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d19e      	bne.n	80050cc <HAL_SPI_TransmitReceive+0x22c>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005192:	b29b      	uxth	r3, r3
 8005194:	2b00      	cmp	r3, #0
 8005196:	d199      	bne.n	80050cc <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800519a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f000 f91d 	bl	80053dc <SPI_EndRxTxTransaction>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d006      	beq.n	80051b6 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2220      	movs	r2, #32
 80051b2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80051b4:	e01a      	b.n	80051ec <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10a      	bne.n	80051d4 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051be:	2300      	movs	r3, #0
 80051c0:	617b      	str	r3, [r7, #20]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	617b      	str	r3, [r7, #20]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	617b      	str	r3, [r7, #20]
 80051d2:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d003      	beq.n	80051e4 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051e2:	e003      	b.n	80051ec <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80051f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3730      	adds	r7, #48	; 0x30
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b088      	sub	sp, #32
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	603b      	str	r3, [r7, #0]
 800520c:	4613      	mov	r3, r2
 800520e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005210:	f7fc fe20 	bl	8001e54 <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005218:	1a9b      	subs	r3, r3, r2
 800521a:	683a      	ldr	r2, [r7, #0]
 800521c:	4413      	add	r3, r2
 800521e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005220:	f7fc fe18 	bl	8001e54 <HAL_GetTick>
 8005224:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005226:	4b39      	ldr	r3, [pc, #228]	; (800530c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	015b      	lsls	r3, r3, #5
 800522c:	0d1b      	lsrs	r3, r3, #20
 800522e:	69fa      	ldr	r2, [r7, #28]
 8005230:	fb02 f303 	mul.w	r3, r2, r3
 8005234:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005236:	e054      	b.n	80052e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800523e:	d050      	beq.n	80052e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005240:	f7fc fe08 	bl	8001e54 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	69fa      	ldr	r2, [r7, #28]
 800524c:	429a      	cmp	r2, r3
 800524e:	d902      	bls.n	8005256 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d13d      	bne.n	80052d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005264:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800526e:	d111      	bne.n	8005294 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005278:	d004      	beq.n	8005284 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005282:	d107      	bne.n	8005294 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005292:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005298:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800529c:	d10f      	bne.n	80052be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052ac:	601a      	str	r2, [r3, #0]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e017      	b.n	8005302 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d101      	bne.n	80052dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80052d8:	2300      	movs	r3, #0
 80052da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	3b01      	subs	r3, #1
 80052e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	4013      	ands	r3, r2
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	bf0c      	ite	eq
 80052f2:	2301      	moveq	r3, #1
 80052f4:	2300      	movne	r3, #0
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	461a      	mov	r2, r3
 80052fa:	79fb      	ldrb	r3, [r7, #7]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d19b      	bne.n	8005238 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3720      	adds	r7, #32
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	20000018 	.word	0x20000018

08005310 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af02      	add	r7, sp, #8
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005324:	d111      	bne.n	800534a <SPI_EndRxTransaction+0x3a>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800532e:	d004      	beq.n	800533a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005338:	d107      	bne.n	800534a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005348:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005352:	d12a      	bne.n	80053aa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800535c:	d012      	beq.n	8005384 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	2200      	movs	r2, #0
 8005366:	2180      	movs	r1, #128	; 0x80
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f7ff ff49 	bl	8005200 <SPI_WaitFlagStateUntilTimeout>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d02d      	beq.n	80053d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005378:	f043 0220 	orr.w	r2, r3, #32
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e026      	b.n	80053d2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	9300      	str	r3, [sp, #0]
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2200      	movs	r2, #0
 800538c:	2101      	movs	r1, #1
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f7ff ff36 	bl	8005200 <SPI_WaitFlagStateUntilTimeout>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d01a      	beq.n	80053d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800539e:	f043 0220 	orr.w	r2, r3, #32
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e013      	b.n	80053d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	9300      	str	r3, [sp, #0]
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	2200      	movs	r2, #0
 80053b2:	2101      	movs	r1, #1
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f7ff ff23 	bl	8005200 <SPI_WaitFlagStateUntilTimeout>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d007      	beq.n	80053d0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c4:	f043 0220 	orr.w	r2, r3, #32
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e000      	b.n	80053d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
	...

080053dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b088      	sub	sp, #32
 80053e0:	af02      	add	r7, sp, #8
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	9300      	str	r3, [sp, #0]
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	2201      	movs	r2, #1
 80053f0:	2102      	movs	r1, #2
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f7ff ff04 	bl	8005200 <SPI_WaitFlagStateUntilTimeout>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d007      	beq.n	800540e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005402:	f043 0220 	orr.w	r2, r3, #32
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e032      	b.n	8005474 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800540e:	4b1b      	ldr	r3, [pc, #108]	; (800547c <SPI_EndRxTxTransaction+0xa0>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a1b      	ldr	r2, [pc, #108]	; (8005480 <SPI_EndRxTxTransaction+0xa4>)
 8005414:	fba2 2303 	umull	r2, r3, r2, r3
 8005418:	0d5b      	lsrs	r3, r3, #21
 800541a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800541e:	fb02 f303 	mul.w	r3, r2, r3
 8005422:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800542c:	d112      	bne.n	8005454 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	2200      	movs	r2, #0
 8005436:	2180      	movs	r1, #128	; 0x80
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f7ff fee1 	bl	8005200 <SPI_WaitFlagStateUntilTimeout>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d016      	beq.n	8005472 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005448:	f043 0220 	orr.w	r2, r3, #32
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e00f      	b.n	8005474 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00a      	beq.n	8005470 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	3b01      	subs	r3, #1
 800545e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800546a:	2b80      	cmp	r3, #128	; 0x80
 800546c:	d0f2      	beq.n	8005454 <SPI_EndRxTxTransaction+0x78>
 800546e:	e000      	b.n	8005472 <SPI_EndRxTxTransaction+0x96>
        break;
 8005470:	bf00      	nop
  }

  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3718      	adds	r7, #24
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	20000018 	.word	0x20000018
 8005480:	165e9f81 	.word	0x165e9f81

08005484 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e041      	b.n	800551a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d106      	bne.n	80054b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7fc f954 	bl	8001758 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2202      	movs	r2, #2
 80054b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	3304      	adds	r3, #4
 80054c0:	4619      	mov	r1, r3
 80054c2:	4610      	mov	r0, r2
 80054c4:	f000 f9f0 	bl	80058a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3708      	adds	r7, #8
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
	...

08005524 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005532:	b2db      	uxtb	r3, r3
 8005534:	2b01      	cmp	r3, #1
 8005536:	d001      	beq.n	800553c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e04e      	b.n	80055da <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2202      	movs	r2, #2
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68da      	ldr	r2, [r3, #12]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f042 0201 	orr.w	r2, r2, #1
 8005552:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a23      	ldr	r2, [pc, #140]	; (80055e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d022      	beq.n	80055a4 <HAL_TIM_Base_Start_IT+0x80>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005566:	d01d      	beq.n	80055a4 <HAL_TIM_Base_Start_IT+0x80>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a1f      	ldr	r2, [pc, #124]	; (80055ec <HAL_TIM_Base_Start_IT+0xc8>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d018      	beq.n	80055a4 <HAL_TIM_Base_Start_IT+0x80>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a1e      	ldr	r2, [pc, #120]	; (80055f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d013      	beq.n	80055a4 <HAL_TIM_Base_Start_IT+0x80>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a1c      	ldr	r2, [pc, #112]	; (80055f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d00e      	beq.n	80055a4 <HAL_TIM_Base_Start_IT+0x80>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a1b      	ldr	r2, [pc, #108]	; (80055f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d009      	beq.n	80055a4 <HAL_TIM_Base_Start_IT+0x80>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a19      	ldr	r2, [pc, #100]	; (80055fc <HAL_TIM_Base_Start_IT+0xd8>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d004      	beq.n	80055a4 <HAL_TIM_Base_Start_IT+0x80>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a18      	ldr	r2, [pc, #96]	; (8005600 <HAL_TIM_Base_Start_IT+0xdc>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d111      	bne.n	80055c8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f003 0307 	and.w	r3, r3, #7
 80055ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2b06      	cmp	r3, #6
 80055b4:	d010      	beq.n	80055d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f042 0201 	orr.w	r2, r2, #1
 80055c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055c6:	e007      	b.n	80055d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f042 0201 	orr.w	r2, r2, #1
 80055d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	40010000 	.word	0x40010000
 80055ec:	40000400 	.word	0x40000400
 80055f0:	40000800 	.word	0x40000800
 80055f4:	40000c00 	.word	0x40000c00
 80055f8:	40010400 	.word	0x40010400
 80055fc:	40014000 	.word	0x40014000
 8005600:	40001800 	.word	0x40001800

08005604 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68da      	ldr	r2, [r3, #12]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f022 0201 	bic.w	r2, r2, #1
 800561a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6a1a      	ldr	r2, [r3, #32]
 8005622:	f241 1311 	movw	r3, #4369	; 0x1111
 8005626:	4013      	ands	r3, r2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d10f      	bne.n	800564c <HAL_TIM_Base_Stop_IT+0x48>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6a1a      	ldr	r2, [r3, #32]
 8005632:	f240 4344 	movw	r3, #1092	; 0x444
 8005636:	4013      	ands	r3, r2
 8005638:	2b00      	cmp	r3, #0
 800563a:	d107      	bne.n	800564c <HAL_TIM_Base_Stop_IT+0x48>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f022 0201 	bic.w	r2, r2, #1
 800564a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	370c      	adds	r7, #12
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr

08005662 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b084      	sub	sp, #16
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	f003 0302 	and.w	r3, r3, #2
 8005680:	2b00      	cmp	r3, #0
 8005682:	d020      	beq.n	80056c6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d01b      	beq.n	80056c6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f06f 0202 	mvn.w	r2, #2
 8005696:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	f003 0303 	and.w	r3, r3, #3
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d003      	beq.n	80056b4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 f8dc 	bl	800586a <HAL_TIM_IC_CaptureCallback>
 80056b2:	e005      	b.n	80056c0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 f8ce 	bl	8005856 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f8df 	bl	800587e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	f003 0304 	and.w	r3, r3, #4
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d020      	beq.n	8005712 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f003 0304 	and.w	r3, r3, #4
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d01b      	beq.n	8005712 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f06f 0204 	mvn.w	r2, #4
 80056e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2202      	movs	r2, #2
 80056e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d003      	beq.n	8005700 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 f8b6 	bl	800586a <HAL_TIM_IC_CaptureCallback>
 80056fe:	e005      	b.n	800570c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 f8a8 	bl	8005856 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f8b9 	bl	800587e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	f003 0308 	and.w	r3, r3, #8
 8005718:	2b00      	cmp	r3, #0
 800571a:	d020      	beq.n	800575e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f003 0308 	and.w	r3, r3, #8
 8005722:	2b00      	cmp	r3, #0
 8005724:	d01b      	beq.n	800575e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f06f 0208 	mvn.w	r2, #8
 800572e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2204      	movs	r2, #4
 8005734:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	69db      	ldr	r3, [r3, #28]
 800573c:	f003 0303 	and.w	r3, r3, #3
 8005740:	2b00      	cmp	r3, #0
 8005742:	d003      	beq.n	800574c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 f890 	bl	800586a <HAL_TIM_IC_CaptureCallback>
 800574a:	e005      	b.n	8005758 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 f882 	bl	8005856 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f893 	bl	800587e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	f003 0310 	and.w	r3, r3, #16
 8005764:	2b00      	cmp	r3, #0
 8005766:	d020      	beq.n	80057aa <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f003 0310 	and.w	r3, r3, #16
 800576e:	2b00      	cmp	r3, #0
 8005770:	d01b      	beq.n	80057aa <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f06f 0210 	mvn.w	r2, #16
 800577a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2208      	movs	r2, #8
 8005780:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	69db      	ldr	r3, [r3, #28]
 8005788:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800578c:	2b00      	cmp	r3, #0
 800578e:	d003      	beq.n	8005798 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 f86a 	bl	800586a <HAL_TIM_IC_CaptureCallback>
 8005796:	e005      	b.n	80057a4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 f85c 	bl	8005856 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f86d 	bl	800587e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	f003 0301 	and.w	r3, r3, #1
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00c      	beq.n	80057ce <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d007      	beq.n	80057ce <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f06f 0201 	mvn.w	r2, #1
 80057c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 f83a 	bl	8005842 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00c      	beq.n	80057f2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d007      	beq.n	80057f2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 f98d 	bl	8005b0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d00c      	beq.n	8005816 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005802:	2b00      	cmp	r3, #0
 8005804:	d007      	beq.n	8005816 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800580e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 f83e 	bl	8005892 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	f003 0320 	and.w	r3, r3, #32
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00c      	beq.n	800583a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f003 0320 	and.w	r3, r3, #32
 8005826:	2b00      	cmp	r3, #0
 8005828:	d007      	beq.n	800583a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f06f 0220 	mvn.w	r2, #32
 8005832:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 f95f 	bl	8005af8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800583a:	bf00      	nop
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005842:	b480      	push	{r7}
 8005844:	b083      	sub	sp, #12
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800584a:	bf00      	nop
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005856:	b480      	push	{r7}
 8005858:	b083      	sub	sp, #12
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800585e:	bf00      	nop
 8005860:	370c      	adds	r7, #12
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr

0800586a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800586a:	b480      	push	{r7}
 800586c:	b083      	sub	sp, #12
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005872:	bf00      	nop
 8005874:	370c      	adds	r7, #12
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800587e:	b480      	push	{r7}
 8005880:	b083      	sub	sp, #12
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005886:	bf00      	nop
 8005888:	370c      	adds	r7, #12
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr

08005892 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005892:	b480      	push	{r7}
 8005894:	b083      	sub	sp, #12
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800589a:	bf00      	nop
 800589c:	370c      	adds	r7, #12
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
	...

080058a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a46      	ldr	r2, [pc, #280]	; (80059d4 <TIM_Base_SetConfig+0x12c>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d013      	beq.n	80058e8 <TIM_Base_SetConfig+0x40>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058c6:	d00f      	beq.n	80058e8 <TIM_Base_SetConfig+0x40>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a43      	ldr	r2, [pc, #268]	; (80059d8 <TIM_Base_SetConfig+0x130>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d00b      	beq.n	80058e8 <TIM_Base_SetConfig+0x40>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a42      	ldr	r2, [pc, #264]	; (80059dc <TIM_Base_SetConfig+0x134>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d007      	beq.n	80058e8 <TIM_Base_SetConfig+0x40>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a41      	ldr	r2, [pc, #260]	; (80059e0 <TIM_Base_SetConfig+0x138>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d003      	beq.n	80058e8 <TIM_Base_SetConfig+0x40>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a40      	ldr	r2, [pc, #256]	; (80059e4 <TIM_Base_SetConfig+0x13c>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d108      	bne.n	80058fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a35      	ldr	r2, [pc, #212]	; (80059d4 <TIM_Base_SetConfig+0x12c>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d02b      	beq.n	800595a <TIM_Base_SetConfig+0xb2>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005908:	d027      	beq.n	800595a <TIM_Base_SetConfig+0xb2>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a32      	ldr	r2, [pc, #200]	; (80059d8 <TIM_Base_SetConfig+0x130>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d023      	beq.n	800595a <TIM_Base_SetConfig+0xb2>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a31      	ldr	r2, [pc, #196]	; (80059dc <TIM_Base_SetConfig+0x134>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d01f      	beq.n	800595a <TIM_Base_SetConfig+0xb2>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a30      	ldr	r2, [pc, #192]	; (80059e0 <TIM_Base_SetConfig+0x138>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d01b      	beq.n	800595a <TIM_Base_SetConfig+0xb2>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a2f      	ldr	r2, [pc, #188]	; (80059e4 <TIM_Base_SetConfig+0x13c>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d017      	beq.n	800595a <TIM_Base_SetConfig+0xb2>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a2e      	ldr	r2, [pc, #184]	; (80059e8 <TIM_Base_SetConfig+0x140>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d013      	beq.n	800595a <TIM_Base_SetConfig+0xb2>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a2d      	ldr	r2, [pc, #180]	; (80059ec <TIM_Base_SetConfig+0x144>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d00f      	beq.n	800595a <TIM_Base_SetConfig+0xb2>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a2c      	ldr	r2, [pc, #176]	; (80059f0 <TIM_Base_SetConfig+0x148>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d00b      	beq.n	800595a <TIM_Base_SetConfig+0xb2>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a2b      	ldr	r2, [pc, #172]	; (80059f4 <TIM_Base_SetConfig+0x14c>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d007      	beq.n	800595a <TIM_Base_SetConfig+0xb2>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a2a      	ldr	r2, [pc, #168]	; (80059f8 <TIM_Base_SetConfig+0x150>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d003      	beq.n	800595a <TIM_Base_SetConfig+0xb2>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a29      	ldr	r2, [pc, #164]	; (80059fc <TIM_Base_SetConfig+0x154>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d108      	bne.n	800596c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005960:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	4313      	orrs	r3, r2
 800596a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	4313      	orrs	r3, r2
 8005978:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	689a      	ldr	r2, [r3, #8]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a10      	ldr	r2, [pc, #64]	; (80059d4 <TIM_Base_SetConfig+0x12c>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d003      	beq.n	80059a0 <TIM_Base_SetConfig+0xf8>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a12      	ldr	r2, [pc, #72]	; (80059e4 <TIM_Base_SetConfig+0x13c>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d103      	bne.n	80059a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	691a      	ldr	r2, [r3, #16]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d105      	bne.n	80059c6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	f023 0201 	bic.w	r2, r3, #1
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	611a      	str	r2, [r3, #16]
  }
}
 80059c6:	bf00      	nop
 80059c8:	3714      	adds	r7, #20
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	40010000 	.word	0x40010000
 80059d8:	40000400 	.word	0x40000400
 80059dc:	40000800 	.word	0x40000800
 80059e0:	40000c00 	.word	0x40000c00
 80059e4:	40010400 	.word	0x40010400
 80059e8:	40014000 	.word	0x40014000
 80059ec:	40014400 	.word	0x40014400
 80059f0:	40014800 	.word	0x40014800
 80059f4:	40001800 	.word	0x40001800
 80059f8:	40001c00 	.word	0x40001c00
 80059fc:	40002000 	.word	0x40002000

08005a00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b085      	sub	sp, #20
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d101      	bne.n	8005a18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a14:	2302      	movs	r3, #2
 8005a16:	e05a      	b.n	8005ace <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2202      	movs	r2, #2
 8005a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a21      	ldr	r2, [pc, #132]	; (8005adc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d022      	beq.n	8005aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a64:	d01d      	beq.n	8005aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a1d      	ldr	r2, [pc, #116]	; (8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d018      	beq.n	8005aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a1b      	ldr	r2, [pc, #108]	; (8005ae4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d013      	beq.n	8005aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a1a      	ldr	r2, [pc, #104]	; (8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d00e      	beq.n	8005aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a18      	ldr	r2, [pc, #96]	; (8005aec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d009      	beq.n	8005aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a17      	ldr	r2, [pc, #92]	; (8005af0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d004      	beq.n	8005aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a15      	ldr	r2, [pc, #84]	; (8005af4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d10c      	bne.n	8005abc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005aa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3714      	adds	r7, #20
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	40010000 	.word	0x40010000
 8005ae0:	40000400 	.word	0x40000400
 8005ae4:	40000800 	.word	0x40000800
 8005ae8:	40000c00 	.word	0x40000c00
 8005aec:	40010400 	.word	0x40010400
 8005af0:	40014000 	.word	0x40014000
 8005af4:	40001800 	.word	0x40001800

08005af8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d101      	bne.n	8005b32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e042      	b.n	8005bb8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d106      	bne.n	8005b4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f7fb fe2e 	bl	80017a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2224      	movs	r2, #36	; 0x24
 8005b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68da      	ldr	r2, [r3, #12]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 fe91 	bl	800688c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	691a      	ldr	r2, [r3, #16]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	695a      	ldr	r2, [r3, #20]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68da      	ldr	r2, [r3, #12]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2220      	movs	r2, #32
 8005bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3708      	adds	r7, #8
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b08a      	sub	sp, #40	; 0x28
 8005bc4:	af02      	add	r7, sp, #8
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	603b      	str	r3, [r7, #0]
 8005bcc:	4613      	mov	r3, r2
 8005bce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	2b20      	cmp	r3, #32
 8005bde:	d175      	bne.n	8005ccc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d002      	beq.n	8005bec <HAL_UART_Transmit+0x2c>
 8005be6:	88fb      	ldrh	r3, [r7, #6]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d101      	bne.n	8005bf0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e06e      	b.n	8005cce <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2221      	movs	r2, #33	; 0x21
 8005bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bfe:	f7fc f929 	bl	8001e54 <HAL_GetTick>
 8005c02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	88fa      	ldrh	r2, [r7, #6]
 8005c08:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	88fa      	ldrh	r2, [r7, #6]
 8005c0e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c18:	d108      	bne.n	8005c2c <HAL_UART_Transmit+0x6c>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d104      	bne.n	8005c2c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005c22:	2300      	movs	r3, #0
 8005c24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	61bb      	str	r3, [r7, #24]
 8005c2a:	e003      	b.n	8005c34 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c30:	2300      	movs	r3, #0
 8005c32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c34:	e02e      	b.n	8005c94 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	9300      	str	r3, [sp, #0]
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	2180      	movs	r1, #128	; 0x80
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f000 fbdb 	bl	80063fc <UART_WaitOnFlagUntilTimeout>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d005      	beq.n	8005c58 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2220      	movs	r2, #32
 8005c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e03a      	b.n	8005cce <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d10b      	bne.n	8005c76 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	881b      	ldrh	r3, [r3, #0]
 8005c62:	461a      	mov	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	3302      	adds	r3, #2
 8005c72:	61bb      	str	r3, [r7, #24]
 8005c74:	e007      	b.n	8005c86 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	781a      	ldrb	r2, [r3, #0]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	3301      	adds	r3, #1
 8005c84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1cb      	bne.n	8005c36 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	9300      	str	r3, [sp, #0]
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	2140      	movs	r1, #64	; 0x40
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f000 fba7 	bl	80063fc <UART_WaitOnFlagUntilTimeout>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d005      	beq.n	8005cc0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2220      	movs	r2, #32
 8005cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e006      	b.n	8005cce <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	e000      	b.n	8005cce <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005ccc:	2302      	movs	r3, #2
  }
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3720      	adds	r7, #32
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b084      	sub	sp, #16
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	60f8      	str	r0, [r7, #12]
 8005cde:	60b9      	str	r1, [r7, #8]
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	2b20      	cmp	r3, #32
 8005cee:	d112      	bne.n	8005d16 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d002      	beq.n	8005cfc <HAL_UART_Receive_IT+0x26>
 8005cf6:	88fb      	ldrh	r3, [r7, #6]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d101      	bne.n	8005d00 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e00b      	b.n	8005d18 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005d06:	88fb      	ldrh	r3, [r7, #6]
 8005d08:	461a      	mov	r2, r3
 8005d0a:	68b9      	ldr	r1, [r7, #8]
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f000 fbce 	bl	80064ae <UART_Start_Receive_IT>
 8005d12:	4603      	mov	r3, r0
 8005d14:	e000      	b.n	8005d18 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005d16:	2302      	movs	r3, #2
  }
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3710      	adds	r7, #16
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b09a      	sub	sp, #104	; 0x68
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	330c      	adds	r3, #12
 8005d2e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d32:	e853 3f00 	ldrex	r3, [r3]
 8005d36:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005d38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d3e:	667b      	str	r3, [r7, #100]	; 0x64
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	330c      	adds	r3, #12
 8005d46:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005d48:	657a      	str	r2, [r7, #84]	; 0x54
 8005d4a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005d4e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005d50:	e841 2300 	strex	r3, r2, [r1]
 8005d54:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005d56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1e5      	bne.n	8005d28 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	3314      	adds	r3, #20
 8005d62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d66:	e853 3f00 	ldrex	r3, [r3]
 8005d6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6e:	f023 0301 	bic.w	r3, r3, #1
 8005d72:	663b      	str	r3, [r7, #96]	; 0x60
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	3314      	adds	r3, #20
 8005d7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005d7c:	643a      	str	r2, [r7, #64]	; 0x40
 8005d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d84:	e841 2300 	strex	r3, r2, [r1]
 8005d88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d1e5      	bne.n	8005d5c <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d119      	bne.n	8005dcc <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	330c      	adds	r3, #12
 8005d9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da0:	6a3b      	ldr	r3, [r7, #32]
 8005da2:	e853 3f00 	ldrex	r3, [r3]
 8005da6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	f023 0310 	bic.w	r3, r3, #16
 8005dae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	330c      	adds	r3, #12
 8005db6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005db8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005dba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005dbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dc0:	e841 2300 	strex	r3, r2, [r1]
 8005dc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1e5      	bne.n	8005d98 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd6:	2b40      	cmp	r3, #64	; 0x40
 8005dd8:	d13f      	bne.n	8005e5a <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	3314      	adds	r3, #20
 8005de0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	e853 3f00 	ldrex	r3, [r3]
 8005de8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005df0:	65bb      	str	r3, [r7, #88]	; 0x58
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	3314      	adds	r3, #20
 8005df8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005dfa:	61ba      	str	r2, [r7, #24]
 8005dfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfe:	6979      	ldr	r1, [r7, #20]
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	e841 2300 	strex	r3, r2, [r1]
 8005e06:	613b      	str	r3, [r7, #16]
   return(result);
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1e5      	bne.n	8005dda <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d013      	beq.n	8005e3e <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e1a:	4a19      	ldr	r2, [pc, #100]	; (8005e80 <HAL_UART_AbortReceive_IT+0x160>)
 8005e1c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7fc f9a3 	bl	800216e <HAL_DMA_Abort_IT>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d022      	beq.n	8005e74 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005e38:	4610      	mov	r0, r2
 8005e3a:	4798      	blx	r3
 8005e3c:	e01a      	b.n	8005e74 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2220      	movs	r2, #32
 8005e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 fabc 	bl	80063d0 <HAL_UART_AbortReceiveCpltCallback>
 8005e58:	e00c      	b.n	8005e74 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2220      	movs	r2, #32
 8005e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 faae 	bl	80063d0 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3768      	adds	r7, #104	; 0x68
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	08006611 	.word	0x08006611

08005e84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b0ba      	sub	sp, #232	; 0xe8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eba:	f003 030f 	and.w	r3, r3, #15
 8005ebe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005ec2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10f      	bne.n	8005eea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ece:	f003 0320 	and.w	r3, r3, #32
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d009      	beq.n	8005eea <HAL_UART_IRQHandler+0x66>
 8005ed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eda:	f003 0320 	and.w	r3, r3, #32
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d003      	beq.n	8005eea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 fc14 	bl	8006710 <UART_Receive_IT>
      return;
 8005ee8:	e25b      	b.n	80063a2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005eea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f000 80de 	beq.w	80060b0 <HAL_UART_IRQHandler+0x22c>
 8005ef4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ef8:	f003 0301 	and.w	r3, r3, #1
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d106      	bne.n	8005f0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f04:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f000 80d1 	beq.w	80060b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00b      	beq.n	8005f32 <HAL_UART_IRQHandler+0xae>
 8005f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d005      	beq.n	8005f32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f2a:	f043 0201 	orr.w	r2, r3, #1
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f36:	f003 0304 	and.w	r3, r3, #4
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00b      	beq.n	8005f56 <HAL_UART_IRQHandler+0xd2>
 8005f3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d005      	beq.n	8005f56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f4e:	f043 0202 	orr.w	r2, r3, #2
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00b      	beq.n	8005f7a <HAL_UART_IRQHandler+0xf6>
 8005f62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f66:	f003 0301 	and.w	r3, r3, #1
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d005      	beq.n	8005f7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f72:	f043 0204 	orr.w	r2, r3, #4
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f7e:	f003 0308 	and.w	r3, r3, #8
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d011      	beq.n	8005faa <HAL_UART_IRQHandler+0x126>
 8005f86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f8a:	f003 0320 	and.w	r3, r3, #32
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d105      	bne.n	8005f9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f96:	f003 0301 	and.w	r3, r3, #1
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d005      	beq.n	8005faa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa2:	f043 0208 	orr.w	r2, r3, #8
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	f000 81f2 	beq.w	8006398 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fb8:	f003 0320 	and.w	r3, r3, #32
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d008      	beq.n	8005fd2 <HAL_UART_IRQHandler+0x14e>
 8005fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fc4:	f003 0320 	and.w	r3, r3, #32
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d002      	beq.n	8005fd2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 fb9f 	bl	8006710 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	695b      	ldr	r3, [r3, #20]
 8005fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fdc:	2b40      	cmp	r3, #64	; 0x40
 8005fde:	bf0c      	ite	eq
 8005fe0:	2301      	moveq	r3, #1
 8005fe2:	2300      	movne	r3, #0
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fee:	f003 0308 	and.w	r3, r3, #8
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d103      	bne.n	8005ffe <HAL_UART_IRQHandler+0x17a>
 8005ff6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d04f      	beq.n	800609e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 fa8f 	bl	8006522 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800600e:	2b40      	cmp	r3, #64	; 0x40
 8006010:	d141      	bne.n	8006096 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	3314      	adds	r3, #20
 8006018:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006020:	e853 3f00 	ldrex	r3, [r3]
 8006024:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006028:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800602c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006030:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	3314      	adds	r3, #20
 800603a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800603e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006042:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006046:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800604a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800604e:	e841 2300 	strex	r3, r2, [r1]
 8006052:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006056:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1d9      	bne.n	8006012 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006062:	2b00      	cmp	r3, #0
 8006064:	d013      	beq.n	800608e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800606a:	4a7e      	ldr	r2, [pc, #504]	; (8006264 <HAL_UART_IRQHandler+0x3e0>)
 800606c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006072:	4618      	mov	r0, r3
 8006074:	f7fc f87b 	bl	800216e <HAL_DMA_Abort_IT>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d016      	beq.n	80060ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006088:	4610      	mov	r0, r2
 800608a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800608c:	e00e      	b.n	80060ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f994 	bl	80063bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006094:	e00a      	b.n	80060ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f990 	bl	80063bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800609c:	e006      	b.n	80060ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 f98c 	bl	80063bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80060aa:	e175      	b.n	8006398 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060ac:	bf00      	nop
    return;
 80060ae:	e173      	b.n	8006398 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	f040 814f 	bne.w	8006358 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80060ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060be:	f003 0310 	and.w	r3, r3, #16
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f000 8148 	beq.w	8006358 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80060c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060cc:	f003 0310 	and.w	r3, r3, #16
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f000 8141 	beq.w	8006358 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060d6:	2300      	movs	r3, #0
 80060d8:	60bb      	str	r3, [r7, #8]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	60bb      	str	r3, [r7, #8]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	60bb      	str	r3, [r7, #8]
 80060ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f6:	2b40      	cmp	r3, #64	; 0x40
 80060f8:	f040 80b6 	bne.w	8006268 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006108:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800610c:	2b00      	cmp	r3, #0
 800610e:	f000 8145 	beq.w	800639c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006116:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800611a:	429a      	cmp	r2, r3
 800611c:	f080 813e 	bcs.w	800639c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006126:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800612c:	69db      	ldr	r3, [r3, #28]
 800612e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006132:	f000 8088 	beq.w	8006246 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	330c      	adds	r3, #12
 800613c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006140:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006144:	e853 3f00 	ldrex	r3, [r3]
 8006148:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800614c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006150:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006154:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	330c      	adds	r3, #12
 800615e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006162:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006166:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800616e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006172:	e841 2300 	strex	r3, r2, [r1]
 8006176:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800617a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1d9      	bne.n	8006136 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	3314      	adds	r3, #20
 8006188:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800618c:	e853 3f00 	ldrex	r3, [r3]
 8006190:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006192:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006194:	f023 0301 	bic.w	r3, r3, #1
 8006198:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	3314      	adds	r3, #20
 80061a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80061a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80061aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80061ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80061b2:	e841 2300 	strex	r3, r2, [r1]
 80061b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80061b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1e1      	bne.n	8006182 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	3314      	adds	r3, #20
 80061c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061c8:	e853 3f00 	ldrex	r3, [r3]
 80061cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80061ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	3314      	adds	r3, #20
 80061de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80061e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80061e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80061e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80061ea:	e841 2300 	strex	r3, r2, [r1]
 80061ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80061f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d1e3      	bne.n	80061be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2220      	movs	r2, #32
 80061fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	330c      	adds	r3, #12
 800620a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800620e:	e853 3f00 	ldrex	r3, [r3]
 8006212:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006214:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006216:	f023 0310 	bic.w	r3, r3, #16
 800621a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	330c      	adds	r3, #12
 8006224:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006228:	65ba      	str	r2, [r7, #88]	; 0x58
 800622a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800622e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006230:	e841 2300 	strex	r3, r2, [r1]
 8006234:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006236:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1e3      	bne.n	8006204 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006240:	4618      	mov	r0, r3
 8006242:	f7fb ff24 	bl	800208e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2202      	movs	r2, #2
 800624a:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006254:	b29b      	uxth	r3, r3
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	b29b      	uxth	r3, r3
 800625a:	4619      	mov	r1, r3
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 f8c1 	bl	80063e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006262:	e09b      	b.n	800639c <HAL_UART_IRQHandler+0x518>
 8006264:	080065e9 	.word	0x080065e9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006270:	b29b      	uxth	r3, r3
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800627c:	b29b      	uxth	r3, r3
 800627e:	2b00      	cmp	r3, #0
 8006280:	f000 808e 	beq.w	80063a0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006284:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006288:	2b00      	cmp	r3, #0
 800628a:	f000 8089 	beq.w	80063a0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	330c      	adds	r3, #12
 8006294:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006298:	e853 3f00 	ldrex	r3, [r3]
 800629c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800629e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	330c      	adds	r3, #12
 80062ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80062b2:	647a      	str	r2, [r7, #68]	; 0x44
 80062b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062ba:	e841 2300 	strex	r3, r2, [r1]
 80062be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1e3      	bne.n	800628e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	3314      	adds	r3, #20
 80062cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d0:	e853 3f00 	ldrex	r3, [r3]
 80062d4:	623b      	str	r3, [r7, #32]
   return(result);
 80062d6:	6a3b      	ldr	r3, [r7, #32]
 80062d8:	f023 0301 	bic.w	r3, r3, #1
 80062dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	3314      	adds	r3, #20
 80062e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80062ea:	633a      	str	r2, [r7, #48]	; 0x30
 80062ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062f2:	e841 2300 	strex	r3, r2, [r1]
 80062f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d1e3      	bne.n	80062c6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2220      	movs	r2, #32
 8006302:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	330c      	adds	r3, #12
 8006312:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	e853 3f00 	ldrex	r3, [r3]
 800631a:	60fb      	str	r3, [r7, #12]
   return(result);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f023 0310 	bic.w	r3, r3, #16
 8006322:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	330c      	adds	r3, #12
 800632c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006330:	61fa      	str	r2, [r7, #28]
 8006332:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006334:	69b9      	ldr	r1, [r7, #24]
 8006336:	69fa      	ldr	r2, [r7, #28]
 8006338:	e841 2300 	strex	r3, r2, [r1]
 800633c:	617b      	str	r3, [r7, #20]
   return(result);
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1e3      	bne.n	800630c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2202      	movs	r2, #2
 8006348:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800634a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800634e:	4619      	mov	r1, r3
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 f847 	bl	80063e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006356:	e023      	b.n	80063a0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800635c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006360:	2b00      	cmp	r3, #0
 8006362:	d009      	beq.n	8006378 <HAL_UART_IRQHandler+0x4f4>
 8006364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800636c:	2b00      	cmp	r3, #0
 800636e:	d003      	beq.n	8006378 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 f965 	bl	8006640 <UART_Transmit_IT>
    return;
 8006376:	e014      	b.n	80063a2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800637c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00e      	beq.n	80063a2 <HAL_UART_IRQHandler+0x51e>
 8006384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800638c:	2b00      	cmp	r3, #0
 800638e:	d008      	beq.n	80063a2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 f9a5 	bl	80066e0 <UART_EndTransmit_IT>
    return;
 8006396:	e004      	b.n	80063a2 <HAL_UART_IRQHandler+0x51e>
    return;
 8006398:	bf00      	nop
 800639a:	e002      	b.n	80063a2 <HAL_UART_IRQHandler+0x51e>
      return;
 800639c:	bf00      	nop
 800639e:	e000      	b.n	80063a2 <HAL_UART_IRQHandler+0x51e>
      return;
 80063a0:	bf00      	nop
  }
}
 80063a2:	37e8      	adds	r7, #232	; 0xe8
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80063b0:	bf00      	nop
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80063c4:	bf00      	nop
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80063d8:	bf00      	nop
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	460b      	mov	r3, r1
 80063ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80063f0:	bf00      	nop
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	603b      	str	r3, [r7, #0]
 8006408:	4613      	mov	r3, r2
 800640a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800640c:	e03b      	b.n	8006486 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800640e:	6a3b      	ldr	r3, [r7, #32]
 8006410:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006414:	d037      	beq.n	8006486 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006416:	f7fb fd1d 	bl	8001e54 <HAL_GetTick>
 800641a:	4602      	mov	r2, r0
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	6a3a      	ldr	r2, [r7, #32]
 8006422:	429a      	cmp	r2, r3
 8006424:	d302      	bcc.n	800642c <UART_WaitOnFlagUntilTimeout+0x30>
 8006426:	6a3b      	ldr	r3, [r7, #32]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d101      	bne.n	8006430 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e03a      	b.n	80064a6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	f003 0304 	and.w	r3, r3, #4
 800643a:	2b00      	cmp	r3, #0
 800643c:	d023      	beq.n	8006486 <UART_WaitOnFlagUntilTimeout+0x8a>
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	2b80      	cmp	r3, #128	; 0x80
 8006442:	d020      	beq.n	8006486 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	2b40      	cmp	r3, #64	; 0x40
 8006448:	d01d      	beq.n	8006486 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0308 	and.w	r3, r3, #8
 8006454:	2b08      	cmp	r3, #8
 8006456:	d116      	bne.n	8006486 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006458:	2300      	movs	r3, #0
 800645a:	617b      	str	r3, [r7, #20]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	617b      	str	r3, [r7, #20]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	617b      	str	r3, [r7, #20]
 800646c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	f000 f857 	bl	8006522 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2208      	movs	r2, #8
 8006478:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e00f      	b.n	80064a6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	4013      	ands	r3, r2
 8006490:	68ba      	ldr	r2, [r7, #8]
 8006492:	429a      	cmp	r2, r3
 8006494:	bf0c      	ite	eq
 8006496:	2301      	moveq	r3, #1
 8006498:	2300      	movne	r3, #0
 800649a:	b2db      	uxtb	r3, r3
 800649c:	461a      	mov	r2, r3
 800649e:	79fb      	ldrb	r3, [r7, #7]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d0b4      	beq.n	800640e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3718      	adds	r7, #24
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b085      	sub	sp, #20
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	60f8      	str	r0, [r7, #12]
 80064b6:	60b9      	str	r1, [r7, #8]
 80064b8:	4613      	mov	r3, r2
 80064ba:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	68ba      	ldr	r2, [r7, #8]
 80064c0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	88fa      	ldrh	r2, [r7, #6]
 80064c6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	88fa      	ldrh	r2, [r7, #6]
 80064cc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2222      	movs	r2, #34	; 0x22
 80064d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d007      	beq.n	80064f4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68da      	ldr	r2, [r3, #12]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064f2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	695a      	ldr	r2, [r3, #20]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f042 0201 	orr.w	r2, r2, #1
 8006502:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68da      	ldr	r2, [r3, #12]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f042 0220 	orr.w	r2, r2, #32
 8006512:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3714      	adds	r7, #20
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr

08006522 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006522:	b480      	push	{r7}
 8006524:	b095      	sub	sp, #84	; 0x54
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	330c      	adds	r3, #12
 8006530:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006534:	e853 3f00 	ldrex	r3, [r3]
 8006538:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800653a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006540:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	330c      	adds	r3, #12
 8006548:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800654a:	643a      	str	r2, [r7, #64]	; 0x40
 800654c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006550:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006552:	e841 2300 	strex	r3, r2, [r1]
 8006556:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1e5      	bne.n	800652a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	3314      	adds	r3, #20
 8006564:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006566:	6a3b      	ldr	r3, [r7, #32]
 8006568:	e853 3f00 	ldrex	r3, [r3]
 800656c:	61fb      	str	r3, [r7, #28]
   return(result);
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	f023 0301 	bic.w	r3, r3, #1
 8006574:	64bb      	str	r3, [r7, #72]	; 0x48
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	3314      	adds	r3, #20
 800657c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800657e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006580:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006582:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006584:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006586:	e841 2300 	strex	r3, r2, [r1]
 800658a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800658c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1e5      	bne.n	800655e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006596:	2b01      	cmp	r3, #1
 8006598:	d119      	bne.n	80065ce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	330c      	adds	r3, #12
 80065a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	e853 3f00 	ldrex	r3, [r3]
 80065a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	f023 0310 	bic.w	r3, r3, #16
 80065b0:	647b      	str	r3, [r7, #68]	; 0x44
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	330c      	adds	r3, #12
 80065b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065ba:	61ba      	str	r2, [r7, #24]
 80065bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065be:	6979      	ldr	r1, [r7, #20]
 80065c0:	69ba      	ldr	r2, [r7, #24]
 80065c2:	e841 2300 	strex	r3, r2, [r1]
 80065c6:	613b      	str	r3, [r7, #16]
   return(result);
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1e5      	bne.n	800659a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2220      	movs	r2, #32
 80065d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	631a      	str	r2, [r3, #48]	; 0x30
}
 80065dc:	bf00      	nop
 80065de:	3754      	adds	r7, #84	; 0x54
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2200      	movs	r2, #0
 80065fa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2200      	movs	r2, #0
 8006600:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006602:	68f8      	ldr	r0, [r7, #12]
 8006604:	f7ff feda 	bl	80063bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006608:	bf00      	nop
 800660a:	3710      	adds	r7, #16
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661c:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2220      	movs	r2, #32
 8006628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f7ff fecc 	bl	80063d0 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006638:	bf00      	nop
 800663a:	3710      	adds	r7, #16
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800664e:	b2db      	uxtb	r3, r3
 8006650:	2b21      	cmp	r3, #33	; 0x21
 8006652:	d13e      	bne.n	80066d2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800665c:	d114      	bne.n	8006688 <UART_Transmit_IT+0x48>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d110      	bne.n	8006688 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a1b      	ldr	r3, [r3, #32]
 800666a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	881b      	ldrh	r3, [r3, #0]
 8006670:	461a      	mov	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800667a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a1b      	ldr	r3, [r3, #32]
 8006680:	1c9a      	adds	r2, r3, #2
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	621a      	str	r2, [r3, #32]
 8006686:	e008      	b.n	800669a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a1b      	ldr	r3, [r3, #32]
 800668c:	1c59      	adds	r1, r3, #1
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	6211      	str	r1, [r2, #32]
 8006692:	781a      	ldrb	r2, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800669e:	b29b      	uxth	r3, r3
 80066a0:	3b01      	subs	r3, #1
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	4619      	mov	r1, r3
 80066a8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d10f      	bne.n	80066ce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68da      	ldr	r2, [r3, #12]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68da      	ldr	r2, [r3, #12]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80066ce:	2300      	movs	r3, #0
 80066d0:	e000      	b.n	80066d4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80066d2:	2302      	movs	r3, #2
  }
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3714      	adds	r7, #20
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68da      	ldr	r2, [r3, #12]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066f6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2220      	movs	r2, #32
 80066fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f7ff fe51 	bl	80063a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3708      	adds	r7, #8
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b08c      	sub	sp, #48	; 0x30
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800671e:	b2db      	uxtb	r3, r3
 8006720:	2b22      	cmp	r3, #34	; 0x22
 8006722:	f040 80ae 	bne.w	8006882 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800672e:	d117      	bne.n	8006760 <UART_Receive_IT+0x50>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d113      	bne.n	8006760 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006738:	2300      	movs	r3, #0
 800673a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006740:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	b29b      	uxth	r3, r3
 800674a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800674e:	b29a      	uxth	r2, r3
 8006750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006752:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006758:	1c9a      	adds	r2, r3, #2
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	629a      	str	r2, [r3, #40]	; 0x28
 800675e:	e026      	b.n	80067ae <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006764:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006766:	2300      	movs	r3, #0
 8006768:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006772:	d007      	beq.n	8006784 <UART_Receive_IT+0x74>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d10a      	bne.n	8006792 <UART_Receive_IT+0x82>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d106      	bne.n	8006792 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	b2da      	uxtb	r2, r3
 800678c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678e:	701a      	strb	r2, [r3, #0]
 8006790:	e008      	b.n	80067a4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	b2db      	uxtb	r3, r3
 800679a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800679e:	b2da      	uxtb	r2, r3
 80067a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a8:	1c5a      	adds	r2, r3, #1
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	3b01      	subs	r3, #1
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	4619      	mov	r1, r3
 80067bc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d15d      	bne.n	800687e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68da      	ldr	r2, [r3, #12]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f022 0220 	bic.w	r2, r2, #32
 80067d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68da      	ldr	r2, [r3, #12]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	695a      	ldr	r2, [r3, #20]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f022 0201 	bic.w	r2, r2, #1
 80067f0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2220      	movs	r2, #32
 80067f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006804:	2b01      	cmp	r3, #1
 8006806:	d135      	bne.n	8006874 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	330c      	adds	r3, #12
 8006814:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	e853 3f00 	ldrex	r3, [r3]
 800681c:	613b      	str	r3, [r7, #16]
   return(result);
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	f023 0310 	bic.w	r3, r3, #16
 8006824:	627b      	str	r3, [r7, #36]	; 0x24
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	330c      	adds	r3, #12
 800682c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800682e:	623a      	str	r2, [r7, #32]
 8006830:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006832:	69f9      	ldr	r1, [r7, #28]
 8006834:	6a3a      	ldr	r2, [r7, #32]
 8006836:	e841 2300 	strex	r3, r2, [r1]
 800683a:	61bb      	str	r3, [r7, #24]
   return(result);
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1e5      	bne.n	800680e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0310 	and.w	r3, r3, #16
 800684c:	2b10      	cmp	r3, #16
 800684e:	d10a      	bne.n	8006866 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006850:	2300      	movs	r3, #0
 8006852:	60fb      	str	r3, [r7, #12]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	60fb      	str	r3, [r7, #12]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	60fb      	str	r3, [r7, #12]
 8006864:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800686a:	4619      	mov	r1, r3
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f7ff fdb9 	bl	80063e4 <HAL_UARTEx_RxEventCallback>
 8006872:	e002      	b.n	800687a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f7fb f8cd 	bl	8001a14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800687a:	2300      	movs	r3, #0
 800687c:	e002      	b.n	8006884 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800687e:	2300      	movs	r3, #0
 8006880:	e000      	b.n	8006884 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006882:	2302      	movs	r3, #2
  }
}
 8006884:	4618      	mov	r0, r3
 8006886:	3730      	adds	r7, #48	; 0x30
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800688c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006890:	b0c0      	sub	sp, #256	; 0x100
 8006892:	af00      	add	r7, sp, #0
 8006894:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80068a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068a8:	68d9      	ldr	r1, [r3, #12]
 80068aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	ea40 0301 	orr.w	r3, r0, r1
 80068b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80068b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ba:	689a      	ldr	r2, [r3, #8]
 80068bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	431a      	orrs	r2, r3
 80068c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	431a      	orrs	r2, r3
 80068cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068d0:	69db      	ldr	r3, [r3, #28]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80068d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80068e4:	f021 010c 	bic.w	r1, r1, #12
 80068e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80068f2:	430b      	orrs	r3, r1
 80068f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80068f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006906:	6999      	ldr	r1, [r3, #24]
 8006908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	ea40 0301 	orr.w	r3, r0, r1
 8006912:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	4b8f      	ldr	r3, [pc, #572]	; (8006b58 <UART_SetConfig+0x2cc>)
 800691c:	429a      	cmp	r2, r3
 800691e:	d005      	beq.n	800692c <UART_SetConfig+0xa0>
 8006920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	4b8d      	ldr	r3, [pc, #564]	; (8006b5c <UART_SetConfig+0x2d0>)
 8006928:	429a      	cmp	r2, r3
 800692a:	d104      	bne.n	8006936 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800692c:	f7fd faf4 	bl	8003f18 <HAL_RCC_GetPCLK2Freq>
 8006930:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006934:	e003      	b.n	800693e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006936:	f7fd fadb 	bl	8003ef0 <HAL_RCC_GetPCLK1Freq>
 800693a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800693e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006942:	69db      	ldr	r3, [r3, #28]
 8006944:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006948:	f040 810c 	bne.w	8006b64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800694c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006950:	2200      	movs	r2, #0
 8006952:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006956:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800695a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800695e:	4622      	mov	r2, r4
 8006960:	462b      	mov	r3, r5
 8006962:	1891      	adds	r1, r2, r2
 8006964:	65b9      	str	r1, [r7, #88]	; 0x58
 8006966:	415b      	adcs	r3, r3
 8006968:	65fb      	str	r3, [r7, #92]	; 0x5c
 800696a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800696e:	4621      	mov	r1, r4
 8006970:	eb12 0801 	adds.w	r8, r2, r1
 8006974:	4629      	mov	r1, r5
 8006976:	eb43 0901 	adc.w	r9, r3, r1
 800697a:	f04f 0200 	mov.w	r2, #0
 800697e:	f04f 0300 	mov.w	r3, #0
 8006982:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006986:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800698a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800698e:	4690      	mov	r8, r2
 8006990:	4699      	mov	r9, r3
 8006992:	4623      	mov	r3, r4
 8006994:	eb18 0303 	adds.w	r3, r8, r3
 8006998:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800699c:	462b      	mov	r3, r5
 800699e:	eb49 0303 	adc.w	r3, r9, r3
 80069a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80069b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80069b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80069ba:	460b      	mov	r3, r1
 80069bc:	18db      	adds	r3, r3, r3
 80069be:	653b      	str	r3, [r7, #80]	; 0x50
 80069c0:	4613      	mov	r3, r2
 80069c2:	eb42 0303 	adc.w	r3, r2, r3
 80069c6:	657b      	str	r3, [r7, #84]	; 0x54
 80069c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80069cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80069d0:	f7f9 fc14 	bl	80001fc <__aeabi_uldivmod>
 80069d4:	4602      	mov	r2, r0
 80069d6:	460b      	mov	r3, r1
 80069d8:	4b61      	ldr	r3, [pc, #388]	; (8006b60 <UART_SetConfig+0x2d4>)
 80069da:	fba3 2302 	umull	r2, r3, r3, r2
 80069de:	095b      	lsrs	r3, r3, #5
 80069e0:	011c      	lsls	r4, r3, #4
 80069e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069e6:	2200      	movs	r2, #0
 80069e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80069ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80069f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80069f4:	4642      	mov	r2, r8
 80069f6:	464b      	mov	r3, r9
 80069f8:	1891      	adds	r1, r2, r2
 80069fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80069fc:	415b      	adcs	r3, r3
 80069fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006a04:	4641      	mov	r1, r8
 8006a06:	eb12 0a01 	adds.w	sl, r2, r1
 8006a0a:	4649      	mov	r1, r9
 8006a0c:	eb43 0b01 	adc.w	fp, r3, r1
 8006a10:	f04f 0200 	mov.w	r2, #0
 8006a14:	f04f 0300 	mov.w	r3, #0
 8006a18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006a1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006a20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a24:	4692      	mov	sl, r2
 8006a26:	469b      	mov	fp, r3
 8006a28:	4643      	mov	r3, r8
 8006a2a:	eb1a 0303 	adds.w	r3, sl, r3
 8006a2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a32:	464b      	mov	r3, r9
 8006a34:	eb4b 0303 	adc.w	r3, fp, r3
 8006a38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a48:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006a4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006a50:	460b      	mov	r3, r1
 8006a52:	18db      	adds	r3, r3, r3
 8006a54:	643b      	str	r3, [r7, #64]	; 0x40
 8006a56:	4613      	mov	r3, r2
 8006a58:	eb42 0303 	adc.w	r3, r2, r3
 8006a5c:	647b      	str	r3, [r7, #68]	; 0x44
 8006a5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006a62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006a66:	f7f9 fbc9 	bl	80001fc <__aeabi_uldivmod>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	4611      	mov	r1, r2
 8006a70:	4b3b      	ldr	r3, [pc, #236]	; (8006b60 <UART_SetConfig+0x2d4>)
 8006a72:	fba3 2301 	umull	r2, r3, r3, r1
 8006a76:	095b      	lsrs	r3, r3, #5
 8006a78:	2264      	movs	r2, #100	; 0x64
 8006a7a:	fb02 f303 	mul.w	r3, r2, r3
 8006a7e:	1acb      	subs	r3, r1, r3
 8006a80:	00db      	lsls	r3, r3, #3
 8006a82:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006a86:	4b36      	ldr	r3, [pc, #216]	; (8006b60 <UART_SetConfig+0x2d4>)
 8006a88:	fba3 2302 	umull	r2, r3, r3, r2
 8006a8c:	095b      	lsrs	r3, r3, #5
 8006a8e:	005b      	lsls	r3, r3, #1
 8006a90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a94:	441c      	add	r4, r3
 8006a96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006aa0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006aa4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006aa8:	4642      	mov	r2, r8
 8006aaa:	464b      	mov	r3, r9
 8006aac:	1891      	adds	r1, r2, r2
 8006aae:	63b9      	str	r1, [r7, #56]	; 0x38
 8006ab0:	415b      	adcs	r3, r3
 8006ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ab4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006ab8:	4641      	mov	r1, r8
 8006aba:	1851      	adds	r1, r2, r1
 8006abc:	6339      	str	r1, [r7, #48]	; 0x30
 8006abe:	4649      	mov	r1, r9
 8006ac0:	414b      	adcs	r3, r1
 8006ac2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ac4:	f04f 0200 	mov.w	r2, #0
 8006ac8:	f04f 0300 	mov.w	r3, #0
 8006acc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006ad0:	4659      	mov	r1, fp
 8006ad2:	00cb      	lsls	r3, r1, #3
 8006ad4:	4651      	mov	r1, sl
 8006ad6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ada:	4651      	mov	r1, sl
 8006adc:	00ca      	lsls	r2, r1, #3
 8006ade:	4610      	mov	r0, r2
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	4642      	mov	r2, r8
 8006ae6:	189b      	adds	r3, r3, r2
 8006ae8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006aec:	464b      	mov	r3, r9
 8006aee:	460a      	mov	r2, r1
 8006af0:	eb42 0303 	adc.w	r3, r2, r3
 8006af4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006b04:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006b08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	18db      	adds	r3, r3, r3
 8006b10:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b12:	4613      	mov	r3, r2
 8006b14:	eb42 0303 	adc.w	r3, r2, r3
 8006b18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006b22:	f7f9 fb6b 	bl	80001fc <__aeabi_uldivmod>
 8006b26:	4602      	mov	r2, r0
 8006b28:	460b      	mov	r3, r1
 8006b2a:	4b0d      	ldr	r3, [pc, #52]	; (8006b60 <UART_SetConfig+0x2d4>)
 8006b2c:	fba3 1302 	umull	r1, r3, r3, r2
 8006b30:	095b      	lsrs	r3, r3, #5
 8006b32:	2164      	movs	r1, #100	; 0x64
 8006b34:	fb01 f303 	mul.w	r3, r1, r3
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	00db      	lsls	r3, r3, #3
 8006b3c:	3332      	adds	r3, #50	; 0x32
 8006b3e:	4a08      	ldr	r2, [pc, #32]	; (8006b60 <UART_SetConfig+0x2d4>)
 8006b40:	fba2 2303 	umull	r2, r3, r2, r3
 8006b44:	095b      	lsrs	r3, r3, #5
 8006b46:	f003 0207 	and.w	r2, r3, #7
 8006b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4422      	add	r2, r4
 8006b52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006b54:	e106      	b.n	8006d64 <UART_SetConfig+0x4d8>
 8006b56:	bf00      	nop
 8006b58:	40011000 	.word	0x40011000
 8006b5c:	40011400 	.word	0x40011400
 8006b60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006b6e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006b72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006b76:	4642      	mov	r2, r8
 8006b78:	464b      	mov	r3, r9
 8006b7a:	1891      	adds	r1, r2, r2
 8006b7c:	6239      	str	r1, [r7, #32]
 8006b7e:	415b      	adcs	r3, r3
 8006b80:	627b      	str	r3, [r7, #36]	; 0x24
 8006b82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006b86:	4641      	mov	r1, r8
 8006b88:	1854      	adds	r4, r2, r1
 8006b8a:	4649      	mov	r1, r9
 8006b8c:	eb43 0501 	adc.w	r5, r3, r1
 8006b90:	f04f 0200 	mov.w	r2, #0
 8006b94:	f04f 0300 	mov.w	r3, #0
 8006b98:	00eb      	lsls	r3, r5, #3
 8006b9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b9e:	00e2      	lsls	r2, r4, #3
 8006ba0:	4614      	mov	r4, r2
 8006ba2:	461d      	mov	r5, r3
 8006ba4:	4643      	mov	r3, r8
 8006ba6:	18e3      	adds	r3, r4, r3
 8006ba8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006bac:	464b      	mov	r3, r9
 8006bae:	eb45 0303 	adc.w	r3, r5, r3
 8006bb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006bc2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006bc6:	f04f 0200 	mov.w	r2, #0
 8006bca:	f04f 0300 	mov.w	r3, #0
 8006bce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006bd2:	4629      	mov	r1, r5
 8006bd4:	008b      	lsls	r3, r1, #2
 8006bd6:	4621      	mov	r1, r4
 8006bd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006bdc:	4621      	mov	r1, r4
 8006bde:	008a      	lsls	r2, r1, #2
 8006be0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006be4:	f7f9 fb0a 	bl	80001fc <__aeabi_uldivmod>
 8006be8:	4602      	mov	r2, r0
 8006bea:	460b      	mov	r3, r1
 8006bec:	4b60      	ldr	r3, [pc, #384]	; (8006d70 <UART_SetConfig+0x4e4>)
 8006bee:	fba3 2302 	umull	r2, r3, r3, r2
 8006bf2:	095b      	lsrs	r3, r3, #5
 8006bf4:	011c      	lsls	r4, r3, #4
 8006bf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c00:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006c04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006c08:	4642      	mov	r2, r8
 8006c0a:	464b      	mov	r3, r9
 8006c0c:	1891      	adds	r1, r2, r2
 8006c0e:	61b9      	str	r1, [r7, #24]
 8006c10:	415b      	adcs	r3, r3
 8006c12:	61fb      	str	r3, [r7, #28]
 8006c14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c18:	4641      	mov	r1, r8
 8006c1a:	1851      	adds	r1, r2, r1
 8006c1c:	6139      	str	r1, [r7, #16]
 8006c1e:	4649      	mov	r1, r9
 8006c20:	414b      	adcs	r3, r1
 8006c22:	617b      	str	r3, [r7, #20]
 8006c24:	f04f 0200 	mov.w	r2, #0
 8006c28:	f04f 0300 	mov.w	r3, #0
 8006c2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c30:	4659      	mov	r1, fp
 8006c32:	00cb      	lsls	r3, r1, #3
 8006c34:	4651      	mov	r1, sl
 8006c36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c3a:	4651      	mov	r1, sl
 8006c3c:	00ca      	lsls	r2, r1, #3
 8006c3e:	4610      	mov	r0, r2
 8006c40:	4619      	mov	r1, r3
 8006c42:	4603      	mov	r3, r0
 8006c44:	4642      	mov	r2, r8
 8006c46:	189b      	adds	r3, r3, r2
 8006c48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c4c:	464b      	mov	r3, r9
 8006c4e:	460a      	mov	r2, r1
 8006c50:	eb42 0303 	adc.w	r3, r2, r3
 8006c54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	67bb      	str	r3, [r7, #120]	; 0x78
 8006c62:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006c64:	f04f 0200 	mov.w	r2, #0
 8006c68:	f04f 0300 	mov.w	r3, #0
 8006c6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006c70:	4649      	mov	r1, r9
 8006c72:	008b      	lsls	r3, r1, #2
 8006c74:	4641      	mov	r1, r8
 8006c76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c7a:	4641      	mov	r1, r8
 8006c7c:	008a      	lsls	r2, r1, #2
 8006c7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006c82:	f7f9 fabb 	bl	80001fc <__aeabi_uldivmod>
 8006c86:	4602      	mov	r2, r0
 8006c88:	460b      	mov	r3, r1
 8006c8a:	4611      	mov	r1, r2
 8006c8c:	4b38      	ldr	r3, [pc, #224]	; (8006d70 <UART_SetConfig+0x4e4>)
 8006c8e:	fba3 2301 	umull	r2, r3, r3, r1
 8006c92:	095b      	lsrs	r3, r3, #5
 8006c94:	2264      	movs	r2, #100	; 0x64
 8006c96:	fb02 f303 	mul.w	r3, r2, r3
 8006c9a:	1acb      	subs	r3, r1, r3
 8006c9c:	011b      	lsls	r3, r3, #4
 8006c9e:	3332      	adds	r3, #50	; 0x32
 8006ca0:	4a33      	ldr	r2, [pc, #204]	; (8006d70 <UART_SetConfig+0x4e4>)
 8006ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ca6:	095b      	lsrs	r3, r3, #5
 8006ca8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006cac:	441c      	add	r4, r3
 8006cae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	673b      	str	r3, [r7, #112]	; 0x70
 8006cb6:	677a      	str	r2, [r7, #116]	; 0x74
 8006cb8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006cbc:	4642      	mov	r2, r8
 8006cbe:	464b      	mov	r3, r9
 8006cc0:	1891      	adds	r1, r2, r2
 8006cc2:	60b9      	str	r1, [r7, #8]
 8006cc4:	415b      	adcs	r3, r3
 8006cc6:	60fb      	str	r3, [r7, #12]
 8006cc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ccc:	4641      	mov	r1, r8
 8006cce:	1851      	adds	r1, r2, r1
 8006cd0:	6039      	str	r1, [r7, #0]
 8006cd2:	4649      	mov	r1, r9
 8006cd4:	414b      	adcs	r3, r1
 8006cd6:	607b      	str	r3, [r7, #4]
 8006cd8:	f04f 0200 	mov.w	r2, #0
 8006cdc:	f04f 0300 	mov.w	r3, #0
 8006ce0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006ce4:	4659      	mov	r1, fp
 8006ce6:	00cb      	lsls	r3, r1, #3
 8006ce8:	4651      	mov	r1, sl
 8006cea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cee:	4651      	mov	r1, sl
 8006cf0:	00ca      	lsls	r2, r1, #3
 8006cf2:	4610      	mov	r0, r2
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	4642      	mov	r2, r8
 8006cfa:	189b      	adds	r3, r3, r2
 8006cfc:	66bb      	str	r3, [r7, #104]	; 0x68
 8006cfe:	464b      	mov	r3, r9
 8006d00:	460a      	mov	r2, r1
 8006d02:	eb42 0303 	adc.w	r3, r2, r3
 8006d06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	663b      	str	r3, [r7, #96]	; 0x60
 8006d12:	667a      	str	r2, [r7, #100]	; 0x64
 8006d14:	f04f 0200 	mov.w	r2, #0
 8006d18:	f04f 0300 	mov.w	r3, #0
 8006d1c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006d20:	4649      	mov	r1, r9
 8006d22:	008b      	lsls	r3, r1, #2
 8006d24:	4641      	mov	r1, r8
 8006d26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d2a:	4641      	mov	r1, r8
 8006d2c:	008a      	lsls	r2, r1, #2
 8006d2e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006d32:	f7f9 fa63 	bl	80001fc <__aeabi_uldivmod>
 8006d36:	4602      	mov	r2, r0
 8006d38:	460b      	mov	r3, r1
 8006d3a:	4b0d      	ldr	r3, [pc, #52]	; (8006d70 <UART_SetConfig+0x4e4>)
 8006d3c:	fba3 1302 	umull	r1, r3, r3, r2
 8006d40:	095b      	lsrs	r3, r3, #5
 8006d42:	2164      	movs	r1, #100	; 0x64
 8006d44:	fb01 f303 	mul.w	r3, r1, r3
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	011b      	lsls	r3, r3, #4
 8006d4c:	3332      	adds	r3, #50	; 0x32
 8006d4e:	4a08      	ldr	r2, [pc, #32]	; (8006d70 <UART_SetConfig+0x4e4>)
 8006d50:	fba2 2303 	umull	r2, r3, r2, r3
 8006d54:	095b      	lsrs	r3, r3, #5
 8006d56:	f003 020f 	and.w	r2, r3, #15
 8006d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4422      	add	r2, r4
 8006d62:	609a      	str	r2, [r3, #8]
}
 8006d64:	bf00      	nop
 8006d66:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d70:	51eb851f 	.word	0x51eb851f

08006d74 <memset>:
 8006d74:	4402      	add	r2, r0
 8006d76:	4603      	mov	r3, r0
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d100      	bne.n	8006d7e <memset+0xa>
 8006d7c:	4770      	bx	lr
 8006d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8006d82:	e7f9      	b.n	8006d78 <memset+0x4>

08006d84 <__libc_init_array>:
 8006d84:	b570      	push	{r4, r5, r6, lr}
 8006d86:	4d0d      	ldr	r5, [pc, #52]	; (8006dbc <__libc_init_array+0x38>)
 8006d88:	4c0d      	ldr	r4, [pc, #52]	; (8006dc0 <__libc_init_array+0x3c>)
 8006d8a:	1b64      	subs	r4, r4, r5
 8006d8c:	10a4      	asrs	r4, r4, #2
 8006d8e:	2600      	movs	r6, #0
 8006d90:	42a6      	cmp	r6, r4
 8006d92:	d109      	bne.n	8006da8 <__libc_init_array+0x24>
 8006d94:	4d0b      	ldr	r5, [pc, #44]	; (8006dc4 <__libc_init_array+0x40>)
 8006d96:	4c0c      	ldr	r4, [pc, #48]	; (8006dc8 <__libc_init_array+0x44>)
 8006d98:	f000 f818 	bl	8006dcc <_init>
 8006d9c:	1b64      	subs	r4, r4, r5
 8006d9e:	10a4      	asrs	r4, r4, #2
 8006da0:	2600      	movs	r6, #0
 8006da2:	42a6      	cmp	r6, r4
 8006da4:	d105      	bne.n	8006db2 <__libc_init_array+0x2e>
 8006da6:	bd70      	pop	{r4, r5, r6, pc}
 8006da8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dac:	4798      	blx	r3
 8006dae:	3601      	adds	r6, #1
 8006db0:	e7ee      	b.n	8006d90 <__libc_init_array+0xc>
 8006db2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006db6:	4798      	blx	r3
 8006db8:	3601      	adds	r6, #1
 8006dba:	e7f2      	b.n	8006da2 <__libc_init_array+0x1e>
 8006dbc:	08006e74 	.word	0x08006e74
 8006dc0:	08006e74 	.word	0x08006e74
 8006dc4:	08006e74 	.word	0x08006e74
 8006dc8:	08006e78 	.word	0x08006e78

08006dcc <_init>:
 8006dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dce:	bf00      	nop
 8006dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dd2:	bc08      	pop	{r3}
 8006dd4:	469e      	mov	lr, r3
 8006dd6:	4770      	bx	lr

08006dd8 <_fini>:
 8006dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dda:	bf00      	nop
 8006ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dde:	bc08      	pop	{r3}
 8006de0:	469e      	mov	lr, r3
 8006de2:	4770      	bx	lr
