
AuroraV_Payload_F439.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093d4  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08009580  08009580  0000a580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009638  08009638  0000b028  2**0
                  CONTENTS
  4 .ARM          00000008  08009638  08009638  0000a638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009640  08009640  0000b028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009640  08009640  0000a640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009644  08009644  0000a644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08009648  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b028  2**0
                  CONTENTS
 10 .bss          00000610  20000028  20000028  0000b028  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000638  20000638  0000b028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b028  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d69e  00000000  00000000  0000b058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040fa  00000000  00000000  000286f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017a8  00000000  00000000  0002c7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000125d  00000000  00000000  0002df98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002803a  00000000  00000000  0002f1f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e539  00000000  00000000  0005722f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea20e  00000000  00000000  00075768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015f976  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006280  00000000  00000000  0015f9bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  00165c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000028 	.word	0x20000028
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08009568 	.word	0x08009568

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000002c 	.word	0x2000002c
 80001e8:	08009568 	.word	0x08009568

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <init_accel>:
uint8_t OUT_Y_L 				= 0x34;
uint8_t OUT_Y_H 				= 0x35;
uint8_t OUT_Z_L 				= 0x36;
uint8_t OUT_Z_H 				= 0x37;

HAL_StatusTypeDef init_accel(I2C_HandleTypeDef* hi2c) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;

	// Set standby mode
	ret = i2c_write_reg(hi2c, ADXL314_ADDR, &POWER_CTL_REG, 0x00);
 80004f4:	4b16      	ldr	r3, [pc, #88]	@ (8000550 <init_accel+0x64>)
 80004f6:	7819      	ldrb	r1, [r3, #0]
 80004f8:	2300      	movs	r3, #0
 80004fa:	4a16      	ldr	r2, [pc, #88]	@ (8000554 <init_accel+0x68>)
 80004fc:	6878      	ldr	r0, [r7, #4]
 80004fe:	f000 fc1e 	bl	8000d3e <i2c_write_reg>
 8000502:	4603      	mov	r3, r0
 8000504:	73fb      	strb	r3, [r7, #15]

	// Set to 200G right justified
	ret = i2c_write_reg(hi2c, ADXL314_ADDR, &DATA_FORMAT_REG, RIGHT_JUST);
 8000506:	4b12      	ldr	r3, [pc, #72]	@ (8000550 <init_accel+0x64>)
 8000508:	7819      	ldrb	r1, [r3, #0]
 800050a:	230b      	movs	r3, #11
 800050c:	4a12      	ldr	r2, [pc, #72]	@ (8000558 <init_accel+0x6c>)
 800050e:	6878      	ldr	r0, [r7, #4]
 8000510:	f000 fc15 	bl	8000d3e <i2c_write_reg>
 8000514:	4603      	mov	r3, r0
 8000516:	73fb      	strb	r3, [r7, #15]

	// Set to 1kHz ODR
	ret = i2c_write_reg(hi2c, ADXL314_ADDR, &BW_RATE_REG, MASK_1kHz);
 8000518:	4b0d      	ldr	r3, [pc, #52]	@ (8000550 <init_accel+0x64>)
 800051a:	7819      	ldrb	r1, [r3, #0]
 800051c:	230a      	movs	r3, #10
 800051e:	4a0f      	ldr	r2, [pc, #60]	@ (800055c <init_accel+0x70>)
 8000520:	6878      	ldr	r0, [r7, #4]
 8000522:	f000 fc0c 	bl	8000d3e <i2c_write_reg>
 8000526:	4603      	mov	r3, r0
 8000528:	73fb      	strb	r3, [r7, #15]

	// Write the offset registers
	ret = writeOffset(hi2c);
 800052a:	6878      	ldr	r0, [r7, #4]
 800052c:	f000 f856 	bl	80005dc <writeOffset>
 8000530:	4603      	mov	r3, r0
 8000532:	73fb      	strb	r3, [r7, #15]

	// Start measuring
	ret = i2c_write_reg(hi2c, ADXL314_ADDR, &POWER_CTL_REG, START_MEAS);
 8000534:	4b06      	ldr	r3, [pc, #24]	@ (8000550 <init_accel+0x64>)
 8000536:	7819      	ldrb	r1, [r3, #0]
 8000538:	2308      	movs	r3, #8
 800053a:	4a06      	ldr	r2, [pc, #24]	@ (8000554 <init_accel+0x68>)
 800053c:	6878      	ldr	r0, [r7, #4]
 800053e:	f000 fbfe 	bl	8000d3e <i2c_write_reg>
 8000542:	4603      	mov	r3, r0
 8000544:	73fb      	strb	r3, [r7, #15]

	return ret;
 8000546:	7bfb      	ldrb	r3, [r7, #15]
}
 8000548:	4618      	mov	r0, r3
 800054a:	3710      	adds	r7, #16
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20000000 	.word	0x20000000
 8000554:	20000002 	.word	0x20000002
 8000558:	20000003 	.word	0x20000003
 800055c:	20000001 	.word	0x20000001

08000560 <readAccelerometer>:
void readAccelerometer(uint8_t values[6], I2C_HandleTypeDef* hi2c) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af02      	add	r7, sp, #8
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < 6; i++) {
 800056a:	2300      	movs	r3, #0
 800056c:	73fb      	strb	r3, [r7, #15]
 800056e:	e007      	b.n	8000580 <readAccelerometer+0x20>
		values[i] = 0x00;
 8000570:	7bfb      	ldrb	r3, [r7, #15]
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	4413      	add	r3, r2
 8000576:	2200      	movs	r2, #0
 8000578:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 6; i++) {
 800057a:	7bfb      	ldrb	r3, [r7, #15]
 800057c:	3301      	adds	r3, #1
 800057e:	73fb      	strb	r3, [r7, #15]
 8000580:	7bfb      	ldrb	r3, [r7, #15]
 8000582:	2b05      	cmp	r3, #5
 8000584:	d9f4      	bls.n	8000570 <readAccelerometer+0x10>
	}

	i2c_burst_read(hi2c, ADXL314_ADDR, OUT_X_L, 6, values);
 8000586:	4b07      	ldr	r3, [pc, #28]	@ (80005a4 <readAccelerometer+0x44>)
 8000588:	7819      	ldrb	r1, [r3, #0]
 800058a:	4b07      	ldr	r3, [pc, #28]	@ (80005a8 <readAccelerometer+0x48>)
 800058c:	781a      	ldrb	r2, [r3, #0]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2306      	movs	r3, #6
 8000594:	6838      	ldr	r0, [r7, #0]
 8000596:	f000 fb9d 	bl	8000cd4 <i2c_burst_read>
}
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000000 	.word	0x20000000
 80005a8:	20000007 	.word	0x20000007

080005ac <readAccel_whoami>:

uint8_t readAccel_whoami(I2C_HandleTypeDef* hi2c) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	uint8_t data = 0x00;
 80005b4:	2300      	movs	r3, #0
 80005b6:	73fb      	strb	r3, [r7, #15]
	i2c_read_reg(hi2c, &data, ADXL314_ADDR, &WHOAMI);
 80005b8:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <readAccel_whoami+0x28>)
 80005ba:	781a      	ldrb	r2, [r3, #0]
 80005bc:	f107 010f 	add.w	r1, r7, #15
 80005c0:	4b05      	ldr	r3, [pc, #20]	@ (80005d8 <readAccel_whoami+0x2c>)
 80005c2:	6878      	ldr	r0, [r7, #4]
 80005c4:	f000 fb5d 	bl	8000c82 <i2c_read_reg>

	return data;
 80005c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000000 	.word	0x20000000
 80005d8:	20000044 	.word	0x20000044

080005dc <writeOffset>:

HAL_StatusTypeDef writeOffset(I2C_HandleTypeDef* hi2c) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;

	ret = i2c_write_reg(hi2c, ADXL314_ADDR, &OFFSET_REG_X, OFFSETX);
 80005e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000624 <writeOffset+0x48>)
 80005e6:	7819      	ldrb	r1, [r3, #0]
 80005e8:	2302      	movs	r3, #2
 80005ea:	4a0f      	ldr	r2, [pc, #60]	@ (8000628 <writeOffset+0x4c>)
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f000 fba6 	bl	8000d3e <i2c_write_reg>
 80005f2:	4603      	mov	r3, r0
 80005f4:	73fb      	strb	r3, [r7, #15]
	ret = i2c_write_reg(hi2c, ADXL314_ADDR, &OFFSET_REG_Y, OFFSETY);
 80005f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000624 <writeOffset+0x48>)
 80005f8:	7819      	ldrb	r1, [r3, #0]
 80005fa:	2301      	movs	r3, #1
 80005fc:	4a0b      	ldr	r2, [pc, #44]	@ (800062c <writeOffset+0x50>)
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f000 fb9d 	bl	8000d3e <i2c_write_reg>
 8000604:	4603      	mov	r3, r0
 8000606:	73fb      	strb	r3, [r7, #15]
	ret = i2c_write_reg(hi2c, ADXL314_ADDR, &OFFSET_REG_Z, OFFSETZ);
 8000608:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <writeOffset+0x48>)
 800060a:	7819      	ldrb	r1, [r3, #0]
 800060c:	2301      	movs	r3, #1
 800060e:	4a08      	ldr	r2, [pc, #32]	@ (8000630 <writeOffset+0x54>)
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f000 fb94 	bl	8000d3e <i2c_write_reg>
 8000616:	4603      	mov	r3, r0
 8000618:	73fb      	strb	r3, [r7, #15]

	return ret;
 800061a:	7bfb      	ldrb	r3, [r7, #15]
}
 800061c:	4618      	mov	r0, r3
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000000 	.word	0x20000000
 8000628:	20000004 	.word	0x20000004
 800062c:	20000005 	.word	0x20000005
 8000630:	20000006 	.word	0x20000006

08000634 <init_bme280>:
uint8_t OUT_HUM_H 			= 0xFD;
uint8_t CALIB_ST_1			= 0x88;
uint8_t CALIB_ST_2			= 0xE1;


HAL_StatusTypeDef init_bme280(I2C_HandleTypeDef* hi2c, uint8_t bme) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	460b      	mov	r3, r1
 800063e:	70fb      	strb	r3, [r7, #3]
	uint8_t bme_addr = getBME280Config(bme).bme_addr;
 8000640:	78fb      	ldrb	r3, [r7, #3]
 8000642:	4618      	mov	r0, r3
 8000644:	f000 f8e0 	bl	8000808 <getBME280Config>
 8000648:	4603      	mov	r3, r0
 800064a:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef ret;
	uint8_t control_reg = 0x00;
 800064c:	2300      	movs	r3, #0
 800064e:	737b      	strb	r3, [r7, #13]

	// Reset the sensor
	ret =  i2c_write_reg(hi2c, bme_addr, &RST_REG, RST);
 8000650:	7bf9      	ldrb	r1, [r7, #15]
 8000652:	23b6      	movs	r3, #182	@ 0xb6
 8000654:	4a19      	ldr	r2, [pc, #100]	@ (80006bc <init_bme280+0x88>)
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	f000 fb71 	bl	8000d3e <i2c_write_reg>
 800065c:	4603      	mov	r3, r0
 800065e:	73bb      	strb	r3, [r7, #14]

	// Set humidity control register
	i2c_read_reg(hi2c, &control_reg, bme_addr, &CTRL_HUM_REG);
 8000660:	7bfa      	ldrb	r2, [r7, #15]
 8000662:	f107 010d 	add.w	r1, r7, #13
 8000666:	4b16      	ldr	r3, [pc, #88]	@ (80006c0 <init_bme280+0x8c>)
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f000 fb0a 	bl	8000c82 <i2c_read_reg>
	control_reg = control_reg & 0xF8;
 800066e:	7b7b      	ldrb	r3, [r7, #13]
 8000670:	f023 0307 	bic.w	r3, r3, #7
 8000674:	b2db      	uxtb	r3, r3
 8000676:	737b      	strb	r3, [r7, #13]
	control_reg = control_reg | CTRL_HUM_MSK;
 8000678:	7b7b      	ldrb	r3, [r7, #13]
 800067a:	f043 0301 	orr.w	r3, r3, #1
 800067e:	b2db      	uxtb	r3, r3
 8000680:	737b      	strb	r3, [r7, #13]
	ret = i2c_write_reg(hi2c, bme_addr, &CTRL_HUM_REG, control_reg);
 8000682:	7b7b      	ldrb	r3, [r7, #13]
 8000684:	7bf9      	ldrb	r1, [r7, #15]
 8000686:	4a0e      	ldr	r2, [pc, #56]	@ (80006c0 <init_bme280+0x8c>)
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f000 fb58 	bl	8000d3e <i2c_write_reg>
 800068e:	4603      	mov	r3, r0
 8000690:	73bb      	strb	r3, [r7, #14]

	// Set measure control register
	ret = i2c_write_reg(hi2c, bme_addr, &CTRL_MEAS_REG, CTRL_MEAS_MSK);
 8000692:	7bf9      	ldrb	r1, [r7, #15]
 8000694:	2327      	movs	r3, #39	@ 0x27
 8000696:	4a0b      	ldr	r2, [pc, #44]	@ (80006c4 <init_bme280+0x90>)
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f000 fb50 	bl	8000d3e <i2c_write_reg>
 800069e:	4603      	mov	r3, r0
 80006a0:	73bb      	strb	r3, [r7, #14]

	// Set the config register
	ret = i2c_write_reg(hi2c, bme_addr, &CONF_REG, CONF_MSK);
 80006a2:	7bf9      	ldrb	r1, [r7, #15]
 80006a4:	2300      	movs	r3, #0
 80006a6:	4a08      	ldr	r2, [pc, #32]	@ (80006c8 <init_bme280+0x94>)
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f000 fb48 	bl	8000d3e <i2c_write_reg>
 80006ae:	4603      	mov	r3, r0
 80006b0:	73bb      	strb	r3, [r7, #14]

	return ret;
 80006b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3710      	adds	r7, #16
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000009 	.word	0x20000009
 80006c0:	2000000a 	.word	0x2000000a
 80006c4:	2000000b 	.word	0x2000000b
 80006c8:	2000000c 	.word	0x2000000c

080006cc <readTempHumPres>:

void readTempHumPres(uint8_t values[6], I2C_HandleTypeDef* hi2c, uint8_t bme) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	@ 0x28
 80006d0:	af02      	add	r7, sp, #8
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	4613      	mov	r3, r2
 80006d8:	71fb      	strb	r3, [r7, #7]
	uint8_t readings[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 80006da:	4a27      	ldr	r2, [pc, #156]	@ (8000778 <readTempHumPres+0xac>)
 80006dc:	f107 0314 	add.w	r3, r7, #20
 80006e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006e4:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t bme_addr = getBME280Config(bme).bme_addr;
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 f88c 	bl	8000808 <getBME280Config>
 80006f0:	4603      	mov	r3, r0
 80006f2:	777b      	strb	r3, [r7, #29]
	i2c_burst_read(hi2c, bme_addr, OUT_PRESS_H, 8, readings);
 80006f4:	4b21      	ldr	r3, [pc, #132]	@ (800077c <readTempHumPres+0xb0>)
 80006f6:	781a      	ldrb	r2, [r3, #0]
 80006f8:	7f79      	ldrb	r1, [r7, #29]
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	2308      	movs	r3, #8
 8000702:	68b8      	ldr	r0, [r7, #8]
 8000704:	f000 fae6 	bl	8000cd4 <i2c_burst_read>

	// Clear the 0 values on the xlsb registers
	uint8_t j = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	77fb      	strb	r3, [r7, #31]
    for(uint8_t i = 0; i < 8; i++) {
 800070c:	2300      	movs	r3, #0
 800070e:	77bb      	strb	r3, [r7, #30]
 8000710:	e014      	b.n	800073c <readTempHumPres+0x70>
        if(i != 2 && i != 5) {  // if the index is not 2 or 5
 8000712:	7fbb      	ldrb	r3, [r7, #30]
 8000714:	2b02      	cmp	r3, #2
 8000716:	d00e      	beq.n	8000736 <readTempHumPres+0x6a>
 8000718:	7fbb      	ldrb	r3, [r7, #30]
 800071a:	2b05      	cmp	r3, #5
 800071c:	d00b      	beq.n	8000736 <readTempHumPres+0x6a>
        	values[j] = readings[i];
 800071e:	7fba      	ldrb	r2, [r7, #30]
 8000720:	7ffb      	ldrb	r3, [r7, #31]
 8000722:	68f9      	ldr	r1, [r7, #12]
 8000724:	440b      	add	r3, r1
 8000726:	3220      	adds	r2, #32
 8000728:	443a      	add	r2, r7
 800072a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800072e:	701a      	strb	r2, [r3, #0]
            j++;
 8000730:	7ffb      	ldrb	r3, [r7, #31]
 8000732:	3301      	adds	r3, #1
 8000734:	77fb      	strb	r3, [r7, #31]
    for(uint8_t i = 0; i < 8; i++) {
 8000736:	7fbb      	ldrb	r3, [r7, #30]
 8000738:	3301      	adds	r3, #1
 800073a:	77bb      	strb	r3, [r7, #30]
 800073c:	7fbb      	ldrb	r3, [r7, #30]
 800073e:	2b07      	cmp	r3, #7
 8000740:	d9e7      	bls.n	8000712 <readTempHumPres+0x46>
        }
    }

    // Swap elements to make the array little endian
    swap(&values[0], &values[1]);
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	3301      	adds	r3, #1
 8000746:	4619      	mov	r1, r3
 8000748:	68f8      	ldr	r0, [r7, #12]
 800074a:	f000 f874 	bl	8000836 <swap>
    swap(&values[2], &values[3]);
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	1c9a      	adds	r2, r3, #2
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	3303      	adds	r3, #3
 8000756:	4619      	mov	r1, r3
 8000758:	4610      	mov	r0, r2
 800075a:	f000 f86c 	bl	8000836 <swap>
    swap(&values[4], &values[5]);
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	1d1a      	adds	r2, r3, #4
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	3305      	adds	r3, #5
 8000766:	4619      	mov	r1, r3
 8000768:	4610      	mov	r0, r2
 800076a:	f000 f864 	bl	8000836 <swap>
}
 800076e:	bf00      	nop
 8000770:	3720      	adds	r7, #32
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	08009580 	.word	0x08009580
 800077c:	2000000d 	.word	0x2000000d

08000780 <readBME280_id_reg>:

uint8_t readBME280_id_reg(I2C_HandleTypeDef* hi2c, uint8_t bme) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	460b      	mov	r3, r1
 800078a:	70fb      	strb	r3, [r7, #3]
	uint8_t bme_addr = getBME280Config(bme).bme_addr;
 800078c:	78fb      	ldrb	r3, [r7, #3]
 800078e:	4618      	mov	r0, r3
 8000790:	f000 f83a 	bl	8000808 <getBME280Config>
 8000794:	4603      	mov	r3, r0
 8000796:	73fb      	strb	r3, [r7, #15]
	uint8_t data = 0x00;
 8000798:	2300      	movs	r3, #0
 800079a:	73bb      	strb	r3, [r7, #14]
	i2c_read_reg(hi2c, &data, bme_addr, &ID_REG);
 800079c:	7bfa      	ldrb	r2, [r7, #15]
 800079e:	f107 010e 	add.w	r1, r7, #14
 80007a2:	4b04      	ldr	r3, [pc, #16]	@ (80007b4 <readBME280_id_reg+0x34>)
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f000 fa6c 	bl	8000c82 <i2c_read_reg>

	return data;
 80007aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3710      	adds	r7, #16
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000008 	.word	0x20000008

080007b8 <readBME280_calib>:

void readBME280_calib(I2C_HandleTypeDef* hi2c, uint8_t bme, uint8_t calibration1[CALIB_CNT_1], uint8_t calibration2[CALIB_CNT_2]) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b088      	sub	sp, #32
 80007bc:	af02      	add	r7, sp, #8
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	607a      	str	r2, [r7, #4]
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	460b      	mov	r3, r1
 80007c6:	72fb      	strb	r3, [r7, #11]
	uint8_t bme_addr = getBME280Config(bme).bme_addr;
 80007c8:	7afb      	ldrb	r3, [r7, #11]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 f81c 	bl	8000808 <getBME280Config>
 80007d0:	4603      	mov	r3, r0
 80007d2:	75fb      	strb	r3, [r7, #23]
	i2c_burst_read(hi2c, bme_addr, CALIB_ST_1, CALIB_CNT_1, calibration1);
 80007d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000800 <readBME280_calib+0x48>)
 80007d6:	781a      	ldrb	r2, [r3, #0]
 80007d8:	7df9      	ldrb	r1, [r7, #23]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	9300      	str	r3, [sp, #0]
 80007de:	2319      	movs	r3, #25
 80007e0:	68f8      	ldr	r0, [r7, #12]
 80007e2:	f000 fa77 	bl	8000cd4 <i2c_burst_read>
	i2c_burst_read(hi2c, bme_addr, CALIB_ST_2, CALIB_CNT_2, calibration2);
 80007e6:	4b07      	ldr	r3, [pc, #28]	@ (8000804 <readBME280_calib+0x4c>)
 80007e8:	781a      	ldrb	r2, [r3, #0]
 80007ea:	7df9      	ldrb	r1, [r7, #23]
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	2307      	movs	r3, #7
 80007f2:	68f8      	ldr	r0, [r7, #12]
 80007f4:	f000 fa6e 	bl	8000cd4 <i2c_burst_read>
}
 80007f8:	bf00      	nop
 80007fa:	3718      	adds	r7, #24
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	2000000e 	.word	0x2000000e
 8000804:	2000000f 	.word	0x2000000f

08000808 <getBME280Config>:

BME280_Config getBME280Config(uint8_t bme) {
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	71fb      	strb	r3, [r7, #7]
	BME280_Config config;
	if (bme == 0) {
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d102      	bne.n	800081e <getBME280Config+0x16>
		config.bme_addr = BME280_ADDR_0;
 8000818:	2376      	movs	r3, #118	@ 0x76
 800081a:	733b      	strb	r3, [r7, #12]
 800081c:	e004      	b.n	8000828 <getBME280Config+0x20>
	} else if (bme == 1) {
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d101      	bne.n	8000828 <getBME280Config+0x20>
		config.bme_addr = BME280_ADDR_1;
 8000824:	2377      	movs	r3, #119	@ 0x77
 8000826:	733b      	strb	r3, [r7, #12]
	}
    return config;
 8000828:	7b3b      	ldrb	r3, [r7, #12]
}
 800082a:	4618      	mov	r0, r3
 800082c:	3714      	adds	r7, #20
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr

08000836 <swap>:

void swap(uint8_t* a, uint8_t* b) {
 8000836:	b480      	push	{r7}
 8000838:	b085      	sub	sp, #20
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
 800083e:	6039      	str	r1, [r7, #0]
    uint8_t temp = *a;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	73fb      	strb	r3, [r7, #15]
    *a = *b;
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	781a      	ldrb	r2, [r3, #0]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	701a      	strb	r2, [r3, #0]
    *b = temp;
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	7bfa      	ldrb	r2, [r7, #15]
 8000852:	701a      	strb	r2, [r3, #0]
}
 8000854:	bf00      	nop
 8000856:	3714      	adds	r7, #20
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <sendCAN_TxMessage>:
 */

#include "can_driver.h"


void sendCAN_TxMessage(CAN_HandleTypeDef *hcan, uint8_t dataSize, uint8_t TxData[dataSize], uint32_t *CAN_TxMailbox, uint16_t payload_id) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b08a      	sub	sp, #40	@ 0x28
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	607a      	str	r2, [r7, #4]
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	460b      	mov	r3, r1
 800086e:	72fb      	strb	r3, [r7, #11]
	CAN_TxHeaderTypeDef TxHeader = configureTxHeader(payload_id, dataSize);
 8000870:	f107 0310 	add.w	r3, r7, #16
 8000874:	7afa      	ldrb	r2, [r7, #11]
 8000876:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8000878:	4618      	mov	r0, r3
 800087a:	f000 f80b 	bl	8000894 <configureTxHeader>
	HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, CAN_TxMailbox);
 800087e:	f107 0110 	add.w	r1, r7, #16
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	68f8      	ldr	r0, [r7, #12]
 8000888:	f002 fe82 	bl	8003590 <HAL_CAN_AddTxMessage>
}
 800088c:	bf00      	nop
 800088e:	3728      	adds	r7, #40	@ 0x28
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <configureTxHeader>:

CAN_TxHeaderTypeDef configureTxHeader(uint16_t payload_id, uint8_t dataSize) {
 8000894:	b4b0      	push	{r4, r5, r7}
 8000896:	b089      	sub	sp, #36	@ 0x24
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	460b      	mov	r3, r1
 800089e:	807b      	strh	r3, [r7, #2]
 80008a0:	4613      	mov	r3, r2
 80008a2:	707b      	strb	r3, [r7, #1]
	CAN_TxHeaderTypeDef TxHeader;
	TxHeader.DLC = dataSize;
 80008a4:	787b      	ldrb	r3, [r7, #1]
 80008a6:	61bb      	str	r3, [r7, #24]
	TxHeader.IDE = CAN_ID_STD;
 80008a8:	2300      	movs	r3, #0
 80008aa:	613b      	str	r3, [r7, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]
	TxHeader.StdId = payload_id;
 80008b0:	887b      	ldrh	r3, [r7, #2]
 80008b2:	60bb      	str	r3, [r7, #8]
	TxHeader.TransmitGlobalTime = DISABLE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	773b      	strb	r3, [r7, #28]
	return TxHeader;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	461d      	mov	r5, r3
 80008bc:	f107 0408 	add.w	r4, r7, #8
 80008c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80008c8:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	3724      	adds	r7, #36	@ 0x24
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bcb0      	pop	{r4, r5, r7}
 80008d4:	4770      	bx	lr

080008d6 <check_busy>:
uint8_t FLASH_32K_ERS	= 0x52;			// Erase all memory within a 32K-byte block
uint8_t FLASH_ERASE		= 0xC7;			// Erase the entire chip
uint8_t RST_EN			= 0x66;			// Reset enable
uint8_t DEV_RST			= 0x99;			// Reset device

uint8_t check_busy(SPI_HandleTypeDef *hspi, GPIO_Config config, int timeout) {
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b088      	sub	sp, #32
 80008da:	af00      	add	r7, sp, #0
 80008dc:	60f8      	str	r0, [r7, #12]
 80008de:	1d38      	adds	r0, r7, #4
 80008e0:	e880 0006 	stmia.w	r0, {r1, r2}
 80008e4:	603b      	str	r3, [r7, #0]
	uint8_t ret_val = 0x00;
 80008e6:	2300      	movs	r3, #0
 80008e8:	77fb      	strb	r3, [r7, #31]

    // Get the current time
	uint32_t startTick = HAL_GetTick();
 80008ea:	f002 fc01 	bl	80030f0 <HAL_GetTick>
 80008ee:	61b8      	str	r0, [r7, #24]

	// Read the status register to ensure no write is currently in progress
	uint8_t busy = 0x01;
 80008f0:	2301      	movs	r3, #1
 80008f2:	77bb      	strb	r3, [r7, #30]
	while(busy) {
 80008f4:	e015      	b.n	8000922 <check_busy+0x4c>
		// Check if there is a write in progress
		busy = (check_status_register(hspi, config) & 0x01);
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80008fc:	68f8      	ldr	r0, [r7, #12]
 80008fe:	f000 f819 	bl	8000934 <check_status_register>
 8000902:	4603      	mov	r3, r0
 8000904:	f003 0301 	and.w	r3, r3, #1
 8000908:	77bb      	strb	r3, [r7, #30]

		uint32_t currTick = HAL_GetTick();
 800090a:	f002 fbf1 	bl	80030f0 <HAL_GetTick>
 800090e:	6178      	str	r0, [r7, #20]

        // Check if the timeout has been reached
		if ((currTick - startTick) >= timeout) {
 8000910:	697a      	ldr	r2, [r7, #20]
 8000912:	69bb      	ldr	r3, [r7, #24]
 8000914:	1ad2      	subs	r2, r2, r3
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	429a      	cmp	r2, r3
 800091a:	d302      	bcc.n	8000922 <check_busy+0x4c>
        	ret_val = 0x01;
 800091c:	2301      	movs	r3, #1
 800091e:	77fb      	strb	r3, [r7, #31]
            break;
 8000920:	e002      	b.n	8000928 <check_busy+0x52>
	while(busy) {
 8000922:	7fbb      	ldrb	r3, [r7, #30]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d1e6      	bne.n	80008f6 <check_busy+0x20>
        }
	}

	return ret_val;
 8000928:	7ffb      	ldrb	r3, [r7, #31]
}
 800092a:	4618      	mov	r0, r3
 800092c:	3720      	adds	r7, #32
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <check_status_register>:

uint8_t check_status_register(SPI_HandleTypeDef *hspi, GPIO_Config config) {
 8000934:	b580      	push	{r7, lr}
 8000936:	b088      	sub	sp, #32
 8000938:	af02      	add	r7, sp, #8
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	e883 0006 	stmia.w	r3, {r1, r2}
	uint8_t status_reg = 0x00;
 8000942:	2300      	movs	r3, #0
 8000944:	75fb      	strb	r3, [r7, #23]
	spi_sendOp_readByte(&FLASH_READSR1, hspi, &status_reg, config.GPIOx, config.GPIO_Pin);
 8000946:	6879      	ldr	r1, [r7, #4]
 8000948:	893b      	ldrh	r3, [r7, #8]
 800094a:	f107 0217 	add.w	r2, r7, #23
 800094e:	9300      	str	r3, [sp, #0]
 8000950:	460b      	mov	r3, r1
 8000952:	68f9      	ldr	r1, [r7, #12]
 8000954:	4803      	ldr	r0, [pc, #12]	@ (8000964 <check_status_register+0x30>)
 8000956:	f001 fe2d 	bl	80025b4 <spi_sendOp_readByte>
	return status_reg;
 800095a:	7dfb      	ldrb	r3, [r7, #23]
}
 800095c:	4618      	mov	r0, r3
 800095e:	3718      	adds	r7, #24
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000012 	.word	0x20000012

08000968 <erase_chip_spi>:
 *      Author: aidencontini
 */

#include "data_output_spi.h"

HAL_StatusTypeDef erase_chip_spi(SPI_HandleTypeDef *hspi, GPIO_Config config) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	e883 0006 	stmia.w	r3, {r1, r2}
	check_busy(hspi, config, BSY_TIMEOUT_MS);
 8000976:	2305      	movs	r3, #5
 8000978:	1d3a      	adds	r2, r7, #4
 800097a:	ca06      	ldmia	r2, {r1, r2}
 800097c:	68f8      	ldr	r0, [r7, #12]
 800097e:	f7ff ffaa 	bl	80008d6 <check_busy>

	write_enable_spi(hspi, config);
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000988:	68f8      	ldr	r0, [r7, #12]
 800098a:	f000 f815 	bl	80009b8 <write_enable_spi>
	perform_operation(&FLASH_ERASE, hspi, config.GPIOx, config.GPIO_Pin);
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	893b      	ldrh	r3, [r7, #8]
 8000992:	68f9      	ldr	r1, [r7, #12]
 8000994:	4806      	ldr	r0, [pc, #24]	@ (80009b0 <erase_chip_spi+0x48>)
 8000996:	f001 fe33 	bl	8002600 <perform_operation>

	check_busy(hspi, config, CHIP_ERASE_TO);
 800099a:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <erase_chip_spi+0x4c>)
 800099c:	1d3a      	adds	r2, r7, #4
 800099e:	ca06      	ldmia	r2, {r1, r2}
 80009a0:	68f8      	ldr	r0, [r7, #12]
 80009a2:	f7ff ff98 	bl	80008d6 <check_busy>

	return HAL_OK;
 80009a6:	2300      	movs	r3, #0
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3710      	adds	r7, #16
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000015 	.word	0x20000015
 80009b4:	00030d40 	.word	0x00030d40

080009b8 <write_enable_spi>:
	check_busy(hspi, config, BLK_ERS_32K_TO);

	return HAL_OK;
}

void write_enable_spi(SPI_HandleTypeDef *hspi, GPIO_Config config) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	e883 0006 	stmia.w	r3, {r1, r2}
	perform_operation(&FLASH_WREN, hspi, config.GPIOx, config.GPIO_Pin);
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	893b      	ldrh	r3, [r7, #8]
 80009ca:	68f9      	ldr	r1, [r7, #12]
 80009cc:	4803      	ldr	r0, [pc, #12]	@ (80009dc <write_enable_spi+0x24>)
 80009ce:	f001 fe17 	bl	8002600 <perform_operation>
}
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000010 	.word	0x20000010

080009e0 <software_reset>:

void write_disable_spi(SPI_HandleTypeDef *hspi, GPIO_Config config) {
	perform_operation(&FLASH_WRDIS, hspi, config.GPIOx, config.GPIO_Pin);
}

void software_reset(SPI_HandleTypeDef *hspi, GPIO_Config config) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	e883 0006 	stmia.w	r3, {r1, r2}

	check_busy(hspi, config, BSY_TIMEOUT_MS);
 80009ee:	2305      	movs	r3, #5
 80009f0:	1d3a      	adds	r2, r7, #4
 80009f2:	ca06      	ldmia	r2, {r1, r2}
 80009f4:	68f8      	ldr	r0, [r7, #12]
 80009f6:	f7ff ff6e 	bl	80008d6 <check_busy>

	perform_operation(&RST_EN, hspi, config.GPIOx, config.GPIO_Pin);
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	893b      	ldrh	r3, [r7, #8]
 80009fe:	68f9      	ldr	r1, [r7, #12]
 8000a00:	4807      	ldr	r0, [pc, #28]	@ (8000a20 <software_reset+0x40>)
 8000a02:	f001 fdfd 	bl	8002600 <perform_operation>
	perform_operation(&DEV_RST, hspi, config.GPIOx, config.GPIO_Pin);
 8000a06:	687a      	ldr	r2, [r7, #4]
 8000a08:	893b      	ldrh	r3, [r7, #8]
 8000a0a:	68f9      	ldr	r1, [r7, #12]
 8000a0c:	4805      	ldr	r0, [pc, #20]	@ (8000a24 <software_reset+0x44>)
 8000a0e:	f001 fdf7 	bl	8002600 <perform_operation>

	HAL_Delay(5);
 8000a12:	2005      	movs	r0, #5
 8000a14:	f002 fb78 	bl	8003108 <HAL_Delay>
}
 8000a18:	bf00      	nop
 8000a1a:	3710      	adds	r7, #16
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000016 	.word	0x20000016
 8000a24:	20000017 	.word	0x20000017

08000a28 <write_data_spi_dma>:
	spi_write_data(&FLASH_PGWR, PAGE_SIZE, page, hspi, addr, config.GPIOx, config.GPIO_Pin);

	return 0;
}

uint8_t write_data_spi_dma(uint8_t page[PAGE_SIZE], SPI_HandleTypeDef *hspi, uint32_t addr, GPIO_Config config) {
 8000a28:	b082      	sub	sp, #8
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b088      	sub	sp, #32
 8000a2e:	af04      	add	r7, sp, #16
 8000a30:	60f8      	str	r0, [r7, #12]
 8000a32:	60b9      	str	r1, [r7, #8]
 8000a34:	607a      	str	r2, [r7, #4]
 8000a36:	61fb      	str	r3, [r7, #28]
	check_busy(hspi, config, BSY_TIMEOUT_MS);
 8000a38:	2305      	movs	r3, #5
 8000a3a:	f107 021c 	add.w	r2, r7, #28
 8000a3e:	ca06      	ldmia	r2, {r1, r2}
 8000a40:	68b8      	ldr	r0, [r7, #8]
 8000a42:	f7ff ff48 	bl	80008d6 <check_busy>

	// Send the write enable signal
	write_enable_spi(hspi, config);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000a4e:	68b8      	ldr	r0, [r7, #8]
 8000a50:	f7ff ffb2 	bl	80009b8 <write_enable_spi>
	spi_write_data_dma(&FLASH_PGWR, PAGE_SIZE, page, hspi, addr, config.GPIOx, config.GPIO_Pin);
 8000a54:	69fb      	ldr	r3, [r7, #28]
 8000a56:	8c3a      	ldrh	r2, [r7, #32]
 8000a58:	9202      	str	r2, [sp, #8]
 8000a5a:	9301      	str	r3, [sp, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	9300      	str	r3, [sp, #0]
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	68fa      	ldr	r2, [r7, #12]
 8000a64:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a68:	4805      	ldr	r0, [pc, #20]	@ (8000a80 <write_data_spi_dma+0x58>)
 8000a6a:	f001 fe30 	bl	80026ce <spi_write_data_dma>

	return 0;
 8000a6e:	2300      	movs	r3, #0
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3710      	adds	r7, #16
 8000a74:	46bd      	mov	sp, r7
 8000a76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a7a:	b002      	add	sp, #8
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	20000011 	.word	0x20000011

08000a84 <find_next_blank_page>:
 *      Author: aidencontini
 */

#include "data_read_spi.h"

uint32_t find_next_blank_page(SPI_HandleTypeDef *hspi, GPIO_PinState *end_of_flash_ptr, GPIO_Config config) {
 8000a84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000a88:	b091      	sub	sp, #68	@ 0x44
 8000a8a:	af04      	add	r7, sp, #16
 8000a8c:	60f8      	str	r0, [r7, #12]
 8000a8e:	60b9      	str	r1, [r7, #8]
 8000a90:	4639      	mov	r1, r7
 8000a92:	e881 000c 	stmia.w	r1, {r2, r3}
 8000a96:	466b      	mov	r3, sp
 8000a98:	461e      	mov	r6, r3
	uint8_t firstBytes = 4;
 8000a9a:	2304      	movs	r3, #4
 8000a9c:	77fb      	strb	r3, [r7, #31]

	uint8_t page_start[firstBytes];
 8000a9e:	7ff9      	ldrb	r1, [r7, #31]
 8000aa0:	460b      	mov	r3, r1
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	61bb      	str	r3, [r7, #24]
 8000aa6:	b2cb      	uxtb	r3, r1
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	4698      	mov	r8, r3
 8000aac:	4691      	mov	r9, r2
 8000aae:	f04f 0200 	mov.w	r2, #0
 8000ab2:	f04f 0300 	mov.w	r3, #0
 8000ab6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000aba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000abe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000ac2:	b2cb      	uxtb	r3, r1
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	461c      	mov	r4, r3
 8000ac8:	4615      	mov	r5, r2
 8000aca:	f04f 0200 	mov.w	r2, #0
 8000ace:	f04f 0300 	mov.w	r3, #0
 8000ad2:	00eb      	lsls	r3, r5, #3
 8000ad4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000ad8:	00e2      	lsls	r2, r4, #3
 8000ada:	460b      	mov	r3, r1
 8000adc:	3307      	adds	r3, #7
 8000ade:	08db      	lsrs	r3, r3, #3
 8000ae0:	00db      	lsls	r3, r3, #3
 8000ae2:	ebad 0d03 	sub.w	sp, sp, r3
 8000ae6:	ab04      	add	r3, sp, #16
 8000ae8:	3300      	adds	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < firstBytes; i++) {
 8000aec:	2300      	movs	r3, #0
 8000aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000af0:	e007      	b.n	8000b02 <find_next_blank_page+0x7e>
		page_start[i] = 0;
 8000af2:	697a      	ldr	r2, [r7, #20]
 8000af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000af6:	4413      	add	r3, r2
 8000af8:	2200      	movs	r2, #0
 8000afa:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < firstBytes; i++) {
 8000afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000afe:	3301      	adds	r3, #1
 8000b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b02:	7ffb      	ldrb	r3, [r7, #31]
 8000b04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000b06:	429a      	cmp	r2, r3
 8000b08:	dbf3      	blt.n	8000af2 <find_next_blank_page+0x6e>
	}

	uint32_t page_start_concat = (page_start[0] << 24) | (page_start[1] << 16) | (page_start[2] << 8) | page_start[3];
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	061a      	lsls	r2, r3, #24
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	785b      	ldrb	r3, [r3, #1]
 8000b14:	041b      	lsls	r3, r3, #16
 8000b16:	431a      	orrs	r2, r3
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	789b      	ldrb	r3, [r3, #2]
 8000b1c:	021b      	lsls	r3, r3, #8
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	697a      	ldr	r2, [r7, #20]
 8000b22:	78d2      	ldrb	r2, [r2, #3]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t temp = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t page_address = temp;
 8000b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b2e:	623b      	str	r3, [r7, #32]

	while ((page_start_concat != 0xFFFFFFFF) || (temp == NUM_OF_PAGES)) {
 8000b30:	e027      	b.n	8000b82 <find_next_blank_page+0xfe>
		page_address = temp;
 8000b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b34:	623b      	str	r3, [r7, #32]

		check_busy(hspi, config, BSY_TIMEOUT_MS);
 8000b36:	2305      	movs	r3, #5
 8000b38:	463a      	mov	r2, r7
 8000b3a:	ca06      	ldmia	r2, {r1, r2}
 8000b3c:	68f8      	ldr	r0, [r7, #12]
 8000b3e:	f7ff feca 	bl	80008d6 <check_busy>

		spi_read_data(&FLASH_READEN, firstBytes, page_start, hspi, page_address, config.GPIOx, config.GPIO_Pin);
 8000b42:	7ffb      	ldrb	r3, [r7, #31]
 8000b44:	b299      	uxth	r1, r3
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	88ba      	ldrh	r2, [r7, #4]
 8000b4a:	9202      	str	r2, [sp, #8]
 8000b4c:	9301      	str	r3, [sp, #4]
 8000b4e:	6a3b      	ldr	r3, [r7, #32]
 8000b50:	9300      	str	r3, [sp, #0]
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	697a      	ldr	r2, [r7, #20]
 8000b56:	4818      	ldr	r0, [pc, #96]	@ (8000bb8 <find_next_blank_page+0x134>)
 8000b58:	f001 fd72 	bl	8002640 <spi_read_data>

		page_start_concat = (page_start[0] << 24) | (page_start[1] << 16) | (page_start[2] << 8) | page_start[3];
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	061a      	lsls	r2, r3, #24
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	785b      	ldrb	r3, [r3, #1]
 8000b66:	041b      	lsls	r3, r3, #16
 8000b68:	431a      	orrs	r2, r3
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	789b      	ldrb	r3, [r3, #2]
 8000b6e:	021b      	lsls	r3, r3, #8
 8000b70:	4313      	orrs	r3, r2
 8000b72:	697a      	ldr	r2, [r7, #20]
 8000b74:	78d2      	ldrb	r2, [r2, #3]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	62bb      	str	r3, [r7, #40]	@ 0x28
		temp += PAGE_SIZE;
 8000b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b7c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000b80:	627b      	str	r3, [r7, #36]	@ 0x24
	while ((page_start_concat != 0xFFFFFFFF) || (temp == NUM_OF_PAGES)) {
 8000b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000b88:	d1d3      	bne.n	8000b32 <find_next_blank_page+0xae>
 8000b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d0ce      	beq.n	8000b32 <find_next_blank_page+0xae>
	}

	if (page_address == (NUM_OF_PAGES * PAGE_SIZE)) {
 8000b94:	6a3b      	ldr	r3, [r7, #32]
 8000b96:	4a09      	ldr	r2, [pc, #36]	@ (8000bbc <find_next_blank_page+0x138>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d106      	bne.n	8000baa <find_next_blank_page+0x126>
		if(*end_of_flash_ptr == GPIO_PIN_RESET) {
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d102      	bne.n	8000baa <find_next_blank_page+0x126>
			*end_of_flash_ptr = GPIO_PIN_SET;
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	701a      	strb	r2, [r3, #0]
		}
	}
	return page_address;
 8000baa:	6a3b      	ldr	r3, [r7, #32]
 8000bac:	46b5      	mov	sp, r6
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3734      	adds	r7, #52	@ 0x34
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000bb8:	20000013 	.word	0x20000013
 8000bbc:	00ffff00 	.word	0x00ffff00

08000bc0 <read_page_spi>:

void read_page_spi(uint8_t data_read[PAGE_SIZE], SPI_HandleTypeDef *hspi, uint32_t addr, GPIO_Config config) {
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b088      	sub	sp, #32
 8000bc6:	af04      	add	r7, sp, #16
 8000bc8:	60f8      	str	r0, [r7, #12]
 8000bca:	60b9      	str	r1, [r7, #8]
 8000bcc:	607a      	str	r2, [r7, #4]
 8000bce:	61fb      	str	r3, [r7, #28]

	// Read the status register to ensure no write is currently in progress
	check_busy(hspi, config, BSY_TIMEOUT_MS);
 8000bd0:	2305      	movs	r3, #5
 8000bd2:	f107 021c 	add.w	r2, r7, #28
 8000bd6:	ca06      	ldmia	r2, {r1, r2}
 8000bd8:	68b8      	ldr	r0, [r7, #8]
 8000bda:	f7ff fe7c 	bl	80008d6 <check_busy>
	spi_read_data(&FLASH_READEN, PAGE_SIZE, data_read, hspi, addr, config.GPIOx, config.GPIO_Pin);
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	8c3a      	ldrh	r2, [r7, #32]
 8000be2:	9202      	str	r2, [sp, #8]
 8000be4:	9301      	str	r3, [sp, #4]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	9300      	str	r3, [sp, #0]
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	68fa      	ldr	r2, [r7, #12]
 8000bee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bf2:	4805      	ldr	r0, [pc, #20]	@ (8000c08 <read_page_spi+0x48>)
 8000bf4:	f001 fd24 	bl	8002640 <spi_read_data>
}
 8000bf8:	bf00      	nop
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c02:	b002      	add	sp, #8
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	20000013 	.word	0x20000013

08000c0c <read_manufacturer_id>:

void read_manufacturer_id(uint8_t manu[2], SPI_HandleTypeDef *hspi, GPIO_Config config) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08a      	sub	sp, #40	@ 0x28
 8000c10:	af04      	add	r7, sp, #16
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	4639      	mov	r1, r7
 8000c18:	e881 000c 	stmia.w	r1, {r2, r3}

	// Read the status register to ensure no write is currently in progress
	check_busy(hspi, config, BSY_TIMEOUT_MS);
 8000c1c:	2305      	movs	r3, #5
 8000c1e:	463a      	mov	r2, r7
 8000c20:	ca06      	ldmia	r2, {r1, r2}
 8000c22:	68b8      	ldr	r0, [r7, #8]
 8000c24:	f7ff fe57 	bl	80008d6 <check_busy>

	// Read the entire contents of a page starting from the given address
	uint8_t addr = 0x00;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	75fb      	strb	r3, [r7, #23]
	spi_read_data(&FLASH_READ_MANU, 2, manu, hspi, addr, config.GPIOx, config.GPIO_Pin);
 8000c2c:	7dfb      	ldrb	r3, [r7, #23]
 8000c2e:	683a      	ldr	r2, [r7, #0]
 8000c30:	88b9      	ldrh	r1, [r7, #4]
 8000c32:	9102      	str	r1, [sp, #8]
 8000c34:	9201      	str	r2, [sp, #4]
 8000c36:	9300      	str	r3, [sp, #0]
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	2102      	movs	r1, #2
 8000c3e:	4803      	ldr	r0, [pc, #12]	@ (8000c4c <read_manufacturer_id+0x40>)
 8000c40:	f001 fcfe 	bl	8002640 <spi_read_data>
}
 8000c44:	bf00      	nop
 8000c46:	3718      	adds	r7, #24
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000014 	.word	0x20000014

08000c50 <create_GPIO_Config>:
 */

#include "gpio_struct.h"

// Function to initialize the GPIO_Config struct
GPIO_Config create_GPIO_Config(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8000c50:	b480      	push	{r7}
 8000c52:	b087      	sub	sp, #28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	80fb      	strh	r3, [r7, #6]
    GPIO_Config new_config;
    new_config.GPIOx = GPIOx;
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	613b      	str	r3, [r7, #16]
    new_config.GPIO_Pin = GPIO_Pin;
 8000c62:	88fb      	ldrh	r3, [r7, #6]
 8000c64:	82bb      	strh	r3, [r7, #20]
    return new_config;
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	f107 0310 	add.w	r3, r7, #16
 8000c6e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c72:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000c76:	68f8      	ldr	r0, [r7, #12]
 8000c78:	371c      	adds	r7, #28
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <i2c_read_reg>:
 *      Author: aidencontini
 */

#include "i2c_driver.h"

HAL_StatusTypeDef i2c_read_reg(I2C_HandleTypeDef* hi2c, uint8_t* data_ptr, uint8_t dev_addr, uint8_t* register_addr) {
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b088      	sub	sp, #32
 8000c86:	af02      	add	r7, sp, #8
 8000c88:	60f8      	str	r0, [r7, #12]
 8000c8a:	60b9      	str	r1, [r7, #8]
 8000c8c:	603b      	str	r3, [r7, #0]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(hi2c, (dev_addr << 1) & 0xFE, register_addr, 1, I2C_TIMEOUT_SML);
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	b299      	uxth	r1, r3
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	9300      	str	r3, [sp, #0]
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	683a      	ldr	r2, [r7, #0]
 8000ca4:	68f8      	ldr	r0, [r7, #12]
 8000ca6:	f004 f923 	bl	8004ef0 <HAL_I2C_Master_Transmit>
	HAL_StatusTypeDef hal_status = HAL_I2C_Master_Receive(hi2c, (dev_addr << 1) | 0x01, data_ptr, 1, I2C_TIMEOUT_SML);
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	b21b      	sxth	r3, r3
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	b21b      	sxth	r3, r3
 8000cb6:	b299      	uxth	r1, r3
 8000cb8:	2301      	movs	r3, #1
 8000cba:	9300      	str	r3, [sp, #0]
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	68ba      	ldr	r2, [r7, #8]
 8000cc0:	68f8      	ldr	r0, [r7, #12]
 8000cc2:	f004 fa13 	bl	80050ec <HAL_I2C_Master_Receive>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	75fb      	strb	r3, [r7, #23]
	return hal_status;
 8000cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3718      	adds	r7, #24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <i2c_burst_read>:

HAL_StatusTypeDef i2c_burst_read(I2C_HandleTypeDef* hi2c, uint8_t dev_addr, uint8_t register_addr, uint8_t size, uint8_t data_buffer[size]) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af02      	add	r7, sp, #8
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	4608      	mov	r0, r1
 8000cde:	4611      	mov	r1, r2
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	70fb      	strb	r3, [r7, #3]
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	70bb      	strb	r3, [r7, #2]
 8000cea:	4613      	mov	r3, r2
 8000cec:	707b      	strb	r3, [r7, #1]
	// In order to read multiple bytes, it is necessary to assert the most significant bit of the sub-address field.
	uint8_t addr = register_addr | 0x80;
 8000cee:	78bb      	ldrb	r3, [r7, #2]
 8000cf0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(hi2c, (dev_addr << 1) & 0xFE, &addr, 1, I2C_TIMEOUT_SML);
 8000cf8:	78fb      	ldrb	r3, [r7, #3]
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	b299      	uxth	r1, r3
 8000d02:	f107 020e 	add.w	r2, r7, #14
 8000d06:	2301      	movs	r3, #1
 8000d08:	9300      	str	r3, [sp, #0]
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f004 f8ef 	bl	8004ef0 <HAL_I2C_Master_Transmit>
	HAL_StatusTypeDef hal_status =  HAL_I2C_Master_Receive(hi2c, (dev_addr << 1) | 0x01, data_buffer, size, I2C_TIMEOUT_LRG);
 8000d12:	78fb      	ldrb	r3, [r7, #3]
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	b21b      	sxth	r3, r3
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	b21b      	sxth	r3, r3
 8000d1e:	b299      	uxth	r1, r3
 8000d20:	787b      	ldrb	r3, [r7, #1]
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	220a      	movs	r2, #10
 8000d26:	9200      	str	r2, [sp, #0]
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f004 f9de 	bl	80050ec <HAL_I2C_Master_Receive>
 8000d30:	4603      	mov	r3, r0
 8000d32:	73fb      	strb	r3, [r7, #15]
	return hal_status;
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <i2c_write_reg>:
	HAL_I2C_Master_Transmit(hi2c, (dev_addr << 1) & 0xFE, &addr, 1, I2C_TIMEOUT_SML);
	HAL_StatusTypeDef hal_status =  HAL_I2C_Master_Receive(hi2c, (dev_addr << 1) | 0x01, data_buffer, size, I2C_TIMEOUT_LRG);
	return hal_status;
}

HAL_StatusTypeDef i2c_write_reg(I2C_HandleTypeDef* hi2c, uint8_t dev_addr, uint8_t* register_addr, uint8_t data) {
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b088      	sub	sp, #32
 8000d42:	af02      	add	r7, sp, #8
 8000d44:	60f8      	str	r0, [r7, #12]
 8000d46:	607a      	str	r2, [r7, #4]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	72fb      	strb	r3, [r7, #11]
 8000d4e:	4613      	mov	r3, r2
 8000d50:	72bb      	strb	r3, [r7, #10]
	uint8_t data_tx[2] = {*register_addr, data};
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	753b      	strb	r3, [r7, #20]
 8000d58:	7abb      	ldrb	r3, [r7, #10]
 8000d5a:	757b      	strb	r3, [r7, #21]
	HAL_StatusTypeDef hal_status = HAL_I2C_Master_Transmit(hi2c, (dev_addr << 1) & 0xFE, data_tx, 2, I2C_TIMEOUT_SML);
 8000d5c:	7afb      	ldrb	r3, [r7, #11]
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	b299      	uxth	r1, r3
 8000d66:	f107 0214 	add.w	r2, r7, #20
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	9300      	str	r3, [sp, #0]
 8000d6e:	2302      	movs	r3, #2
 8000d70:	68f8      	ldr	r0, [r7, #12]
 8000d72:	f004 f8bd 	bl	8004ef0 <HAL_I2C_Master_Transmit>
 8000d76:	4603      	mov	r3, r0
 8000d78:	75fb      	strb	r3, [r7, #23]
	return hal_status;
 8000d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d8a:	f002 f94b 	bl	8003024 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d8e:	f000 f921 	bl	8000fd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d92:	f000 fba1 	bl	80014d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d96:	f000 fb69 	bl	800146c <MX_DMA_Init>
  MX_I2C1_Init();
 8000d9a:	f000 f9bf 	bl	800111c <MX_I2C1_Init>
  MX_RTC_Init();
 8000d9e:	f000 fa3d 	bl	800121c <MX_RTC_Init>
  MX_SPI1_Init();
 8000da2:	f000 fa61 	bl	8001268 <MX_SPI1_Init>
  MX_TIM6_Init();
 8000da6:	f000 facb 	bl	8001340 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8000daa:	f000 fb35 	bl	8001418 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000dae:	f000 fa91 	bl	80012d4 <MX_SPI2_Init>
  MX_CAN2_Init();
 8000db2:	f000 f97b 	bl	80010ac <MX_CAN2_Init>
  MX_TIM7_Init();
 8000db6:	f000 faf9 	bl	80013ac <MX_TIM7_Init>
  MX_I2C3_Init();
 8000dba:	f000 f9ef 	bl	800119c <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  systemInit();
 8000dbe:	f000 fc73 	bl	80016a8 <systemInit>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // If the flight jumper has been removed (GPIO rising edge), reset the time to 0.
	  if(rtc_reset == FLAG_SET) {
 8000dc2:	4b6b      	ldr	r3, [pc, #428]	@ (8000f70 <main+0x1ec>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d105      	bne.n	8000dd6 <main+0x52>
		  initialise_rtc_default(&hrtc);
 8000dca:	486a      	ldr	r0, [pc, #424]	@ (8000f74 <main+0x1f0>)
 8000dcc:	f001 fb68 	bl	80024a0 <initialise_rtc_default>
		  rtc_reset = FLAG_RESET;
 8000dd0:	4b67      	ldr	r3, [pc, #412]	@ (8000f70 <main+0x1ec>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	701a      	strb	r2, [r3, #0]
	  }

	  // Handle UART receive flag
	  if(uart2_rec_flag == FLAG_SET) {
 8000dd6:	4b68      	ldr	r3, [pc, #416]	@ (8000f78 <main+0x1f4>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d104      	bne.n	8000de8 <main+0x64>
		  handleUART();
 8000dde:	f000 fe59 	bl	8001a94 <handleUART>
		  uart2_rec_flag = FLAG_RESET;
 8000de2:	4b65      	ldr	r3, [pc, #404]	@ (8000f78 <main+0x1f4>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	701a      	strb	r2, [r3, #0]
	  }

	  // Handle CAN receive flag
	  if(CAN_RX_Flag == FLAG_SET) {
 8000de8:	4b64      	ldr	r3, [pc, #400]	@ (8000f7c <main+0x1f8>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d117      	bne.n	8000e20 <main+0x9c>
		  if((CAN_First_Msg == FLAG_SET) && (flight_state == GROUND)) {
 8000df0:	4b63      	ldr	r3, [pc, #396]	@ (8000f80 <main+0x1fc>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d106      	bne.n	8000e06 <main+0x82>
 8000df8:	4b62      	ldr	r3, [pc, #392]	@ (8000f84 <main+0x200>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d102      	bne.n	8000e06 <main+0x82>
			  flight_state = LOADED;
 8000e00:	4b60      	ldr	r3, [pc, #384]	@ (8000f84 <main+0x200>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	701a      	strb	r2, [r3, #0]
		  }

		  handleCAN();
 8000e06:	f000 fddb 	bl	80019c0 <handleCAN>
		  HAL_GPIO_TogglePin(led_green.GPIOx, led_green.GPIO_Pin);
 8000e0a:	4b5f      	ldr	r3, [pc, #380]	@ (8000f88 <main+0x204>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a5e      	ldr	r2, [pc, #376]	@ (8000f88 <main+0x204>)
 8000e10:	8892      	ldrh	r2, [r2, #4]
 8000e12:	4611      	mov	r1, r2
 8000e14:	4618      	mov	r0, r3
 8000e16:	f003 fef4 	bl	8004c02 <HAL_GPIO_TogglePin>
		  CAN_RX_Flag = FLAG_RESET;
 8000e1a:	4b58      	ldr	r3, [pc, #352]	@ (8000f7c <main+0x1f8>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	701a      	strb	r2, [r3, #0]
	  }

	  if (tim7_overflow_flag == FLAG_SET) {
 8000e20:	4b5a      	ldr	r3, [pc, #360]	@ (8000f8c <main+0x208>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d12b      	bne.n	8000e80 <main+0xfc>
		  HAL_GPIO_TogglePin(led_orange.GPIOx, led_orange.GPIO_Pin);		// Toggle LED
 8000e28:	4b59      	ldr	r3, [pc, #356]	@ (8000f90 <main+0x20c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a58      	ldr	r2, [pc, #352]	@ (8000f90 <main+0x20c>)
 8000e2e:	8892      	ldrh	r2, [r2, #4]
 8000e30:	4611      	mov	r1, r2
 8000e32:	4618      	mov	r0, r3
 8000e34:	f003 fee5 	bl	8004c02 <HAL_GPIO_TogglePin>
		  sysStatus = systemStatus(&hspi1, &hspi2, i2c_bme280, i2c_accel);
 8000e38:	4b56      	ldr	r3, [pc, #344]	@ (8000f94 <main+0x210>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b56      	ldr	r3, [pc, #344]	@ (8000f98 <main+0x214>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4956      	ldr	r1, [pc, #344]	@ (8000f9c <main+0x218>)
 8000e42:	4857      	ldr	r0, [pc, #348]	@ (8000fa0 <main+0x21c>)
 8000e44:	f000 fffc 	bl	8001e40 <systemStatus>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	4b55      	ldr	r3, [pc, #340]	@ (8000fa4 <main+0x220>)
 8000e4e:	701a      	strb	r2, [r3, #0]

		  if(sysStatus == 0x00) {
 8000e50:	4b54      	ldr	r3, [pc, #336]	@ (8000fa4 <main+0x220>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d108      	bne.n	8000e6a <main+0xe6>
			  HAL_GPIO_WritePin(status_led.GPIOx, status_led.GPIO_Pin, GPIO_PIN_SET);	// Turn LED off
 8000e58:	4b53      	ldr	r3, [pc, #332]	@ (8000fa8 <main+0x224>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a52      	ldr	r2, [pc, #328]	@ (8000fa8 <main+0x224>)
 8000e5e:	8891      	ldrh	r1, [r2, #4]
 8000e60:	2201      	movs	r2, #1
 8000e62:	4618      	mov	r0, r3
 8000e64:	f003 feb4 	bl	8004bd0 <HAL_GPIO_WritePin>
 8000e68:	e007      	b.n	8000e7a <main+0xf6>
		  } else {
			  HAL_GPIO_WritePin(status_led.GPIOx, status_led.GPIO_Pin, GPIO_PIN_RESET);
 8000e6a:	4b4f      	ldr	r3, [pc, #316]	@ (8000fa8 <main+0x224>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a4e      	ldr	r2, [pc, #312]	@ (8000fa8 <main+0x224>)
 8000e70:	8891      	ldrh	r1, [r2, #4]
 8000e72:	2200      	movs	r2, #0
 8000e74:	4618      	mov	r0, r3
 8000e76:	f003 feab 	bl	8004bd0 <HAL_GPIO_WritePin>
		  }

		  tim7_overflow_flag = FLAG_RESET;
 8000e7a:	4b44      	ldr	r3, [pc, #272]	@ (8000f8c <main+0x208>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	701a      	strb	r2, [r3, #0]
	  }

	  // Handle Timer 6 overflow flag
	  if(tim6_overflow_flag == FLAG_SET) {
 8000e80:	4b4a      	ldr	r3, [pc, #296]	@ (8000fac <main+0x228>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d10a      	bne.n	8000e9e <main+0x11a>
		  readAllSensors(i2c_accel, i2c_bme280, &hrtc);
 8000e88:	4b43      	ldr	r3, [pc, #268]	@ (8000f98 <main+0x214>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a41      	ldr	r2, [pc, #260]	@ (8000f94 <main+0x210>)
 8000e8e:	6811      	ldr	r1, [r2, #0]
 8000e90:	4a38      	ldr	r2, [pc, #224]	@ (8000f74 <main+0x1f0>)
 8000e92:	4618      	mov	r0, r3
 8000e94:	f001 fa20 	bl	80022d8 <readAllSensors>
		  tim6_overflow_flag = FLAG_RESET;
 8000e98:	4b44      	ldr	r3, [pc, #272]	@ (8000fac <main+0x228>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	701a      	strb	r2, [r3, #0]
	  }

	  // Write data to flash when buffer is full
	  if(byte_tracker > (PAGE_SIZE - READ_SIZE)) {
 8000e9e:	4b44      	ldr	r3, [pc, #272]	@ (8000fb0 <main+0x22c>)
 8000ea0:	881b      	ldrh	r3, [r3, #0]
 8000ea2:	2beb      	cmp	r3, #235	@ 0xeb
 8000ea4:	d953      	bls.n	8000f4e <main+0x1ca>
		  GPIO_PinState flight_mode = HAL_GPIO_ReadPin(jmp_flight.GPIOx, jmp_flight.GPIO_Pin);
 8000ea6:	4b43      	ldr	r3, [pc, #268]	@ (8000fb4 <main+0x230>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a42      	ldr	r2, [pc, #264]	@ (8000fb4 <main+0x230>)
 8000eac:	8892      	ldrh	r2, [r2, #4]
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	4611      	mov	r1, r2
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f003 fe74 	bl	8004ba0 <HAL_GPIO_ReadPin>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	71fb      	strb	r3, [r7, #7]
		  if((flight_mode & !(end_of_flash)) == FLAG_SET) {
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	4a3e      	ldr	r2, [pc, #248]	@ (8000fb8 <main+0x234>)
 8000ec0:	7812      	ldrb	r2, [r2, #0]
 8000ec2:	2a00      	cmp	r2, #0
 8000ec4:	bf0c      	ite	eq
 8000ec6:	2201      	moveq	r2, #1
 8000ec8:	2200      	movne	r2, #0
 8000eca:	b2d2      	uxtb	r2, r2
 8000ecc:	4013      	ands	r3, r2
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d133      	bne.n	8000f3a <main+0x1b6>
			  HAL_GPIO_WritePin(led_green.GPIOx, led_green.GPIO_Pin, GPIO_PIN_SET);		// Toggle LED when writing data
 8000ed2:	4b2d      	ldr	r3, [pc, #180]	@ (8000f88 <main+0x204>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a2c      	ldr	r2, [pc, #176]	@ (8000f88 <main+0x204>)
 8000ed8:	8891      	ldrh	r1, [r2, #4]
 8000eda:	2201      	movs	r2, #1
 8000edc:	4618      	mov	r0, r3
 8000ede:	f003 fe77 	bl	8004bd0 <HAL_GPIO_WritePin>

			  write_data_spi_dma(data_buffer_tx[buffer_tracker], &hspi1, next_blank_page, cs_spi1);
 8000ee2:	4b36      	ldr	r3, [pc, #216]	@ (8000fbc <main+0x238>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	021b      	lsls	r3, r3, #8
 8000ee8:	4a35      	ldr	r2, [pc, #212]	@ (8000fc0 <main+0x23c>)
 8000eea:	1898      	adds	r0, r3, r2
 8000eec:	4b35      	ldr	r3, [pc, #212]	@ (8000fc4 <main+0x240>)
 8000eee:	6819      	ldr	r1, [r3, #0]
 8000ef0:	4b35      	ldr	r3, [pc, #212]	@ (8000fc8 <main+0x244>)
 8000ef2:	685a      	ldr	r2, [r3, #4]
 8000ef4:	9200      	str	r2, [sp, #0]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	460a      	mov	r2, r1
 8000efa:	4929      	ldr	r1, [pc, #164]	@ (8000fa0 <main+0x21c>)
 8000efc:	f7ff fd94 	bl	8000a28 <write_data_spi_dma>
			  write_data_spi_dma(data_buffer_tx[buffer_tracker], &hspi2, next_blank_page, cs_spi2);
 8000f00:	4b2e      	ldr	r3, [pc, #184]	@ (8000fbc <main+0x238>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	021b      	lsls	r3, r3, #8
 8000f06:	4a2e      	ldr	r2, [pc, #184]	@ (8000fc0 <main+0x23c>)
 8000f08:	1898      	adds	r0, r3, r2
 8000f0a:	4b2e      	ldr	r3, [pc, #184]	@ (8000fc4 <main+0x240>)
 8000f0c:	6819      	ldr	r1, [r3, #0]
 8000f0e:	4b2f      	ldr	r3, [pc, #188]	@ (8000fcc <main+0x248>)
 8000f10:	685a      	ldr	r2, [r3, #4]
 8000f12:	9200      	str	r2, [sp, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	460a      	mov	r2, r1
 8000f18:	4920      	ldr	r1, [pc, #128]	@ (8000f9c <main+0x218>)
 8000f1a:	f7ff fd85 	bl	8000a28 <write_data_spi_dma>
			  next_blank_page += PAGE_SIZE;
 8000f1e:	4b29      	ldr	r3, [pc, #164]	@ (8000fc4 <main+0x240>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000f26:	4a27      	ldr	r2, [pc, #156]	@ (8000fc4 <main+0x240>)
 8000f28:	6013      	str	r3, [r2, #0]

			  HAL_GPIO_WritePin(led_green.GPIOx, led_green.GPIO_Pin, GPIO_PIN_RESET);		// Toggle LED when writing data
 8000f2a:	4b17      	ldr	r3, [pc, #92]	@ (8000f88 <main+0x204>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a16      	ldr	r2, [pc, #88]	@ (8000f88 <main+0x204>)
 8000f30:	8891      	ldrh	r1, [r2, #4]
 8000f32:	2200      	movs	r2, #0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f003 fe4b 	bl	8004bd0 <HAL_GPIO_WritePin>
		  }

		// Reset the buffer trackers
		buffer_tracker = buffer_tracker ^ 0x01;
 8000f3a:	4b20      	ldr	r3, [pc, #128]	@ (8000fbc <main+0x238>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	f083 0301 	eor.w	r3, r3, #1
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	4b1d      	ldr	r3, [pc, #116]	@ (8000fbc <main+0x238>)
 8000f46:	701a      	strb	r2, [r3, #0]
		byte_tracker = 0;
 8000f48:	4b19      	ldr	r3, [pc, #100]	@ (8000fb0 <main+0x22c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	801a      	strh	r2, [r3, #0]
	  }

	  if(next_blank_page == (NUM_OF_PAGES*PAGE_SIZE)) {
 8000f4e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc4 <main+0x240>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a1f      	ldr	r2, [pc, #124]	@ (8000fd0 <main+0x24c>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	f47f af34 	bne.w	8000dc2 <main+0x3e>
		if(end_of_flash == GPIO_PIN_RESET) {
 8000f5a:	4b17      	ldr	r3, [pc, #92]	@ (8000fb8 <main+0x234>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	f47f af2f 	bne.w	8000dc2 <main+0x3e>
		  // TODO - Error Handle if SPI1 not found
		  next_blank_page = find_next_blank_page_all();
 8000f64:	f000 ff42 	bl	8001dec <find_next_blank_page_all>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	4a16      	ldr	r2, [pc, #88]	@ (8000fc4 <main+0x240>)
 8000f6c:	6013      	str	r3, [r2, #0]
	  if(rtc_reset == FLAG_SET) {
 8000f6e:	e728      	b.n	8000dc2 <main+0x3e>
 8000f70:	2000061c 	.word	0x2000061c
 8000f74:	20000118 	.word	0x20000118
 8000f78:	2000038a 	.word	0x2000038a
 8000f7c:	200003b4 	.word	0x200003b4
 8000f80:	200003b5 	.word	0x200003b5
 8000f84:	2000061e 	.word	0x2000061e
 8000f88:	200005e4 	.word	0x200005e4
 8000f8c:	200003b7 	.word	0x200003b7
 8000f90:	200005dc 	.word	0x200005dc
 8000f94:	20000384 	.word	0x20000384
 8000f98:	20000380 	.word	0x20000380
 8000f9c:	20000190 	.word	0x20000190
 8000fa0:	20000138 	.word	0x20000138
 8000fa4:	2000061d 	.word	0x2000061d
 8000fa8:	200005ec 	.word	0x200005ec
 8000fac:	200003b6 	.word	0x200003b6
 8000fb0:	200005d8 	.word	0x200005d8
 8000fb4:	20000614 	.word	0x20000614
 8000fb8:	200005da 	.word	0x200005da
 8000fbc:	200005b8 	.word	0x200005b8
 8000fc0:	200003b8 	.word	0x200003b8
 8000fc4:	200005d4 	.word	0x200005d4
 8000fc8:	200005f4 	.word	0x200005f4
 8000fcc:	20000604 	.word	0x20000604
 8000fd0:	00ffff00 	.word	0x00ffff00

08000fd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b094      	sub	sp, #80	@ 0x50
 8000fd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fda:	f107 0320 	add.w	r3, r7, #32
 8000fde:	2230      	movs	r2, #48	@ 0x30
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f008 fa94 	bl	8009510 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	4b29      	ldr	r3, [pc, #164]	@ (80010a4 <SystemClock_Config+0xd0>)
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001000:	4a28      	ldr	r2, [pc, #160]	@ (80010a4 <SystemClock_Config+0xd0>)
 8001002:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001006:	6413      	str	r3, [r2, #64]	@ 0x40
 8001008:	4b26      	ldr	r3, [pc, #152]	@ (80010a4 <SystemClock_Config+0xd0>)
 800100a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001014:	2300      	movs	r3, #0
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	4b23      	ldr	r3, [pc, #140]	@ (80010a8 <SystemClock_Config+0xd4>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a22      	ldr	r2, [pc, #136]	@ (80010a8 <SystemClock_Config+0xd4>)
 800101e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001022:	6013      	str	r3, [r2, #0]
 8001024:	4b20      	ldr	r3, [pc, #128]	@ (80010a8 <SystemClock_Config+0xd4>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001030:	230a      	movs	r3, #10
 8001032:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001034:	2301      	movs	r3, #1
 8001036:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001038:	2310      	movs	r3, #16
 800103a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800103c:	2301      	movs	r3, #1
 800103e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001040:	2302      	movs	r3, #2
 8001042:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001044:	2300      	movs	r3, #0
 8001046:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001048:	2310      	movs	r3, #16
 800104a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800104c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001050:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001052:	2302      	movs	r3, #2
 8001054:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001056:	2304      	movs	r3, #4
 8001058:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800105a:	f107 0320 	add.w	r3, r7, #32
 800105e:	4618      	mov	r0, r3
 8001060:	f004 fea0 	bl	8005da4 <HAL_RCC_OscConfig>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800106a:	f000 fee3 	bl	8001e34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800106e:	230f      	movs	r3, #15
 8001070:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001072:	2302      	movs	r3, #2
 8001074:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800107a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800107e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001080:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001084:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	2105      	movs	r1, #5
 800108c:	4618      	mov	r0, r3
 800108e:	f005 f901 	bl	8006294 <HAL_RCC_ClockConfig>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001098:	f000 fecc 	bl	8001e34 <Error_Handler>
  }
}
 800109c:	bf00      	nop
 800109e:	3750      	adds	r7, #80	@ 0x50
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40007000 	.word	0x40007000

080010ac <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80010b0:	4b18      	ldr	r3, [pc, #96]	@ (8001114 <MX_CAN2_Init+0x68>)
 80010b2:	4a19      	ldr	r2, [pc, #100]	@ (8001118 <MX_CAN2_Init+0x6c>)
 80010b4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 24;
 80010b6:	4b17      	ldr	r3, [pc, #92]	@ (8001114 <MX_CAN2_Init+0x68>)
 80010b8:	2218      	movs	r2, #24
 80010ba:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80010bc:	4b15      	ldr	r3, [pc, #84]	@ (8001114 <MX_CAN2_Init+0x68>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80010c2:	4b14      	ldr	r3, [pc, #80]	@ (8001114 <MX_CAN2_Init+0x68>)
 80010c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80010c8:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_11TQ;
 80010ca:	4b12      	ldr	r3, [pc, #72]	@ (8001114 <MX_CAN2_Init+0x68>)
 80010cc:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 80010d0:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 80010d2:	4b10      	ldr	r3, [pc, #64]	@ (8001114 <MX_CAN2_Init+0x68>)
 80010d4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80010d8:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80010da:	4b0e      	ldr	r3, [pc, #56]	@ (8001114 <MX_CAN2_Init+0x68>)
 80010dc:	2200      	movs	r2, #0
 80010de:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80010e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001114 <MX_CAN2_Init+0x68>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80010e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001114 <MX_CAN2_Init+0x68>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80010ec:	4b09      	ldr	r3, [pc, #36]	@ (8001114 <MX_CAN2_Init+0x68>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80010f2:	4b08      	ldr	r3, [pc, #32]	@ (8001114 <MX_CAN2_Init+0x68>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80010f8:	4b06      	ldr	r3, [pc, #24]	@ (8001114 <MX_CAN2_Init+0x68>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80010fe:	4805      	ldr	r0, [pc, #20]	@ (8001114 <MX_CAN2_Init+0x68>)
 8001100:	f002 f826 	bl	8003150 <HAL_CAN_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 800110a:	f000 fe93 	bl	8001e34 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000048 	.word	0x20000048
 8001118:	40006800 	.word	0x40006800

0800111c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001120:	4b1b      	ldr	r3, [pc, #108]	@ (8001190 <MX_I2C1_Init+0x74>)
 8001122:	4a1c      	ldr	r2, [pc, #112]	@ (8001194 <MX_I2C1_Init+0x78>)
 8001124:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001126:	4b1a      	ldr	r3, [pc, #104]	@ (8001190 <MX_I2C1_Init+0x74>)
 8001128:	4a1b      	ldr	r2, [pc, #108]	@ (8001198 <MX_I2C1_Init+0x7c>)
 800112a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800112c:	4b18      	ldr	r3, [pc, #96]	@ (8001190 <MX_I2C1_Init+0x74>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001132:	4b17      	ldr	r3, [pc, #92]	@ (8001190 <MX_I2C1_Init+0x74>)
 8001134:	2200      	movs	r2, #0
 8001136:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001138:	4b15      	ldr	r3, [pc, #84]	@ (8001190 <MX_I2C1_Init+0x74>)
 800113a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800113e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001140:	4b13      	ldr	r3, [pc, #76]	@ (8001190 <MX_I2C1_Init+0x74>)
 8001142:	2200      	movs	r2, #0
 8001144:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001146:	4b12      	ldr	r3, [pc, #72]	@ (8001190 <MX_I2C1_Init+0x74>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800114c:	4b10      	ldr	r3, [pc, #64]	@ (8001190 <MX_I2C1_Init+0x74>)
 800114e:	2200      	movs	r2, #0
 8001150:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001152:	4b0f      	ldr	r3, [pc, #60]	@ (8001190 <MX_I2C1_Init+0x74>)
 8001154:	2200      	movs	r2, #0
 8001156:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001158:	480d      	ldr	r0, [pc, #52]	@ (8001190 <MX_I2C1_Init+0x74>)
 800115a:	f003 fd85 	bl	8004c68 <HAL_I2C_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001164:	f000 fe66 	bl	8001e34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001168:	2100      	movs	r1, #0
 800116a:	4809      	ldr	r0, [pc, #36]	@ (8001190 <MX_I2C1_Init+0x74>)
 800116c:	f004 fd76 	bl	8005c5c <HAL_I2CEx_ConfigAnalogFilter>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001176:	f000 fe5d 	bl	8001e34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800117a:	2100      	movs	r1, #0
 800117c:	4804      	ldr	r0, [pc, #16]	@ (8001190 <MX_I2C1_Init+0x74>)
 800117e:	f004 fda9 	bl	8005cd4 <HAL_I2CEx_ConfigDigitalFilter>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001188:	f000 fe54 	bl	8001e34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000070 	.word	0x20000070
 8001194:	40005400 	.word	0x40005400
 8001198:	000186a0 	.word	0x000186a0

0800119c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80011a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001210 <MX_I2C3_Init+0x74>)
 80011a2:	4a1c      	ldr	r2, [pc, #112]	@ (8001214 <MX_I2C3_Init+0x78>)
 80011a4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80011a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001210 <MX_I2C3_Init+0x74>)
 80011a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001218 <MX_I2C3_Init+0x7c>)
 80011aa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011ac:	4b18      	ldr	r3, [pc, #96]	@ (8001210 <MX_I2C3_Init+0x74>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80011b2:	4b17      	ldr	r3, [pc, #92]	@ (8001210 <MX_I2C3_Init+0x74>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011b8:	4b15      	ldr	r3, [pc, #84]	@ (8001210 <MX_I2C3_Init+0x74>)
 80011ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011be:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011c0:	4b13      	ldr	r3, [pc, #76]	@ (8001210 <MX_I2C3_Init+0x74>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80011c6:	4b12      	ldr	r3, [pc, #72]	@ (8001210 <MX_I2C3_Init+0x74>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011cc:	4b10      	ldr	r3, [pc, #64]	@ (8001210 <MX_I2C3_Init+0x74>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001210 <MX_I2C3_Init+0x74>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80011d8:	480d      	ldr	r0, [pc, #52]	@ (8001210 <MX_I2C3_Init+0x74>)
 80011da:	f003 fd45 	bl	8004c68 <HAL_I2C_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80011e4:	f000 fe26 	bl	8001e34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011e8:	2100      	movs	r1, #0
 80011ea:	4809      	ldr	r0, [pc, #36]	@ (8001210 <MX_I2C3_Init+0x74>)
 80011ec:	f004 fd36 	bl	8005c5c <HAL_I2CEx_ConfigAnalogFilter>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80011f6:	f000 fe1d 	bl	8001e34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80011fa:	2100      	movs	r1, #0
 80011fc:	4804      	ldr	r0, [pc, #16]	@ (8001210 <MX_I2C3_Init+0x74>)
 80011fe:	f004 fd69 	bl	8005cd4 <HAL_I2CEx_ConfigDigitalFilter>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001208:	f000 fe14 	bl	8001e34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}
 8001210:	200000c4 	.word	0x200000c4
 8001214:	40005c00 	.word	0x40005c00
 8001218:	000186a0 	.word	0x000186a0

0800121c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001220:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <MX_RTC_Init+0x44>)
 8001222:	4a10      	ldr	r2, [pc, #64]	@ (8001264 <MX_RTC_Init+0x48>)
 8001224:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001226:	4b0e      	ldr	r3, [pc, #56]	@ (8001260 <MX_RTC_Init+0x44>)
 8001228:	2200      	movs	r2, #0
 800122a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800122c:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <MX_RTC_Init+0x44>)
 800122e:	227f      	movs	r2, #127	@ 0x7f
 8001230:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001232:	4b0b      	ldr	r3, [pc, #44]	@ (8001260 <MX_RTC_Init+0x44>)
 8001234:	22ff      	movs	r2, #255	@ 0xff
 8001236:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001238:	4b09      	ldr	r3, [pc, #36]	@ (8001260 <MX_RTC_Init+0x44>)
 800123a:	2200      	movs	r2, #0
 800123c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800123e:	4b08      	ldr	r3, [pc, #32]	@ (8001260 <MX_RTC_Init+0x44>)
 8001240:	2200      	movs	r2, #0
 8001242:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001244:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <MX_RTC_Init+0x44>)
 8001246:	2200      	movs	r2, #0
 8001248:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800124a:	4805      	ldr	r0, [pc, #20]	@ (8001260 <MX_RTC_Init+0x44>)
 800124c:	f005 fbc2 	bl	80069d4 <HAL_RTC_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001256:	f000 fded 	bl	8001e34 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000118 	.word	0x20000118
 8001264:	40002800 	.word	0x40002800

08001268 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800126c:	4b17      	ldr	r3, [pc, #92]	@ (80012cc <MX_SPI1_Init+0x64>)
 800126e:	4a18      	ldr	r2, [pc, #96]	@ (80012d0 <MX_SPI1_Init+0x68>)
 8001270:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001272:	4b16      	ldr	r3, [pc, #88]	@ (80012cc <MX_SPI1_Init+0x64>)
 8001274:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001278:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800127a:	4b14      	ldr	r3, [pc, #80]	@ (80012cc <MX_SPI1_Init+0x64>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001280:	4b12      	ldr	r3, [pc, #72]	@ (80012cc <MX_SPI1_Init+0x64>)
 8001282:	2200      	movs	r2, #0
 8001284:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001286:	4b11      	ldr	r3, [pc, #68]	@ (80012cc <MX_SPI1_Init+0x64>)
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800128c:	4b0f      	ldr	r3, [pc, #60]	@ (80012cc <MX_SPI1_Init+0x64>)
 800128e:	2200      	movs	r2, #0
 8001290:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001292:	4b0e      	ldr	r3, [pc, #56]	@ (80012cc <MX_SPI1_Init+0x64>)
 8001294:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001298:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800129a:	4b0c      	ldr	r3, [pc, #48]	@ (80012cc <MX_SPI1_Init+0x64>)
 800129c:	2208      	movs	r2, #8
 800129e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012a0:	4b0a      	ldr	r3, [pc, #40]	@ (80012cc <MX_SPI1_Init+0x64>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012a6:	4b09      	ldr	r3, [pc, #36]	@ (80012cc <MX_SPI1_Init+0x64>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ac:	4b07      	ldr	r3, [pc, #28]	@ (80012cc <MX_SPI1_Init+0x64>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012b2:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <MX_SPI1_Init+0x64>)
 80012b4:	220a      	movs	r2, #10
 80012b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012b8:	4804      	ldr	r0, [pc, #16]	@ (80012cc <MX_SPI1_Init+0x64>)
 80012ba:	f005 fe97 	bl	8006fec <HAL_SPI_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012c4:	f000 fdb6 	bl	8001e34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000138 	.word	0x20000138
 80012d0:	40013000 	.word	0x40013000

080012d4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80012d8:	4b17      	ldr	r3, [pc, #92]	@ (8001338 <MX_SPI2_Init+0x64>)
 80012da:	4a18      	ldr	r2, [pc, #96]	@ (800133c <MX_SPI2_Init+0x68>)
 80012dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012de:	4b16      	ldr	r3, [pc, #88]	@ (8001338 <MX_SPI2_Init+0x64>)
 80012e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012e6:	4b14      	ldr	r3, [pc, #80]	@ (8001338 <MX_SPI2_Init+0x64>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80012ec:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <MX_SPI2_Init+0x64>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012f2:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <MX_SPI2_Init+0x64>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001338 <MX_SPI2_Init+0x64>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80012fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001338 <MX_SPI2_Init+0x64>)
 8001300:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001304:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001306:	4b0c      	ldr	r3, [pc, #48]	@ (8001338 <MX_SPI2_Init+0x64>)
 8001308:	2200      	movs	r2, #0
 800130a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800130c:	4b0a      	ldr	r3, [pc, #40]	@ (8001338 <MX_SPI2_Init+0x64>)
 800130e:	2200      	movs	r2, #0
 8001310:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001312:	4b09      	ldr	r3, [pc, #36]	@ (8001338 <MX_SPI2_Init+0x64>)
 8001314:	2200      	movs	r2, #0
 8001316:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001318:	4b07      	ldr	r3, [pc, #28]	@ (8001338 <MX_SPI2_Init+0x64>)
 800131a:	2200      	movs	r2, #0
 800131c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800131e:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <MX_SPI2_Init+0x64>)
 8001320:	220a      	movs	r2, #10
 8001322:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001324:	4804      	ldr	r0, [pc, #16]	@ (8001338 <MX_SPI2_Init+0x64>)
 8001326:	f005 fe61 	bl	8006fec <HAL_SPI_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001330:	f000 fd80 	bl	8001e34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000190 	.word	0x20000190
 800133c:	40003800 	.word	0x40003800

08001340 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001346:	463b      	mov	r3, r7
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800134e:	4b15      	ldr	r3, [pc, #84]	@ (80013a4 <MX_TIM6_Init+0x64>)
 8001350:	4a15      	ldr	r2, [pc, #84]	@ (80013a8 <MX_TIM6_Init+0x68>)
 8001352:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 20999;
 8001354:	4b13      	ldr	r3, [pc, #76]	@ (80013a4 <MX_TIM6_Init+0x64>)
 8001356:	f245 2207 	movw	r2, #20999	@ 0x5207
 800135a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135c:	4b11      	ldr	r3, [pc, #68]	@ (80013a4 <MX_TIM6_Init+0x64>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 80;
 8001362:	4b10      	ldr	r3, [pc, #64]	@ (80013a4 <MX_TIM6_Init+0x64>)
 8001364:	2250      	movs	r2, #80	@ 0x50
 8001366:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001368:	4b0e      	ldr	r3, [pc, #56]	@ (80013a4 <MX_TIM6_Init+0x64>)
 800136a:	2200      	movs	r2, #0
 800136c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800136e:	480d      	ldr	r0, [pc, #52]	@ (80013a4 <MX_TIM6_Init+0x64>)
 8001370:	f006 fd5a 	bl	8007e28 <HAL_TIM_Base_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800137a:	f000 fd5b 	bl	8001e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800137e:	2300      	movs	r3, #0
 8001380:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001386:	463b      	mov	r3, r7
 8001388:	4619      	mov	r1, r3
 800138a:	4806      	ldr	r0, [pc, #24]	@ (80013a4 <MX_TIM6_Init+0x64>)
 800138c:	f006 ffda 	bl	8008344 <HAL_TIMEx_MasterConfigSynchronization>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001396:	f000 fd4d 	bl	8001e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	200002a8 	.word	0x200002a8
 80013a8:	40001000 	.word	0x40001000

080013ac <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b2:	463b      	mov	r3, r7
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80013ba:	4b15      	ldr	r3, [pc, #84]	@ (8001410 <MX_TIM7_Init+0x64>)
 80013bc:	4a15      	ldr	r2, [pc, #84]	@ (8001414 <MX_TIM7_Init+0x68>)
 80013be:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 20999;
 80013c0:	4b13      	ldr	r3, [pc, #76]	@ (8001410 <MX_TIM7_Init+0x64>)
 80013c2:	f245 2207 	movw	r2, #20999	@ 0x5207
 80013c6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c8:	4b11      	ldr	r3, [pc, #68]	@ (8001410 <MX_TIM7_Init+0x64>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 4000;
 80013ce:	4b10      	ldr	r3, [pc, #64]	@ (8001410 <MX_TIM7_Init+0x64>)
 80013d0:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80013d4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001410 <MX_TIM7_Init+0x64>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80013dc:	480c      	ldr	r0, [pc, #48]	@ (8001410 <MX_TIM7_Init+0x64>)
 80013de:	f006 fd23 	bl	8007e28 <HAL_TIM_Base_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80013e8:	f000 fd24 	bl	8001e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ec:	2300      	movs	r3, #0
 80013ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f0:	2300      	movs	r3, #0
 80013f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80013f4:	463b      	mov	r3, r7
 80013f6:	4619      	mov	r1, r3
 80013f8:	4805      	ldr	r0, [pc, #20]	@ (8001410 <MX_TIM7_Init+0x64>)
 80013fa:	f006 ffa3 	bl	8008344 <HAL_TIMEx_MasterConfigSynchronization>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001404:	f000 fd16 	bl	8001e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	200002f0 	.word	0x200002f0
 8001414:	40001400 	.word	0x40001400

08001418 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800141c:	4b11      	ldr	r3, [pc, #68]	@ (8001464 <MX_USART2_UART_Init+0x4c>)
 800141e:	4a12      	ldr	r2, [pc, #72]	@ (8001468 <MX_USART2_UART_Init+0x50>)
 8001420:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001422:	4b10      	ldr	r3, [pc, #64]	@ (8001464 <MX_USART2_UART_Init+0x4c>)
 8001424:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001428:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800142a:	4b0e      	ldr	r3, [pc, #56]	@ (8001464 <MX_USART2_UART_Init+0x4c>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001430:	4b0c      	ldr	r3, [pc, #48]	@ (8001464 <MX_USART2_UART_Init+0x4c>)
 8001432:	2200      	movs	r2, #0
 8001434:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001436:	4b0b      	ldr	r3, [pc, #44]	@ (8001464 <MX_USART2_UART_Init+0x4c>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800143c:	4b09      	ldr	r3, [pc, #36]	@ (8001464 <MX_USART2_UART_Init+0x4c>)
 800143e:	220c      	movs	r2, #12
 8001440:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001442:	4b08      	ldr	r3, [pc, #32]	@ (8001464 <MX_USART2_UART_Init+0x4c>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001448:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <MX_USART2_UART_Init+0x4c>)
 800144a:	2200      	movs	r2, #0
 800144c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800144e:	4805      	ldr	r0, [pc, #20]	@ (8001464 <MX_USART2_UART_Init+0x4c>)
 8001450:	f007 f808 	bl	8008464 <HAL_UART_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800145a:	f000 fceb 	bl	8001e34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000338 	.word	0x20000338
 8001468:	40004400 	.word	0x40004400

0800146c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	4b17      	ldr	r3, [pc, #92]	@ (80014d4 <MX_DMA_Init+0x68>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	4a16      	ldr	r2, [pc, #88]	@ (80014d4 <MX_DMA_Init+0x68>)
 800147c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001480:	6313      	str	r3, [r2, #48]	@ 0x30
 8001482:	4b14      	ldr	r3, [pc, #80]	@ (80014d4 <MX_DMA_Init+0x68>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	603b      	str	r3, [r7, #0]
 8001492:	4b10      	ldr	r3, [pc, #64]	@ (80014d4 <MX_DMA_Init+0x68>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001496:	4a0f      	ldr	r2, [pc, #60]	@ (80014d4 <MX_DMA_Init+0x68>)
 8001498:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800149c:	6313      	str	r3, [r2, #48]	@ 0x30
 800149e:	4b0d      	ldr	r3, [pc, #52]	@ (80014d4 <MX_DMA_Init+0x68>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014a6:	603b      	str	r3, [r7, #0]
 80014a8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2100      	movs	r1, #0
 80014ae:	200f      	movs	r0, #15
 80014b0:	f002 fd91 	bl	8003fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80014b4:	200f      	movs	r0, #15
 80014b6:	f002 fdaa 	bl	800400e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2100      	movs	r1, #0
 80014be:	203b      	movs	r0, #59	@ 0x3b
 80014c0:	f002 fd89 	bl	8003fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80014c4:	203b      	movs	r0, #59	@ 0x3b
 80014c6:	f002 fda2 	bl	800400e <HAL_NVIC_EnableIRQ>

}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40023800 	.word	0x40023800

080014d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08a      	sub	sp, #40	@ 0x28
 80014dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]
 80014ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]
 80014f2:	4b5b      	ldr	r3, [pc, #364]	@ (8001660 <MX_GPIO_Init+0x188>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	4a5a      	ldr	r2, [pc, #360]	@ (8001660 <MX_GPIO_Init+0x188>)
 80014f8:	f043 0304 	orr.w	r3, r3, #4
 80014fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fe:	4b58      	ldr	r3, [pc, #352]	@ (8001660 <MX_GPIO_Init+0x188>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	f003 0304 	and.w	r3, r3, #4
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	4b54      	ldr	r3, [pc, #336]	@ (8001660 <MX_GPIO_Init+0x188>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	4a53      	ldr	r2, [pc, #332]	@ (8001660 <MX_GPIO_Init+0x188>)
 8001514:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001518:	6313      	str	r3, [r2, #48]	@ 0x30
 800151a:	4b51      	ldr	r3, [pc, #324]	@ (8001660 <MX_GPIO_Init+0x188>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	60bb      	str	r3, [r7, #8]
 800152a:	4b4d      	ldr	r3, [pc, #308]	@ (8001660 <MX_GPIO_Init+0x188>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	4a4c      	ldr	r2, [pc, #304]	@ (8001660 <MX_GPIO_Init+0x188>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	6313      	str	r3, [r2, #48]	@ 0x30
 8001536:	4b4a      	ldr	r3, [pc, #296]	@ (8001660 <MX_GPIO_Init+0x188>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	607b      	str	r3, [r7, #4]
 8001546:	4b46      	ldr	r3, [pc, #280]	@ (8001660 <MX_GPIO_Init+0x188>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	4a45      	ldr	r2, [pc, #276]	@ (8001660 <MX_GPIO_Init+0x188>)
 800154c:	f043 0302 	orr.w	r3, r3, #2
 8001550:	6313      	str	r3, [r2, #48]	@ 0x30
 8001552:	4b43      	ldr	r3, [pc, #268]	@ (8001660 <MX_GPIO_Init+0x188>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	603b      	str	r3, [r7, #0]
 8001562:	4b3f      	ldr	r3, [pc, #252]	@ (8001660 <MX_GPIO_Init+0x188>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001566:	4a3e      	ldr	r2, [pc, #248]	@ (8001660 <MX_GPIO_Init+0x188>)
 8001568:	f043 0308 	orr.w	r3, r3, #8
 800156c:	6313      	str	r3, [r2, #48]	@ 0x30
 800156e:	4b3c      	ldr	r3, [pc, #240]	@ (8001660 <MX_GPIO_Init+0x188>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001572:	f003 0308 	and.w	r3, r3, #8
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI2_WP_Pin|SPI2_CS_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 800157a:	2200      	movs	r2, #0
 800157c:	2113      	movs	r1, #19
 800157e:	4839      	ldr	r0, [pc, #228]	@ (8001664 <MX_GPIO_Init+0x18c>)
 8001580:	f003 fb26 	bl	8004bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_WP_GPIO_Port, SPI1_WP_Pin, GPIO_PIN_RESET);
 8001584:	2200      	movs	r2, #0
 8001586:	2110      	movs	r1, #16
 8001588:	4837      	ldr	r0, [pc, #220]	@ (8001668 <MX_GPIO_Init+0x190>)
 800158a:	f003 fb21 	bl	8004bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800158e:	2200      	movs	r2, #0
 8001590:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 8001594:	4835      	ldr	r0, [pc, #212]	@ (800166c <MX_GPIO_Init+0x194>)
 8001596:	f003 fb1b 	bl	8004bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI2_WP_Pin */
  GPIO_InitStruct.Pin = SPI2_WP_Pin;
 800159a:	2301      	movs	r3, #1
 800159c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159e:	2301      	movs	r3, #1
 80015a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015a2:	2301      	movs	r3, #1
 80015a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a6:	2300      	movs	r3, #0
 80015a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_WP_GPIO_Port, &GPIO_InitStruct);
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4619      	mov	r1, r3
 80015b0:	482c      	ldr	r0, [pc, #176]	@ (8001664 <MX_GPIO_Init+0x18c>)
 80015b2:	f003 f949 	bl	8004848 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_CS_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin|SPI1_CS_Pin;
 80015b6:	2312      	movs	r3, #18
 80015b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ba:	2301      	movs	r3, #1
 80015bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c2:	2300      	movs	r3, #0
 80015c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	4619      	mov	r1, r3
 80015cc:	4825      	ldr	r0, [pc, #148]	@ (8001664 <MX_GPIO_Init+0x18c>)
 80015ce:	f003 f93b 	bl	8004848 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_WP_Pin */
  GPIO_InitStruct.Pin = SPI1_WP_Pin;
 80015d2:	2310      	movs	r3, #16
 80015d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d6:	2301      	movs	r3, #1
 80015d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015da:	2301      	movs	r3, #1
 80015dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_WP_GPIO_Port, &GPIO_InitStruct);
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	4619      	mov	r1, r3
 80015e8:	481f      	ldr	r0, [pc, #124]	@ (8001668 <MX_GPIO_Init+0x190>)
 80015ea:	f003 f92d 	bl	8004848 <HAL_GPIO_Init>

  /*Configure GPIO pin : Flight_JMP_Pin */
  GPIO_InitStruct.Pin = Flight_JMP_Pin;
 80015ee:	2302      	movs	r3, #2
 80015f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015f2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Flight_JMP_GPIO_Port, &GPIO_InitStruct);
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	4619      	mov	r1, r3
 8001602:	481a      	ldr	r0, [pc, #104]	@ (800166c <MX_GPIO_Init+0x194>)
 8001604:	f003 f920 	bl	8004848 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED1_Pin|LED2_Pin;
 8001608:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 800160c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160e:	2301      	movs	r3, #1
 8001610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001612:	2302      	movs	r3, #2
 8001614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2300      	movs	r3, #0
 8001618:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161a:	f107 0314 	add.w	r3, r7, #20
 800161e:	4619      	mov	r1, r3
 8001620:	4812      	ldr	r0, [pc, #72]	@ (800166c <MX_GPIO_Init+0x194>)
 8001622:	f003 f911 	bl	8004848 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001626:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800162a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162c:	2302      	movs	r3, #2
 800162e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001634:	2303      	movs	r3, #3
 8001636:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001638:	2309      	movs	r3, #9
 800163a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	4619      	mov	r1, r3
 8001642:	4809      	ldr	r0, [pc, #36]	@ (8001668 <MX_GPIO_Init+0x190>)
 8001644:	f003 f900 	bl	8004848 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001648:	2200      	movs	r2, #0
 800164a:	2100      	movs	r1, #0
 800164c:	2007      	movs	r0, #7
 800164e:	f002 fcc2 	bl	8003fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001652:	2007      	movs	r0, #7
 8001654:	f002 fcdb 	bl	800400e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001658:	bf00      	nop
 800165a:	3728      	adds	r7, #40	@ 0x28
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40023800 	.word	0x40023800
 8001664:	40020800 	.word	0x40020800
 8001668:	40020000 	.word	0x40020000
 800166c:	40020400 	.word	0x40020400

08001670 <clean_data_buffer>:

/* USER CODE BEGIN 4 */
void clean_data_buffer(uint16_t array_size, uint8_t data_array[array_size]) {
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	6039      	str	r1, [r7, #0]
 800167a:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < array_size; ++i) {
 800167c:	2300      	movs	r3, #0
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	e007      	b.n	8001692 <clean_data_buffer+0x22>
    	data_array[i] = 0xFF;  // Initialize each element to 0xFF
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	4413      	add	r3, r2
 8001688:	22ff      	movs	r2, #255	@ 0xff
 800168a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < array_size; ++i) {
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	3301      	adds	r3, #1
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	88fb      	ldrh	r3, [r7, #6]
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	429a      	cmp	r2, r3
 8001698:	dbf3      	blt.n	8001682 <clean_data_buffer+0x12>
    }
}
 800169a:	bf00      	nop
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <systemInit>:


void systemInit() {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
	i2c_accel = &hi2c3;
 80016ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001824 <systemInit+0x17c>)
 80016b0:	4a5d      	ldr	r2, [pc, #372]	@ (8001828 <systemInit+0x180>)
 80016b2:	601a      	str	r2, [r3, #0]
	i2c_bme280 = &hi2c1;
 80016b4:	4b5d      	ldr	r3, [pc, #372]	@ (800182c <systemInit+0x184>)
 80016b6:	4a5e      	ldr	r2, [pc, #376]	@ (8001830 <systemInit+0x188>)
 80016b8:	601a      	str	r2, [r3, #0]

	configureCAN();
 80016ba:	f000 fb73 	bl	8001da4 <configureCAN>
	CAN_TxMailbox = 0;
 80016be:	4b5d      	ldr	r3, [pc, #372]	@ (8001834 <systemInit+0x18c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
	CAN_First_Msg = FLAG_RESET;
 80016c4:	4b5c      	ldr	r3, [pc, #368]	@ (8001838 <systemInit+0x190>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	701a      	strb	r2, [r3, #0]
	clean_data_buffer(8, CAN_RxData);
 80016ca:	495c      	ldr	r1, [pc, #368]	@ (800183c <systemInit+0x194>)
 80016cc:	2008      	movs	r0, #8
 80016ce:	f7ff ffcf 	bl	8001670 <clean_data_buffer>

	gpio_set_config();
 80016d2:	f000 f8ed 	bl	80018b0 <gpio_set_config>
	HAL_GPIO_WritePin(led_orange.GPIOx, led_orange.GPIO_Pin, GPIO_PIN_RESET);	// Turn LED off
 80016d6:	4b5a      	ldr	r3, [pc, #360]	@ (8001840 <systemInit+0x198>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a59      	ldr	r2, [pc, #356]	@ (8001840 <systemInit+0x198>)
 80016dc:	8891      	ldrh	r1, [r2, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	4618      	mov	r0, r3
 80016e2:	f003 fa75 	bl	8004bd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(status_led.GPIOx, status_led.GPIO_Pin, GPIO_PIN_RESET);	// Turn LED off
 80016e6:	4b57      	ldr	r3, [pc, #348]	@ (8001844 <systemInit+0x19c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a56      	ldr	r2, [pc, #344]	@ (8001844 <systemInit+0x19c>)
 80016ec:	8891      	ldrh	r1, [r2, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	4618      	mov	r0, r3
 80016f2:	f003 fa6d 	bl	8004bd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(cs_spi1.GPIOx, cs_spi1.GPIO_Pin, GPIO_PIN_SET);		// SET SPI CS High to disable bus 1
 80016f6:	4b54      	ldr	r3, [pc, #336]	@ (8001848 <systemInit+0x1a0>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a53      	ldr	r2, [pc, #332]	@ (8001848 <systemInit+0x1a0>)
 80016fc:	8891      	ldrh	r1, [r2, #4]
 80016fe:	2201      	movs	r2, #1
 8001700:	4618      	mov	r0, r3
 8001702:	f003 fa65 	bl	8004bd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(cs_spi2.GPIOx, cs_spi2.GPIO_Pin, GPIO_PIN_SET);		// SET SPI CS High to disable bus 2
 8001706:	4b51      	ldr	r3, [pc, #324]	@ (800184c <systemInit+0x1a4>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a50      	ldr	r2, [pc, #320]	@ (800184c <systemInit+0x1a4>)
 800170c:	8891      	ldrh	r1, [r2, #4]
 800170e:	2201      	movs	r2, #1
 8001710:	4618      	mov	r0, r3
 8001712:	f003 fa5d 	bl	8004bd0 <HAL_GPIO_WritePin>

	// Clean the data buffer and set all values to 0xFF
	clean_data_buffer(PAGE_SIZE, data_buffer_tx[0]);
 8001716:	494e      	ldr	r1, [pc, #312]	@ (8001850 <systemInit+0x1a8>)
 8001718:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800171c:	f7ff ffa8 	bl	8001670 <clean_data_buffer>
	clean_data_buffer(PAGE_SIZE, data_buffer_tx[1]);
 8001720:	494c      	ldr	r1, [pc, #304]	@ (8001854 <systemInit+0x1ac>)
 8001722:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001726:	f7ff ffa3 	bl	8001670 <clean_data_buffer>

	for (uint8_t i = 0; i < 6; i++) {
 800172a:	2300      	movs	r3, #0
 800172c:	71fb      	strb	r3, [r7, #7]
 800172e:	e00e      	b.n	800174e <systemInit+0xa6>
		accel_data[i] = 0x00;
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	4a49      	ldr	r2, [pc, #292]	@ (8001858 <systemInit+0x1b0>)
 8001734:	2100      	movs	r1, #0
 8001736:	54d1      	strb	r1, [r2, r3]
		bme280_data_0[i] = 0x00;
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	4a48      	ldr	r2, [pc, #288]	@ (800185c <systemInit+0x1b4>)
 800173c:	2100      	movs	r1, #0
 800173e:	54d1      	strb	r1, [r2, r3]
		bme280_data_1[i] = 0x00;
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	4a47      	ldr	r2, [pc, #284]	@ (8001860 <systemInit+0x1b8>)
 8001744:	2100      	movs	r1, #0
 8001746:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 6; i++) {
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	3301      	adds	r3, #1
 800174c:	71fb      	strb	r3, [r7, #7]
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	2b05      	cmp	r3, #5
 8001752:	d9ed      	bls.n	8001730 <systemInit+0x88>
	}

	// Initialise the peripherals
	init_accel(i2c_accel);
 8001754:	4b33      	ldr	r3, [pc, #204]	@ (8001824 <systemInit+0x17c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f7fe fec7 	bl	80004ec <init_accel>
	init_bme280(i2c_bme280, 0);
 800175e:	4b33      	ldr	r3, [pc, #204]	@ (800182c <systemInit+0x184>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2100      	movs	r1, #0
 8001764:	4618      	mov	r0, r3
 8001766:	f7fe ff65 	bl	8000634 <init_bme280>
	init_bme280(i2c_bme280, 1);
 800176a:	4b30      	ldr	r3, [pc, #192]	@ (800182c <systemInit+0x184>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2101      	movs	r1, #1
 8001770:	4618      	mov	r0, r3
 8001772:	f7fe ff5f 	bl	8000634 <init_bme280>
	software_reset(&hspi1, cs_spi1);
 8001776:	4b34      	ldr	r3, [pc, #208]	@ (8001848 <systemInit+0x1a0>)
 8001778:	e893 0006 	ldmia.w	r3, {r1, r2}
 800177c:	4839      	ldr	r0, [pc, #228]	@ (8001864 <systemInit+0x1bc>)
 800177e:	f7ff f92f 	bl	80009e0 <software_reset>
	software_reset(&hspi2, cs_spi2);
 8001782:	4b32      	ldr	r3, [pc, #200]	@ (800184c <systemInit+0x1a4>)
 8001784:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001788:	4837      	ldr	r0, [pc, #220]	@ (8001868 <systemInit+0x1c0>)
 800178a:	f7ff f929 	bl	80009e0 <software_reset>

	end_of_flash = GPIO_PIN_RESET;
 800178e:	4b37      	ldr	r3, [pc, #220]	@ (800186c <systemInit+0x1c4>)
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]

	// Assign the value of next_blank_page to the larger of next_blank_page0 and next_blank_page1
	next_blank_page = find_next_blank_page_all();
 8001794:	f000 fb2a 	bl	8001dec <find_next_blank_page_all>
 8001798:	4603      	mov	r3, r0
 800179a:	4a35      	ldr	r2, [pc, #212]	@ (8001870 <systemInit+0x1c8>)
 800179c:	6013      	str	r3, [r2, #0]

	buffer_ref = 0;
 800179e:	4b35      	ldr	r3, [pc, #212]	@ (8001874 <systemInit+0x1cc>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	701a      	strb	r2, [r3, #0]
	byte_tracker = 0;
 80017a4:	4b34      	ldr	r3, [pc, #208]	@ (8001878 <systemInit+0x1d0>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	801a      	strh	r2, [r3, #0]
	uart2_rec_flag = FLAG_RESET;
 80017aa:	4b34      	ldr	r3, [pc, #208]	@ (800187c <systemInit+0x1d4>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	701a      	strb	r2, [r3, #0]
	CAN_RX_Flag = FLAG_RESET;
 80017b0:	4b33      	ldr	r3, [pc, #204]	@ (8001880 <systemInit+0x1d8>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	701a      	strb	r2, [r3, #0]
	tim6_overflow_flag = FLAG_RESET;
 80017b6:	4b33      	ldr	r3, [pc, #204]	@ (8001884 <systemInit+0x1dc>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]
	tim7_overflow_flag = FLAG_RESET;
 80017bc:	4b32      	ldr	r3, [pc, #200]	@ (8001888 <systemInit+0x1e0>)
 80017be:	2200      	movs	r2, #0
 80017c0:	701a      	strb	r2, [r3, #0]
	flight_state = GROUND;
 80017c2:	4b32      	ldr	r3, [pc, #200]	@ (800188c <systemInit+0x1e4>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	701a      	strb	r2, [r3, #0]
	rtc_reset = FLAG_RESET;
 80017c8:	4b31      	ldr	r3, [pc, #196]	@ (8001890 <systemInit+0x1e8>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	701a      	strb	r2, [r3, #0]

	sysStatus = systemStatus(&hspi1, &hspi2, i2c_bme280, i2c_accel);
 80017ce:	4b17      	ldr	r3, [pc, #92]	@ (800182c <systemInit+0x184>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	4b14      	ldr	r3, [pc, #80]	@ (8001824 <systemInit+0x17c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4924      	ldr	r1, [pc, #144]	@ (8001868 <systemInit+0x1c0>)
 80017d8:	4822      	ldr	r0, [pc, #136]	@ (8001864 <systemInit+0x1bc>)
 80017da:	f000 fb31 	bl	8001e40 <systemStatus>
 80017de:	4603      	mov	r3, r0
 80017e0:	461a      	mov	r2, r3
 80017e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001894 <systemInit+0x1ec>)
 80017e4:	701a      	strb	r2, [r3, #0]

	send_uart_hex(&huart2, sysStatus);
 80017e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001894 <systemInit+0x1ec>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	4619      	mov	r1, r3
 80017ec:	482a      	ldr	r0, [pc, #168]	@ (8001898 <systemInit+0x1f0>)
 80017ee:	f001 fbda 	bl	8002fa6 <send_uart_hex>

	// Initiate clocks, interrupts, CAN and DMA
	HAL_UART_Receive_IT(&huart2, UARTRxData, 2);
 80017f2:	2202      	movs	r2, #2
 80017f4:	4929      	ldr	r1, [pc, #164]	@ (800189c <systemInit+0x1f4>)
 80017f6:	4828      	ldr	r0, [pc, #160]	@ (8001898 <systemInit+0x1f0>)
 80017f8:	f006 ff0f 	bl	800861a <HAL_UART_Receive_IT>
	HAL_CAN_Start(&hcan2);
 80017fc:	4828      	ldr	r0, [pc, #160]	@ (80018a0 <systemInit+0x1f8>)
 80017fe:	f001 fe83 	bl	8003508 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001802:	2102      	movs	r1, #2
 8001804:	4826      	ldr	r0, [pc, #152]	@ (80018a0 <systemInit+0x1f8>)
 8001806:	f002 f8b5 	bl	8003974 <HAL_CAN_ActivateNotification>
	initialise_rtc_default(&hrtc);
 800180a:	4826      	ldr	r0, [pc, #152]	@ (80018a4 <systemInit+0x1fc>)
 800180c:	f000 fe48 	bl	80024a0 <initialise_rtc_default>
	HAL_TIM_Base_Start_IT(&htim6);
 8001810:	4825      	ldr	r0, [pc, #148]	@ (80018a8 <systemInit+0x200>)
 8001812:	f006 fb59 	bl	8007ec8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8001816:	4825      	ldr	r0, [pc, #148]	@ (80018ac <systemInit+0x204>)
 8001818:	f006 fb56 	bl	8007ec8 <HAL_TIM_Base_Start_IT>
}
 800181c:	bf00      	nop
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000380 	.word	0x20000380
 8001828:	200000c4 	.word	0x200000c4
 800182c:	20000384 	.word	0x20000384
 8001830:	20000070 	.word	0x20000070
 8001834:	2000038c 	.word	0x2000038c
 8001838:	200003b5 	.word	0x200003b5
 800183c:	200003ac 	.word	0x200003ac
 8001840:	200005dc 	.word	0x200005dc
 8001844:	200005ec 	.word	0x200005ec
 8001848:	200005f4 	.word	0x200005f4
 800184c:	20000604 	.word	0x20000604
 8001850:	200003b8 	.word	0x200003b8
 8001854:	200004b8 	.word	0x200004b8
 8001858:	200005bc 	.word	0x200005bc
 800185c:	200005c4 	.word	0x200005c4
 8001860:	200005cc 	.word	0x200005cc
 8001864:	20000138 	.word	0x20000138
 8001868:	20000190 	.word	0x20000190
 800186c:	200005da 	.word	0x200005da
 8001870:	200005d4 	.word	0x200005d4
 8001874:	200005d2 	.word	0x200005d2
 8001878:	200005d8 	.word	0x200005d8
 800187c:	2000038a 	.word	0x2000038a
 8001880:	200003b4 	.word	0x200003b4
 8001884:	200003b6 	.word	0x200003b6
 8001888:	200003b7 	.word	0x200003b7
 800188c:	2000061e 	.word	0x2000061e
 8001890:	2000061c 	.word	0x2000061c
 8001894:	2000061d 	.word	0x2000061d
 8001898:	20000338 	.word	0x20000338
 800189c:	20000388 	.word	0x20000388
 80018a0:	20000048 	.word	0x20000048
 80018a4:	20000118 	.word	0x20000118
 80018a8:	200002a8 	.word	0x200002a8
 80018ac:	200002f0 	.word	0x200002f0

080018b0 <gpio_set_config>:

void gpio_set_config() {
 80018b0:	b590      	push	{r4, r7, lr}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
	// Set LED gpio
	led_orange = create_GPIO_Config(GPIOB, GPIO_PIN_14);	// Orange LED (Heartbeat LED)
 80018b6:	4c37      	ldr	r4, [pc, #220]	@ (8001994 <gpio_set_config+0xe4>)
 80018b8:	463b      	mov	r3, r7
 80018ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80018be:	4936      	ldr	r1, [pc, #216]	@ (8001998 <gpio_set_config+0xe8>)
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff f9c5 	bl	8000c50 <create_GPIO_Config>
 80018c6:	4622      	mov	r2, r4
 80018c8:	463b      	mov	r3, r7
 80018ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018ce:	e882 0003 	stmia.w	r2, {r0, r1}
	led_green = create_GPIO_Config(GPIOB, GPIO_PIN_13);		// Green LED (Hard Drive LED)
 80018d2:	4c32      	ldr	r4, [pc, #200]	@ (800199c <gpio_set_config+0xec>)
 80018d4:	463b      	mov	r3, r7
 80018d6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018da:	492f      	ldr	r1, [pc, #188]	@ (8001998 <gpio_set_config+0xe8>)
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff f9b7 	bl	8000c50 <create_GPIO_Config>
 80018e2:	4622      	mov	r2, r4
 80018e4:	463b      	mov	r3, r7
 80018e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018ea:	e882 0003 	stmia.w	r2, {r0, r1}
	status_led = create_GPIO_Config(GPIOB, GPIO_PIN_12);	// Status LED
 80018ee:	4c2c      	ldr	r4, [pc, #176]	@ (80019a0 <gpio_set_config+0xf0>)
 80018f0:	463b      	mov	r3, r7
 80018f2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80018f6:	4928      	ldr	r1, [pc, #160]	@ (8001998 <gpio_set_config+0xe8>)
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff f9a9 	bl	8000c50 <create_GPIO_Config>
 80018fe:	4622      	mov	r2, r4
 8001900:	463b      	mov	r3, r7
 8001902:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001906:	e882 0003 	stmia.w	r2, {r0, r1}

	// SPI Flash 0 CS and WP
	cs_spi1 = create_GPIO_Config(GPIOC, GPIO_PIN_4);		// Change for SRAD
 800190a:	4c26      	ldr	r4, [pc, #152]	@ (80019a4 <gpio_set_config+0xf4>)
 800190c:	463b      	mov	r3, r7
 800190e:	2210      	movs	r2, #16
 8001910:	4925      	ldr	r1, [pc, #148]	@ (80019a8 <gpio_set_config+0xf8>)
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff f99c 	bl	8000c50 <create_GPIO_Config>
 8001918:	4622      	mov	r2, r4
 800191a:	463b      	mov	r3, r7
 800191c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001920:	e882 0003 	stmia.w	r2, {r0, r1}
	wp_spi1 = create_GPIO_Config(GPIOA, GPIO_PIN_4);
 8001924:	4c21      	ldr	r4, [pc, #132]	@ (80019ac <gpio_set_config+0xfc>)
 8001926:	463b      	mov	r3, r7
 8001928:	2210      	movs	r2, #16
 800192a:	4921      	ldr	r1, [pc, #132]	@ (80019b0 <gpio_set_config+0x100>)
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff f98f 	bl	8000c50 <create_GPIO_Config>
 8001932:	4622      	mov	r2, r4
 8001934:	463b      	mov	r3, r7
 8001936:	e893 0003 	ldmia.w	r3, {r0, r1}
 800193a:	e882 0003 	stmia.w	r2, {r0, r1}

	// SPI Flash 1 CS and WP
	cs_spi2 = create_GPIO_Config(GPIOC, GPIO_PIN_1);		// Change for SRAD
 800193e:	4c1d      	ldr	r4, [pc, #116]	@ (80019b4 <gpio_set_config+0x104>)
 8001940:	463b      	mov	r3, r7
 8001942:	2202      	movs	r2, #2
 8001944:	4918      	ldr	r1, [pc, #96]	@ (80019a8 <gpio_set_config+0xf8>)
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff f982 	bl	8000c50 <create_GPIO_Config>
 800194c:	4622      	mov	r2, r4
 800194e:	463b      	mov	r3, r7
 8001950:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001954:	e882 0003 	stmia.w	r2, {r0, r1}
	wp_spi2 = create_GPIO_Config(GPIOC, GPIO_PIN_0);
 8001958:	4c17      	ldr	r4, [pc, #92]	@ (80019b8 <gpio_set_config+0x108>)
 800195a:	463b      	mov	r3, r7
 800195c:	2201      	movs	r2, #1
 800195e:	4912      	ldr	r1, [pc, #72]	@ (80019a8 <gpio_set_config+0xf8>)
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff f975 	bl	8000c50 <create_GPIO_Config>
 8001966:	4622      	mov	r2, r4
 8001968:	463b      	mov	r3, r7
 800196a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800196e:	e882 0003 	stmia.w	r2, {r0, r1}

	// Flight Jumper GPIO Input
	jmp_flight = create_GPIO_Config(GPIOB, GPIO_PIN_1);
 8001972:	4c12      	ldr	r4, [pc, #72]	@ (80019bc <gpio_set_config+0x10c>)
 8001974:	463b      	mov	r3, r7
 8001976:	2202      	movs	r2, #2
 8001978:	4907      	ldr	r1, [pc, #28]	@ (8001998 <gpio_set_config+0xe8>)
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff f968 	bl	8000c50 <create_GPIO_Config>
 8001980:	4622      	mov	r2, r4
 8001982:	463b      	mov	r3, r7
 8001984:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001988:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	bd90      	pop	{r4, r7, pc}
 8001994:	200005dc 	.word	0x200005dc
 8001998:	40020400 	.word	0x40020400
 800199c:	200005e4 	.word	0x200005e4
 80019a0:	200005ec 	.word	0x200005ec
 80019a4:	200005f4 	.word	0x200005f4
 80019a8:	40020800 	.word	0x40020800
 80019ac:	200005fc 	.word	0x200005fc
 80019b0:	40020000 	.word	0x40020000
 80019b4:	20000604 	.word	0x20000604
 80019b8:	2000060c 	.word	0x2000060c
 80019bc:	20000614 	.word	0x20000614

080019c0 <handleCAN>:

void handleCAN() {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af02      	add	r7, sp, #8
	// Process "clock-sync". Change flight-state to "rocket_loaded"
	if(CAN_RxHeader.StdId == CLK_SYNC_ID) {
 80019c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001a70 <handleCAN+0xb0>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d10e      	bne.n	80019f0 <handleCAN+0x30>
		flight_state = LOADED;
 80019d2:	4b28      	ldr	r3, [pc, #160]	@ (8001a74 <handleCAN+0xb4>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	701a      	strb	r2, [r3, #0]
		uint8_t TxData[1] = {0x00};
 80019d8:	2300      	movs	r3, #0
 80019da:	713b      	strb	r3, [r7, #4]
		sendCAN_TxMessage(&hcan2, 1, TxData, &CAN_TxMailbox, CLK_SYNC_ID);
 80019dc:	1d3a      	adds	r2, r7, #4
 80019de:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	4b24      	ldr	r3, [pc, #144]	@ (8001a78 <handleCAN+0xb8>)
 80019e6:	2101      	movs	r1, #1
 80019e8:	4824      	ldr	r0, [pc, #144]	@ (8001a7c <handleCAN+0xbc>)
 80019ea:	f7fe ff39 	bl	8000860 <sendCAN_TxMessage>

	// Transmit values from accelerometer
	else if(CAN_RxHeader.StdId == DUMMY_ID) {
		send_uart_hex(&huart2, sysStatus);
	}
}
 80019ee:	e03a      	b.n	8001a66 <handleCAN+0xa6>
	else if(CAN_RxHeader.StdId == TX_BME280_0) {
 80019f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a70 <handleCAN+0xb0>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f240 5201 	movw	r2, #1281	@ 0x501
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d109      	bne.n	8001a10 <handleCAN+0x50>
		sendCAN_TxMessage(&hcan2, 6, bme280_data_0, &CAN_TxMailbox, TX_BME280_0);
 80019fc:	f240 5301 	movw	r3, #1281	@ 0x501
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	4b1d      	ldr	r3, [pc, #116]	@ (8001a78 <handleCAN+0xb8>)
 8001a04:	4a1e      	ldr	r2, [pc, #120]	@ (8001a80 <handleCAN+0xc0>)
 8001a06:	2106      	movs	r1, #6
 8001a08:	481c      	ldr	r0, [pc, #112]	@ (8001a7c <handleCAN+0xbc>)
 8001a0a:	f7fe ff29 	bl	8000860 <sendCAN_TxMessage>
}
 8001a0e:	e02a      	b.n	8001a66 <handleCAN+0xa6>
	else if(CAN_RxHeader.StdId == TX_BME280_1) {
 8001a10:	4b17      	ldr	r3, [pc, #92]	@ (8001a70 <handleCAN+0xb0>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f240 5202 	movw	r2, #1282	@ 0x502
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d109      	bne.n	8001a30 <handleCAN+0x70>
		sendCAN_TxMessage(&hcan2, 6, bme280_data_1, &CAN_TxMailbox, TX_BME280_1);
 8001a1c:	f240 5302 	movw	r3, #1282	@ 0x502
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	4b15      	ldr	r3, [pc, #84]	@ (8001a78 <handleCAN+0xb8>)
 8001a24:	4a17      	ldr	r2, [pc, #92]	@ (8001a84 <handleCAN+0xc4>)
 8001a26:	2106      	movs	r1, #6
 8001a28:	4814      	ldr	r0, [pc, #80]	@ (8001a7c <handleCAN+0xbc>)
 8001a2a:	f7fe ff19 	bl	8000860 <sendCAN_TxMessage>
}
 8001a2e:	e01a      	b.n	8001a66 <handleCAN+0xa6>
	else if(CAN_RxHeader.StdId == TX_ACCEL) {
 8001a30:	4b0f      	ldr	r3, [pc, #60]	@ (8001a70 <handleCAN+0xb0>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f240 5203 	movw	r2, #1283	@ 0x503
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d109      	bne.n	8001a50 <handleCAN+0x90>
		sendCAN_TxMessage(&hcan2, 6, accel_data, &CAN_TxMailbox, TX_ACCEL);
 8001a3c:	f240 5303 	movw	r3, #1283	@ 0x503
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	4b0d      	ldr	r3, [pc, #52]	@ (8001a78 <handleCAN+0xb8>)
 8001a44:	4a10      	ldr	r2, [pc, #64]	@ (8001a88 <handleCAN+0xc8>)
 8001a46:	2106      	movs	r1, #6
 8001a48:	480c      	ldr	r0, [pc, #48]	@ (8001a7c <handleCAN+0xbc>)
 8001a4a:	f7fe ff09 	bl	8000860 <sendCAN_TxMessage>
}
 8001a4e:	e00a      	b.n	8001a66 <handleCAN+0xa6>
	else if(CAN_RxHeader.StdId == DUMMY_ID) {
 8001a50:	4b07      	ldr	r3, [pc, #28]	@ (8001a70 <handleCAN+0xb0>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001a58:	d105      	bne.n	8001a66 <handleCAN+0xa6>
		send_uart_hex(&huart2, sysStatus);
 8001a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a8c <handleCAN+0xcc>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	4619      	mov	r1, r3
 8001a60:	480b      	ldr	r0, [pc, #44]	@ (8001a90 <handleCAN+0xd0>)
 8001a62:	f001 faa0 	bl	8002fa6 <send_uart_hex>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000390 	.word	0x20000390
 8001a74:	2000061e 	.word	0x2000061e
 8001a78:	2000038c 	.word	0x2000038c
 8001a7c:	20000048 	.word	0x20000048
 8001a80:	200005c4 	.word	0x200005c4
 8001a84:	200005cc 	.word	0x200005cc
 8001a88:	200005bc 	.word	0x200005bc
 8001a8c:	2000061d 	.word	0x2000061d
 8001a90:	20000338 	.word	0x20000338

08001a94 <handleUART>:

void handleUART() {
 8001a94:	b590      	push	{r4, r7, lr}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af02      	add	r7, sp, #8
	UART_HandleTypeDef *huart = &huart2;
 8001a9a:	4b98      	ldr	r3, [pc, #608]	@ (8001cfc <handleUART+0x268>)
 8001a9c:	607b      	str	r3, [r7, #4]

	// Send Heartbeat to UART (data_rx[0] = "h")
	if (UARTRxData[0] == 0x68) {
 8001a9e:	4b98      	ldr	r3, [pc, #608]	@ (8001d00 <handleUART+0x26c>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b68      	cmp	r3, #104	@ 0x68
 8001aa4:	d109      	bne.n	8001aba <handleUART+0x26>
		heartbeatUART(huart);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 fa1c 	bl	8001ee4 <heartbeatUART>
		send_uart_hex(huart, sysStatus);
 8001aac:	4b95      	ldr	r3, [pc, #596]	@ (8001d04 <handleUART+0x270>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f001 fa77 	bl	8002fa6 <send_uart_hex>
 8001ab8:	e116      	b.n	8001ce8 <handleUART+0x254>
	}

/***************************** SPI Flash ************************************************/
	// Erase specified flash chip (data_rx[0]  = "e")
	else if (UARTRxData[0] == 0x65) {
 8001aba:	4b91      	ldr	r3, [pc, #580]	@ (8001d00 <handleUART+0x26c>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b65      	cmp	r3, #101	@ 0x65
 8001ac0:	d132      	bne.n	8001b28 <handleUART+0x94>
		HAL_GPIO_WritePin(led_green.GPIOx, led_green.GPIO_Pin, GPIO_PIN_SET);		// Activate the "write out" LED
 8001ac2:	4b91      	ldr	r3, [pc, #580]	@ (8001d08 <handleUART+0x274>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a90      	ldr	r2, [pc, #576]	@ (8001d08 <handleUART+0x274>)
 8001ac8:	8891      	ldrh	r1, [r2, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	4618      	mov	r0, r3
 8001ace:	f003 f87f 	bl	8004bd0 <HAL_GPIO_WritePin>
		if(decodeASCII(UARTRxData[1]) == 0) {
 8001ad2:	4b8b      	ldr	r3, [pc, #556]	@ (8001d00 <handleUART+0x26c>)
 8001ad4:	785b      	ldrb	r3, [r3, #1]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 f92a 	bl	8001d30 <decodeASCII>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d106      	bne.n	8001af0 <handleUART+0x5c>
			eraseFlashSPI(&hspi1, huart, cs_spi1);
 8001ae2:	4b8a      	ldr	r3, [pc, #552]	@ (8001d0c <handleUART+0x278>)
 8001ae4:	cb0c      	ldmia	r3, {r2, r3}
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	4889      	ldr	r0, [pc, #548]	@ (8001d10 <handleUART+0x27c>)
 8001aea:	f000 fa07 	bl	8001efc <eraseFlashSPI>
 8001aee:	e00d      	b.n	8001b0c <handleUART+0x78>
		} else if (decodeASCII(UARTRxData[1]) == 1) {
 8001af0:	4b83      	ldr	r3, [pc, #524]	@ (8001d00 <handleUART+0x26c>)
 8001af2:	785b      	ldrb	r3, [r3, #1]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f000 f91b 	bl	8001d30 <decodeASCII>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d105      	bne.n	8001b0c <handleUART+0x78>
			eraseFlashSPI(&hspi2, huart, cs_spi2);
 8001b00:	4b84      	ldr	r3, [pc, #528]	@ (8001d14 <handleUART+0x280>)
 8001b02:	cb0c      	ldmia	r3, {r2, r3}
 8001b04:	6879      	ldr	r1, [r7, #4]
 8001b06:	4884      	ldr	r0, [pc, #528]	@ (8001d18 <handleUART+0x284>)
 8001b08:	f000 f9f8 	bl	8001efc <eraseFlashSPI>
		}

		// Assign the value of next_blank_page to the larger of next_blank_page0 and next_blank_page1
		next_blank_page = find_next_blank_page_all();
 8001b0c:	f000 f96e 	bl	8001dec <find_next_blank_page_all>
 8001b10:	4603      	mov	r3, r0
 8001b12:	4a82      	ldr	r2, [pc, #520]	@ (8001d1c <handleUART+0x288>)
 8001b14:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(led_green.GPIOx, led_green.GPIO_Pin,GPIO_PIN_RESET);	// Deactivate the "write out" LED
 8001b16:	4b7c      	ldr	r3, [pc, #496]	@ (8001d08 <handleUART+0x274>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a7b      	ldr	r2, [pc, #492]	@ (8001d08 <handleUART+0x274>)
 8001b1c:	8891      	ldrh	r1, [r2, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	4618      	mov	r0, r3
 8001b22:	f003 f855 	bl	8004bd0 <HAL_GPIO_WritePin>
 8001b26:	e0df      	b.n	8001ce8 <handleUART+0x254>
	}

	// Read data from specified flash chip (data_rx[0] = "r")
	else if (UARTRxData[0] == 0x72) {
 8001b28:	4b75      	ldr	r3, [pc, #468]	@ (8001d00 <handleUART+0x26c>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b72      	cmp	r3, #114	@ 0x72
 8001b2e:	d11e      	bne.n	8001b6e <handleUART+0xda>
		if(decodeASCII(UARTRxData[1]) == 0) {
 8001b30:	4b73      	ldr	r3, [pc, #460]	@ (8001d00 <handleUART+0x26c>)
 8001b32:	785b      	ldrb	r3, [r3, #1]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f000 f8fb 	bl	8001d30 <decodeASCII>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d106      	bne.n	8001b4e <handleUART+0xba>
			readFlashToUART(&hspi1, huart, cs_spi1);
 8001b40:	4b72      	ldr	r3, [pc, #456]	@ (8001d0c <handleUART+0x278>)
 8001b42:	cb0c      	ldmia	r3, {r2, r3}
 8001b44:	6879      	ldr	r1, [r7, #4]
 8001b46:	4872      	ldr	r0, [pc, #456]	@ (8001d10 <handleUART+0x27c>)
 8001b48:	f000 f9fa 	bl	8001f40 <readFlashToUART>
 8001b4c:	e0cc      	b.n	8001ce8 <handleUART+0x254>
		} else if (decodeASCII(UARTRxData[1]) == 1) {
 8001b4e:	4b6c      	ldr	r3, [pc, #432]	@ (8001d00 <handleUART+0x26c>)
 8001b50:	785b      	ldrb	r3, [r3, #1]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f000 f8ec 	bl	8001d30 <decodeASCII>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	f040 80c4 	bne.w	8001ce8 <handleUART+0x254>
			readFlashToUART(&hspi2, huart, cs_spi2);
 8001b60:	4b6c      	ldr	r3, [pc, #432]	@ (8001d14 <handleUART+0x280>)
 8001b62:	cb0c      	ldmia	r3, {r2, r3}
 8001b64:	6879      	ldr	r1, [r7, #4]
 8001b66:	486c      	ldr	r0, [pc, #432]	@ (8001d18 <handleUART+0x284>)
 8001b68:	f000 f9ea 	bl	8001f40 <readFlashToUART>
 8001b6c:	e0bc      	b.n	8001ce8 <handleUART+0x254>
		}
	}

	// Read Manufacturer over SPI (data_rx[0] = "m")
	else if (UARTRxData[0] == 0x6d) {
 8001b6e:	4b64      	ldr	r3, [pc, #400]	@ (8001d00 <handleUART+0x26c>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b6d      	cmp	r3, #109	@ 0x6d
 8001b74:	d11e      	bne.n	8001bb4 <handleUART+0x120>
		if(decodeASCII(UARTRxData[1]) == 0) {
 8001b76:	4b62      	ldr	r3, [pc, #392]	@ (8001d00 <handleUART+0x26c>)
 8001b78:	785b      	ldrb	r3, [r3, #1]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 f8d8 	bl	8001d30 <decodeASCII>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d106      	bne.n	8001b94 <handleUART+0x100>
			readFlashManuSPI(&hspi1, huart, cs_spi1);
 8001b86:	4b61      	ldr	r3, [pc, #388]	@ (8001d0c <handleUART+0x278>)
 8001b88:	cb0c      	ldmia	r3, {r2, r3}
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	4860      	ldr	r0, [pc, #384]	@ (8001d10 <handleUART+0x27c>)
 8001b8e:	f000 fa43 	bl	8002018 <readFlashManuSPI>
 8001b92:	e0a9      	b.n	8001ce8 <handleUART+0x254>
		} else if (decodeASCII(UARTRxData[1]) == 1) {
 8001b94:	4b5a      	ldr	r3, [pc, #360]	@ (8001d00 <handleUART+0x26c>)
 8001b96:	785b      	ldrb	r3, [r3, #1]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f000 f8c9 	bl	8001d30 <decodeASCII>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	f040 80a1 	bne.w	8001ce8 <handleUART+0x254>
			readFlashManuSPI(&hspi2, huart, cs_spi2);
 8001ba6:	4b5b      	ldr	r3, [pc, #364]	@ (8001d14 <handleUART+0x280>)
 8001ba8:	cb0c      	ldmia	r3, {r2, r3}
 8001baa:	6879      	ldr	r1, [r7, #4]
 8001bac:	485a      	ldr	r0, [pc, #360]	@ (8001d18 <handleUART+0x284>)
 8001bae:	f000 fa33 	bl	8002018 <readFlashManuSPI>
 8001bb2:	e099      	b.n	8001ce8 <handleUART+0x254>
		}
	}

	// Write a page over SPI (data_rx[0] = "w")
	else if (UARTRxData[0] == 0x77) {
 8001bb4:	4b52      	ldr	r3, [pc, #328]	@ (8001d00 <handleUART+0x26c>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b77      	cmp	r3, #119	@ 0x77
 8001bba:	d11d      	bne.n	8001bf8 <handleUART+0x164>
		if(decodeASCII(UARTRxData[1]) == 0) {
 8001bbc:	4b50      	ldr	r3, [pc, #320]	@ (8001d00 <handleUART+0x26c>)
 8001bbe:	785b      	ldrb	r3, [r3, #1]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f000 f8b5 	bl	8001d30 <decodeASCII>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d106      	bne.n	8001bda <handleUART+0x146>
			writePageSPI_W(&hspi1, huart, cs_spi1);
 8001bcc:	4b4f      	ldr	r3, [pc, #316]	@ (8001d0c <handleUART+0x278>)
 8001bce:	cb0c      	ldmia	r3, {r2, r3}
 8001bd0:	6879      	ldr	r1, [r7, #4]
 8001bd2:	484f      	ldr	r0, [pc, #316]	@ (8001d10 <handleUART+0x27c>)
 8001bd4:	f000 fa40 	bl	8002058 <writePageSPI_W>
 8001bd8:	e086      	b.n	8001ce8 <handleUART+0x254>
		} else if (decodeASCII(UARTRxData[1]) == 1) {
 8001bda:	4b49      	ldr	r3, [pc, #292]	@ (8001d00 <handleUART+0x26c>)
 8001bdc:	785b      	ldrb	r3, [r3, #1]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 f8a6 	bl	8001d30 <decodeASCII>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d17e      	bne.n	8001ce8 <handleUART+0x254>
			writePageSPI_W(&hspi2, huart, cs_spi2);
 8001bea:	4b4a      	ldr	r3, [pc, #296]	@ (8001d14 <handleUART+0x280>)
 8001bec:	cb0c      	ldmia	r3, {r2, r3}
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	4849      	ldr	r0, [pc, #292]	@ (8001d18 <handleUART+0x284>)
 8001bf2:	f000 fa31 	bl	8002058 <writePageSPI_W>
 8001bf6:	e077      	b.n	8001ce8 <handleUART+0x254>
		}
	}

	// Software reset flash chip over SPI (data_rx[0] = "x")
	else if (UARTRxData[0] == 0x78) {
 8001bf8:	4b41      	ldr	r3, [pc, #260]	@ (8001d00 <handleUART+0x26c>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b78      	cmp	r3, #120	@ 0x78
 8001bfe:	d11d      	bne.n	8001c3c <handleUART+0x1a8>
		if(decodeASCII(UARTRxData[1]) == 0) {
 8001c00:	4b3f      	ldr	r3, [pc, #252]	@ (8001d00 <handleUART+0x26c>)
 8001c02:	785b      	ldrb	r3, [r3, #1]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f000 f893 	bl	8001d30 <decodeASCII>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d106      	bne.n	8001c1e <handleUART+0x18a>
			resetSPIFlash(&hspi1, huart, cs_spi1);
 8001c10:	4b3e      	ldr	r3, [pc, #248]	@ (8001d0c <handleUART+0x278>)
 8001c12:	cb0c      	ldmia	r3, {r2, r3}
 8001c14:	6879      	ldr	r1, [r7, #4]
 8001c16:	483e      	ldr	r0, [pc, #248]	@ (8001d10 <handleUART+0x27c>)
 8001c18:	f000 fa72 	bl	8002100 <resetSPIFlash>
 8001c1c:	e064      	b.n	8001ce8 <handleUART+0x254>
		} else if (decodeASCII(UARTRxData[1]) == 1) {
 8001c1e:	4b38      	ldr	r3, [pc, #224]	@ (8001d00 <handleUART+0x26c>)
 8001c20:	785b      	ldrb	r3, [r3, #1]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f000 f884 	bl	8001d30 <decodeASCII>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d15c      	bne.n	8001ce8 <handleUART+0x254>
			resetSPIFlash(&hspi2, huart, cs_spi2);
 8001c2e:	4b39      	ldr	r3, [pc, #228]	@ (8001d14 <handleUART+0x280>)
 8001c30:	cb0c      	ldmia	r3, {r2, r3}
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	4838      	ldr	r0, [pc, #224]	@ (8001d18 <handleUART+0x284>)
 8001c36:	f000 fa63 	bl	8002100 <resetSPIFlash>
 8001c3a:	e055      	b.n	8001ce8 <handleUART+0x254>
		}
	}

/*********************************** I2C Accelerometer ***********************************/
	// Read Accelerometer WhoAmI (data_rx[0] = "c")
	else if (UARTRxData[0] == 0x63) {
 8001c3c:	4b30      	ldr	r3, [pc, #192]	@ (8001d00 <handleUART+0x26c>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b63      	cmp	r3, #99	@ 0x63
 8001c42:	d106      	bne.n	8001c52 <handleUART+0x1be>
		checkAccelWhoAmI(i2c_accel, huart);
 8001c44:	4b36      	ldr	r3, [pc, #216]	@ (8001d20 <handleUART+0x28c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 fa70 	bl	8002130 <checkAccelWhoAmI>
 8001c50:	e04a      	b.n	8001ce8 <handleUART+0x254>
	}

	// Read the accelerometer and print to the UART[0] (data_rx [0] = "a")
	else if (UARTRxData[0] == 0x61) {
 8001c52:	4b2b      	ldr	r3, [pc, #172]	@ (8001d00 <handleUART+0x26c>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	2b61      	cmp	r3, #97	@ 0x61
 8001c58:	d103      	bne.n	8001c62 <handleUART+0x1ce>
		accelToUART(huart);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 fa7c 	bl	8002158 <accelToUART>
 8001c60:	e042      	b.n	8001ce8 <handleUART+0x254>
	}

/********************************** I2C BME280 *******************************************/
	// Read the temp sensor ID and print to the UART[0] (data_rx [0]= "b")
	else if (UARTRxData[0] == 0x62) {
 8001c62:	4b27      	ldr	r3, [pc, #156]	@ (8001d00 <handleUART+0x26c>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	2b62      	cmp	r3, #98	@ 0x62
 8001c68:	d10d      	bne.n	8001c86 <handleUART+0x1f2>
		readTempSensorID(i2c_bme280, huart, decodeASCII(UARTRxData[1]));
 8001c6a:	4b2e      	ldr	r3, [pc, #184]	@ (8001d24 <handleUART+0x290>)
 8001c6c:	681c      	ldr	r4, [r3, #0]
 8001c6e:	4b24      	ldr	r3, [pc, #144]	@ (8001d00 <handleUART+0x26c>)
 8001c70:	785b      	ldrb	r3, [r3, #1]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f000 f85c 	bl	8001d30 <decodeASCII>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	6879      	ldr	r1, [r7, #4]
 8001c7e:	4620      	mov	r0, r4
 8001c80:	f000 fa86 	bl	8002190 <readTempSensorID>
 8001c84:	e030      	b.n	8001ce8 <handleUART+0x254>
	}

	// Read the temp sensor calibration registers and print to the UART (data_rx[0] = "p")
	else if (UARTRxData[0] == 0x70) {
 8001c86:	4b1e      	ldr	r3, [pc, #120]	@ (8001d00 <handleUART+0x26c>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b70      	cmp	r3, #112	@ 0x70
 8001c8c:	d10d      	bne.n	8001caa <handleUART+0x216>
		readTempCalibration(i2c_bme280, huart, decodeASCII(UARTRxData[1]));
 8001c8e:	4b25      	ldr	r3, [pc, #148]	@ (8001d24 <handleUART+0x290>)
 8001c90:	681c      	ldr	r4, [r3, #0]
 8001c92:	4b1b      	ldr	r3, [pc, #108]	@ (8001d00 <handleUART+0x26c>)
 8001c94:	785b      	ldrb	r3, [r3, #1]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 f84a 	bl	8001d30 <decodeASCII>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	4620      	mov	r0, r4
 8001ca4:	f000 fa89 	bl	80021ba <readTempCalibration>
 8001ca8:	e01e      	b.n	8001ce8 <handleUART+0x254>
	}

	// Read the temp sensor and print to the UART[0] (data_rx [0]= "t")
	else if (UARTRxData[0] == 0x74) {
 8001caa:	4b15      	ldr	r3, [pc, #84]	@ (8001d00 <handleUART+0x26c>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b74      	cmp	r3, #116	@ 0x74
 8001cb0:	d10a      	bne.n	8001cc8 <handleUART+0x234>
		readTempSensor(huart, decodeASCII(UARTRxData[1]));
 8001cb2:	4b13      	ldr	r3, [pc, #76]	@ (8001d00 <handleUART+0x26c>)
 8001cb4:	785b      	ldrb	r3, [r3, #1]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 f83a 	bl	8001d30 <decodeASCII>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 fad1 	bl	8002268 <readTempSensor>
 8001cc6:	e00f      	b.n	8001ce8 <handleUART+0x254>
	}

	/********************************** CAN Bus *******************************************/
	// Send the second byte received over the CAN bus as a payload with id 0x700 (data_rx [0]= "n")
	else if (UARTRxData[0] == 0x6E) {
 8001cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8001d00 <handleUART+0x26c>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b6e      	cmp	r3, #110	@ 0x6e
 8001cce:	d10b      	bne.n	8001ce8 <handleUART+0x254>
		uint8_t TxData[1] = {UARTRxData[1]};
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001d00 <handleUART+0x26c>)
 8001cd2:	785b      	ldrb	r3, [r3, #1]
 8001cd4:	703b      	strb	r3, [r7, #0]
		sendCAN_TxMessage(&hcan2, 1, TxData, &CAN_TxMailbox, DUMMY_ID);
 8001cd6:	463a      	mov	r2, r7
 8001cd8:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	4b12      	ldr	r3, [pc, #72]	@ (8001d28 <handleUART+0x294>)
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	4812      	ldr	r0, [pc, #72]	@ (8001d2c <handleUART+0x298>)
 8001ce4:	f7fe fdbc 	bl	8000860 <sendCAN_TxMessage>
	}

	UARTRxData[0] = 0x00;
 8001ce8:	4b05      	ldr	r3, [pc, #20]	@ (8001d00 <handleUART+0x26c>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	701a      	strb	r2, [r3, #0]
	UARTRxData[1] = 0x00;
 8001cee:	4b04      	ldr	r3, [pc, #16]	@ (8001d00 <handleUART+0x26c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	705a      	strb	r2, [r3, #1]
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd90      	pop	{r4, r7, pc}
 8001cfc:	20000338 	.word	0x20000338
 8001d00:	20000388 	.word	0x20000388
 8001d04:	2000061d 	.word	0x2000061d
 8001d08:	200005e4 	.word	0x200005e4
 8001d0c:	200005f4 	.word	0x200005f4
 8001d10:	20000138 	.word	0x20000138
 8001d14:	20000604 	.word	0x20000604
 8001d18:	20000190 	.word	0x20000190
 8001d1c:	200005d4 	.word	0x200005d4
 8001d20:	20000380 	.word	0x20000380
 8001d24:	20000384 	.word	0x20000384
 8001d28:	2000038c 	.word	0x2000038c
 8001d2c:	20000048 	.word	0x20000048

08001d30 <decodeASCII>:

uint8_t decodeASCII(uint8_t asciiVal) {
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]
	int returnVal = -1;
 8001d3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d3e:	60fb      	str	r3, [r7, #12]
	if ((asciiVal >= 48) && (asciiVal <= 57)) {
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	2b2f      	cmp	r3, #47	@ 0x2f
 8001d44:	d905      	bls.n	8001d52 <decodeASCII+0x22>
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	2b39      	cmp	r3, #57	@ 0x39
 8001d4a:	d802      	bhi.n	8001d52 <decodeASCII+0x22>
		returnVal = asciiVal - 48;
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	3b30      	subs	r3, #48	@ 0x30
 8001d50:	60fb      	str	r3, [r7, #12]
	}
	return returnVal;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	b2db      	uxtb	r3, r3
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3714      	adds	r7, #20
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
	...

08001d64 <combine_system_status>:

uint8_t combine_system_status() {
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
    // Mask status to use only bits 4:0
    uint8_t masked_status = sysStatus & 0x1F; 			// 0001 1111b
 8001d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d9c <combine_system_status+0x38>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	f003 031f 	and.w	r3, r3, #31
 8001d72:	71fb      	strb	r3, [r7, #7]

    // Mask flight_state to use only bits 2:0
    uint8_t masked_flight_state = flight_state & 0x07; 	// 0000 0111b
 8001d74:	4b0a      	ldr	r3, [pc, #40]	@ (8001da0 <combine_system_status+0x3c>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	71bb      	strb	r3, [r7, #6]
    // Shift flight_state to the correct position (bits 7:5)
    uint8_t shifted_flight_state = masked_flight_state << 5;
 8001d7e:	79bb      	ldrb	r3, [r7, #6]
 8001d80:	015b      	lsls	r3, r3, #5
 8001d82:	717b      	strb	r3, [r7, #5]

    // Combine the masked_status and shifted_flight_state
    uint8_t combined_value = masked_status | shifted_flight_state;
 8001d84:	79fa      	ldrb	r2, [r7, #7]
 8001d86:	797b      	ldrb	r3, [r7, #5]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	713b      	strb	r3, [r7, #4]

    return combined_value;
 8001d8c:	793b      	ldrb	r3, [r7, #4]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	2000061d 	.word	0x2000061d
 8001da0:	2000061e 	.word	0x2000061e

08001da4 <configureCAN>:

void configureCAN() {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08a      	sub	sp, #40	@ 0x28
 8001da8:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef canFilterConfig;

	canFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8001daa:	2301      	movs	r3, #1
 8001dac:	623b      	str	r3, [r7, #32]
	canFilterConfig.FilterBank = 10;
 8001dae:	230a      	movs	r3, #10
 8001db0:	617b      	str	r3, [r7, #20]
	canFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001db2:	2300      	movs	r3, #0
 8001db4:	613b      	str	r3, [r7, #16]
	canFilterConfig.FilterIdHigh = 0x500 << 5;				// Filter only messages with ID 1X1XXXXXXXXb
 8001db6:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8001dba:	603b      	str	r3, [r7, #0]
	canFilterConfig.FilterIdLow = 0x0000;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	607b      	str	r3, [r7, #4]
	canFilterConfig.FilterMaskIdHigh = 0x500 << 5;
 8001dc0:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8001dc4:	60bb      	str	r3, [r7, #8]
	canFilterConfig.FilterMaskIdLow = 0x0000;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
	canFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61bb      	str	r3, [r7, #24]
	canFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	61fb      	str	r3, [r7, #28]
	canFilterConfig.SlaveStartFilterBank = 0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	627b      	str	r3, [r7, #36]	@ 0x24

	HAL_CAN_ConfigFilter(&hcan2, &canFilterConfig);
 8001dd6:	463b      	mov	r3, r7
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4803      	ldr	r0, [pc, #12]	@ (8001de8 <configureCAN+0x44>)
 8001ddc:	f001 fab4 	bl	8003348 <HAL_CAN_ConfigFilter>
}
 8001de0:	bf00      	nop
 8001de2:	3728      	adds	r7, #40	@ 0x28
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20000048 	.word	0x20000048

08001dec <find_next_blank_page_all>:

uint32_t find_next_blank_page_all() {
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
	int next_blank_page0 = find_next_blank_page(&hspi1, &end_of_flash, cs_spi1);
 8001df2:	4b0c      	ldr	r3, [pc, #48]	@ (8001e24 <find_next_blank_page_all+0x38>)
 8001df4:	cb0c      	ldmia	r3, {r2, r3}
 8001df6:	490c      	ldr	r1, [pc, #48]	@ (8001e28 <find_next_blank_page_all+0x3c>)
 8001df8:	480c      	ldr	r0, [pc, #48]	@ (8001e2c <find_next_blank_page_all+0x40>)
 8001dfa:	f7fe fe43 	bl	8000a84 <find_next_blank_page>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	607b      	str	r3, [r7, #4]
//	int next_blank_page1 = find_next_blank_page(&hspi2, &end_of_flash, cs_spi2);
	int next_blank_page1= 0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	603b      	str	r3, [r7, #0]
	// Assign the value of next_blank_page to the larger of next_blank_page0 and next_blank_page1
	next_blank_page = (next_blank_page0 > next_blank_page1) ? next_blank_page0 : next_blank_page1;
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	bfb8      	it	lt
 8001e0e:	4613      	movlt	r3, r2
 8001e10:	461a      	mov	r2, r3
 8001e12:	4b07      	ldr	r3, [pc, #28]	@ (8001e30 <find_next_blank_page_all+0x44>)
 8001e14:	601a      	str	r2, [r3, #0]

	return next_blank_page;
 8001e16:	4b06      	ldr	r3, [pc, #24]	@ (8001e30 <find_next_blank_page_all+0x44>)
 8001e18:	681b      	ldr	r3, [r3, #0]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	200005f4 	.word	0x200005f4
 8001e28:	200005da 	.word	0x200005da
 8001e2c:	20000138 	.word	0x20000138
 8001e30:	200005d4 	.word	0x200005d4

08001e34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e38:	b672      	cpsid	i
}
 8001e3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e3c:	bf00      	nop
 8001e3e:	e7fd      	b.n	8001e3c <Error_Handler+0x8>

08001e40 <systemStatus>:

#include "peripheral_driver.h"
/***************************************************************************************************************
 * Generic Functions
 */
uint8_t systemStatus(SPI_HandleTypeDef *hspi1, SPI_HandleTypeDef *hspi2, I2C_HandleTypeDef* hi2c1, I2C_HandleTypeDef* hi2c2) {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
 8001e4c:	603b      	str	r3, [r7, #0]
	uint8_t retVal = 0x00;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	75fb      	strb	r3, [r7, #23]

	// Check BME280_1
	if(readBME280_id_reg(hi2c1, 1) != 0x60) {			// Expected 0x60
 8001e52:	2101      	movs	r1, #1
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7fe fc93 	bl	8000780 <readBME280_id_reg>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b60      	cmp	r3, #96	@ 0x60
 8001e5e:	d003      	beq.n	8001e68 <systemStatus+0x28>
		retVal  = retVal | 0x10;
 8001e60:	7dfb      	ldrb	r3, [r7, #23]
 8001e62:	f043 0310 	orr.w	r3, r3, #16
 8001e66:	75fb      	strb	r3, [r7, #23]
	}

	// Check BME280_0
	if(readBME280_id_reg(hi2c1, 0) != 0x60) {			// Expected 0x60
 8001e68:	2100      	movs	r1, #0
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7fe fc88 	bl	8000780 <readBME280_id_reg>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b60      	cmp	r3, #96	@ 0x60
 8001e74:	d003      	beq.n	8001e7e <systemStatus+0x3e>
		retVal  = retVal | 0x08;
 8001e76:	7dfb      	ldrb	r3, [r7, #23]
 8001e78:	f043 0308 	orr.w	r3, r3, #8
 8001e7c:	75fb      	strb	r3, [r7, #23]
	}

	// Check Accelerometer
	if(readAccel_whoami(hi2c2) != 0xE5) {				// Expected 0xE5
 8001e7e:	6838      	ldr	r0, [r7, #0]
 8001e80:	f7fe fb94 	bl	80005ac <readAccel_whoami>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2be5      	cmp	r3, #229	@ 0xe5
 8001e88:	d003      	beq.n	8001e92 <systemStatus+0x52>
		retVal  = retVal | 0x04;
 8001e8a:	7dfb      	ldrb	r3, [r7, #23]
 8001e8c:	f043 0304 	orr.w	r3, r3, #4
 8001e90:	75fb      	strb	r3, [r7, #23]
	}

	// Check SPIFlash_1
	uint8_t manu[2] = {0, 0};
 8001e92:	2300      	movs	r3, #0
 8001e94:	82bb      	strh	r3, [r7, #20]
	read_manufacturer_id(manu, hspi2, cs_spi2);
 8001e96:	4b11      	ldr	r3, [pc, #68]	@ (8001edc <systemStatus+0x9c>)
 8001e98:	f107 0014 	add.w	r0, r7, #20
 8001e9c:	cb0c      	ldmia	r3, {r2, r3}
 8001e9e:	68b9      	ldr	r1, [r7, #8]
 8001ea0:	f7fe feb4 	bl	8000c0c <read_manufacturer_id>
	if(manu[0] != 0xEF) {								// Expected 0xEF
 8001ea4:	7d3b      	ldrb	r3, [r7, #20]
 8001ea6:	2bef      	cmp	r3, #239	@ 0xef
 8001ea8:	d003      	beq.n	8001eb2 <systemStatus+0x72>
		retVal  = retVal | 0x02;
 8001eaa:	7dfb      	ldrb	r3, [r7, #23]
 8001eac:	f043 0302 	orr.w	r3, r3, #2
 8001eb0:	75fb      	strb	r3, [r7, #23]
	}

	// Check SPIFlash_0
	uint8_t manu0[2] = {0, 0};
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	823b      	strh	r3, [r7, #16]
	read_manufacturer_id(manu0, hspi1, cs_spi1);
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee0 <systemStatus+0xa0>)
 8001eb8:	f107 0010 	add.w	r0, r7, #16
 8001ebc:	cb0c      	ldmia	r3, {r2, r3}
 8001ebe:	68f9      	ldr	r1, [r7, #12]
 8001ec0:	f7fe fea4 	bl	8000c0c <read_manufacturer_id>
	if(manu0[0] != 0xEF) {								// Expected 0xEF
 8001ec4:	7c3b      	ldrb	r3, [r7, #16]
 8001ec6:	2bef      	cmp	r3, #239	@ 0xef
 8001ec8:	d003      	beq.n	8001ed2 <systemStatus+0x92>
		retVal  = retVal | 0x01;
 8001eca:	7dfb      	ldrb	r3, [r7, #23]
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	75fb      	strb	r3, [r7, #23]
	}
	return retVal;
 8001ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	20000604 	.word	0x20000604
 8001ee0:	200005f4 	.word	0x200005f4

08001ee4 <heartbeatUART>:

void heartbeatUART(UART_HandleTypeDef *huart) {
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
	send_uart_hex(huart, 0x51);			// Transmit the heartbeat as device ID (0x51 = Q)
 8001eec:	2151      	movs	r1, #81	@ 0x51
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f001 f859 	bl	8002fa6 <send_uart_hex>
}
 8001ef4:	bf00      	nop
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <eraseFlashSPI>:

/***************************************************************************************************************
 * SPI Flash Functions
 */
void eraseFlashSPI(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, GPIO_Config chip_select) {
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	4639      	mov	r1, r7
 8001f08:	e881 000c 	stmia.w	r1, {r2, r3}
	if (erase_chip_spi(hspi, chip_select) == HAL_OK) {
 8001f0c:	463b      	mov	r3, r7
 8001f0e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001f12:	68f8      	ldr	r0, [r7, #12]
 8001f14:	f7fe fd28 	bl	8000968 <erase_chip_spi>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d104      	bne.n	8001f28 <eraseFlashSPI+0x2c>
		send_uart_string(huart, "Successful Chip Erase\r\n");
 8001f1e:	4906      	ldr	r1, [pc, #24]	@ (8001f38 <eraseFlashSPI+0x3c>)
 8001f20:	68b8      	ldr	r0, [r7, #8]
 8001f22:	f001 f82c 	bl	8002f7e <send_uart_string>
	} else {
		send_uart_string(huart, "Error during chip erase. Please check the connection and try again.\r\n");
	}
}
 8001f26:	e003      	b.n	8001f30 <eraseFlashSPI+0x34>
		send_uart_string(huart, "Error during chip erase. Please check the connection and try again.\r\n");
 8001f28:	4904      	ldr	r1, [pc, #16]	@ (8001f3c <eraseFlashSPI+0x40>)
 8001f2a:	68b8      	ldr	r0, [r7, #8]
 8001f2c:	f001 f827 	bl	8002f7e <send_uart_string>
}
 8001f30:	bf00      	nop
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	08009588 	.word	0x08009588
 8001f3c:	080095a0 	.word	0x080095a0

08001f40 <readFlashToUART>:

void readFlashToUART(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, GPIO_Config config) {
 8001f40:	b590      	push	{r4, r7, lr}
 8001f42:	b0cb      	sub	sp, #300	@ 0x12c
 8001f44:	af02      	add	r7, sp, #8
 8001f46:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 8001f4a:	f5a4 748a 	sub.w	r4, r4, #276	@ 0x114
 8001f4e:	6020      	str	r0, [r4, #0]
 8001f50:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8001f54:	f5a0 708c 	sub.w	r0, r0, #280	@ 0x118
 8001f58:	6001      	str	r1, [r0, #0]
 8001f5a:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8001f5e:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 8001f62:	e881 000c 	stmia.w	r1, {r2, r3}
	uint32_t num_of_pages = next_blank_page;
 8001f66:	4b2a      	ldr	r3, [pc, #168]	@ (8002010 <readFlashToUART+0xd0>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	if(num_of_pages == 0) {
 8001f6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d103      	bne.n	8001f7e <readFlashToUART+0x3e>
		num_of_pages = PAGE_SIZE;
 8001f76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f7a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	}
	num_of_pages = num_of_pages/PAGE_SIZE;
 8001f7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001f82:	0a1b      	lsrs	r3, r3, #8
 8001f84:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	uint32_t address = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET);		// Activate the "write out" LED
 8001f8e:	2201      	movs	r2, #1
 8001f90:	2180      	movs	r1, #128	@ 0x80
 8001f92:	4820      	ldr	r0, [pc, #128]	@ (8002014 <readFlashToUART+0xd4>)
 8001f94:	f002 fe1c 	bl	8004bd0 <HAL_GPIO_WritePin>

	for (int i = 0; i < (num_of_pages); i++) {
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8001f9e:	e026      	b.n	8001fee <readFlashToUART+0xae>
		uint8_t page[PAGE_SIZE];
		read_page_spi(page, hspi, address, config);
 8001fa0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001fa4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001fa8:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001fac:	f5a2 718a 	sub.w	r1, r2, #276	@ 0x114
 8001fb0:	f107 0014 	add.w	r0, r7, #20
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	9200      	str	r2, [sp, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001fbe:	6809      	ldr	r1, [r1, #0]
 8001fc0:	f7fe fdfe 	bl	8000bc0 <read_page_spi>
		uart_transmit_page(huart, page);						// Transmit the data//
 8001fc4:	f107 0214 	add.w	r2, r7, #20
 8001fc8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001fcc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001fd0:	4611      	mov	r1, r2
 8001fd2:	6818      	ldr	r0, [r3, #0]
 8001fd4:	f000 ffc2 	bl	8002f5c <uart_transmit_page>
		address += PAGE_SIZE;
 8001fd8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001fdc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001fe0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	for (int i = 0; i < (num_of_pages); i++) {
 8001fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001fe8:	3301      	adds	r3, #1
 8001fea:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8001fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001ff2:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d8d2      	bhi.n	8001fa0 <readFlashToUART+0x60>
	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);	// Deactivate the "write out" LED
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2180      	movs	r1, #128	@ 0x80
 8001ffe:	4805      	ldr	r0, [pc, #20]	@ (8002014 <readFlashToUART+0xd4>)
 8002000:	f002 fde6 	bl	8004bd0 <HAL_GPIO_WritePin>
}
 8002004:	bf00      	nop
 8002006:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 800200a:	46bd      	mov	sp, r7
 800200c:	bd90      	pop	{r4, r7, pc}
 800200e:	bf00      	nop
 8002010:	200005d4 	.word	0x200005d4
 8002014:	40020400 	.word	0x40020400

08002018 <readFlashManuSPI>:

void readFlashManuSPI(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, GPIO_Config config) {
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	4639      	mov	r1, r7
 8002024:	e881 000c 	stmia.w	r1, {r2, r3}
	uint8_t manu[2] = {0, 0};
 8002028:	2300      	movs	r3, #0
 800202a:	82bb      	strh	r3, [r7, #20]
	read_manufacturer_id(manu, hspi, config);
 800202c:	f107 0014 	add.w	r0, r7, #20
 8002030:	463b      	mov	r3, r7
 8002032:	cb0c      	ldmia	r3, {r2, r3}
 8002034:	68f9      	ldr	r1, [r7, #12]
 8002036:	f7fe fde9 	bl	8000c0c <read_manufacturer_id>
	send_uart_hex(huart, manu[0]);
 800203a:	7d3b      	ldrb	r3, [r7, #20]
 800203c:	4619      	mov	r1, r3
 800203e:	68b8      	ldr	r0, [r7, #8]
 8002040:	f000 ffb1 	bl	8002fa6 <send_uart_hex>
	send_uart_hex(huart, manu[1]);
 8002044:	7d7b      	ldrb	r3, [r7, #21]
 8002046:	4619      	mov	r1, r3
 8002048:	68b8      	ldr	r0, [r7, #8]
 800204a:	f000 ffac 	bl	8002fa6 <send_uart_hex>
}
 800204e:	bf00      	nop
 8002050:	3718      	adds	r7, #24
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
	...

08002058 <writePageSPI_W>:

void writePageSPI_W(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, GPIO_Config config) {
 8002058:	b590      	push	{r4, r7, lr}
 800205a:	b0c9      	sub	sp, #292	@ 0x124
 800205c:	af02      	add	r7, sp, #8
 800205e:	f507 748c 	add.w	r4, r7, #280	@ 0x118
 8002062:	f5a4 7486 	sub.w	r4, r4, #268	@ 0x10c
 8002066:	6020      	str	r0, [r4, #0]
 8002068:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 800206c:	f5a0 7088 	sub.w	r0, r0, #272	@ 0x110
 8002070:	6001      	str	r1, [r0, #0]
 8002072:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8002076:	f5a1 718c 	sub.w	r1, r1, #280	@ 0x118
 800207a:	e881 000c 	stmia.w	r1, {r2, r3}
	uint8_t data_out[PAGE_SIZE];
	for (int i = 0; i < PAGE_SIZE; i++) {
 800207e:	2300      	movs	r3, #0
 8002080:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002084:	e00d      	b.n	80020a2 <writePageSPI_W+0x4a>
		data_out[i] = 0x77;		// Make all data in the page 'w'
 8002086:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800208a:	f5a3 7282 	sub.w	r2, r3, #260	@ 0x104
 800208e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002092:	4413      	add	r3, r2
 8002094:	2277      	movs	r2, #119	@ 0x77
 8002096:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < PAGE_SIZE; i++) {
 8002098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800209c:	3301      	adds	r3, #1
 800209e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80020a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80020a6:	2bff      	cmp	r3, #255	@ 0xff
 80020a8:	dded      	ble.n	8002086 <writePageSPI_W+0x2e>
	}
	write_data_spi_dma(data_out, hspi, next_blank_page, config);
 80020aa:	4b13      	ldr	r3, [pc, #76]	@ (80020f8 <writePageSPI_W+0xa0>)
 80020ac:	681c      	ldr	r4, [r3, #0]
 80020ae:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80020b2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80020b6:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80020ba:	f5a2 7186 	sub.w	r1, r2, #268	@ 0x10c
 80020be:	f107 0014 	add.w	r0, r7, #20
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	9200      	str	r2, [sp, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4622      	mov	r2, r4
 80020ca:	6809      	ldr	r1, [r1, #0]
 80020cc:	f7fe fcac 	bl	8000a28 <write_data_spi_dma>
	next_blank_page += PAGE_SIZE;
 80020d0:	4b09      	ldr	r3, [pc, #36]	@ (80020f8 <writePageSPI_W+0xa0>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80020d8:	4a07      	ldr	r2, [pc, #28]	@ (80020f8 <writePageSPI_W+0xa0>)
 80020da:	6013      	str	r3, [r2, #0]

	send_uart_string(huart, "Successful Page Written\r\n");
 80020dc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80020e0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80020e4:	4905      	ldr	r1, [pc, #20]	@ (80020fc <writePageSPI_W+0xa4>)
 80020e6:	6818      	ldr	r0, [r3, #0]
 80020e8:	f000 ff49 	bl	8002f7e <send_uart_string>
}
 80020ec:	bf00      	nop
 80020ee:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd90      	pop	{r4, r7, pc}
 80020f6:	bf00      	nop
 80020f8:	200005d4 	.word	0x200005d4
 80020fc:	080095e8 	.word	0x080095e8

08002100 <resetSPIFlash>:

void resetSPIFlash(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, GPIO_Config config) {
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	4639      	mov	r1, r7
 800210c:	e881 000c 	stmia.w	r1, {r2, r3}
	software_reset(hspi, config);
 8002110:	463b      	mov	r3, r7
 8002112:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f7fe fc62 	bl	80009e0 <software_reset>
	send_uart_string(huart, "Flash Chip Reset\r\n");
 800211c:	4903      	ldr	r1, [pc, #12]	@ (800212c <resetSPIFlash+0x2c>)
 800211e:	68b8      	ldr	r0, [r7, #8]
 8002120:	f000 ff2d 	bl	8002f7e <send_uart_string>
}
 8002124:	bf00      	nop
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	08009604 	.word	0x08009604

08002130 <checkAccelWhoAmI>:
/***************************************************************************************************************
 * I2C Accelerometer Functions
 */
void checkAccelWhoAmI(I2C_HandleTypeDef* hi2c, UART_HandleTypeDef *huart) {
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
	uint8_t whoami = readAccel_whoami(hi2c);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7fe fa36 	bl	80005ac <readAccel_whoami>
 8002140:	4603      	mov	r3, r0
 8002142:	73fb      	strb	r3, [r7, #15]
	send_uart_hex(huart, whoami);
 8002144:	7bfb      	ldrb	r3, [r7, #15]
 8002146:	4619      	mov	r1, r3
 8002148:	6838      	ldr	r0, [r7, #0]
 800214a:	f000 ff2c 	bl	8002fa6 <send_uart_hex>
}
 800214e:	bf00      	nop
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <accelToUART>:

void accelToUART(UART_HandleTypeDef *huart) {
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 6; i++) {
 8002160:	2300      	movs	r3, #0
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	e00a      	b.n	800217c <accelToUART+0x24>
		send_uart_hex(huart, accel_data[i]);
 8002166:	4a09      	ldr	r2, [pc, #36]	@ (800218c <accelToUART+0x34>)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4413      	add	r3, r2
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	4619      	mov	r1, r3
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 ff18 	bl	8002fa6 <send_uart_hex>
	for (int i = 0; i < 6; i++) {
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	3301      	adds	r3, #1
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2b05      	cmp	r3, #5
 8002180:	ddf1      	ble.n	8002166 <accelToUART+0xe>
	}
}
 8002182:	bf00      	nop
 8002184:	bf00      	nop
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	200005bc 	.word	0x200005bc

08002190 <readTempSensorID>:

/***************************************************************************************************************
 * I2C BME280 Sensor Functions
 */
void readTempSensorID(I2C_HandleTypeDef* hi2c, UART_HandleTypeDef *huart, uint8_t tempNo) {
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	4613      	mov	r3, r2
 800219c:	71fb      	strb	r3, [r7, #7]
	send_uart_hex(huart, readBME280_id_reg(hi2c, tempNo));
 800219e:	79fb      	ldrb	r3, [r7, #7]
 80021a0:	4619      	mov	r1, r3
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f7fe faec 	bl	8000780 <readBME280_id_reg>
 80021a8:	4603      	mov	r3, r0
 80021aa:	4619      	mov	r1, r3
 80021ac:	68b8      	ldr	r0, [r7, #8]
 80021ae:	f000 fefa 	bl	8002fa6 <send_uart_hex>
}
 80021b2:	bf00      	nop
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <readTempCalibration>:

void readTempCalibration(I2C_HandleTypeDef* hi2c, UART_HandleTypeDef *huart, uint8_t tempNo) {
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b090      	sub	sp, #64	@ 0x40
 80021be:	af00      	add	r7, sp, #0
 80021c0:	60f8      	str	r0, [r7, #12]
 80021c2:	60b9      	str	r1, [r7, #8]
 80021c4:	4613      	mov	r3, r2
 80021c6:	71fb      	strb	r3, [r7, #7]
	uint8_t calibration1[25];
	uint8_t calibration2[7];

	for (uint8_t i = 0; i < CALIB_CNT_1; i++) {
 80021c8:	2300      	movs	r3, #0
 80021ca:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80021ce:	e016      	b.n	80021fe <readTempCalibration+0x44>
		calibration1[i] = 0x00;
 80021d0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80021d4:	3340      	adds	r3, #64	@ 0x40
 80021d6:	443b      	add	r3, r7
 80021d8:	2200      	movs	r2, #0
 80021da:	f803 2c28 	strb.w	r2, [r3, #-40]
		if (i < CALIB_CNT_2) {
 80021de:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80021e2:	2b06      	cmp	r3, #6
 80021e4:	d806      	bhi.n	80021f4 <readTempCalibration+0x3a>
			calibration2[i] = 0x00;
 80021e6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80021ea:	3340      	adds	r3, #64	@ 0x40
 80021ec:	443b      	add	r3, r7
 80021ee:	2200      	movs	r2, #0
 80021f0:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (uint8_t i = 0; i < CALIB_CNT_1; i++) {
 80021f4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80021f8:	3301      	adds	r3, #1
 80021fa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80021fe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002202:	2b18      	cmp	r3, #24
 8002204:	d9e4      	bls.n	80021d0 <readTempCalibration+0x16>
		}
	}

	readBME280_calib(hi2c, tempNo, calibration1, calibration2);
 8002206:	f107 0310 	add.w	r3, r7, #16
 800220a:	f107 0218 	add.w	r2, r7, #24
 800220e:	79f9      	ldrb	r1, [r7, #7]
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	f7fe fad1 	bl	80007b8 <readBME280_calib>

	for (int i = 0; i < 25; i++) {
 8002216:	2300      	movs	r3, #0
 8002218:	63bb      	str	r3, [r7, #56]	@ 0x38
 800221a:	e00b      	b.n	8002234 <readTempCalibration+0x7a>
	  send_uart_hex(huart, calibration1[i]);
 800221c:	f107 0218 	add.w	r2, r7, #24
 8002220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002222:	4413      	add	r3, r2
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	4619      	mov	r1, r3
 8002228:	68b8      	ldr	r0, [r7, #8]
 800222a:	f000 febc 	bl	8002fa6 <send_uart_hex>
	for (int i = 0; i < 25; i++) {
 800222e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002230:	3301      	adds	r3, #1
 8002232:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002236:	2b18      	cmp	r3, #24
 8002238:	ddf0      	ble.n	800221c <readTempCalibration+0x62>
	}

	for (int i = 0; i < 7; i++) {
 800223a:	2300      	movs	r3, #0
 800223c:	637b      	str	r3, [r7, #52]	@ 0x34
 800223e:	e00b      	b.n	8002258 <readTempCalibration+0x9e>
	  send_uart_hex(huart, calibration2[i]);
 8002240:	f107 0210 	add.w	r2, r7, #16
 8002244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002246:	4413      	add	r3, r2
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	4619      	mov	r1, r3
 800224c:	68b8      	ldr	r0, [r7, #8]
 800224e:	f000 feaa 	bl	8002fa6 <send_uart_hex>
	for (int i = 0; i < 7; i++) {
 8002252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002254:	3301      	adds	r3, #1
 8002256:	637b      	str	r3, [r7, #52]	@ 0x34
 8002258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800225a:	2b06      	cmp	r3, #6
 800225c:	ddf0      	ble.n	8002240 <readTempCalibration+0x86>
	}
}
 800225e:	bf00      	nop
 8002260:	bf00      	nop
 8002262:	3740      	adds	r7, #64	@ 0x40
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <readTempSensor>:

void readTempSensor(UART_HandleTypeDef *huart, uint8_t tempNo) {
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	460b      	mov	r3, r1
 8002272:	70fb      	strb	r3, [r7, #3]
	if (tempNo == 0) {
 8002274:	78fb      	ldrb	r3, [r7, #3]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d111      	bne.n	800229e <readTempSensor+0x36>
		for (int i = 0; i < 6; i++) {
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	e00a      	b.n	8002296 <readTempSensor+0x2e>
			send_uart_hex(huart, bme280_data_0[i]);
 8002280:	4a13      	ldr	r2, [pc, #76]	@ (80022d0 <readTempSensor+0x68>)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	4413      	add	r3, r2
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	4619      	mov	r1, r3
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 fe8b 	bl	8002fa6 <send_uart_hex>
		for (int i = 0; i < 6; i++) {
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	3301      	adds	r3, #1
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2b05      	cmp	r3, #5
 800229a:	ddf1      	ble.n	8002280 <readTempSensor+0x18>
	} else if (tempNo == 1) {
		for (int i = 0; i < 6; i++) {
			send_uart_hex(huart, bme280_data_1[i]);
		}
	}
}
 800229c:	e013      	b.n	80022c6 <readTempSensor+0x5e>
	} else if (tempNo == 1) {
 800229e:	78fb      	ldrb	r3, [r7, #3]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d110      	bne.n	80022c6 <readTempSensor+0x5e>
		for (int i = 0; i < 6; i++) {
 80022a4:	2300      	movs	r3, #0
 80022a6:	60bb      	str	r3, [r7, #8]
 80022a8:	e00a      	b.n	80022c0 <readTempSensor+0x58>
			send_uart_hex(huart, bme280_data_1[i]);
 80022aa:	4a0a      	ldr	r2, [pc, #40]	@ (80022d4 <readTempSensor+0x6c>)
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	4413      	add	r3, r2
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	4619      	mov	r1, r3
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 fe76 	bl	8002fa6 <send_uart_hex>
		for (int i = 0; i < 6; i++) {
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	3301      	adds	r3, #1
 80022be:	60bb      	str	r3, [r7, #8]
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	2b05      	cmp	r3, #5
 80022c4:	ddf1      	ble.n	80022aa <readTempSensor+0x42>
}
 80022c6:	bf00      	nop
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	200005c4 	.word	0x200005c4
 80022d4:	200005cc 	.word	0x200005cc

080022d8 <readAllSensors>:

/***************************************************************************************************************
 * Process All Sensors
 */
void readAllSensors(I2C_HandleTypeDef* hi2c_accel, I2C_HandleTypeDef* hi2c_temp, RTC_HandleTypeDef* hrtc) {
 80022d8:	b5b0      	push	{r4, r5, r7, lr}
 80022da:	b08a      	sub	sp, #40	@ 0x28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
	// Read Accelerometer Data
	readAccelerometer(accel_data, hi2c_accel);
 80022e4:	68f9      	ldr	r1, [r7, #12]
 80022e6:	4868      	ldr	r0, [pc, #416]	@ (8002488 <readAllSensors+0x1b0>)
 80022e8:	f7fe f93a 	bl	8000560 <readAccelerometer>

	// Read BME280 Data
	readTempHumPres(bme280_data_0, hi2c_temp, 0);
 80022ec:	2200      	movs	r2, #0
 80022ee:	68b9      	ldr	r1, [r7, #8]
 80022f0:	4866      	ldr	r0, [pc, #408]	@ (800248c <readAllSensors+0x1b4>)
 80022f2:	f7fe f9eb 	bl	80006cc <readTempHumPres>
	readTempHumPres(bme280_data_1, hi2c_temp, 1);
 80022f6:	2201      	movs	r2, #1
 80022f8:	68b9      	ldr	r1, [r7, #8]
 80022fa:	4865      	ldr	r0, [pc, #404]	@ (8002490 <readAllSensors+0x1b8>)
 80022fc:	f7fe f9e6 	bl	80006cc <readTempHumPres>

	uint16_t time = getTimestampMilliseconds(hrtc);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 f903 	bl	800250c <getTimestampMilliseconds>
 8002306:	4603      	mov	r3, r0
 8002308:	82fb      	strh	r3, [r7, #22]
	uint8_t array_ptr = 0;
 800230a:	2300      	movs	r3, #0
 800230c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	// Store the new read in the buffer if there is space
	if (byte_tracker < (PAGE_SIZE - READ_SIZE)) {
 8002310:	4b60      	ldr	r3, [pc, #384]	@ (8002494 <readAllSensors+0x1bc>)
 8002312:	881b      	ldrh	r3, [r3, #0]
 8002314:	2bea      	cmp	r3, #234	@ 0xea
 8002316:	f200 80b2 	bhi.w	800247e <readAllSensors+0x1a6>
		// Store the timestamp in the buffer (Little Endian)
		data_buffer_tx[buffer_tracker][byte_tracker + array_ptr] = (uint8_t) (time & 0xFF); 		// Least significant byte (LSB)
 800231a:	4b5f      	ldr	r3, [pc, #380]	@ (8002498 <readAllSensors+0x1c0>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	461a      	mov	r2, r3
 8002320:	4b5c      	ldr	r3, [pc, #368]	@ (8002494 <readAllSensors+0x1bc>)
 8002322:	881b      	ldrh	r3, [r3, #0]
 8002324:	4619      	mov	r1, r3
 8002326:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800232a:	440b      	add	r3, r1
 800232c:	8af9      	ldrh	r1, [r7, #22]
 800232e:	b2c8      	uxtb	r0, r1
 8002330:	495a      	ldr	r1, [pc, #360]	@ (800249c <readAllSensors+0x1c4>)
 8002332:	0212      	lsls	r2, r2, #8
 8002334:	440a      	add	r2, r1
 8002336:	4413      	add	r3, r2
 8002338:	4602      	mov	r2, r0
 800233a:	701a      	strb	r2, [r3, #0]
		array_ptr += 1;
 800233c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002340:	3301      	adds	r3, #1
 8002342:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		data_buffer_tx[buffer_tracker][byte_tracker + array_ptr] = (uint8_t) ((time >> 8) & 0xFF); // Most significant byte (MSB)
 8002346:	8afb      	ldrh	r3, [r7, #22]
 8002348:	0a1b      	lsrs	r3, r3, #8
 800234a:	b299      	uxth	r1, r3
 800234c:	4b52      	ldr	r3, [pc, #328]	@ (8002498 <readAllSensors+0x1c0>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	461a      	mov	r2, r3
 8002352:	4b50      	ldr	r3, [pc, #320]	@ (8002494 <readAllSensors+0x1bc>)
 8002354:	881b      	ldrh	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800235c:	4403      	add	r3, r0
 800235e:	b2c8      	uxtb	r0, r1
 8002360:	494e      	ldr	r1, [pc, #312]	@ (800249c <readAllSensors+0x1c4>)
 8002362:	0212      	lsls	r2, r2, #8
 8002364:	440a      	add	r2, r1
 8002366:	4413      	add	r3, r2
 8002368:	4602      	mov	r2, r0
 800236a:	701a      	strb	r2, [r3, #0]
		array_ptr += 1;
 800236c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002370:	3301      	adds	r3, #1
 8002372:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		// Store the accelerometer data
		for (int i = 0; i < 6; i++) {
 8002376:	2300      	movs	r3, #0
 8002378:	623b      	str	r3, [r7, #32]
 800237a:	e01a      	b.n	80023b2 <readAllSensors+0xda>
		  data_buffer_tx[buffer_tracker][byte_tracker + array_ptr] = accel_data[i];
 800237c:	4b46      	ldr	r3, [pc, #280]	@ (8002498 <readAllSensors+0x1c0>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	461c      	mov	r4, r3
 8002382:	4b44      	ldr	r3, [pc, #272]	@ (8002494 <readAllSensors+0x1bc>)
 8002384:	881b      	ldrh	r3, [r3, #0]
 8002386:	461a      	mov	r2, r3
 8002388:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800238c:	4413      	add	r3, r2
 800238e:	493e      	ldr	r1, [pc, #248]	@ (8002488 <readAllSensors+0x1b0>)
 8002390:	6a3a      	ldr	r2, [r7, #32]
 8002392:	440a      	add	r2, r1
 8002394:	7810      	ldrb	r0, [r2, #0]
 8002396:	4941      	ldr	r1, [pc, #260]	@ (800249c <readAllSensors+0x1c4>)
 8002398:	0222      	lsls	r2, r4, #8
 800239a:	440a      	add	r2, r1
 800239c:	4413      	add	r3, r2
 800239e:	4602      	mov	r2, r0
 80023a0:	701a      	strb	r2, [r3, #0]
		  array_ptr += 1;
 80023a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80023a6:	3301      	adds	r3, #1
 80023a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		for (int i = 0; i < 6; i++) {
 80023ac:	6a3b      	ldr	r3, [r7, #32]
 80023ae:	3301      	adds	r3, #1
 80023b0:	623b      	str	r3, [r7, #32]
 80023b2:	6a3b      	ldr	r3, [r7, #32]
 80023b4:	2b05      	cmp	r3, #5
 80023b6:	dde1      	ble.n	800237c <readAllSensors+0xa4>
		}

		// Store the BME280_0 Data
		for (int i = 0; i < 6; i++) {
 80023b8:	2300      	movs	r3, #0
 80023ba:	61fb      	str	r3, [r7, #28]
 80023bc:	e01a      	b.n	80023f4 <readAllSensors+0x11c>
		  data_buffer_tx[buffer_tracker][byte_tracker + array_ptr] = bme280_data_0[i];
 80023be:	4b36      	ldr	r3, [pc, #216]	@ (8002498 <readAllSensors+0x1c0>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	461c      	mov	r4, r3
 80023c4:	4b33      	ldr	r3, [pc, #204]	@ (8002494 <readAllSensors+0x1bc>)
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	461a      	mov	r2, r3
 80023ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80023ce:	4413      	add	r3, r2
 80023d0:	492e      	ldr	r1, [pc, #184]	@ (800248c <readAllSensors+0x1b4>)
 80023d2:	69fa      	ldr	r2, [r7, #28]
 80023d4:	440a      	add	r2, r1
 80023d6:	7810      	ldrb	r0, [r2, #0]
 80023d8:	4930      	ldr	r1, [pc, #192]	@ (800249c <readAllSensors+0x1c4>)
 80023da:	0222      	lsls	r2, r4, #8
 80023dc:	440a      	add	r2, r1
 80023de:	4413      	add	r3, r2
 80023e0:	4602      	mov	r2, r0
 80023e2:	701a      	strb	r2, [r3, #0]
		  array_ptr += 1;
 80023e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80023e8:	3301      	adds	r3, #1
 80023ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		for (int i = 0; i < 6; i++) {
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	3301      	adds	r3, #1
 80023f2:	61fb      	str	r3, [r7, #28]
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	2b05      	cmp	r3, #5
 80023f8:	dde1      	ble.n	80023be <readAllSensors+0xe6>
		}

		// Store the BME280_1 Data
		for (int i = 0; i < 6; i++) {
 80023fa:	2300      	movs	r3, #0
 80023fc:	61bb      	str	r3, [r7, #24]
 80023fe:	e01a      	b.n	8002436 <readAllSensors+0x15e>
		  data_buffer_tx[buffer_tracker][byte_tracker + array_ptr] = bme280_data_1[i];
 8002400:	4b25      	ldr	r3, [pc, #148]	@ (8002498 <readAllSensors+0x1c0>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	461c      	mov	r4, r3
 8002406:	4b23      	ldr	r3, [pc, #140]	@ (8002494 <readAllSensors+0x1bc>)
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	461a      	mov	r2, r3
 800240c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002410:	4413      	add	r3, r2
 8002412:	491f      	ldr	r1, [pc, #124]	@ (8002490 <readAllSensors+0x1b8>)
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	440a      	add	r2, r1
 8002418:	7810      	ldrb	r0, [r2, #0]
 800241a:	4920      	ldr	r1, [pc, #128]	@ (800249c <readAllSensors+0x1c4>)
 800241c:	0222      	lsls	r2, r4, #8
 800241e:	440a      	add	r2, r1
 8002420:	4413      	add	r3, r2
 8002422:	4602      	mov	r2, r0
 8002424:	701a      	strb	r2, [r3, #0]
		  array_ptr += 1;
 8002426:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800242a:	3301      	adds	r3, #1
 800242c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		for (int i = 0; i < 6; i++) {
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	3301      	adds	r3, #1
 8002434:	61bb      	str	r3, [r7, #24]
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	2b05      	cmp	r3, #5
 800243a:	dde1      	ble.n	8002400 <readAllSensors+0x128>
		}

		// Store the flight state and peripheral status in the final byte
		data_buffer_tx[buffer_tracker][byte_tracker + array_ptr] = combine_system_status();
 800243c:	4b16      	ldr	r3, [pc, #88]	@ (8002498 <readAllSensors+0x1c0>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	461d      	mov	r5, r3
 8002442:	4b14      	ldr	r3, [pc, #80]	@ (8002494 <readAllSensors+0x1bc>)
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	461a      	mov	r2, r3
 8002448:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800244c:	18d4      	adds	r4, r2, r3
 800244e:	f7ff fc89 	bl	8001d64 <combine_system_status>
 8002452:	4603      	mov	r3, r0
 8002454:	4619      	mov	r1, r3
 8002456:	4a11      	ldr	r2, [pc, #68]	@ (800249c <readAllSensors+0x1c4>)
 8002458:	022b      	lsls	r3, r5, #8
 800245a:	4413      	add	r3, r2
 800245c:	4423      	add	r3, r4
 800245e:	460a      	mov	r2, r1
 8002460:	701a      	strb	r2, [r3, #0]
		array_ptr += 1;
 8002462:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002466:	3301      	adds	r3, #1
 8002468:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		byte_tracker = byte_tracker + (array_ptr);
 800246c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002470:	b29a      	uxth	r2, r3
 8002472:	4b08      	ldr	r3, [pc, #32]	@ (8002494 <readAllSensors+0x1bc>)
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	4413      	add	r3, r2
 8002478:	b29a      	uxth	r2, r3
 800247a:	4b06      	ldr	r3, [pc, #24]	@ (8002494 <readAllSensors+0x1bc>)
 800247c:	801a      	strh	r2, [r3, #0]
	}
}
 800247e:	bf00      	nop
 8002480:	3728      	adds	r7, #40	@ 0x28
 8002482:	46bd      	mov	sp, r7
 8002484:	bdb0      	pop	{r4, r5, r7, pc}
 8002486:	bf00      	nop
 8002488:	200005bc 	.word	0x200005bc
 800248c:	200005c4 	.word	0x200005c4
 8002490:	200005cc 	.word	0x200005cc
 8002494:	200005d8 	.word	0x200005d8
 8002498:	200005b8 	.word	0x200005b8
 800249c:	200003b8 	.word	0x200003b8

080024a0 <initialise_rtc_default>:
    .Month = RTC_MONTH_JANUARY, // Set default month (e.g., January)
    .Date = 1, // Set default day of the month
    .Year = 24 // Set default year (e.g., 2021)
};

void initialise_rtc_default(RTC_HandleTypeDef* hrtc) {
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
    // Enable access to the backup domain
    __HAL_RCC_PWR_CLK_ENABLE();
 80024a8:	2300      	movs	r3, #0
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	4b13      	ldr	r3, [pc, #76]	@ (80024fc <initialise_rtc_default+0x5c>)
 80024ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b0:	4a12      	ldr	r2, [pc, #72]	@ (80024fc <initialise_rtc_default+0x5c>)
 80024b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80024b8:	4b10      	ldr	r3, [pc, #64]	@ (80024fc <initialise_rtc_default+0x5c>)
 80024ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	68fb      	ldr	r3, [r7, #12]
    HAL_PWR_EnableBkUpAccess();
 80024c4:	f003 fc46 	bl	8005d54 <HAL_PWR_EnableBkUpAccess>

    // Reset the RTC
    __HAL_RCC_BACKUPRESET_FORCE();
 80024c8:	4b0d      	ldr	r3, [pc, #52]	@ (8002500 <initialise_rtc_default+0x60>)
 80024ca:	2201      	movs	r2, #1
 80024cc:	601a      	str	r2, [r3, #0]
    __HAL_RCC_BACKUPRESET_RELEASE();
 80024ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002500 <initialise_rtc_default+0x60>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]

    // Initialize RTC hardware
    HAL_RTC_MspInit(hrtc);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 fa61 	bl	800299c <HAL_RTC_MspInit>

    // Set default time and date
    HAL_RTC_SetTime(hrtc, &defaultTime, RTC_FORMAT_BIN);
 80024da:	2200      	movs	r2, #0
 80024dc:	4909      	ldr	r1, [pc, #36]	@ (8002504 <initialise_rtc_default+0x64>)
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f004 fafb 	bl	8006ada <HAL_RTC_SetTime>
    HAL_RTC_SetDate(hrtc, &defaultDate, RTC_FORMAT_BIN);
 80024e4:	2200      	movs	r2, #0
 80024e6:	4908      	ldr	r1, [pc, #32]	@ (8002508 <initialise_rtc_default+0x68>)
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f004 fbee 	bl	8006cca <HAL_RTC_SetDate>

    // Disable access to the backup domain
    HAL_PWR_DisableBkUpAccess();
 80024ee:	f003 fc45 	bl	8005d7c <HAL_PWR_DisableBkUpAccess>
}
 80024f2:	bf00      	nop
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40023800 	.word	0x40023800
 8002500:	42470e40 	.word	0x42470e40
 8002504:	20000620 	.word	0x20000620
 8002508:	20000018 	.word	0x20000018

0800250c <getTimestampMilliseconds>:

uint32_t getTimestampMilliseconds(RTC_HandleTypeDef* hrtc) {
 800250c:	b580      	push	{r7, lr}
 800250e:	b08c      	sub	sp, #48	@ 0x30
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
    RTC_TimeTypeDef rtcTime;
    RTC_DateTypeDef rtcDate;

    // Read RTC time and date
    HAL_RTC_GetTime(hrtc, &rtcTime, RTC_FORMAT_BIN);
 8002514:	f107 0310 	add.w	r3, r7, #16
 8002518:	2200      	movs	r2, #0
 800251a:	4619      	mov	r1, r3
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f004 fb76 	bl	8006c0e <HAL_RTC_GetTime>
    HAL_RTC_GetDate(hrtc, &rtcDate, RTC_FORMAT_BIN);
 8002522:	f107 030c 	add.w	r3, r7, #12
 8002526:	2200      	movs	r2, #0
 8002528:	4619      	mov	r1, r3
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f004 fc51 	bl	8006dd2 <HAL_RTC_GetDate>

    // Calculate timestamp in milliseconds
    uint32_t timestampSeconds = rtcTime.Seconds + rtcTime.Minutes * 60 + rtcTime.Hours * 3600;
 8002530:	7cbb      	ldrb	r3, [r7, #18]
 8002532:	4619      	mov	r1, r3
 8002534:	7c7b      	ldrb	r3, [r7, #17]
 8002536:	461a      	mov	r2, r3
 8002538:	4613      	mov	r3, r2
 800253a:	011b      	lsls	r3, r3, #4
 800253c:	1a9b      	subs	r3, r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	18ca      	adds	r2, r1, r3
 8002542:	7c3b      	ldrb	r3, [r7, #16]
 8002544:	4619      	mov	r1, r3
 8002546:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800254a:	fb01 f303 	mul.w	r3, r1, r3
 800254e:	4413      	add	r3, r2
 8002550:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t timestampMilliseconds = timestampSeconds * 1000;
 8002552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002554:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002558:	fb02 f303 	mul.w	r3, r2, r3
 800255c:	62bb      	str	r3, [r7, #40]	@ 0x28
    float subsecondsFraction = (float)(rtcTime.SecondFraction - rtcTime.SubSeconds) / (rtcTime.SecondFraction + 1);
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	ee07 3a90 	vmov	s15, r3
 8002568:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	3301      	adds	r3, #1
 8002570:	ee07 3a90 	vmov	s15, r3
 8002574:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002578:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800257c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    timestampMilliseconds += subsecondsFraction * 1000;
 8002580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002582:	ee07 3a90 	vmov	s15, r3
 8002586:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800258a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800258e:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80025b0 <getTimestampMilliseconds+0xa4>
 8002592:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002596:	ee77 7a27 	vadd.f32	s15, s14, s15
 800259a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800259e:	ee17 3a90 	vmov	r3, s15
 80025a2:	62bb      	str	r3, [r7, #40]	@ 0x28

    return timestampMilliseconds;
 80025a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3730      	adds	r7, #48	@ 0x30
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	447a0000 	.word	0x447a0000

080025b4 <spi_sendOp_readByte>:
#ifndef SRC_SPI_DRIVER_C_
#define SRC_SPI_DRIVER_C_

#include "spi_driver.h"

HAL_StatusTypeDef spi_sendOp_readByte(uint8_t* opcode, SPI_HandleTypeDef *hspi, uint8_t* data_ptr, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
 80025c0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status;
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);	// Set the chip select pin to low to initiate SPI comms
 80025c2:	8c3b      	ldrh	r3, [r7, #32]
 80025c4:	2200      	movs	r2, #0
 80025c6:	4619      	mov	r1, r3
 80025c8:	6838      	ldr	r0, [r7, #0]
 80025ca:	f002 fb01 	bl	8004bd0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, opcode, 1, TIMEOUT_SML);			// Write the write enable value to the Flash to initial reading
 80025ce:	2302      	movs	r3, #2
 80025d0:	2201      	movs	r2, #1
 80025d2:	68f9      	ldr	r1, [r7, #12]
 80025d4:	68b8      	ldr	r0, [r7, #8]
 80025d6:	f004 fd92 	bl	80070fe <HAL_SPI_Transmit>
	status = HAL_SPI_Receive(hspi, data_ptr, 1, TIMEOUT_SML);
 80025da:	2302      	movs	r3, #2
 80025dc:	2201      	movs	r2, #1
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	68b8      	ldr	r0, [r7, #8]
 80025e2:	f004 fecf 	bl	8007384 <HAL_SPI_Receive>
 80025e6:	4603      	mov	r3, r0
 80025e8:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);
 80025ea:	8c3b      	ldrh	r3, [r7, #32]
 80025ec:	2201      	movs	r2, #1
 80025ee:	4619      	mov	r1, r3
 80025f0:	6838      	ldr	r0, [r7, #0]
 80025f2:	f002 faed 	bl	8004bd0 <HAL_GPIO_WritePin>
	return status;
 80025f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <perform_operation>:

HAL_StatusTypeDef perform_operation(uint8_t* opcode, SPI_HandleTypeDef *hspi, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
 800260c:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef status;
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);				// Set the chip select pin to low to initiate SPI comms
 800260e:	887b      	ldrh	r3, [r7, #2]
 8002610:	2200      	movs	r2, #0
 8002612:	4619      	mov	r1, r3
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f002 fadb 	bl	8004bd0 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(hspi, opcode, 1, TIMEOUT_SML);				// Write the opcode value
 800261a:	2302      	movs	r3, #2
 800261c:	2201      	movs	r2, #1
 800261e:	68f9      	ldr	r1, [r7, #12]
 8002620:	68b8      	ldr	r0, [r7, #8]
 8002622:	f004 fd6c 	bl	80070fe <HAL_SPI_Transmit>
 8002626:	4603      	mov	r3, r0
 8002628:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);
 800262a:	887b      	ldrh	r3, [r7, #2]
 800262c:	2201      	movs	r2, #1
 800262e:	4619      	mov	r1, r3
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f002 facd 	bl	8004bd0 <HAL_GPIO_WritePin>

	return status;
 8002636:	7dfb      	ldrb	r3, [r7, #23]
}
 8002638:	4618      	mov	r0, r3
 800263a:	3718      	adds	r7, #24
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <spi_read_data>:

HAL_StatusTypeDef spi_read_data(uint8_t* opcode, uint16_t data_size, uint8_t data_read[data_size], SPI_HandleTypeDef *hspi, uint32_t addr, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	607a      	str	r2, [r7, #4]
 800264a:	603b      	str	r3, [r7, #0]
 800264c:	460b      	mov	r3, r1
 800264e:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef status;

	// Split the 24 bit address into three 8 bit ints
	uint8_t addrL = addr & 0xFF;  // Get the low byte
 8002650:	6a3b      	ldr	r3, [r7, #32]
 8002652:	b2db      	uxtb	r3, r3
 8002654:	75bb      	strb	r3, [r7, #22]
	uint8_t addrM = (addr >> 8) & 0xFF;  // Get the middle byte
 8002656:	6a3b      	ldr	r3, [r7, #32]
 8002658:	0a1b      	lsrs	r3, r3, #8
 800265a:	b2db      	uxtb	r3, r3
 800265c:	757b      	strb	r3, [r7, #21]
	uint8_t addrH = (addr >> 16) & 0xFF;  // Get the high byte
 800265e:	6a3b      	ldr	r3, [r7, #32]
 8002660:	0c1b      	lsrs	r3, r3, #16
 8002662:	b2db      	uxtb	r3, r3
 8002664:	753b      	strb	r3, [r7, #20]

	// Read the data denoted by the given address
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);
 8002666:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002668:	2200      	movs	r2, #0
 800266a:	4619      	mov	r1, r3
 800266c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800266e:	f002 faaf 	bl	8004bd0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, opcode, 1, TIMEOUT_SML);	// Write the read enable value
 8002672:	2302      	movs	r3, #2
 8002674:	2201      	movs	r2, #1
 8002676:	68f9      	ldr	r1, [r7, #12]
 8002678:	6838      	ldr	r0, [r7, #0]
 800267a:	f004 fd40 	bl	80070fe <HAL_SPI_Transmit>

	// Transmit the 24 bit address of the page to initialise read from
	HAL_SPI_Transmit(hspi, &addrH, 1, TIMEOUT_SML);
 800267e:	f107 0114 	add.w	r1, r7, #20
 8002682:	2302      	movs	r3, #2
 8002684:	2201      	movs	r2, #1
 8002686:	6838      	ldr	r0, [r7, #0]
 8002688:	f004 fd39 	bl	80070fe <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &addrM, 1, TIMEOUT_SML);
 800268c:	f107 0115 	add.w	r1, r7, #21
 8002690:	2302      	movs	r3, #2
 8002692:	2201      	movs	r2, #1
 8002694:	6838      	ldr	r0, [r7, #0]
 8002696:	f004 fd32 	bl	80070fe <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &addrL, 1, TIMEOUT_SML);
 800269a:	f107 0116 	add.w	r1, r7, #22
 800269e:	2302      	movs	r3, #2
 80026a0:	2201      	movs	r2, #1
 80026a2:	6838      	ldr	r0, [r7, #0]
 80026a4:	f004 fd2b 	bl	80070fe <HAL_SPI_Transmit>

	status = HAL_SPI_Receive(hspi, data_read, data_size, TIMEOUT_LRG);
 80026a8:	897a      	ldrh	r2, [r7, #10]
 80026aa:	2364      	movs	r3, #100	@ 0x64
 80026ac:	6879      	ldr	r1, [r7, #4]
 80026ae:	6838      	ldr	r0, [r7, #0]
 80026b0:	f004 fe68 	bl	8007384 <HAL_SPI_Receive>
 80026b4:	4603      	mov	r3, r0
 80026b6:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);
 80026b8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80026ba:	2201      	movs	r2, #1
 80026bc:	4619      	mov	r1, r3
 80026be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80026c0:	f002 fa86 	bl	8004bd0 <HAL_GPIO_WritePin>

	return status;
 80026c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <spi_write_data_dma>:
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);	// Set the chip select pin to high to remove the Flash from the SPI bus

	return status;
}

HAL_StatusTypeDef spi_write_data_dma(uint8_t* opcode, uint16_t data_size, uint8_t data_write[data_size], SPI_HandleTypeDef *hspi, uint32_t addr, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b086      	sub	sp, #24
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	60f8      	str	r0, [r7, #12]
 80026d6:	607a      	str	r2, [r7, #4]
 80026d8:	603b      	str	r3, [r7, #0]
 80026da:	460b      	mov	r3, r1
 80026dc:	817b      	strh	r3, [r7, #10]
    HAL_StatusTypeDef status;

    // Split the 24 bit address into three 8 bit ints
    uint8_t addrL = addr & 0xFF;  			// Get the low byte
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	75bb      	strb	r3, [r7, #22]
    uint8_t addrM = (addr >> 8) & 0xFF;  	// Get the middle byte
 80026e4:	6a3b      	ldr	r3, [r7, #32]
 80026e6:	0a1b      	lsrs	r3, r3, #8
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	757b      	strb	r3, [r7, #21]
    uint8_t addrH = (addr >> 16) & 0xFF;  	// Get the high byte
 80026ec:	6a3b      	ldr	r3, [r7, #32]
 80026ee:	0c1b      	lsrs	r3, r3, #16
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	753b      	strb	r3, [r7, #20]

    // Send the PageWrite command
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);	// Set the chip select pin to low to initiate SPI comms
 80026f4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80026f6:	2200      	movs	r2, #0
 80026f8:	4619      	mov	r1, r3
 80026fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80026fc:	f002 fa68 	bl	8004bd0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(hspi, opcode, 1, TIMEOUT_SML);					// Write the write enable value to the Flash to initial writing
 8002700:	2302      	movs	r3, #2
 8002702:	2201      	movs	r2, #1
 8002704:	68f9      	ldr	r1, [r7, #12]
 8002706:	6838      	ldr	r0, [r7, #0]
 8002708:	f004 fcf9 	bl	80070fe <HAL_SPI_Transmit>

    // Transmit the 24 bit address of the page to write to
    HAL_SPI_Transmit(hspi, &addrH, 1, TIMEOUT_SML);
 800270c:	f107 0114 	add.w	r1, r7, #20
 8002710:	2302      	movs	r3, #2
 8002712:	2201      	movs	r2, #1
 8002714:	6838      	ldr	r0, [r7, #0]
 8002716:	f004 fcf2 	bl	80070fe <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hspi, &addrM, 1, TIMEOUT_SML);
 800271a:	f107 0115 	add.w	r1, r7, #21
 800271e:	2302      	movs	r3, #2
 8002720:	2201      	movs	r2, #1
 8002722:	6838      	ldr	r0, [r7, #0]
 8002724:	f004 fceb 	bl	80070fe <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hspi, &addrL, 1, TIMEOUT_SML);
 8002728:	f107 0116 	add.w	r1, r7, #22
 800272c:	2302      	movs	r3, #2
 800272e:	2201      	movs	r2, #1
 8002730:	6838      	ldr	r0, [r7, #0]
 8002732:	f004 fce4 	bl	80070fe <HAL_SPI_Transmit>

    // Start the DMA transfer
    status = HAL_SPI_Transmit_DMA(hspi, data_write, data_size);
 8002736:	897b      	ldrh	r3, [r7, #10]
 8002738:	461a      	mov	r2, r3
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	6838      	ldr	r0, [r7, #0]
 800273e:	f005 f8e9 	bl	8007914 <HAL_SPI_Transmit_DMA>
 8002742:	4603      	mov	r3, r0
 8002744:	75fb      	strb	r3, [r7, #23]

    return status;
 8002746:	7dfb      	ldrb	r3, [r7, #23]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	607b      	str	r3, [r7, #4]
 800275a:	4b10      	ldr	r3, [pc, #64]	@ (800279c <HAL_MspInit+0x4c>)
 800275c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800275e:	4a0f      	ldr	r2, [pc, #60]	@ (800279c <HAL_MspInit+0x4c>)
 8002760:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002764:	6453      	str	r3, [r2, #68]	@ 0x44
 8002766:	4b0d      	ldr	r3, [pc, #52]	@ (800279c <HAL_MspInit+0x4c>)
 8002768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800276a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800276e:	607b      	str	r3, [r7, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002772:	2300      	movs	r3, #0
 8002774:	603b      	str	r3, [r7, #0]
 8002776:	4b09      	ldr	r3, [pc, #36]	@ (800279c <HAL_MspInit+0x4c>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277a:	4a08      	ldr	r2, [pc, #32]	@ (800279c <HAL_MspInit+0x4c>)
 800277c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002780:	6413      	str	r3, [r2, #64]	@ 0x40
 8002782:	4b06      	ldr	r3, [pc, #24]	@ (800279c <HAL_MspInit+0x4c>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800278a:	603b      	str	r3, [r7, #0]
 800278c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40023800 	.word	0x40023800

080027a0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08a      	sub	sp, #40	@ 0x28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a8:	f107 0314 	add.w	r3, r7, #20
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	609a      	str	r2, [r3, #8]
 80027b4:	60da      	str	r2, [r3, #12]
 80027b6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a24      	ldr	r2, [pc, #144]	@ (8002850 <HAL_CAN_MspInit+0xb0>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d141      	bne.n	8002846 <HAL_CAN_MspInit+0xa6>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	613b      	str	r3, [r7, #16]
 80027c6:	4b23      	ldr	r3, [pc, #140]	@ (8002854 <HAL_CAN_MspInit+0xb4>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ca:	4a22      	ldr	r2, [pc, #136]	@ (8002854 <HAL_CAN_MspInit+0xb4>)
 80027cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80027d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80027d2:	4b20      	ldr	r3, [pc, #128]	@ (8002854 <HAL_CAN_MspInit+0xb4>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80027da:	613b      	str	r3, [r7, #16]
 80027dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002854 <HAL_CAN_MspInit+0xb4>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e6:	4a1b      	ldr	r2, [pc, #108]	@ (8002854 <HAL_CAN_MspInit+0xb4>)
 80027e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80027ee:	4b19      	ldr	r3, [pc, #100]	@ (8002854 <HAL_CAN_MspInit+0xb4>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	60bb      	str	r3, [r7, #8]
 80027fe:	4b15      	ldr	r3, [pc, #84]	@ (8002854 <HAL_CAN_MspInit+0xb4>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002802:	4a14      	ldr	r2, [pc, #80]	@ (8002854 <HAL_CAN_MspInit+0xb4>)
 8002804:	f043 0302 	orr.w	r3, r3, #2
 8002808:	6313      	str	r3, [r2, #48]	@ 0x30
 800280a:	4b12      	ldr	r3, [pc, #72]	@ (8002854 <HAL_CAN_MspInit+0xb4>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	60bb      	str	r3, [r7, #8]
 8002814:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB5     ------> CAN2_RX
    PB6     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002816:	2360      	movs	r3, #96	@ 0x60
 8002818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281a:	2302      	movs	r3, #2
 800281c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281e:	2300      	movs	r3, #0
 8002820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002822:	2303      	movs	r3, #3
 8002824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002826:	2309      	movs	r3, #9
 8002828:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800282a:	f107 0314 	add.w	r3, r7, #20
 800282e:	4619      	mov	r1, r3
 8002830:	4809      	ldr	r0, [pc, #36]	@ (8002858 <HAL_CAN_MspInit+0xb8>)
 8002832:	f002 f809 	bl	8004848 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8002836:	2200      	movs	r2, #0
 8002838:	2100      	movs	r1, #0
 800283a:	2040      	movs	r0, #64	@ 0x40
 800283c:	f001 fbcb 	bl	8003fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8002840:	2040      	movs	r0, #64	@ 0x40
 8002842:	f001 fbe4 	bl	800400e <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN2_MspInit 1 */

  }

}
 8002846:	bf00      	nop
 8002848:	3728      	adds	r7, #40	@ 0x28
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40006800 	.word	0x40006800
 8002854:	40023800 	.word	0x40023800
 8002858:	40020400 	.word	0x40020400

0800285c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b08c      	sub	sp, #48	@ 0x30
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002864:	f107 031c 	add.w	r3, r7, #28
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	60da      	str	r2, [r3, #12]
 8002872:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a42      	ldr	r2, [pc, #264]	@ (8002984 <HAL_I2C_MspInit+0x128>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d12d      	bne.n	80028da <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	61bb      	str	r3, [r7, #24]
 8002882:	4b41      	ldr	r3, [pc, #260]	@ (8002988 <HAL_I2C_MspInit+0x12c>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002886:	4a40      	ldr	r2, [pc, #256]	@ (8002988 <HAL_I2C_MspInit+0x12c>)
 8002888:	f043 0302 	orr.w	r3, r3, #2
 800288c:	6313      	str	r3, [r2, #48]	@ 0x30
 800288e:	4b3e      	ldr	r3, [pc, #248]	@ (8002988 <HAL_I2C_MspInit+0x12c>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	61bb      	str	r3, [r7, #24]
 8002898:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800289a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800289e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028a0:	2312      	movs	r3, #18
 80028a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a8:	2303      	movs	r3, #3
 80028aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028ac:	2304      	movs	r3, #4
 80028ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028b0:	f107 031c 	add.w	r3, r7, #28
 80028b4:	4619      	mov	r1, r3
 80028b6:	4835      	ldr	r0, [pc, #212]	@ (800298c <HAL_I2C_MspInit+0x130>)
 80028b8:	f001 ffc6 	bl	8004848 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028bc:	2300      	movs	r3, #0
 80028be:	617b      	str	r3, [r7, #20]
 80028c0:	4b31      	ldr	r3, [pc, #196]	@ (8002988 <HAL_I2C_MspInit+0x12c>)
 80028c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c4:	4a30      	ldr	r2, [pc, #192]	@ (8002988 <HAL_I2C_MspInit+0x12c>)
 80028c6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80028ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80028cc:	4b2e      	ldr	r3, [pc, #184]	@ (8002988 <HAL_I2C_MspInit+0x12c>)
 80028ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028d4:	617b      	str	r3, [r7, #20]
 80028d6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80028d8:	e050      	b.n	800297c <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a2c      	ldr	r2, [pc, #176]	@ (8002990 <HAL_I2C_MspInit+0x134>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d14b      	bne.n	800297c <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028e4:	2300      	movs	r3, #0
 80028e6:	613b      	str	r3, [r7, #16]
 80028e8:	4b27      	ldr	r3, [pc, #156]	@ (8002988 <HAL_I2C_MspInit+0x12c>)
 80028ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ec:	4a26      	ldr	r2, [pc, #152]	@ (8002988 <HAL_I2C_MspInit+0x12c>)
 80028ee:	f043 0304 	orr.w	r3, r3, #4
 80028f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80028f4:	4b24      	ldr	r3, [pc, #144]	@ (8002988 <HAL_I2C_MspInit+0x12c>)
 80028f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	613b      	str	r3, [r7, #16]
 80028fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002900:	2300      	movs	r3, #0
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	4b20      	ldr	r3, [pc, #128]	@ (8002988 <HAL_I2C_MspInit+0x12c>)
 8002906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002908:	4a1f      	ldr	r2, [pc, #124]	@ (8002988 <HAL_I2C_MspInit+0x12c>)
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002910:	4b1d      	ldr	r3, [pc, #116]	@ (8002988 <HAL_I2C_MspInit+0x12c>)
 8002912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800291c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002920:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002922:	2312      	movs	r3, #18
 8002924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002926:	2300      	movs	r3, #0
 8002928:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800292a:	2303      	movs	r3, #3
 800292c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800292e:	2304      	movs	r3, #4
 8002930:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002932:	f107 031c 	add.w	r3, r7, #28
 8002936:	4619      	mov	r1, r3
 8002938:	4816      	ldr	r0, [pc, #88]	@ (8002994 <HAL_I2C_MspInit+0x138>)
 800293a:	f001 ff85 	bl	8004848 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800293e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002944:	2312      	movs	r3, #18
 8002946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	2300      	movs	r3, #0
 800294a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800294c:	2303      	movs	r3, #3
 800294e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002950:	2304      	movs	r3, #4
 8002952:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002954:	f107 031c 	add.w	r3, r7, #28
 8002958:	4619      	mov	r1, r3
 800295a:	480f      	ldr	r0, [pc, #60]	@ (8002998 <HAL_I2C_MspInit+0x13c>)
 800295c:	f001 ff74 	bl	8004848 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002960:	2300      	movs	r3, #0
 8002962:	60bb      	str	r3, [r7, #8]
 8002964:	4b08      	ldr	r3, [pc, #32]	@ (8002988 <HAL_I2C_MspInit+0x12c>)
 8002966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002968:	4a07      	ldr	r2, [pc, #28]	@ (8002988 <HAL_I2C_MspInit+0x12c>)
 800296a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800296e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002970:	4b05      	ldr	r3, [pc, #20]	@ (8002988 <HAL_I2C_MspInit+0x12c>)
 8002972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002974:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	68bb      	ldr	r3, [r7, #8]
}
 800297c:	bf00      	nop
 800297e:	3730      	adds	r7, #48	@ 0x30
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40005400 	.word	0x40005400
 8002988:	40023800 	.word	0x40023800
 800298c:	40020400 	.word	0x40020400
 8002990:	40005c00 	.word	0x40005c00
 8002994:	40020800 	.word	0x40020800
 8002998:	40020000 	.word	0x40020000

0800299c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08e      	sub	sp, #56	@ 0x38
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029a4:	f107 0308 	add.w	r3, r7, #8
 80029a8:	2230      	movs	r2, #48	@ 0x30
 80029aa:	2100      	movs	r1, #0
 80029ac:	4618      	mov	r0, r3
 80029ae:	f006 fdaf 	bl	8009510 <memset>
  if(hrtc->Instance==RTC)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a0c      	ldr	r2, [pc, #48]	@ (80029e8 <HAL_RTC_MspInit+0x4c>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d111      	bne.n	80029e0 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80029bc:	2320      	movs	r3, #32
 80029be:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80029c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80029c4:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029c6:	f107 0308 	add.w	r3, r7, #8
 80029ca:	4618      	mov	r0, r3
 80029cc:	f003 fe42 	bl	8006654 <HAL_RCCEx_PeriphCLKConfig>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80029d6:	f7ff fa2d 	bl	8001e34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80029da:	4b04      	ldr	r3, [pc, #16]	@ (80029ec <HAL_RTC_MspInit+0x50>)
 80029dc:	2201      	movs	r2, #1
 80029de:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80029e0:	bf00      	nop
 80029e2:	3738      	adds	r7, #56	@ 0x38
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40002800 	.word	0x40002800
 80029ec:	42470e3c 	.word	0x42470e3c

080029f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08c      	sub	sp, #48	@ 0x30
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f8:	f107 031c 	add.w	r3, r7, #28
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	605a      	str	r2, [r3, #4]
 8002a02:	609a      	str	r2, [r3, #8]
 8002a04:	60da      	str	r2, [r3, #12]
 8002a06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a6f      	ldr	r2, [pc, #444]	@ (8002bcc <HAL_SPI_MspInit+0x1dc>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d15b      	bne.n	8002aca <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	61bb      	str	r3, [r7, #24]
 8002a16:	4b6e      	ldr	r3, [pc, #440]	@ (8002bd0 <HAL_SPI_MspInit+0x1e0>)
 8002a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a1a:	4a6d      	ldr	r2, [pc, #436]	@ (8002bd0 <HAL_SPI_MspInit+0x1e0>)
 8002a1c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a20:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a22:	4b6b      	ldr	r3, [pc, #428]	@ (8002bd0 <HAL_SPI_MspInit+0x1e0>)
 8002a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a2a:	61bb      	str	r3, [r7, #24]
 8002a2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	617b      	str	r3, [r7, #20]
 8002a32:	4b67      	ldr	r3, [pc, #412]	@ (8002bd0 <HAL_SPI_MspInit+0x1e0>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a36:	4a66      	ldr	r2, [pc, #408]	@ (8002bd0 <HAL_SPI_MspInit+0x1e0>)
 8002a38:	f043 0301 	orr.w	r3, r3, #1
 8002a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a3e:	4b64      	ldr	r3, [pc, #400]	@ (8002bd0 <HAL_SPI_MspInit+0x1e0>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	617b      	str	r3, [r7, #20]
 8002a48:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002a4a:	23e0      	movs	r3, #224	@ 0xe0
 8002a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4e:	2302      	movs	r3, #2
 8002a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a52:	2300      	movs	r3, #0
 8002a54:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a56:	2303      	movs	r3, #3
 8002a58:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a5a:	2305      	movs	r3, #5
 8002a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a5e:	f107 031c 	add.w	r3, r7, #28
 8002a62:	4619      	mov	r1, r3
 8002a64:	485b      	ldr	r0, [pc, #364]	@ (8002bd4 <HAL_SPI_MspInit+0x1e4>)
 8002a66:	f001 feef 	bl	8004848 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8002a6a:	4b5b      	ldr	r3, [pc, #364]	@ (8002bd8 <HAL_SPI_MspInit+0x1e8>)
 8002a6c:	4a5b      	ldr	r2, [pc, #364]	@ (8002bdc <HAL_SPI_MspInit+0x1ec>)
 8002a6e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002a70:	4b59      	ldr	r3, [pc, #356]	@ (8002bd8 <HAL_SPI_MspInit+0x1e8>)
 8002a72:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002a76:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a78:	4b57      	ldr	r3, [pc, #348]	@ (8002bd8 <HAL_SPI_MspInit+0x1e8>)
 8002a7a:	2240      	movs	r2, #64	@ 0x40
 8002a7c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a7e:	4b56      	ldr	r3, [pc, #344]	@ (8002bd8 <HAL_SPI_MspInit+0x1e8>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a84:	4b54      	ldr	r3, [pc, #336]	@ (8002bd8 <HAL_SPI_MspInit+0x1e8>)
 8002a86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a8a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a8c:	4b52      	ldr	r3, [pc, #328]	@ (8002bd8 <HAL_SPI_MspInit+0x1e8>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a92:	4b51      	ldr	r3, [pc, #324]	@ (8002bd8 <HAL_SPI_MspInit+0x1e8>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002a98:	4b4f      	ldr	r3, [pc, #316]	@ (8002bd8 <HAL_SPI_MspInit+0x1e8>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002a9e:	4b4e      	ldr	r3, [pc, #312]	@ (8002bd8 <HAL_SPI_MspInit+0x1e8>)
 8002aa0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002aa4:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002aa6:	4b4c      	ldr	r3, [pc, #304]	@ (8002bd8 <HAL_SPI_MspInit+0x1e8>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002aac:	484a      	ldr	r0, [pc, #296]	@ (8002bd8 <HAL_SPI_MspInit+0x1e8>)
 8002aae:	f001 fac9 	bl	8004044 <HAL_DMA_Init>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8002ab8:	f7ff f9bc 	bl	8001e34 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a46      	ldr	r2, [pc, #280]	@ (8002bd8 <HAL_SPI_MspInit+0x1e8>)
 8002ac0:	649a      	str	r2, [r3, #72]	@ 0x48
 8002ac2:	4a45      	ldr	r2, [pc, #276]	@ (8002bd8 <HAL_SPI_MspInit+0x1e8>)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002ac8:	e07c      	b.n	8002bc4 <HAL_SPI_MspInit+0x1d4>
  else if(hspi->Instance==SPI2)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a44      	ldr	r2, [pc, #272]	@ (8002be0 <HAL_SPI_MspInit+0x1f0>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d177      	bne.n	8002bc4 <HAL_SPI_MspInit+0x1d4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	613b      	str	r3, [r7, #16]
 8002ad8:	4b3d      	ldr	r3, [pc, #244]	@ (8002bd0 <HAL_SPI_MspInit+0x1e0>)
 8002ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002adc:	4a3c      	ldr	r2, [pc, #240]	@ (8002bd0 <HAL_SPI_MspInit+0x1e0>)
 8002ade:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ae2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ae4:	4b3a      	ldr	r3, [pc, #232]	@ (8002bd0 <HAL_SPI_MspInit+0x1e0>)
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002aec:	613b      	str	r3, [r7, #16]
 8002aee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002af0:	2300      	movs	r3, #0
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	4b36      	ldr	r3, [pc, #216]	@ (8002bd0 <HAL_SPI_MspInit+0x1e0>)
 8002af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af8:	4a35      	ldr	r2, [pc, #212]	@ (8002bd0 <HAL_SPI_MspInit+0x1e0>)
 8002afa:	f043 0304 	orr.w	r3, r3, #4
 8002afe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b00:	4b33      	ldr	r3, [pc, #204]	@ (8002bd0 <HAL_SPI_MspInit+0x1e0>)
 8002b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60bb      	str	r3, [r7, #8]
 8002b10:	4b2f      	ldr	r3, [pc, #188]	@ (8002bd0 <HAL_SPI_MspInit+0x1e0>)
 8002b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b14:	4a2e      	ldr	r2, [pc, #184]	@ (8002bd0 <HAL_SPI_MspInit+0x1e0>)
 8002b16:	f043 0308 	orr.w	r3, r3, #8
 8002b1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b1c:	4b2c      	ldr	r3, [pc, #176]	@ (8002bd0 <HAL_SPI_MspInit+0x1e0>)
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b20:	f003 0308 	and.w	r3, r3, #8
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002b28:	230c      	movs	r3, #12
 8002b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b30:	2300      	movs	r3, #0
 8002b32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b34:	2303      	movs	r3, #3
 8002b36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b38:	2305      	movs	r3, #5
 8002b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b3c:	f107 031c 	add.w	r3, r7, #28
 8002b40:	4619      	mov	r1, r3
 8002b42:	4828      	ldr	r0, [pc, #160]	@ (8002be4 <HAL_SPI_MspInit+0x1f4>)
 8002b44:	f001 fe80 	bl	8004848 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b48:	2308      	movs	r3, #8
 8002b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b54:	2303      	movs	r3, #3
 8002b56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b58:	2305      	movs	r3, #5
 8002b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b5c:	f107 031c 	add.w	r3, r7, #28
 8002b60:	4619      	mov	r1, r3
 8002b62:	4821      	ldr	r0, [pc, #132]	@ (8002be8 <HAL_SPI_MspInit+0x1f8>)
 8002b64:	f001 fe70 	bl	8004848 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8002b68:	4b20      	ldr	r3, [pc, #128]	@ (8002bec <HAL_SPI_MspInit+0x1fc>)
 8002b6a:	4a21      	ldr	r2, [pc, #132]	@ (8002bf0 <HAL_SPI_MspInit+0x200>)
 8002b6c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8002b6e:	4b1f      	ldr	r3, [pc, #124]	@ (8002bec <HAL_SPI_MspInit+0x1fc>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b74:	4b1d      	ldr	r3, [pc, #116]	@ (8002bec <HAL_SPI_MspInit+0x1fc>)
 8002b76:	2240      	movs	r2, #64	@ 0x40
 8002b78:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b7a:	4b1c      	ldr	r3, [pc, #112]	@ (8002bec <HAL_SPI_MspInit+0x1fc>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b80:	4b1a      	ldr	r3, [pc, #104]	@ (8002bec <HAL_SPI_MspInit+0x1fc>)
 8002b82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b86:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b88:	4b18      	ldr	r3, [pc, #96]	@ (8002bec <HAL_SPI_MspInit+0x1fc>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b8e:	4b17      	ldr	r3, [pc, #92]	@ (8002bec <HAL_SPI_MspInit+0x1fc>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002b94:	4b15      	ldr	r3, [pc, #84]	@ (8002bec <HAL_SPI_MspInit+0x1fc>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002b9a:	4b14      	ldr	r3, [pc, #80]	@ (8002bec <HAL_SPI_MspInit+0x1fc>)
 8002b9c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002ba0:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ba2:	4b12      	ldr	r3, [pc, #72]	@ (8002bec <HAL_SPI_MspInit+0x1fc>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002ba8:	4810      	ldr	r0, [pc, #64]	@ (8002bec <HAL_SPI_MspInit+0x1fc>)
 8002baa:	f001 fa4b 	bl	8004044 <HAL_DMA_Init>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <HAL_SPI_MspInit+0x1c8>
      Error_Handler();
 8002bb4:	f7ff f93e 	bl	8001e34 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a0c      	ldr	r2, [pc, #48]	@ (8002bec <HAL_SPI_MspInit+0x1fc>)
 8002bbc:	649a      	str	r2, [r3, #72]	@ 0x48
 8002bbe:	4a0b      	ldr	r2, [pc, #44]	@ (8002bec <HAL_SPI_MspInit+0x1fc>)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002bc4:	bf00      	nop
 8002bc6:	3730      	adds	r7, #48	@ 0x30
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40013000 	.word	0x40013000
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	40020000 	.word	0x40020000
 8002bd8:	200001e8 	.word	0x200001e8
 8002bdc:	40026458 	.word	0x40026458
 8002be0:	40003800 	.word	0x40003800
 8002be4:	40020800 	.word	0x40020800
 8002be8:	40020c00 	.word	0x40020c00
 8002bec:	20000248 	.word	0x20000248
 8002bf0:	40026070 	.word	0x40026070

08002bf4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a1c      	ldr	r2, [pc, #112]	@ (8002c74 <HAL_TIM_Base_MspInit+0x80>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d116      	bne.n	8002c34 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8002c78 <HAL_TIM_Base_MspInit+0x84>)
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0e:	4a1a      	ldr	r2, [pc, #104]	@ (8002c78 <HAL_TIM_Base_MspInit+0x84>)
 8002c10:	f043 0310 	orr.w	r3, r3, #16
 8002c14:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c16:	4b18      	ldr	r3, [pc, #96]	@ (8002c78 <HAL_TIM_Base_MspInit+0x84>)
 8002c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1a:	f003 0310 	and.w	r3, r3, #16
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002c22:	2200      	movs	r2, #0
 8002c24:	2100      	movs	r1, #0
 8002c26:	2036      	movs	r0, #54	@ 0x36
 8002c28:	f001 f9d5 	bl	8003fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002c2c:	2036      	movs	r0, #54	@ 0x36
 8002c2e:	f001 f9ee 	bl	800400e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002c32:	e01a      	b.n	8002c6a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a10      	ldr	r2, [pc, #64]	@ (8002c7c <HAL_TIM_Base_MspInit+0x88>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d115      	bne.n	8002c6a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60bb      	str	r3, [r7, #8]
 8002c42:	4b0d      	ldr	r3, [pc, #52]	@ (8002c78 <HAL_TIM_Base_MspInit+0x84>)
 8002c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c46:	4a0c      	ldr	r2, [pc, #48]	@ (8002c78 <HAL_TIM_Base_MspInit+0x84>)
 8002c48:	f043 0320 	orr.w	r3, r3, #32
 8002c4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c78 <HAL_TIM_Base_MspInit+0x84>)
 8002c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c52:	f003 0320 	and.w	r3, r3, #32
 8002c56:	60bb      	str	r3, [r7, #8]
 8002c58:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	2037      	movs	r0, #55	@ 0x37
 8002c60:	f001 f9b9 	bl	8003fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002c64:	2037      	movs	r0, #55	@ 0x37
 8002c66:	f001 f9d2 	bl	800400e <HAL_NVIC_EnableIRQ>
}
 8002c6a:	bf00      	nop
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40001000 	.word	0x40001000
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	40001400 	.word	0x40001400

08002c80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b08a      	sub	sp, #40	@ 0x28
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c88:	f107 0314 	add.w	r3, r7, #20
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	605a      	str	r2, [r3, #4]
 8002c92:	609a      	str	r2, [r3, #8]
 8002c94:	60da      	str	r2, [r3, #12]
 8002c96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a1d      	ldr	r2, [pc, #116]	@ (8002d14 <HAL_UART_MspInit+0x94>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d133      	bne.n	8002d0a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	613b      	str	r3, [r7, #16]
 8002ca6:	4b1c      	ldr	r3, [pc, #112]	@ (8002d18 <HAL_UART_MspInit+0x98>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002caa:	4a1b      	ldr	r2, [pc, #108]	@ (8002d18 <HAL_UART_MspInit+0x98>)
 8002cac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cb2:	4b19      	ldr	r3, [pc, #100]	@ (8002d18 <HAL_UART_MspInit+0x98>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cba:	613b      	str	r3, [r7, #16]
 8002cbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	4b15      	ldr	r3, [pc, #84]	@ (8002d18 <HAL_UART_MspInit+0x98>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc6:	4a14      	ldr	r2, [pc, #80]	@ (8002d18 <HAL_UART_MspInit+0x98>)
 8002cc8:	f043 0308 	orr.w	r3, r3, #8
 8002ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cce:	4b12      	ldr	r3, [pc, #72]	@ (8002d18 <HAL_UART_MspInit+0x98>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd2:	f003 0308 	and.w	r3, r3, #8
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002cda:	2360      	movs	r3, #96	@ 0x60
 8002cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002cea:	2307      	movs	r3, #7
 8002cec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cee:	f107 0314 	add.w	r3, r7, #20
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4809      	ldr	r0, [pc, #36]	@ (8002d1c <HAL_UART_MspInit+0x9c>)
 8002cf6:	f001 fda7 	bl	8004848 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	2026      	movs	r0, #38	@ 0x26
 8002d00:	f001 f969 	bl	8003fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002d04:	2026      	movs	r0, #38	@ 0x26
 8002d06:	f001 f982 	bl	800400e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002d0a:	bf00      	nop
 8002d0c:	3728      	adds	r7, #40	@ 0x28
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40004400 	.word	0x40004400
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	40020c00 	.word	0x40020c00

08002d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d24:	bf00      	nop
 8002d26:	e7fd      	b.n	8002d24 <NMI_Handler+0x4>

08002d28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d2c:	bf00      	nop
 8002d2e:	e7fd      	b.n	8002d2c <HardFault_Handler+0x4>

08002d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d34:	bf00      	nop
 8002d36:	e7fd      	b.n	8002d34 <MemManage_Handler+0x4>

08002d38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d3c:	bf00      	nop
 8002d3e:	e7fd      	b.n	8002d3c <BusFault_Handler+0x4>

08002d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d44:	bf00      	nop
 8002d46:	e7fd      	b.n	8002d44 <UsageFault_Handler+0x4>

08002d48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d4c:	bf00      	nop
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d56:	b480      	push	{r7}
 8002d58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d5a:	bf00      	nop
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d68:	bf00      	nop
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d76:	f000 f9a7 	bl	80030c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d7a:	bf00      	nop
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Flight_JMP_Pin);
 8002d82:	2002      	movs	r0, #2
 8002d84:	f001 ff58 	bl	8004c38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002d88:	bf00      	nop
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002d90:	4802      	ldr	r0, [pc, #8]	@ (8002d9c <DMA1_Stream4_IRQHandler+0x10>)
 8002d92:	f001 faef 	bl	8004374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002d96:	bf00      	nop
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	20000248 	.word	0x20000248

08002da0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002da4:	4802      	ldr	r0, [pc, #8]	@ (8002db0 <USART2_IRQHandler+0x10>)
 8002da6:	f005 fc5d 	bl	8008664 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002daa:	bf00      	nop
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	20000338 	.word	0x20000338

08002db4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002db8:	4803      	ldr	r0, [pc, #12]	@ (8002dc8 <TIM6_DAC_IRQHandler+0x14>)
 8002dba:	f005 f8f5 	bl	8007fa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  tim6_overflow_flag = FLAG_SET;
 8002dbe:	4b03      	ldr	r3, [pc, #12]	@ (8002dcc <TIM6_DAC_IRQHandler+0x18>)
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002dc4:	bf00      	nop
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	200002a8 	.word	0x200002a8
 8002dcc:	200003b6 	.word	0x200003b6

08002dd0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002dd4:	4803      	ldr	r0, [pc, #12]	@ (8002de4 <TIM7_IRQHandler+0x14>)
 8002dd6:	f005 f8e7 	bl	8007fa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  tim7_overflow_flag = FLAG_SET;
 8002dda:	4b03      	ldr	r3, [pc, #12]	@ (8002de8 <TIM7_IRQHandler+0x18>)
 8002ddc:	2201      	movs	r2, #1
 8002dde:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM7_IRQn 1 */
}
 8002de0:	bf00      	nop
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	200002f0 	.word	0x200002f0
 8002de8:	200003b7 	.word	0x200003b7

08002dec <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002df0:	4802      	ldr	r0, [pc, #8]	@ (8002dfc <DMA2_Stream3_IRQHandler+0x10>)
 8002df2:	f001 fabf 	bl	8004374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002df6:	bf00      	nop
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	200001e8 	.word	0x200001e8

08002e00 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002e04:	4802      	ldr	r0, [pc, #8]	@ (8002e10 <CAN2_RX0_IRQHandler+0x10>)
 8002e06:	f000 fddb 	bl	80039c0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002e0a:	bf00      	nop
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	20000048 	.word	0x20000048

08002e14 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 1 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CAN_RxHeader, CAN_RxData);
 8002e1c:	4b09      	ldr	r3, [pc, #36]	@ (8002e44 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8002e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002e48 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8002e20:	2100      	movs	r1, #0
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 fc84 	bl	8003730 <HAL_CAN_GetRxMessage>
	CAN_RX_Flag = FLAG_SET;
 8002e28:	4b08      	ldr	r3, [pc, #32]	@ (8002e4c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	701a      	strb	r2, [r3, #0]

	if(CAN_First_Msg == FLAG_RESET) {
 8002e2e:	4b08      	ldr	r3, [pc, #32]	@ (8002e50 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d102      	bne.n	8002e3c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
		CAN_First_Msg = FLAG_SET;
 8002e36:	4b06      	ldr	r3, [pc, #24]	@ (8002e50 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8002e38:	2201      	movs	r2, #1
 8002e3a:	701a      	strb	r2, [r3, #0]
	}
}
 8002e3c:	bf00      	nop
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	200003ac 	.word	0x200003ac
 8002e48:	20000390 	.word	0x20000390
 8002e4c:	200003b4 	.word	0x200003b4
 8002e50:	200003b5 	.word	0x200003b5

08002e54 <HAL_GPIO_EXTI_Callback>:

// Set the reset RTC flag on the rising edge of the jumper flight input pin
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == jmp_flight.GPIO_Pin) {
 8002e5e:	4b07      	ldr	r3, [pc, #28]	@ (8002e7c <HAL_GPIO_EXTI_Callback+0x28>)
 8002e60:	889b      	ldrh	r3, [r3, #4]
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	88fa      	ldrh	r2, [r7, #6]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d102      	bne.n	8002e70 <HAL_GPIO_EXTI_Callback+0x1c>
		rtc_reset = FLAG_SET;
 8002e6a:	4b05      	ldr	r3, [pc, #20]	@ (8002e80 <HAL_GPIO_EXTI_Callback+0x2c>)
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	701a      	strb	r2, [r3, #0]
	}
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	20000614 	.word	0x20000614
 8002e80:	2000061c 	.word	0x2000061c

08002e84 <HAL_SPI_TxCpltCallback>:


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
	// Pull CS pin high to deselect the device
    if (hspi->Instance == SPI1) {
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a18      	ldr	r2, [pc, #96]	@ (8002ef4 <HAL_SPI_TxCpltCallback+0x70>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d108      	bne.n	8002ea8 <HAL_SPI_TxCpltCallback+0x24>
        // Pull CS pin high for SPI1 to deselect the device
    	HAL_GPIO_WritePin(cs_spi1.GPIOx, cs_spi1.GPIO_Pin, GPIO_PIN_SET);
 8002e96:	4b18      	ldr	r3, [pc, #96]	@ (8002ef8 <HAL_SPI_TxCpltCallback+0x74>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a17      	ldr	r2, [pc, #92]	@ (8002ef8 <HAL_SPI_TxCpltCallback+0x74>)
 8002e9c:	8891      	ldrh	r1, [r2, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f001 fe95 	bl	8004bd0 <HAL_GPIO_WritePin>
 8002ea6:	e00c      	b.n	8002ec2 <HAL_SPI_TxCpltCallback+0x3e>
    } else if (hspi->Instance == SPI2) {
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a13      	ldr	r2, [pc, #76]	@ (8002efc <HAL_SPI_TxCpltCallback+0x78>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d107      	bne.n	8002ec2 <HAL_SPI_TxCpltCallback+0x3e>
        // Pull CS pin high for SPI2 to deselect the device
    	HAL_GPIO_WritePin(cs_spi2.GPIOx, cs_spi2.GPIO_Pin, GPIO_PIN_SET);
 8002eb2:	4b13      	ldr	r3, [pc, #76]	@ (8002f00 <HAL_SPI_TxCpltCallback+0x7c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a12      	ldr	r2, [pc, #72]	@ (8002f00 <HAL_SPI_TxCpltCallback+0x7c>)
 8002eb8:	8891      	ldrh	r1, [r2, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f001 fe87 	bl	8004bd0 <HAL_GPIO_WritePin>
    }

    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0202 	bic.w	r2, r2, #2
 8002ed0:	605a      	str	r2, [r3, #4]
    clean_data_buffer(PAGE_SIZE, data_buffer_tx[buffer_tracker ^ 0x01]);
 8002ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8002f04 <HAL_SPI_TxCpltCallback+0x80>)
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	f083 0301 	eor.w	r3, r3, #1
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	021b      	lsls	r3, r3, #8
 8002ede:	4a0a      	ldr	r2, [pc, #40]	@ (8002f08 <HAL_SPI_TxCpltCallback+0x84>)
 8002ee0:	4413      	add	r3, r2
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002ee8:	f7fe fbc2 	bl	8001670 <clean_data_buffer>
}
 8002eec:	bf00      	nop
 8002eee:	3708      	adds	r7, #8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40013000 	.word	0x40013000
 8002ef8:	200005f4 	.word	0x200005f4
 8002efc:	40003800 	.word	0x40003800
 8002f00:	20000604 	.word	0x20000604
 8002f04:	200005b8 	.word	0x200005b8
 8002f08:	200003b8 	.word	0x200003b8

08002f0c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
	uart2_rec_flag = FLAG_SET;
 8002f14:	4b05      	ldr	r3, [pc, #20]	@ (8002f2c <HAL_UART_RxCpltCallback+0x20>)
 8002f16:	2201      	movs	r2, #1
 8002f18:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, UARTRxData, 2);
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	4904      	ldr	r1, [pc, #16]	@ (8002f30 <HAL_UART_RxCpltCallback+0x24>)
 8002f1e:	4805      	ldr	r0, [pc, #20]	@ (8002f34 <HAL_UART_RxCpltCallback+0x28>)
 8002f20:	f005 fb7b 	bl	800861a <HAL_UART_Receive_IT>
}
 8002f24:	bf00      	nop
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	2000038a 	.word	0x2000038a
 8002f30:	20000388 	.word	0x20000388
 8002f34:	20000338 	.word	0x20000338

08002f38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f3c:	4b06      	ldr	r3, [pc, #24]	@ (8002f58 <SystemInit+0x20>)
 8002f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f42:	4a05      	ldr	r2, [pc, #20]	@ (8002f58 <SystemInit+0x20>)
 8002f44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f4c:	bf00      	nop
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	e000ed00 	.word	0xe000ed00

08002f5c <uart_transmit_page>:

#include "uart_transmit.h"
/**
 * Transmit one single page over the UART interface
 */
void uart_transmit_page(UART_HandleTypeDef *huart, uint8_t page[PAGE_SIZE]) {
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huart, page, PAGE_SIZE, HAL_MAX_DELAY);
 8002f66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f6e:	6839      	ldr	r1, [r7, #0]
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f005 fac7 	bl	8008504 <HAL_UART_Transmit>
}
 8002f76:	bf00      	nop
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <send_uart_string>:

void send_uart_string(UART_HandleTypeDef *huart, const char *str) {
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b082      	sub	sp, #8
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
 8002f86:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8002f88:	6838      	ldr	r0, [r7, #0]
 8002f8a:	f7fd f92f 	bl	80001ec <strlen>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f96:	6839      	ldr	r1, [r7, #0]
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f005 fab3 	bl	8008504 <HAL_UART_Transmit>
}
 8002f9e:	bf00      	nop
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <send_uart_hex>:
	// Call the send_uart_string function to send the value to UART
	send_uart_string(huart, value_str);
	send_uart_string(huart, "\r\n");
}

void send_uart_hex(UART_HandleTypeDef *huart, uint8_t value) {
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b084      	sub	sp, #16
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
 8002fae:	460b      	mov	r3, r1
 8002fb0:	70fb      	strb	r3, [r7, #3]
	uint8_t buffer[1];
	buffer[0] = value;
 8002fb2:	78fb      	ldrb	r3, [r7, #3]
 8002fb4:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(huart, buffer, 1, HAL_MAX_DELAY);
 8002fb6:	f107 010c 	add.w	r1, r7, #12
 8002fba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f005 fa9f 	bl	8008504 <HAL_UART_Transmit>
}
 8002fc6:	bf00      	nop
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
	...

08002fd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002fd0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003008 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002fd4:	f7ff ffb0 	bl	8002f38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fd8:	480c      	ldr	r0, [pc, #48]	@ (800300c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002fda:	490d      	ldr	r1, [pc, #52]	@ (8003010 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002fdc:	4a0d      	ldr	r2, [pc, #52]	@ (8003014 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002fde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fe0:	e002      	b.n	8002fe8 <LoopCopyDataInit>

08002fe2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fe2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fe4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fe6:	3304      	adds	r3, #4

08002fe8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fe8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fec:	d3f9      	bcc.n	8002fe2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fee:	4a0a      	ldr	r2, [pc, #40]	@ (8003018 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ff0:	4c0a      	ldr	r4, [pc, #40]	@ (800301c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ff2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ff4:	e001      	b.n	8002ffa <LoopFillZerobss>

08002ff6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ff6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ff8:	3204      	adds	r2, #4

08002ffa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ffa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ffc:	d3fb      	bcc.n	8002ff6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ffe:	f006 fa8f 	bl	8009520 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003002:	f7fd febf 	bl	8000d84 <main>
  bx  lr    
 8003006:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003008:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800300c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003010:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8003014:	08009648 	.word	0x08009648
  ldr r2, =_sbss
 8003018:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 800301c:	20000638 	.word	0x20000638

08003020 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003020:	e7fe      	b.n	8003020 <ADC_IRQHandler>
	...

08003024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003028:	4b0e      	ldr	r3, [pc, #56]	@ (8003064 <HAL_Init+0x40>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a0d      	ldr	r2, [pc, #52]	@ (8003064 <HAL_Init+0x40>)
 800302e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003032:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003034:	4b0b      	ldr	r3, [pc, #44]	@ (8003064 <HAL_Init+0x40>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a0a      	ldr	r2, [pc, #40]	@ (8003064 <HAL_Init+0x40>)
 800303a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800303e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003040:	4b08      	ldr	r3, [pc, #32]	@ (8003064 <HAL_Init+0x40>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a07      	ldr	r2, [pc, #28]	@ (8003064 <HAL_Init+0x40>)
 8003046:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800304a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800304c:	2003      	movs	r0, #3
 800304e:	f000 ffb7 	bl	8003fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003052:	200f      	movs	r0, #15
 8003054:	f000 f808 	bl	8003068 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003058:	f7ff fb7a 	bl	8002750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	40023c00 	.word	0x40023c00

08003068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003070:	4b12      	ldr	r3, [pc, #72]	@ (80030bc <HAL_InitTick+0x54>)
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	4b12      	ldr	r3, [pc, #72]	@ (80030c0 <HAL_InitTick+0x58>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	4619      	mov	r1, r3
 800307a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800307e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003082:	fbb2 f3f3 	udiv	r3, r2, r3
 8003086:	4618      	mov	r0, r3
 8003088:	f000 ffcf 	bl	800402a <HAL_SYSTICK_Config>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e00e      	b.n	80030b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b0f      	cmp	r3, #15
 800309a:	d80a      	bhi.n	80030b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800309c:	2200      	movs	r2, #0
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80030a4:	f000 ff97 	bl	8003fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030a8:	4a06      	ldr	r2, [pc, #24]	@ (80030c4 <HAL_InitTick+0x5c>)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
 80030b0:	e000      	b.n	80030b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	2000001c 	.word	0x2000001c
 80030c0:	20000024 	.word	0x20000024
 80030c4:	20000020 	.word	0x20000020

080030c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030cc:	4b06      	ldr	r3, [pc, #24]	@ (80030e8 <HAL_IncTick+0x20>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	461a      	mov	r2, r3
 80030d2:	4b06      	ldr	r3, [pc, #24]	@ (80030ec <HAL_IncTick+0x24>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4413      	add	r3, r2
 80030d8:	4a04      	ldr	r2, [pc, #16]	@ (80030ec <HAL_IncTick+0x24>)
 80030da:	6013      	str	r3, [r2, #0]
}
 80030dc:	bf00      	nop
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	20000024 	.word	0x20000024
 80030ec:	20000634 	.word	0x20000634

080030f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  return uwTick;
 80030f4:	4b03      	ldr	r3, [pc, #12]	@ (8003104 <HAL_GetTick+0x14>)
 80030f6:	681b      	ldr	r3, [r3, #0]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	20000634 	.word	0x20000634

08003108 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003110:	f7ff ffee 	bl	80030f0 <HAL_GetTick>
 8003114:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003120:	d005      	beq.n	800312e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003122:	4b0a      	ldr	r3, [pc, #40]	@ (800314c <HAL_Delay+0x44>)
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	461a      	mov	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4413      	add	r3, r2
 800312c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800312e:	bf00      	nop
 8003130:	f7ff ffde 	bl	80030f0 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	429a      	cmp	r2, r3
 800313e:	d8f7      	bhi.n	8003130 <HAL_Delay+0x28>
  {
  }
}
 8003140:	bf00      	nop
 8003142:	bf00      	nop
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	20000024 	.word	0x20000024

08003150 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e0ed      	b.n	800333e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d102      	bne.n	8003174 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7ff fb16 	bl	80027a0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f042 0201 	orr.w	r2, r2, #1
 8003182:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003184:	f7ff ffb4 	bl	80030f0 <HAL_GetTick>
 8003188:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800318a:	e012      	b.n	80031b2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800318c:	f7ff ffb0 	bl	80030f0 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b0a      	cmp	r3, #10
 8003198:	d90b      	bls.n	80031b2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2205      	movs	r2, #5
 80031aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e0c5      	b.n	800333e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d0e5      	beq.n	800318c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 0202 	bic.w	r2, r2, #2
 80031ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031d0:	f7ff ff8e 	bl	80030f0 <HAL_GetTick>
 80031d4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80031d6:	e012      	b.n	80031fe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031d8:	f7ff ff8a 	bl	80030f0 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b0a      	cmp	r3, #10
 80031e4:	d90b      	bls.n	80031fe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ea:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2205      	movs	r2, #5
 80031f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e09f      	b.n	800333e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1e5      	bne.n	80031d8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	7e1b      	ldrb	r3, [r3, #24]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d108      	bne.n	8003226 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	e007      	b.n	8003236 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003234:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	7e5b      	ldrb	r3, [r3, #25]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d108      	bne.n	8003250 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	e007      	b.n	8003260 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800325e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	7e9b      	ldrb	r3, [r3, #26]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d108      	bne.n	800327a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f042 0220 	orr.w	r2, r2, #32
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	e007      	b.n	800328a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0220 	bic.w	r2, r2, #32
 8003288:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	7edb      	ldrb	r3, [r3, #27]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d108      	bne.n	80032a4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0210 	bic.w	r2, r2, #16
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	e007      	b.n	80032b4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f042 0210 	orr.w	r2, r2, #16
 80032b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	7f1b      	ldrb	r3, [r3, #28]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d108      	bne.n	80032ce <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f042 0208 	orr.w	r2, r2, #8
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	e007      	b.n	80032de <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0208 	bic.w	r2, r2, #8
 80032dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	7f5b      	ldrb	r3, [r3, #29]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d108      	bne.n	80032f8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f042 0204 	orr.w	r2, r2, #4
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	e007      	b.n	8003308 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0204 	bic.w	r2, r2, #4
 8003306:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	431a      	orrs	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	ea42 0103 	orr.w	r1, r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	1e5a      	subs	r2, r3, #1
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003348:	b480      	push	{r7}
 800334a:	b087      	sub	sp, #28
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800335e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003360:	7cfb      	ldrb	r3, [r7, #19]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d003      	beq.n	800336e <HAL_CAN_ConfigFilter+0x26>
 8003366:	7cfb      	ldrb	r3, [r7, #19]
 8003368:	2b02      	cmp	r3, #2
 800336a:	f040 80be 	bne.w	80034ea <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800336e:	4b65      	ldr	r3, [pc, #404]	@ (8003504 <HAL_CAN_ConfigFilter+0x1bc>)
 8003370:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003378:	f043 0201 	orr.w	r2, r3, #1
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003388:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339c:	021b      	lsls	r3, r3, #8
 800339e:	431a      	orrs	r2, r3
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	f003 031f 	and.w	r3, r3, #31
 80033ae:	2201      	movs	r2, #1
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	43db      	mvns	r3, r3
 80033c0:	401a      	ands	r2, r3
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	69db      	ldr	r3, [r3, #28]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d123      	bne.n	8003418 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	43db      	mvns	r3, r3
 80033da:	401a      	ands	r2, r3
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80033f2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	3248      	adds	r2, #72	@ 0x48
 80033f8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800340c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800340e:	6979      	ldr	r1, [r7, #20]
 8003410:	3348      	adds	r3, #72	@ 0x48
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	440b      	add	r3, r1
 8003416:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	69db      	ldr	r3, [r3, #28]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d122      	bne.n	8003466 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	431a      	orrs	r2, r3
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003440:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	3248      	adds	r2, #72	@ 0x48
 8003446:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800345a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800345c:	6979      	ldr	r1, [r7, #20]
 800345e:	3348      	adds	r3, #72	@ 0x48
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	440b      	add	r3, r1
 8003464:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d109      	bne.n	8003482 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	43db      	mvns	r3, r3
 8003478:	401a      	ands	r2, r3
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8003480:	e007      	b.n	8003492 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	431a      	orrs	r2, r3
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d109      	bne.n	80034ae <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	43db      	mvns	r3, r3
 80034a4:	401a      	ands	r2, r3
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80034ac:	e007      	b.n	80034be <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	431a      	orrs	r2, r3
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d107      	bne.n	80034d6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	431a      	orrs	r2, r3
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80034dc:	f023 0201 	bic.w	r2, r3, #1
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80034e6:	2300      	movs	r3, #0
 80034e8:	e006      	b.n	80034f8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ee:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
  }
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	371c      	adds	r7, #28
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr
 8003504:	40006400 	.word	0x40006400

08003508 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b01      	cmp	r3, #1
 800351a:	d12e      	bne.n	800357a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2202      	movs	r2, #2
 8003520:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 0201 	bic.w	r2, r2, #1
 8003532:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003534:	f7ff fddc 	bl	80030f0 <HAL_GetTick>
 8003538:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800353a:	e012      	b.n	8003562 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800353c:	f7ff fdd8 	bl	80030f0 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b0a      	cmp	r3, #10
 8003548:	d90b      	bls.n	8003562 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2205      	movs	r2, #5
 800355a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e012      	b.n	8003588 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1e5      	bne.n	800353c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8003576:	2300      	movs	r3, #0
 8003578:	e006      	b.n	8003588 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
  }
}
 8003588:	4618      	mov	r0, r3
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003590:	b480      	push	{r7}
 8003592:	b089      	sub	sp, #36	@ 0x24
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
 800359c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035a4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80035ae:	7ffb      	ldrb	r3, [r7, #31]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d003      	beq.n	80035bc <HAL_CAN_AddTxMessage+0x2c>
 80035b4:	7ffb      	ldrb	r3, [r7, #31]
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	f040 80ad 	bne.w	8003716 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10a      	bne.n	80035dc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d105      	bne.n	80035dc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 8095 	beq.w	8003706 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	0e1b      	lsrs	r3, r3, #24
 80035e0:	f003 0303 	and.w	r3, r3, #3
 80035e4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80035e6:	2201      	movs	r2, #1
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	409a      	lsls	r2, r3
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10d      	bne.n	8003614 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003602:	68f9      	ldr	r1, [r7, #12]
 8003604:	6809      	ldr	r1, [r1, #0]
 8003606:	431a      	orrs	r2, r3
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	3318      	adds	r3, #24
 800360c:	011b      	lsls	r3, r3, #4
 800360e:	440b      	add	r3, r1
 8003610:	601a      	str	r2, [r3, #0]
 8003612:	e00f      	b.n	8003634 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800361e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003624:	68f9      	ldr	r1, [r7, #12]
 8003626:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003628:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	3318      	adds	r3, #24
 800362e:	011b      	lsls	r3, r3, #4
 8003630:	440b      	add	r3, r1
 8003632:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6819      	ldr	r1, [r3, #0]
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	691a      	ldr	r2, [r3, #16]
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	3318      	adds	r3, #24
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	440b      	add	r3, r1
 8003644:	3304      	adds	r3, #4
 8003646:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	7d1b      	ldrb	r3, [r3, #20]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d111      	bne.n	8003674 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	3318      	adds	r3, #24
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	4413      	add	r3, r2
 800365c:	3304      	adds	r3, #4
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	6811      	ldr	r1, [r2, #0]
 8003664:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	3318      	adds	r3, #24
 800366c:	011b      	lsls	r3, r3, #4
 800366e:	440b      	add	r3, r1
 8003670:	3304      	adds	r3, #4
 8003672:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	3307      	adds	r3, #7
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	061a      	lsls	r2, r3, #24
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3306      	adds	r3, #6
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	041b      	lsls	r3, r3, #16
 8003684:	431a      	orrs	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	3305      	adds	r3, #5
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	021b      	lsls	r3, r3, #8
 800368e:	4313      	orrs	r3, r2
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	3204      	adds	r2, #4
 8003694:	7812      	ldrb	r2, [r2, #0]
 8003696:	4610      	mov	r0, r2
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	6811      	ldr	r1, [r2, #0]
 800369c:	ea43 0200 	orr.w	r2, r3, r0
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	011b      	lsls	r3, r3, #4
 80036a4:	440b      	add	r3, r1
 80036a6:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80036aa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3303      	adds	r3, #3
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	061a      	lsls	r2, r3, #24
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3302      	adds	r3, #2
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	041b      	lsls	r3, r3, #16
 80036bc:	431a      	orrs	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	3301      	adds	r3, #1
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	021b      	lsls	r3, r3, #8
 80036c6:	4313      	orrs	r3, r2
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	7812      	ldrb	r2, [r2, #0]
 80036cc:	4610      	mov	r0, r2
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	6811      	ldr	r1, [r2, #0]
 80036d2:	ea43 0200 	orr.w	r2, r3, r0
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	440b      	add	r3, r1
 80036dc:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80036e0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	3318      	adds	r3, #24
 80036ea:	011b      	lsls	r3, r3, #4
 80036ec:	4413      	add	r3, r2
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	6811      	ldr	r1, [r2, #0]
 80036f4:	f043 0201 	orr.w	r2, r3, #1
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	3318      	adds	r3, #24
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	440b      	add	r3, r1
 8003700:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003702:	2300      	movs	r3, #0
 8003704:	e00e      	b.n	8003724 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e006      	b.n	8003724 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
  }
}
 8003724:	4618      	mov	r0, r3
 8003726:	3724      	adds	r7, #36	@ 0x24
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003730:	b480      	push	{r7}
 8003732:	b087      	sub	sp, #28
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
 800373c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003744:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003746:	7dfb      	ldrb	r3, [r7, #23]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d003      	beq.n	8003754 <HAL_CAN_GetRxMessage+0x24>
 800374c:	7dfb      	ldrb	r3, [r7, #23]
 800374e:	2b02      	cmp	r3, #2
 8003750:	f040 8103 	bne.w	800395a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10e      	bne.n	8003778 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	f003 0303 	and.w	r3, r3, #3
 8003764:	2b00      	cmp	r3, #0
 8003766:	d116      	bne.n	8003796 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e0f7      	b.n	8003968 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f003 0303 	and.w	r3, r3, #3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d107      	bne.n	8003796 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e0e8      	b.n	8003968 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	331b      	adds	r3, #27
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	4413      	add	r3, r2
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0204 	and.w	r2, r3, #4
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10c      	bne.n	80037ce <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	331b      	adds	r3, #27
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	4413      	add	r3, r2
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	0d5b      	lsrs	r3, r3, #21
 80037c4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	e00b      	b.n	80037e6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	331b      	adds	r3, #27
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	4413      	add	r3, r2
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	08db      	lsrs	r3, r3, #3
 80037de:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	331b      	adds	r3, #27
 80037ee:	011b      	lsls	r3, r3, #4
 80037f0:	4413      	add	r3, r2
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0202 	and.w	r2, r3, #2
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	331b      	adds	r3, #27
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	4413      	add	r3, r2
 8003808:	3304      	adds	r3, #4
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0308 	and.w	r3, r3, #8
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2208      	movs	r2, #8
 8003818:	611a      	str	r2, [r3, #16]
 800381a:	e00b      	b.n	8003834 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	331b      	adds	r3, #27
 8003824:	011b      	lsls	r3, r3, #4
 8003826:	4413      	add	r3, r2
 8003828:	3304      	adds	r3, #4
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 020f 	and.w	r2, r3, #15
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	331b      	adds	r3, #27
 800383c:	011b      	lsls	r3, r3, #4
 800383e:	4413      	add	r3, r2
 8003840:	3304      	adds	r3, #4
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	0a1b      	lsrs	r3, r3, #8
 8003846:	b2da      	uxtb	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	331b      	adds	r3, #27
 8003854:	011b      	lsls	r3, r3, #4
 8003856:	4413      	add	r3, r2
 8003858:	3304      	adds	r3, #4
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	0c1b      	lsrs	r3, r3, #16
 800385e:	b29a      	uxth	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	011b      	lsls	r3, r3, #4
 800386c:	4413      	add	r3, r2
 800386e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	b2da      	uxtb	r2, r3
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	011b      	lsls	r3, r3, #4
 8003882:	4413      	add	r3, r2
 8003884:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	0a1a      	lsrs	r2, r3, #8
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	3301      	adds	r3, #1
 8003890:	b2d2      	uxtb	r2, r2
 8003892:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	011b      	lsls	r3, r3, #4
 800389c:	4413      	add	r3, r2
 800389e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	0c1a      	lsrs	r2, r3, #16
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	3302      	adds	r3, #2
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	011b      	lsls	r3, r3, #4
 80038b6:	4413      	add	r3, r2
 80038b8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	0e1a      	lsrs	r2, r3, #24
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	3303      	adds	r3, #3
 80038c4:	b2d2      	uxtb	r2, r2
 80038c6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	011b      	lsls	r3, r3, #4
 80038d0:	4413      	add	r3, r2
 80038d2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	3304      	adds	r3, #4
 80038dc:	b2d2      	uxtb	r2, r2
 80038de:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	011b      	lsls	r3, r3, #4
 80038e8:	4413      	add	r3, r2
 80038ea:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	0a1a      	lsrs	r2, r3, #8
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	3305      	adds	r3, #5
 80038f6:	b2d2      	uxtb	r2, r2
 80038f8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	011b      	lsls	r3, r3, #4
 8003902:	4413      	add	r3, r2
 8003904:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	0c1a      	lsrs	r2, r3, #16
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	3306      	adds	r3, #6
 8003910:	b2d2      	uxtb	r2, r2
 8003912:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	011b      	lsls	r3, r3, #4
 800391c:	4413      	add	r3, r2
 800391e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	0e1a      	lsrs	r2, r3, #24
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	3307      	adds	r3, #7
 800392a:	b2d2      	uxtb	r2, r2
 800392c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d108      	bne.n	8003946 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0220 	orr.w	r2, r2, #32
 8003942:	60da      	str	r2, [r3, #12]
 8003944:	e007      	b.n	8003956 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	691a      	ldr	r2, [r3, #16]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f042 0220 	orr.w	r2, r2, #32
 8003954:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003956:	2300      	movs	r3, #0
 8003958:	e006      	b.n	8003968 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
  }
}
 8003968:	4618      	mov	r0, r3
 800396a:	371c      	adds	r7, #28
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003984:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003986:	7bfb      	ldrb	r3, [r7, #15]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d002      	beq.n	8003992 <HAL_CAN_ActivateNotification+0x1e>
 800398c:	7bfb      	ldrb	r3, [r7, #15]
 800398e:	2b02      	cmp	r3, #2
 8003990:	d109      	bne.n	80039a6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	6959      	ldr	r1, [r3, #20]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	430a      	orrs	r2, r1
 80039a0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80039a2:	2300      	movs	r3, #0
 80039a4:	e006      	b.n	80039b4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039aa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
  }
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3714      	adds	r7, #20
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08a      	sub	sp, #40	@ 0x28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80039c8:	2300      	movs	r3, #0
 80039ca:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80039fc:	6a3b      	ldr	r3, [r7, #32]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d07c      	beq.n	8003b00 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d023      	beq.n	8003a58 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2201      	movs	r2, #1
 8003a16:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f983 	bl	8003d2e <HAL_CAN_TxMailbox0CompleteCallback>
 8003a28:	e016      	b.n	8003a58 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d004      	beq.n	8003a3e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a36:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003a3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a3c:	e00c      	b.n	8003a58 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	f003 0308 	and.w	r3, r3, #8
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d004      	beq.n	8003a52 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003a4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a50:	e002      	b.n	8003a58 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f989 	bl	8003d6a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d024      	beq.n	8003aac <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a6a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f963 	bl	8003d42 <HAL_CAN_TxMailbox1CompleteCallback>
 8003a7c:	e016      	b.n	8003aac <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d004      	beq.n	8003a92 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003a8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a90:	e00c      	b.n	8003aac <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d004      	beq.n	8003aa6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003aa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aa4:	e002      	b.n	8003aac <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f969 	bl	8003d7e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d024      	beq.n	8003b00 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003abe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d003      	beq.n	8003ad2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f943 	bl	8003d56 <HAL_CAN_TxMailbox2CompleteCallback>
 8003ad0:	e016      	b.n	8003b00 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d004      	beq.n	8003ae6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ade:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ae2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ae4:	e00c      	b.n	8003b00 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d004      	beq.n	8003afa <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003af6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003af8:	e002      	b.n	8003b00 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f949 	bl	8003d92 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003b00:	6a3b      	ldr	r3, [r7, #32]
 8003b02:	f003 0308 	and.w	r3, r3, #8
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00c      	beq.n	8003b24 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	f003 0310 	and.w	r3, r3, #16
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d007      	beq.n	8003b24 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b1a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2210      	movs	r2, #16
 8003b22:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003b24:	6a3b      	ldr	r3, [r7, #32]
 8003b26:	f003 0304 	and.w	r3, r3, #4
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00b      	beq.n	8003b46 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f003 0308 	and.w	r3, r3, #8
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d006      	beq.n	8003b46 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2208      	movs	r2, #8
 8003b3e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 f930 	bl	8003da6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003b46:	6a3b      	ldr	r3, [r7, #32]
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d009      	beq.n	8003b64 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d002      	beq.n	8003b64 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7ff f958 	bl	8002e14 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003b64:	6a3b      	ldr	r3, [r7, #32]
 8003b66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00c      	beq.n	8003b88 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	f003 0310 	and.w	r3, r3, #16
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d007      	beq.n	8003b88 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b7e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2210      	movs	r2, #16
 8003b86:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003b88:	6a3b      	ldr	r3, [r7, #32]
 8003b8a:	f003 0320 	and.w	r3, r3, #32
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00b      	beq.n	8003baa <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	f003 0308 	and.w	r3, r3, #8
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d006      	beq.n	8003baa <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2208      	movs	r2, #8
 8003ba2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 f912 	bl	8003dce <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003baa:	6a3b      	ldr	r3, [r7, #32]
 8003bac:	f003 0310 	and.w	r3, r3, #16
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d009      	beq.n	8003bc8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	f003 0303 	and.w	r3, r3, #3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d002      	beq.n	8003bc8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f8f9 	bl	8003dba <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003bc8:	6a3b      	ldr	r3, [r7, #32]
 8003bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00b      	beq.n	8003bea <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	f003 0310 	and.w	r3, r3, #16
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d006      	beq.n	8003bea <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2210      	movs	r2, #16
 8003be2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 f8fc 	bl	8003de2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00b      	beq.n	8003c0c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	f003 0308 	and.w	r3, r3, #8
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d006      	beq.n	8003c0c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2208      	movs	r2, #8
 8003c04:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f8f5 	bl	8003df6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003c0c:	6a3b      	ldr	r3, [r7, #32]
 8003c0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d07b      	beq.n	8003d0e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	f003 0304 	and.w	r3, r3, #4
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d072      	beq.n	8003d06 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003c20:	6a3b      	ldr	r3, [r7, #32]
 8003c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d008      	beq.n	8003c3c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c36:	f043 0301 	orr.w	r3, r3, #1
 8003c3a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003c3c:	6a3b      	ldr	r3, [r7, #32]
 8003c3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d008      	beq.n	8003c58 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d003      	beq.n	8003c58 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c52:	f043 0302 	orr.w	r3, r3, #2
 8003c56:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003c58:	6a3b      	ldr	r3, [r7, #32]
 8003c5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d008      	beq.n	8003c74 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d003      	beq.n	8003c74 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6e:	f043 0304 	orr.w	r3, r3, #4
 8003c72:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003c74:	6a3b      	ldr	r3, [r7, #32]
 8003c76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d043      	beq.n	8003d06 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d03e      	beq.n	8003d06 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003c8e:	2b60      	cmp	r3, #96	@ 0x60
 8003c90:	d02b      	beq.n	8003cea <HAL_CAN_IRQHandler+0x32a>
 8003c92:	2b60      	cmp	r3, #96	@ 0x60
 8003c94:	d82e      	bhi.n	8003cf4 <HAL_CAN_IRQHandler+0x334>
 8003c96:	2b50      	cmp	r3, #80	@ 0x50
 8003c98:	d022      	beq.n	8003ce0 <HAL_CAN_IRQHandler+0x320>
 8003c9a:	2b50      	cmp	r3, #80	@ 0x50
 8003c9c:	d82a      	bhi.n	8003cf4 <HAL_CAN_IRQHandler+0x334>
 8003c9e:	2b40      	cmp	r3, #64	@ 0x40
 8003ca0:	d019      	beq.n	8003cd6 <HAL_CAN_IRQHandler+0x316>
 8003ca2:	2b40      	cmp	r3, #64	@ 0x40
 8003ca4:	d826      	bhi.n	8003cf4 <HAL_CAN_IRQHandler+0x334>
 8003ca6:	2b30      	cmp	r3, #48	@ 0x30
 8003ca8:	d010      	beq.n	8003ccc <HAL_CAN_IRQHandler+0x30c>
 8003caa:	2b30      	cmp	r3, #48	@ 0x30
 8003cac:	d822      	bhi.n	8003cf4 <HAL_CAN_IRQHandler+0x334>
 8003cae:	2b10      	cmp	r3, #16
 8003cb0:	d002      	beq.n	8003cb8 <HAL_CAN_IRQHandler+0x2f8>
 8003cb2:	2b20      	cmp	r3, #32
 8003cb4:	d005      	beq.n	8003cc2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003cb6:	e01d      	b.n	8003cf4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cba:	f043 0308 	orr.w	r3, r3, #8
 8003cbe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003cc0:	e019      	b.n	8003cf6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc4:	f043 0310 	orr.w	r3, r3, #16
 8003cc8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003cca:	e014      	b.n	8003cf6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cce:	f043 0320 	orr.w	r3, r3, #32
 8003cd2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003cd4:	e00f      	b.n	8003cf6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cdc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003cde:	e00a      	b.n	8003cf6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ce6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003ce8:	e005      	b.n	8003cf6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cf0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003cf2:	e000      	b.n	8003cf6 <HAL_CAN_IRQHandler+0x336>
            break;
 8003cf4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	699a      	ldr	r2, [r3, #24]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003d04:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2204      	movs	r2, #4
 8003d0c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d008      	beq.n	8003d26 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f872 	bl	8003e0a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003d26:	bf00      	nop
 8003d28:	3728      	adds	r7, #40	@ 0x28
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b083      	sub	sp, #12
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003d36:	bf00      	nop
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003d42:	b480      	push	{r7}
 8003d44:	b083      	sub	sp, #12
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003d4a:	bf00      	nop
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr

08003d56 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003d56:	b480      	push	{r7}
 8003d58:	b083      	sub	sp, #12
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003d5e:	bf00      	nop
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003d72:	bf00      	nop
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr

08003d7e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003d7e:	b480      	push	{r7}
 8003d80:	b083      	sub	sp, #12
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003d86:	bf00      	nop
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b083      	sub	sp, #12
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003d9a:	bf00      	nop
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b083      	sub	sp, #12
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003dae:	bf00      	nop
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b083      	sub	sp, #12
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003dc2:	bf00      	nop
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b083      	sub	sp, #12
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003de2:	b480      	push	{r7}
 8003de4:	b083      	sub	sp, #12
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003dea:	bf00      	nop
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003df6:	b480      	push	{r7}
 8003df8:	b083      	sub	sp, #12
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003dfe:	bf00      	nop
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b083      	sub	sp, #12
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
	...

08003e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f003 0307 	and.w	r3, r3, #7
 8003e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e30:	4b0c      	ldr	r3, [pc, #48]	@ (8003e64 <__NVIC_SetPriorityGrouping+0x44>)
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003e4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e52:	4a04      	ldr	r2, [pc, #16]	@ (8003e64 <__NVIC_SetPriorityGrouping+0x44>)
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	60d3      	str	r3, [r2, #12]
}
 8003e58:	bf00      	nop
 8003e5a:	3714      	adds	r7, #20
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	e000ed00 	.word	0xe000ed00

08003e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e6c:	4b04      	ldr	r3, [pc, #16]	@ (8003e80 <__NVIC_GetPriorityGrouping+0x18>)
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	0a1b      	lsrs	r3, r3, #8
 8003e72:	f003 0307 	and.w	r3, r3, #7
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	e000ed00 	.word	0xe000ed00

08003e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	db0b      	blt.n	8003eae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e96:	79fb      	ldrb	r3, [r7, #7]
 8003e98:	f003 021f 	and.w	r2, r3, #31
 8003e9c:	4907      	ldr	r1, [pc, #28]	@ (8003ebc <__NVIC_EnableIRQ+0x38>)
 8003e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ea2:	095b      	lsrs	r3, r3, #5
 8003ea4:	2001      	movs	r0, #1
 8003ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8003eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003eae:	bf00      	nop
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	e000e100 	.word	0xe000e100

08003ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	6039      	str	r1, [r7, #0]
 8003eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	db0a      	blt.n	8003eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	490c      	ldr	r1, [pc, #48]	@ (8003f0c <__NVIC_SetPriority+0x4c>)
 8003eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ede:	0112      	lsls	r2, r2, #4
 8003ee0:	b2d2      	uxtb	r2, r2
 8003ee2:	440b      	add	r3, r1
 8003ee4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ee8:	e00a      	b.n	8003f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	4908      	ldr	r1, [pc, #32]	@ (8003f10 <__NVIC_SetPriority+0x50>)
 8003ef0:	79fb      	ldrb	r3, [r7, #7]
 8003ef2:	f003 030f 	and.w	r3, r3, #15
 8003ef6:	3b04      	subs	r3, #4
 8003ef8:	0112      	lsls	r2, r2, #4
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	440b      	add	r3, r1
 8003efe:	761a      	strb	r2, [r3, #24]
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr
 8003f0c:	e000e100 	.word	0xe000e100
 8003f10:	e000ed00 	.word	0xe000ed00

08003f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b089      	sub	sp, #36	@ 0x24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f003 0307 	and.w	r3, r3, #7
 8003f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	f1c3 0307 	rsb	r3, r3, #7
 8003f2e:	2b04      	cmp	r3, #4
 8003f30:	bf28      	it	cs
 8003f32:	2304      	movcs	r3, #4
 8003f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	3304      	adds	r3, #4
 8003f3a:	2b06      	cmp	r3, #6
 8003f3c:	d902      	bls.n	8003f44 <NVIC_EncodePriority+0x30>
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	3b03      	subs	r3, #3
 8003f42:	e000      	b.n	8003f46 <NVIC_EncodePriority+0x32>
 8003f44:	2300      	movs	r3, #0
 8003f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f52:	43da      	mvns	r2, r3
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	401a      	ands	r2, r3
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f5c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	fa01 f303 	lsl.w	r3, r1, r3
 8003f66:	43d9      	mvns	r1, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f6c:	4313      	orrs	r3, r2
         );
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3724      	adds	r7, #36	@ 0x24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
	...

08003f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f8c:	d301      	bcc.n	8003f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e00f      	b.n	8003fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f92:	4a0a      	ldr	r2, [pc, #40]	@ (8003fbc <SysTick_Config+0x40>)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3b01      	subs	r3, #1
 8003f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f9a:	210f      	movs	r1, #15
 8003f9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003fa0:	f7ff ff8e 	bl	8003ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fa4:	4b05      	ldr	r3, [pc, #20]	@ (8003fbc <SysTick_Config+0x40>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003faa:	4b04      	ldr	r3, [pc, #16]	@ (8003fbc <SysTick_Config+0x40>)
 8003fac:	2207      	movs	r2, #7
 8003fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	e000e010 	.word	0xe000e010

08003fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f7ff ff29 	bl	8003e20 <__NVIC_SetPriorityGrouping>
}
 8003fce:	bf00      	nop
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b086      	sub	sp, #24
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	4603      	mov	r3, r0
 8003fde:	60b9      	str	r1, [r7, #8]
 8003fe0:	607a      	str	r2, [r7, #4]
 8003fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003fe8:	f7ff ff3e 	bl	8003e68 <__NVIC_GetPriorityGrouping>
 8003fec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	68b9      	ldr	r1, [r7, #8]
 8003ff2:	6978      	ldr	r0, [r7, #20]
 8003ff4:	f7ff ff8e 	bl	8003f14 <NVIC_EncodePriority>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ffe:	4611      	mov	r1, r2
 8004000:	4618      	mov	r0, r3
 8004002:	f7ff ff5d 	bl	8003ec0 <__NVIC_SetPriority>
}
 8004006:	bf00      	nop
 8004008:	3718      	adds	r7, #24
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b082      	sub	sp, #8
 8004012:	af00      	add	r7, sp, #0
 8004014:	4603      	mov	r3, r0
 8004016:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800401c:	4618      	mov	r0, r3
 800401e:	f7ff ff31 	bl	8003e84 <__NVIC_EnableIRQ>
}
 8004022:	bf00      	nop
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b082      	sub	sp, #8
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f7ff ffa2 	bl	8003f7c <SysTick_Config>
 8004038:	4603      	mov	r3, r0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3708      	adds	r7, #8
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
	...

08004044 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800404c:	2300      	movs	r3, #0
 800404e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004050:	f7ff f84e 	bl	80030f0 <HAL_GetTick>
 8004054:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d101      	bne.n	8004060 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e099      	b.n	8004194 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2202      	movs	r2, #2
 8004064:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0201 	bic.w	r2, r2, #1
 800407e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004080:	e00f      	b.n	80040a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004082:	f7ff f835 	bl	80030f0 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b05      	cmp	r3, #5
 800408e:	d908      	bls.n	80040a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2220      	movs	r2, #32
 8004094:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2203      	movs	r2, #3
 800409a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e078      	b.n	8004194 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1e8      	bne.n	8004082 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	4b38      	ldr	r3, [pc, #224]	@ (800419c <HAL_DMA_Init+0x158>)
 80040bc:	4013      	ands	r3, r2
 80040be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f8:	2b04      	cmp	r3, #4
 80040fa:	d107      	bne.n	800410c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004104:	4313      	orrs	r3, r2
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	4313      	orrs	r3, r2
 800410a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	f023 0307 	bic.w	r3, r3, #7
 8004122:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	4313      	orrs	r3, r2
 800412c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004132:	2b04      	cmp	r3, #4
 8004134:	d117      	bne.n	8004166 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	4313      	orrs	r3, r2
 800413e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00e      	beq.n	8004166 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 fb01 	bl	8004750 <DMA_CheckFifoParam>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d008      	beq.n	8004166 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2240      	movs	r2, #64	@ 0x40
 8004158:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004162:	2301      	movs	r3, #1
 8004164:	e016      	b.n	8004194 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 fab8 	bl	80046e4 <DMA_CalcBaseAndBitshift>
 8004174:	4603      	mov	r3, r0
 8004176:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800417c:	223f      	movs	r2, #63	@ 0x3f
 800417e:	409a      	lsls	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3718      	adds	r7, #24
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	f010803f 	.word	0xf010803f

080041a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
 80041ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041ae:	2300      	movs	r3, #0
 80041b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d101      	bne.n	80041c6 <HAL_DMA_Start_IT+0x26>
 80041c2:	2302      	movs	r3, #2
 80041c4:	e040      	b.n	8004248 <HAL_DMA_Start_IT+0xa8>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d12f      	bne.n	800423a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2202      	movs	r2, #2
 80041de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	68b9      	ldr	r1, [r7, #8]
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 fa4a 	bl	8004688 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041f8:	223f      	movs	r2, #63	@ 0x3f
 80041fa:	409a      	lsls	r2, r3
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f042 0216 	orr.w	r2, r2, #22
 800420e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004214:	2b00      	cmp	r3, #0
 8004216:	d007      	beq.n	8004228 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0208 	orr.w	r2, r2, #8
 8004226:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 0201 	orr.w	r2, r2, #1
 8004236:	601a      	str	r2, [r3, #0]
 8004238:	e005      	b.n	8004246 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004242:	2302      	movs	r3, #2
 8004244:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004246:	7dfb      	ldrb	r3, [r7, #23]
}
 8004248:	4618      	mov	r0, r3
 800424a:	3718      	adds	r7, #24
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800425c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800425e:	f7fe ff47 	bl	80030f0 <HAL_GetTick>
 8004262:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d008      	beq.n	8004282 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2280      	movs	r2, #128	@ 0x80
 8004274:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e052      	b.n	8004328 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 0216 	bic.w	r2, r2, #22
 8004290:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	695a      	ldr	r2, [r3, #20]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80042a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d103      	bne.n	80042b2 <HAL_DMA_Abort+0x62>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d007      	beq.n	80042c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0208 	bic.w	r2, r2, #8
 80042c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 0201 	bic.w	r2, r2, #1
 80042d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042d2:	e013      	b.n	80042fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042d4:	f7fe ff0c 	bl	80030f0 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b05      	cmp	r3, #5
 80042e0:	d90c      	bls.n	80042fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2220      	movs	r2, #32
 80042e6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2203      	movs	r2, #3
 80042ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e015      	b.n	8004328 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1e4      	bne.n	80042d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800430e:	223f      	movs	r2, #63	@ 0x3f
 8004310:	409a      	lsls	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d004      	beq.n	800434e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2280      	movs	r2, #128	@ 0x80
 8004348:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e00c      	b.n	8004368 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2205      	movs	r2, #5
 8004352:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 0201 	bic.w	r2, r2, #1
 8004364:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800437c:	2300      	movs	r3, #0
 800437e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004380:	4b8e      	ldr	r3, [pc, #568]	@ (80045bc <HAL_DMA_IRQHandler+0x248>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a8e      	ldr	r2, [pc, #568]	@ (80045c0 <HAL_DMA_IRQHandler+0x24c>)
 8004386:	fba2 2303 	umull	r2, r3, r2, r3
 800438a:	0a9b      	lsrs	r3, r3, #10
 800438c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004392:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800439e:	2208      	movs	r2, #8
 80043a0:	409a      	lsls	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	4013      	ands	r3, r2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d01a      	beq.n	80043e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0304 	and.w	r3, r3, #4
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d013      	beq.n	80043e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 0204 	bic.w	r2, r2, #4
 80043c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043cc:	2208      	movs	r2, #8
 80043ce:	409a      	lsls	r2, r3
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043d8:	f043 0201 	orr.w	r2, r3, #1
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043e4:	2201      	movs	r2, #1
 80043e6:	409a      	lsls	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	4013      	ands	r3, r2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d012      	beq.n	8004416 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00b      	beq.n	8004416 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004402:	2201      	movs	r2, #1
 8004404:	409a      	lsls	r2, r3
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800440e:	f043 0202 	orr.w	r2, r3, #2
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800441a:	2204      	movs	r2, #4
 800441c:	409a      	lsls	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	4013      	ands	r3, r2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d012      	beq.n	800444c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00b      	beq.n	800444c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004438:	2204      	movs	r2, #4
 800443a:	409a      	lsls	r2, r3
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004444:	f043 0204 	orr.w	r2, r3, #4
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004450:	2210      	movs	r2, #16
 8004452:	409a      	lsls	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4013      	ands	r3, r2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d043      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0308 	and.w	r3, r3, #8
 8004466:	2b00      	cmp	r3, #0
 8004468:	d03c      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800446e:	2210      	movs	r2, #16
 8004470:	409a      	lsls	r2, r3
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d018      	beq.n	80044b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d108      	bne.n	80044a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004496:	2b00      	cmp	r3, #0
 8004498:	d024      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	4798      	blx	r3
 80044a2:	e01f      	b.n	80044e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d01b      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	4798      	blx	r3
 80044b4:	e016      	b.n	80044e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d107      	bne.n	80044d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 0208 	bic.w	r2, r2, #8
 80044d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d003      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044e8:	2220      	movs	r2, #32
 80044ea:	409a      	lsls	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	4013      	ands	r3, r2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 808f 	beq.w	8004614 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0310 	and.w	r3, r3, #16
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 8087 	beq.w	8004614 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800450a:	2220      	movs	r2, #32
 800450c:	409a      	lsls	r2, r3
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b05      	cmp	r3, #5
 800451c:	d136      	bne.n	800458c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 0216 	bic.w	r2, r2, #22
 800452c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	695a      	ldr	r2, [r3, #20]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800453c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004542:	2b00      	cmp	r3, #0
 8004544:	d103      	bne.n	800454e <HAL_DMA_IRQHandler+0x1da>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800454a:	2b00      	cmp	r3, #0
 800454c:	d007      	beq.n	800455e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f022 0208 	bic.w	r2, r2, #8
 800455c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004562:	223f      	movs	r2, #63	@ 0x3f
 8004564:	409a      	lsls	r2, r3
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800457e:	2b00      	cmp	r3, #0
 8004580:	d07e      	beq.n	8004680 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	4798      	blx	r3
        }
        return;
 800458a:	e079      	b.n	8004680 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d01d      	beq.n	80045d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10d      	bne.n	80045c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d031      	beq.n	8004614 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	4798      	blx	r3
 80045b8:	e02c      	b.n	8004614 <HAL_DMA_IRQHandler+0x2a0>
 80045ba:	bf00      	nop
 80045bc:	2000001c 	.word	0x2000001c
 80045c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d023      	beq.n	8004614 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	4798      	blx	r3
 80045d4:	e01e      	b.n	8004614 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d10f      	bne.n	8004604 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0210 	bic.w	r2, r2, #16
 80045f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004608:	2b00      	cmp	r3, #0
 800460a:	d003      	beq.n	8004614 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004618:	2b00      	cmp	r3, #0
 800461a:	d032      	beq.n	8004682 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	2b00      	cmp	r3, #0
 8004626:	d022      	beq.n	800466e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2205      	movs	r2, #5
 800462c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 0201 	bic.w	r2, r2, #1
 800463e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	3301      	adds	r3, #1
 8004644:	60bb      	str	r3, [r7, #8]
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	429a      	cmp	r2, r3
 800464a:	d307      	bcc.n	800465c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1f2      	bne.n	8004640 <HAL_DMA_IRQHandler+0x2cc>
 800465a:	e000      	b.n	800465e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800465c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004672:	2b00      	cmp	r3, #0
 8004674:	d005      	beq.n	8004682 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	4798      	blx	r3
 800467e:	e000      	b.n	8004682 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004680:	bf00      	nop
    }
  }
}
 8004682:	3718      	adds	r7, #24
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
 8004694:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80046a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	683a      	ldr	r2, [r7, #0]
 80046ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	2b40      	cmp	r3, #64	@ 0x40
 80046b4:	d108      	bne.n	80046c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80046c6:	e007      	b.n	80046d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	60da      	str	r2, [r3, #12]
}
 80046d8:	bf00      	nop
 80046da:	3714      	adds	r7, #20
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	3b10      	subs	r3, #16
 80046f4:	4a14      	ldr	r2, [pc, #80]	@ (8004748 <DMA_CalcBaseAndBitshift+0x64>)
 80046f6:	fba2 2303 	umull	r2, r3, r2, r3
 80046fa:	091b      	lsrs	r3, r3, #4
 80046fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80046fe:	4a13      	ldr	r2, [pc, #76]	@ (800474c <DMA_CalcBaseAndBitshift+0x68>)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4413      	add	r3, r2
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	461a      	mov	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2b03      	cmp	r3, #3
 8004710:	d909      	bls.n	8004726 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800471a:	f023 0303 	bic.w	r3, r3, #3
 800471e:	1d1a      	adds	r2, r3, #4
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	659a      	str	r2, [r3, #88]	@ 0x58
 8004724:	e007      	b.n	8004736 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800472e:	f023 0303 	bic.w	r3, r3, #3
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800473a:	4618      	mov	r0, r3
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	aaaaaaab 	.word	0xaaaaaaab
 800474c:	08009630 	.word	0x08009630

08004750 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004758:	2300      	movs	r3, #0
 800475a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004760:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d11f      	bne.n	80047aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	2b03      	cmp	r3, #3
 800476e:	d856      	bhi.n	800481e <DMA_CheckFifoParam+0xce>
 8004770:	a201      	add	r2, pc, #4	@ (adr r2, 8004778 <DMA_CheckFifoParam+0x28>)
 8004772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004776:	bf00      	nop
 8004778:	08004789 	.word	0x08004789
 800477c:	0800479b 	.word	0x0800479b
 8004780:	08004789 	.word	0x08004789
 8004784:	0800481f 	.word	0x0800481f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800478c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d046      	beq.n	8004822 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004798:	e043      	b.n	8004822 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800479e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80047a2:	d140      	bne.n	8004826 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047a8:	e03d      	b.n	8004826 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047b2:	d121      	bne.n	80047f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	2b03      	cmp	r3, #3
 80047b8:	d837      	bhi.n	800482a <DMA_CheckFifoParam+0xda>
 80047ba:	a201      	add	r2, pc, #4	@ (adr r2, 80047c0 <DMA_CheckFifoParam+0x70>)
 80047bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c0:	080047d1 	.word	0x080047d1
 80047c4:	080047d7 	.word	0x080047d7
 80047c8:	080047d1 	.word	0x080047d1
 80047cc:	080047e9 	.word	0x080047e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	73fb      	strb	r3, [r7, #15]
      break;
 80047d4:	e030      	b.n	8004838 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d025      	beq.n	800482e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047e6:	e022      	b.n	800482e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ec:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80047f0:	d11f      	bne.n	8004832 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80047f6:	e01c      	b.n	8004832 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d903      	bls.n	8004806 <DMA_CheckFifoParam+0xb6>
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	2b03      	cmp	r3, #3
 8004802:	d003      	beq.n	800480c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004804:	e018      	b.n	8004838 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	73fb      	strb	r3, [r7, #15]
      break;
 800480a:	e015      	b.n	8004838 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004810:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00e      	beq.n	8004836 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	73fb      	strb	r3, [r7, #15]
      break;
 800481c:	e00b      	b.n	8004836 <DMA_CheckFifoParam+0xe6>
      break;
 800481e:	bf00      	nop
 8004820:	e00a      	b.n	8004838 <DMA_CheckFifoParam+0xe8>
      break;
 8004822:	bf00      	nop
 8004824:	e008      	b.n	8004838 <DMA_CheckFifoParam+0xe8>
      break;
 8004826:	bf00      	nop
 8004828:	e006      	b.n	8004838 <DMA_CheckFifoParam+0xe8>
      break;
 800482a:	bf00      	nop
 800482c:	e004      	b.n	8004838 <DMA_CheckFifoParam+0xe8>
      break;
 800482e:	bf00      	nop
 8004830:	e002      	b.n	8004838 <DMA_CheckFifoParam+0xe8>
      break;   
 8004832:	bf00      	nop
 8004834:	e000      	b.n	8004838 <DMA_CheckFifoParam+0xe8>
      break;
 8004836:	bf00      	nop
    }
  } 
  
  return status; 
 8004838:	7bfb      	ldrb	r3, [r7, #15]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop

08004848 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004848:	b480      	push	{r7}
 800484a:	b089      	sub	sp, #36	@ 0x24
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004852:	2300      	movs	r3, #0
 8004854:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004856:	2300      	movs	r3, #0
 8004858:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800485a:	2300      	movs	r3, #0
 800485c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800485e:	2300      	movs	r3, #0
 8004860:	61fb      	str	r3, [r7, #28]
 8004862:	e177      	b.n	8004b54 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004864:	2201      	movs	r2, #1
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	fa02 f303 	lsl.w	r3, r2, r3
 800486c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	4013      	ands	r3, r2
 8004876:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	429a      	cmp	r2, r3
 800487e:	f040 8166 	bne.w	8004b4e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f003 0303 	and.w	r3, r3, #3
 800488a:	2b01      	cmp	r3, #1
 800488c:	d005      	beq.n	800489a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004896:	2b02      	cmp	r3, #2
 8004898:	d130      	bne.n	80048fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	2203      	movs	r2, #3
 80048a6:	fa02 f303 	lsl.w	r3, r2, r3
 80048aa:	43db      	mvns	r3, r3
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	4013      	ands	r3, r2
 80048b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	68da      	ldr	r2, [r3, #12]
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	fa02 f303 	lsl.w	r3, r2, r3
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048d0:	2201      	movs	r2, #1
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	fa02 f303 	lsl.w	r3, r2, r3
 80048d8:	43db      	mvns	r3, r3
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	4013      	ands	r3, r2
 80048de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	091b      	lsrs	r3, r3, #4
 80048e6:	f003 0201 	and.w	r2, r3, #1
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	fa02 f303 	lsl.w	r3, r2, r3
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f003 0303 	and.w	r3, r3, #3
 8004904:	2b03      	cmp	r3, #3
 8004906:	d017      	beq.n	8004938 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	2203      	movs	r2, #3
 8004914:	fa02 f303 	lsl.w	r3, r2, r3
 8004918:	43db      	mvns	r3, r3
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	4013      	ands	r3, r2
 800491e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	689a      	ldr	r2, [r3, #8]
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	fa02 f303 	lsl.w	r3, r2, r3
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	4313      	orrs	r3, r2
 8004930:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f003 0303 	and.w	r3, r3, #3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d123      	bne.n	800498c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	08da      	lsrs	r2, r3, #3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	3208      	adds	r2, #8
 800494c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004950:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	f003 0307 	and.w	r3, r3, #7
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	220f      	movs	r2, #15
 800495c:	fa02 f303 	lsl.w	r3, r2, r3
 8004960:	43db      	mvns	r3, r3
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	4013      	ands	r3, r2
 8004966:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	691a      	ldr	r2, [r3, #16]
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	f003 0307 	and.w	r3, r3, #7
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	fa02 f303 	lsl.w	r3, r2, r3
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	4313      	orrs	r3, r2
 800497c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	08da      	lsrs	r2, r3, #3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	3208      	adds	r2, #8
 8004986:	69b9      	ldr	r1, [r7, #24]
 8004988:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	005b      	lsls	r3, r3, #1
 8004996:	2203      	movs	r2, #3
 8004998:	fa02 f303 	lsl.w	r3, r2, r3
 800499c:	43db      	mvns	r3, r3
 800499e:	69ba      	ldr	r2, [r7, #24]
 80049a0:	4013      	ands	r3, r2
 80049a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f003 0203 	and.w	r2, r3, #3
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	005b      	lsls	r3, r3, #1
 80049b0:	fa02 f303 	lsl.w	r3, r2, r3
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f000 80c0 	beq.w	8004b4e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049ce:	2300      	movs	r3, #0
 80049d0:	60fb      	str	r3, [r7, #12]
 80049d2:	4b66      	ldr	r3, [pc, #408]	@ (8004b6c <HAL_GPIO_Init+0x324>)
 80049d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049d6:	4a65      	ldr	r2, [pc, #404]	@ (8004b6c <HAL_GPIO_Init+0x324>)
 80049d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80049dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80049de:	4b63      	ldr	r3, [pc, #396]	@ (8004b6c <HAL_GPIO_Init+0x324>)
 80049e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049e6:	60fb      	str	r3, [r7, #12]
 80049e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049ea:	4a61      	ldr	r2, [pc, #388]	@ (8004b70 <HAL_GPIO_Init+0x328>)
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	089b      	lsrs	r3, r3, #2
 80049f0:	3302      	adds	r3, #2
 80049f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	f003 0303 	and.w	r3, r3, #3
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	220f      	movs	r2, #15
 8004a02:	fa02 f303 	lsl.w	r3, r2, r3
 8004a06:	43db      	mvns	r3, r3
 8004a08:	69ba      	ldr	r2, [r7, #24]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a58      	ldr	r2, [pc, #352]	@ (8004b74 <HAL_GPIO_Init+0x32c>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d037      	beq.n	8004a86 <HAL_GPIO_Init+0x23e>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a57      	ldr	r2, [pc, #348]	@ (8004b78 <HAL_GPIO_Init+0x330>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d031      	beq.n	8004a82 <HAL_GPIO_Init+0x23a>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a56      	ldr	r2, [pc, #344]	@ (8004b7c <HAL_GPIO_Init+0x334>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d02b      	beq.n	8004a7e <HAL_GPIO_Init+0x236>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a55      	ldr	r2, [pc, #340]	@ (8004b80 <HAL_GPIO_Init+0x338>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d025      	beq.n	8004a7a <HAL_GPIO_Init+0x232>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a54      	ldr	r2, [pc, #336]	@ (8004b84 <HAL_GPIO_Init+0x33c>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d01f      	beq.n	8004a76 <HAL_GPIO_Init+0x22e>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a53      	ldr	r2, [pc, #332]	@ (8004b88 <HAL_GPIO_Init+0x340>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d019      	beq.n	8004a72 <HAL_GPIO_Init+0x22a>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a52      	ldr	r2, [pc, #328]	@ (8004b8c <HAL_GPIO_Init+0x344>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d013      	beq.n	8004a6e <HAL_GPIO_Init+0x226>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a51      	ldr	r2, [pc, #324]	@ (8004b90 <HAL_GPIO_Init+0x348>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d00d      	beq.n	8004a6a <HAL_GPIO_Init+0x222>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a50      	ldr	r2, [pc, #320]	@ (8004b94 <HAL_GPIO_Init+0x34c>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d007      	beq.n	8004a66 <HAL_GPIO_Init+0x21e>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a4f      	ldr	r2, [pc, #316]	@ (8004b98 <HAL_GPIO_Init+0x350>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d101      	bne.n	8004a62 <HAL_GPIO_Init+0x21a>
 8004a5e:	2309      	movs	r3, #9
 8004a60:	e012      	b.n	8004a88 <HAL_GPIO_Init+0x240>
 8004a62:	230a      	movs	r3, #10
 8004a64:	e010      	b.n	8004a88 <HAL_GPIO_Init+0x240>
 8004a66:	2308      	movs	r3, #8
 8004a68:	e00e      	b.n	8004a88 <HAL_GPIO_Init+0x240>
 8004a6a:	2307      	movs	r3, #7
 8004a6c:	e00c      	b.n	8004a88 <HAL_GPIO_Init+0x240>
 8004a6e:	2306      	movs	r3, #6
 8004a70:	e00a      	b.n	8004a88 <HAL_GPIO_Init+0x240>
 8004a72:	2305      	movs	r3, #5
 8004a74:	e008      	b.n	8004a88 <HAL_GPIO_Init+0x240>
 8004a76:	2304      	movs	r3, #4
 8004a78:	e006      	b.n	8004a88 <HAL_GPIO_Init+0x240>
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e004      	b.n	8004a88 <HAL_GPIO_Init+0x240>
 8004a7e:	2302      	movs	r3, #2
 8004a80:	e002      	b.n	8004a88 <HAL_GPIO_Init+0x240>
 8004a82:	2301      	movs	r3, #1
 8004a84:	e000      	b.n	8004a88 <HAL_GPIO_Init+0x240>
 8004a86:	2300      	movs	r3, #0
 8004a88:	69fa      	ldr	r2, [r7, #28]
 8004a8a:	f002 0203 	and.w	r2, r2, #3
 8004a8e:	0092      	lsls	r2, r2, #2
 8004a90:	4093      	lsls	r3, r2
 8004a92:	69ba      	ldr	r2, [r7, #24]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a98:	4935      	ldr	r1, [pc, #212]	@ (8004b70 <HAL_GPIO_Init+0x328>)
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	089b      	lsrs	r3, r3, #2
 8004a9e:	3302      	adds	r3, #2
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004aa6:	4b3d      	ldr	r3, [pc, #244]	@ (8004b9c <HAL_GPIO_Init+0x354>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	43db      	mvns	r3, r3
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004ac2:	69ba      	ldr	r2, [r7, #24]
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004aca:	4a34      	ldr	r2, [pc, #208]	@ (8004b9c <HAL_GPIO_Init+0x354>)
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ad0:	4b32      	ldr	r3, [pc, #200]	@ (8004b9c <HAL_GPIO_Init+0x354>)
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	43db      	mvns	r3, r3
 8004ada:	69ba      	ldr	r2, [r7, #24]
 8004adc:	4013      	ands	r3, r2
 8004ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004af4:	4a29      	ldr	r2, [pc, #164]	@ (8004b9c <HAL_GPIO_Init+0x354>)
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004afa:	4b28      	ldr	r3, [pc, #160]	@ (8004b9c <HAL_GPIO_Init+0x354>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	43db      	mvns	r3, r3
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	4013      	ands	r3, r2
 8004b08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004b16:	69ba      	ldr	r2, [r7, #24]
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b1e:	4a1f      	ldr	r2, [pc, #124]	@ (8004b9c <HAL_GPIO_Init+0x354>)
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b24:	4b1d      	ldr	r3, [pc, #116]	@ (8004b9c <HAL_GPIO_Init+0x354>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	43db      	mvns	r3, r3
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	4013      	ands	r3, r2
 8004b32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d003      	beq.n	8004b48 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b48:	4a14      	ldr	r2, [pc, #80]	@ (8004b9c <HAL_GPIO_Init+0x354>)
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	3301      	adds	r3, #1
 8004b52:	61fb      	str	r3, [r7, #28]
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	2b0f      	cmp	r3, #15
 8004b58:	f67f ae84 	bls.w	8004864 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b5c:	bf00      	nop
 8004b5e:	bf00      	nop
 8004b60:	3724      	adds	r7, #36	@ 0x24
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	40023800 	.word	0x40023800
 8004b70:	40013800 	.word	0x40013800
 8004b74:	40020000 	.word	0x40020000
 8004b78:	40020400 	.word	0x40020400
 8004b7c:	40020800 	.word	0x40020800
 8004b80:	40020c00 	.word	0x40020c00
 8004b84:	40021000 	.word	0x40021000
 8004b88:	40021400 	.word	0x40021400
 8004b8c:	40021800 	.word	0x40021800
 8004b90:	40021c00 	.word	0x40021c00
 8004b94:	40022000 	.word	0x40022000
 8004b98:	40022400 	.word	0x40022400
 8004b9c:	40013c00 	.word	0x40013c00

08004ba0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	460b      	mov	r3, r1
 8004baa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	691a      	ldr	r2, [r3, #16]
 8004bb0:	887b      	ldrh	r3, [r7, #2]
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d002      	beq.n	8004bbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	73fb      	strb	r3, [r7, #15]
 8004bbc:	e001      	b.n	8004bc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	460b      	mov	r3, r1
 8004bda:	807b      	strh	r3, [r7, #2]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004be0:	787b      	ldrb	r3, [r7, #1]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d003      	beq.n	8004bee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004be6:	887a      	ldrh	r2, [r7, #2]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004bec:	e003      	b.n	8004bf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004bee:	887b      	ldrh	r3, [r7, #2]
 8004bf0:	041a      	lsls	r2, r3, #16
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	619a      	str	r2, [r3, #24]
}
 8004bf6:	bf00      	nop
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b085      	sub	sp, #20
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c14:	887a      	ldrh	r2, [r7, #2]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	4013      	ands	r3, r2
 8004c1a:	041a      	lsls	r2, r3, #16
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	43d9      	mvns	r1, r3
 8004c20:	887b      	ldrh	r3, [r7, #2]
 8004c22:	400b      	ands	r3, r1
 8004c24:	431a      	orrs	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	619a      	str	r2, [r3, #24]
}
 8004c2a:	bf00      	nop
 8004c2c:	3714      	adds	r7, #20
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
	...

08004c38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	4603      	mov	r3, r0
 8004c40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004c42:	4b08      	ldr	r3, [pc, #32]	@ (8004c64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c44:	695a      	ldr	r2, [r3, #20]
 8004c46:	88fb      	ldrh	r3, [r7, #6]
 8004c48:	4013      	ands	r3, r2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d006      	beq.n	8004c5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c4e:	4a05      	ldr	r2, [pc, #20]	@ (8004c64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c50:	88fb      	ldrh	r3, [r7, #6]
 8004c52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c54:	88fb      	ldrh	r3, [r7, #6]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7fe f8fc 	bl	8002e54 <HAL_GPIO_EXTI_Callback>
  }
}
 8004c5c:	bf00      	nop
 8004c5e:	3708      	adds	r7, #8
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	40013c00 	.word	0x40013c00

08004c68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e12b      	b.n	8004ed2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d106      	bne.n	8004c94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f7fd fde4 	bl	800285c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2224      	movs	r2, #36	@ 0x24
 8004c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f022 0201 	bic.w	r2, r2, #1
 8004caa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004cba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004cca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004ccc:	f001 fc9a 	bl	8006604 <HAL_RCC_GetPCLK1Freq>
 8004cd0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	4a81      	ldr	r2, [pc, #516]	@ (8004edc <HAL_I2C_Init+0x274>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d807      	bhi.n	8004cec <HAL_I2C_Init+0x84>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	4a80      	ldr	r2, [pc, #512]	@ (8004ee0 <HAL_I2C_Init+0x278>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	bf94      	ite	ls
 8004ce4:	2301      	movls	r3, #1
 8004ce6:	2300      	movhi	r3, #0
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	e006      	b.n	8004cfa <HAL_I2C_Init+0x92>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	4a7d      	ldr	r2, [pc, #500]	@ (8004ee4 <HAL_I2C_Init+0x27c>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	bf94      	ite	ls
 8004cf4:	2301      	movls	r3, #1
 8004cf6:	2300      	movhi	r3, #0
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e0e7      	b.n	8004ed2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	4a78      	ldr	r2, [pc, #480]	@ (8004ee8 <HAL_I2C_Init+0x280>)
 8004d06:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0a:	0c9b      	lsrs	r3, r3, #18
 8004d0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68ba      	ldr	r2, [r7, #8]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	4a6a      	ldr	r2, [pc, #424]	@ (8004edc <HAL_I2C_Init+0x274>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d802      	bhi.n	8004d3c <HAL_I2C_Init+0xd4>
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	e009      	b.n	8004d50 <HAL_I2C_Init+0xe8>
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004d42:	fb02 f303 	mul.w	r3, r2, r3
 8004d46:	4a69      	ldr	r2, [pc, #420]	@ (8004eec <HAL_I2C_Init+0x284>)
 8004d48:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4c:	099b      	lsrs	r3, r3, #6
 8004d4e:	3301      	adds	r3, #1
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	6812      	ldr	r2, [r2, #0]
 8004d54:	430b      	orrs	r3, r1
 8004d56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004d62:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	495c      	ldr	r1, [pc, #368]	@ (8004edc <HAL_I2C_Init+0x274>)
 8004d6c:	428b      	cmp	r3, r1
 8004d6e:	d819      	bhi.n	8004da4 <HAL_I2C_Init+0x13c>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	1e59      	subs	r1, r3, #1
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d7e:	1c59      	adds	r1, r3, #1
 8004d80:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004d84:	400b      	ands	r3, r1
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00a      	beq.n	8004da0 <HAL_I2C_Init+0x138>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	1e59      	subs	r1, r3, #1
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d98:	3301      	adds	r3, #1
 8004d9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d9e:	e051      	b.n	8004e44 <HAL_I2C_Init+0x1dc>
 8004da0:	2304      	movs	r3, #4
 8004da2:	e04f      	b.n	8004e44 <HAL_I2C_Init+0x1dc>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d111      	bne.n	8004dd0 <HAL_I2C_Init+0x168>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	1e58      	subs	r0, r3, #1
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6859      	ldr	r1, [r3, #4]
 8004db4:	460b      	mov	r3, r1
 8004db6:	005b      	lsls	r3, r3, #1
 8004db8:	440b      	add	r3, r1
 8004dba:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	bf0c      	ite	eq
 8004dc8:	2301      	moveq	r3, #1
 8004dca:	2300      	movne	r3, #0
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	e012      	b.n	8004df6 <HAL_I2C_Init+0x18e>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	1e58      	subs	r0, r3, #1
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6859      	ldr	r1, [r3, #4]
 8004dd8:	460b      	mov	r3, r1
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	440b      	add	r3, r1
 8004dde:	0099      	lsls	r1, r3, #2
 8004de0:	440b      	add	r3, r1
 8004de2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004de6:	3301      	adds	r3, #1
 8004de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	bf0c      	ite	eq
 8004df0:	2301      	moveq	r3, #1
 8004df2:	2300      	movne	r3, #0
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <HAL_I2C_Init+0x196>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e022      	b.n	8004e44 <HAL_I2C_Init+0x1dc>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10e      	bne.n	8004e24 <HAL_I2C_Init+0x1bc>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	1e58      	subs	r0, r3, #1
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6859      	ldr	r1, [r3, #4]
 8004e0e:	460b      	mov	r3, r1
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	440b      	add	r3, r1
 8004e14:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e18:	3301      	adds	r3, #1
 8004e1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e22:	e00f      	b.n	8004e44 <HAL_I2C_Init+0x1dc>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	1e58      	subs	r0, r3, #1
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6859      	ldr	r1, [r3, #4]
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	440b      	add	r3, r1
 8004e32:	0099      	lsls	r1, r3, #2
 8004e34:	440b      	add	r3, r1
 8004e36:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e40:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e44:	6879      	ldr	r1, [r7, #4]
 8004e46:	6809      	ldr	r1, [r1, #0]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	69da      	ldr	r2, [r3, #28]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	430a      	orrs	r2, r1
 8004e66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004e72:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	6911      	ldr	r1, [r2, #16]
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	68d2      	ldr	r2, [r2, #12]
 8004e7e:	4311      	orrs	r1, r2
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	6812      	ldr	r2, [r2, #0]
 8004e84:	430b      	orrs	r3, r1
 8004e86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	695a      	ldr	r2, [r3, #20]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f042 0201 	orr.w	r2, r2, #1
 8004eb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	000186a0 	.word	0x000186a0
 8004ee0:	001e847f 	.word	0x001e847f
 8004ee4:	003d08ff 	.word	0x003d08ff
 8004ee8:	431bde83 	.word	0x431bde83
 8004eec:	10624dd3 	.word	0x10624dd3

08004ef0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b088      	sub	sp, #32
 8004ef4:	af02      	add	r7, sp, #8
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	607a      	str	r2, [r7, #4]
 8004efa:	461a      	mov	r2, r3
 8004efc:	460b      	mov	r3, r1
 8004efe:	817b      	strh	r3, [r7, #10]
 8004f00:	4613      	mov	r3, r2
 8004f02:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f04:	f7fe f8f4 	bl	80030f0 <HAL_GetTick>
 8004f08:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b20      	cmp	r3, #32
 8004f14:	f040 80e0 	bne.w	80050d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	9300      	str	r3, [sp, #0]
 8004f1c:	2319      	movs	r3, #25
 8004f1e:	2201      	movs	r2, #1
 8004f20:	4970      	ldr	r1, [pc, #448]	@ (80050e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f000 fc64 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004f2e:	2302      	movs	r3, #2
 8004f30:	e0d3      	b.n	80050da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d101      	bne.n	8004f40 <HAL_I2C_Master_Transmit+0x50>
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	e0cc      	b.n	80050da <HAL_I2C_Master_Transmit+0x1ea>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d007      	beq.n	8004f66 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f042 0201 	orr.w	r2, r2, #1
 8004f64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2221      	movs	r2, #33	@ 0x21
 8004f7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2210      	movs	r2, #16
 8004f82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	893a      	ldrh	r2, [r7, #8]
 8004f96:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	4a50      	ldr	r2, [pc, #320]	@ (80050e8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004fa6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004fa8:	8979      	ldrh	r1, [r7, #10]
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	6a3a      	ldr	r2, [r7, #32]
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f000 face 	bl	8005550 <I2C_MasterRequestWrite>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d001      	beq.n	8004fbe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e08d      	b.n	80050da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	613b      	str	r3, [r7, #16]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	613b      	str	r3, [r7, #16]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	613b      	str	r3, [r7, #16]
 8004fd2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004fd4:	e066      	b.n	80050a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	6a39      	ldr	r1, [r7, #32]
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f000 fd22 	bl	8005a24 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00d      	beq.n	8005002 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fea:	2b04      	cmp	r3, #4
 8004fec:	d107      	bne.n	8004ffe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ffc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e06b      	b.n	80050da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005006:	781a      	ldrb	r2, [r3, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005012:	1c5a      	adds	r2, r3, #1
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800501c:	b29b      	uxth	r3, r3
 800501e:	3b01      	subs	r3, #1
 8005020:	b29a      	uxth	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800502a:	3b01      	subs	r3, #1
 800502c:	b29a      	uxth	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	f003 0304 	and.w	r3, r3, #4
 800503c:	2b04      	cmp	r3, #4
 800503e:	d11b      	bne.n	8005078 <HAL_I2C_Master_Transmit+0x188>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005044:	2b00      	cmp	r3, #0
 8005046:	d017      	beq.n	8005078 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504c:	781a      	ldrb	r2, [r3, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005058:	1c5a      	adds	r2, r3, #1
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005062:	b29b      	uxth	r3, r3
 8005064:	3b01      	subs	r3, #1
 8005066:	b29a      	uxth	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005070:	3b01      	subs	r3, #1
 8005072:	b29a      	uxth	r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	6a39      	ldr	r1, [r7, #32]
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f000 fd19 	bl	8005ab4 <I2C_WaitOnBTFFlagUntilTimeout>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00d      	beq.n	80050a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800508c:	2b04      	cmp	r3, #4
 800508e:	d107      	bne.n	80050a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800509e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e01a      	b.n	80050da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d194      	bne.n	8004fd6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2220      	movs	r2, #32
 80050c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80050d4:	2300      	movs	r3, #0
 80050d6:	e000      	b.n	80050da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80050d8:	2302      	movs	r3, #2
  }
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3718      	adds	r7, #24
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	00100002 	.word	0x00100002
 80050e8:	ffff0000 	.word	0xffff0000

080050ec <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b08c      	sub	sp, #48	@ 0x30
 80050f0:	af02      	add	r7, sp, #8
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	607a      	str	r2, [r7, #4]
 80050f6:	461a      	mov	r2, r3
 80050f8:	460b      	mov	r3, r1
 80050fa:	817b      	strh	r3, [r7, #10]
 80050fc:	4613      	mov	r3, r2
 80050fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005100:	f7fd fff6 	bl	80030f0 <HAL_GetTick>
 8005104:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b20      	cmp	r3, #32
 8005110:	f040 8217 	bne.w	8005542 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	2319      	movs	r3, #25
 800511a:	2201      	movs	r2, #1
 800511c:	497c      	ldr	r1, [pc, #496]	@ (8005310 <HAL_I2C_Master_Receive+0x224>)
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f000 fb66 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d001      	beq.n	800512e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800512a:	2302      	movs	r3, #2
 800512c:	e20a      	b.n	8005544 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005134:	2b01      	cmp	r3, #1
 8005136:	d101      	bne.n	800513c <HAL_I2C_Master_Receive+0x50>
 8005138:	2302      	movs	r3, #2
 800513a:	e203      	b.n	8005544 <HAL_I2C_Master_Receive+0x458>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b01      	cmp	r3, #1
 8005150:	d007      	beq.n	8005162 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f042 0201 	orr.w	r2, r2, #1
 8005160:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005170:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2222      	movs	r2, #34	@ 0x22
 8005176:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2210      	movs	r2, #16
 800517e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	893a      	ldrh	r2, [r7, #8]
 8005192:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005198:	b29a      	uxth	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	4a5c      	ldr	r2, [pc, #368]	@ (8005314 <HAL_I2C_Master_Receive+0x228>)
 80051a2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80051a4:	8979      	ldrh	r1, [r7, #10]
 80051a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f000 fa52 	bl	8005654 <I2C_MasterRequestRead>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e1c4      	b.n	8005544 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d113      	bne.n	80051ea <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051c2:	2300      	movs	r3, #0
 80051c4:	623b      	str	r3, [r7, #32]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	695b      	ldr	r3, [r3, #20]
 80051cc:	623b      	str	r3, [r7, #32]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	623b      	str	r3, [r7, #32]
 80051d6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	e198      	b.n	800551c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d11b      	bne.n	800522a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005200:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005202:	2300      	movs	r3, #0
 8005204:	61fb      	str	r3, [r7, #28]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	695b      	ldr	r3, [r3, #20]
 800520c:	61fb      	str	r3, [r7, #28]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	61fb      	str	r3, [r7, #28]
 8005216:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005226:	601a      	str	r2, [r3, #0]
 8005228:	e178      	b.n	800551c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800522e:	2b02      	cmp	r3, #2
 8005230:	d11b      	bne.n	800526a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005240:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005250:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005252:	2300      	movs	r3, #0
 8005254:	61bb      	str	r3, [r7, #24]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	61bb      	str	r3, [r7, #24]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	61bb      	str	r3, [r7, #24]
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	e158      	b.n	800551c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005278:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800527a:	2300      	movs	r3, #0
 800527c:	617b      	str	r3, [r7, #20]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	617b      	str	r3, [r7, #20]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	617b      	str	r3, [r7, #20]
 800528e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005290:	e144      	b.n	800551c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005296:	2b03      	cmp	r3, #3
 8005298:	f200 80f1 	bhi.w	800547e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d123      	bne.n	80052ec <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	f000 fc4b 	bl	8005b44 <I2C_WaitOnRXNEFlagUntilTimeout>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d001      	beq.n	80052b8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e145      	b.n	8005544 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	691a      	ldr	r2, [r3, #16]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c2:	b2d2      	uxtb	r2, r2
 80052c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ca:	1c5a      	adds	r2, r3, #1
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052d4:	3b01      	subs	r3, #1
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	3b01      	subs	r3, #1
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80052ea:	e117      	b.n	800551c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d14e      	bne.n	8005392 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052fa:	2200      	movs	r2, #0
 80052fc:	4906      	ldr	r1, [pc, #24]	@ (8005318 <HAL_I2C_Master_Receive+0x22c>)
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f000 fa76 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d008      	beq.n	800531c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e11a      	b.n	8005544 <HAL_I2C_Master_Receive+0x458>
 800530e:	bf00      	nop
 8005310:	00100002 	.word	0x00100002
 8005314:	ffff0000 	.word	0xffff0000
 8005318:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800532a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	691a      	ldr	r2, [r3, #16]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005336:	b2d2      	uxtb	r2, r2
 8005338:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800533e:	1c5a      	adds	r2, r3, #1
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005348:	3b01      	subs	r3, #1
 800534a:	b29a      	uxth	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005354:	b29b      	uxth	r3, r3
 8005356:	3b01      	subs	r3, #1
 8005358:	b29a      	uxth	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	691a      	ldr	r2, [r3, #16]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005368:	b2d2      	uxtb	r2, r2
 800536a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005370:	1c5a      	adds	r2, r3, #1
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800537a:	3b01      	subs	r3, #1
 800537c:	b29a      	uxth	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005386:	b29b      	uxth	r3, r3
 8005388:	3b01      	subs	r3, #1
 800538a:	b29a      	uxth	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005390:	e0c4      	b.n	800551c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005394:	9300      	str	r3, [sp, #0]
 8005396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005398:	2200      	movs	r2, #0
 800539a:	496c      	ldr	r1, [pc, #432]	@ (800554c <HAL_I2C_Master_Receive+0x460>)
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f000 fa27 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d001      	beq.n	80053ac <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e0cb      	b.n	8005544 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	691a      	ldr	r2, [r3, #16]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c6:	b2d2      	uxtb	r2, r2
 80053c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ce:	1c5a      	adds	r2, r3, #1
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053d8:	3b01      	subs	r3, #1
 80053da:	b29a      	uxth	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	3b01      	subs	r3, #1
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f0:	9300      	str	r3, [sp, #0]
 80053f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f4:	2200      	movs	r2, #0
 80053f6:	4955      	ldr	r1, [pc, #340]	@ (800554c <HAL_I2C_Master_Receive+0x460>)
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f000 f9f9 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d001      	beq.n	8005408 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e09d      	b.n	8005544 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005416:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	691a      	ldr	r2, [r3, #16]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005422:	b2d2      	uxtb	r2, r2
 8005424:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800542a:	1c5a      	adds	r2, r3, #1
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005434:	3b01      	subs	r3, #1
 8005436:	b29a      	uxth	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005440:	b29b      	uxth	r3, r3
 8005442:	3b01      	subs	r3, #1
 8005444:	b29a      	uxth	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	691a      	ldr	r2, [r3, #16]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005454:	b2d2      	uxtb	r2, r2
 8005456:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800545c:	1c5a      	adds	r2, r3, #1
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005466:	3b01      	subs	r3, #1
 8005468:	b29a      	uxth	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005472:	b29b      	uxth	r3, r3
 8005474:	3b01      	subs	r3, #1
 8005476:	b29a      	uxth	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800547c:	e04e      	b.n	800551c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800547e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005480:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f000 fb5e 	bl	8005b44 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d001      	beq.n	8005492 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e058      	b.n	8005544 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	691a      	ldr	r2, [r3, #16]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800549c:	b2d2      	uxtb	r2, r2
 800549e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a4:	1c5a      	adds	r2, r3, #1
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054ae:	3b01      	subs	r3, #1
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	3b01      	subs	r3, #1
 80054be:	b29a      	uxth	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	f003 0304 	and.w	r3, r3, #4
 80054ce:	2b04      	cmp	r3, #4
 80054d0:	d124      	bne.n	800551c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054d6:	2b03      	cmp	r3, #3
 80054d8:	d107      	bne.n	80054ea <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054e8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	691a      	ldr	r2, [r3, #16]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f4:	b2d2      	uxtb	r2, r2
 80054f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054fc:	1c5a      	adds	r2, r3, #1
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005506:	3b01      	subs	r3, #1
 8005508:	b29a      	uxth	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005512:	b29b      	uxth	r3, r3
 8005514:	3b01      	subs	r3, #1
 8005516:	b29a      	uxth	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005520:	2b00      	cmp	r3, #0
 8005522:	f47f aeb6 	bne.w	8005292 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2220      	movs	r2, #32
 800552a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800553e:	2300      	movs	r3, #0
 8005540:	e000      	b.n	8005544 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005542:	2302      	movs	r3, #2
  }
}
 8005544:	4618      	mov	r0, r3
 8005546:	3728      	adds	r7, #40	@ 0x28
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	00010004 	.word	0x00010004

08005550 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b088      	sub	sp, #32
 8005554:	af02      	add	r7, sp, #8
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	607a      	str	r2, [r7, #4]
 800555a:	603b      	str	r3, [r7, #0]
 800555c:	460b      	mov	r3, r1
 800555e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005564:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	2b08      	cmp	r3, #8
 800556a:	d006      	beq.n	800557a <I2C_MasterRequestWrite+0x2a>
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d003      	beq.n	800557a <I2C_MasterRequestWrite+0x2a>
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005578:	d108      	bne.n	800558c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005588:	601a      	str	r2, [r3, #0]
 800558a:	e00b      	b.n	80055a4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005590:	2b12      	cmp	r3, #18
 8005592:	d107      	bne.n	80055a4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	9300      	str	r3, [sp, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	f000 f91d 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00d      	beq.n	80055d8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055ca:	d103      	bne.n	80055d4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	e035      	b.n	8005644 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055e0:	d108      	bne.n	80055f4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055e2:	897b      	ldrh	r3, [r7, #10]
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	461a      	mov	r2, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80055f0:	611a      	str	r2, [r3, #16]
 80055f2:	e01b      	b.n	800562c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80055f4:	897b      	ldrh	r3, [r7, #10]
 80055f6:	11db      	asrs	r3, r3, #7
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	f003 0306 	and.w	r3, r3, #6
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	f063 030f 	orn	r3, r3, #15
 8005604:	b2da      	uxtb	r2, r3
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	490e      	ldr	r1, [pc, #56]	@ (800564c <I2C_MasterRequestWrite+0xfc>)
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f000 f966 	bl	80058e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d001      	beq.n	8005622 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e010      	b.n	8005644 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005622:	897b      	ldrh	r3, [r7, #10]
 8005624:	b2da      	uxtb	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	4907      	ldr	r1, [pc, #28]	@ (8005650 <I2C_MasterRequestWrite+0x100>)
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f000 f956 	bl	80058e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d001      	beq.n	8005642 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e000      	b.n	8005644 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3718      	adds	r7, #24
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	00010008 	.word	0x00010008
 8005650:	00010002 	.word	0x00010002

08005654 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b088      	sub	sp, #32
 8005658:	af02      	add	r7, sp, #8
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	607a      	str	r2, [r7, #4]
 800565e:	603b      	str	r3, [r7, #0]
 8005660:	460b      	mov	r3, r1
 8005662:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005668:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005678:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	2b08      	cmp	r3, #8
 800567e:	d006      	beq.n	800568e <I2C_MasterRequestRead+0x3a>
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d003      	beq.n	800568e <I2C_MasterRequestRead+0x3a>
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800568c:	d108      	bne.n	80056a0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800569c:	601a      	str	r2, [r3, #0]
 800569e:	e00b      	b.n	80056b8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056a4:	2b11      	cmp	r3, #17
 80056a6:	d107      	bne.n	80056b8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80056b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f000 f893 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00d      	beq.n	80056ec <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056de:	d103      	bne.n	80056e8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056e6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e079      	b.n	80057e0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056f4:	d108      	bne.n	8005708 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80056f6:	897b      	ldrh	r3, [r7, #10]
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	f043 0301 	orr.w	r3, r3, #1
 80056fe:	b2da      	uxtb	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	611a      	str	r2, [r3, #16]
 8005706:	e05f      	b.n	80057c8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005708:	897b      	ldrh	r3, [r7, #10]
 800570a:	11db      	asrs	r3, r3, #7
 800570c:	b2db      	uxtb	r3, r3
 800570e:	f003 0306 	and.w	r3, r3, #6
 8005712:	b2db      	uxtb	r3, r3
 8005714:	f063 030f 	orn	r3, r3, #15
 8005718:	b2da      	uxtb	r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	4930      	ldr	r1, [pc, #192]	@ (80057e8 <I2C_MasterRequestRead+0x194>)
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f000 f8dc 	bl	80058e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d001      	beq.n	8005736 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e054      	b.n	80057e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005736:	897b      	ldrh	r3, [r7, #10]
 8005738:	b2da      	uxtb	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	4929      	ldr	r1, [pc, #164]	@ (80057ec <I2C_MasterRequestRead+0x198>)
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f000 f8cc 	bl	80058e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e044      	b.n	80057e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005756:	2300      	movs	r3, #0
 8005758:	613b      	str	r3, [r7, #16]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	695b      	ldr	r3, [r3, #20]
 8005760:	613b      	str	r3, [r7, #16]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	613b      	str	r3, [r7, #16]
 800576a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800577a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	9300      	str	r3, [sp, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f000 f831 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00d      	beq.n	80057b0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800579e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057a2:	d103      	bne.n	80057ac <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057aa:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e017      	b.n	80057e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80057b0:	897b      	ldrh	r3, [r7, #10]
 80057b2:	11db      	asrs	r3, r3, #7
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	f003 0306 	and.w	r3, r3, #6
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	f063 030e 	orn	r3, r3, #14
 80057c0:	b2da      	uxtb	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	4907      	ldr	r1, [pc, #28]	@ (80057ec <I2C_MasterRequestRead+0x198>)
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f000 f888 	bl	80058e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d001      	beq.n	80057de <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e000      	b.n	80057e0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3718      	adds	r7, #24
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	00010008 	.word	0x00010008
 80057ec:	00010002 	.word	0x00010002

080057f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	603b      	str	r3, [r7, #0]
 80057fc:	4613      	mov	r3, r2
 80057fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005800:	e048      	b.n	8005894 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005808:	d044      	beq.n	8005894 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800580a:	f7fd fc71 	bl	80030f0 <HAL_GetTick>
 800580e:	4602      	mov	r2, r0
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	683a      	ldr	r2, [r7, #0]
 8005816:	429a      	cmp	r2, r3
 8005818:	d302      	bcc.n	8005820 <I2C_WaitOnFlagUntilTimeout+0x30>
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d139      	bne.n	8005894 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	0c1b      	lsrs	r3, r3, #16
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b01      	cmp	r3, #1
 8005828:	d10d      	bne.n	8005846 <I2C_WaitOnFlagUntilTimeout+0x56>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	695b      	ldr	r3, [r3, #20]
 8005830:	43da      	mvns	r2, r3
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	4013      	ands	r3, r2
 8005836:	b29b      	uxth	r3, r3
 8005838:	2b00      	cmp	r3, #0
 800583a:	bf0c      	ite	eq
 800583c:	2301      	moveq	r3, #1
 800583e:	2300      	movne	r3, #0
 8005840:	b2db      	uxtb	r3, r3
 8005842:	461a      	mov	r2, r3
 8005844:	e00c      	b.n	8005860 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	43da      	mvns	r2, r3
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	4013      	ands	r3, r2
 8005852:	b29b      	uxth	r3, r3
 8005854:	2b00      	cmp	r3, #0
 8005856:	bf0c      	ite	eq
 8005858:	2301      	moveq	r3, #1
 800585a:	2300      	movne	r3, #0
 800585c:	b2db      	uxtb	r3, r3
 800585e:	461a      	mov	r2, r3
 8005860:	79fb      	ldrb	r3, [r7, #7]
 8005862:	429a      	cmp	r2, r3
 8005864:	d116      	bne.n	8005894 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2220      	movs	r2, #32
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005880:	f043 0220 	orr.w	r2, r3, #32
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e023      	b.n	80058dc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	0c1b      	lsrs	r3, r3, #16
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b01      	cmp	r3, #1
 800589c:	d10d      	bne.n	80058ba <I2C_WaitOnFlagUntilTimeout+0xca>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	695b      	ldr	r3, [r3, #20]
 80058a4:	43da      	mvns	r2, r3
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	4013      	ands	r3, r2
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	bf0c      	ite	eq
 80058b0:	2301      	moveq	r3, #1
 80058b2:	2300      	movne	r3, #0
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	461a      	mov	r2, r3
 80058b8:	e00c      	b.n	80058d4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	43da      	mvns	r2, r3
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	4013      	ands	r3, r2
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	bf0c      	ite	eq
 80058cc:	2301      	moveq	r3, #1
 80058ce:	2300      	movne	r3, #0
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	461a      	mov	r2, r3
 80058d4:	79fb      	ldrb	r3, [r7, #7]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d093      	beq.n	8005802 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
 80058f0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80058f2:	e071      	b.n	80059d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005902:	d123      	bne.n	800594c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005912:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800591c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2220      	movs	r2, #32
 8005928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005938:	f043 0204 	orr.w	r2, r3, #4
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e067      	b.n	8005a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005952:	d041      	beq.n	80059d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005954:	f7fd fbcc 	bl	80030f0 <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	429a      	cmp	r2, r3
 8005962:	d302      	bcc.n	800596a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d136      	bne.n	80059d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	0c1b      	lsrs	r3, r3, #16
 800596e:	b2db      	uxtb	r3, r3
 8005970:	2b01      	cmp	r3, #1
 8005972:	d10c      	bne.n	800598e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	43da      	mvns	r2, r3
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	4013      	ands	r3, r2
 8005980:	b29b      	uxth	r3, r3
 8005982:	2b00      	cmp	r3, #0
 8005984:	bf14      	ite	ne
 8005986:	2301      	movne	r3, #1
 8005988:	2300      	moveq	r3, #0
 800598a:	b2db      	uxtb	r3, r3
 800598c:	e00b      	b.n	80059a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	699b      	ldr	r3, [r3, #24]
 8005994:	43da      	mvns	r2, r3
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	4013      	ands	r3, r2
 800599a:	b29b      	uxth	r3, r3
 800599c:	2b00      	cmp	r3, #0
 800599e:	bf14      	ite	ne
 80059a0:	2301      	movne	r3, #1
 80059a2:	2300      	moveq	r3, #0
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d016      	beq.n	80059d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2220      	movs	r2, #32
 80059b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c4:	f043 0220 	orr.w	r2, r3, #32
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e021      	b.n	8005a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	0c1b      	lsrs	r3, r3, #16
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d10c      	bne.n	80059fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	695b      	ldr	r3, [r3, #20]
 80059e8:	43da      	mvns	r2, r3
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	4013      	ands	r3, r2
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	bf14      	ite	ne
 80059f4:	2301      	movne	r3, #1
 80059f6:	2300      	moveq	r3, #0
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	e00b      	b.n	8005a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	43da      	mvns	r2, r3
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	4013      	ands	r3, r2
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	bf14      	ite	ne
 8005a0e:	2301      	movne	r3, #1
 8005a10:	2300      	moveq	r3, #0
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	f47f af6d 	bne.w	80058f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a30:	e034      	b.n	8005a9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a32:	68f8      	ldr	r0, [r7, #12]
 8005a34:	f000 f8e3 	bl	8005bfe <I2C_IsAcknowledgeFailed>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d001      	beq.n	8005a42 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e034      	b.n	8005aac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a48:	d028      	beq.n	8005a9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a4a:	f7fd fb51 	bl	80030f0 <HAL_GetTick>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	68ba      	ldr	r2, [r7, #8]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d302      	bcc.n	8005a60 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d11d      	bne.n	8005a9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a6a:	2b80      	cmp	r3, #128	@ 0x80
 8005a6c:	d016      	beq.n	8005a9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2220      	movs	r2, #32
 8005a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a88:	f043 0220 	orr.w	r2, r3, #32
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e007      	b.n	8005aac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aa6:	2b80      	cmp	r3, #128	@ 0x80
 8005aa8:	d1c3      	bne.n	8005a32 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ac0:	e034      	b.n	8005b2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f000 f89b 	bl	8005bfe <I2C_IsAcknowledgeFailed>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e034      	b.n	8005b3c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ad8:	d028      	beq.n	8005b2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ada:	f7fd fb09 	bl	80030f0 <HAL_GetTick>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d302      	bcc.n	8005af0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d11d      	bne.n	8005b2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	f003 0304 	and.w	r3, r3, #4
 8005afa:	2b04      	cmp	r3, #4
 8005afc:	d016      	beq.n	8005b2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2220      	movs	r2, #32
 8005b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b18:	f043 0220 	orr.w	r2, r3, #32
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e007      	b.n	8005b3c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	f003 0304 	and.w	r3, r3, #4
 8005b36:	2b04      	cmp	r3, #4
 8005b38:	d1c3      	bne.n	8005ac2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b50:	e049      	b.n	8005be6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	695b      	ldr	r3, [r3, #20]
 8005b58:	f003 0310 	and.w	r3, r3, #16
 8005b5c:	2b10      	cmp	r3, #16
 8005b5e:	d119      	bne.n	8005b94 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f06f 0210 	mvn.w	r2, #16
 8005b68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2220      	movs	r2, #32
 8005b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e030      	b.n	8005bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b94:	f7fd faac 	bl	80030f0 <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	68ba      	ldr	r2, [r7, #8]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d302      	bcc.n	8005baa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d11d      	bne.n	8005be6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bb4:	2b40      	cmp	r3, #64	@ 0x40
 8005bb6:	d016      	beq.n	8005be6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2220      	movs	r2, #32
 8005bc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd2:	f043 0220 	orr.w	r2, r3, #32
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e007      	b.n	8005bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	695b      	ldr	r3, [r3, #20]
 8005bec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bf0:	2b40      	cmp	r3, #64	@ 0x40
 8005bf2:	d1ae      	bne.n	8005b52 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b083      	sub	sp, #12
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c14:	d11b      	bne.n	8005c4e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005c1e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2220      	movs	r2, #32
 8005c2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c3a:	f043 0204 	orr.w	r2, r3, #4
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e000      	b.n	8005c50 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b20      	cmp	r3, #32
 8005c70:	d129      	bne.n	8005cc6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2224      	movs	r2, #36	@ 0x24
 8005c76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f022 0201 	bic.w	r2, r2, #1
 8005c88:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f022 0210 	bic.w	r2, r2, #16
 8005c98:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	683a      	ldr	r2, [r7, #0]
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f042 0201 	orr.w	r2, r2, #1
 8005cb8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2220      	movs	r2, #32
 8005cbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	e000      	b.n	8005cc8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005cc6:	2302      	movs	r3, #2
  }
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b20      	cmp	r3, #32
 8005cec:	d12a      	bne.n	8005d44 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2224      	movs	r2, #36	@ 0x24
 8005cf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f022 0201 	bic.w	r2, r2, #1
 8005d04:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005d0e:	89fb      	ldrh	r3, [r7, #14]
 8005d10:	f023 030f 	bic.w	r3, r3, #15
 8005d14:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	89fb      	ldrh	r3, [r7, #14]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	89fa      	ldrh	r2, [r7, #14]
 8005d26:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f042 0201 	orr.w	r2, r2, #1
 8005d36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2220      	movs	r2, #32
 8005d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005d40:	2300      	movs	r3, #0
 8005d42:	e000      	b.n	8005d46 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005d44:	2302      	movs	r3, #2
  }
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3714      	adds	r7, #20
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
	...

08005d54 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005d5a:	4b06      	ldr	r3, [pc, #24]	@ (8005d74 <HAL_PWR_EnableBkUpAccess+0x20>)
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8005d60:	4b05      	ldr	r3, [pc, #20]	@ (8005d78 <HAL_PWR_EnableBkUpAccess+0x24>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8005d66:	687b      	ldr	r3, [r7, #4]
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr
 8005d74:	420e0020 	.word	0x420e0020
 8005d78:	40007000 	.word	0x40007000

08005d7c <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8005d82:	4b06      	ldr	r3, [pc, #24]	@ (8005d9c <HAL_PWR_DisableBkUpAccess+0x20>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8005d88:	4b05      	ldr	r3, [pc, #20]	@ (8005da0 <HAL_PWR_DisableBkUpAccess+0x24>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8005d8e:	687b      	ldr	r3, [r7, #4]
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr
 8005d9c:	420e0020 	.word	0x420e0020
 8005da0:	40007000 	.word	0x40007000

08005da4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b086      	sub	sp, #24
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d101      	bne.n	8005db6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e267      	b.n	8006286 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 0301 	and.w	r3, r3, #1
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d075      	beq.n	8005eae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005dc2:	4b88      	ldr	r3, [pc, #544]	@ (8005fe4 <HAL_RCC_OscConfig+0x240>)
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f003 030c 	and.w	r3, r3, #12
 8005dca:	2b04      	cmp	r3, #4
 8005dcc:	d00c      	beq.n	8005de8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dce:	4b85      	ldr	r3, [pc, #532]	@ (8005fe4 <HAL_RCC_OscConfig+0x240>)
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005dd6:	2b08      	cmp	r3, #8
 8005dd8:	d112      	bne.n	8005e00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dda:	4b82      	ldr	r3, [pc, #520]	@ (8005fe4 <HAL_RCC_OscConfig+0x240>)
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005de2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005de6:	d10b      	bne.n	8005e00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005de8:	4b7e      	ldr	r3, [pc, #504]	@ (8005fe4 <HAL_RCC_OscConfig+0x240>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d05b      	beq.n	8005eac <HAL_RCC_OscConfig+0x108>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d157      	bne.n	8005eac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e242      	b.n	8006286 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e08:	d106      	bne.n	8005e18 <HAL_RCC_OscConfig+0x74>
 8005e0a:	4b76      	ldr	r3, [pc, #472]	@ (8005fe4 <HAL_RCC_OscConfig+0x240>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a75      	ldr	r2, [pc, #468]	@ (8005fe4 <HAL_RCC_OscConfig+0x240>)
 8005e10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e14:	6013      	str	r3, [r2, #0]
 8005e16:	e01d      	b.n	8005e54 <HAL_RCC_OscConfig+0xb0>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e20:	d10c      	bne.n	8005e3c <HAL_RCC_OscConfig+0x98>
 8005e22:	4b70      	ldr	r3, [pc, #448]	@ (8005fe4 <HAL_RCC_OscConfig+0x240>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a6f      	ldr	r2, [pc, #444]	@ (8005fe4 <HAL_RCC_OscConfig+0x240>)
 8005e28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e2c:	6013      	str	r3, [r2, #0]
 8005e2e:	4b6d      	ldr	r3, [pc, #436]	@ (8005fe4 <HAL_RCC_OscConfig+0x240>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a6c      	ldr	r2, [pc, #432]	@ (8005fe4 <HAL_RCC_OscConfig+0x240>)
 8005e34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e38:	6013      	str	r3, [r2, #0]
 8005e3a:	e00b      	b.n	8005e54 <HAL_RCC_OscConfig+0xb0>
 8005e3c:	4b69      	ldr	r3, [pc, #420]	@ (8005fe4 <HAL_RCC_OscConfig+0x240>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a68      	ldr	r2, [pc, #416]	@ (8005fe4 <HAL_RCC_OscConfig+0x240>)
 8005e42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e46:	6013      	str	r3, [r2, #0]
 8005e48:	4b66      	ldr	r3, [pc, #408]	@ (8005fe4 <HAL_RCC_OscConfig+0x240>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a65      	ldr	r2, [pc, #404]	@ (8005fe4 <HAL_RCC_OscConfig+0x240>)
 8005e4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d013      	beq.n	8005e84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e5c:	f7fd f948 	bl	80030f0 <HAL_GetTick>
 8005e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e62:	e008      	b.n	8005e76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e64:	f7fd f944 	bl	80030f0 <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	2b64      	cmp	r3, #100	@ 0x64
 8005e70:	d901      	bls.n	8005e76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e207      	b.n	8006286 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e76:	4b5b      	ldr	r3, [pc, #364]	@ (8005fe4 <HAL_RCC_OscConfig+0x240>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d0f0      	beq.n	8005e64 <HAL_RCC_OscConfig+0xc0>
 8005e82:	e014      	b.n	8005eae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e84:	f7fd f934 	bl	80030f0 <HAL_GetTick>
 8005e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e8a:	e008      	b.n	8005e9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e8c:	f7fd f930 	bl	80030f0 <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	2b64      	cmp	r3, #100	@ 0x64
 8005e98:	d901      	bls.n	8005e9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e1f3      	b.n	8006286 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e9e:	4b51      	ldr	r3, [pc, #324]	@ (8005fe4 <HAL_RCC_OscConfig+0x240>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1f0      	bne.n	8005e8c <HAL_RCC_OscConfig+0xe8>
 8005eaa:	e000      	b.n	8005eae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005eac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0302 	and.w	r3, r3, #2
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d063      	beq.n	8005f82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005eba:	4b4a      	ldr	r3, [pc, #296]	@ (8005fe4 <HAL_RCC_OscConfig+0x240>)
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f003 030c 	and.w	r3, r3, #12
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d00b      	beq.n	8005ede <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ec6:	4b47      	ldr	r3, [pc, #284]	@ (8005fe4 <HAL_RCC_OscConfig+0x240>)
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ece:	2b08      	cmp	r3, #8
 8005ed0:	d11c      	bne.n	8005f0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ed2:	4b44      	ldr	r3, [pc, #272]	@ (8005fe4 <HAL_RCC_OscConfig+0x240>)
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d116      	bne.n	8005f0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ede:	4b41      	ldr	r3, [pc, #260]	@ (8005fe4 <HAL_RCC_OscConfig+0x240>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0302 	and.w	r3, r3, #2
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d005      	beq.n	8005ef6 <HAL_RCC_OscConfig+0x152>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d001      	beq.n	8005ef6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e1c7      	b.n	8006286 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ef6:	4b3b      	ldr	r3, [pc, #236]	@ (8005fe4 <HAL_RCC_OscConfig+0x240>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	00db      	lsls	r3, r3, #3
 8005f04:	4937      	ldr	r1, [pc, #220]	@ (8005fe4 <HAL_RCC_OscConfig+0x240>)
 8005f06:	4313      	orrs	r3, r2
 8005f08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f0a:	e03a      	b.n	8005f82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d020      	beq.n	8005f56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f14:	4b34      	ldr	r3, [pc, #208]	@ (8005fe8 <HAL_RCC_OscConfig+0x244>)
 8005f16:	2201      	movs	r2, #1
 8005f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f1a:	f7fd f8e9 	bl	80030f0 <HAL_GetTick>
 8005f1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f20:	e008      	b.n	8005f34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f22:	f7fd f8e5 	bl	80030f0 <HAL_GetTick>
 8005f26:	4602      	mov	r2, r0
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d901      	bls.n	8005f34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f30:	2303      	movs	r3, #3
 8005f32:	e1a8      	b.n	8006286 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f34:	4b2b      	ldr	r3, [pc, #172]	@ (8005fe4 <HAL_RCC_OscConfig+0x240>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0302 	and.w	r3, r3, #2
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d0f0      	beq.n	8005f22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f40:	4b28      	ldr	r3, [pc, #160]	@ (8005fe4 <HAL_RCC_OscConfig+0x240>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	00db      	lsls	r3, r3, #3
 8005f4e:	4925      	ldr	r1, [pc, #148]	@ (8005fe4 <HAL_RCC_OscConfig+0x240>)
 8005f50:	4313      	orrs	r3, r2
 8005f52:	600b      	str	r3, [r1, #0]
 8005f54:	e015      	b.n	8005f82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f56:	4b24      	ldr	r3, [pc, #144]	@ (8005fe8 <HAL_RCC_OscConfig+0x244>)
 8005f58:	2200      	movs	r2, #0
 8005f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f5c:	f7fd f8c8 	bl	80030f0 <HAL_GetTick>
 8005f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f62:	e008      	b.n	8005f76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f64:	f7fd f8c4 	bl	80030f0 <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d901      	bls.n	8005f76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e187      	b.n	8006286 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f76:	4b1b      	ldr	r3, [pc, #108]	@ (8005fe4 <HAL_RCC_OscConfig+0x240>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 0302 	and.w	r3, r3, #2
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1f0      	bne.n	8005f64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0308 	and.w	r3, r3, #8
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d036      	beq.n	8005ffc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d016      	beq.n	8005fc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f96:	4b15      	ldr	r3, [pc, #84]	@ (8005fec <HAL_RCC_OscConfig+0x248>)
 8005f98:	2201      	movs	r2, #1
 8005f9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f9c:	f7fd f8a8 	bl	80030f0 <HAL_GetTick>
 8005fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fa2:	e008      	b.n	8005fb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fa4:	f7fd f8a4 	bl	80030f0 <HAL_GetTick>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d901      	bls.n	8005fb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e167      	b.n	8006286 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8005fe4 <HAL_RCC_OscConfig+0x240>)
 8005fb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fba:	f003 0302 	and.w	r3, r3, #2
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d0f0      	beq.n	8005fa4 <HAL_RCC_OscConfig+0x200>
 8005fc2:	e01b      	b.n	8005ffc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fc4:	4b09      	ldr	r3, [pc, #36]	@ (8005fec <HAL_RCC_OscConfig+0x248>)
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fca:	f7fd f891 	bl	80030f0 <HAL_GetTick>
 8005fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fd0:	e00e      	b.n	8005ff0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fd2:	f7fd f88d 	bl	80030f0 <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	d907      	bls.n	8005ff0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e150      	b.n	8006286 <HAL_RCC_OscConfig+0x4e2>
 8005fe4:	40023800 	.word	0x40023800
 8005fe8:	42470000 	.word	0x42470000
 8005fec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ff0:	4b88      	ldr	r3, [pc, #544]	@ (8006214 <HAL_RCC_OscConfig+0x470>)
 8005ff2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ff4:	f003 0302 	and.w	r3, r3, #2
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1ea      	bne.n	8005fd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0304 	and.w	r3, r3, #4
 8006004:	2b00      	cmp	r3, #0
 8006006:	f000 8097 	beq.w	8006138 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800600a:	2300      	movs	r3, #0
 800600c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800600e:	4b81      	ldr	r3, [pc, #516]	@ (8006214 <HAL_RCC_OscConfig+0x470>)
 8006010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006012:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10f      	bne.n	800603a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800601a:	2300      	movs	r3, #0
 800601c:	60bb      	str	r3, [r7, #8]
 800601e:	4b7d      	ldr	r3, [pc, #500]	@ (8006214 <HAL_RCC_OscConfig+0x470>)
 8006020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006022:	4a7c      	ldr	r2, [pc, #496]	@ (8006214 <HAL_RCC_OscConfig+0x470>)
 8006024:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006028:	6413      	str	r3, [r2, #64]	@ 0x40
 800602a:	4b7a      	ldr	r3, [pc, #488]	@ (8006214 <HAL_RCC_OscConfig+0x470>)
 800602c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800602e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006032:	60bb      	str	r3, [r7, #8]
 8006034:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006036:	2301      	movs	r3, #1
 8006038:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800603a:	4b77      	ldr	r3, [pc, #476]	@ (8006218 <HAL_RCC_OscConfig+0x474>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006042:	2b00      	cmp	r3, #0
 8006044:	d118      	bne.n	8006078 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006046:	4b74      	ldr	r3, [pc, #464]	@ (8006218 <HAL_RCC_OscConfig+0x474>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a73      	ldr	r2, [pc, #460]	@ (8006218 <HAL_RCC_OscConfig+0x474>)
 800604c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006050:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006052:	f7fd f84d 	bl	80030f0 <HAL_GetTick>
 8006056:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006058:	e008      	b.n	800606c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800605a:	f7fd f849 	bl	80030f0 <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	2b02      	cmp	r3, #2
 8006066:	d901      	bls.n	800606c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e10c      	b.n	8006286 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800606c:	4b6a      	ldr	r3, [pc, #424]	@ (8006218 <HAL_RCC_OscConfig+0x474>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006074:	2b00      	cmp	r3, #0
 8006076:	d0f0      	beq.n	800605a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d106      	bne.n	800608e <HAL_RCC_OscConfig+0x2ea>
 8006080:	4b64      	ldr	r3, [pc, #400]	@ (8006214 <HAL_RCC_OscConfig+0x470>)
 8006082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006084:	4a63      	ldr	r2, [pc, #396]	@ (8006214 <HAL_RCC_OscConfig+0x470>)
 8006086:	f043 0301 	orr.w	r3, r3, #1
 800608a:	6713      	str	r3, [r2, #112]	@ 0x70
 800608c:	e01c      	b.n	80060c8 <HAL_RCC_OscConfig+0x324>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	2b05      	cmp	r3, #5
 8006094:	d10c      	bne.n	80060b0 <HAL_RCC_OscConfig+0x30c>
 8006096:	4b5f      	ldr	r3, [pc, #380]	@ (8006214 <HAL_RCC_OscConfig+0x470>)
 8006098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800609a:	4a5e      	ldr	r2, [pc, #376]	@ (8006214 <HAL_RCC_OscConfig+0x470>)
 800609c:	f043 0304 	orr.w	r3, r3, #4
 80060a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80060a2:	4b5c      	ldr	r3, [pc, #368]	@ (8006214 <HAL_RCC_OscConfig+0x470>)
 80060a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060a6:	4a5b      	ldr	r2, [pc, #364]	@ (8006214 <HAL_RCC_OscConfig+0x470>)
 80060a8:	f043 0301 	orr.w	r3, r3, #1
 80060ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80060ae:	e00b      	b.n	80060c8 <HAL_RCC_OscConfig+0x324>
 80060b0:	4b58      	ldr	r3, [pc, #352]	@ (8006214 <HAL_RCC_OscConfig+0x470>)
 80060b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060b4:	4a57      	ldr	r2, [pc, #348]	@ (8006214 <HAL_RCC_OscConfig+0x470>)
 80060b6:	f023 0301 	bic.w	r3, r3, #1
 80060ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80060bc:	4b55      	ldr	r3, [pc, #340]	@ (8006214 <HAL_RCC_OscConfig+0x470>)
 80060be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060c0:	4a54      	ldr	r2, [pc, #336]	@ (8006214 <HAL_RCC_OscConfig+0x470>)
 80060c2:	f023 0304 	bic.w	r3, r3, #4
 80060c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d015      	beq.n	80060fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060d0:	f7fd f80e 	bl	80030f0 <HAL_GetTick>
 80060d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060d6:	e00a      	b.n	80060ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060d8:	f7fd f80a 	bl	80030f0 <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d901      	bls.n	80060ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e0cb      	b.n	8006286 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060ee:	4b49      	ldr	r3, [pc, #292]	@ (8006214 <HAL_RCC_OscConfig+0x470>)
 80060f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d0ee      	beq.n	80060d8 <HAL_RCC_OscConfig+0x334>
 80060fa:	e014      	b.n	8006126 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060fc:	f7fc fff8 	bl	80030f0 <HAL_GetTick>
 8006100:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006102:	e00a      	b.n	800611a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006104:	f7fc fff4 	bl	80030f0 <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006112:	4293      	cmp	r3, r2
 8006114:	d901      	bls.n	800611a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e0b5      	b.n	8006286 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800611a:	4b3e      	ldr	r3, [pc, #248]	@ (8006214 <HAL_RCC_OscConfig+0x470>)
 800611c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800611e:	f003 0302 	and.w	r3, r3, #2
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1ee      	bne.n	8006104 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006126:	7dfb      	ldrb	r3, [r7, #23]
 8006128:	2b01      	cmp	r3, #1
 800612a:	d105      	bne.n	8006138 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800612c:	4b39      	ldr	r3, [pc, #228]	@ (8006214 <HAL_RCC_OscConfig+0x470>)
 800612e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006130:	4a38      	ldr	r2, [pc, #224]	@ (8006214 <HAL_RCC_OscConfig+0x470>)
 8006132:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006136:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	2b00      	cmp	r3, #0
 800613e:	f000 80a1 	beq.w	8006284 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006142:	4b34      	ldr	r3, [pc, #208]	@ (8006214 <HAL_RCC_OscConfig+0x470>)
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f003 030c 	and.w	r3, r3, #12
 800614a:	2b08      	cmp	r3, #8
 800614c:	d05c      	beq.n	8006208 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	699b      	ldr	r3, [r3, #24]
 8006152:	2b02      	cmp	r3, #2
 8006154:	d141      	bne.n	80061da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006156:	4b31      	ldr	r3, [pc, #196]	@ (800621c <HAL_RCC_OscConfig+0x478>)
 8006158:	2200      	movs	r2, #0
 800615a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800615c:	f7fc ffc8 	bl	80030f0 <HAL_GetTick>
 8006160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006162:	e008      	b.n	8006176 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006164:	f7fc ffc4 	bl	80030f0 <HAL_GetTick>
 8006168:	4602      	mov	r2, r0
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	2b02      	cmp	r3, #2
 8006170:	d901      	bls.n	8006176 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e087      	b.n	8006286 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006176:	4b27      	ldr	r3, [pc, #156]	@ (8006214 <HAL_RCC_OscConfig+0x470>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1f0      	bne.n	8006164 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	69da      	ldr	r2, [r3, #28]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a1b      	ldr	r3, [r3, #32]
 800618a:	431a      	orrs	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006190:	019b      	lsls	r3, r3, #6
 8006192:	431a      	orrs	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006198:	085b      	lsrs	r3, r3, #1
 800619a:	3b01      	subs	r3, #1
 800619c:	041b      	lsls	r3, r3, #16
 800619e:	431a      	orrs	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a4:	061b      	lsls	r3, r3, #24
 80061a6:	491b      	ldr	r1, [pc, #108]	@ (8006214 <HAL_RCC_OscConfig+0x470>)
 80061a8:	4313      	orrs	r3, r2
 80061aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061ac:	4b1b      	ldr	r3, [pc, #108]	@ (800621c <HAL_RCC_OscConfig+0x478>)
 80061ae:	2201      	movs	r2, #1
 80061b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061b2:	f7fc ff9d 	bl	80030f0 <HAL_GetTick>
 80061b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061b8:	e008      	b.n	80061cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061ba:	f7fc ff99 	bl	80030f0 <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d901      	bls.n	80061cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e05c      	b.n	8006286 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061cc:	4b11      	ldr	r3, [pc, #68]	@ (8006214 <HAL_RCC_OscConfig+0x470>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d0f0      	beq.n	80061ba <HAL_RCC_OscConfig+0x416>
 80061d8:	e054      	b.n	8006284 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061da:	4b10      	ldr	r3, [pc, #64]	@ (800621c <HAL_RCC_OscConfig+0x478>)
 80061dc:	2200      	movs	r2, #0
 80061de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061e0:	f7fc ff86 	bl	80030f0 <HAL_GetTick>
 80061e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061e6:	e008      	b.n	80061fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061e8:	f7fc ff82 	bl	80030f0 <HAL_GetTick>
 80061ec:	4602      	mov	r2, r0
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	2b02      	cmp	r3, #2
 80061f4:	d901      	bls.n	80061fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e045      	b.n	8006286 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061fa:	4b06      	ldr	r3, [pc, #24]	@ (8006214 <HAL_RCC_OscConfig+0x470>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1f0      	bne.n	80061e8 <HAL_RCC_OscConfig+0x444>
 8006206:	e03d      	b.n	8006284 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d107      	bne.n	8006220 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e038      	b.n	8006286 <HAL_RCC_OscConfig+0x4e2>
 8006214:	40023800 	.word	0x40023800
 8006218:	40007000 	.word	0x40007000
 800621c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006220:	4b1b      	ldr	r3, [pc, #108]	@ (8006290 <HAL_RCC_OscConfig+0x4ec>)
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d028      	beq.n	8006280 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006238:	429a      	cmp	r2, r3
 800623a:	d121      	bne.n	8006280 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006246:	429a      	cmp	r2, r3
 8006248:	d11a      	bne.n	8006280 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006250:	4013      	ands	r3, r2
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006256:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006258:	4293      	cmp	r3, r2
 800625a:	d111      	bne.n	8006280 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006266:	085b      	lsrs	r3, r3, #1
 8006268:	3b01      	subs	r3, #1
 800626a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800626c:	429a      	cmp	r2, r3
 800626e:	d107      	bne.n	8006280 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800627a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800627c:	429a      	cmp	r2, r3
 800627e:	d001      	beq.n	8006284 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e000      	b.n	8006286 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3718      	adds	r7, #24
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	40023800 	.word	0x40023800

08006294 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d101      	bne.n	80062a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e0cc      	b.n	8006442 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80062a8:	4b68      	ldr	r3, [pc, #416]	@ (800644c <HAL_RCC_ClockConfig+0x1b8>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 030f 	and.w	r3, r3, #15
 80062b0:	683a      	ldr	r2, [r7, #0]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d90c      	bls.n	80062d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062b6:	4b65      	ldr	r3, [pc, #404]	@ (800644c <HAL_RCC_ClockConfig+0x1b8>)
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	b2d2      	uxtb	r2, r2
 80062bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062be:	4b63      	ldr	r3, [pc, #396]	@ (800644c <HAL_RCC_ClockConfig+0x1b8>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 030f 	and.w	r3, r3, #15
 80062c6:	683a      	ldr	r2, [r7, #0]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d001      	beq.n	80062d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e0b8      	b.n	8006442 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0302 	and.w	r3, r3, #2
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d020      	beq.n	800631e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 0304 	and.w	r3, r3, #4
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d005      	beq.n	80062f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062e8:	4b59      	ldr	r3, [pc, #356]	@ (8006450 <HAL_RCC_ClockConfig+0x1bc>)
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	4a58      	ldr	r2, [pc, #352]	@ (8006450 <HAL_RCC_ClockConfig+0x1bc>)
 80062ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80062f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 0308 	and.w	r3, r3, #8
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d005      	beq.n	800630c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006300:	4b53      	ldr	r3, [pc, #332]	@ (8006450 <HAL_RCC_ClockConfig+0x1bc>)
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	4a52      	ldr	r2, [pc, #328]	@ (8006450 <HAL_RCC_ClockConfig+0x1bc>)
 8006306:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800630a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800630c:	4b50      	ldr	r3, [pc, #320]	@ (8006450 <HAL_RCC_ClockConfig+0x1bc>)
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	494d      	ldr	r1, [pc, #308]	@ (8006450 <HAL_RCC_ClockConfig+0x1bc>)
 800631a:	4313      	orrs	r3, r2
 800631c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	2b00      	cmp	r3, #0
 8006328:	d044      	beq.n	80063b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	2b01      	cmp	r3, #1
 8006330:	d107      	bne.n	8006342 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006332:	4b47      	ldr	r3, [pc, #284]	@ (8006450 <HAL_RCC_ClockConfig+0x1bc>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d119      	bne.n	8006372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e07f      	b.n	8006442 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	2b02      	cmp	r3, #2
 8006348:	d003      	beq.n	8006352 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800634e:	2b03      	cmp	r3, #3
 8006350:	d107      	bne.n	8006362 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006352:	4b3f      	ldr	r3, [pc, #252]	@ (8006450 <HAL_RCC_ClockConfig+0x1bc>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d109      	bne.n	8006372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e06f      	b.n	8006442 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006362:	4b3b      	ldr	r3, [pc, #236]	@ (8006450 <HAL_RCC_ClockConfig+0x1bc>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0302 	and.w	r3, r3, #2
 800636a:	2b00      	cmp	r3, #0
 800636c:	d101      	bne.n	8006372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e067      	b.n	8006442 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006372:	4b37      	ldr	r3, [pc, #220]	@ (8006450 <HAL_RCC_ClockConfig+0x1bc>)
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	f023 0203 	bic.w	r2, r3, #3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	4934      	ldr	r1, [pc, #208]	@ (8006450 <HAL_RCC_ClockConfig+0x1bc>)
 8006380:	4313      	orrs	r3, r2
 8006382:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006384:	f7fc feb4 	bl	80030f0 <HAL_GetTick>
 8006388:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800638a:	e00a      	b.n	80063a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800638c:	f7fc feb0 	bl	80030f0 <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	f241 3288 	movw	r2, #5000	@ 0x1388
 800639a:	4293      	cmp	r3, r2
 800639c:	d901      	bls.n	80063a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e04f      	b.n	8006442 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063a2:	4b2b      	ldr	r3, [pc, #172]	@ (8006450 <HAL_RCC_ClockConfig+0x1bc>)
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f003 020c 	and.w	r2, r3, #12
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d1eb      	bne.n	800638c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80063b4:	4b25      	ldr	r3, [pc, #148]	@ (800644c <HAL_RCC_ClockConfig+0x1b8>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 030f 	and.w	r3, r3, #15
 80063bc:	683a      	ldr	r2, [r7, #0]
 80063be:	429a      	cmp	r2, r3
 80063c0:	d20c      	bcs.n	80063dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063c2:	4b22      	ldr	r3, [pc, #136]	@ (800644c <HAL_RCC_ClockConfig+0x1b8>)
 80063c4:	683a      	ldr	r2, [r7, #0]
 80063c6:	b2d2      	uxtb	r2, r2
 80063c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063ca:	4b20      	ldr	r3, [pc, #128]	@ (800644c <HAL_RCC_ClockConfig+0x1b8>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 030f 	and.w	r3, r3, #15
 80063d2:	683a      	ldr	r2, [r7, #0]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d001      	beq.n	80063dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e032      	b.n	8006442 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0304 	and.w	r3, r3, #4
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d008      	beq.n	80063fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063e8:	4b19      	ldr	r3, [pc, #100]	@ (8006450 <HAL_RCC_ClockConfig+0x1bc>)
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	4916      	ldr	r1, [pc, #88]	@ (8006450 <HAL_RCC_ClockConfig+0x1bc>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 0308 	and.w	r3, r3, #8
 8006402:	2b00      	cmp	r3, #0
 8006404:	d009      	beq.n	800641a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006406:	4b12      	ldr	r3, [pc, #72]	@ (8006450 <HAL_RCC_ClockConfig+0x1bc>)
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	00db      	lsls	r3, r3, #3
 8006414:	490e      	ldr	r1, [pc, #56]	@ (8006450 <HAL_RCC_ClockConfig+0x1bc>)
 8006416:	4313      	orrs	r3, r2
 8006418:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800641a:	f000 f821 	bl	8006460 <HAL_RCC_GetSysClockFreq>
 800641e:	4602      	mov	r2, r0
 8006420:	4b0b      	ldr	r3, [pc, #44]	@ (8006450 <HAL_RCC_ClockConfig+0x1bc>)
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	091b      	lsrs	r3, r3, #4
 8006426:	f003 030f 	and.w	r3, r3, #15
 800642a:	490a      	ldr	r1, [pc, #40]	@ (8006454 <HAL_RCC_ClockConfig+0x1c0>)
 800642c:	5ccb      	ldrb	r3, [r1, r3]
 800642e:	fa22 f303 	lsr.w	r3, r2, r3
 8006432:	4a09      	ldr	r2, [pc, #36]	@ (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 8006434:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006436:	4b09      	ldr	r3, [pc, #36]	@ (800645c <HAL_RCC_ClockConfig+0x1c8>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4618      	mov	r0, r3
 800643c:	f7fc fe14 	bl	8003068 <HAL_InitTick>

  return HAL_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	40023c00 	.word	0x40023c00
 8006450:	40023800 	.word	0x40023800
 8006454:	08009618 	.word	0x08009618
 8006458:	2000001c 	.word	0x2000001c
 800645c:	20000020 	.word	0x20000020

08006460 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006464:	b090      	sub	sp, #64	@ 0x40
 8006466:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006468:	2300      	movs	r3, #0
 800646a:	637b      	str	r3, [r7, #52]	@ 0x34
 800646c:	2300      	movs	r3, #0
 800646e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006470:	2300      	movs	r3, #0
 8006472:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006474:	2300      	movs	r3, #0
 8006476:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006478:	4b59      	ldr	r3, [pc, #356]	@ (80065e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	f003 030c 	and.w	r3, r3, #12
 8006480:	2b08      	cmp	r3, #8
 8006482:	d00d      	beq.n	80064a0 <HAL_RCC_GetSysClockFreq+0x40>
 8006484:	2b08      	cmp	r3, #8
 8006486:	f200 80a1 	bhi.w	80065cc <HAL_RCC_GetSysClockFreq+0x16c>
 800648a:	2b00      	cmp	r3, #0
 800648c:	d002      	beq.n	8006494 <HAL_RCC_GetSysClockFreq+0x34>
 800648e:	2b04      	cmp	r3, #4
 8006490:	d003      	beq.n	800649a <HAL_RCC_GetSysClockFreq+0x3a>
 8006492:	e09b      	b.n	80065cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006494:	4b53      	ldr	r3, [pc, #332]	@ (80065e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8006496:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8006498:	e09b      	b.n	80065d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800649a:	4b53      	ldr	r3, [pc, #332]	@ (80065e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800649c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800649e:	e098      	b.n	80065d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064a0:	4b4f      	ldr	r3, [pc, #316]	@ (80065e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80064a8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80064aa:	4b4d      	ldr	r3, [pc, #308]	@ (80065e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d028      	beq.n	8006508 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064b6:	4b4a      	ldr	r3, [pc, #296]	@ (80065e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	099b      	lsrs	r3, r3, #6
 80064bc:	2200      	movs	r2, #0
 80064be:	623b      	str	r3, [r7, #32]
 80064c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80064c2:	6a3b      	ldr	r3, [r7, #32]
 80064c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80064c8:	2100      	movs	r1, #0
 80064ca:	4b47      	ldr	r3, [pc, #284]	@ (80065e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80064cc:	fb03 f201 	mul.w	r2, r3, r1
 80064d0:	2300      	movs	r3, #0
 80064d2:	fb00 f303 	mul.w	r3, r0, r3
 80064d6:	4413      	add	r3, r2
 80064d8:	4a43      	ldr	r2, [pc, #268]	@ (80065e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80064da:	fba0 1202 	umull	r1, r2, r0, r2
 80064de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064e0:	460a      	mov	r2, r1
 80064e2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80064e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064e6:	4413      	add	r3, r2
 80064e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064ec:	2200      	movs	r2, #0
 80064ee:	61bb      	str	r3, [r7, #24]
 80064f0:	61fa      	str	r2, [r7, #28]
 80064f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80064fa:	f7f9 fe7f 	bl	80001fc <__aeabi_uldivmod>
 80064fe:	4602      	mov	r2, r0
 8006500:	460b      	mov	r3, r1
 8006502:	4613      	mov	r3, r2
 8006504:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006506:	e053      	b.n	80065b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006508:	4b35      	ldr	r3, [pc, #212]	@ (80065e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	099b      	lsrs	r3, r3, #6
 800650e:	2200      	movs	r2, #0
 8006510:	613b      	str	r3, [r7, #16]
 8006512:	617a      	str	r2, [r7, #20]
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800651a:	f04f 0b00 	mov.w	fp, #0
 800651e:	4652      	mov	r2, sl
 8006520:	465b      	mov	r3, fp
 8006522:	f04f 0000 	mov.w	r0, #0
 8006526:	f04f 0100 	mov.w	r1, #0
 800652a:	0159      	lsls	r1, r3, #5
 800652c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006530:	0150      	lsls	r0, r2, #5
 8006532:	4602      	mov	r2, r0
 8006534:	460b      	mov	r3, r1
 8006536:	ebb2 080a 	subs.w	r8, r2, sl
 800653a:	eb63 090b 	sbc.w	r9, r3, fp
 800653e:	f04f 0200 	mov.w	r2, #0
 8006542:	f04f 0300 	mov.w	r3, #0
 8006546:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800654a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800654e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006552:	ebb2 0408 	subs.w	r4, r2, r8
 8006556:	eb63 0509 	sbc.w	r5, r3, r9
 800655a:	f04f 0200 	mov.w	r2, #0
 800655e:	f04f 0300 	mov.w	r3, #0
 8006562:	00eb      	lsls	r3, r5, #3
 8006564:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006568:	00e2      	lsls	r2, r4, #3
 800656a:	4614      	mov	r4, r2
 800656c:	461d      	mov	r5, r3
 800656e:	eb14 030a 	adds.w	r3, r4, sl
 8006572:	603b      	str	r3, [r7, #0]
 8006574:	eb45 030b 	adc.w	r3, r5, fp
 8006578:	607b      	str	r3, [r7, #4]
 800657a:	f04f 0200 	mov.w	r2, #0
 800657e:	f04f 0300 	mov.w	r3, #0
 8006582:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006586:	4629      	mov	r1, r5
 8006588:	028b      	lsls	r3, r1, #10
 800658a:	4621      	mov	r1, r4
 800658c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006590:	4621      	mov	r1, r4
 8006592:	028a      	lsls	r2, r1, #10
 8006594:	4610      	mov	r0, r2
 8006596:	4619      	mov	r1, r3
 8006598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800659a:	2200      	movs	r2, #0
 800659c:	60bb      	str	r3, [r7, #8]
 800659e:	60fa      	str	r2, [r7, #12]
 80065a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80065a4:	f7f9 fe2a 	bl	80001fc <__aeabi_uldivmod>
 80065a8:	4602      	mov	r2, r0
 80065aa:	460b      	mov	r3, r1
 80065ac:	4613      	mov	r3, r2
 80065ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80065b0:	4b0b      	ldr	r3, [pc, #44]	@ (80065e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	0c1b      	lsrs	r3, r3, #16
 80065b6:	f003 0303 	and.w	r3, r3, #3
 80065ba:	3301      	adds	r3, #1
 80065bc:	005b      	lsls	r3, r3, #1
 80065be:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80065c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80065c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80065c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80065ca:	e002      	b.n	80065d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80065cc:	4b05      	ldr	r3, [pc, #20]	@ (80065e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80065ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80065d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3740      	adds	r7, #64	@ 0x40
 80065d8:	46bd      	mov	sp, r7
 80065da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065de:	bf00      	nop
 80065e0:	40023800 	.word	0x40023800
 80065e4:	00f42400 	.word	0x00f42400
 80065e8:	017d7840 	.word	0x017d7840

080065ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065ec:	b480      	push	{r7}
 80065ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065f0:	4b03      	ldr	r3, [pc, #12]	@ (8006600 <HAL_RCC_GetHCLKFreq+0x14>)
 80065f2:	681b      	ldr	r3, [r3, #0]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	2000001c 	.word	0x2000001c

08006604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006608:	f7ff fff0 	bl	80065ec <HAL_RCC_GetHCLKFreq>
 800660c:	4602      	mov	r2, r0
 800660e:	4b05      	ldr	r3, [pc, #20]	@ (8006624 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	0a9b      	lsrs	r3, r3, #10
 8006614:	f003 0307 	and.w	r3, r3, #7
 8006618:	4903      	ldr	r1, [pc, #12]	@ (8006628 <HAL_RCC_GetPCLK1Freq+0x24>)
 800661a:	5ccb      	ldrb	r3, [r1, r3]
 800661c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006620:	4618      	mov	r0, r3
 8006622:	bd80      	pop	{r7, pc}
 8006624:	40023800 	.word	0x40023800
 8006628:	08009628 	.word	0x08009628

0800662c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006630:	f7ff ffdc 	bl	80065ec <HAL_RCC_GetHCLKFreq>
 8006634:	4602      	mov	r2, r0
 8006636:	4b05      	ldr	r3, [pc, #20]	@ (800664c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	0b5b      	lsrs	r3, r3, #13
 800663c:	f003 0307 	and.w	r3, r3, #7
 8006640:	4903      	ldr	r1, [pc, #12]	@ (8006650 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006642:	5ccb      	ldrb	r3, [r1, r3]
 8006644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006648:	4618      	mov	r0, r3
 800664a:	bd80      	pop	{r7, pc}
 800664c:	40023800 	.word	0x40023800
 8006650:	08009628 	.word	0x08009628

08006654 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b086      	sub	sp, #24
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800665c:	2300      	movs	r3, #0
 800665e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006660:	2300      	movs	r3, #0
 8006662:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 0301 	and.w	r3, r3, #1
 800666c:	2b00      	cmp	r3, #0
 800666e:	d10b      	bne.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006678:	2b00      	cmp	r3, #0
 800667a:	d105      	bne.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006684:	2b00      	cmp	r3, #0
 8006686:	d075      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006688:	4b91      	ldr	r3, [pc, #580]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800668a:	2200      	movs	r2, #0
 800668c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800668e:	f7fc fd2f 	bl	80030f0 <HAL_GetTick>
 8006692:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006694:	e008      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006696:	f7fc fd2b 	bl	80030f0 <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d901      	bls.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e189      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80066a8:	4b8a      	ldr	r3, [pc, #552]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1f0      	bne.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 0301 	and.w	r3, r3, #1
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d009      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	019a      	lsls	r2, r3, #6
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	071b      	lsls	r3, r3, #28
 80066cc:	4981      	ldr	r1, [pc, #516]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066ce:	4313      	orrs	r3, r2
 80066d0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 0302 	and.w	r3, r3, #2
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d01f      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80066e0:	4b7c      	ldr	r3, [pc, #496]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066e6:	0f1b      	lsrs	r3, r3, #28
 80066e8:	f003 0307 	and.w	r3, r3, #7
 80066ec:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	019a      	lsls	r2, r3, #6
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	061b      	lsls	r3, r3, #24
 80066fa:	431a      	orrs	r2, r3
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	071b      	lsls	r3, r3, #28
 8006700:	4974      	ldr	r1, [pc, #464]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006702:	4313      	orrs	r3, r2
 8006704:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006708:	4b72      	ldr	r3, [pc, #456]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800670a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800670e:	f023 021f 	bic.w	r2, r3, #31
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	69db      	ldr	r3, [r3, #28]
 8006716:	3b01      	subs	r3, #1
 8006718:	496e      	ldr	r1, [pc, #440]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800671a:	4313      	orrs	r3, r2
 800671c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00d      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	019a      	lsls	r2, r3, #6
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	061b      	lsls	r3, r3, #24
 8006738:	431a      	orrs	r2, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	071b      	lsls	r3, r3, #28
 8006740:	4964      	ldr	r1, [pc, #400]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006742:	4313      	orrs	r3, r2
 8006744:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006748:	4b61      	ldr	r3, [pc, #388]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800674a:	2201      	movs	r2, #1
 800674c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800674e:	f7fc fccf 	bl	80030f0 <HAL_GetTick>
 8006752:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006754:	e008      	b.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006756:	f7fc fccb 	bl	80030f0 <HAL_GetTick>
 800675a:	4602      	mov	r2, r0
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	2b02      	cmp	r3, #2
 8006762:	d901      	bls.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006764:	2303      	movs	r3, #3
 8006766:	e129      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006768:	4b5a      	ldr	r3, [pc, #360]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006770:	2b00      	cmp	r3, #0
 8006772:	d0f0      	beq.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0304 	and.w	r3, r3, #4
 800677c:	2b00      	cmp	r3, #0
 800677e:	d105      	bne.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006788:	2b00      	cmp	r3, #0
 800678a:	d079      	beq.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800678c:	4b52      	ldr	r3, [pc, #328]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800678e:	2200      	movs	r2, #0
 8006790:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006792:	f7fc fcad 	bl	80030f0 <HAL_GetTick>
 8006796:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006798:	e008      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800679a:	f7fc fca9 	bl	80030f0 <HAL_GetTick>
 800679e:	4602      	mov	r2, r0
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d901      	bls.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067a8:	2303      	movs	r3, #3
 80067aa:	e107      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80067ac:	4b49      	ldr	r3, [pc, #292]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80067b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067b8:	d0ef      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0304 	and.w	r3, r3, #4
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d020      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80067c6:	4b43      	ldr	r3, [pc, #268]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067cc:	0f1b      	lsrs	r3, r3, #28
 80067ce:	f003 0307 	and.w	r3, r3, #7
 80067d2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	019a      	lsls	r2, r3, #6
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	061b      	lsls	r3, r3, #24
 80067e0:	431a      	orrs	r2, r3
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	071b      	lsls	r3, r3, #28
 80067e6:	493b      	ldr	r1, [pc, #236]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067e8:	4313      	orrs	r3, r2
 80067ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80067ee:	4b39      	ldr	r3, [pc, #228]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067f4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6a1b      	ldr	r3, [r3, #32]
 80067fc:	3b01      	subs	r3, #1
 80067fe:	021b      	lsls	r3, r3, #8
 8006800:	4934      	ldr	r1, [pc, #208]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006802:	4313      	orrs	r3, r2
 8006804:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0308 	and.w	r3, r3, #8
 8006810:	2b00      	cmp	r3, #0
 8006812:	d01e      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006814:	4b2f      	ldr	r3, [pc, #188]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800681a:	0e1b      	lsrs	r3, r3, #24
 800681c:	f003 030f 	and.w	r3, r3, #15
 8006820:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	019a      	lsls	r2, r3, #6
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	061b      	lsls	r3, r3, #24
 800682c:	431a      	orrs	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	071b      	lsls	r3, r3, #28
 8006834:	4927      	ldr	r1, [pc, #156]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006836:	4313      	orrs	r3, r2
 8006838:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800683c:	4b25      	ldr	r3, [pc, #148]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800683e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006842:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800684a:	4922      	ldr	r1, [pc, #136]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800684c:	4313      	orrs	r3, r2
 800684e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006852:	4b21      	ldr	r3, [pc, #132]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006854:	2201      	movs	r2, #1
 8006856:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006858:	f7fc fc4a 	bl	80030f0 <HAL_GetTick>
 800685c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800685e:	e008      	b.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006860:	f7fc fc46 	bl	80030f0 <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	2b02      	cmp	r3, #2
 800686c:	d901      	bls.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e0a4      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006872:	4b18      	ldr	r3, [pc, #96]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800687a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800687e:	d1ef      	bne.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 0320 	and.w	r3, r3, #32
 8006888:	2b00      	cmp	r3, #0
 800688a:	f000 808b 	beq.w	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800688e:	2300      	movs	r3, #0
 8006890:	60fb      	str	r3, [r7, #12]
 8006892:	4b10      	ldr	r3, [pc, #64]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006896:	4a0f      	ldr	r2, [pc, #60]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006898:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800689c:	6413      	str	r3, [r2, #64]	@ 0x40
 800689e:	4b0d      	ldr	r3, [pc, #52]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80068a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068a6:	60fb      	str	r3, [r7, #12]
 80068a8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80068aa:	4b0c      	ldr	r3, [pc, #48]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a0b      	ldr	r2, [pc, #44]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80068b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068b4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80068b6:	f7fc fc1b 	bl	80030f0 <HAL_GetTick>
 80068ba:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80068bc:	e010      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80068be:	f7fc fc17 	bl	80030f0 <HAL_GetTick>
 80068c2:	4602      	mov	r2, r0
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d909      	bls.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e075      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x368>
 80068d0:	42470068 	.word	0x42470068
 80068d4:	40023800 	.word	0x40023800
 80068d8:	42470070 	.word	0x42470070
 80068dc:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80068e0:	4b38      	ldr	r3, [pc, #224]	@ (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d0e8      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80068ec:	4b36      	ldr	r3, [pc, #216]	@ (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80068ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068f4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d02f      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006900:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	429a      	cmp	r2, r3
 8006908:	d028      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800690a:	4b2f      	ldr	r3, [pc, #188]	@ (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800690c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800690e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006912:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006914:	4b2d      	ldr	r3, [pc, #180]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006916:	2201      	movs	r2, #1
 8006918:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800691a:	4b2c      	ldr	r3, [pc, #176]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800691c:	2200      	movs	r2, #0
 800691e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006920:	4a29      	ldr	r2, [pc, #164]	@ (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006926:	4b28      	ldr	r3, [pc, #160]	@ (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800692a:	f003 0301 	and.w	r3, r3, #1
 800692e:	2b01      	cmp	r3, #1
 8006930:	d114      	bne.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006932:	f7fc fbdd 	bl	80030f0 <HAL_GetTick>
 8006936:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006938:	e00a      	b.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800693a:	f7fc fbd9 	bl	80030f0 <HAL_GetTick>
 800693e:	4602      	mov	r2, r0
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006948:	4293      	cmp	r3, r2
 800694a:	d901      	bls.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800694c:	2303      	movs	r3, #3
 800694e:	e035      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006950:	4b1d      	ldr	r3, [pc, #116]	@ (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006952:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006954:	f003 0302 	and.w	r3, r3, #2
 8006958:	2b00      	cmp	r3, #0
 800695a:	d0ee      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006960:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006964:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006968:	d10d      	bne.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800696a:	4b17      	ldr	r3, [pc, #92]	@ (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006976:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800697a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800697e:	4912      	ldr	r1, [pc, #72]	@ (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006980:	4313      	orrs	r3, r2
 8006982:	608b      	str	r3, [r1, #8]
 8006984:	e005      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006986:	4b10      	ldr	r3, [pc, #64]	@ (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	4a0f      	ldr	r2, [pc, #60]	@ (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800698c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006990:	6093      	str	r3, [r2, #8]
 8006992:	4b0d      	ldr	r3, [pc, #52]	@ (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006994:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800699a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800699e:	490a      	ldr	r1, [pc, #40]	@ (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80069a0:	4313      	orrs	r3, r2
 80069a2:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0310 	and.w	r3, r3, #16
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d004      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80069b6:	4b06      	ldr	r3, [pc, #24]	@ (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80069b8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3718      	adds	r7, #24
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	40007000 	.word	0x40007000
 80069c8:	40023800 	.word	0x40023800
 80069cc:	42470e40 	.word	0x42470e40
 80069d0:	424711e0 	.word	0x424711e0

080069d4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d101      	bne.n	80069ea <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e073      	b.n	8006ad2 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	7f5b      	ldrb	r3, [r3, #29]
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d105      	bne.n	8006a00 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f7fb ffce 	bl	800299c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2202      	movs	r2, #2
 8006a04:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	f003 0310 	and.w	r3, r3, #16
 8006a10:	2b10      	cmp	r3, #16
 8006a12:	d055      	beq.n	8006ac0 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	22ca      	movs	r2, #202	@ 0xca
 8006a1a:	625a      	str	r2, [r3, #36]	@ 0x24
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2253      	movs	r2, #83	@ 0x53
 8006a22:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 fa49 	bl	8006ebc <RTC_EnterInitMode>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006a2e:	7bfb      	ldrb	r3, [r7, #15]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d12c      	bne.n	8006a8e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	6812      	ldr	r2, [r2, #0]
 8006a3e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006a42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a46:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6899      	ldr	r1, [r3, #8]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	685a      	ldr	r2, [r3, #4]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	431a      	orrs	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	695b      	ldr	r3, [r3, #20]
 8006a5c:	431a      	orrs	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	430a      	orrs	r2, r1
 8006a64:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	68d2      	ldr	r2, [r2, #12]
 8006a6e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6919      	ldr	r1, [r3, #16]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	041a      	lsls	r2, r3, #16
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	430a      	orrs	r2, r1
 8006a82:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 fa50 	bl	8006f2a <RTC_ExitInitMode>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006a8e:	7bfb      	ldrb	r3, [r7, #15]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d110      	bne.n	8006ab6 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006aa2:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	699a      	ldr	r2, [r3, #24]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	430a      	orrs	r2, r1
 8006ab4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	22ff      	movs	r2, #255	@ 0xff
 8006abc:	625a      	str	r2, [r3, #36]	@ 0x24
 8006abe:	e001      	b.n	8006ac4 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006ac4:	7bfb      	ldrb	r3, [r7, #15]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d102      	bne.n	8006ad0 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2201      	movs	r2, #1
 8006ace:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8006ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3710      	adds	r7, #16
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006ada:	b590      	push	{r4, r7, lr}
 8006adc:	b087      	sub	sp, #28
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	60f8      	str	r0, [r7, #12]
 8006ae2:	60b9      	str	r1, [r7, #8]
 8006ae4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	7f1b      	ldrb	r3, [r3, #28]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d101      	bne.n	8006af6 <HAL_RTC_SetTime+0x1c>
 8006af2:	2302      	movs	r3, #2
 8006af4:	e087      	b.n	8006c06 <HAL_RTC_SetTime+0x12c>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2201      	movs	r2, #1
 8006afa:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2202      	movs	r2, #2
 8006b00:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d126      	bne.n	8006b56 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d102      	bne.n	8006b1c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	4618      	mov	r0, r3
 8006b22:	f000 fa27 	bl	8006f74 <RTC_ByteToBcd2>
 8006b26:	4603      	mov	r3, r0
 8006b28:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	785b      	ldrb	r3, [r3, #1]
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f000 fa20 	bl	8006f74 <RTC_ByteToBcd2>
 8006b34:	4603      	mov	r3, r0
 8006b36:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006b38:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	789b      	ldrb	r3, [r3, #2]
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f000 fa18 	bl	8006f74 <RTC_ByteToBcd2>
 8006b44:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006b46:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	78db      	ldrb	r3, [r3, #3]
 8006b4e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006b50:	4313      	orrs	r3, r2
 8006b52:	617b      	str	r3, [r7, #20]
 8006b54:	e018      	b.n	8006b88 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d102      	bne.n	8006b6a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	2200      	movs	r2, #0
 8006b68:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	785b      	ldrb	r3, [r3, #1]
 8006b74:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006b76:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006b78:	68ba      	ldr	r2, [r7, #8]
 8006b7a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006b7c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	78db      	ldrb	r3, [r3, #3]
 8006b82:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006b84:	4313      	orrs	r3, r2
 8006b86:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	22ca      	movs	r2, #202	@ 0xca
 8006b8e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2253      	movs	r2, #83	@ 0x53
 8006b96:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f000 f98f 	bl	8006ebc <RTC_EnterInitMode>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006ba2:	7cfb      	ldrb	r3, [r7, #19]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d120      	bne.n	8006bea <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8006bb2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006bb6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	689a      	ldr	r2, [r3, #8]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006bc6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	6899      	ldr	r1, [r3, #8]
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	68da      	ldr	r2, [r3, #12]
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	431a      	orrs	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	430a      	orrs	r2, r1
 8006bde:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f000 f9a2 	bl	8006f2a <RTC_ExitInitMode>
 8006be6:	4603      	mov	r3, r0
 8006be8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006bea:	7cfb      	ldrb	r3, [r7, #19]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d102      	bne.n	8006bf6 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	22ff      	movs	r2, #255	@ 0xff
 8006bfc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2200      	movs	r2, #0
 8006c02:	771a      	strb	r2, [r3, #28]

  return status;
 8006c04:	7cfb      	ldrb	r3, [r7, #19]
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	371c      	adds	r7, #28
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd90      	pop	{r4, r7, pc}

08006c0e <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b086      	sub	sp, #24
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	60f8      	str	r0, [r7, #12]
 8006c16:	60b9      	str	r1, [r7, #8]
 8006c18:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8006c40:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006c44:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	0c1b      	lsrs	r3, r3, #16
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c50:	b2da      	uxtb	r2, r3
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	0a1b      	lsrs	r3, r3, #8
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c60:	b2da      	uxtb	r2, r3
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c6e:	b2da      	uxtb	r2, r3
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	0d9b      	lsrs	r3, r3, #22
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	f003 0301 	and.w	r3, r3, #1
 8006c7e:	b2da      	uxtb	r2, r3
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d11a      	bne.n	8006cc0 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f000 f98e 	bl	8006fb0 <RTC_Bcd2ToByte>
 8006c94:	4603      	mov	r3, r0
 8006c96:	461a      	mov	r2, r3
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	785b      	ldrb	r3, [r3, #1]
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f000 f985 	bl	8006fb0 <RTC_Bcd2ToByte>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	461a      	mov	r2, r3
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	789b      	ldrb	r3, [r3, #2]
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f000 f97c 	bl	8006fb0 <RTC_Bcd2ToByte>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	461a      	mov	r2, r3
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3718      	adds	r7, #24
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}

08006cca <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006cca:	b590      	push	{r4, r7, lr}
 8006ccc:	b087      	sub	sp, #28
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	60f8      	str	r0, [r7, #12]
 8006cd2:	60b9      	str	r1, [r7, #8]
 8006cd4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	7f1b      	ldrb	r3, [r3, #28]
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d101      	bne.n	8006ce6 <HAL_RTC_SetDate+0x1c>
 8006ce2:	2302      	movs	r3, #2
 8006ce4:	e071      	b.n	8006dca <HAL_RTC_SetDate+0x100>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2202      	movs	r2, #2
 8006cf0:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d10e      	bne.n	8006d16 <HAL_RTC_SetDate+0x4c>
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	785b      	ldrb	r3, [r3, #1]
 8006cfc:	f003 0310 	and.w	r3, r3, #16
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d008      	beq.n	8006d16 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	785b      	ldrb	r3, [r3, #1]
 8006d08:	f023 0310 	bic.w	r3, r3, #16
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	330a      	adds	r3, #10
 8006d10:	b2da      	uxtb	r2, r3
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d11c      	bne.n	8006d56 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	78db      	ldrb	r3, [r3, #3]
 8006d20:	4618      	mov	r0, r3
 8006d22:	f000 f927 	bl	8006f74 <RTC_ByteToBcd2>
 8006d26:	4603      	mov	r3, r0
 8006d28:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	785b      	ldrb	r3, [r3, #1]
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f000 f920 	bl	8006f74 <RTC_ByteToBcd2>
 8006d34:	4603      	mov	r3, r0
 8006d36:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006d38:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	789b      	ldrb	r3, [r3, #2]
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f000 f918 	bl	8006f74 <RTC_ByteToBcd2>
 8006d44:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006d46:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006d50:	4313      	orrs	r3, r2
 8006d52:	617b      	str	r3, [r7, #20]
 8006d54:	e00e      	b.n	8006d74 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	78db      	ldrb	r3, [r3, #3]
 8006d5a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	785b      	ldrb	r3, [r3, #1]
 8006d60:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006d62:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006d64:	68ba      	ldr	r2, [r7, #8]
 8006d66:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006d68:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006d70:	4313      	orrs	r3, r2
 8006d72:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	22ca      	movs	r2, #202	@ 0xca
 8006d7a:	625a      	str	r2, [r3, #36]	@ 0x24
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	2253      	movs	r2, #83	@ 0x53
 8006d82:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006d84:	68f8      	ldr	r0, [r7, #12]
 8006d86:	f000 f899 	bl	8006ebc <RTC_EnterInitMode>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006d8e:	7cfb      	ldrb	r3, [r7, #19]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d10c      	bne.n	8006dae <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006d9e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006da2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f000 f8c0 	bl	8006f2a <RTC_ExitInitMode>
 8006daa:	4603      	mov	r3, r0
 8006dac:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006dae:	7cfb      	ldrb	r3, [r7, #19]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d102      	bne.n	8006dba <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2201      	movs	r2, #1
 8006db8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	22ff      	movs	r2, #255	@ 0xff
 8006dc0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	771a      	strb	r2, [r3, #28]

  return status;
 8006dc8:	7cfb      	ldrb	r3, [r7, #19]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	371c      	adds	r7, #28
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd90      	pop	{r4, r7, pc}

08006dd2 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b086      	sub	sp, #24
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	60f8      	str	r0, [r7, #12]
 8006dda:	60b9      	str	r1, [r7, #8]
 8006ddc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006dde:	2300      	movs	r3, #0
 8006de0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006dec:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006df0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	0c1b      	lsrs	r3, r3, #16
 8006df6:	b2da      	uxtb	r2, r3
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	0a1b      	lsrs	r3, r3, #8
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	f003 031f 	and.w	r3, r3, #31
 8006e06:	b2da      	uxtb	r2, r3
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e14:	b2da      	uxtb	r2, r3
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	0b5b      	lsrs	r3, r3, #13
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	f003 0307 	and.w	r3, r3, #7
 8006e24:	b2da      	uxtb	r2, r3
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d11a      	bne.n	8006e66 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	78db      	ldrb	r3, [r3, #3]
 8006e34:	4618      	mov	r0, r3
 8006e36:	f000 f8bb 	bl	8006fb0 <RTC_Bcd2ToByte>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	785b      	ldrb	r3, [r3, #1]
 8006e46:	4618      	mov	r0, r3
 8006e48:	f000 f8b2 	bl	8006fb0 <RTC_Bcd2ToByte>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	461a      	mov	r2, r3
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	789b      	ldrb	r3, [r3, #2]
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f000 f8a9 	bl	8006fb0 <RTC_Bcd2ToByte>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	461a      	mov	r2, r3
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3718      	adds	r7, #24
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a0d      	ldr	r2, [pc, #52]	@ (8006eb8 <HAL_RTC_WaitForSynchro+0x48>)
 8006e82:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e84:	f7fc f934 	bl	80030f0 <HAL_GetTick>
 8006e88:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006e8a:	e009      	b.n	8006ea0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006e8c:	f7fc f930 	bl	80030f0 <HAL_GetTick>
 8006e90:	4602      	mov	r2, r0
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006e9a:	d901      	bls.n	8006ea0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	e007      	b.n	8006eb0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	f003 0320 	and.w	r3, r3, #32
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d0ee      	beq.n	8006e8c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3710      	adds	r7, #16
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	00017f5f 	.word	0x00017f5f

08006ebc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d122      	bne.n	8006f20 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68da      	ldr	r2, [r3, #12]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006ee8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006eea:	f7fc f901 	bl	80030f0 <HAL_GetTick>
 8006eee:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006ef0:	e00c      	b.n	8006f0c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006ef2:	f7fc f8fd 	bl	80030f0 <HAL_GetTick>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	1ad3      	subs	r3, r2, r3
 8006efc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006f00:	d904      	bls.n	8006f0c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2204      	movs	r2, #4
 8006f06:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d102      	bne.n	8006f20 <RTC_EnterInitMode+0x64>
 8006f1a:	7bfb      	ldrb	r3, [r7, #15]
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d1e8      	bne.n	8006ef2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3710      	adds	r7, #16
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b084      	sub	sp, #16
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f32:	2300      	movs	r3, #0
 8006f34:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68da      	ldr	r2, [r3, #12]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006f44:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	f003 0320 	and.w	r3, r3, #32
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d10a      	bne.n	8006f6a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f7ff ff8b 	bl	8006e70 <HAL_RTC_WaitForSynchro>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d004      	beq.n	8006f6a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2204      	movs	r2, #4
 8006f64:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3710      	adds	r7, #16
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8006f82:	e005      	b.n	8006f90 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	3301      	adds	r3, #1
 8006f88:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8006f8a:	79fb      	ldrb	r3, [r7, #7]
 8006f8c:	3b0a      	subs	r3, #10
 8006f8e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006f90:	79fb      	ldrb	r3, [r7, #7]
 8006f92:	2b09      	cmp	r3, #9
 8006f94:	d8f6      	bhi.n	8006f84 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	011b      	lsls	r3, r3, #4
 8006f9c:	b2da      	uxtb	r2, r3
 8006f9e:	79fb      	ldrb	r3, [r7, #7]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	b2db      	uxtb	r3, r3
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3714      	adds	r7, #20
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8006fbe:	79fb      	ldrb	r3, [r7, #7]
 8006fc0:	091b      	lsrs	r3, r3, #4
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	4413      	add	r3, r2
 8006fcc:	005b      	lsls	r3, r3, #1
 8006fce:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	b2da      	uxtb	r2, r3
 8006fd4:	79fb      	ldrb	r3, [r7, #7]
 8006fd6:	f003 030f 	and.w	r3, r3, #15
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	4413      	add	r3, r2
 8006fde:	b2db      	uxtb	r3, r3
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3714      	adds	r7, #20
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d101      	bne.n	8006ffe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e07b      	b.n	80070f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007002:	2b00      	cmp	r3, #0
 8007004:	d108      	bne.n	8007018 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800700e:	d009      	beq.n	8007024 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	61da      	str	r2, [r3, #28]
 8007016:	e005      	b.n	8007024 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007030:	b2db      	uxtb	r3, r3
 8007032:	2b00      	cmp	r3, #0
 8007034:	d106      	bne.n	8007044 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f7fb fcd6 	bl	80029f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2202      	movs	r2, #2
 8007048:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800705a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800706c:	431a      	orrs	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007076:	431a      	orrs	r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	f003 0302 	and.w	r3, r3, #2
 8007080:	431a      	orrs	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	695b      	ldr	r3, [r3, #20]
 8007086:	f003 0301 	and.w	r3, r3, #1
 800708a:	431a      	orrs	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007094:	431a      	orrs	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	69db      	ldr	r3, [r3, #28]
 800709a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800709e:	431a      	orrs	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6a1b      	ldr	r3, [r3, #32]
 80070a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070a8:	ea42 0103 	orr.w	r1, r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070b0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	430a      	orrs	r2, r1
 80070ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	699b      	ldr	r3, [r3, #24]
 80070c0:	0c1b      	lsrs	r3, r3, #16
 80070c2:	f003 0104 	and.w	r1, r3, #4
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ca:	f003 0210 	and.w	r2, r3, #16
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	430a      	orrs	r2, r1
 80070d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	69da      	ldr	r2, [r3, #28]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80070e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3708      	adds	r7, #8
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070fe:	b580      	push	{r7, lr}
 8007100:	b088      	sub	sp, #32
 8007102:	af00      	add	r7, sp, #0
 8007104:	60f8      	str	r0, [r7, #12]
 8007106:	60b9      	str	r1, [r7, #8]
 8007108:	603b      	str	r3, [r7, #0]
 800710a:	4613      	mov	r3, r2
 800710c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800710e:	2300      	movs	r3, #0
 8007110:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007118:	2b01      	cmp	r3, #1
 800711a:	d101      	bne.n	8007120 <HAL_SPI_Transmit+0x22>
 800711c:	2302      	movs	r3, #2
 800711e:	e12d      	b.n	800737c <HAL_SPI_Transmit+0x27e>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007128:	f7fb ffe2 	bl	80030f0 <HAL_GetTick>
 800712c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800712e:	88fb      	ldrh	r3, [r7, #6]
 8007130:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007138:	b2db      	uxtb	r3, r3
 800713a:	2b01      	cmp	r3, #1
 800713c:	d002      	beq.n	8007144 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800713e:	2302      	movs	r3, #2
 8007140:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007142:	e116      	b.n	8007372 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d002      	beq.n	8007150 <HAL_SPI_Transmit+0x52>
 800714a:	88fb      	ldrh	r3, [r7, #6]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d102      	bne.n	8007156 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007154:	e10d      	b.n	8007372 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2203      	movs	r2, #3
 800715a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	68ba      	ldr	r2, [r7, #8]
 8007168:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	88fa      	ldrh	r2, [r7, #6]
 800716e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	88fa      	ldrh	r2, [r7, #6]
 8007174:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2200      	movs	r2, #0
 800717a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2200      	movs	r2, #0
 8007180:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2200      	movs	r2, #0
 8007186:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2200      	movs	r2, #0
 800718c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2200      	movs	r2, #0
 8007192:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800719c:	d10f      	bne.n	80071be <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80071ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80071bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071c8:	2b40      	cmp	r3, #64	@ 0x40
 80071ca:	d007      	beq.n	80071dc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80071da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071e4:	d14f      	bne.n	8007286 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d002      	beq.n	80071f4 <HAL_SPI_Transmit+0xf6>
 80071ee:	8afb      	ldrh	r3, [r7, #22]
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d142      	bne.n	800727a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071f8:	881a      	ldrh	r2, [r3, #0]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007204:	1c9a      	adds	r2, r3, #2
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800720e:	b29b      	uxth	r3, r3
 8007210:	3b01      	subs	r3, #1
 8007212:	b29a      	uxth	r2, r3
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007218:	e02f      	b.n	800727a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	f003 0302 	and.w	r3, r3, #2
 8007224:	2b02      	cmp	r3, #2
 8007226:	d112      	bne.n	800724e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800722c:	881a      	ldrh	r2, [r3, #0]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007238:	1c9a      	adds	r2, r3, #2
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007242:	b29b      	uxth	r3, r3
 8007244:	3b01      	subs	r3, #1
 8007246:	b29a      	uxth	r2, r3
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800724c:	e015      	b.n	800727a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800724e:	f7fb ff4f 	bl	80030f0 <HAL_GetTick>
 8007252:	4602      	mov	r2, r0
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	683a      	ldr	r2, [r7, #0]
 800725a:	429a      	cmp	r2, r3
 800725c:	d803      	bhi.n	8007266 <HAL_SPI_Transmit+0x168>
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007264:	d102      	bne.n	800726c <HAL_SPI_Transmit+0x16e>
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d106      	bne.n	800727a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800726c:	2303      	movs	r3, #3
 800726e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007278:	e07b      	b.n	8007372 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800727e:	b29b      	uxth	r3, r3
 8007280:	2b00      	cmp	r3, #0
 8007282:	d1ca      	bne.n	800721a <HAL_SPI_Transmit+0x11c>
 8007284:	e050      	b.n	8007328 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d002      	beq.n	8007294 <HAL_SPI_Transmit+0x196>
 800728e:	8afb      	ldrh	r3, [r7, #22]
 8007290:	2b01      	cmp	r3, #1
 8007292:	d144      	bne.n	800731e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	330c      	adds	r3, #12
 800729e:	7812      	ldrb	r2, [r2, #0]
 80072a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072a6:	1c5a      	adds	r2, r3, #1
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	3b01      	subs	r3, #1
 80072b4:	b29a      	uxth	r2, r3
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80072ba:	e030      	b.n	800731e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	f003 0302 	and.w	r3, r3, #2
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	d113      	bne.n	80072f2 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	330c      	adds	r3, #12
 80072d4:	7812      	ldrb	r2, [r2, #0]
 80072d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072dc:	1c5a      	adds	r2, r3, #1
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	3b01      	subs	r3, #1
 80072ea:	b29a      	uxth	r2, r3
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	86da      	strh	r2, [r3, #54]	@ 0x36
 80072f0:	e015      	b.n	800731e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072f2:	f7fb fefd 	bl	80030f0 <HAL_GetTick>
 80072f6:	4602      	mov	r2, r0
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	1ad3      	subs	r3, r2, r3
 80072fc:	683a      	ldr	r2, [r7, #0]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d803      	bhi.n	800730a <HAL_SPI_Transmit+0x20c>
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007308:	d102      	bne.n	8007310 <HAL_SPI_Transmit+0x212>
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d106      	bne.n	800731e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8007310:	2303      	movs	r3, #3
 8007312:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800731c:	e029      	b.n	8007372 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007322:	b29b      	uxth	r3, r3
 8007324:	2b00      	cmp	r3, #0
 8007326:	d1c9      	bne.n	80072bc <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007328:	69ba      	ldr	r2, [r7, #24]
 800732a:	6839      	ldr	r1, [r7, #0]
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f000 fd27 	bl	8007d80 <SPI_EndRxTxTransaction>
 8007332:	4603      	mov	r3, r0
 8007334:	2b00      	cmp	r3, #0
 8007336:	d002      	beq.n	800733e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2220      	movs	r2, #32
 800733c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d10a      	bne.n	800735c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007346:	2300      	movs	r3, #0
 8007348:	613b      	str	r3, [r7, #16]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	613b      	str	r3, [r7, #16]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	613b      	str	r3, [r7, #16]
 800735a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007360:	2b00      	cmp	r3, #0
 8007362:	d002      	beq.n	800736a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	77fb      	strb	r3, [r7, #31]
 8007368:	e003      	b.n	8007372 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2201      	movs	r2, #1
 800736e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800737a:	7ffb      	ldrb	r3, [r7, #31]
}
 800737c:	4618      	mov	r0, r3
 800737e:	3720      	adds	r7, #32
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b088      	sub	sp, #32
 8007388:	af02      	add	r7, sp, #8
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	603b      	str	r3, [r7, #0]
 8007390:	4613      	mov	r3, r2
 8007392:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007394:	2300      	movs	r3, #0
 8007396:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d002      	beq.n	80073aa <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80073a4:	2302      	movs	r3, #2
 80073a6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80073a8:	e0fb      	b.n	80075a2 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80073b2:	d112      	bne.n	80073da <HAL_SPI_Receive+0x56>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d10e      	bne.n	80073da <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2204      	movs	r2, #4
 80073c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80073c4:	88fa      	ldrh	r2, [r7, #6]
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	9300      	str	r3, [sp, #0]
 80073ca:	4613      	mov	r3, r2
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	68b9      	ldr	r1, [r7, #8]
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f000 f8ef 	bl	80075b4 <HAL_SPI_TransmitReceive>
 80073d6:	4603      	mov	r3, r0
 80073d8:	e0e8      	b.n	80075ac <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d101      	bne.n	80073e8 <HAL_SPI_Receive+0x64>
 80073e4:	2302      	movs	r3, #2
 80073e6:	e0e1      	b.n	80075ac <HAL_SPI_Receive+0x228>
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073f0:	f7fb fe7e 	bl	80030f0 <HAL_GetTick>
 80073f4:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d002      	beq.n	8007402 <HAL_SPI_Receive+0x7e>
 80073fc:	88fb      	ldrh	r3, [r7, #6]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d102      	bne.n	8007408 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007406:	e0cc      	b.n	80075a2 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2204      	movs	r2, #4
 800740c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2200      	movs	r2, #0
 8007414:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	68ba      	ldr	r2, [r7, #8]
 800741a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	88fa      	ldrh	r2, [r7, #6]
 8007420:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	88fa      	ldrh	r2, [r7, #6]
 8007426:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2200      	movs	r2, #0
 800742c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2200      	movs	r2, #0
 8007432:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2200      	movs	r2, #0
 8007438:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2200      	movs	r2, #0
 800743e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2200      	movs	r2, #0
 8007444:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800744e:	d10f      	bne.n	8007470 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800745e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800746e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800747a:	2b40      	cmp	r3, #64	@ 0x40
 800747c:	d007      	beq.n	800748e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800748c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d16a      	bne.n	800756c <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007496:	e032      	b.n	80074fe <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	f003 0301 	and.w	r3, r3, #1
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d115      	bne.n	80074d2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f103 020c 	add.w	r2, r3, #12
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074b2:	7812      	ldrb	r2, [r2, #0]
 80074b4:	b2d2      	uxtb	r2, r2
 80074b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074bc:	1c5a      	adds	r2, r3, #1
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	3b01      	subs	r3, #1
 80074ca:	b29a      	uxth	r2, r3
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80074d0:	e015      	b.n	80074fe <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074d2:	f7fb fe0d 	bl	80030f0 <HAL_GetTick>
 80074d6:	4602      	mov	r2, r0
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	1ad3      	subs	r3, r2, r3
 80074dc:	683a      	ldr	r2, [r7, #0]
 80074de:	429a      	cmp	r2, r3
 80074e0:	d803      	bhi.n	80074ea <HAL_SPI_Receive+0x166>
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80074e8:	d102      	bne.n	80074f0 <HAL_SPI_Receive+0x16c>
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d106      	bne.n	80074fe <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80074f0:	2303      	movs	r3, #3
 80074f2:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80074fc:	e051      	b.n	80075a2 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007502:	b29b      	uxth	r3, r3
 8007504:	2b00      	cmp	r3, #0
 8007506:	d1c7      	bne.n	8007498 <HAL_SPI_Receive+0x114>
 8007508:	e035      	b.n	8007576 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	f003 0301 	and.w	r3, r3, #1
 8007514:	2b01      	cmp	r3, #1
 8007516:	d113      	bne.n	8007540 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68da      	ldr	r2, [r3, #12]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007522:	b292      	uxth	r2, r2
 8007524:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800752a:	1c9a      	adds	r2, r3, #2
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007534:	b29b      	uxth	r3, r3
 8007536:	3b01      	subs	r3, #1
 8007538:	b29a      	uxth	r2, r3
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800753e:	e015      	b.n	800756c <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007540:	f7fb fdd6 	bl	80030f0 <HAL_GetTick>
 8007544:	4602      	mov	r2, r0
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	683a      	ldr	r2, [r7, #0]
 800754c:	429a      	cmp	r2, r3
 800754e:	d803      	bhi.n	8007558 <HAL_SPI_Receive+0x1d4>
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007556:	d102      	bne.n	800755e <HAL_SPI_Receive+0x1da>
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d106      	bne.n	800756c <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2201      	movs	r2, #1
 8007566:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800756a:	e01a      	b.n	80075a2 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007570:	b29b      	uxth	r3, r3
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1c9      	bne.n	800750a <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007576:	693a      	ldr	r2, [r7, #16]
 8007578:	6839      	ldr	r1, [r7, #0]
 800757a:	68f8      	ldr	r0, [r7, #12]
 800757c:	f000 fb9a 	bl	8007cb4 <SPI_EndRxTransaction>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d002      	beq.n	800758c <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2220      	movs	r2, #32
 800758a:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007590:	2b00      	cmp	r3, #0
 8007592:	d002      	beq.n	800759a <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	75fb      	strb	r3, [r7, #23]
 8007598:	e003      	b.n	80075a2 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2201      	movs	r2, #1
 800759e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80075aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3718      	adds	r7, #24
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b08c      	sub	sp, #48	@ 0x30
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	607a      	str	r2, [r7, #4]
 80075c0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80075c2:	2301      	movs	r3, #1
 80075c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80075c6:	2300      	movs	r3, #0
 80075c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d101      	bne.n	80075da <HAL_SPI_TransmitReceive+0x26>
 80075d6:	2302      	movs	r3, #2
 80075d8:	e198      	b.n	800790c <HAL_SPI_TransmitReceive+0x358>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2201      	movs	r2, #1
 80075de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075e2:	f7fb fd85 	bl	80030f0 <HAL_GetTick>
 80075e6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80075ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80075f8:	887b      	ldrh	r3, [r7, #2]
 80075fa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80075fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007600:	2b01      	cmp	r3, #1
 8007602:	d00f      	beq.n	8007624 <HAL_SPI_TransmitReceive+0x70>
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800760a:	d107      	bne.n	800761c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d103      	bne.n	800761c <HAL_SPI_TransmitReceive+0x68>
 8007614:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007618:	2b04      	cmp	r3, #4
 800761a:	d003      	beq.n	8007624 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800761c:	2302      	movs	r3, #2
 800761e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007622:	e16d      	b.n	8007900 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d005      	beq.n	8007636 <HAL_SPI_TransmitReceive+0x82>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d002      	beq.n	8007636 <HAL_SPI_TransmitReceive+0x82>
 8007630:	887b      	ldrh	r3, [r7, #2]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d103      	bne.n	800763e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800763c:	e160      	b.n	8007900 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007644:	b2db      	uxtb	r3, r3
 8007646:	2b04      	cmp	r3, #4
 8007648:	d003      	beq.n	8007652 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2205      	movs	r2, #5
 800764e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2200      	movs	r2, #0
 8007656:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	887a      	ldrh	r2, [r7, #2]
 8007662:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	887a      	ldrh	r2, [r7, #2]
 8007668:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	68ba      	ldr	r2, [r7, #8]
 800766e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	887a      	ldrh	r2, [r7, #2]
 8007674:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	887a      	ldrh	r2, [r7, #2]
 800767a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2200      	movs	r2, #0
 8007680:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2200      	movs	r2, #0
 8007686:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007692:	2b40      	cmp	r3, #64	@ 0x40
 8007694:	d007      	beq.n	80076a6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80076a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076ae:	d17c      	bne.n	80077aa <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d002      	beq.n	80076be <HAL_SPI_TransmitReceive+0x10a>
 80076b8:	8b7b      	ldrh	r3, [r7, #26]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d16a      	bne.n	8007794 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076c2:	881a      	ldrh	r2, [r3, #0]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076ce:	1c9a      	adds	r2, r3, #2
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076d8:	b29b      	uxth	r3, r3
 80076da:	3b01      	subs	r3, #1
 80076dc:	b29a      	uxth	r2, r3
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076e2:	e057      	b.n	8007794 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	f003 0302 	and.w	r3, r3, #2
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d11b      	bne.n	800772a <HAL_SPI_TransmitReceive+0x176>
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d016      	beq.n	800772a <HAL_SPI_TransmitReceive+0x176>
 80076fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d113      	bne.n	800772a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007706:	881a      	ldrh	r2, [r3, #0]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007712:	1c9a      	adds	r2, r3, #2
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800771c:	b29b      	uxth	r3, r3
 800771e:	3b01      	subs	r3, #1
 8007720:	b29a      	uxth	r2, r3
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007726:	2300      	movs	r3, #0
 8007728:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	f003 0301 	and.w	r3, r3, #1
 8007734:	2b01      	cmp	r3, #1
 8007736:	d119      	bne.n	800776c <HAL_SPI_TransmitReceive+0x1b8>
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800773c:	b29b      	uxth	r3, r3
 800773e:	2b00      	cmp	r3, #0
 8007740:	d014      	beq.n	800776c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	68da      	ldr	r2, [r3, #12]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800774c:	b292      	uxth	r2, r2
 800774e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007754:	1c9a      	adds	r2, r3, #2
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800775e:	b29b      	uxth	r3, r3
 8007760:	3b01      	subs	r3, #1
 8007762:	b29a      	uxth	r2, r3
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007768:	2301      	movs	r3, #1
 800776a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800776c:	f7fb fcc0 	bl	80030f0 <HAL_GetTick>
 8007770:	4602      	mov	r2, r0
 8007772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007778:	429a      	cmp	r2, r3
 800777a:	d80b      	bhi.n	8007794 <HAL_SPI_TransmitReceive+0x1e0>
 800777c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800777e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007782:	d007      	beq.n	8007794 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8007784:	2303      	movs	r3, #3
 8007786:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2201      	movs	r2, #1
 800778e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8007792:	e0b5      	b.n	8007900 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007798:	b29b      	uxth	r3, r3
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1a2      	bne.n	80076e4 <HAL_SPI_TransmitReceive+0x130>
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d19d      	bne.n	80076e4 <HAL_SPI_TransmitReceive+0x130>
 80077a8:	e080      	b.n	80078ac <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d002      	beq.n	80077b8 <HAL_SPI_TransmitReceive+0x204>
 80077b2:	8b7b      	ldrh	r3, [r7, #26]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d16f      	bne.n	8007898 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	330c      	adds	r3, #12
 80077c2:	7812      	ldrb	r2, [r2, #0]
 80077c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077ca:	1c5a      	adds	r2, r3, #1
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	3b01      	subs	r3, #1
 80077d8:	b29a      	uxth	r2, r3
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077de:	e05b      	b.n	8007898 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	f003 0302 	and.w	r3, r3, #2
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d11c      	bne.n	8007828 <HAL_SPI_TransmitReceive+0x274>
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d017      	beq.n	8007828 <HAL_SPI_TransmitReceive+0x274>
 80077f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d114      	bne.n	8007828 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	330c      	adds	r3, #12
 8007808:	7812      	ldrb	r2, [r2, #0]
 800780a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007810:	1c5a      	adds	r2, r3, #1
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800781a:	b29b      	uxth	r3, r3
 800781c:	3b01      	subs	r3, #1
 800781e:	b29a      	uxth	r2, r3
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007824:	2300      	movs	r3, #0
 8007826:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	f003 0301 	and.w	r3, r3, #1
 8007832:	2b01      	cmp	r3, #1
 8007834:	d119      	bne.n	800786a <HAL_SPI_TransmitReceive+0x2b6>
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800783a:	b29b      	uxth	r3, r3
 800783c:	2b00      	cmp	r3, #0
 800783e:	d014      	beq.n	800786a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68da      	ldr	r2, [r3, #12]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800784a:	b2d2      	uxtb	r2, r2
 800784c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007852:	1c5a      	adds	r2, r3, #1
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800785c:	b29b      	uxth	r3, r3
 800785e:	3b01      	subs	r3, #1
 8007860:	b29a      	uxth	r2, r3
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007866:	2301      	movs	r3, #1
 8007868:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800786a:	f7fb fc41 	bl	80030f0 <HAL_GetTick>
 800786e:	4602      	mov	r2, r0
 8007870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007872:	1ad3      	subs	r3, r2, r3
 8007874:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007876:	429a      	cmp	r2, r3
 8007878:	d803      	bhi.n	8007882 <HAL_SPI_TransmitReceive+0x2ce>
 800787a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800787c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007880:	d102      	bne.n	8007888 <HAL_SPI_TransmitReceive+0x2d4>
 8007882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007884:	2b00      	cmp	r3, #0
 8007886:	d107      	bne.n	8007898 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8007888:	2303      	movs	r3, #3
 800788a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2201      	movs	r2, #1
 8007892:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8007896:	e033      	b.n	8007900 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800789c:	b29b      	uxth	r3, r3
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d19e      	bne.n	80077e0 <HAL_SPI_TransmitReceive+0x22c>
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d199      	bne.n	80077e0 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078ae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80078b0:	68f8      	ldr	r0, [r7, #12]
 80078b2:	f000 fa65 	bl	8007d80 <SPI_EndRxTxTransaction>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d006      	beq.n	80078ca <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2220      	movs	r2, #32
 80078c6:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80078c8:	e01a      	b.n	8007900 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d10a      	bne.n	80078e8 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80078d2:	2300      	movs	r3, #0
 80078d4:	617b      	str	r3, [r7, #20]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	617b      	str	r3, [r7, #20]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	617b      	str	r3, [r7, #20]
 80078e6:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d003      	beq.n	80078f8 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078f6:	e003      	b.n	8007900 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2200      	movs	r2, #0
 8007904:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007908:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800790c:	4618      	mov	r0, r3
 800790e:	3730      	adds	r7, #48	@ 0x30
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b086      	sub	sp, #24
 8007918:	af00      	add	r7, sp, #0
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	4613      	mov	r3, r2
 8007920:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007922:	2300      	movs	r3, #0
 8007924:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800792c:	2b01      	cmp	r3, #1
 800792e:	d101      	bne.n	8007934 <HAL_SPI_Transmit_DMA+0x20>
 8007930:	2302      	movs	r3, #2
 8007932:	e097      	b.n	8007a64 <HAL_SPI_Transmit_DMA+0x150>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007942:	b2db      	uxtb	r3, r3
 8007944:	2b01      	cmp	r3, #1
 8007946:	d002      	beq.n	800794e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8007948:	2302      	movs	r3, #2
 800794a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800794c:	e085      	b.n	8007a5a <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d002      	beq.n	800795a <HAL_SPI_Transmit_DMA+0x46>
 8007954:	88fb      	ldrh	r3, [r7, #6]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d102      	bne.n	8007960 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800795e:	e07c      	b.n	8007a5a <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2203      	movs	r2, #3
 8007964:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2200      	movs	r2, #0
 800796c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	68ba      	ldr	r2, [r7, #8]
 8007972:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	88fa      	ldrh	r2, [r7, #6]
 8007978:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	88fa      	ldrh	r2, [r7, #6]
 800797e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2200      	movs	r2, #0
 8007984:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2200      	movs	r2, #0
 800798a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2200      	movs	r2, #0
 8007990:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2200      	movs	r2, #0
 8007996:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079a6:	d10f      	bne.n	80079c8 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80079c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079cc:	4a27      	ldr	r2, [pc, #156]	@ (8007a6c <HAL_SPI_Transmit_DMA+0x158>)
 80079ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079d4:	4a26      	ldr	r2, [pc, #152]	@ (8007a70 <HAL_SPI_Transmit_DMA+0x15c>)
 80079d6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079dc:	4a25      	ldr	r2, [pc, #148]	@ (8007a74 <HAL_SPI_Transmit_DMA+0x160>)
 80079de:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079e4:	2200      	movs	r2, #0
 80079e6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079f0:	4619      	mov	r1, r3
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	330c      	adds	r3, #12
 80079f8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079fe:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007a00:	f7fc fbce 	bl	80041a0 <HAL_DMA_Start_IT>
 8007a04:	4603      	mov	r3, r0
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d008      	beq.n	8007a1c <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a0e:	f043 0210 	orr.w	r2, r3, #16
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	75fb      	strb	r3, [r7, #23]

    goto error;
 8007a1a:	e01e      	b.n	8007a5a <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a26:	2b40      	cmp	r3, #64	@ 0x40
 8007a28:	d007      	beq.n	8007a3a <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a38:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	685a      	ldr	r2, [r3, #4]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f042 0220 	orr.w	r2, r2, #32
 8007a48:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	685a      	ldr	r2, [r3, #4]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f042 0202 	orr.w	r2, r2, #2
 8007a58:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3718      	adds	r7, #24
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	08007b49 	.word	0x08007b49
 8007a70:	08007aa1 	.word	0x08007aa1
 8007a74:	08007b65 	.word	0x08007b65

08007a78 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007a80:	bf00      	nop
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007a94:	bf00      	nop
 8007a96:	370c      	adds	r7, #12
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b086      	sub	sp, #24
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aac:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007aae:	f7fb fb1f 	bl	80030f0 <HAL_GetTick>
 8007ab2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007abe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ac2:	d03b      	beq.n	8007b3c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	685a      	ldr	r2, [r3, #4]
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f022 0220 	bic.w	r2, r2, #32
 8007ad2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	685a      	ldr	r2, [r3, #4]
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f022 0202 	bic.w	r2, r2, #2
 8007ae2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007ae4:	693a      	ldr	r2, [r7, #16]
 8007ae6:	2164      	movs	r1, #100	@ 0x64
 8007ae8:	6978      	ldr	r0, [r7, #20]
 8007aea:	f000 f949 	bl	8007d80 <SPI_EndRxTxTransaction>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d005      	beq.n	8007b00 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007af8:	f043 0220 	orr.w	r2, r3, #32
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d10a      	bne.n	8007b1e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b08:	2300      	movs	r3, #0
 8007b0a:	60fb      	str	r3, [r7, #12]
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	60fb      	str	r3, [r7, #12]
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	60fb      	str	r3, [r7, #12]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	2200      	movs	r2, #0
 8007b22:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d003      	beq.n	8007b3c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007b34:	6978      	ldr	r0, [r7, #20]
 8007b36:	f7ff ffa9 	bl	8007a8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007b3a:	e002      	b.n	8007b42 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007b3c:	6978      	ldr	r0, [r7, #20]
 8007b3e:	f7fb f9a1 	bl	8002e84 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007b42:	3718      	adds	r7, #24
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b54:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007b56:	68f8      	ldr	r0, [r7, #12]
 8007b58:	f7ff ff8e 	bl	8007a78 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007b5c:	bf00      	nop
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b70:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	685a      	ldr	r2, [r3, #4]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f022 0203 	bic.w	r2, r2, #3
 8007b80:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b86:	f043 0210 	orr.w	r2, r3, #16
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007b96:	68f8      	ldr	r0, [r7, #12]
 8007b98:	f7ff ff78 	bl	8007a8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007b9c:	bf00      	nop
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b088      	sub	sp, #32
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	603b      	str	r3, [r7, #0]
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007bb4:	f7fb fa9c 	bl	80030f0 <HAL_GetTick>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bbc:	1a9b      	subs	r3, r3, r2
 8007bbe:	683a      	ldr	r2, [r7, #0]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007bc4:	f7fb fa94 	bl	80030f0 <HAL_GetTick>
 8007bc8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007bca:	4b39      	ldr	r3, [pc, #228]	@ (8007cb0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	015b      	lsls	r3, r3, #5
 8007bd0:	0d1b      	lsrs	r3, r3, #20
 8007bd2:	69fa      	ldr	r2, [r7, #28]
 8007bd4:	fb02 f303 	mul.w	r3, r2, r3
 8007bd8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007bda:	e054      	b.n	8007c86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007be2:	d050      	beq.n	8007c86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007be4:	f7fb fa84 	bl	80030f0 <HAL_GetTick>
 8007be8:	4602      	mov	r2, r0
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	1ad3      	subs	r3, r2, r3
 8007bee:	69fa      	ldr	r2, [r7, #28]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d902      	bls.n	8007bfa <SPI_WaitFlagStateUntilTimeout+0x56>
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d13d      	bne.n	8007c76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	685a      	ldr	r2, [r3, #4]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007c08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c12:	d111      	bne.n	8007c38 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c1c:	d004      	beq.n	8007c28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c26:	d107      	bne.n	8007c38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c40:	d10f      	bne.n	8007c62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007c50:	601a      	str	r2, [r3, #0]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007c60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2201      	movs	r2, #1
 8007c66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007c72:	2303      	movs	r3, #3
 8007c74:	e017      	b.n	8007ca6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d101      	bne.n	8007c80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	3b01      	subs	r3, #1
 8007c84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	689a      	ldr	r2, [r3, #8]
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	4013      	ands	r3, r2
 8007c90:	68ba      	ldr	r2, [r7, #8]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	bf0c      	ite	eq
 8007c96:	2301      	moveq	r3, #1
 8007c98:	2300      	movne	r3, #0
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	79fb      	ldrb	r3, [r7, #7]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d19b      	bne.n	8007bdc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3720      	adds	r7, #32
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	2000001c 	.word	0x2000001c

08007cb4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b086      	sub	sp, #24
 8007cb8:	af02      	add	r7, sp, #8
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007cc8:	d111      	bne.n	8007cee <SPI_EndRxTransaction+0x3a>
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cd2:	d004      	beq.n	8007cde <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cdc:	d107      	bne.n	8007cee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007cec:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007cf6:	d12a      	bne.n	8007d4e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d00:	d012      	beq.n	8007d28 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	9300      	str	r3, [sp, #0]
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	2180      	movs	r1, #128	@ 0x80
 8007d0c:	68f8      	ldr	r0, [r7, #12]
 8007d0e:	f7ff ff49 	bl	8007ba4 <SPI_WaitFlagStateUntilTimeout>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d02d      	beq.n	8007d74 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d1c:	f043 0220 	orr.w	r2, r3, #32
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007d24:	2303      	movs	r3, #3
 8007d26:	e026      	b.n	8007d76 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	9300      	str	r3, [sp, #0]
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	2101      	movs	r1, #1
 8007d32:	68f8      	ldr	r0, [r7, #12]
 8007d34:	f7ff ff36 	bl	8007ba4 <SPI_WaitFlagStateUntilTimeout>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d01a      	beq.n	8007d74 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d42:	f043 0220 	orr.w	r2, r3, #32
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	e013      	b.n	8007d76 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	9300      	str	r3, [sp, #0]
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	2200      	movs	r2, #0
 8007d56:	2101      	movs	r1, #1
 8007d58:	68f8      	ldr	r0, [r7, #12]
 8007d5a:	f7ff ff23 	bl	8007ba4 <SPI_WaitFlagStateUntilTimeout>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d007      	beq.n	8007d74 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d68:	f043 0220 	orr.w	r2, r3, #32
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007d70:	2303      	movs	r3, #3
 8007d72:	e000      	b.n	8007d76 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3710      	adds	r7, #16
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
	...

08007d80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b088      	sub	sp, #32
 8007d84:	af02      	add	r7, sp, #8
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	60b9      	str	r1, [r7, #8]
 8007d8a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	9300      	str	r3, [sp, #0]
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	2201      	movs	r2, #1
 8007d94:	2102      	movs	r1, #2
 8007d96:	68f8      	ldr	r0, [r7, #12]
 8007d98:	f7ff ff04 	bl	8007ba4 <SPI_WaitFlagStateUntilTimeout>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d007      	beq.n	8007db2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007da6:	f043 0220 	orr.w	r2, r3, #32
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007dae:	2303      	movs	r3, #3
 8007db0:	e032      	b.n	8007e18 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007db2:	4b1b      	ldr	r3, [pc, #108]	@ (8007e20 <SPI_EndRxTxTransaction+0xa0>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a1b      	ldr	r2, [pc, #108]	@ (8007e24 <SPI_EndRxTxTransaction+0xa4>)
 8007db8:	fba2 2303 	umull	r2, r3, r2, r3
 8007dbc:	0d5b      	lsrs	r3, r3, #21
 8007dbe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007dc2:	fb02 f303 	mul.w	r3, r2, r3
 8007dc6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007dd0:	d112      	bne.n	8007df8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	9300      	str	r3, [sp, #0]
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	2180      	movs	r1, #128	@ 0x80
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f7ff fee1 	bl	8007ba4 <SPI_WaitFlagStateUntilTimeout>
 8007de2:	4603      	mov	r3, r0
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d016      	beq.n	8007e16 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dec:	f043 0220 	orr.w	r2, r3, #32
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007df4:	2303      	movs	r3, #3
 8007df6:	e00f      	b.n	8007e18 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00a      	beq.n	8007e14 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	3b01      	subs	r3, #1
 8007e02:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e0e:	2b80      	cmp	r3, #128	@ 0x80
 8007e10:	d0f2      	beq.n	8007df8 <SPI_EndRxTxTransaction+0x78>
 8007e12:	e000      	b.n	8007e16 <SPI_EndRxTxTransaction+0x96>
        break;
 8007e14:	bf00      	nop
  }

  return HAL_OK;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3718      	adds	r7, #24
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	2000001c 	.word	0x2000001c
 8007e24:	165e9f81 	.word	0x165e9f81

08007e28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d101      	bne.n	8007e3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e041      	b.n	8007ebe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d106      	bne.n	8007e54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f7fa fed0 	bl	8002bf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2202      	movs	r2, #2
 8007e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	3304      	adds	r3, #4
 8007e64:	4619      	mov	r1, r3
 8007e66:	4610      	mov	r0, r2
 8007e68:	f000 f9c0 	bl	80081ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3708      	adds	r7, #8
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
	...

08007ec8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d001      	beq.n	8007ee0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	e04e      	b.n	8007f7e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2202      	movs	r2, #2
 8007ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	68da      	ldr	r2, [r3, #12]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f042 0201 	orr.w	r2, r2, #1
 8007ef6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a23      	ldr	r2, [pc, #140]	@ (8007f8c <HAL_TIM_Base_Start_IT+0xc4>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d022      	beq.n	8007f48 <HAL_TIM_Base_Start_IT+0x80>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f0a:	d01d      	beq.n	8007f48 <HAL_TIM_Base_Start_IT+0x80>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a1f      	ldr	r2, [pc, #124]	@ (8007f90 <HAL_TIM_Base_Start_IT+0xc8>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d018      	beq.n	8007f48 <HAL_TIM_Base_Start_IT+0x80>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a1e      	ldr	r2, [pc, #120]	@ (8007f94 <HAL_TIM_Base_Start_IT+0xcc>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d013      	beq.n	8007f48 <HAL_TIM_Base_Start_IT+0x80>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a1c      	ldr	r2, [pc, #112]	@ (8007f98 <HAL_TIM_Base_Start_IT+0xd0>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d00e      	beq.n	8007f48 <HAL_TIM_Base_Start_IT+0x80>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a1b      	ldr	r2, [pc, #108]	@ (8007f9c <HAL_TIM_Base_Start_IT+0xd4>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d009      	beq.n	8007f48 <HAL_TIM_Base_Start_IT+0x80>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a19      	ldr	r2, [pc, #100]	@ (8007fa0 <HAL_TIM_Base_Start_IT+0xd8>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d004      	beq.n	8007f48 <HAL_TIM_Base_Start_IT+0x80>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a18      	ldr	r2, [pc, #96]	@ (8007fa4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d111      	bne.n	8007f6c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	f003 0307 	and.w	r3, r3, #7
 8007f52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2b06      	cmp	r3, #6
 8007f58:	d010      	beq.n	8007f7c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f042 0201 	orr.w	r2, r2, #1
 8007f68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f6a:	e007      	b.n	8007f7c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f042 0201 	orr.w	r2, r2, #1
 8007f7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3714      	adds	r7, #20
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr
 8007f8a:	bf00      	nop
 8007f8c:	40010000 	.word	0x40010000
 8007f90:	40000400 	.word	0x40000400
 8007f94:	40000800 	.word	0x40000800
 8007f98:	40000c00 	.word	0x40000c00
 8007f9c:	40010400 	.word	0x40010400
 8007fa0:	40014000 	.word	0x40014000
 8007fa4:	40001800 	.word	0x40001800

08007fa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	f003 0302 	and.w	r3, r3, #2
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d020      	beq.n	800800c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f003 0302 	and.w	r3, r3, #2
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d01b      	beq.n	800800c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f06f 0202 	mvn.w	r2, #2
 8007fdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	699b      	ldr	r3, [r3, #24]
 8007fea:	f003 0303 	and.w	r3, r3, #3
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d003      	beq.n	8007ffa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 f8dc 	bl	80081b0 <HAL_TIM_IC_CaptureCallback>
 8007ff8:	e005      	b.n	8008006 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 f8ce 	bl	800819c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 f8df 	bl	80081c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	f003 0304 	and.w	r3, r3, #4
 8008012:	2b00      	cmp	r3, #0
 8008014:	d020      	beq.n	8008058 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f003 0304 	and.w	r3, r3, #4
 800801c:	2b00      	cmp	r3, #0
 800801e:	d01b      	beq.n	8008058 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f06f 0204 	mvn.w	r2, #4
 8008028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2202      	movs	r2, #2
 800802e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	699b      	ldr	r3, [r3, #24]
 8008036:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800803a:	2b00      	cmp	r3, #0
 800803c:	d003      	beq.n	8008046 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 f8b6 	bl	80081b0 <HAL_TIM_IC_CaptureCallback>
 8008044:	e005      	b.n	8008052 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 f8a8 	bl	800819c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 f8b9 	bl	80081c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	f003 0308 	and.w	r3, r3, #8
 800805e:	2b00      	cmp	r3, #0
 8008060:	d020      	beq.n	80080a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f003 0308 	and.w	r3, r3, #8
 8008068:	2b00      	cmp	r3, #0
 800806a:	d01b      	beq.n	80080a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f06f 0208 	mvn.w	r2, #8
 8008074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2204      	movs	r2, #4
 800807a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	69db      	ldr	r3, [r3, #28]
 8008082:	f003 0303 	and.w	r3, r3, #3
 8008086:	2b00      	cmp	r3, #0
 8008088:	d003      	beq.n	8008092 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 f890 	bl	80081b0 <HAL_TIM_IC_CaptureCallback>
 8008090:	e005      	b.n	800809e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 f882 	bl	800819c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 f893 	bl	80081c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	f003 0310 	and.w	r3, r3, #16
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d020      	beq.n	80080f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f003 0310 	and.w	r3, r3, #16
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d01b      	beq.n	80080f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f06f 0210 	mvn.w	r2, #16
 80080c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2208      	movs	r2, #8
 80080c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	69db      	ldr	r3, [r3, #28]
 80080ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d003      	beq.n	80080de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 f86a 	bl	80081b0 <HAL_TIM_IC_CaptureCallback>
 80080dc:	e005      	b.n	80080ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 f85c 	bl	800819c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 f86d 	bl	80081c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	f003 0301 	and.w	r3, r3, #1
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d00c      	beq.n	8008114 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f003 0301 	and.w	r3, r3, #1
 8008100:	2b00      	cmp	r3, #0
 8008102:	d007      	beq.n	8008114 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f06f 0201 	mvn.w	r2, #1
 800810c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 f83a 	bl	8008188 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800811a:	2b00      	cmp	r3, #0
 800811c:	d00c      	beq.n	8008138 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008124:	2b00      	cmp	r3, #0
 8008126:	d007      	beq.n	8008138 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 f98c 	bl	8008450 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800813e:	2b00      	cmp	r3, #0
 8008140:	d00c      	beq.n	800815c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008148:	2b00      	cmp	r3, #0
 800814a:	d007      	beq.n	800815c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 f83e 	bl	80081d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	f003 0320 	and.w	r3, r3, #32
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00c      	beq.n	8008180 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f003 0320 	and.w	r3, r3, #32
 800816c:	2b00      	cmp	r3, #0
 800816e:	d007      	beq.n	8008180 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f06f 0220 	mvn.w	r2, #32
 8008178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 f95e 	bl	800843c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008180:	bf00      	nop
 8008182:	3710      	adds	r7, #16
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008190:	bf00      	nop
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081a4:	bf00      	nop
 80081a6:	370c      	adds	r7, #12
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80081b8:	bf00      	nop
 80081ba:	370c      	adds	r7, #12
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081cc:	bf00      	nop
 80081ce:	370c      	adds	r7, #12
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80081e0:	bf00      	nop
 80081e2:	370c      	adds	r7, #12
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr

080081ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b085      	sub	sp, #20
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	4a46      	ldr	r2, [pc, #280]	@ (8008318 <TIM_Base_SetConfig+0x12c>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d013      	beq.n	800822c <TIM_Base_SetConfig+0x40>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800820a:	d00f      	beq.n	800822c <TIM_Base_SetConfig+0x40>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	4a43      	ldr	r2, [pc, #268]	@ (800831c <TIM_Base_SetConfig+0x130>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d00b      	beq.n	800822c <TIM_Base_SetConfig+0x40>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4a42      	ldr	r2, [pc, #264]	@ (8008320 <TIM_Base_SetConfig+0x134>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d007      	beq.n	800822c <TIM_Base_SetConfig+0x40>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	4a41      	ldr	r2, [pc, #260]	@ (8008324 <TIM_Base_SetConfig+0x138>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d003      	beq.n	800822c <TIM_Base_SetConfig+0x40>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	4a40      	ldr	r2, [pc, #256]	@ (8008328 <TIM_Base_SetConfig+0x13c>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d108      	bne.n	800823e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008232:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	68fa      	ldr	r2, [r7, #12]
 800823a:	4313      	orrs	r3, r2
 800823c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	4a35      	ldr	r2, [pc, #212]	@ (8008318 <TIM_Base_SetConfig+0x12c>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d02b      	beq.n	800829e <TIM_Base_SetConfig+0xb2>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800824c:	d027      	beq.n	800829e <TIM_Base_SetConfig+0xb2>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	4a32      	ldr	r2, [pc, #200]	@ (800831c <TIM_Base_SetConfig+0x130>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d023      	beq.n	800829e <TIM_Base_SetConfig+0xb2>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	4a31      	ldr	r2, [pc, #196]	@ (8008320 <TIM_Base_SetConfig+0x134>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d01f      	beq.n	800829e <TIM_Base_SetConfig+0xb2>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	4a30      	ldr	r2, [pc, #192]	@ (8008324 <TIM_Base_SetConfig+0x138>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d01b      	beq.n	800829e <TIM_Base_SetConfig+0xb2>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	4a2f      	ldr	r2, [pc, #188]	@ (8008328 <TIM_Base_SetConfig+0x13c>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d017      	beq.n	800829e <TIM_Base_SetConfig+0xb2>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	4a2e      	ldr	r2, [pc, #184]	@ (800832c <TIM_Base_SetConfig+0x140>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d013      	beq.n	800829e <TIM_Base_SetConfig+0xb2>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	4a2d      	ldr	r2, [pc, #180]	@ (8008330 <TIM_Base_SetConfig+0x144>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d00f      	beq.n	800829e <TIM_Base_SetConfig+0xb2>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	4a2c      	ldr	r2, [pc, #176]	@ (8008334 <TIM_Base_SetConfig+0x148>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d00b      	beq.n	800829e <TIM_Base_SetConfig+0xb2>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	4a2b      	ldr	r2, [pc, #172]	@ (8008338 <TIM_Base_SetConfig+0x14c>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d007      	beq.n	800829e <TIM_Base_SetConfig+0xb2>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	4a2a      	ldr	r2, [pc, #168]	@ (800833c <TIM_Base_SetConfig+0x150>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d003      	beq.n	800829e <TIM_Base_SetConfig+0xb2>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	4a29      	ldr	r2, [pc, #164]	@ (8008340 <TIM_Base_SetConfig+0x154>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d108      	bne.n	80082b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	4313      	orrs	r3, r2
 80082ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	695b      	ldr	r3, [r3, #20]
 80082ba:	4313      	orrs	r3, r2
 80082bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	68fa      	ldr	r2, [r7, #12]
 80082c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	689a      	ldr	r2, [r3, #8]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	4a10      	ldr	r2, [pc, #64]	@ (8008318 <TIM_Base_SetConfig+0x12c>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d003      	beq.n	80082e4 <TIM_Base_SetConfig+0xf8>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	4a12      	ldr	r2, [pc, #72]	@ (8008328 <TIM_Base_SetConfig+0x13c>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d103      	bne.n	80082ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	691a      	ldr	r2, [r3, #16]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2201      	movs	r2, #1
 80082f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	f003 0301 	and.w	r3, r3, #1
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d105      	bne.n	800830a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	691b      	ldr	r3, [r3, #16]
 8008302:	f023 0201 	bic.w	r2, r3, #1
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	611a      	str	r2, [r3, #16]
  }
}
 800830a:	bf00      	nop
 800830c:	3714      	adds	r7, #20
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr
 8008316:	bf00      	nop
 8008318:	40010000 	.word	0x40010000
 800831c:	40000400 	.word	0x40000400
 8008320:	40000800 	.word	0x40000800
 8008324:	40000c00 	.word	0x40000c00
 8008328:	40010400 	.word	0x40010400
 800832c:	40014000 	.word	0x40014000
 8008330:	40014400 	.word	0x40014400
 8008334:	40014800 	.word	0x40014800
 8008338:	40001800 	.word	0x40001800
 800833c:	40001c00 	.word	0x40001c00
 8008340:	40002000 	.word	0x40002000

08008344 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008344:	b480      	push	{r7}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008354:	2b01      	cmp	r3, #1
 8008356:	d101      	bne.n	800835c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008358:	2302      	movs	r3, #2
 800835a:	e05a      	b.n	8008412 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2202      	movs	r2, #2
 8008368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008382:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	4313      	orrs	r3, r2
 800838c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	68fa      	ldr	r2, [r7, #12]
 8008394:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a21      	ldr	r2, [pc, #132]	@ (8008420 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d022      	beq.n	80083e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083a8:	d01d      	beq.n	80083e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a1d      	ldr	r2, [pc, #116]	@ (8008424 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d018      	beq.n	80083e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a1b      	ldr	r2, [pc, #108]	@ (8008428 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d013      	beq.n	80083e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a1a      	ldr	r2, [pc, #104]	@ (800842c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d00e      	beq.n	80083e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a18      	ldr	r2, [pc, #96]	@ (8008430 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d009      	beq.n	80083e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a17      	ldr	r2, [pc, #92]	@ (8008434 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d004      	beq.n	80083e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a15      	ldr	r2, [pc, #84]	@ (8008438 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d10c      	bne.n	8008400 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	68ba      	ldr	r2, [r7, #8]
 80083f4:	4313      	orrs	r3, r2
 80083f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	68ba      	ldr	r2, [r7, #8]
 80083fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2201      	movs	r2, #1
 8008404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008410:	2300      	movs	r3, #0
}
 8008412:	4618      	mov	r0, r3
 8008414:	3714      	adds	r7, #20
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr
 800841e:	bf00      	nop
 8008420:	40010000 	.word	0x40010000
 8008424:	40000400 	.word	0x40000400
 8008428:	40000800 	.word	0x40000800
 800842c:	40000c00 	.word	0x40000c00
 8008430:	40010400 	.word	0x40010400
 8008434:	40014000 	.word	0x40014000
 8008438:	40001800 	.word	0x40001800

0800843c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008444:	bf00      	nop
 8008446:	370c      	adds	r7, #12
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008450:	b480      	push	{r7}
 8008452:	b083      	sub	sp, #12
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008458:	bf00      	nop
 800845a:	370c      	adds	r7, #12
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr

08008464 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d101      	bne.n	8008476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008472:	2301      	movs	r3, #1
 8008474:	e042      	b.n	80084fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800847c:	b2db      	uxtb	r3, r3
 800847e:	2b00      	cmp	r3, #0
 8008480:	d106      	bne.n	8008490 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f7fa fbf8 	bl	8002c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2224      	movs	r2, #36	@ 0x24
 8008494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	68da      	ldr	r2, [r3, #12]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80084a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 fdbd 	bl	8009028 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	691a      	ldr	r2, [r3, #16]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80084bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	695a      	ldr	r2, [r3, #20]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80084cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	68da      	ldr	r2, [r3, #12]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80084dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2200      	movs	r2, #0
 80084e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2220      	movs	r2, #32
 80084e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2220      	movs	r2, #32
 80084f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80084fa:	2300      	movs	r3, #0
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3708      	adds	r7, #8
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b08a      	sub	sp, #40	@ 0x28
 8008508:	af02      	add	r7, sp, #8
 800850a:	60f8      	str	r0, [r7, #12]
 800850c:	60b9      	str	r1, [r7, #8]
 800850e:	603b      	str	r3, [r7, #0]
 8008510:	4613      	mov	r3, r2
 8008512:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008514:	2300      	movs	r3, #0
 8008516:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800851e:	b2db      	uxtb	r3, r3
 8008520:	2b20      	cmp	r3, #32
 8008522:	d175      	bne.n	8008610 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d002      	beq.n	8008530 <HAL_UART_Transmit+0x2c>
 800852a:	88fb      	ldrh	r3, [r7, #6]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d101      	bne.n	8008534 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008530:	2301      	movs	r3, #1
 8008532:	e06e      	b.n	8008612 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2200      	movs	r2, #0
 8008538:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2221      	movs	r2, #33	@ 0x21
 800853e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008542:	f7fa fdd5 	bl	80030f0 <HAL_GetTick>
 8008546:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	88fa      	ldrh	r2, [r7, #6]
 800854c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	88fa      	ldrh	r2, [r7, #6]
 8008552:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800855c:	d108      	bne.n	8008570 <HAL_UART_Transmit+0x6c>
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	691b      	ldr	r3, [r3, #16]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d104      	bne.n	8008570 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008566:	2300      	movs	r3, #0
 8008568:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	61bb      	str	r3, [r7, #24]
 800856e:	e003      	b.n	8008578 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008574:	2300      	movs	r3, #0
 8008576:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008578:	e02e      	b.n	80085d8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	9300      	str	r3, [sp, #0]
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	2200      	movs	r2, #0
 8008582:	2180      	movs	r1, #128	@ 0x80
 8008584:	68f8      	ldr	r0, [r7, #12]
 8008586:	f000 fb1f 	bl	8008bc8 <UART_WaitOnFlagUntilTimeout>
 800858a:	4603      	mov	r3, r0
 800858c:	2b00      	cmp	r3, #0
 800858e:	d005      	beq.n	800859c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2220      	movs	r2, #32
 8008594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008598:	2303      	movs	r3, #3
 800859a:	e03a      	b.n	8008612 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d10b      	bne.n	80085ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80085a2:	69bb      	ldr	r3, [r7, #24]
 80085a4:	881b      	ldrh	r3, [r3, #0]
 80085a6:	461a      	mov	r2, r3
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	3302      	adds	r3, #2
 80085b6:	61bb      	str	r3, [r7, #24]
 80085b8:	e007      	b.n	80085ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80085ba:	69fb      	ldr	r3, [r7, #28]
 80085bc:	781a      	ldrb	r2, [r3, #0]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	3301      	adds	r3, #1
 80085c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	3b01      	subs	r3, #1
 80085d2:	b29a      	uxth	r2, r3
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80085dc:	b29b      	uxth	r3, r3
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d1cb      	bne.n	800857a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	9300      	str	r3, [sp, #0]
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	2200      	movs	r2, #0
 80085ea:	2140      	movs	r1, #64	@ 0x40
 80085ec:	68f8      	ldr	r0, [r7, #12]
 80085ee:	f000 faeb 	bl	8008bc8 <UART_WaitOnFlagUntilTimeout>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d005      	beq.n	8008604 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2220      	movs	r2, #32
 80085fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008600:	2303      	movs	r3, #3
 8008602:	e006      	b.n	8008612 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2220      	movs	r2, #32
 8008608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800860c:	2300      	movs	r3, #0
 800860e:	e000      	b.n	8008612 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008610:	2302      	movs	r3, #2
  }
}
 8008612:	4618      	mov	r0, r3
 8008614:	3720      	adds	r7, #32
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b084      	sub	sp, #16
 800861e:	af00      	add	r7, sp, #0
 8008620:	60f8      	str	r0, [r7, #12]
 8008622:	60b9      	str	r1, [r7, #8]
 8008624:	4613      	mov	r3, r2
 8008626:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800862e:	b2db      	uxtb	r3, r3
 8008630:	2b20      	cmp	r3, #32
 8008632:	d112      	bne.n	800865a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d002      	beq.n	8008640 <HAL_UART_Receive_IT+0x26>
 800863a:	88fb      	ldrh	r3, [r7, #6]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d101      	bne.n	8008644 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008640:	2301      	movs	r3, #1
 8008642:	e00b      	b.n	800865c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2200      	movs	r2, #0
 8008648:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800864a:	88fb      	ldrh	r3, [r7, #6]
 800864c:	461a      	mov	r2, r3
 800864e:	68b9      	ldr	r1, [r7, #8]
 8008650:	68f8      	ldr	r0, [r7, #12]
 8008652:	f000 fb12 	bl	8008c7a <UART_Start_Receive_IT>
 8008656:	4603      	mov	r3, r0
 8008658:	e000      	b.n	800865c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800865a:	2302      	movs	r3, #2
  }
}
 800865c:	4618      	mov	r0, r3
 800865e:	3710      	adds	r7, #16
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b0ba      	sub	sp, #232	@ 0xe8
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	695b      	ldr	r3, [r3, #20]
 8008686:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800868a:	2300      	movs	r3, #0
 800868c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008690:	2300      	movs	r3, #0
 8008692:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800869a:	f003 030f 	and.w	r3, r3, #15
 800869e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80086a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d10f      	bne.n	80086ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80086aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086ae:	f003 0320 	and.w	r3, r3, #32
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d009      	beq.n	80086ca <HAL_UART_IRQHandler+0x66>
 80086b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086ba:	f003 0320 	and.w	r3, r3, #32
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d003      	beq.n	80086ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 fbf2 	bl	8008eac <UART_Receive_IT>
      return;
 80086c8:	e25b      	b.n	8008b82 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80086ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	f000 80de 	beq.w	8008890 <HAL_UART_IRQHandler+0x22c>
 80086d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086d8:	f003 0301 	and.w	r3, r3, #1
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d106      	bne.n	80086ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80086e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086e4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	f000 80d1 	beq.w	8008890 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80086ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086f2:	f003 0301 	and.w	r3, r3, #1
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d00b      	beq.n	8008712 <HAL_UART_IRQHandler+0xae>
 80086fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008702:	2b00      	cmp	r3, #0
 8008704:	d005      	beq.n	8008712 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800870a:	f043 0201 	orr.w	r2, r3, #1
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008716:	f003 0304 	and.w	r3, r3, #4
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00b      	beq.n	8008736 <HAL_UART_IRQHandler+0xd2>
 800871e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008722:	f003 0301 	and.w	r3, r3, #1
 8008726:	2b00      	cmp	r3, #0
 8008728:	d005      	beq.n	8008736 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800872e:	f043 0202 	orr.w	r2, r3, #2
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800873a:	f003 0302 	and.w	r3, r3, #2
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00b      	beq.n	800875a <HAL_UART_IRQHandler+0xf6>
 8008742:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008746:	f003 0301 	and.w	r3, r3, #1
 800874a:	2b00      	cmp	r3, #0
 800874c:	d005      	beq.n	800875a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008752:	f043 0204 	orr.w	r2, r3, #4
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800875a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800875e:	f003 0308 	and.w	r3, r3, #8
 8008762:	2b00      	cmp	r3, #0
 8008764:	d011      	beq.n	800878a <HAL_UART_IRQHandler+0x126>
 8008766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800876a:	f003 0320 	and.w	r3, r3, #32
 800876e:	2b00      	cmp	r3, #0
 8008770:	d105      	bne.n	800877e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008772:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008776:	f003 0301 	and.w	r3, r3, #1
 800877a:	2b00      	cmp	r3, #0
 800877c:	d005      	beq.n	800878a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008782:	f043 0208 	orr.w	r2, r3, #8
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800878e:	2b00      	cmp	r3, #0
 8008790:	f000 81f2 	beq.w	8008b78 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008798:	f003 0320 	and.w	r3, r3, #32
 800879c:	2b00      	cmp	r3, #0
 800879e:	d008      	beq.n	80087b2 <HAL_UART_IRQHandler+0x14e>
 80087a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087a4:	f003 0320 	and.w	r3, r3, #32
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d002      	beq.n	80087b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 fb7d 	bl	8008eac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	695b      	ldr	r3, [r3, #20]
 80087b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087bc:	2b40      	cmp	r3, #64	@ 0x40
 80087be:	bf0c      	ite	eq
 80087c0:	2301      	moveq	r3, #1
 80087c2:	2300      	movne	r3, #0
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087ce:	f003 0308 	and.w	r3, r3, #8
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d103      	bne.n	80087de <HAL_UART_IRQHandler+0x17a>
 80087d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d04f      	beq.n	800887e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 fa85 	bl	8008cee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	695b      	ldr	r3, [r3, #20]
 80087ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087ee:	2b40      	cmp	r3, #64	@ 0x40
 80087f0:	d141      	bne.n	8008876 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	3314      	adds	r3, #20
 80087f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008800:	e853 3f00 	ldrex	r3, [r3]
 8008804:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008808:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800880c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008810:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	3314      	adds	r3, #20
 800881a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800881e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008822:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008826:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800882a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800882e:	e841 2300 	strex	r3, r2, [r1]
 8008832:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008836:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800883a:	2b00      	cmp	r3, #0
 800883c:	d1d9      	bne.n	80087f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008842:	2b00      	cmp	r3, #0
 8008844:	d013      	beq.n	800886e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800884a:	4a7e      	ldr	r2, [pc, #504]	@ (8008a44 <HAL_UART_IRQHandler+0x3e0>)
 800884c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008852:	4618      	mov	r0, r3
 8008854:	f7fb fd6c 	bl	8004330 <HAL_DMA_Abort_IT>
 8008858:	4603      	mov	r3, r0
 800885a:	2b00      	cmp	r3, #0
 800885c:	d016      	beq.n	800888c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008862:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008868:	4610      	mov	r0, r2
 800886a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800886c:	e00e      	b.n	800888c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 f994 	bl	8008b9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008874:	e00a      	b.n	800888c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 f990 	bl	8008b9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800887c:	e006      	b.n	800888c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 f98c 	bl	8008b9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800888a:	e175      	b.n	8008b78 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800888c:	bf00      	nop
    return;
 800888e:	e173      	b.n	8008b78 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008894:	2b01      	cmp	r3, #1
 8008896:	f040 814f 	bne.w	8008b38 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800889a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800889e:	f003 0310 	and.w	r3, r3, #16
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	f000 8148 	beq.w	8008b38 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80088a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088ac:	f003 0310 	and.w	r3, r3, #16
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	f000 8141 	beq.w	8008b38 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80088b6:	2300      	movs	r3, #0
 80088b8:	60bb      	str	r3, [r7, #8]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	60bb      	str	r3, [r7, #8]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	60bb      	str	r3, [r7, #8]
 80088ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	695b      	ldr	r3, [r3, #20]
 80088d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088d6:	2b40      	cmp	r3, #64	@ 0x40
 80088d8:	f040 80b6 	bne.w	8008a48 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80088e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	f000 8145 	beq.w	8008b7c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80088f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80088fa:	429a      	cmp	r2, r3
 80088fc:	f080 813e 	bcs.w	8008b7c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008906:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800890c:	69db      	ldr	r3, [r3, #28]
 800890e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008912:	f000 8088 	beq.w	8008a26 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	330c      	adds	r3, #12
 800891c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008920:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008924:	e853 3f00 	ldrex	r3, [r3]
 8008928:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800892c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008930:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008934:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	330c      	adds	r3, #12
 800893e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008942:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008946:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800894a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800894e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008952:	e841 2300 	strex	r3, r2, [r1]
 8008956:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800895a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800895e:	2b00      	cmp	r3, #0
 8008960:	d1d9      	bne.n	8008916 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	3314      	adds	r3, #20
 8008968:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800896a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800896c:	e853 3f00 	ldrex	r3, [r3]
 8008970:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008972:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008974:	f023 0301 	bic.w	r3, r3, #1
 8008978:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	3314      	adds	r3, #20
 8008982:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008986:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800898a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800898c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800898e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008992:	e841 2300 	strex	r3, r2, [r1]
 8008996:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008998:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800899a:	2b00      	cmp	r3, #0
 800899c:	d1e1      	bne.n	8008962 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	3314      	adds	r3, #20
 80089a4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80089a8:	e853 3f00 	ldrex	r3, [r3]
 80089ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80089ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	3314      	adds	r3, #20
 80089be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80089c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80089c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80089c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80089ca:	e841 2300 	strex	r3, r2, [r1]
 80089ce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80089d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d1e3      	bne.n	800899e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2220      	movs	r2, #32
 80089da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	330c      	adds	r3, #12
 80089ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089ee:	e853 3f00 	ldrex	r3, [r3]
 80089f2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80089f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80089f6:	f023 0310 	bic.w	r3, r3, #16
 80089fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	330c      	adds	r3, #12
 8008a04:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008a08:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008a0a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a0c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008a0e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008a10:	e841 2300 	strex	r3, r2, [r1]
 8008a14:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008a16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d1e3      	bne.n	80089e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a20:	4618      	mov	r0, r3
 8008a22:	f7fb fc15 	bl	8004250 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2202      	movs	r2, #2
 8008a2a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	1ad3      	subs	r3, r2, r3
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 f8b7 	bl	8008bb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008a42:	e09b      	b.n	8008b7c <HAL_UART_IRQHandler+0x518>
 8008a44:	08008db5 	.word	0x08008db5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	1ad3      	subs	r3, r2, r3
 8008a54:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	f000 808e 	beq.w	8008b80 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008a64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	f000 8089 	beq.w	8008b80 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	330c      	adds	r3, #12
 8008a74:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a78:	e853 3f00 	ldrex	r3, [r3]
 8008a7c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	330c      	adds	r3, #12
 8008a8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008a92:	647a      	str	r2, [r7, #68]	@ 0x44
 8008a94:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a96:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a9a:	e841 2300 	strex	r3, r2, [r1]
 8008a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008aa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d1e3      	bne.n	8008a6e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	3314      	adds	r3, #20
 8008aac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ab0:	e853 3f00 	ldrex	r3, [r3]
 8008ab4:	623b      	str	r3, [r7, #32]
   return(result);
 8008ab6:	6a3b      	ldr	r3, [r7, #32]
 8008ab8:	f023 0301 	bic.w	r3, r3, #1
 8008abc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	3314      	adds	r3, #20
 8008ac6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008aca:	633a      	str	r2, [r7, #48]	@ 0x30
 8008acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ace:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ad0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ad2:	e841 2300 	strex	r3, r2, [r1]
 8008ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d1e3      	bne.n	8008aa6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2220      	movs	r2, #32
 8008ae2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	330c      	adds	r3, #12
 8008af2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	e853 3f00 	ldrex	r3, [r3]
 8008afa:	60fb      	str	r3, [r7, #12]
   return(result);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f023 0310 	bic.w	r3, r3, #16
 8008b02:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	330c      	adds	r3, #12
 8008b0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008b10:	61fa      	str	r2, [r7, #28]
 8008b12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b14:	69b9      	ldr	r1, [r7, #24]
 8008b16:	69fa      	ldr	r2, [r7, #28]
 8008b18:	e841 2300 	strex	r3, r2, [r1]
 8008b1c:	617b      	str	r3, [r7, #20]
   return(result);
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d1e3      	bne.n	8008aec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2202      	movs	r2, #2
 8008b28:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008b2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008b2e:	4619      	mov	r1, r3
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 f83d 	bl	8008bb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008b36:	e023      	b.n	8008b80 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d009      	beq.n	8008b58 <HAL_UART_IRQHandler+0x4f4>
 8008b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d003      	beq.n	8008b58 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 f943 	bl	8008ddc <UART_Transmit_IT>
    return;
 8008b56:	e014      	b.n	8008b82 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d00e      	beq.n	8008b82 <HAL_UART_IRQHandler+0x51e>
 8008b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d008      	beq.n	8008b82 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 f983 	bl	8008e7c <UART_EndTransmit_IT>
    return;
 8008b76:	e004      	b.n	8008b82 <HAL_UART_IRQHandler+0x51e>
    return;
 8008b78:	bf00      	nop
 8008b7a:	e002      	b.n	8008b82 <HAL_UART_IRQHandler+0x51e>
      return;
 8008b7c:	bf00      	nop
 8008b7e:	e000      	b.n	8008b82 <HAL_UART_IRQHandler+0x51e>
      return;
 8008b80:	bf00      	nop
  }
}
 8008b82:	37e8      	adds	r7, #232	@ 0xe8
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008b90:	bf00      	nop
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008ba4:	bf00      	nop
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	460b      	mov	r3, r1
 8008bba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008bbc:	bf00      	nop
 8008bbe:	370c      	adds	r7, #12
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr

08008bc8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b086      	sub	sp, #24
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	60f8      	str	r0, [r7, #12]
 8008bd0:	60b9      	str	r1, [r7, #8]
 8008bd2:	603b      	str	r3, [r7, #0]
 8008bd4:	4613      	mov	r3, r2
 8008bd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bd8:	e03b      	b.n	8008c52 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008bda:	6a3b      	ldr	r3, [r7, #32]
 8008bdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008be0:	d037      	beq.n	8008c52 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008be2:	f7fa fa85 	bl	80030f0 <HAL_GetTick>
 8008be6:	4602      	mov	r2, r0
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	1ad3      	subs	r3, r2, r3
 8008bec:	6a3a      	ldr	r2, [r7, #32]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d302      	bcc.n	8008bf8 <UART_WaitOnFlagUntilTimeout+0x30>
 8008bf2:	6a3b      	ldr	r3, [r7, #32]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d101      	bne.n	8008bfc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008bf8:	2303      	movs	r3, #3
 8008bfa:	e03a      	b.n	8008c72 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	f003 0304 	and.w	r3, r3, #4
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d023      	beq.n	8008c52 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	2b80      	cmp	r3, #128	@ 0x80
 8008c0e:	d020      	beq.n	8008c52 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	2b40      	cmp	r3, #64	@ 0x40
 8008c14:	d01d      	beq.n	8008c52 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f003 0308 	and.w	r3, r3, #8
 8008c20:	2b08      	cmp	r3, #8
 8008c22:	d116      	bne.n	8008c52 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008c24:	2300      	movs	r3, #0
 8008c26:	617b      	str	r3, [r7, #20]
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	617b      	str	r3, [r7, #20]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	617b      	str	r3, [r7, #20]
 8008c38:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c3a:	68f8      	ldr	r0, [r7, #12]
 8008c3c:	f000 f857 	bl	8008cee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2208      	movs	r2, #8
 8008c44:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e00f      	b.n	8008c72 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	4013      	ands	r3, r2
 8008c5c:	68ba      	ldr	r2, [r7, #8]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	bf0c      	ite	eq
 8008c62:	2301      	moveq	r3, #1
 8008c64:	2300      	movne	r3, #0
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	461a      	mov	r2, r3
 8008c6a:	79fb      	ldrb	r3, [r7, #7]
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d0b4      	beq.n	8008bda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c70:	2300      	movs	r3, #0
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3718      	adds	r7, #24
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c7a:	b480      	push	{r7}
 8008c7c:	b085      	sub	sp, #20
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	60f8      	str	r0, [r7, #12]
 8008c82:	60b9      	str	r1, [r7, #8]
 8008c84:	4613      	mov	r3, r2
 8008c86:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	68ba      	ldr	r2, [r7, #8]
 8008c8c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	88fa      	ldrh	r2, [r7, #6]
 8008c92:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	88fa      	ldrh	r2, [r7, #6]
 8008c98:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2222      	movs	r2, #34	@ 0x22
 8008ca4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	691b      	ldr	r3, [r3, #16]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d007      	beq.n	8008cc0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	68da      	ldr	r2, [r3, #12]
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008cbe:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	695a      	ldr	r2, [r3, #20]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f042 0201 	orr.w	r2, r2, #1
 8008cce:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	68da      	ldr	r2, [r3, #12]
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f042 0220 	orr.w	r2, r2, #32
 8008cde:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008ce0:	2300      	movs	r3, #0
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3714      	adds	r7, #20
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr

08008cee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008cee:	b480      	push	{r7}
 8008cf0:	b095      	sub	sp, #84	@ 0x54
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	330c      	adds	r3, #12
 8008cfc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d00:	e853 3f00 	ldrex	r3, [r3]
 8008d04:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	330c      	adds	r3, #12
 8008d14:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008d16:	643a      	str	r2, [r7, #64]	@ 0x40
 8008d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d1a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008d1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008d1e:	e841 2300 	strex	r3, r2, [r1]
 8008d22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d1e5      	bne.n	8008cf6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	3314      	adds	r3, #20
 8008d30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d32:	6a3b      	ldr	r3, [r7, #32]
 8008d34:	e853 3f00 	ldrex	r3, [r3]
 8008d38:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d3a:	69fb      	ldr	r3, [r7, #28]
 8008d3c:	f023 0301 	bic.w	r3, r3, #1
 8008d40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	3314      	adds	r3, #20
 8008d48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d52:	e841 2300 	strex	r3, r2, [r1]
 8008d56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d1e5      	bne.n	8008d2a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d119      	bne.n	8008d9a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	330c      	adds	r3, #12
 8008d6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	e853 3f00 	ldrex	r3, [r3]
 8008d74:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	f023 0310 	bic.w	r3, r3, #16
 8008d7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	330c      	adds	r3, #12
 8008d84:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d86:	61ba      	str	r2, [r7, #24]
 8008d88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d8a:	6979      	ldr	r1, [r7, #20]
 8008d8c:	69ba      	ldr	r2, [r7, #24]
 8008d8e:	e841 2300 	strex	r3, r2, [r1]
 8008d92:	613b      	str	r3, [r7, #16]
   return(result);
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d1e5      	bne.n	8008d66 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2220      	movs	r2, #32
 8008d9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2200      	movs	r2, #0
 8008da6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008da8:	bf00      	nop
 8008daa:	3754      	adds	r7, #84	@ 0x54
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dc0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008dce:	68f8      	ldr	r0, [r7, #12]
 8008dd0:	f7ff fee4 	bl	8008b9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008dd4:	bf00      	nop
 8008dd6:	3710      	adds	r7, #16
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b085      	sub	sp, #20
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	2b21      	cmp	r3, #33	@ 0x21
 8008dee:	d13e      	bne.n	8008e6e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008df8:	d114      	bne.n	8008e24 <UART_Transmit_IT+0x48>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	691b      	ldr	r3, [r3, #16]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d110      	bne.n	8008e24 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6a1b      	ldr	r3, [r3, #32]
 8008e06:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	881b      	ldrh	r3, [r3, #0]
 8008e0c:	461a      	mov	r2, r3
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e16:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6a1b      	ldr	r3, [r3, #32]
 8008e1c:	1c9a      	adds	r2, r3, #2
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	621a      	str	r2, [r3, #32]
 8008e22:	e008      	b.n	8008e36 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6a1b      	ldr	r3, [r3, #32]
 8008e28:	1c59      	adds	r1, r3, #1
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	6211      	str	r1, [r2, #32]
 8008e2e:	781a      	ldrb	r2, [r3, #0]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	4619      	mov	r1, r3
 8008e44:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d10f      	bne.n	8008e6a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	68da      	ldr	r2, [r3, #12]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008e58:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	68da      	ldr	r2, [r3, #12]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e68:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	e000      	b.n	8008e70 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008e6e:	2302      	movs	r3, #2
  }
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3714      	adds	r7, #20
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	68da      	ldr	r2, [r3, #12]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e92:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2220      	movs	r2, #32
 8008e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f7ff fe73 	bl	8008b88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008ea2:	2300      	movs	r3, #0
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3708      	adds	r7, #8
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b08c      	sub	sp, #48	@ 0x30
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	2b22      	cmp	r3, #34	@ 0x22
 8008ebe:	f040 80ae 	bne.w	800901e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008eca:	d117      	bne.n	8008efc <UART_Receive_IT+0x50>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	691b      	ldr	r3, [r3, #16]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d113      	bne.n	8008efc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008edc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eea:	b29a      	uxth	r2, r3
 8008eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ef4:	1c9a      	adds	r2, r3, #2
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	629a      	str	r2, [r3, #40]	@ 0x28
 8008efa:	e026      	b.n	8008f4a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008f02:	2300      	movs	r3, #0
 8008f04:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f0e:	d007      	beq.n	8008f20 <UART_Receive_IT+0x74>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	689b      	ldr	r3, [r3, #8]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d10a      	bne.n	8008f2e <UART_Receive_IT+0x82>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	691b      	ldr	r3, [r3, #16]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d106      	bne.n	8008f2e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	b2da      	uxtb	r2, r3
 8008f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f2a:	701a      	strb	r2, [r3, #0]
 8008f2c:	e008      	b.n	8008f40 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f3a:	b2da      	uxtb	r2, r3
 8008f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f3e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f44:	1c5a      	adds	r2, r3, #1
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	3b01      	subs	r3, #1
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	4619      	mov	r1, r3
 8008f58:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d15d      	bne.n	800901a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	68da      	ldr	r2, [r3, #12]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f022 0220 	bic.w	r2, r2, #32
 8008f6c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	68da      	ldr	r2, [r3, #12]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008f7c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	695a      	ldr	r2, [r3, #20]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f022 0201 	bic.w	r2, r2, #1
 8008f8c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2220      	movs	r2, #32
 8008f92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d135      	bne.n	8009010 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	330c      	adds	r3, #12
 8008fb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	e853 3f00 	ldrex	r3, [r3]
 8008fb8:	613b      	str	r3, [r7, #16]
   return(result);
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	f023 0310 	bic.w	r3, r3, #16
 8008fc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	330c      	adds	r3, #12
 8008fc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fca:	623a      	str	r2, [r7, #32]
 8008fcc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fce:	69f9      	ldr	r1, [r7, #28]
 8008fd0:	6a3a      	ldr	r2, [r7, #32]
 8008fd2:	e841 2300 	strex	r3, r2, [r1]
 8008fd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8008fd8:	69bb      	ldr	r3, [r7, #24]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d1e5      	bne.n	8008faa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f003 0310 	and.w	r3, r3, #16
 8008fe8:	2b10      	cmp	r3, #16
 8008fea:	d10a      	bne.n	8009002 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008fec:	2300      	movs	r3, #0
 8008fee:	60fb      	str	r3, [r7, #12]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	60fb      	str	r3, [r7, #12]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	60fb      	str	r3, [r7, #12]
 8009000:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009006:	4619      	mov	r1, r3
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f7ff fdd1 	bl	8008bb0 <HAL_UARTEx_RxEventCallback>
 800900e:	e002      	b.n	8009016 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f7f9 ff7b 	bl	8002f0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009016:	2300      	movs	r3, #0
 8009018:	e002      	b.n	8009020 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800901a:	2300      	movs	r3, #0
 800901c:	e000      	b.n	8009020 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800901e:	2302      	movs	r3, #2
  }
}
 8009020:	4618      	mov	r0, r3
 8009022:	3730      	adds	r7, #48	@ 0x30
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800902c:	b0c0      	sub	sp, #256	@ 0x100
 800902e:	af00      	add	r7, sp, #0
 8009030:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	691b      	ldr	r3, [r3, #16]
 800903c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009044:	68d9      	ldr	r1, [r3, #12]
 8009046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	ea40 0301 	orr.w	r3, r0, r1
 8009050:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009056:	689a      	ldr	r2, [r3, #8]
 8009058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800905c:	691b      	ldr	r3, [r3, #16]
 800905e:	431a      	orrs	r2, r3
 8009060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009064:	695b      	ldr	r3, [r3, #20]
 8009066:	431a      	orrs	r2, r3
 8009068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800906c:	69db      	ldr	r3, [r3, #28]
 800906e:	4313      	orrs	r3, r2
 8009070:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009080:	f021 010c 	bic.w	r1, r1, #12
 8009084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800908e:	430b      	orrs	r3, r1
 8009090:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	695b      	ldr	r3, [r3, #20]
 800909a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800909e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090a2:	6999      	ldr	r1, [r3, #24]
 80090a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090a8:	681a      	ldr	r2, [r3, #0]
 80090aa:	ea40 0301 	orr.w	r3, r0, r1
 80090ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80090b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	4b8f      	ldr	r3, [pc, #572]	@ (80092f4 <UART_SetConfig+0x2cc>)
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d005      	beq.n	80090c8 <UART_SetConfig+0xa0>
 80090bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090c0:	681a      	ldr	r2, [r3, #0]
 80090c2:	4b8d      	ldr	r3, [pc, #564]	@ (80092f8 <UART_SetConfig+0x2d0>)
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d104      	bne.n	80090d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80090c8:	f7fd fab0 	bl	800662c <HAL_RCC_GetPCLK2Freq>
 80090cc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80090d0:	e003      	b.n	80090da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80090d2:	f7fd fa97 	bl	8006604 <HAL_RCC_GetPCLK1Freq>
 80090d6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090de:	69db      	ldr	r3, [r3, #28]
 80090e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090e4:	f040 810c 	bne.w	8009300 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80090e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80090ec:	2200      	movs	r2, #0
 80090ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80090f2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80090f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80090fa:	4622      	mov	r2, r4
 80090fc:	462b      	mov	r3, r5
 80090fe:	1891      	adds	r1, r2, r2
 8009100:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009102:	415b      	adcs	r3, r3
 8009104:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009106:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800910a:	4621      	mov	r1, r4
 800910c:	eb12 0801 	adds.w	r8, r2, r1
 8009110:	4629      	mov	r1, r5
 8009112:	eb43 0901 	adc.w	r9, r3, r1
 8009116:	f04f 0200 	mov.w	r2, #0
 800911a:	f04f 0300 	mov.w	r3, #0
 800911e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009122:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009126:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800912a:	4690      	mov	r8, r2
 800912c:	4699      	mov	r9, r3
 800912e:	4623      	mov	r3, r4
 8009130:	eb18 0303 	adds.w	r3, r8, r3
 8009134:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009138:	462b      	mov	r3, r5
 800913a:	eb49 0303 	adc.w	r3, r9, r3
 800913e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	2200      	movs	r2, #0
 800914a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800914e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009152:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009156:	460b      	mov	r3, r1
 8009158:	18db      	adds	r3, r3, r3
 800915a:	653b      	str	r3, [r7, #80]	@ 0x50
 800915c:	4613      	mov	r3, r2
 800915e:	eb42 0303 	adc.w	r3, r2, r3
 8009162:	657b      	str	r3, [r7, #84]	@ 0x54
 8009164:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009168:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800916c:	f7f7 f846 	bl	80001fc <__aeabi_uldivmod>
 8009170:	4602      	mov	r2, r0
 8009172:	460b      	mov	r3, r1
 8009174:	4b61      	ldr	r3, [pc, #388]	@ (80092fc <UART_SetConfig+0x2d4>)
 8009176:	fba3 2302 	umull	r2, r3, r3, r2
 800917a:	095b      	lsrs	r3, r3, #5
 800917c:	011c      	lsls	r4, r3, #4
 800917e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009182:	2200      	movs	r2, #0
 8009184:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009188:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800918c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009190:	4642      	mov	r2, r8
 8009192:	464b      	mov	r3, r9
 8009194:	1891      	adds	r1, r2, r2
 8009196:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009198:	415b      	adcs	r3, r3
 800919a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800919c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80091a0:	4641      	mov	r1, r8
 80091a2:	eb12 0a01 	adds.w	sl, r2, r1
 80091a6:	4649      	mov	r1, r9
 80091a8:	eb43 0b01 	adc.w	fp, r3, r1
 80091ac:	f04f 0200 	mov.w	r2, #0
 80091b0:	f04f 0300 	mov.w	r3, #0
 80091b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80091b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80091bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80091c0:	4692      	mov	sl, r2
 80091c2:	469b      	mov	fp, r3
 80091c4:	4643      	mov	r3, r8
 80091c6:	eb1a 0303 	adds.w	r3, sl, r3
 80091ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80091ce:	464b      	mov	r3, r9
 80091d0:	eb4b 0303 	adc.w	r3, fp, r3
 80091d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80091d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	2200      	movs	r2, #0
 80091e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80091e4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80091e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80091ec:	460b      	mov	r3, r1
 80091ee:	18db      	adds	r3, r3, r3
 80091f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80091f2:	4613      	mov	r3, r2
 80091f4:	eb42 0303 	adc.w	r3, r2, r3
 80091f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80091fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80091fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009202:	f7f6 fffb 	bl	80001fc <__aeabi_uldivmod>
 8009206:	4602      	mov	r2, r0
 8009208:	460b      	mov	r3, r1
 800920a:	4611      	mov	r1, r2
 800920c:	4b3b      	ldr	r3, [pc, #236]	@ (80092fc <UART_SetConfig+0x2d4>)
 800920e:	fba3 2301 	umull	r2, r3, r3, r1
 8009212:	095b      	lsrs	r3, r3, #5
 8009214:	2264      	movs	r2, #100	@ 0x64
 8009216:	fb02 f303 	mul.w	r3, r2, r3
 800921a:	1acb      	subs	r3, r1, r3
 800921c:	00db      	lsls	r3, r3, #3
 800921e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009222:	4b36      	ldr	r3, [pc, #216]	@ (80092fc <UART_SetConfig+0x2d4>)
 8009224:	fba3 2302 	umull	r2, r3, r3, r2
 8009228:	095b      	lsrs	r3, r3, #5
 800922a:	005b      	lsls	r3, r3, #1
 800922c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009230:	441c      	add	r4, r3
 8009232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009236:	2200      	movs	r2, #0
 8009238:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800923c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009240:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009244:	4642      	mov	r2, r8
 8009246:	464b      	mov	r3, r9
 8009248:	1891      	adds	r1, r2, r2
 800924a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800924c:	415b      	adcs	r3, r3
 800924e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009250:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009254:	4641      	mov	r1, r8
 8009256:	1851      	adds	r1, r2, r1
 8009258:	6339      	str	r1, [r7, #48]	@ 0x30
 800925a:	4649      	mov	r1, r9
 800925c:	414b      	adcs	r3, r1
 800925e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009260:	f04f 0200 	mov.w	r2, #0
 8009264:	f04f 0300 	mov.w	r3, #0
 8009268:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800926c:	4659      	mov	r1, fp
 800926e:	00cb      	lsls	r3, r1, #3
 8009270:	4651      	mov	r1, sl
 8009272:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009276:	4651      	mov	r1, sl
 8009278:	00ca      	lsls	r2, r1, #3
 800927a:	4610      	mov	r0, r2
 800927c:	4619      	mov	r1, r3
 800927e:	4603      	mov	r3, r0
 8009280:	4642      	mov	r2, r8
 8009282:	189b      	adds	r3, r3, r2
 8009284:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009288:	464b      	mov	r3, r9
 800928a:	460a      	mov	r2, r1
 800928c:	eb42 0303 	adc.w	r3, r2, r3
 8009290:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	2200      	movs	r2, #0
 800929c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80092a0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80092a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80092a8:	460b      	mov	r3, r1
 80092aa:	18db      	adds	r3, r3, r3
 80092ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80092ae:	4613      	mov	r3, r2
 80092b0:	eb42 0303 	adc.w	r3, r2, r3
 80092b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80092b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80092ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80092be:	f7f6 ff9d 	bl	80001fc <__aeabi_uldivmod>
 80092c2:	4602      	mov	r2, r0
 80092c4:	460b      	mov	r3, r1
 80092c6:	4b0d      	ldr	r3, [pc, #52]	@ (80092fc <UART_SetConfig+0x2d4>)
 80092c8:	fba3 1302 	umull	r1, r3, r3, r2
 80092cc:	095b      	lsrs	r3, r3, #5
 80092ce:	2164      	movs	r1, #100	@ 0x64
 80092d0:	fb01 f303 	mul.w	r3, r1, r3
 80092d4:	1ad3      	subs	r3, r2, r3
 80092d6:	00db      	lsls	r3, r3, #3
 80092d8:	3332      	adds	r3, #50	@ 0x32
 80092da:	4a08      	ldr	r2, [pc, #32]	@ (80092fc <UART_SetConfig+0x2d4>)
 80092dc:	fba2 2303 	umull	r2, r3, r2, r3
 80092e0:	095b      	lsrs	r3, r3, #5
 80092e2:	f003 0207 	and.w	r2, r3, #7
 80092e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4422      	add	r2, r4
 80092ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80092f0:	e106      	b.n	8009500 <UART_SetConfig+0x4d8>
 80092f2:	bf00      	nop
 80092f4:	40011000 	.word	0x40011000
 80092f8:	40011400 	.word	0x40011400
 80092fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009300:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009304:	2200      	movs	r2, #0
 8009306:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800930a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800930e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009312:	4642      	mov	r2, r8
 8009314:	464b      	mov	r3, r9
 8009316:	1891      	adds	r1, r2, r2
 8009318:	6239      	str	r1, [r7, #32]
 800931a:	415b      	adcs	r3, r3
 800931c:	627b      	str	r3, [r7, #36]	@ 0x24
 800931e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009322:	4641      	mov	r1, r8
 8009324:	1854      	adds	r4, r2, r1
 8009326:	4649      	mov	r1, r9
 8009328:	eb43 0501 	adc.w	r5, r3, r1
 800932c:	f04f 0200 	mov.w	r2, #0
 8009330:	f04f 0300 	mov.w	r3, #0
 8009334:	00eb      	lsls	r3, r5, #3
 8009336:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800933a:	00e2      	lsls	r2, r4, #3
 800933c:	4614      	mov	r4, r2
 800933e:	461d      	mov	r5, r3
 8009340:	4643      	mov	r3, r8
 8009342:	18e3      	adds	r3, r4, r3
 8009344:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009348:	464b      	mov	r3, r9
 800934a:	eb45 0303 	adc.w	r3, r5, r3
 800934e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	2200      	movs	r2, #0
 800935a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800935e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009362:	f04f 0200 	mov.w	r2, #0
 8009366:	f04f 0300 	mov.w	r3, #0
 800936a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800936e:	4629      	mov	r1, r5
 8009370:	008b      	lsls	r3, r1, #2
 8009372:	4621      	mov	r1, r4
 8009374:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009378:	4621      	mov	r1, r4
 800937a:	008a      	lsls	r2, r1, #2
 800937c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009380:	f7f6 ff3c 	bl	80001fc <__aeabi_uldivmod>
 8009384:	4602      	mov	r2, r0
 8009386:	460b      	mov	r3, r1
 8009388:	4b60      	ldr	r3, [pc, #384]	@ (800950c <UART_SetConfig+0x4e4>)
 800938a:	fba3 2302 	umull	r2, r3, r3, r2
 800938e:	095b      	lsrs	r3, r3, #5
 8009390:	011c      	lsls	r4, r3, #4
 8009392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009396:	2200      	movs	r2, #0
 8009398:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800939c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80093a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80093a4:	4642      	mov	r2, r8
 80093a6:	464b      	mov	r3, r9
 80093a8:	1891      	adds	r1, r2, r2
 80093aa:	61b9      	str	r1, [r7, #24]
 80093ac:	415b      	adcs	r3, r3
 80093ae:	61fb      	str	r3, [r7, #28]
 80093b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80093b4:	4641      	mov	r1, r8
 80093b6:	1851      	adds	r1, r2, r1
 80093b8:	6139      	str	r1, [r7, #16]
 80093ba:	4649      	mov	r1, r9
 80093bc:	414b      	adcs	r3, r1
 80093be:	617b      	str	r3, [r7, #20]
 80093c0:	f04f 0200 	mov.w	r2, #0
 80093c4:	f04f 0300 	mov.w	r3, #0
 80093c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80093cc:	4659      	mov	r1, fp
 80093ce:	00cb      	lsls	r3, r1, #3
 80093d0:	4651      	mov	r1, sl
 80093d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80093d6:	4651      	mov	r1, sl
 80093d8:	00ca      	lsls	r2, r1, #3
 80093da:	4610      	mov	r0, r2
 80093dc:	4619      	mov	r1, r3
 80093de:	4603      	mov	r3, r0
 80093e0:	4642      	mov	r2, r8
 80093e2:	189b      	adds	r3, r3, r2
 80093e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80093e8:	464b      	mov	r3, r9
 80093ea:	460a      	mov	r2, r1
 80093ec:	eb42 0303 	adc.w	r3, r2, r3
 80093f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80093f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	2200      	movs	r2, #0
 80093fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80093fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009400:	f04f 0200 	mov.w	r2, #0
 8009404:	f04f 0300 	mov.w	r3, #0
 8009408:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800940c:	4649      	mov	r1, r9
 800940e:	008b      	lsls	r3, r1, #2
 8009410:	4641      	mov	r1, r8
 8009412:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009416:	4641      	mov	r1, r8
 8009418:	008a      	lsls	r2, r1, #2
 800941a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800941e:	f7f6 feed 	bl	80001fc <__aeabi_uldivmod>
 8009422:	4602      	mov	r2, r0
 8009424:	460b      	mov	r3, r1
 8009426:	4611      	mov	r1, r2
 8009428:	4b38      	ldr	r3, [pc, #224]	@ (800950c <UART_SetConfig+0x4e4>)
 800942a:	fba3 2301 	umull	r2, r3, r3, r1
 800942e:	095b      	lsrs	r3, r3, #5
 8009430:	2264      	movs	r2, #100	@ 0x64
 8009432:	fb02 f303 	mul.w	r3, r2, r3
 8009436:	1acb      	subs	r3, r1, r3
 8009438:	011b      	lsls	r3, r3, #4
 800943a:	3332      	adds	r3, #50	@ 0x32
 800943c:	4a33      	ldr	r2, [pc, #204]	@ (800950c <UART_SetConfig+0x4e4>)
 800943e:	fba2 2303 	umull	r2, r3, r2, r3
 8009442:	095b      	lsrs	r3, r3, #5
 8009444:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009448:	441c      	add	r4, r3
 800944a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800944e:	2200      	movs	r2, #0
 8009450:	673b      	str	r3, [r7, #112]	@ 0x70
 8009452:	677a      	str	r2, [r7, #116]	@ 0x74
 8009454:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009458:	4642      	mov	r2, r8
 800945a:	464b      	mov	r3, r9
 800945c:	1891      	adds	r1, r2, r2
 800945e:	60b9      	str	r1, [r7, #8]
 8009460:	415b      	adcs	r3, r3
 8009462:	60fb      	str	r3, [r7, #12]
 8009464:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009468:	4641      	mov	r1, r8
 800946a:	1851      	adds	r1, r2, r1
 800946c:	6039      	str	r1, [r7, #0]
 800946e:	4649      	mov	r1, r9
 8009470:	414b      	adcs	r3, r1
 8009472:	607b      	str	r3, [r7, #4]
 8009474:	f04f 0200 	mov.w	r2, #0
 8009478:	f04f 0300 	mov.w	r3, #0
 800947c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009480:	4659      	mov	r1, fp
 8009482:	00cb      	lsls	r3, r1, #3
 8009484:	4651      	mov	r1, sl
 8009486:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800948a:	4651      	mov	r1, sl
 800948c:	00ca      	lsls	r2, r1, #3
 800948e:	4610      	mov	r0, r2
 8009490:	4619      	mov	r1, r3
 8009492:	4603      	mov	r3, r0
 8009494:	4642      	mov	r2, r8
 8009496:	189b      	adds	r3, r3, r2
 8009498:	66bb      	str	r3, [r7, #104]	@ 0x68
 800949a:	464b      	mov	r3, r9
 800949c:	460a      	mov	r2, r1
 800949e:	eb42 0303 	adc.w	r3, r2, r3
 80094a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80094a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	2200      	movs	r2, #0
 80094ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80094ae:	667a      	str	r2, [r7, #100]	@ 0x64
 80094b0:	f04f 0200 	mov.w	r2, #0
 80094b4:	f04f 0300 	mov.w	r3, #0
 80094b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80094bc:	4649      	mov	r1, r9
 80094be:	008b      	lsls	r3, r1, #2
 80094c0:	4641      	mov	r1, r8
 80094c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094c6:	4641      	mov	r1, r8
 80094c8:	008a      	lsls	r2, r1, #2
 80094ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80094ce:	f7f6 fe95 	bl	80001fc <__aeabi_uldivmod>
 80094d2:	4602      	mov	r2, r0
 80094d4:	460b      	mov	r3, r1
 80094d6:	4b0d      	ldr	r3, [pc, #52]	@ (800950c <UART_SetConfig+0x4e4>)
 80094d8:	fba3 1302 	umull	r1, r3, r3, r2
 80094dc:	095b      	lsrs	r3, r3, #5
 80094de:	2164      	movs	r1, #100	@ 0x64
 80094e0:	fb01 f303 	mul.w	r3, r1, r3
 80094e4:	1ad3      	subs	r3, r2, r3
 80094e6:	011b      	lsls	r3, r3, #4
 80094e8:	3332      	adds	r3, #50	@ 0x32
 80094ea:	4a08      	ldr	r2, [pc, #32]	@ (800950c <UART_SetConfig+0x4e4>)
 80094ec:	fba2 2303 	umull	r2, r3, r2, r3
 80094f0:	095b      	lsrs	r3, r3, #5
 80094f2:	f003 020f 	and.w	r2, r3, #15
 80094f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4422      	add	r2, r4
 80094fe:	609a      	str	r2, [r3, #8]
}
 8009500:	bf00      	nop
 8009502:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009506:	46bd      	mov	sp, r7
 8009508:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800950c:	51eb851f 	.word	0x51eb851f

08009510 <memset>:
 8009510:	4402      	add	r2, r0
 8009512:	4603      	mov	r3, r0
 8009514:	4293      	cmp	r3, r2
 8009516:	d100      	bne.n	800951a <memset+0xa>
 8009518:	4770      	bx	lr
 800951a:	f803 1b01 	strb.w	r1, [r3], #1
 800951e:	e7f9      	b.n	8009514 <memset+0x4>

08009520 <__libc_init_array>:
 8009520:	b570      	push	{r4, r5, r6, lr}
 8009522:	4d0d      	ldr	r5, [pc, #52]	@ (8009558 <__libc_init_array+0x38>)
 8009524:	4c0d      	ldr	r4, [pc, #52]	@ (800955c <__libc_init_array+0x3c>)
 8009526:	1b64      	subs	r4, r4, r5
 8009528:	10a4      	asrs	r4, r4, #2
 800952a:	2600      	movs	r6, #0
 800952c:	42a6      	cmp	r6, r4
 800952e:	d109      	bne.n	8009544 <__libc_init_array+0x24>
 8009530:	4d0b      	ldr	r5, [pc, #44]	@ (8009560 <__libc_init_array+0x40>)
 8009532:	4c0c      	ldr	r4, [pc, #48]	@ (8009564 <__libc_init_array+0x44>)
 8009534:	f000 f818 	bl	8009568 <_init>
 8009538:	1b64      	subs	r4, r4, r5
 800953a:	10a4      	asrs	r4, r4, #2
 800953c:	2600      	movs	r6, #0
 800953e:	42a6      	cmp	r6, r4
 8009540:	d105      	bne.n	800954e <__libc_init_array+0x2e>
 8009542:	bd70      	pop	{r4, r5, r6, pc}
 8009544:	f855 3b04 	ldr.w	r3, [r5], #4
 8009548:	4798      	blx	r3
 800954a:	3601      	adds	r6, #1
 800954c:	e7ee      	b.n	800952c <__libc_init_array+0xc>
 800954e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009552:	4798      	blx	r3
 8009554:	3601      	adds	r6, #1
 8009556:	e7f2      	b.n	800953e <__libc_init_array+0x1e>
 8009558:	08009640 	.word	0x08009640
 800955c:	08009640 	.word	0x08009640
 8009560:	08009640 	.word	0x08009640
 8009564:	08009644 	.word	0x08009644

08009568 <_init>:
 8009568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800956a:	bf00      	nop
 800956c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800956e:	bc08      	pop	{r3}
 8009570:	469e      	mov	lr, r3
 8009572:	4770      	bx	lr

08009574 <_fini>:
 8009574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009576:	bf00      	nop
 8009578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800957a:	bc08      	pop	{r3}
 800957c:	469e      	mov	lr, r3
 800957e:	4770      	bx	lr
