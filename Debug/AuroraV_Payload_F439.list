
AuroraV_Payload_F439.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006934  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08006ae0  08006ae0  00016ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b68  08006b68  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08006b68  08006b68  00016b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b70  08006b70  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b70  08006b70  00016b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b74  08006b74  00016b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08006b78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
 10 .bss          000002f0  20000020  20000020  00020020  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000310  20000310  00020020  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 14 .debug_info   000174c1  00000000  00000000  00020093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003286  00000000  00000000  00037554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000013a8  00000000  00000000  0003a7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f5d  00000000  00000000  0003bb88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026c37  00000000  00000000  0003cae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019941  00000000  00000000  0006371c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e6db3  00000000  00000000  0007d05d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005268  00000000  00000000  00163e10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  00169078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000020 	.word	0x20000020
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006ac8 	.word	0x08006ac8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000024 	.word	0x20000024
 80001e8:	08006ac8 	.word	0x08006ac8

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <init_accel>:
uint8_t OUT_Y_L = 0x2A;
uint8_t OUT_Y_H = 0x2B;
uint8_t OUT_Z_L = 0x2C;
uint8_t OUT_Z_H = 0x2D;

HAL_StatusTypeDef init_accel(I2C_HandleTypeDef* hi2c) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af02      	add	r7, sp, #8
 80004fe:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;
	uint8_t control_reg = 0x00;
 8000500:	2300      	movs	r3, #0
 8000502:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Master_Transmit(hi2c, H3LIS331HH_ADDR, &CTRL_REG1, 1, 100);
 8000504:	2332      	movs	r3, #50	; 0x32
 8000506:	b299      	uxth	r1, r3
 8000508:	2364      	movs	r3, #100	; 0x64
 800050a:	9300      	str	r3, [sp, #0]
 800050c:	2301      	movs	r3, #1
 800050e:	4a2b      	ldr	r2, [pc, #172]	; (80005bc <init_accel+0xc4>)
 8000510:	6878      	ldr	r0, [r7, #4]
 8000512:	f002 f809 	bl	8002528 <HAL_I2C_Master_Transmit>
 8000516:	4603      	mov	r3, r0
 8000518:	73fb      	strb	r3, [r7, #15]
	ret = HAL_I2C_Master_Receive(hi2c, H3LIS331HH_ADDR, &control_reg, 1, 100);
 800051a:	2332      	movs	r3, #50	; 0x32
 800051c:	b299      	uxth	r1, r3
 800051e:	f107 020e 	add.w	r2, r7, #14
 8000522:	2364      	movs	r3, #100	; 0x64
 8000524:	9300      	str	r3, [sp, #0]
 8000526:	2301      	movs	r3, #1
 8000528:	6878      	ldr	r0, [r7, #4]
 800052a:	f002 f8fb 	bl	8002724 <HAL_I2C_Master_Receive>
 800052e:	4603      	mov	r3, r0
 8000530:	73fb      	strb	r3, [r7, #15]

	control_reg = control_reg | MASK_1kHz;
 8000532:	7bbb      	ldrb	r3, [r7, #14]
 8000534:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000538:	b2db      	uxtb	r3, r3
 800053a:	73bb      	strb	r3, [r7, #14]
	uint8_t data[2] = {CTRL_REG1, control_reg};
 800053c:	4b1f      	ldr	r3, [pc, #124]	; (80005bc <init_accel+0xc4>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	733b      	strb	r3, [r7, #12]
 8000542:	7bbb      	ldrb	r3, [r7, #14]
 8000544:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(hi2c, H3LIS331HH_ADDR, data, 2, 100);
 8000546:	2332      	movs	r3, #50	; 0x32
 8000548:	b299      	uxth	r1, r3
 800054a:	f107 020c 	add.w	r2, r7, #12
 800054e:	2364      	movs	r3, #100	; 0x64
 8000550:	9300      	str	r3, [sp, #0]
 8000552:	2302      	movs	r3, #2
 8000554:	6878      	ldr	r0, [r7, #4]
 8000556:	f001 ffe7 	bl	8002528 <HAL_I2C_Master_Transmit>
 800055a:	4603      	mov	r3, r0
 800055c:	73fb      	strb	r3, [r7, #15]

	ret = HAL_I2C_Master_Transmit(hi2c, H3LIS331HH_ADDR, &CTRL_REG4, 1, 100);
 800055e:	2332      	movs	r3, #50	; 0x32
 8000560:	b299      	uxth	r1, r3
 8000562:	2364      	movs	r3, #100	; 0x64
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	2301      	movs	r3, #1
 8000568:	4a15      	ldr	r2, [pc, #84]	; (80005c0 <init_accel+0xc8>)
 800056a:	6878      	ldr	r0, [r7, #4]
 800056c:	f001 ffdc 	bl	8002528 <HAL_I2C_Master_Transmit>
 8000570:	4603      	mov	r3, r0
 8000572:	73fb      	strb	r3, [r7, #15]
	ret = HAL_I2C_Master_Receive(hi2c, H3LIS331HH_ADDR, &control_reg, 1, 100);
 8000574:	2332      	movs	r3, #50	; 0x32
 8000576:	b299      	uxth	r1, r3
 8000578:	f107 020e 	add.w	r2, r7, #14
 800057c:	2364      	movs	r3, #100	; 0x64
 800057e:	9300      	str	r3, [sp, #0]
 8000580:	2301      	movs	r3, #1
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f002 f8ce 	bl	8002724 <HAL_I2C_Master_Receive>
 8000588:	4603      	mov	r3, r0
 800058a:	73fb      	strb	r3, [r7, #15]

	control_reg = control_reg | MASK_100G;
 800058c:	7bbb      	ldrb	r3, [r7, #14]
 800058e:	73bb      	strb	r3, [r7, #14]
	uint8_t data2[2] = {CTRL_REG4, control_reg};
 8000590:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <init_accel+0xc8>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	723b      	strb	r3, [r7, #8]
 8000596:	7bbb      	ldrb	r3, [r7, #14]
 8000598:	727b      	strb	r3, [r7, #9]
	ret = HAL_I2C_Master_Transmit(hi2c, H3LIS331HH_ADDR, data2, 2, 100);
 800059a:	2332      	movs	r3, #50	; 0x32
 800059c:	b299      	uxth	r1, r3
 800059e:	f107 0208 	add.w	r2, r7, #8
 80005a2:	2364      	movs	r3, #100	; 0x64
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	2302      	movs	r3, #2
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f001 ffbd 	bl	8002528 <HAL_I2C_Master_Transmit>
 80005ae:	4603      	mov	r3, r0
 80005b0:	73fb      	strb	r3, [r7, #15]

	return ret;
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3710      	adds	r7, #16
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000000 	.word	0x20000000
 80005c0:	20000001 	.word	0x20000001

080005c4 <readAccelerometer>:

HAL_StatusTypeDef readAccelerometer(uint8_t values[6], I2C_HandleTypeDef* hi2c) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b088      	sub	sp, #32
 80005c8:	af02      	add	r7, sp, #8
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
	uint8_t buf_x[2];
	uint8_t buf_y[2];
	uint8_t buf_z[2];

	// Read X-Axis
	ret = HAL_I2C_Master_Transmit(hi2c, H3LIS331HH_ADDR, &OUT_X_L, 1, 100);
 80005ce:	2332      	movs	r3, #50	; 0x32
 80005d0:	b299      	uxth	r1, r3
 80005d2:	2364      	movs	r3, #100	; 0x64
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	2301      	movs	r3, #1
 80005d8:	4a59      	ldr	r2, [pc, #356]	; (8000740 <readAccelerometer+0x17c>)
 80005da:	6838      	ldr	r0, [r7, #0]
 80005dc:	f001 ffa4 	bl	8002528 <HAL_I2C_Master_Transmit>
 80005e0:	4603      	mov	r3, r0
 80005e2:	74fb      	strb	r3, [r7, #19]
	ret = HAL_I2C_Master_Receive(hi2c, H3LIS331HH_ADDR, &buf_x[0], 1, 100);
 80005e4:	2332      	movs	r3, #50	; 0x32
 80005e6:	b299      	uxth	r1, r3
 80005e8:	f107 0210 	add.w	r2, r7, #16
 80005ec:	2364      	movs	r3, #100	; 0x64
 80005ee:	9300      	str	r3, [sp, #0]
 80005f0:	2301      	movs	r3, #1
 80005f2:	6838      	ldr	r0, [r7, #0]
 80005f4:	f002 f896 	bl	8002724 <HAL_I2C_Master_Receive>
 80005f8:	4603      	mov	r3, r0
 80005fa:	74fb      	strb	r3, [r7, #19]
	ret = HAL_I2C_Master_Transmit(hi2c, H3LIS331HH_ADDR, &OUT_X_H, 1, 100);
 80005fc:	2332      	movs	r3, #50	; 0x32
 80005fe:	b299      	uxth	r1, r3
 8000600:	2364      	movs	r3, #100	; 0x64
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	2301      	movs	r3, #1
 8000606:	4a4f      	ldr	r2, [pc, #316]	; (8000744 <readAccelerometer+0x180>)
 8000608:	6838      	ldr	r0, [r7, #0]
 800060a:	f001 ff8d 	bl	8002528 <HAL_I2C_Master_Transmit>
 800060e:	4603      	mov	r3, r0
 8000610:	74fb      	strb	r3, [r7, #19]
	ret = HAL_I2C_Master_Receive(hi2c, H3LIS331HH_ADDR, &buf_x[1], 1, 100);
 8000612:	2332      	movs	r3, #50	; 0x32
 8000614:	b299      	uxth	r1, r3
 8000616:	f107 0310 	add.w	r3, r7, #16
 800061a:	1c5a      	adds	r2, r3, #1
 800061c:	2364      	movs	r3, #100	; 0x64
 800061e:	9300      	str	r3, [sp, #0]
 8000620:	2301      	movs	r3, #1
 8000622:	6838      	ldr	r0, [r7, #0]
 8000624:	f002 f87e 	bl	8002724 <HAL_I2C_Master_Receive>
 8000628:	4603      	mov	r3, r0
 800062a:	74fb      	strb	r3, [r7, #19]

	// Read Y-Axis
	ret = HAL_I2C_Master_Transmit(hi2c, H3LIS331HH_ADDR, &OUT_Y_L, 1, 100);
 800062c:	2332      	movs	r3, #50	; 0x32
 800062e:	b299      	uxth	r1, r3
 8000630:	2364      	movs	r3, #100	; 0x64
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	2301      	movs	r3, #1
 8000636:	4a44      	ldr	r2, [pc, #272]	; (8000748 <readAccelerometer+0x184>)
 8000638:	6838      	ldr	r0, [r7, #0]
 800063a:	f001 ff75 	bl	8002528 <HAL_I2C_Master_Transmit>
 800063e:	4603      	mov	r3, r0
 8000640:	74fb      	strb	r3, [r7, #19]
	ret = HAL_I2C_Master_Receive(hi2c, H3LIS331HH_ADDR, &buf_y[0], 1, 100);
 8000642:	2332      	movs	r3, #50	; 0x32
 8000644:	b299      	uxth	r1, r3
 8000646:	f107 020c 	add.w	r2, r7, #12
 800064a:	2364      	movs	r3, #100	; 0x64
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	2301      	movs	r3, #1
 8000650:	6838      	ldr	r0, [r7, #0]
 8000652:	f002 f867 	bl	8002724 <HAL_I2C_Master_Receive>
 8000656:	4603      	mov	r3, r0
 8000658:	74fb      	strb	r3, [r7, #19]
	ret = HAL_I2C_Master_Transmit(hi2c, H3LIS331HH_ADDR, &OUT_Y_H, 1, 100);
 800065a:	2332      	movs	r3, #50	; 0x32
 800065c:	b299      	uxth	r1, r3
 800065e:	2364      	movs	r3, #100	; 0x64
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	2301      	movs	r3, #1
 8000664:	4a39      	ldr	r2, [pc, #228]	; (800074c <readAccelerometer+0x188>)
 8000666:	6838      	ldr	r0, [r7, #0]
 8000668:	f001 ff5e 	bl	8002528 <HAL_I2C_Master_Transmit>
 800066c:	4603      	mov	r3, r0
 800066e:	74fb      	strb	r3, [r7, #19]
	ret = HAL_I2C_Master_Receive(hi2c, H3LIS331HH_ADDR, &buf_y[1], 1, 100);
 8000670:	2332      	movs	r3, #50	; 0x32
 8000672:	b299      	uxth	r1, r3
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	1c5a      	adds	r2, r3, #1
 800067a:	2364      	movs	r3, #100	; 0x64
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	2301      	movs	r3, #1
 8000680:	6838      	ldr	r0, [r7, #0]
 8000682:	f002 f84f 	bl	8002724 <HAL_I2C_Master_Receive>
 8000686:	4603      	mov	r3, r0
 8000688:	74fb      	strb	r3, [r7, #19]

	// Read Z-Axis
	ret = HAL_I2C_Master_Transmit(hi2c, H3LIS331HH_ADDR, &OUT_Z_L, 1, 100);
 800068a:	2332      	movs	r3, #50	; 0x32
 800068c:	b299      	uxth	r1, r3
 800068e:	2364      	movs	r3, #100	; 0x64
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2301      	movs	r3, #1
 8000694:	4a2e      	ldr	r2, [pc, #184]	; (8000750 <readAccelerometer+0x18c>)
 8000696:	6838      	ldr	r0, [r7, #0]
 8000698:	f001 ff46 	bl	8002528 <HAL_I2C_Master_Transmit>
 800069c:	4603      	mov	r3, r0
 800069e:	74fb      	strb	r3, [r7, #19]
	ret = HAL_I2C_Master_Receive(hi2c, H3LIS331HH_ADDR, &buf_z[0], 1, 100);
 80006a0:	2332      	movs	r3, #50	; 0x32
 80006a2:	b299      	uxth	r1, r3
 80006a4:	f107 0208 	add.w	r2, r7, #8
 80006a8:	2364      	movs	r3, #100	; 0x64
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	2301      	movs	r3, #1
 80006ae:	6838      	ldr	r0, [r7, #0]
 80006b0:	f002 f838 	bl	8002724 <HAL_I2C_Master_Receive>
 80006b4:	4603      	mov	r3, r0
 80006b6:	74fb      	strb	r3, [r7, #19]
	ret = HAL_I2C_Master_Transmit(hi2c, H3LIS331HH_ADDR, &OUT_Z_H, 1, 100);
 80006b8:	2332      	movs	r3, #50	; 0x32
 80006ba:	b299      	uxth	r1, r3
 80006bc:	2364      	movs	r3, #100	; 0x64
 80006be:	9300      	str	r3, [sp, #0]
 80006c0:	2301      	movs	r3, #1
 80006c2:	4a24      	ldr	r2, [pc, #144]	; (8000754 <readAccelerometer+0x190>)
 80006c4:	6838      	ldr	r0, [r7, #0]
 80006c6:	f001 ff2f 	bl	8002528 <HAL_I2C_Master_Transmit>
 80006ca:	4603      	mov	r3, r0
 80006cc:	74fb      	strb	r3, [r7, #19]
	ret = HAL_I2C_Master_Receive(hi2c, H3LIS331HH_ADDR, &buf_z[1], 1, 100);
 80006ce:	2332      	movs	r3, #50	; 0x32
 80006d0:	b299      	uxth	r1, r3
 80006d2:	f107 0308 	add.w	r3, r7, #8
 80006d6:	1c5a      	adds	r2, r3, #1
 80006d8:	2364      	movs	r3, #100	; 0x64
 80006da:	9300      	str	r3, [sp, #0]
 80006dc:	2301      	movs	r3, #1
 80006de:	6838      	ldr	r0, [r7, #0]
 80006e0:	f002 f820 	bl	8002724 <HAL_I2C_Master_Receive>
 80006e4:	4603      	mov	r3, r0
 80006e6:	74fb      	strb	r3, [r7, #19]


	for (int i = 0; i < 2; i++) {
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
 80006ec:	e01f      	b.n	800072e <readAccelerometer+0x16a>
		values[i] = buf_x[i];
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	687a      	ldr	r2, [r7, #4]
 80006f2:	4413      	add	r3, r2
 80006f4:	f107 0110 	add.w	r1, r7, #16
 80006f8:	697a      	ldr	r2, [r7, #20]
 80006fa:	440a      	add	r2, r1
 80006fc:	7812      	ldrb	r2, [r2, #0]
 80006fe:	701a      	strb	r2, [r3, #0]
		values[i+2] = buf_y[i];
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	3302      	adds	r3, #2
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	4413      	add	r3, r2
 8000708:	f107 010c 	add.w	r1, r7, #12
 800070c:	697a      	ldr	r2, [r7, #20]
 800070e:	440a      	add	r2, r1
 8000710:	7812      	ldrb	r2, [r2, #0]
 8000712:	701a      	strb	r2, [r3, #0]
		values[i+4] = buf_z[i];
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	3304      	adds	r3, #4
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	4413      	add	r3, r2
 800071c:	f107 0108 	add.w	r1, r7, #8
 8000720:	697a      	ldr	r2, [r7, #20]
 8000722:	440a      	add	r2, r1
 8000724:	7812      	ldrb	r2, [r2, #0]
 8000726:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 2; i++) {
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	3301      	adds	r3, #1
 800072c:	617b      	str	r3, [r7, #20]
 800072e:	697b      	ldr	r3, [r7, #20]
 8000730:	2b01      	cmp	r3, #1
 8000732:	dddc      	ble.n	80006ee <readAccelerometer+0x12a>
	}

	return ret;
 8000734:	7cfb      	ldrb	r3, [r7, #19]
}
 8000736:	4618      	mov	r0, r3
 8000738:	3718      	adds	r7, #24
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000002 	.word	0x20000002
 8000744:	20000003 	.word	0x20000003
 8000748:	20000004 	.word	0x20000004
 800074c:	20000005 	.word	0x20000005
 8000750:	20000006 	.word	0x20000006
 8000754:	20000007 	.word	0x20000007

08000758 <readAccel_ctrl_rg1>:

uint8_t readAccel_ctrl_rg1(I2C_HandleTypeDef* hi2c) {
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af02      	add	r7, sp, #8
 800075e:	6078      	str	r0, [r7, #4]
	uint8_t ctrl = 0x00;
 8000760:	2300      	movs	r3, #0
 8000762:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Master_Transmit(hi2c, H3LIS331HH_ADDR, &CTRL_REG1, 1, 100);
 8000764:	2332      	movs	r3, #50	; 0x32
 8000766:	b299      	uxth	r1, r3
 8000768:	2364      	movs	r3, #100	; 0x64
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	2301      	movs	r3, #1
 800076e:	4a09      	ldr	r2, [pc, #36]	; (8000794 <readAccel_ctrl_rg1+0x3c>)
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f001 fed9 	bl	8002528 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, H3LIS331HH_ADDR, &ctrl, 1, 100);
 8000776:	2332      	movs	r3, #50	; 0x32
 8000778:	b299      	uxth	r1, r3
 800077a:	f107 020f 	add.w	r2, r7, #15
 800077e:	2364      	movs	r3, #100	; 0x64
 8000780:	9300      	str	r3, [sp, #0]
 8000782:	2301      	movs	r3, #1
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f001 ffcd 	bl	8002724 <HAL_I2C_Master_Receive>

	return ctrl;
 800078a:	7bfb      	ldrb	r3, [r7, #15]
}
 800078c:	4618      	mov	r0, r3
 800078e:	3710      	adds	r7, #16
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000000 	.word	0x20000000

08000798 <init_bme280>:
uint8_t OUT_TEMP_H 			= 0xFA;
uint8_t OUT_HUM_L 			= 0xFE;
uint8_t OUT_HUM_H 			= 0xFD;


HAL_StatusTypeDef init_bme280(I2C_HandleTypeDef* hi2c) {
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_OK;
 80007a0:	2300      	movs	r3, #0
 80007a2:	73fb      	strb	r3, [r7, #15]
//
//	control_reg = control_reg | MASK_100G;
//	uint8_t data2[2] = {CTRL_REG4, control_reg};
//	ret = HAL_I2C_Master_Transmit(hi2c, BME280_ADDR, data2, 2, 100);

	return ret;
 80007a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3714      	adds	r7, #20
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
	...

080007b4 <readBME280_id_reg>:
//	}

	return ret;
}

uint8_t readBME280_id_reg(I2C_HandleTypeDef* hi2c) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af02      	add	r7, sp, #8
 80007ba:	6078      	str	r0, [r7, #4]
	uint8_t ctrl = 0x00;
 80007bc:	2300      	movs	r3, #0
 80007be:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Master_Transmit(hi2c, (BME280_ADDR << 1) | 0x00, &ID_REG, 1, 100);
 80007c0:	2376      	movs	r3, #118	; 0x76
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	b299      	uxth	r1, r3
 80007c8:	2364      	movs	r3, #100	; 0x64
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	2301      	movs	r3, #1
 80007ce:	4a0c      	ldr	r2, [pc, #48]	; (8000800 <readBME280_id_reg+0x4c>)
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f001 fea9 	bl	8002528 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, (BME280_ADDR << 1) | 0x01, &ctrl, 1, 100);
 80007d6:	2376      	movs	r3, #118	; 0x76
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	b21b      	sxth	r3, r3
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	b299      	uxth	r1, r3
 80007e4:	f107 020f 	add.w	r2, r7, #15
 80007e8:	2364      	movs	r3, #100	; 0x64
 80007ea:	9300      	str	r3, [sp, #0]
 80007ec:	2301      	movs	r3, #1
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f001 ff98 	bl	8002724 <HAL_I2C_Master_Receive>

	return ctrl;
 80007f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000008 	.word	0x20000008

08000804 <erase_chip_spi>:
 *      Author: aidencontini
 */

#include "data_output_spi.h"

HAL_StatusTypeDef erase_chip_spi(SPI_HandleTypeDef *hspi) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;  // Initialize with success
 800080c:	2300      	movs	r3, #0
 800080e:	73bb      	strb	r3, [r7, #14]

	uint8_t busy = 0x01;
 8000810:	2301      	movs	r3, #1
 8000812:	73fb      	strb	r3, [r7, #15]
	while(busy) {
 8000814:	e006      	b.n	8000824 <erase_chip_spi+0x20>
		busy = (check_status_register(hspi) & 0x01);	// Check if there is a write in progress
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f000 f8be 	bl	8000998 <check_status_register>
 800081c:	4603      	mov	r3, r0
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	73fb      	strb	r3, [r7, #15]
	while(busy) {
 8000824:	7bfb      	ldrb	r3, [r7, #15]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d1f5      	bne.n	8000816 <erase_chip_spi+0x12>
	}

	write_enable_spi(hspi);
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f000 f834 	bl	8000898 <write_enable_spi>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);	// Set the chip select pin to low to initiate SPI comms
 8000830:	2200      	movs	r2, #0
 8000832:	2104      	movs	r1, #4
 8000834:	4810      	ldr	r0, [pc, #64]	; (8000878 <erase_chip_spi+0x74>)
 8000836:	f001 fcff 	bl	8002238 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(hspi, &FLASH_ERASE, 1, 100);	// Write the chip erase value to the FLASH to initial writing
 800083a:	2364      	movs	r3, #100	; 0x64
 800083c:	2201      	movs	r2, #1
 800083e:	490f      	ldr	r1, [pc, #60]	; (800087c <erase_chip_spi+0x78>)
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f003 ff50 	bl	80046e6 <HAL_SPI_Transmit>
 8000846:	4603      	mov	r3, r0
 8000848:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 800084a:	2201      	movs	r2, #1
 800084c:	2104      	movs	r1, #4
 800084e:	480a      	ldr	r0, [pc, #40]	; (8000878 <erase_chip_spi+0x74>)
 8000850:	f001 fcf2 	bl	8002238 <HAL_GPIO_WritePin>

	busy = 0x01;
 8000854:	2301      	movs	r3, #1
 8000856:	73fb      	strb	r3, [r7, #15]
	while(busy) {
 8000858:	e006      	b.n	8000868 <erase_chip_spi+0x64>
		busy = (check_status_register(hspi) & 0x01);	// Check if there is a write in progress
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f000 f89c 	bl	8000998 <check_status_register>
 8000860:	4603      	mov	r3, r0
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	73fb      	strb	r3, [r7, #15]
	while(busy) {
 8000868:	7bfb      	ldrb	r3, [r7, #15]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d1f5      	bne.n	800085a <erase_chip_spi+0x56>
	}

    // Return the status (HAL_OK for success, HAL_ERROR for failure)
    return status;
 800086e:	7bbb      	ldrb	r3, [r7, #14]
}
 8000870:	4618      	mov	r0, r3
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40020c00 	.word	0x40020c00
 800087c:	2000000d 	.word	0x2000000d

08000880 <erase_32k_spi>:

void erase_32k_spi(SPI_HandleTypeDef *hspi, uint32_t addr) {
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	6039      	str	r1, [r7, #0]
//	HAL_SPI_Transmit(hspi, &addrH, 1, 100);
//	HAL_SPI_Transmit(hspi, &addrM, 1, 100);
//	HAL_SPI_Transmit(hspi, &addrL, 1, 100);
//
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
	return;
 800088a:	bf00      	nop
}
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
	...

08000898 <write_enable_spi>:

void write_enable_spi(SPI_HandleTypeDef *hspi) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);	// Set the chip select pin to low to initiate SPI comms
 80008a0:	2200      	movs	r2, #0
 80008a2:	2104      	movs	r1, #4
 80008a4:	4808      	ldr	r0, [pc, #32]	; (80008c8 <write_enable_spi+0x30>)
 80008a6:	f001 fcc7 	bl	8002238 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &FLASH_WREN, 1, 100);	// Write the write enable value to the FLASH to initial writing
 80008aa:	2364      	movs	r3, #100	; 0x64
 80008ac:	2201      	movs	r2, #1
 80008ae:	4907      	ldr	r1, [pc, #28]	; (80008cc <write_enable_spi+0x34>)
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f003 ff18 	bl	80046e6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80008b6:	2201      	movs	r2, #1
 80008b8:	2104      	movs	r1, #4
 80008ba:	4803      	ldr	r0, [pc, #12]	; (80008c8 <write_enable_spi+0x30>)
 80008bc:	f001 fcbc 	bl	8002238 <HAL_GPIO_WritePin>
}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40020c00 	.word	0x40020c00
 80008cc:	20000009 	.word	0x20000009

080008d0 <write_data_spi>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);	// Set the chip select pin to low to initiate SPI comms
	HAL_SPI_Transmit(hspi, &FLASH_WRDIS, 1, 100);	// Write the write enable value to the FLASH to initial writing
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
}

uint8_t write_data_spi(uint8_t page[PAGE_SIZE], GPIO_PinState flight_mode, SPI_HandleTypeDef *hspi, int addr) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	607a      	str	r2, [r7, #4]
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	460b      	mov	r3, r1
 80008de:	72fb      	strb	r3, [r7, #11]
	uint8_t exit = EXIT_FAILURE;
 80008e0:	2301      	movs	r3, #1
 80008e2:	75fb      	strb	r3, [r7, #23]

	// If in flight mode, write data out to EEPROM
	if(flight_mode == GPIO_PIN_SET) {
 80008e4:	7afb      	ldrb	r3, [r7, #11]
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d14a      	bne.n	8000980 <write_data_spi+0xb0>

		uint8_t busy = 0x01;
 80008ea:	2301      	movs	r3, #1
 80008ec:	75bb      	strb	r3, [r7, #22]
		while(busy) {
 80008ee:	e006      	b.n	80008fe <write_data_spi+0x2e>
			busy = (check_status_register(hspi) & 0x01);	// Check if there is a write in progress
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f000 f851 	bl	8000998 <check_status_register>
 80008f6:	4603      	mov	r3, r0
 80008f8:	f003 0301 	and.w	r3, r3, #1
 80008fc:	75bb      	strb	r3, [r7, #22]
		while(busy) {
 80008fe:	7dbb      	ldrb	r3, [r7, #22]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d1f5      	bne.n	80008f0 <write_data_spi+0x20>
		}

		// Send the write enable signal
		write_enable_spi(hspi);
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	f7ff ffc7 	bl	8000898 <write_enable_spi>

		// Split the 24 bit address into three 8 bit ints
		uint8_t addrL = addr & 0xFF;  // Get the low byte
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	b2db      	uxtb	r3, r3
 800090e:	757b      	strb	r3, [r7, #21]
		uint8_t addrM = (addr >> 8) & 0xFF;  // Get the middle byte
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	121b      	asrs	r3, r3, #8
 8000914:	b2db      	uxtb	r3, r3
 8000916:	753b      	strb	r3, [r7, #20]
		uint8_t addrH = (addr >> 16) & 0xFF;  // Get the high byte
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	141b      	asrs	r3, r3, #16
 800091c:	b2db      	uxtb	r3, r3
 800091e:	74fb      	strb	r3, [r7, #19]

		// Send the PageWrite command
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);	// Set the chip select pin to low to initiate SPI comms
 8000920:	2200      	movs	r2, #0
 8000922:	2104      	movs	r1, #4
 8000924:	481a      	ldr	r0, [pc, #104]	; (8000990 <write_data_spi+0xc0>)
 8000926:	f001 fc87 	bl	8002238 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(hspi, &FLASH_PGWR, 1, 100);	// Write the write enable value to the Flash to initial writing
 800092a:	2364      	movs	r3, #100	; 0x64
 800092c:	2201      	movs	r2, #1
 800092e:	4919      	ldr	r1, [pc, #100]	; (8000994 <write_data_spi+0xc4>)
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f003 fed8 	bl	80046e6 <HAL_SPI_Transmit>

		// Transmit the 24 bit address of the page to write to
		HAL_SPI_Transmit(hspi, &addrH, 1, 100);
 8000936:	f107 0113 	add.w	r1, r7, #19
 800093a:	2364      	movs	r3, #100	; 0x64
 800093c:	2201      	movs	r2, #1
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f003 fed1 	bl	80046e6 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(hspi, &addrM, 1, 100);
 8000944:	f107 0114 	add.w	r1, r7, #20
 8000948:	2364      	movs	r3, #100	; 0x64
 800094a:	2201      	movs	r2, #1
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f003 feca 	bl	80046e6 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(hspi, &addrL, 1, 100);
 8000952:	f107 0115 	add.w	r1, r7, #21
 8000956:	2364      	movs	r3, #100	; 0x64
 8000958:	2201      	movs	r2, #1
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f003 fec3 	bl	80046e6 <HAL_SPI_Transmit>

		// Transmit the data to be written to the entire page
		HAL_SPI_Transmit(hspi, page, PAGE_SIZE, 1000);
 8000960:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000964:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000968:	68f9      	ldr	r1, [r7, #12]
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f003 febb 	bl	80046e6 <HAL_SPI_Transmit>

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);	// Set the chip select pin to high to remove the Flash from the SPI bus
 8000970:	2201      	movs	r2, #1
 8000972:	2104      	movs	r1, #4
 8000974:	4806      	ldr	r0, [pc, #24]	; (8000990 <write_data_spi+0xc0>)
 8000976:	f001 fc5f 	bl	8002238 <HAL_GPIO_WritePin>
		exit = EXIT_SUCCESS;
 800097a:	2300      	movs	r3, #0
 800097c:	75fb      	strb	r3, [r7, #23]
 800097e:	e001      	b.n	8000984 <write_data_spi+0xb4>

	// If not in flight mode, exit
	} else {
		exit = EXIT_SUCCESS;
 8000980:	2300      	movs	r3, #0
 8000982:	75fb      	strb	r3, [r7, #23]
	}
	return exit;
 8000984:	7dfb      	ldrb	r3, [r7, #23]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3718      	adds	r7, #24
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40020c00 	.word	0x40020c00
 8000994:	2000000a 	.word	0x2000000a

08000998 <check_status_register>:
 *      Author: aidencontini
 */

#include <data_read_spi.h>

uint8_t check_status_register(SPI_HandleTypeDef *hspi) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	uint8_t status_reg = 0x00;
 80009a0:	2300      	movs	r3, #0
 80009a2:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);	// Set the chip select pin to low to initiate SPI comms
 80009a4:	2200      	movs	r2, #0
 80009a6:	2104      	movs	r1, #4
 80009a8:	480c      	ldr	r0, [pc, #48]	; (80009dc <check_status_register+0x44>)
 80009aa:	f001 fc45 	bl	8002238 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &FLASH_READSR1, 1, 100);	// Write the write enable value to the Flash to initial reading
 80009ae:	2364      	movs	r3, #100	; 0x64
 80009b0:	2201      	movs	r2, #1
 80009b2:	490b      	ldr	r1, [pc, #44]	; (80009e0 <check_status_register+0x48>)
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f003 fe96 	bl	80046e6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, &status_reg, 1, 100);
 80009ba:	f107 010f 	add.w	r1, r7, #15
 80009be:	2364      	movs	r3, #100	; 0x64
 80009c0:	2201      	movs	r2, #1
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f003 ffd2 	bl	800496c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80009c8:	2201      	movs	r2, #1
 80009ca:	2104      	movs	r1, #4
 80009cc:	4803      	ldr	r0, [pc, #12]	; (80009dc <check_status_register+0x44>)
 80009ce:	f001 fc33 	bl	8002238 <HAL_GPIO_WritePin>

	return status_reg;
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3710      	adds	r7, #16
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40020c00 	.word	0x40020c00
 80009e0:	2000000b 	.word	0x2000000b

080009e4 <find_next_blank_page>:

uint32_t find_next_blank_page(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, GPIO_PinState *end_of_flash_ptr) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	; 0x28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	607a      	str	r2, [r7, #4]
	uint8_t page_start[4] = {0, 0, 0, 0};
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]
	uint32_t page_start_concat = (page_start[0] << 24) | (page_start[1] << 16) | (page_start[2] << 8) | page_start[3];
 80009f4:	7d3b      	ldrb	r3, [r7, #20]
 80009f6:	061a      	lsls	r2, r3, #24
 80009f8:	7d7b      	ldrb	r3, [r7, #21]
 80009fa:	041b      	lsls	r3, r3, #16
 80009fc:	431a      	orrs	r2, r3
 80009fe:	7dbb      	ldrb	r3, [r7, #22]
 8000a00:	021b      	lsls	r3, r3, #8
 8000a02:	4313      	orrs	r3, r2
 8000a04:	7dfa      	ldrb	r2, [r7, #23]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t temp = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	623b      	str	r3, [r7, #32]
	uint32_t page_address = temp;
 8000a0e:	6a3b      	ldr	r3, [r7, #32]
 8000a10:	61fb      	str	r3, [r7, #28]

	while ((page_start_concat != 0xFFFFFFFF) || (temp == NUM_OF_PAGES)) {
 8000a12:	e054      	b.n	8000abe <find_next_blank_page+0xda>
		page_address = temp;
 8000a14:	6a3b      	ldr	r3, [r7, #32]
 8000a16:	61fb      	str	r3, [r7, #28]

		uint8_t busy = 0x01;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	76fb      	strb	r3, [r7, #27]
		while(busy) {
 8000a1c:	e006      	b.n	8000a2c <find_next_blank_page+0x48>
			busy = (check_status_register(hspi) & 0x01);	// Check if there is a write in progress
 8000a1e:	68f8      	ldr	r0, [r7, #12]
 8000a20:	f7ff ffba 	bl	8000998 <check_status_register>
 8000a24:	4603      	mov	r3, r0
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	76fb      	strb	r3, [r7, #27]
		while(busy) {
 8000a2c:	7efb      	ldrb	r3, [r7, #27]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d1f5      	bne.n	8000a1e <find_next_blank_page+0x3a>
		}

		// Read the entire contents of a page starting from the given address
		// Split the 24 bit address into three 8 bit ints
		uint8_t addrL = page_address & 0xFF;  // Get the low byte
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	74fb      	strb	r3, [r7, #19]
		uint8_t addrM = (page_address >> 8) & 0xFF;  // Get the middle byte
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	0a1b      	lsrs	r3, r3, #8
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	74bb      	strb	r3, [r7, #18]
		uint8_t addrH = (page_address >> 16) & 0xFF;  // Get the high byte
 8000a40:	69fb      	ldr	r3, [r7, #28]
 8000a42:	0c1b      	lsrs	r3, r3, #16
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	747b      	strb	r3, [r7, #17]

		// Read the page denoted by the given address
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2104      	movs	r1, #4
 8000a4c:	4826      	ldr	r0, [pc, #152]	; (8000ae8 <find_next_blank_page+0x104>)
 8000a4e:	f001 fbf3 	bl	8002238 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(hspi, &FLASH_READEN, 1, 100);	// Write the read enable value
 8000a52:	2364      	movs	r3, #100	; 0x64
 8000a54:	2201      	movs	r2, #1
 8000a56:	4925      	ldr	r1, [pc, #148]	; (8000aec <find_next_blank_page+0x108>)
 8000a58:	68f8      	ldr	r0, [r7, #12]
 8000a5a:	f003 fe44 	bl	80046e6 <HAL_SPI_Transmit>

		// Transmit the 24 bit address of the page to initialise read from
		HAL_SPI_Transmit(hspi, &addrH, 1, 100);
 8000a5e:	f107 0111 	add.w	r1, r7, #17
 8000a62:	2364      	movs	r3, #100	; 0x64
 8000a64:	2201      	movs	r2, #1
 8000a66:	68f8      	ldr	r0, [r7, #12]
 8000a68:	f003 fe3d 	bl	80046e6 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(hspi, &addrM, 1, 100);
 8000a6c:	f107 0112 	add.w	r1, r7, #18
 8000a70:	2364      	movs	r3, #100	; 0x64
 8000a72:	2201      	movs	r2, #1
 8000a74:	68f8      	ldr	r0, [r7, #12]
 8000a76:	f003 fe36 	bl	80046e6 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(hspi, &addrL, 1, 100);
 8000a7a:	f107 0113 	add.w	r1, r7, #19
 8000a7e:	2364      	movs	r3, #100	; 0x64
 8000a80:	2201      	movs	r2, #1
 8000a82:	68f8      	ldr	r0, [r7, #12]
 8000a84:	f003 fe2f 	bl	80046e6 <HAL_SPI_Transmit>

		HAL_SPI_Receive(hspi, page_start, 4, 100);
 8000a88:	f107 0114 	add.w	r1, r7, #20
 8000a8c:	2364      	movs	r3, #100	; 0x64
 8000a8e:	2204      	movs	r2, #4
 8000a90:	68f8      	ldr	r0, [r7, #12]
 8000a92:	f003 ff6b 	bl	800496c <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8000a96:	2201      	movs	r2, #1
 8000a98:	2104      	movs	r1, #4
 8000a9a:	4813      	ldr	r0, [pc, #76]	; (8000ae8 <find_next_blank_page+0x104>)
 8000a9c:	f001 fbcc 	bl	8002238 <HAL_GPIO_WritePin>

		page_start_concat = (page_start[0] << 24) | (page_start[1] << 16) | (page_start[2] << 8) | page_start[3];
 8000aa0:	7d3b      	ldrb	r3, [r7, #20]
 8000aa2:	061a      	lsls	r2, r3, #24
 8000aa4:	7d7b      	ldrb	r3, [r7, #21]
 8000aa6:	041b      	lsls	r3, r3, #16
 8000aa8:	431a      	orrs	r2, r3
 8000aaa:	7dbb      	ldrb	r3, [r7, #22]
 8000aac:	021b      	lsls	r3, r3, #8
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	7dfa      	ldrb	r2, [r7, #23]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
		temp += PAGE_SIZE;
 8000ab6:	6a3b      	ldr	r3, [r7, #32]
 8000ab8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000abc:	623b      	str	r3, [r7, #32]
	while ((page_start_concat != 0xFFFFFFFF) || (temp == NUM_OF_PAGES)) {
 8000abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ac4:	d1a6      	bne.n	8000a14 <find_next_blank_page+0x30>
 8000ac6:	6a3b      	ldr	r3, [r7, #32]
 8000ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000acc:	d0a2      	beq.n	8000a14 <find_next_blank_page+0x30>
	}

	if (page_address == (NUM_OF_PAGES * PAGE_SIZE)) {
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ad4:	d102      	bne.n	8000adc <find_next_blank_page+0xf8>
		*end_of_flash_ptr = GPIO_PIN_RESET;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	701a      	strb	r2, [r3, #0]
	}
	return page_address;
 8000adc:	69fb      	ldr	r3, [r7, #28]
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3728      	adds	r7, #40	; 0x28
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40020c00 	.word	0x40020c00
 8000aec:	2000000c 	.word	0x2000000c

08000af0 <read_page_spi>:

void read_page_spi(uint8_t data_read[PAGE_SIZE], SPI_HandleTypeDef *hspi, uint32_t addr) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
	// Read the status register to ensure no write is currently in progress
	uint8_t busy = 0x01;
 8000afc:	2301      	movs	r3, #1
 8000afe:	75fb      	strb	r3, [r7, #23]
	while(busy) {
 8000b00:	e006      	b.n	8000b10 <read_page_spi+0x20>
		busy = (check_status_register(hspi) & 0x01);	// Check if there is a write in progress
 8000b02:	68b8      	ldr	r0, [r7, #8]
 8000b04:	f7ff ff48 	bl	8000998 <check_status_register>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	75fb      	strb	r3, [r7, #23]
	while(busy) {
 8000b10:	7dfb      	ldrb	r3, [r7, #23]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d1f5      	bne.n	8000b02 <read_page_spi+0x12>
	}

	// Read the entire contents of a page starting from the given address
	// Split the 24 bit address into three 8 bit ints
	uint8_t addrL = addr & 0xFF;  // Get the low byte
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	75bb      	strb	r3, [r7, #22]
	uint8_t addrM = (addr >> 8) & 0xFF;  // Get the middle byte
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	0a1b      	lsrs	r3, r3, #8
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	757b      	strb	r3, [r7, #21]
	uint8_t addrH = (addr >> 16) & 0xFF;  // Get the high byte
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	0c1b      	lsrs	r3, r3, #16
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	753b      	strb	r3, [r7, #20]

	// Read the page denoted by the given address
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2104      	movs	r1, #4
 8000b30:	4816      	ldr	r0, [pc, #88]	; (8000b8c <read_page_spi+0x9c>)
 8000b32:	f001 fb81 	bl	8002238 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &FLASH_READEN, 1, 100);	// Write the read enable value
 8000b36:	2364      	movs	r3, #100	; 0x64
 8000b38:	2201      	movs	r2, #1
 8000b3a:	4915      	ldr	r1, [pc, #84]	; (8000b90 <read_page_spi+0xa0>)
 8000b3c:	68b8      	ldr	r0, [r7, #8]
 8000b3e:	f003 fdd2 	bl	80046e6 <HAL_SPI_Transmit>

	// Transmit the 24 bit address of the page to initialise read from
	HAL_SPI_Transmit(hspi, &addrH, 1, 100);
 8000b42:	f107 0114 	add.w	r1, r7, #20
 8000b46:	2364      	movs	r3, #100	; 0x64
 8000b48:	2201      	movs	r2, #1
 8000b4a:	68b8      	ldr	r0, [r7, #8]
 8000b4c:	f003 fdcb 	bl	80046e6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &addrM, 1, 100);
 8000b50:	f107 0115 	add.w	r1, r7, #21
 8000b54:	2364      	movs	r3, #100	; 0x64
 8000b56:	2201      	movs	r2, #1
 8000b58:	68b8      	ldr	r0, [r7, #8]
 8000b5a:	f003 fdc4 	bl	80046e6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &addrL, 1, 100);
 8000b5e:	f107 0116 	add.w	r1, r7, #22
 8000b62:	2364      	movs	r3, #100	; 0x64
 8000b64:	2201      	movs	r2, #1
 8000b66:	68b8      	ldr	r0, [r7, #8]
 8000b68:	f003 fdbd 	bl	80046e6 <HAL_SPI_Transmit>

	HAL_SPI_Receive(hspi, data_read, PAGE_SIZE, 100);
 8000b6c:	2364      	movs	r3, #100	; 0x64
 8000b6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b72:	68f9      	ldr	r1, [r7, #12]
 8000b74:	68b8      	ldr	r0, [r7, #8]
 8000b76:	f003 fef9 	bl	800496c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	2104      	movs	r1, #4
 8000b7e:	4803      	ldr	r0, [pc, #12]	; (8000b8c <read_page_spi+0x9c>)
 8000b80:	f001 fb5a 	bl	8002238 <HAL_GPIO_WritePin>
}
 8000b84:	bf00      	nop
 8000b86:	3718      	adds	r7, #24
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40020c00 	.word	0x40020c00
 8000b90:	2000000c 	.word	0x2000000c

08000b94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b9a:	f000 ff73 	bl	8001a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b9e:	f000 f8b7 	bl	8000d10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ba2:	f000 fa53 	bl	800104c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ba6:	f000 f915 	bl	8000dd4 <MX_I2C1_Init>
  MX_RTC_Init();
 8000baa:	f000 f993 	bl	8000ed4 <MX_RTC_Init>
  MX_SPI1_Init();
 8000bae:	f000 f9b7 	bl	8000f20 <MX_SPI1_Init>
  MX_TIM6_Init();
 8000bb2:	f000 f9eb 	bl	8000f8c <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8000bb6:	f000 fa1f 	bl	8000ff8 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8000bba:	f000 f94b 	bl	8000e54 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, UARTRxData,1);			// Initiate the UART Receive interrupt
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	4946      	ldr	r1, [pc, #280]	; (8000cdc <main+0x148>)
 8000bc2:	4847      	ldr	r0, [pc, #284]	; (8000ce0 <main+0x14c>)
 8000bc4:	f004 ff05 	bl	80059d2 <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);	// Turn LED off
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2180      	movs	r1, #128	; 0x80
 8000bcc:	4845      	ldr	r0, [pc, #276]	; (8000ce4 <main+0x150>)
 8000bce:	f001 fb33 	bl	8002238 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim6);
 8000bd2:	4845      	ldr	r0, [pc, #276]	; (8000ce8 <main+0x154>)
 8000bd4:	f004 fb24 	bl	8005220 <HAL_TIM_Base_Start_IT>
  byte_tracker = 0;
 8000bd8:	4b44      	ldr	r3, [pc, #272]	; (8000cec <main+0x158>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	801a      	strh	r2, [r3, #0]
  end_of_flash = GPIO_PIN_SET;
 8000bde:	4b44      	ldr	r3, [pc, #272]	; (8000cf0 <main+0x15c>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	701a      	strb	r2, [r3, #0]
  clean_data_buffer();
 8000be4:	f000 fb1a 	bl	800121c <clean_data_buffer>
  initialise_rtc_default(&hrtc);
 8000be8:	4842      	ldr	r0, [pc, #264]	; (8000cf4 <main+0x160>)
 8000bea:	f000 fb37 	bl	800125c <initialise_rtc_default>
  init_accel(&hi2c1);
 8000bee:	4842      	ldr	r0, [pc, #264]	; (8000cf8 <main+0x164>)
 8000bf0:	f7ff fc82 	bl	80004f8 <init_accel>
  init_bme280(&hi2c2);
 8000bf4:	4841      	ldr	r0, [pc, #260]	; (8000cfc <main+0x168>)
 8000bf6:	f7ff fdcf 	bl	8000798 <init_bme280>
  HAL_UART_Receive_IT(&huart2, UARTRxData,1);				// Initiate the UART Receive interrupt
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	4937      	ldr	r1, [pc, #220]	; (8000cdc <main+0x148>)
 8000bfe:	4838      	ldr	r0, [pc, #224]	; (8000ce0 <main+0x14c>)
 8000c00:	f004 fee7 	bl	80059d2 <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);		// SET SPI CS High to disable bus
 8000c04:	2201      	movs	r2, #1
 8000c06:	2104      	movs	r1, #4
 8000c08:	483d      	ldr	r0, [pc, #244]	; (8000d00 <main+0x16c>)
 8000c0a:	f001 fb15 	bl	8002238 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);		// Turn LED off
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2180      	movs	r1, #128	; 0x80
 8000c12:	4834      	ldr	r0, [pc, #208]	; (8000ce4 <main+0x150>)
 8000c14:	f001 fb10 	bl	8002238 <HAL_GPIO_WritePin>
  next_blank_page = find_next_blank_page(&hspi1, &huart2, &end_of_flash);
  // Advance erase 32k
  erase_32k_spi(&hspi1, next_blank_page);
  **/

  uint32_t next_erase_page = next_blank_page + (100 * PAGE_SIZE);
 8000c18:	4b3a      	ldr	r3, [pc, #232]	; (8000d04 <main+0x170>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
 8000c20:	607b      	str	r3, [r7, #4]
  HAL_TIM_Base_Start_IT(&htim6);
 8000c22:	4831      	ldr	r0, [pc, #196]	; (8000ce8 <main+0x154>)
 8000c24:	f004 fafc 	bl	8005220 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // If at the end of the data buffer, write the page out
    if(byte_tracker > (PAGE_SIZE - READ_SIZE)) {
 8000c28:	4b30      	ldr	r3, [pc, #192]	; (8000cec <main+0x158>)
 8000c2a:	881b      	ldrh	r3, [r3, #0]
 8000c2c:	2bf6      	cmp	r3, #246	; 0xf6
 8000c2e:	d943      	bls.n	8000cb8 <main+0x124>
      GPIO_PinState flight_mode = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8000c30:	2102      	movs	r1, #2
 8000c32:	482c      	ldr	r0, [pc, #176]	; (8000ce4 <main+0x150>)
 8000c34:	f001 fae8 	bl	8002208 <HAL_GPIO_ReadPin>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	70fb      	strb	r3, [r7, #3]
      if((flight_mode & end_of_flash) == GPIO_PIN_SET) {
 8000c3c:	4b2c      	ldr	r3, [pc, #176]	; (8000cf0 <main+0x15c>)
 8000c3e:	781a      	ldrb	r2, [r3, #0]
 8000c40:	78fb      	ldrb	r3, [r7, #3]
 8000c42:	4013      	ands	r3, r2
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d131      	bne.n	8000cae <main+0x11a>
        // Disable interrupts briefly
        HAL_UART_AbortReceive_IT(&huart2); // Disable UART receive interrupt
 8000c4a:	4825      	ldr	r0, [pc, #148]	; (8000ce0 <main+0x14c>)
 8000c4c:	f004 fee6 	bl	8005a1c <HAL_UART_AbortReceive_IT>
        HAL_TIM_Base_Stop_IT(&htim6); // Disable timer interrupt
 8000c50:	4825      	ldr	r0, [pc, #148]	; (8000ce8 <main+0x154>)
 8000c52:	f004 fb55 	bl	8005300 <HAL_TIM_Base_Stop_IT>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);		// Toggle LED when writing data
 8000c56:	2201      	movs	r2, #1
 8000c58:	2180      	movs	r1, #128	; 0x80
 8000c5a:	4822      	ldr	r0, [pc, #136]	; (8000ce4 <main+0x150>)
 8000c5c:	f001 faec 	bl	8002238 <HAL_GPIO_WritePin>
        write_data_spi(data_buffer, flight_mode, &hspi1, next_blank_page);
 8000c60:	4b28      	ldr	r3, [pc, #160]	; (8000d04 <main+0x170>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	78f9      	ldrb	r1, [r7, #3]
 8000c66:	4a28      	ldr	r2, [pc, #160]	; (8000d08 <main+0x174>)
 8000c68:	4828      	ldr	r0, [pc, #160]	; (8000d0c <main+0x178>)
 8000c6a:	f7ff fe31 	bl	80008d0 <write_data_spi>
        next_blank_page += PAGE_SIZE;
 8000c6e:	4b25      	ldr	r3, [pc, #148]	; (8000d04 <main+0x170>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000c76:	4a23      	ldr	r2, [pc, #140]	; (8000d04 <main+0x170>)
 8000c78:	6013      	str	r3, [r2, #0]

        // Renenable interrupts
        HAL_UART_Receive_IT(&huart2, UARTRxData,1);			// Initiate the UART Receive interrupt
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	4917      	ldr	r1, [pc, #92]	; (8000cdc <main+0x148>)
 8000c7e:	4818      	ldr	r0, [pc, #96]	; (8000ce0 <main+0x14c>)
 8000c80:	f004 fea7 	bl	80059d2 <HAL_UART_Receive_IT>
        HAL_TIM_Base_Start_IT(&htim6);
 8000c84:	4818      	ldr	r0, [pc, #96]	; (8000ce8 <main+0x154>)
 8000c86:	f004 facb 	bl	8005220 <HAL_TIM_Base_Start_IT>

        if(next_blank_page == (NUM_OF_PAGES*PAGE_SIZE)) {
 8000c8a:	4b1e      	ldr	r3, [pc, #120]	; (8000d04 <main+0x170>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c92:	d107      	bne.n	8000ca4 <main+0x110>
          next_blank_page = find_next_blank_page(&hspi1, &huart2, &end_of_flash);
 8000c94:	4a16      	ldr	r2, [pc, #88]	; (8000cf0 <main+0x15c>)
 8000c96:	4912      	ldr	r1, [pc, #72]	; (8000ce0 <main+0x14c>)
 8000c98:	481b      	ldr	r0, [pc, #108]	; (8000d08 <main+0x174>)
 8000c9a:	f7ff fea3 	bl	80009e4 <find_next_blank_page>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	4a18      	ldr	r2, [pc, #96]	; (8000d04 <main+0x170>)
 8000ca2:	6013      	str	r3, [r2, #0]
        }
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);		// Toggle LED when writing data
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	480e      	ldr	r0, [pc, #56]	; (8000ce4 <main+0x150>)
 8000caa:	f001 fac5 	bl	8002238 <HAL_GPIO_WritePin>
      }
      byte_tracker = 0;
 8000cae:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <main+0x158>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	801a      	strh	r2, [r3, #0]
      clean_data_buffer();
 8000cb4:	f000 fab2 	bl	800121c <clean_data_buffer>
    }

    if(next_blank_page == next_erase_page) {
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <main+0x170>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d1b2      	bne.n	8000c28 <main+0x94>
      erase_32k_spi(&hspi1, next_blank_page);
 8000cc2:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <main+0x170>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	480f      	ldr	r0, [pc, #60]	; (8000d08 <main+0x174>)
 8000cca:	f7ff fdd9 	bl	8000880 <erase_32k_spi>
      next_erase_page = next_blank_page + (100 * PAGE_SIZE);
 8000cce:	4b0d      	ldr	r3, [pc, #52]	; (8000d04 <main+0x170>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
 8000cd6:	607b      	str	r3, [r7, #4]
    if(byte_tracker > (PAGE_SIZE - READ_SIZE)) {
 8000cd8:	e7a6      	b.n	8000c28 <main+0x94>
 8000cda:	bf00      	nop
 8000cdc:	200001ec 	.word	0x200001ec
 8000ce0:	200001a4 	.word	0x200001a4
 8000ce4:	40020400 	.word	0x40020400
 8000ce8:	2000015c 	.word	0x2000015c
 8000cec:	200002f4 	.word	0x200002f4
 8000cf0:	200002f6 	.word	0x200002f6
 8000cf4:	200000e4 	.word	0x200000e4
 8000cf8:	2000003c 	.word	0x2000003c
 8000cfc:	20000090 	.word	0x20000090
 8000d00:	40020c00 	.word	0x40020c00
 8000d04:	200002f0 	.word	0x200002f0
 8000d08:	20000104 	.word	0x20000104
 8000d0c:	200001f0 	.word	0x200001f0

08000d10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b094      	sub	sp, #80	; 0x50
 8000d14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d16:	f107 0320 	add.w	r3, r7, #32
 8000d1a:	2230      	movs	r2, #48	; 0x30
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f005 fea6 	bl	8006a70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d24:	f107 030c 	add.w	r3, r7, #12
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d34:	2300      	movs	r3, #0
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	4b24      	ldr	r3, [pc, #144]	; (8000dcc <SystemClock_Config+0xbc>)
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3c:	4a23      	ldr	r2, [pc, #140]	; (8000dcc <SystemClock_Config+0xbc>)
 8000d3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d42:	6413      	str	r3, [r2, #64]	; 0x40
 8000d44:	4b21      	ldr	r3, [pc, #132]	; (8000dcc <SystemClock_Config+0xbc>)
 8000d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d50:	2300      	movs	r3, #0
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <SystemClock_Config+0xc0>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d5c:	4a1c      	ldr	r2, [pc, #112]	; (8000dd0 <SystemClock_Config+0xc0>)
 8000d5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d62:	6013      	str	r3, [r2, #0]
 8000d64:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <SystemClock_Config+0xc0>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000d70:	230a      	movs	r3, #10
 8000d72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d74:	2301      	movs	r3, #1
 8000d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d78:	2310      	movs	r3, #16
 8000d7a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d84:	f107 0320 	add.w	r3, r7, #32
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f002 faff 	bl	800338c <HAL_RCC_OscConfig>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000d94:	f000 fa5c 	bl	8001250 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d98:	230f      	movs	r3, #15
 8000d9a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dac:	f107 030c 	add.w	r3, r7, #12
 8000db0:	2100      	movs	r1, #0
 8000db2:	4618      	mov	r0, r3
 8000db4:	f002 fd62 	bl	800387c <HAL_RCC_ClockConfig>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000dbe:	f000 fa47 	bl	8001250 <Error_Handler>
  }
}
 8000dc2:	bf00      	nop
 8000dc4:	3750      	adds	r7, #80	; 0x50
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40007000 	.word	0x40007000

08000dd4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dd8:	4b1b      	ldr	r3, [pc, #108]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000dda:	4a1c      	ldr	r2, [pc, #112]	; (8000e4c <MX_I2C1_Init+0x78>)
 8000ddc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000dde:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000de0:	4a1b      	ldr	r2, [pc, #108]	; (8000e50 <MX_I2C1_Init+0x7c>)
 8000de2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000de4:	4b18      	ldr	r3, [pc, #96]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000dea:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000df0:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000df2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000df6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000df8:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dfe:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e04:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e0a:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e10:	480d      	ldr	r0, [pc, #52]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000e12:	f001 fa45 	bl	80022a0 <HAL_I2C_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e1c:	f000 fa18 	bl	8001250 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e20:	2100      	movs	r1, #0
 8000e22:	4809      	ldr	r0, [pc, #36]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000e24:	f002 fa36 	bl	8003294 <HAL_I2CEx_ConfigAnalogFilter>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000e2e:	f000 fa0f 	bl	8001250 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e32:	2100      	movs	r1, #0
 8000e34:	4804      	ldr	r0, [pc, #16]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000e36:	f002 fa69 	bl	800330c <HAL_I2CEx_ConfigDigitalFilter>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000e40:	f000 fa06 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	2000003c 	.word	0x2000003c
 8000e4c:	40005400 	.word	0x40005400
 8000e50:	000186a0 	.word	0x000186a0

08000e54 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e58:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <MX_I2C2_Init+0x74>)
 8000e5a:	4a1c      	ldr	r2, [pc, #112]	; (8000ecc <MX_I2C2_Init+0x78>)
 8000e5c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000e5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ec8 <MX_I2C2_Init+0x74>)
 8000e60:	4a1b      	ldr	r2, [pc, #108]	; (8000ed0 <MX_I2C2_Init+0x7c>)
 8000e62:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e64:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <MX_I2C2_Init+0x74>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000e6a:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <MX_I2C2_Init+0x74>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e70:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <MX_I2C2_Init+0x74>)
 8000e72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e76:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e78:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <MX_I2C2_Init+0x74>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000e7e:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <MX_I2C2_Init+0x74>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e84:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <MX_I2C2_Init+0x74>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <MX_I2C2_Init+0x74>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e90:	480d      	ldr	r0, [pc, #52]	; (8000ec8 <MX_I2C2_Init+0x74>)
 8000e92:	f001 fa05 	bl	80022a0 <HAL_I2C_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000e9c:	f000 f9d8 	bl	8001250 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4809      	ldr	r0, [pc, #36]	; (8000ec8 <MX_I2C2_Init+0x74>)
 8000ea4:	f002 f9f6 	bl	8003294 <HAL_I2CEx_ConfigAnalogFilter>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000eae:	f000 f9cf 	bl	8001250 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4804      	ldr	r0, [pc, #16]	; (8000ec8 <MX_I2C2_Init+0x74>)
 8000eb6:	f002 fa29 	bl	800330c <HAL_I2CEx_ConfigDigitalFilter>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000ec0:	f000 f9c6 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000090 	.word	0x20000090
 8000ecc:	40005800 	.word	0x40005800
 8000ed0:	000186a0 	.word	0x000186a0

08000ed4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <MX_RTC_Init+0x44>)
 8000eda:	4a10      	ldr	r2, [pc, #64]	; (8000f1c <MX_RTC_Init+0x48>)
 8000edc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <MX_RTC_Init+0x44>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <MX_RTC_Init+0x44>)
 8000ee6:	227f      	movs	r2, #127	; 0x7f
 8000ee8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000eea:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <MX_RTC_Init+0x44>)
 8000eec:	22ff      	movs	r2, #255	; 0xff
 8000eee:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ef0:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <MX_RTC_Init+0x44>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ef6:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <MX_RTC_Init+0x44>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <MX_RTC_Init+0x44>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f02:	4805      	ldr	r0, [pc, #20]	; (8000f18 <MX_RTC_Init+0x44>)
 8000f04:	f003 f85a 	bl	8003fbc <HAL_RTC_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000f0e:	f000 f99f 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	200000e4 	.word	0x200000e4
 8000f1c:	40002800 	.word	0x40002800

08000f20 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f24:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <MX_SPI1_Init+0x64>)
 8000f26:	4a18      	ldr	r2, [pc, #96]	; (8000f88 <MX_SPI1_Init+0x68>)
 8000f28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f2a:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <MX_SPI1_Init+0x64>)
 8000f2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f32:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <MX_SPI1_Init+0x64>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f38:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <MX_SPI1_Init+0x64>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f3e:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <MX_SPI1_Init+0x64>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f44:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <MX_SPI1_Init+0x64>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <MX_SPI1_Init+0x64>)
 8000f4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f50:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f52:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <MX_SPI1_Init+0x64>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f58:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <MX_SPI1_Init+0x64>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f5e:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <MX_SPI1_Init+0x64>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f64:	4b07      	ldr	r3, [pc, #28]	; (8000f84 <MX_SPI1_Init+0x64>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <MX_SPI1_Init+0x64>)
 8000f6c:	220a      	movs	r2, #10
 8000f6e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f70:	4804      	ldr	r0, [pc, #16]	; (8000f84 <MX_SPI1_Init+0x64>)
 8000f72:	f003 fb2f 	bl	80045d4 <HAL_SPI_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f7c:	f000 f968 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000104 	.word	0x20000104
 8000f88:	40013000 	.word	0x40013000

08000f8c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f92:	463b      	mov	r3, r7
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000f9a:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <MX_TIM6_Init+0x64>)
 8000f9c:	4a15      	ldr	r2, [pc, #84]	; (8000ff4 <MX_TIM6_Init+0x68>)
 8000f9e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15999;
 8000fa0:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <MX_TIM6_Init+0x64>)
 8000fa2:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000fa6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <MX_TIM6_Init+0x64>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8000fae:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <MX_TIM6_Init+0x64>)
 8000fb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fb4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <MX_TIM6_Init+0x64>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000fbc:	480c      	ldr	r0, [pc, #48]	; (8000ff0 <MX_TIM6_Init+0x64>)
 8000fbe:	f004 f8df 	bl	8005180 <HAL_TIM_Base_Init>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000fc8:	f000 f942 	bl	8001250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <MX_TIM6_Init+0x64>)
 8000fda:	f004 fb8f 	bl	80056fc <HAL_TIMEx_MasterConfigSynchronization>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000fe4:	f000 f934 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	2000015c 	.word	0x2000015c
 8000ff4:	40001000 	.word	0x40001000

08000ff8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ffc:	4b11      	ldr	r3, [pc, #68]	; (8001044 <MX_USART2_UART_Init+0x4c>)
 8000ffe:	4a12      	ldr	r2, [pc, #72]	; (8001048 <MX_USART2_UART_Init+0x50>)
 8001000:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001002:	4b10      	ldr	r3, [pc, #64]	; (8001044 <MX_USART2_UART_Init+0x4c>)
 8001004:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001008:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800100a:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <MX_USART2_UART_Init+0x4c>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001010:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <MX_USART2_UART_Init+0x4c>)
 8001012:	2200      	movs	r2, #0
 8001014:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001016:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <MX_USART2_UART_Init+0x4c>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800101c:	4b09      	ldr	r3, [pc, #36]	; (8001044 <MX_USART2_UART_Init+0x4c>)
 800101e:	220c      	movs	r2, #12
 8001020:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001022:	4b08      	ldr	r3, [pc, #32]	; (8001044 <MX_USART2_UART_Init+0x4c>)
 8001024:	2200      	movs	r2, #0
 8001026:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <MX_USART2_UART_Init+0x4c>)
 800102a:	2200      	movs	r2, #0
 800102c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800102e:	4805      	ldr	r0, [pc, #20]	; (8001044 <MX_USART2_UART_Init+0x4c>)
 8001030:	f004 fbf4 	bl	800581c <HAL_UART_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800103a:	f000 f909 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	200001a4 	.word	0x200001a4
 8001048:	40004400 	.word	0x40004400

0800104c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08a      	sub	sp, #40	; 0x28
 8001050:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]
 8001060:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	4b68      	ldr	r3, [pc, #416]	; (8001208 <MX_GPIO_Init+0x1bc>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a67      	ldr	r2, [pc, #412]	; (8001208 <MX_GPIO_Init+0x1bc>)
 800106c:	f043 0304 	orr.w	r3, r3, #4
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b65      	ldr	r3, [pc, #404]	; (8001208 <MX_GPIO_Init+0x1bc>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0304 	and.w	r3, r3, #4
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	4b61      	ldr	r3, [pc, #388]	; (8001208 <MX_GPIO_Init+0x1bc>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a60      	ldr	r2, [pc, #384]	; (8001208 <MX_GPIO_Init+0x1bc>)
 8001088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b5e      	ldr	r3, [pc, #376]	; (8001208 <MX_GPIO_Init+0x1bc>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	4b5a      	ldr	r3, [pc, #360]	; (8001208 <MX_GPIO_Init+0x1bc>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a59      	ldr	r2, [pc, #356]	; (8001208 <MX_GPIO_Init+0x1bc>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b57      	ldr	r3, [pc, #348]	; (8001208 <MX_GPIO_Init+0x1bc>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	4b53      	ldr	r3, [pc, #332]	; (8001208 <MX_GPIO_Init+0x1bc>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a52      	ldr	r2, [pc, #328]	; (8001208 <MX_GPIO_Init+0x1bc>)
 80010c0:	f043 0302 	orr.w	r3, r3, #2
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b50      	ldr	r3, [pc, #320]	; (8001208 <MX_GPIO_Init+0x1bc>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	603b      	str	r3, [r7, #0]
 80010d6:	4b4c      	ldr	r3, [pc, #304]	; (8001208 <MX_GPIO_Init+0x1bc>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a4b      	ldr	r2, [pc, #300]	; (8001208 <MX_GPIO_Init+0x1bc>)
 80010dc:	f043 0308 	orr.w	r3, r3, #8
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b49      	ldr	r3, [pc, #292]	; (8001208 <MX_GPIO_Init+0x1bc>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0308 	and.w	r3, r3, #8
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_WP_GPIO_Port, SPI2_WP_Pin, GPIO_PIN_RESET);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2101      	movs	r1, #1
 80010f2:	4846      	ldr	r0, [pc, #280]	; (800120c <MX_GPIO_Init+0x1c0>)
 80010f4:	f001 f8a0 	bl	8002238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 80010f8:	2200      	movs	r2, #0
 80010fa:	f44f 41a1 	mov.w	r1, #20608	; 0x5080
 80010fe:	4844      	ldr	r0, [pc, #272]	; (8001210 <MX_GPIO_Init+0x1c4>)
 8001100:	f001 f89a 	bl	8002238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI1_WP_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8001104:	2200      	movs	r2, #0
 8001106:	f244 0104 	movw	r1, #16388	; 0x4004
 800110a:	4842      	ldr	r0, [pc, #264]	; (8001214 <MX_GPIO_Init+0x1c8>)
 800110c:	f001 f894 	bl	8002238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI2_WP_Pin */
  GPIO_InitStruct.Pin = SPI2_WP_Pin;
 8001110:	2301      	movs	r3, #1
 8001112:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001114:	2301      	movs	r3, #1
 8001116:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001118:	2301      	movs	r3, #1
 800111a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2300      	movs	r3, #0
 800111e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_WP_GPIO_Port, &GPIO_InitStruct);
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	4619      	mov	r1, r3
 8001126:	4839      	ldr	r0, [pc, #228]	; (800120c <MX_GPIO_Init+0x1c0>)
 8001128:	f000 fec2 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800112c:	230c      	movs	r3, #12
 800112e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001138:	2303      	movs	r3, #3
 800113a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800113c:	2305      	movs	r3, #5
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	4619      	mov	r1, r3
 8001146:	4831      	ldr	r0, [pc, #196]	; (800120c <MX_GPIO_Init+0x1c0>)
 8001148:	f000 feb2 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : JMP_Flight_Pin */
  GPIO_InitStruct.Pin = JMP_Flight_Pin;
 800114c:	2302      	movs	r3, #2
 800114e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001150:	2300      	movs	r3, #0
 8001152:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001154:	2302      	movs	r3, #2
 8001156:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(JMP_Flight_GPIO_Port, &GPIO_InitStruct);
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	4619      	mov	r1, r3
 800115e:	482c      	ldr	r0, [pc, #176]	; (8001210 <MX_GPIO_Init+0x1c4>)
 8001160:	f000 fea6 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8001164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001168:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116a:	2301      	movs	r3, #1
 800116c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800116e:	2301      	movs	r3, #1
 8001170:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2300      	movs	r3, #0
 8001174:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	4619      	mov	r1, r3
 800117c:	4824      	ldr	r0, [pc, #144]	; (8001210 <MX_GPIO_Init+0x1c4>)
 800117e:	f000 fe97 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8001182:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001186:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001188:	2301      	movs	r3, #1
 800118a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800118c:	2302      	movs	r3, #2
 800118e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2300      	movs	r3, #0
 8001192:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4619      	mov	r1, r3
 800119a:	481d      	ldr	r0, [pc, #116]	; (8001210 <MX_GPIO_Init+0x1c4>)
 800119c:	f000 fe88 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_WP_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_WP_Pin|SPI1_CS_Pin;
 80011a0:	f244 0304 	movw	r3, #16388	; 0x4004
 80011a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a6:	2301      	movs	r3, #1
 80011a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011aa:	2301      	movs	r3, #1
 80011ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ae:	2300      	movs	r3, #0
 80011b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	4619      	mov	r1, r3
 80011b8:	4816      	ldr	r0, [pc, #88]	; (8001214 <MX_GPIO_Init+0x1c8>)
 80011ba:	f000 fe79 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80011be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80011c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c4:	2302      	movs	r3, #2
 80011c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011cc:	2303      	movs	r3, #3
 80011ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80011d0:	2309      	movs	r3, #9
 80011d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	4619      	mov	r1, r3
 80011da:	480f      	ldr	r0, [pc, #60]	; (8001218 <MX_GPIO_Init+0x1cc>)
 80011dc:	f000 fe68 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011e0:	2308      	movs	r3, #8
 80011e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e4:	2302      	movs	r3, #2
 80011e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ec:	2303      	movs	r3, #3
 80011ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011f0:	2305      	movs	r3, #5
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	4619      	mov	r1, r3
 80011fa:	4806      	ldr	r0, [pc, #24]	; (8001214 <MX_GPIO_Init+0x1c8>)
 80011fc:	f000 fe58 	bl	8001eb0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001200:	bf00      	nop
 8001202:	3728      	adds	r7, #40	; 0x28
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40023800 	.word	0x40023800
 800120c:	40020800 	.word	0x40020800
 8001210:	40020400 	.word	0x40020400
 8001214:	40020c00 	.word	0x40020c00
 8001218:	40020000 	.word	0x40020000

0800121c <clean_data_buffer>:

/* USER CODE BEGIN 4 */
void clean_data_buffer() {
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
    for (int i = 0; i < PAGE_SIZE; ++i) {
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	e007      	b.n	8001238 <clean_data_buffer+0x1c>
        data_buffer[i] = 0xFF;  // Initialize each element to 0xFF
 8001228:	4a08      	ldr	r2, [pc, #32]	; (800124c <clean_data_buffer+0x30>)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4413      	add	r3, r2
 800122e:	22ff      	movs	r2, #255	; 0xff
 8001230:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < PAGE_SIZE; ++i) {
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3301      	adds	r3, #1
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2bff      	cmp	r3, #255	; 0xff
 800123c:	ddf4      	ble.n	8001228 <clean_data_buffer+0xc>
    }
}
 800123e:	bf00      	nop
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	200001f0 	.word	0x200001f0

08001250 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001254:	b672      	cpsid	i
}
 8001256:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001258:	e7fe      	b.n	8001258 <Error_Handler+0x8>
	...

0800125c <initialise_rtc_default>:
    .Month = RTC_MONTH_JANUARY, // Set default month (e.g., January)
    .Date = 1, // Set default day of the month
    .Year = 24 // Set default year (e.g., 2021)
};

void initialise_rtc_default(RTC_HandleTypeDef* hrtc) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	// Reset RTC on boot
	HAL_RTC_MspInit(hrtc); // Initialize RTC hardware
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f000 f90d 	bl	8001484 <HAL_RTC_MspInit>
	HAL_RTC_SetTime(hrtc, &defaultTime, RTC_FORMAT_BIN); // Set default time
 800126a:	2200      	movs	r2, #0
 800126c:	4906      	ldr	r1, [pc, #24]	; (8001288 <initialise_rtc_default+0x2c>)
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f002 ff27 	bl	80040c2 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(hrtc, &defaultDate, RTC_FORMAT_BIN); // Set default date
 8001274:	2200      	movs	r2, #0
 8001276:	4905      	ldr	r1, [pc, #20]	; (800128c <initialise_rtc_default+0x30>)
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f003 f81a 	bl	80042b2 <HAL_RTC_SetDate>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200002f8 	.word	0x200002f8
 800128c:	20000010 	.word	0x20000010

08001290 <getTimestampMilliseconds>:

uint32_t getTimestampMilliseconds(RTC_HandleTypeDef* hrtc) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b08c      	sub	sp, #48	; 0x30
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
    RTC_TimeTypeDef rtcTime;
    RTC_DateTypeDef rtcDate;

    // Read RTC time and date
    HAL_RTC_GetTime(hrtc, &rtcTime, RTC_FORMAT_BIN);
 8001298:	f107 0310 	add.w	r3, r7, #16
 800129c:	2200      	movs	r2, #0
 800129e:	4619      	mov	r1, r3
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f002 ffa8 	bl	80041f6 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(hrtc, &rtcDate, RTC_FORMAT_BIN);
 80012a6:	f107 030c 	add.w	r3, r7, #12
 80012aa:	2200      	movs	r2, #0
 80012ac:	4619      	mov	r1, r3
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f003 f883 	bl	80043ba <HAL_RTC_GetDate>

    // Calculate timestamp in milliseconds
    uint32_t timestampSeconds = rtcTime.Seconds + rtcTime.Minutes * 60 + rtcTime.Hours * 3600;
 80012b4:	7cbb      	ldrb	r3, [r7, #18]
 80012b6:	4619      	mov	r1, r3
 80012b8:	7c7b      	ldrb	r3, [r7, #17]
 80012ba:	461a      	mov	r2, r3
 80012bc:	4613      	mov	r3, r2
 80012be:	011b      	lsls	r3, r3, #4
 80012c0:	1a9b      	subs	r3, r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	18ca      	adds	r2, r1, r3
 80012c6:	7c3b      	ldrb	r3, [r7, #16]
 80012c8:	4619      	mov	r1, r3
 80012ca:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80012ce:	fb01 f303 	mul.w	r3, r1, r3
 80012d2:	4413      	add	r3, r2
 80012d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t timestampMilliseconds = timestampSeconds * 1000;
 80012d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012dc:	fb02 f303 	mul.w	r3, r2, r3
 80012e0:	62bb      	str	r3, [r7, #40]	; 0x28
    float subsecondsFraction = (float)(rtcTime.SecondFraction - rtcTime.SubSeconds) / (rtcTime.SecondFraction + 1);
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	ee07 3a90 	vmov	s15, r3
 80012ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	3301      	adds	r3, #1
 80012f4:	ee07 3a90 	vmov	s15, r3
 80012f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001300:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    timestampMilliseconds += subsecondsFraction * 1000;
 8001304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001306:	ee07 3a90 	vmov	s15, r3
 800130a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800130e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001312:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001334 <getTimestampMilliseconds+0xa4>
 8001316:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800131a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800131e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001322:	ee17 3a90 	vmov	r3, s15
 8001326:	62bb      	str	r3, [r7, #40]	; 0x28

    return timestampMilliseconds;
 8001328:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800132a:	4618      	mov	r0, r3
 800132c:	3730      	adds	r7, #48	; 0x30
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	447a0000 	.word	0x447a0000

08001338 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	4b10      	ldr	r3, [pc, #64]	; (8001384 <HAL_MspInit+0x4c>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001346:	4a0f      	ldr	r2, [pc, #60]	; (8001384 <HAL_MspInit+0x4c>)
 8001348:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800134c:	6453      	str	r3, [r2, #68]	; 0x44
 800134e:	4b0d      	ldr	r3, [pc, #52]	; (8001384 <HAL_MspInit+0x4c>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	603b      	str	r3, [r7, #0]
 800135e:	4b09      	ldr	r3, [pc, #36]	; (8001384 <HAL_MspInit+0x4c>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	4a08      	ldr	r2, [pc, #32]	; (8001384 <HAL_MspInit+0x4c>)
 8001364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001368:	6413      	str	r3, [r2, #64]	; 0x40
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <HAL_MspInit+0x4c>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001372:	603b      	str	r3, [r7, #0]
 8001374:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	40023800 	.word	0x40023800

08001388 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08c      	sub	sp, #48	; 0x30
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	f107 031c 	add.w	r3, r7, #28
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a33      	ldr	r2, [pc, #204]	; (8001474 <HAL_I2C_MspInit+0xec>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d12d      	bne.n	8001406 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]
 80013ae:	4b32      	ldr	r3, [pc, #200]	; (8001478 <HAL_I2C_MspInit+0xf0>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a31      	ldr	r2, [pc, #196]	; (8001478 <HAL_I2C_MspInit+0xf0>)
 80013b4:	f043 0302 	orr.w	r3, r3, #2
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b2f      	ldr	r3, [pc, #188]	; (8001478 <HAL_I2C_MspInit+0xf0>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	61bb      	str	r3, [r7, #24]
 80013c4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013cc:	2312      	movs	r3, #18
 80013ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d4:	2303      	movs	r3, #3
 80013d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013d8:	2304      	movs	r3, #4
 80013da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013dc:	f107 031c 	add.w	r3, r7, #28
 80013e0:	4619      	mov	r1, r3
 80013e2:	4826      	ldr	r0, [pc, #152]	; (800147c <HAL_I2C_MspInit+0xf4>)
 80013e4:	f000 fd64 	bl	8001eb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]
 80013ec:	4b22      	ldr	r3, [pc, #136]	; (8001478 <HAL_I2C_MspInit+0xf0>)
 80013ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f0:	4a21      	ldr	r2, [pc, #132]	; (8001478 <HAL_I2C_MspInit+0xf0>)
 80013f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013f6:	6413      	str	r3, [r2, #64]	; 0x40
 80013f8:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <HAL_I2C_MspInit+0xf0>)
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001400:	617b      	str	r3, [r7, #20]
 8001402:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001404:	e031      	b.n	800146a <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a1d      	ldr	r2, [pc, #116]	; (8001480 <HAL_I2C_MspInit+0xf8>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d12c      	bne.n	800146a <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001410:	2300      	movs	r3, #0
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	4b18      	ldr	r3, [pc, #96]	; (8001478 <HAL_I2C_MspInit+0xf0>)
 8001416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001418:	4a17      	ldr	r2, [pc, #92]	; (8001478 <HAL_I2C_MspInit+0xf0>)
 800141a:	f043 0302 	orr.w	r3, r3, #2
 800141e:	6313      	str	r3, [r2, #48]	; 0x30
 8001420:	4b15      	ldr	r3, [pc, #84]	; (8001478 <HAL_I2C_MspInit+0xf0>)
 8001422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800142c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001432:	2312      	movs	r3, #18
 8001434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143a:	2303      	movs	r3, #3
 800143c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800143e:	2304      	movs	r3, #4
 8001440:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001442:	f107 031c 	add.w	r3, r7, #28
 8001446:	4619      	mov	r1, r3
 8001448:	480c      	ldr	r0, [pc, #48]	; (800147c <HAL_I2C_MspInit+0xf4>)
 800144a:	f000 fd31 	bl	8001eb0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <HAL_I2C_MspInit+0xf0>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	4a08      	ldr	r2, [pc, #32]	; (8001478 <HAL_I2C_MspInit+0xf0>)
 8001458:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800145c:	6413      	str	r3, [r2, #64]	; 0x40
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_I2C_MspInit+0xf0>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
}
 800146a:	bf00      	nop
 800146c:	3730      	adds	r7, #48	; 0x30
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40005400 	.word	0x40005400
 8001478:	40023800 	.word	0x40023800
 800147c:	40020400 	.word	0x40020400
 8001480:	40005800 	.word	0x40005800

08001484 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08e      	sub	sp, #56	; 0x38
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800148c:	f107 0308 	add.w	r3, r7, #8
 8001490:	2230      	movs	r2, #48	; 0x30
 8001492:	2100      	movs	r1, #0
 8001494:	4618      	mov	r0, r3
 8001496:	f005 faeb 	bl	8006a70 <memset>
  if(hrtc->Instance==RTC)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a0c      	ldr	r2, [pc, #48]	; (80014d0 <HAL_RTC_MspInit+0x4c>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d111      	bne.n	80014c8 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80014a4:	2320      	movs	r3, #32
 80014a6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80014a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ac:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014ae:	f107 0308 	add.w	r3, r7, #8
 80014b2:	4618      	mov	r0, r3
 80014b4:	f002 fbc2 	bl	8003c3c <HAL_RCCEx_PeriphCLKConfig>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80014be:	f7ff fec7 	bl	8001250 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80014c2:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <HAL_RTC_MspInit+0x50>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80014c8:	bf00      	nop
 80014ca:	3738      	adds	r7, #56	; 0x38
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40002800 	.word	0x40002800
 80014d4:	42470e3c 	.word	0x42470e3c

080014d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08a      	sub	sp, #40	; 0x28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a19      	ldr	r2, [pc, #100]	; (800155c <HAL_SPI_MspInit+0x84>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d12b      	bne.n	8001552 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	4b18      	ldr	r3, [pc, #96]	; (8001560 <HAL_SPI_MspInit+0x88>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	4a17      	ldr	r2, [pc, #92]	; (8001560 <HAL_SPI_MspInit+0x88>)
 8001504:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001508:	6453      	str	r3, [r2, #68]	; 0x44
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <HAL_SPI_MspInit+0x88>)
 800150c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	4b11      	ldr	r3, [pc, #68]	; (8001560 <HAL_SPI_MspInit+0x88>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a10      	ldr	r2, [pc, #64]	; (8001560 <HAL_SPI_MspInit+0x88>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <HAL_SPI_MspInit+0x88>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001532:	23e0      	movs	r3, #224	; 0xe0
 8001534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001536:	2302      	movs	r3, #2
 8001538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153e:	2303      	movs	r3, #3
 8001540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001542:	2305      	movs	r3, #5
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001546:	f107 0314 	add.w	r3, r7, #20
 800154a:	4619      	mov	r1, r3
 800154c:	4805      	ldr	r0, [pc, #20]	; (8001564 <HAL_SPI_MspInit+0x8c>)
 800154e:	f000 fcaf 	bl	8001eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001552:	bf00      	nop
 8001554:	3728      	adds	r7, #40	; 0x28
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40013000 	.word	0x40013000
 8001560:	40023800 	.word	0x40023800
 8001564:	40020000 	.word	0x40020000

08001568 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a0e      	ldr	r2, [pc, #56]	; (80015b0 <HAL_TIM_Base_MspInit+0x48>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d115      	bne.n	80015a6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	4b0d      	ldr	r3, [pc, #52]	; (80015b4 <HAL_TIM_Base_MspInit+0x4c>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	4a0c      	ldr	r2, [pc, #48]	; (80015b4 <HAL_TIM_Base_MspInit+0x4c>)
 8001584:	f043 0310 	orr.w	r3, r3, #16
 8001588:	6413      	str	r3, [r2, #64]	; 0x40
 800158a:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <HAL_TIM_Base_MspInit+0x4c>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	f003 0310 	and.w	r3, r3, #16
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	2100      	movs	r1, #0
 800159a:	2036      	movs	r0, #54	; 0x36
 800159c:	f000 fbbf 	bl	8001d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015a0:	2036      	movs	r0, #54	; 0x36
 80015a2:	f000 fbd8 	bl	8001d56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40001000 	.word	0x40001000
 80015b4:	40023800 	.word	0x40023800

080015b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08a      	sub	sp, #40	; 0x28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a1d      	ldr	r2, [pc, #116]	; (800164c <HAL_UART_MspInit+0x94>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d133      	bne.n	8001642 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]
 80015de:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <HAL_UART_MspInit+0x98>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	4a1b      	ldr	r2, [pc, #108]	; (8001650 <HAL_UART_MspInit+0x98>)
 80015e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ea:	4b19      	ldr	r3, [pc, #100]	; (8001650 <HAL_UART_MspInit+0x98>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f2:	613b      	str	r3, [r7, #16]
 80015f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <HAL_UART_MspInit+0x98>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a14      	ldr	r2, [pc, #80]	; (8001650 <HAL_UART_MspInit+0x98>)
 8001600:	f043 0308 	orr.w	r3, r3, #8
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b12      	ldr	r3, [pc, #72]	; (8001650 <HAL_UART_MspInit+0x98>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0308 	and.w	r3, r3, #8
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001612:	2360      	movs	r3, #96	; 0x60
 8001614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001616:	2302      	movs	r3, #2
 8001618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161e:	2303      	movs	r3, #3
 8001620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001622:	2307      	movs	r3, #7
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	4619      	mov	r1, r3
 800162c:	4809      	ldr	r0, [pc, #36]	; (8001654 <HAL_UART_MspInit+0x9c>)
 800162e:	f000 fc3f 	bl	8001eb0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2100      	movs	r1, #0
 8001636:	2026      	movs	r0, #38	; 0x26
 8001638:	f000 fb71 	bl	8001d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800163c:	2026      	movs	r0, #38	; 0x26
 800163e:	f000 fb8a 	bl	8001d56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001642:	bf00      	nop
 8001644:	3728      	adds	r7, #40	; 0x28
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40004400 	.word	0x40004400
 8001650:	40023800 	.word	0x40023800
 8001654:	40020c00 	.word	0x40020c00

08001658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800165c:	e7fe      	b.n	800165c <NMI_Handler+0x4>

0800165e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001662:	e7fe      	b.n	8001662 <HardFault_Handler+0x4>

08001664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <MemManage_Handler+0x4>

0800166a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800166e:	e7fe      	b.n	800166e <BusFault_Handler+0x4>

08001670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001674:	e7fe      	b.n	8001674 <UsageFault_Handler+0x4>

08001676 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a4:	f000 fa40 	bl	8001b28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}

080016ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <USART2_IRQHandler+0x10>)
 80016b2:	f004 fa65 	bl	8005b80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200001a4 	.word	0x200001a4

080016c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016c6:	482b      	ldr	r0, [pc, #172]	; (8001774 <TIM6_DAC_IRQHandler+0xb4>)
 80016c8:	f003 fe49 	bl	800535e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80016cc:	2180      	movs	r1, #128	; 0x80
 80016ce:	482a      	ldr	r0, [pc, #168]	; (8001778 <TIM6_DAC_IRQHandler+0xb8>)
 80016d0:	f000 fdcb 	bl	800226a <HAL_GPIO_TogglePin>

  uint8_t accel_data[6];
  readAccelerometer(accel_data, &hi2c1);
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	4929      	ldr	r1, [pc, #164]	; (800177c <TIM6_DAC_IRQHandler+0xbc>)
 80016d8:	4618      	mov	r0, r3
 80016da:	f7fe ff73 	bl	80005c4 <readAccelerometer>

  uint32_t time = getTimestampMilliseconds(&hrtc);
 80016de:	4828      	ldr	r0, [pc, #160]	; (8001780 <TIM6_DAC_IRQHandler+0xc0>)
 80016e0:	f7ff fdd6 	bl	8001290 <getTimestampMilliseconds>
 80016e4:	60f8      	str	r0, [r7, #12]

  // Store the time in the buffer
  if (byte_tracker < (PAGE_SIZE - READ_SIZE)) {
 80016e6:	4b27      	ldr	r3, [pc, #156]	; (8001784 <TIM6_DAC_IRQHandler+0xc4>)
 80016e8:	881b      	ldrh	r3, [r3, #0]
 80016ea:	2bf5      	cmp	r3, #245	; 0xf5
 80016ec:	d83d      	bhi.n	800176a <TIM6_DAC_IRQHandler+0xaa>
    data_buffer[byte_tracker + 0] = (uint8_t) ((time >> 24) & 0xFF); // Most significant byte (MSB)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	0e19      	lsrs	r1, r3, #24
 80016f2:	4b24      	ldr	r3, [pc, #144]	; (8001784 <TIM6_DAC_IRQHandler+0xc4>)
 80016f4:	881b      	ldrh	r3, [r3, #0]
 80016f6:	461a      	mov	r2, r3
 80016f8:	b2c9      	uxtb	r1, r1
 80016fa:	4b23      	ldr	r3, [pc, #140]	; (8001788 <TIM6_DAC_IRQHandler+0xc8>)
 80016fc:	5499      	strb	r1, [r3, r2]
    data_buffer[byte_tracker + 1] = (uint8_t) ((time >> 16) & 0xFF);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	0c1a      	lsrs	r2, r3, #16
 8001702:	4b20      	ldr	r3, [pc, #128]	; (8001784 <TIM6_DAC_IRQHandler+0xc4>)
 8001704:	881b      	ldrh	r3, [r3, #0]
 8001706:	3301      	adds	r3, #1
 8001708:	b2d1      	uxtb	r1, r2
 800170a:	4a1f      	ldr	r2, [pc, #124]	; (8001788 <TIM6_DAC_IRQHandler+0xc8>)
 800170c:	54d1      	strb	r1, [r2, r3]
    data_buffer[byte_tracker + 2] = (uint8_t) ((time >> 8) & 0xFF);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	0a1a      	lsrs	r2, r3, #8
 8001712:	4b1c      	ldr	r3, [pc, #112]	; (8001784 <TIM6_DAC_IRQHandler+0xc4>)
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	3302      	adds	r3, #2
 8001718:	b2d1      	uxtb	r1, r2
 800171a:	4a1b      	ldr	r2, [pc, #108]	; (8001788 <TIM6_DAC_IRQHandler+0xc8>)
 800171c:	54d1      	strb	r1, [r2, r3]
    data_buffer[byte_tracker + 3] = (uint8_t) (time & 0xFF); // Least significant byte (LSB)
 800171e:	4b19      	ldr	r3, [pc, #100]	; (8001784 <TIM6_DAC_IRQHandler+0xc4>)
 8001720:	881b      	ldrh	r3, [r3, #0]
 8001722:	3303      	adds	r3, #3
 8001724:	68fa      	ldr	r2, [r7, #12]
 8001726:	b2d1      	uxtb	r1, r2
 8001728:	4a17      	ldr	r2, [pc, #92]	; (8001788 <TIM6_DAC_IRQHandler+0xc8>)
 800172a:	54d1      	strb	r1, [r2, r3]

    uint8_t array_ptr = 4;
 800172c:	2304      	movs	r3, #4
 800172e:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < 6; i++) {
 8001730:	2300      	movs	r3, #0
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	e010      	b.n	8001758 <TIM6_DAC_IRQHandler+0x98>
      data_buffer[byte_tracker + array_ptr] = accel_data[i];
 8001736:	4b13      	ldr	r3, [pc, #76]	; (8001784 <TIM6_DAC_IRQHandler+0xc4>)
 8001738:	881b      	ldrh	r3, [r3, #0]
 800173a:	461a      	mov	r2, r3
 800173c:	7dfb      	ldrb	r3, [r7, #23]
 800173e:	4413      	add	r3, r2
 8001740:	1d39      	adds	r1, r7, #4
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	440a      	add	r2, r1
 8001746:	7811      	ldrb	r1, [r2, #0]
 8001748:	4a0f      	ldr	r2, [pc, #60]	; (8001788 <TIM6_DAC_IRQHandler+0xc8>)
 800174a:	54d1      	strb	r1, [r2, r3]
      array_ptr += 1;
 800174c:	7dfb      	ldrb	r3, [r7, #23]
 800174e:	3301      	adds	r3, #1
 8001750:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < 6; i++) {
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	3301      	adds	r3, #1
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	2b05      	cmp	r3, #5
 800175c:	ddeb      	ble.n	8001736 <TIM6_DAC_IRQHandler+0x76>
    }
    byte_tracker = byte_tracker + 10;
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <TIM6_DAC_IRQHandler+0xc4>)
 8001760:	881b      	ldrh	r3, [r3, #0]
 8001762:	330a      	adds	r3, #10
 8001764:	b29a      	uxth	r2, r3
 8001766:	4b07      	ldr	r3, [pc, #28]	; (8001784 <TIM6_DAC_IRQHandler+0xc4>)
 8001768:	801a      	strh	r2, [r3, #0]
  }
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	2000015c 	.word	0x2000015c
 8001778:	40020400 	.word	0x40020400
 800177c:	2000003c 	.word	0x2000003c
 8001780:	200000e4 	.word	0x200000e4
 8001784:	200002f4 	.word	0x200002f4
 8001788:	200001f0 	.word	0x200001f0

0800178c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800178c:	b580      	push	{r7, lr}
 800178e:	b0ca      	sub	sp, #296	; 0x128
 8001790:	af00      	add	r7, sp, #0
 8001792:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001796:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800179a:	6018      	str	r0, [r3, #0]
	// Read the received data
	uint8_t received_data = huart2.Instance->DR;
 800179c:	4b73      	ldr	r3, [pc, #460]	; (800196c <HAL_UART_RxCpltCallback+0x1e0>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

	// Check if the received data matches the expected value (0x68 = 'h')
	if (received_data == 0x68) {
 80017a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80017aa:	2b68      	cmp	r3, #104	; 0x68
 80017ac:	d112      	bne.n	80017d4 <HAL_UART_RxCpltCallback+0x48>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET);		// Activate the "write out" LED
 80017ae:	2201      	movs	r2, #1
 80017b0:	2180      	movs	r1, #128	; 0x80
 80017b2:	486f      	ldr	r0, [pc, #444]	; (8001970 <HAL_UART_RxCpltCallback+0x1e4>)
 80017b4:	f000 fd40 	bl	8002238 <HAL_GPIO_WritePin>
		send_uart_string(huart, "**Heartbeat**\r\n");			// Transmit the data
 80017b8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017bc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80017c0:	496c      	ldr	r1, [pc, #432]	; (8001974 <HAL_UART_RxCpltCallback+0x1e8>)
 80017c2:	6818      	ldr	r0, [r3, #0]
 80017c4:	f000 f90b 	bl	80019de <send_uart_string>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);	// Deactivate the "write out" LED
 80017c8:	2200      	movs	r2, #0
 80017ca:	2180      	movs	r1, #128	; 0x80
 80017cc:	4868      	ldr	r0, [pc, #416]	; (8001970 <HAL_UART_RxCpltCallback+0x1e4>)
 80017ce:	f000 fd33 	bl	8002238 <HAL_GPIO_WritePin>
 80017d2:	e0c0      	b.n	8001956 <HAL_UART_RxCpltCallback+0x1ca>
	}

	// Check if the received data matches the expected value (0x65 = 'e')
	else if (received_data == 0x65) {
 80017d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80017d8:	2b65      	cmp	r3, #101	; 0x65
 80017da:	d12d      	bne.n	8001838 <HAL_UART_RxCpltCallback+0xac>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET);		// Activate the "write out" LED
 80017dc:	2201      	movs	r2, #1
 80017de:	2180      	movs	r1, #128	; 0x80
 80017e0:	4863      	ldr	r0, [pc, #396]	; (8001970 <HAL_UART_RxCpltCallback+0x1e4>)
 80017e2:	f000 fd29 	bl	8002238 <HAL_GPIO_WritePin>
		if (erase_chip_spi(&hspi1) == HAL_OK) {
 80017e6:	4864      	ldr	r0, [pc, #400]	; (8001978 <HAL_UART_RxCpltCallback+0x1ec>)
 80017e8:	f7ff f80c 	bl	8000804 <erase_chip_spi>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d114      	bne.n	800181c <HAL_UART_RxCpltCallback+0x90>
			send_uart_string(huart, "Successful Chip Erase\r\n");
 80017f2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017f6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80017fa:	4960      	ldr	r1, [pc, #384]	; (800197c <HAL_UART_RxCpltCallback+0x1f0>)
 80017fc:	6818      	ldr	r0, [r3, #0]
 80017fe:	f000 f8ee 	bl	80019de <send_uart_string>
			next_blank_page = find_next_blank_page(&hspi1, huart, &end_of_flash);
 8001802:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001806:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800180a:	4a5d      	ldr	r2, [pc, #372]	; (8001980 <HAL_UART_RxCpltCallback+0x1f4>)
 800180c:	6819      	ldr	r1, [r3, #0]
 800180e:	485a      	ldr	r0, [pc, #360]	; (8001978 <HAL_UART_RxCpltCallback+0x1ec>)
 8001810:	f7ff f8e8 	bl	80009e4 <find_next_blank_page>
 8001814:	4603      	mov	r3, r0
 8001816:	4a5b      	ldr	r2, [pc, #364]	; (8001984 <HAL_UART_RxCpltCallback+0x1f8>)
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	e007      	b.n	800182c <HAL_UART_RxCpltCallback+0xa0>
		} else {
			send_uart_string(huart, "Error during chip erase. Please check the connection and try again.\r\n");
 800181c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001820:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001824:	4958      	ldr	r1, [pc, #352]	; (8001988 <HAL_UART_RxCpltCallback+0x1fc>)
 8001826:	6818      	ldr	r0, [r3, #0]
 8001828:	f000 f8d9 	bl	80019de <send_uart_string>
		}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);	// Deactivate the "write out" LED
 800182c:	2200      	movs	r2, #0
 800182e:	2180      	movs	r1, #128	; 0x80
 8001830:	484f      	ldr	r0, [pc, #316]	; (8001970 <HAL_UART_RxCpltCallback+0x1e4>)
 8001832:	f000 fd01 	bl	8002238 <HAL_GPIO_WritePin>
 8001836:	e08e      	b.n	8001956 <HAL_UART_RxCpltCallback+0x1ca>
	}

	// Check if the received data matches the expected value (0x72 = 'r')
	else if (received_data == 0x72) {
 8001838:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800183c:	2b72      	cmp	r3, #114	; 0x72
 800183e:	d145      	bne.n	80018cc <HAL_UART_RxCpltCallback+0x140>
		uint32_t num_of_pages = next_blank_page;
 8001840:	4b50      	ldr	r3, [pc, #320]	; (8001984 <HAL_UART_RxCpltCallback+0x1f8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		if(num_of_pages == 0) {
 8001848:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800184c:	2b00      	cmp	r3, #0
 800184e:	d103      	bne.n	8001858 <HAL_UART_RxCpltCallback+0xcc>
			num_of_pages = PAGE_SIZE;
 8001850:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001854:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		}
		num_of_pages = num_of_pages/PAGE_SIZE;
 8001858:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800185c:	0a1b      	lsrs	r3, r3, #8
 800185e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		uint32_t address = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET);		// Activate the "write out" LED
 8001868:	2201      	movs	r2, #1
 800186a:	2180      	movs	r1, #128	; 0x80
 800186c:	4840      	ldr	r0, [pc, #256]	; (8001970 <HAL_UART_RxCpltCallback+0x1e4>)
 800186e:	f000 fce3 	bl	8002238 <HAL_GPIO_WritePin>

		for (int i = 0; i < (num_of_pages); i++) {
 8001872:	2300      	movs	r3, #0
 8001874:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001878:	e01c      	b.n	80018b4 <HAL_UART_RxCpltCallback+0x128>
			uint8_t page[PAGE_SIZE];
			read_page_spi(page, &hspi1, address);//
 800187a:	f107 030c 	add.w	r3, r7, #12
 800187e:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8001882:	493d      	ldr	r1, [pc, #244]	; (8001978 <HAL_UART_RxCpltCallback+0x1ec>)
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff f933 	bl	8000af0 <read_page_spi>
			uart_transmit_page(huart, page);						// Transmit the data//
 800188a:	f107 020c 	add.w	r2, r7, #12
 800188e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001892:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001896:	4611      	mov	r1, r2
 8001898:	6818      	ldr	r0, [r3, #0]
 800189a:	f000 f88f 	bl	80019bc <uart_transmit_page>
			address += PAGE_SIZE;
 800189e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80018a2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80018a6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
		for (int i = 0; i < (num_of_pages); i++) {
 80018aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80018ae:	3301      	adds	r3, #1
 80018b0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80018b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80018b8:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80018bc:	429a      	cmp	r2, r3
 80018be:	d8dc      	bhi.n	800187a <HAL_UART_RxCpltCallback+0xee>
		}

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);	// Deactivate the "write out" LED
 80018c0:	2200      	movs	r2, #0
 80018c2:	2180      	movs	r1, #128	; 0x80
 80018c4:	482a      	ldr	r0, [pc, #168]	; (8001970 <HAL_UART_RxCpltCallback+0x1e4>)
 80018c6:	f000 fcb7 	bl	8002238 <HAL_GPIO_WritePin>
 80018ca:	e044      	b.n	8001956 <HAL_UART_RxCpltCallback+0x1ca>

		next_blank_page += PAGE_SIZE;
	}
************************************************************************************/
	// Read Accelerometer CTRL4 (data_rx = "c")
	else if (received_data == 0x63) {
 80018cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80018d0:	2b63      	cmp	r3, #99	; 0x63
 80018d2:	d10e      	bne.n	80018f2 <HAL_UART_RxCpltCallback+0x166>
		uint8_t ctrl = readAccel_ctrl_rg1(&hi2c1);
 80018d4:	482d      	ldr	r0, [pc, #180]	; (800198c <HAL_UART_RxCpltCallback+0x200>)
 80018d6:	f7fe ff3f 	bl	8000758 <readAccel_ctrl_rg1>
 80018da:	4603      	mov	r3, r0
 80018dc:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		HAL_UART_Transmit(&huart2, &ctrl, 1, HAL_MAX_DELAY);
 80018e0:	f207 1115 	addw	r1, r7, #277	; 0x115
 80018e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018e8:	2201      	movs	r2, #1
 80018ea:	4820      	ldr	r0, [pc, #128]	; (800196c <HAL_UART_RxCpltCallback+0x1e0>)
 80018ec:	f003 ffe6 	bl	80058bc <HAL_UART_Transmit>
 80018f0:	e031      	b.n	8001956 <HAL_UART_RxCpltCallback+0x1ca>
	}

	// Read the accelerometer and print to the UART (data_rx = "a")
	else if (received_data == 0x61) {
 80018f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80018f6:	2b61      	cmp	r3, #97	; 0x61
 80018f8:	d11d      	bne.n	8001936 <HAL_UART_RxCpltCallback+0x1aa>
		uint8_t readings[6];
		readAccelerometer(readings, &hi2c1);
 80018fa:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80018fe:	4923      	ldr	r1, [pc, #140]	; (800198c <HAL_UART_RxCpltCallback+0x200>)
 8001900:	4618      	mov	r0, r3
 8001902:	f7fe fe5f 	bl	80005c4 <readAccelerometer>
		for (int i = 0; i < 6; i++) {
 8001906:	2300      	movs	r3, #0
 8001908:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800190c:	e00e      	b.n	800192c <HAL_UART_RxCpltCallback+0x1a0>
			send_uart_hex(&huart2, readings[i]);
 800190e:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8001912:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001916:	4413      	add	r3, r2
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	4619      	mov	r1, r3
 800191c:	4813      	ldr	r0, [pc, #76]	; (800196c <HAL_UART_RxCpltCallback+0x1e0>)
 800191e:	f000 f872 	bl	8001a06 <send_uart_hex>
		for (int i = 0; i < 6; i++) {
 8001922:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001926:	3301      	adds	r3, #1
 8001928:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800192c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001930:	2b05      	cmp	r3, #5
 8001932:	ddec      	ble.n	800190e <HAL_UART_RxCpltCallback+0x182>
 8001934:	e00f      	b.n	8001956 <HAL_UART_RxCpltCallback+0x1ca>
		}
	}

	// Read the temp sensor and print to the UART (data_rx = "t")
	else if (received_data == 0x74) {
 8001936:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800193a:	2b74      	cmp	r3, #116	; 0x74
 800193c:	d10b      	bne.n	8001956 <HAL_UART_RxCpltCallback+0x1ca>
		uint8_t reading = readBME280_id_reg(&hi2c2);
 800193e:	4814      	ldr	r0, [pc, #80]	; (8001990 <HAL_UART_RxCpltCallback+0x204>)
 8001940:	f7fe ff38 	bl	80007b4 <readBME280_id_reg>
 8001944:	4603      	mov	r3, r0
 8001946:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
		send_uart_hex(&huart2, reading);
 800194a:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800194e:	4619      	mov	r1, r3
 8001950:	4806      	ldr	r0, [pc, #24]	; (800196c <HAL_UART_RxCpltCallback+0x1e0>)
 8001952:	f000 f858 	bl	8001a06 <send_uart_hex>
	}


	HAL_UART_Receive_IT(&huart2, UARTRxData, 1);
 8001956:	2201      	movs	r2, #1
 8001958:	490e      	ldr	r1, [pc, #56]	; (8001994 <HAL_UART_RxCpltCallback+0x208>)
 800195a:	4804      	ldr	r0, [pc, #16]	; (800196c <HAL_UART_RxCpltCallback+0x1e0>)
 800195c:	f004 f839 	bl	80059d2 <HAL_UART_Receive_IT>
}
 8001960:	bf00      	nop
 8001962:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	200001a4 	.word	0x200001a4
 8001970:	40020400 	.word	0x40020400
 8001974:	08006ae0 	.word	0x08006ae0
 8001978:	20000104 	.word	0x20000104
 800197c:	08006af0 	.word	0x08006af0
 8001980:	200002f6 	.word	0x200002f6
 8001984:	200002f0 	.word	0x200002f0
 8001988:	08006b08 	.word	0x08006b08
 800198c:	2000003c 	.word	0x2000003c
 8001990:	20000090 	.word	0x20000090
 8001994:	200001ec 	.word	0x200001ec

08001998 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <SystemInit+0x20>)
 800199e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019a2:	4a05      	ldr	r2, [pc, #20]	; (80019b8 <SystemInit+0x20>)
 80019a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <uart_transmit_page>:

#include "uart_transmit.h"
/**
 * Transmit one single page over the UART interface
 */
void uart_transmit_page(UART_HandleTypeDef *huart, uint8_t page[PAGE_SIZE]) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huart, page, PAGE_SIZE, HAL_MAX_DELAY);
 80019c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019ce:	6839      	ldr	r1, [r7, #0]
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f003 ff73 	bl	80058bc <HAL_UART_Transmit>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <send_uart_string>:

void send_uart_string(UART_HandleTypeDef *huart, const char *str) {
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
 80019e6:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 80019e8:	6838      	ldr	r0, [r7, #0]
 80019ea:	f7fe fbff 	bl	80001ec <strlen>
 80019ee:	4603      	mov	r3, r0
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019f6:	6839      	ldr	r1, [r7, #0]
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f003 ff5f 	bl	80058bc <HAL_UART_Transmit>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <send_uart_hex>:
	// Call the send_uart_string function to send the value to UART
	send_uart_string(huart, value_str);
	send_uart_string(huart, "\r\n");
}

void send_uart_hex(UART_HandleTypeDef *huart, uint8_t value) {
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b084      	sub	sp, #16
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
 8001a0e:	460b      	mov	r3, r1
 8001a10:	70fb      	strb	r3, [r7, #3]
	uint8_t buffer[1];
	buffer[0] = value;
 8001a12:	78fb      	ldrb	r3, [r7, #3]
 8001a14:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(huart, buffer, 1, HAL_MAX_DELAY);
 8001a16:	f107 010c 	add.w	r1, r7, #12
 8001a1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a1e:	2201      	movs	r2, #1
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f003 ff4b 	bl	80058bc <HAL_UART_Transmit>
}
 8001a26:	bf00      	nop
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a68 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a34:	f7ff ffb0 	bl	8001998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a38:	480c      	ldr	r0, [pc, #48]	; (8001a6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a3a:	490d      	ldr	r1, [pc, #52]	; (8001a70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a3c:	4a0d      	ldr	r2, [pc, #52]	; (8001a74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a40:	e002      	b.n	8001a48 <LoopCopyDataInit>

08001a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a46:	3304      	adds	r3, #4

08001a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a4c:	d3f9      	bcc.n	8001a42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a50:	4c0a      	ldr	r4, [pc, #40]	; (8001a7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a54:	e001      	b.n	8001a5a <LoopFillZerobss>

08001a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a58:	3204      	adds	r2, #4

08001a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a5c:	d3fb      	bcc.n	8001a56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a5e:	f005 f80f 	bl	8006a80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a62:	f7ff f897 	bl	8000b94 <main>
  bx  lr    
 8001a66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a68:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a70:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001a74:	08006b78 	.word	0x08006b78
  ldr r2, =_sbss
 8001a78:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001a7c:	20000310 	.word	0x20000310

08001a80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a80:	e7fe      	b.n	8001a80 <ADC_IRQHandler>
	...

08001a84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a88:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <HAL_Init+0x40>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a0d      	ldr	r2, [pc, #52]	; (8001ac4 <HAL_Init+0x40>)
 8001a8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a94:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <HAL_Init+0x40>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a0a      	ldr	r2, [pc, #40]	; (8001ac4 <HAL_Init+0x40>)
 8001a9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aa0:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <HAL_Init+0x40>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a07      	ldr	r2, [pc, #28]	; (8001ac4 <HAL_Init+0x40>)
 8001aa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aac:	2003      	movs	r0, #3
 8001aae:	f000 f92b 	bl	8001d08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ab2:	200f      	movs	r0, #15
 8001ab4:	f000 f808 	bl	8001ac8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ab8:	f7ff fc3e 	bl	8001338 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40023c00 	.word	0x40023c00

08001ac8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ad0:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <HAL_InitTick+0x54>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <HAL_InitTick+0x58>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	4619      	mov	r1, r3
 8001ada:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ade:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f000 f943 	bl	8001d72 <HAL_SYSTICK_Config>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e00e      	b.n	8001b14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2b0f      	cmp	r3, #15
 8001afa:	d80a      	bhi.n	8001b12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001afc:	2200      	movs	r2, #0
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b04:	f000 f90b 	bl	8001d1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b08:	4a06      	ldr	r2, [pc, #24]	; (8001b24 <HAL_InitTick+0x5c>)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	e000      	b.n	8001b14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000014 	.word	0x20000014
 8001b20:	2000001c 	.word	0x2000001c
 8001b24:	20000018 	.word	0x20000018

08001b28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b2c:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <HAL_IncTick+0x20>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	461a      	mov	r2, r3
 8001b32:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <HAL_IncTick+0x24>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4413      	add	r3, r2
 8001b38:	4a04      	ldr	r2, [pc, #16]	; (8001b4c <HAL_IncTick+0x24>)
 8001b3a:	6013      	str	r3, [r2, #0]
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	2000001c 	.word	0x2000001c
 8001b4c:	2000030c 	.word	0x2000030c

08001b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return uwTick;
 8001b54:	4b03      	ldr	r3, [pc, #12]	; (8001b64 <HAL_GetTick+0x14>)
 8001b56:	681b      	ldr	r3, [r3, #0]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	2000030c 	.word	0x2000030c

08001b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b78:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <__NVIC_SetPriorityGrouping+0x44>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b7e:	68ba      	ldr	r2, [r7, #8]
 8001b80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b84:	4013      	ands	r3, r2
 8001b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b9a:	4a04      	ldr	r2, [pc, #16]	; (8001bac <__NVIC_SetPriorityGrouping+0x44>)
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	60d3      	str	r3, [r2, #12]
}
 8001ba0:	bf00      	nop
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bb4:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	0a1b      	lsrs	r3, r3, #8
 8001bba:	f003 0307 	and.w	r3, r3, #7
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	db0b      	blt.n	8001bf6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	f003 021f 	and.w	r2, r3, #31
 8001be4:	4907      	ldr	r1, [pc, #28]	; (8001c04 <__NVIC_EnableIRQ+0x38>)
 8001be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bea:	095b      	lsrs	r3, r3, #5
 8001bec:	2001      	movs	r0, #1
 8001bee:	fa00 f202 	lsl.w	r2, r0, r2
 8001bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	e000e100 	.word	0xe000e100

08001c08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	6039      	str	r1, [r7, #0]
 8001c12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	db0a      	blt.n	8001c32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	490c      	ldr	r1, [pc, #48]	; (8001c54 <__NVIC_SetPriority+0x4c>)
 8001c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c26:	0112      	lsls	r2, r2, #4
 8001c28:	b2d2      	uxtb	r2, r2
 8001c2a:	440b      	add	r3, r1
 8001c2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c30:	e00a      	b.n	8001c48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	4908      	ldr	r1, [pc, #32]	; (8001c58 <__NVIC_SetPriority+0x50>)
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	3b04      	subs	r3, #4
 8001c40:	0112      	lsls	r2, r2, #4
 8001c42:	b2d2      	uxtb	r2, r2
 8001c44:	440b      	add	r3, r1
 8001c46:	761a      	strb	r2, [r3, #24]
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	e000e100 	.word	0xe000e100
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b089      	sub	sp, #36	; 0x24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	f1c3 0307 	rsb	r3, r3, #7
 8001c76:	2b04      	cmp	r3, #4
 8001c78:	bf28      	it	cs
 8001c7a:	2304      	movcs	r3, #4
 8001c7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	3304      	adds	r3, #4
 8001c82:	2b06      	cmp	r3, #6
 8001c84:	d902      	bls.n	8001c8c <NVIC_EncodePriority+0x30>
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	3b03      	subs	r3, #3
 8001c8a:	e000      	b.n	8001c8e <NVIC_EncodePriority+0x32>
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	43da      	mvns	r2, r3
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	401a      	ands	r2, r3
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ca4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cae:	43d9      	mvns	r1, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb4:	4313      	orrs	r3, r2
         );
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3724      	adds	r7, #36	; 0x24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
	...

08001cc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cd4:	d301      	bcc.n	8001cda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e00f      	b.n	8001cfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cda:	4a0a      	ldr	r2, [pc, #40]	; (8001d04 <SysTick_Config+0x40>)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ce2:	210f      	movs	r1, #15
 8001ce4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ce8:	f7ff ff8e 	bl	8001c08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cec:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <SysTick_Config+0x40>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cf2:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <SysTick_Config+0x40>)
 8001cf4:	2207      	movs	r2, #7
 8001cf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	e000e010 	.word	0xe000e010

08001d08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7ff ff29 	bl	8001b68 <__NVIC_SetPriorityGrouping>
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b086      	sub	sp, #24
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	4603      	mov	r3, r0
 8001d26:	60b9      	str	r1, [r7, #8]
 8001d28:	607a      	str	r2, [r7, #4]
 8001d2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d30:	f7ff ff3e 	bl	8001bb0 <__NVIC_GetPriorityGrouping>
 8001d34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	68b9      	ldr	r1, [r7, #8]
 8001d3a:	6978      	ldr	r0, [r7, #20]
 8001d3c:	f7ff ff8e 	bl	8001c5c <NVIC_EncodePriority>
 8001d40:	4602      	mov	r2, r0
 8001d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d46:	4611      	mov	r1, r2
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff ff5d 	bl	8001c08 <__NVIC_SetPriority>
}
 8001d4e:	bf00      	nop
 8001d50:	3718      	adds	r7, #24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b082      	sub	sp, #8
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff ff31 	bl	8001bcc <__NVIC_EnableIRQ>
}
 8001d6a:	bf00      	nop
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b082      	sub	sp, #8
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7ff ffa2 	bl	8001cc4 <SysTick_Config>
 8001d80:	4603      	mov	r3, r0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b084      	sub	sp, #16
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d96:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d98:	f7ff feda 	bl	8001b50 <HAL_GetTick>
 8001d9c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d008      	beq.n	8001dbc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2280      	movs	r2, #128	; 0x80
 8001dae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e052      	b.n	8001e62 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 0216 	bic.w	r2, r2, #22
 8001dca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	695a      	ldr	r2, [r3, #20]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dda:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d103      	bne.n	8001dec <HAL_DMA_Abort+0x62>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d007      	beq.n	8001dfc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 0208 	bic.w	r2, r2, #8
 8001dfa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 0201 	bic.w	r2, r2, #1
 8001e0a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e0c:	e013      	b.n	8001e36 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e0e:	f7ff fe9f 	bl	8001b50 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b05      	cmp	r3, #5
 8001e1a:	d90c      	bls.n	8001e36 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2220      	movs	r2, #32
 8001e20:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2203      	movs	r2, #3
 8001e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e015      	b.n	8001e62 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1e4      	bne.n	8001e0e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e48:	223f      	movs	r2, #63	; 0x3f
 8001e4a:	409a      	lsls	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d004      	beq.n	8001e88 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2280      	movs	r2, #128	; 0x80
 8001e82:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e00c      	b.n	8001ea2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2205      	movs	r2, #5
 8001e8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 0201 	bic.w	r2, r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
	...

08001eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b089      	sub	sp, #36	; 0x24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
 8001eca:	e177      	b.n	80021bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ecc:	2201      	movs	r2, #1
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	4013      	ands	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	f040 8166 	bne.w	80021b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d005      	beq.n	8001f02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d130      	bne.n	8001f64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	2203      	movs	r2, #3
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43db      	mvns	r3, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4013      	ands	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	68da      	ldr	r2, [r3, #12]
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f38:	2201      	movs	r2, #1
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	091b      	lsrs	r3, r3, #4
 8001f4e:	f003 0201 	and.w	r2, r3, #1
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 0303 	and.w	r3, r3, #3
 8001f6c:	2b03      	cmp	r3, #3
 8001f6e:	d017      	beq.n	8001fa0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	2203      	movs	r2, #3
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 0303 	and.w	r3, r3, #3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d123      	bne.n	8001ff4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	08da      	lsrs	r2, r3, #3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3208      	adds	r2, #8
 8001fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	220f      	movs	r2, #15
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	691a      	ldr	r2, [r3, #16]
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	08da      	lsrs	r2, r3, #3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	3208      	adds	r2, #8
 8001fee:	69b9      	ldr	r1, [r7, #24]
 8001ff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	2203      	movs	r2, #3
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4013      	ands	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f003 0203 	and.w	r2, r3, #3
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4313      	orrs	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 80c0 	beq.w	80021b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	4b66      	ldr	r3, [pc, #408]	; (80021d4 <HAL_GPIO_Init+0x324>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	4a65      	ldr	r2, [pc, #404]	; (80021d4 <HAL_GPIO_Init+0x324>)
 8002040:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002044:	6453      	str	r3, [r2, #68]	; 0x44
 8002046:	4b63      	ldr	r3, [pc, #396]	; (80021d4 <HAL_GPIO_Init+0x324>)
 8002048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002052:	4a61      	ldr	r2, [pc, #388]	; (80021d8 <HAL_GPIO_Init+0x328>)
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	089b      	lsrs	r3, r3, #2
 8002058:	3302      	adds	r3, #2
 800205a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800205e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	220f      	movs	r2, #15
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4013      	ands	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a58      	ldr	r2, [pc, #352]	; (80021dc <HAL_GPIO_Init+0x32c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d037      	beq.n	80020ee <HAL_GPIO_Init+0x23e>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a57      	ldr	r2, [pc, #348]	; (80021e0 <HAL_GPIO_Init+0x330>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d031      	beq.n	80020ea <HAL_GPIO_Init+0x23a>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a56      	ldr	r2, [pc, #344]	; (80021e4 <HAL_GPIO_Init+0x334>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d02b      	beq.n	80020e6 <HAL_GPIO_Init+0x236>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a55      	ldr	r2, [pc, #340]	; (80021e8 <HAL_GPIO_Init+0x338>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d025      	beq.n	80020e2 <HAL_GPIO_Init+0x232>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a54      	ldr	r2, [pc, #336]	; (80021ec <HAL_GPIO_Init+0x33c>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d01f      	beq.n	80020de <HAL_GPIO_Init+0x22e>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a53      	ldr	r2, [pc, #332]	; (80021f0 <HAL_GPIO_Init+0x340>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d019      	beq.n	80020da <HAL_GPIO_Init+0x22a>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a52      	ldr	r2, [pc, #328]	; (80021f4 <HAL_GPIO_Init+0x344>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d013      	beq.n	80020d6 <HAL_GPIO_Init+0x226>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a51      	ldr	r2, [pc, #324]	; (80021f8 <HAL_GPIO_Init+0x348>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d00d      	beq.n	80020d2 <HAL_GPIO_Init+0x222>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a50      	ldr	r2, [pc, #320]	; (80021fc <HAL_GPIO_Init+0x34c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d007      	beq.n	80020ce <HAL_GPIO_Init+0x21e>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a4f      	ldr	r2, [pc, #316]	; (8002200 <HAL_GPIO_Init+0x350>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d101      	bne.n	80020ca <HAL_GPIO_Init+0x21a>
 80020c6:	2309      	movs	r3, #9
 80020c8:	e012      	b.n	80020f0 <HAL_GPIO_Init+0x240>
 80020ca:	230a      	movs	r3, #10
 80020cc:	e010      	b.n	80020f0 <HAL_GPIO_Init+0x240>
 80020ce:	2308      	movs	r3, #8
 80020d0:	e00e      	b.n	80020f0 <HAL_GPIO_Init+0x240>
 80020d2:	2307      	movs	r3, #7
 80020d4:	e00c      	b.n	80020f0 <HAL_GPIO_Init+0x240>
 80020d6:	2306      	movs	r3, #6
 80020d8:	e00a      	b.n	80020f0 <HAL_GPIO_Init+0x240>
 80020da:	2305      	movs	r3, #5
 80020dc:	e008      	b.n	80020f0 <HAL_GPIO_Init+0x240>
 80020de:	2304      	movs	r3, #4
 80020e0:	e006      	b.n	80020f0 <HAL_GPIO_Init+0x240>
 80020e2:	2303      	movs	r3, #3
 80020e4:	e004      	b.n	80020f0 <HAL_GPIO_Init+0x240>
 80020e6:	2302      	movs	r3, #2
 80020e8:	e002      	b.n	80020f0 <HAL_GPIO_Init+0x240>
 80020ea:	2301      	movs	r3, #1
 80020ec:	e000      	b.n	80020f0 <HAL_GPIO_Init+0x240>
 80020ee:	2300      	movs	r3, #0
 80020f0:	69fa      	ldr	r2, [r7, #28]
 80020f2:	f002 0203 	and.w	r2, r2, #3
 80020f6:	0092      	lsls	r2, r2, #2
 80020f8:	4093      	lsls	r3, r2
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002100:	4935      	ldr	r1, [pc, #212]	; (80021d8 <HAL_GPIO_Init+0x328>)
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	089b      	lsrs	r3, r3, #2
 8002106:	3302      	adds	r3, #2
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800210e:	4b3d      	ldr	r3, [pc, #244]	; (8002204 <HAL_GPIO_Init+0x354>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	43db      	mvns	r3, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4013      	ands	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002132:	4a34      	ldr	r2, [pc, #208]	; (8002204 <HAL_GPIO_Init+0x354>)
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002138:	4b32      	ldr	r3, [pc, #200]	; (8002204 <HAL_GPIO_Init+0x354>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	4313      	orrs	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800215c:	4a29      	ldr	r2, [pc, #164]	; (8002204 <HAL_GPIO_Init+0x354>)
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002162:	4b28      	ldr	r3, [pc, #160]	; (8002204 <HAL_GPIO_Init+0x354>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	43db      	mvns	r3, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4013      	ands	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	4313      	orrs	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002186:	4a1f      	ldr	r2, [pc, #124]	; (8002204 <HAL_GPIO_Init+0x354>)
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800218c:	4b1d      	ldr	r3, [pc, #116]	; (8002204 <HAL_GPIO_Init+0x354>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	43db      	mvns	r3, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d003      	beq.n	80021b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021b0:	4a14      	ldr	r2, [pc, #80]	; (8002204 <HAL_GPIO_Init+0x354>)
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	3301      	adds	r3, #1
 80021ba:	61fb      	str	r3, [r7, #28]
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	2b0f      	cmp	r3, #15
 80021c0:	f67f ae84 	bls.w	8001ecc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop
 80021c8:	3724      	adds	r7, #36	; 0x24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40013800 	.word	0x40013800
 80021dc:	40020000 	.word	0x40020000
 80021e0:	40020400 	.word	0x40020400
 80021e4:	40020800 	.word	0x40020800
 80021e8:	40020c00 	.word	0x40020c00
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40021400 	.word	0x40021400
 80021f4:	40021800 	.word	0x40021800
 80021f8:	40021c00 	.word	0x40021c00
 80021fc:	40022000 	.word	0x40022000
 8002200:	40022400 	.word	0x40022400
 8002204:	40013c00 	.word	0x40013c00

08002208 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	460b      	mov	r3, r1
 8002212:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	691a      	ldr	r2, [r3, #16]
 8002218:	887b      	ldrh	r3, [r7, #2]
 800221a:	4013      	ands	r3, r2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d002      	beq.n	8002226 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002220:	2301      	movs	r3, #1
 8002222:	73fb      	strb	r3, [r7, #15]
 8002224:	e001      	b.n	800222a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002226:	2300      	movs	r3, #0
 8002228:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800222a:	7bfb      	ldrb	r3, [r7, #15]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	460b      	mov	r3, r1
 8002242:	807b      	strh	r3, [r7, #2]
 8002244:	4613      	mov	r3, r2
 8002246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002248:	787b      	ldrb	r3, [r7, #1]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800224e:	887a      	ldrh	r2, [r7, #2]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002254:	e003      	b.n	800225e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002256:	887b      	ldrh	r3, [r7, #2]
 8002258:	041a      	lsls	r2, r3, #16
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	619a      	str	r2, [r3, #24]
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800226a:	b480      	push	{r7}
 800226c:	b085      	sub	sp, #20
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
 8002272:	460b      	mov	r3, r1
 8002274:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800227c:	887a      	ldrh	r2, [r7, #2]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	4013      	ands	r3, r2
 8002282:	041a      	lsls	r2, r3, #16
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	43d9      	mvns	r1, r3
 8002288:	887b      	ldrh	r3, [r7, #2]
 800228a:	400b      	ands	r3, r1
 800228c:	431a      	orrs	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	619a      	str	r2, [r3, #24]
}
 8002292:	bf00      	nop
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
	...

080022a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e12b      	b.n	800250a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d106      	bne.n	80022cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff f85e 	bl	8001388 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2224      	movs	r2, #36	; 0x24
 80022d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 0201 	bic.w	r2, r2, #1
 80022e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002302:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002304:	f001 fc72 	bl	8003bec <HAL_RCC_GetPCLK1Freq>
 8002308:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	4a81      	ldr	r2, [pc, #516]	; (8002514 <HAL_I2C_Init+0x274>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d807      	bhi.n	8002324 <HAL_I2C_Init+0x84>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	4a80      	ldr	r2, [pc, #512]	; (8002518 <HAL_I2C_Init+0x278>)
 8002318:	4293      	cmp	r3, r2
 800231a:	bf94      	ite	ls
 800231c:	2301      	movls	r3, #1
 800231e:	2300      	movhi	r3, #0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	e006      	b.n	8002332 <HAL_I2C_Init+0x92>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4a7d      	ldr	r2, [pc, #500]	; (800251c <HAL_I2C_Init+0x27c>)
 8002328:	4293      	cmp	r3, r2
 800232a:	bf94      	ite	ls
 800232c:	2301      	movls	r3, #1
 800232e:	2300      	movhi	r3, #0
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e0e7      	b.n	800250a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	4a78      	ldr	r2, [pc, #480]	; (8002520 <HAL_I2C_Init+0x280>)
 800233e:	fba2 2303 	umull	r2, r3, r2, r3
 8002342:	0c9b      	lsrs	r3, r3, #18
 8002344:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	430a      	orrs	r2, r1
 8002358:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	4a6a      	ldr	r2, [pc, #424]	; (8002514 <HAL_I2C_Init+0x274>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d802      	bhi.n	8002374 <HAL_I2C_Init+0xd4>
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	3301      	adds	r3, #1
 8002372:	e009      	b.n	8002388 <HAL_I2C_Init+0xe8>
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800237a:	fb02 f303 	mul.w	r3, r2, r3
 800237e:	4a69      	ldr	r2, [pc, #420]	; (8002524 <HAL_I2C_Init+0x284>)
 8002380:	fba2 2303 	umull	r2, r3, r2, r3
 8002384:	099b      	lsrs	r3, r3, #6
 8002386:	3301      	adds	r3, #1
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6812      	ldr	r2, [r2, #0]
 800238c:	430b      	orrs	r3, r1
 800238e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800239a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	495c      	ldr	r1, [pc, #368]	; (8002514 <HAL_I2C_Init+0x274>)
 80023a4:	428b      	cmp	r3, r1
 80023a6:	d819      	bhi.n	80023dc <HAL_I2C_Init+0x13c>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	1e59      	subs	r1, r3, #1
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80023b6:	1c59      	adds	r1, r3, #1
 80023b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80023bc:	400b      	ands	r3, r1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00a      	beq.n	80023d8 <HAL_I2C_Init+0x138>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	1e59      	subs	r1, r3, #1
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80023d0:	3301      	adds	r3, #1
 80023d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023d6:	e051      	b.n	800247c <HAL_I2C_Init+0x1dc>
 80023d8:	2304      	movs	r3, #4
 80023da:	e04f      	b.n	800247c <HAL_I2C_Init+0x1dc>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d111      	bne.n	8002408 <HAL_I2C_Init+0x168>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	1e58      	subs	r0, r3, #1
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6859      	ldr	r1, [r3, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	440b      	add	r3, r1
 80023f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023f6:	3301      	adds	r3, #1
 80023f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	bf0c      	ite	eq
 8002400:	2301      	moveq	r3, #1
 8002402:	2300      	movne	r3, #0
 8002404:	b2db      	uxtb	r3, r3
 8002406:	e012      	b.n	800242e <HAL_I2C_Init+0x18e>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	1e58      	subs	r0, r3, #1
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6859      	ldr	r1, [r3, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	440b      	add	r3, r1
 8002416:	0099      	lsls	r1, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	fbb0 f3f3 	udiv	r3, r0, r3
 800241e:	3301      	adds	r3, #1
 8002420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002424:	2b00      	cmp	r3, #0
 8002426:	bf0c      	ite	eq
 8002428:	2301      	moveq	r3, #1
 800242a:	2300      	movne	r3, #0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <HAL_I2C_Init+0x196>
 8002432:	2301      	movs	r3, #1
 8002434:	e022      	b.n	800247c <HAL_I2C_Init+0x1dc>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10e      	bne.n	800245c <HAL_I2C_Init+0x1bc>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	1e58      	subs	r0, r3, #1
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6859      	ldr	r1, [r3, #4]
 8002446:	460b      	mov	r3, r1
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	440b      	add	r3, r1
 800244c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002450:	3301      	adds	r3, #1
 8002452:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800245a:	e00f      	b.n	800247c <HAL_I2C_Init+0x1dc>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	1e58      	subs	r0, r3, #1
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6859      	ldr	r1, [r3, #4]
 8002464:	460b      	mov	r3, r1
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	0099      	lsls	r1, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002472:	3301      	adds	r3, #1
 8002474:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002478:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	6809      	ldr	r1, [r1, #0]
 8002480:	4313      	orrs	r3, r2
 8002482:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69da      	ldr	r2, [r3, #28]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	430a      	orrs	r2, r1
 800249e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80024aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6911      	ldr	r1, [r2, #16]
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	68d2      	ldr	r2, [r2, #12]
 80024b6:	4311      	orrs	r1, r2
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6812      	ldr	r2, [r2, #0]
 80024bc:	430b      	orrs	r3, r1
 80024be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	695a      	ldr	r2, [r3, #20]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	431a      	orrs	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0201 	orr.w	r2, r2, #1
 80024ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2220      	movs	r2, #32
 80024f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	000186a0 	.word	0x000186a0
 8002518:	001e847f 	.word	0x001e847f
 800251c:	003d08ff 	.word	0x003d08ff
 8002520:	431bde83 	.word	0x431bde83
 8002524:	10624dd3 	.word	0x10624dd3

08002528 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b088      	sub	sp, #32
 800252c:	af02      	add	r7, sp, #8
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	607a      	str	r2, [r7, #4]
 8002532:	461a      	mov	r2, r3
 8002534:	460b      	mov	r3, r1
 8002536:	817b      	strh	r3, [r7, #10]
 8002538:	4613      	mov	r3, r2
 800253a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800253c:	f7ff fb08 	bl	8001b50 <HAL_GetTick>
 8002540:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b20      	cmp	r3, #32
 800254c:	f040 80e0 	bne.w	8002710 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	2319      	movs	r3, #25
 8002556:	2201      	movs	r2, #1
 8002558:	4970      	ldr	r1, [pc, #448]	; (800271c <HAL_I2C_Master_Transmit+0x1f4>)
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f000 fc64 	bl	8002e28 <I2C_WaitOnFlagUntilTimeout>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002566:	2302      	movs	r3, #2
 8002568:	e0d3      	b.n	8002712 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002570:	2b01      	cmp	r3, #1
 8002572:	d101      	bne.n	8002578 <HAL_I2C_Master_Transmit+0x50>
 8002574:	2302      	movs	r3, #2
 8002576:	e0cc      	b.n	8002712 <HAL_I2C_Master_Transmit+0x1ea>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b01      	cmp	r3, #1
 800258c:	d007      	beq.n	800259e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f042 0201 	orr.w	r2, r2, #1
 800259c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2221      	movs	r2, #33	; 0x21
 80025b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2210      	movs	r2, #16
 80025ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	893a      	ldrh	r2, [r7, #8]
 80025ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	4a50      	ldr	r2, [pc, #320]	; (8002720 <HAL_I2C_Master_Transmit+0x1f8>)
 80025de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025e0:	8979      	ldrh	r1, [r7, #10]
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	6a3a      	ldr	r2, [r7, #32]
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f000 face 	bl	8002b88 <I2C_MasterRequestWrite>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e08d      	b.n	8002712 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025f6:	2300      	movs	r3, #0
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	613b      	str	r3, [r7, #16]
 800260a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800260c:	e066      	b.n	80026dc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	6a39      	ldr	r1, [r7, #32]
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f000 fd22 	bl	800305c <I2C_WaitOnTXEFlagUntilTimeout>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00d      	beq.n	800263a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	2b04      	cmp	r3, #4
 8002624:	d107      	bne.n	8002636 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002634:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e06b      	b.n	8002712 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	781a      	ldrb	r2, [r3, #0]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264a:	1c5a      	adds	r2, r3, #1
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002654:	b29b      	uxth	r3, r3
 8002656:	3b01      	subs	r3, #1
 8002658:	b29a      	uxth	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002662:	3b01      	subs	r3, #1
 8002664:	b29a      	uxth	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b04      	cmp	r3, #4
 8002676:	d11b      	bne.n	80026b0 <HAL_I2C_Master_Transmit+0x188>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800267c:	2b00      	cmp	r3, #0
 800267e:	d017      	beq.n	80026b0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002684:	781a      	ldrb	r2, [r3, #0]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	1c5a      	adds	r2, r3, #1
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269a:	b29b      	uxth	r3, r3
 800269c:	3b01      	subs	r3, #1
 800269e:	b29a      	uxth	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a8:	3b01      	subs	r3, #1
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	6a39      	ldr	r1, [r7, #32]
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f000 fd19 	bl	80030ec <I2C_WaitOnBTFFlagUntilTimeout>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00d      	beq.n	80026dc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c4:	2b04      	cmp	r3, #4
 80026c6:	d107      	bne.n	80026d8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026d6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e01a      	b.n	8002712 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d194      	bne.n	800260e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2220      	movs	r2, #32
 80026f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800270c:	2300      	movs	r3, #0
 800270e:	e000      	b.n	8002712 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002710:	2302      	movs	r3, #2
  }
}
 8002712:	4618      	mov	r0, r3
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	00100002 	.word	0x00100002
 8002720:	ffff0000 	.word	0xffff0000

08002724 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b08c      	sub	sp, #48	; 0x30
 8002728:	af02      	add	r7, sp, #8
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	607a      	str	r2, [r7, #4]
 800272e:	461a      	mov	r2, r3
 8002730:	460b      	mov	r3, r1
 8002732:	817b      	strh	r3, [r7, #10]
 8002734:	4613      	mov	r3, r2
 8002736:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002738:	f7ff fa0a 	bl	8001b50 <HAL_GetTick>
 800273c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b20      	cmp	r3, #32
 8002748:	f040 8217 	bne.w	8002b7a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	2319      	movs	r3, #25
 8002752:	2201      	movs	r2, #1
 8002754:	497c      	ldr	r1, [pc, #496]	; (8002948 <HAL_I2C_Master_Receive+0x224>)
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 fb66 	bl	8002e28 <I2C_WaitOnFlagUntilTimeout>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002762:	2302      	movs	r3, #2
 8002764:	e20a      	b.n	8002b7c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800276c:	2b01      	cmp	r3, #1
 800276e:	d101      	bne.n	8002774 <HAL_I2C_Master_Receive+0x50>
 8002770:	2302      	movs	r3, #2
 8002772:	e203      	b.n	8002b7c <HAL_I2C_Master_Receive+0x458>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b01      	cmp	r3, #1
 8002788:	d007      	beq.n	800279a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f042 0201 	orr.w	r2, r2, #1
 8002798:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2222      	movs	r2, #34	; 0x22
 80027ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2210      	movs	r2, #16
 80027b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	893a      	ldrh	r2, [r7, #8]
 80027ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	4a5c      	ldr	r2, [pc, #368]	; (800294c <HAL_I2C_Master_Receive+0x228>)
 80027da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027dc:	8979      	ldrh	r1, [r7, #10]
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 fa52 	bl	8002c8c <I2C_MasterRequestRead>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e1c4      	b.n	8002b7c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d113      	bne.n	8002822 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027fa:	2300      	movs	r3, #0
 80027fc:	623b      	str	r3, [r7, #32]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	623b      	str	r3, [r7, #32]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	623b      	str	r3, [r7, #32]
 800280e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	e198      	b.n	8002b54 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002826:	2b01      	cmp	r3, #1
 8002828:	d11b      	bne.n	8002862 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002838:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800283a:	2300      	movs	r3, #0
 800283c:	61fb      	str	r3, [r7, #28]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	61fb      	str	r3, [r7, #28]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	61fb      	str	r3, [r7, #28]
 800284e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	e178      	b.n	8002b54 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002866:	2b02      	cmp	r3, #2
 8002868:	d11b      	bne.n	80028a2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002878:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002888:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800288a:	2300      	movs	r3, #0
 800288c:	61bb      	str	r3, [r7, #24]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	61bb      	str	r3, [r7, #24]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	61bb      	str	r3, [r7, #24]
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	e158      	b.n	8002b54 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028b2:	2300      	movs	r3, #0
 80028b4:	617b      	str	r3, [r7, #20]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	617b      	str	r3, [r7, #20]
 80028c6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80028c8:	e144      	b.n	8002b54 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ce:	2b03      	cmp	r3, #3
 80028d0:	f200 80f1 	bhi.w	8002ab6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d123      	bne.n	8002924 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f000 fc4b 	bl	800317c <I2C_WaitOnRXNEFlagUntilTimeout>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e145      	b.n	8002b7c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	691a      	ldr	r2, [r3, #16]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	1c5a      	adds	r2, r3, #1
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290c:	3b01      	subs	r3, #1
 800290e:	b29a      	uxth	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002918:	b29b      	uxth	r3, r3
 800291a:	3b01      	subs	r3, #1
 800291c:	b29a      	uxth	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002922:	e117      	b.n	8002b54 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002928:	2b02      	cmp	r3, #2
 800292a:	d14e      	bne.n	80029ca <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002932:	2200      	movs	r2, #0
 8002934:	4906      	ldr	r1, [pc, #24]	; (8002950 <HAL_I2C_Master_Receive+0x22c>)
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 fa76 	bl	8002e28 <I2C_WaitOnFlagUntilTimeout>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d008      	beq.n	8002954 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e11a      	b.n	8002b7c <HAL_I2C_Master_Receive+0x458>
 8002946:	bf00      	nop
 8002948:	00100002 	.word	0x00100002
 800294c:	ffff0000 	.word	0xffff0000
 8002950:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002962:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	691a      	ldr	r2, [r3, #16]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	1c5a      	adds	r2, r3, #1
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002980:	3b01      	subs	r3, #1
 8002982:	b29a      	uxth	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298c:	b29b      	uxth	r3, r3
 800298e:	3b01      	subs	r3, #1
 8002990:	b29a      	uxth	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	691a      	ldr	r2, [r3, #16]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a8:	1c5a      	adds	r2, r3, #1
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b2:	3b01      	subs	r3, #1
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029be:	b29b      	uxth	r3, r3
 80029c0:	3b01      	subs	r3, #1
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029c8:	e0c4      	b.n	8002b54 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d0:	2200      	movs	r2, #0
 80029d2:	496c      	ldr	r1, [pc, #432]	; (8002b84 <HAL_I2C_Master_Receive+0x460>)
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f000 fa27 	bl	8002e28 <I2C_WaitOnFlagUntilTimeout>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e0cb      	b.n	8002b7c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	691a      	ldr	r2, [r3, #16]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	b2d2      	uxtb	r2, r2
 8002a00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	1c5a      	adds	r2, r3, #1
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a10:	3b01      	subs	r3, #1
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	4955      	ldr	r1, [pc, #340]	; (8002b84 <HAL_I2C_Master_Receive+0x460>)
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 f9f9 	bl	8002e28 <I2C_WaitOnFlagUntilTimeout>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e09d      	b.n	8002b7c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	691a      	ldr	r2, [r3, #16]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	1c5a      	adds	r2, r3, #1
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	691a      	ldr	r2, [r3, #16]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	1c5a      	adds	r2, r3, #1
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	3b01      	subs	r3, #1
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ab4:	e04e      	b.n	8002b54 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ab8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 fb5e 	bl	800317c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e058      	b.n	8002b7c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	691a      	ldr	r2, [r3, #16]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad4:	b2d2      	uxtb	r2, r2
 8002ad6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002adc:	1c5a      	adds	r2, r3, #1
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	f003 0304 	and.w	r3, r3, #4
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d124      	bne.n	8002b54 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0e:	2b03      	cmp	r3, #3
 8002b10:	d107      	bne.n	8002b22 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b20:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	691a      	ldr	r2, [r3, #16]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	1c5a      	adds	r2, r3, #1
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f47f aeb6 	bne.w	80028ca <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2220      	movs	r2, #32
 8002b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b76:	2300      	movs	r3, #0
 8002b78:	e000      	b.n	8002b7c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002b7a:	2302      	movs	r3, #2
  }
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3728      	adds	r7, #40	; 0x28
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	00010004 	.word	0x00010004

08002b88 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b088      	sub	sp, #32
 8002b8c:	af02      	add	r7, sp, #8
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	607a      	str	r2, [r7, #4]
 8002b92:	603b      	str	r3, [r7, #0]
 8002b94:	460b      	mov	r3, r1
 8002b96:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	d006      	beq.n	8002bb2 <I2C_MasterRequestWrite+0x2a>
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d003      	beq.n	8002bb2 <I2C_MasterRequestWrite+0x2a>
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bb0:	d108      	bne.n	8002bc4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	e00b      	b.n	8002bdc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc8:	2b12      	cmp	r3, #18
 8002bca:	d107      	bne.n	8002bdc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bda:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f000 f91d 	bl	8002e28 <I2C_WaitOnFlagUntilTimeout>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00d      	beq.n	8002c10 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c02:	d103      	bne.n	8002c0c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e035      	b.n	8002c7c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c18:	d108      	bne.n	8002c2c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c1a:	897b      	ldrh	r3, [r7, #10]
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	461a      	mov	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c28:	611a      	str	r2, [r3, #16]
 8002c2a:	e01b      	b.n	8002c64 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c2c:	897b      	ldrh	r3, [r7, #10]
 8002c2e:	11db      	asrs	r3, r3, #7
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	f003 0306 	and.w	r3, r3, #6
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	f063 030f 	orn	r3, r3, #15
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	490e      	ldr	r1, [pc, #56]	; (8002c84 <I2C_MasterRequestWrite+0xfc>)
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 f966 	bl	8002f1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e010      	b.n	8002c7c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c5a:	897b      	ldrh	r3, [r7, #10]
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	4907      	ldr	r1, [pc, #28]	; (8002c88 <I2C_MasterRequestWrite+0x100>)
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 f956 	bl	8002f1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e000      	b.n	8002c7c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3718      	adds	r7, #24
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	00010008 	.word	0x00010008
 8002c88:	00010002 	.word	0x00010002

08002c8c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af02      	add	r7, sp, #8
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	607a      	str	r2, [r7, #4]
 8002c96:	603b      	str	r3, [r7, #0]
 8002c98:	460b      	mov	r3, r1
 8002c9a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cb0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	2b08      	cmp	r3, #8
 8002cb6:	d006      	beq.n	8002cc6 <I2C_MasterRequestRead+0x3a>
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d003      	beq.n	8002cc6 <I2C_MasterRequestRead+0x3a>
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cc4:	d108      	bne.n	8002cd8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	e00b      	b.n	8002cf0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cdc:	2b11      	cmp	r3, #17
 8002cde:	d107      	bne.n	8002cf0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 f893 	bl	8002e28 <I2C_WaitOnFlagUntilTimeout>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00d      	beq.n	8002d24 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d16:	d103      	bne.n	8002d20 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e079      	b.n	8002e18 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d2c:	d108      	bne.n	8002d40 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d2e:	897b      	ldrh	r3, [r7, #10]
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	b2da      	uxtb	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	611a      	str	r2, [r3, #16]
 8002d3e:	e05f      	b.n	8002e00 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d40:	897b      	ldrh	r3, [r7, #10]
 8002d42:	11db      	asrs	r3, r3, #7
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	f003 0306 	and.w	r3, r3, #6
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	f063 030f 	orn	r3, r3, #15
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	4930      	ldr	r1, [pc, #192]	; (8002e20 <I2C_MasterRequestRead+0x194>)
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f000 f8dc 	bl	8002f1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e054      	b.n	8002e18 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d6e:	897b      	ldrh	r3, [r7, #10]
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	4929      	ldr	r1, [pc, #164]	; (8002e24 <I2C_MasterRequestRead+0x198>)
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 f8cc 	bl	8002f1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e044      	b.n	8002e18 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d8e:	2300      	movs	r3, #0
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	613b      	str	r3, [r7, #16]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	613b      	str	r3, [r7, #16]
 8002da2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002db2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 f831 	bl	8002e28 <I2C_WaitOnFlagUntilTimeout>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00d      	beq.n	8002de8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dda:	d103      	bne.n	8002de4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002de2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e017      	b.n	8002e18 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002de8:	897b      	ldrh	r3, [r7, #10]
 8002dea:	11db      	asrs	r3, r3, #7
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	f003 0306 	and.w	r3, r3, #6
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	f063 030e 	orn	r3, r3, #14
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	4907      	ldr	r1, [pc, #28]	; (8002e24 <I2C_MasterRequestRead+0x198>)
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f000 f888 	bl	8002f1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e000      	b.n	8002e18 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3718      	adds	r7, #24
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	00010008 	.word	0x00010008
 8002e24:	00010002 	.word	0x00010002

08002e28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	603b      	str	r3, [r7, #0]
 8002e34:	4613      	mov	r3, r2
 8002e36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e38:	e048      	b.n	8002ecc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e40:	d044      	beq.n	8002ecc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e42:	f7fe fe85 	bl	8001b50 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d302      	bcc.n	8002e58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d139      	bne.n	8002ecc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	0c1b      	lsrs	r3, r3, #16
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d10d      	bne.n	8002e7e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	43da      	mvns	r2, r3
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	bf0c      	ite	eq
 8002e74:	2301      	moveq	r3, #1
 8002e76:	2300      	movne	r3, #0
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	e00c      	b.n	8002e98 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	43da      	mvns	r2, r3
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	bf0c      	ite	eq
 8002e90:	2301      	moveq	r3, #1
 8002e92:	2300      	movne	r3, #0
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	461a      	mov	r2, r3
 8002e98:	79fb      	ldrb	r3, [r7, #7]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d116      	bne.n	8002ecc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	f043 0220 	orr.w	r2, r3, #32
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e023      	b.n	8002f14 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	0c1b      	lsrs	r3, r3, #16
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d10d      	bne.n	8002ef2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	43da      	mvns	r2, r3
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	bf0c      	ite	eq
 8002ee8:	2301      	moveq	r3, #1
 8002eea:	2300      	movne	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	461a      	mov	r2, r3
 8002ef0:	e00c      	b.n	8002f0c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	43da      	mvns	r2, r3
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	4013      	ands	r3, r2
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	bf0c      	ite	eq
 8002f04:	2301      	moveq	r3, #1
 8002f06:	2300      	movne	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	79fb      	ldrb	r3, [r7, #7]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d093      	beq.n	8002e3a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
 8002f28:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f2a:	e071      	b.n	8003010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f3a:	d123      	bne.n	8002f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f4a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	f043 0204 	orr.w	r2, r3, #4
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e067      	b.n	8003054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f8a:	d041      	beq.n	8003010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f8c:	f7fe fde0 	bl	8001b50 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d302      	bcc.n	8002fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d136      	bne.n	8003010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	0c1b      	lsrs	r3, r3, #16
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d10c      	bne.n	8002fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	43da      	mvns	r2, r3
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	bf14      	ite	ne
 8002fbe:	2301      	movne	r3, #1
 8002fc0:	2300      	moveq	r3, #0
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	e00b      	b.n	8002fde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	43da      	mvns	r2, r3
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	bf14      	ite	ne
 8002fd8:	2301      	movne	r3, #1
 8002fda:	2300      	moveq	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d016      	beq.n	8003010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2220      	movs	r2, #32
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffc:	f043 0220 	orr.w	r2, r3, #32
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e021      	b.n	8003054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	0c1b      	lsrs	r3, r3, #16
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b01      	cmp	r3, #1
 8003018:	d10c      	bne.n	8003034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	43da      	mvns	r2, r3
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	4013      	ands	r3, r2
 8003026:	b29b      	uxth	r3, r3
 8003028:	2b00      	cmp	r3, #0
 800302a:	bf14      	ite	ne
 800302c:	2301      	movne	r3, #1
 800302e:	2300      	moveq	r3, #0
 8003030:	b2db      	uxtb	r3, r3
 8003032:	e00b      	b.n	800304c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	43da      	mvns	r2, r3
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	4013      	ands	r3, r2
 8003040:	b29b      	uxth	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	bf14      	ite	ne
 8003046:	2301      	movne	r3, #1
 8003048:	2300      	moveq	r3, #0
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	f47f af6d 	bne.w	8002f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003068:	e034      	b.n	80030d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f000 f8e3 	bl	8003236 <I2C_IsAcknowledgeFailed>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e034      	b.n	80030e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003080:	d028      	beq.n	80030d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003082:	f7fe fd65 	bl	8001b50 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	429a      	cmp	r2, r3
 8003090:	d302      	bcc.n	8003098 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d11d      	bne.n	80030d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a2:	2b80      	cmp	r3, #128	; 0x80
 80030a4:	d016      	beq.n	80030d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2220      	movs	r2, #32
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	f043 0220 	orr.w	r2, r3, #32
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e007      	b.n	80030e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030de:	2b80      	cmp	r3, #128	; 0x80
 80030e0:	d1c3      	bne.n	800306a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030f8:	e034      	b.n	8003164 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 f89b 	bl	8003236 <I2C_IsAcknowledgeFailed>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e034      	b.n	8003174 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003110:	d028      	beq.n	8003164 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003112:	f7fe fd1d 	bl	8001b50 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	429a      	cmp	r2, r3
 8003120:	d302      	bcc.n	8003128 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d11d      	bne.n	8003164 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	f003 0304 	and.w	r3, r3, #4
 8003132:	2b04      	cmp	r3, #4
 8003134:	d016      	beq.n	8003164 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2220      	movs	r2, #32
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003150:	f043 0220 	orr.w	r2, r3, #32
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e007      	b.n	8003174 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	f003 0304 	and.w	r3, r3, #4
 800316e:	2b04      	cmp	r3, #4
 8003170:	d1c3      	bne.n	80030fa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003188:	e049      	b.n	800321e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	f003 0310 	and.w	r3, r3, #16
 8003194:	2b10      	cmp	r3, #16
 8003196:	d119      	bne.n	80031cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f06f 0210 	mvn.w	r2, #16
 80031a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2220      	movs	r2, #32
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e030      	b.n	800322e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031cc:	f7fe fcc0 	bl	8001b50 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	68ba      	ldr	r2, [r7, #8]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d302      	bcc.n	80031e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d11d      	bne.n	800321e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ec:	2b40      	cmp	r3, #64	; 0x40
 80031ee:	d016      	beq.n	800321e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2220      	movs	r2, #32
 80031fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	f043 0220 	orr.w	r2, r3, #32
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e007      	b.n	800322e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003228:	2b40      	cmp	r3, #64	; 0x40
 800322a:	d1ae      	bne.n	800318a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800324c:	d11b      	bne.n	8003286 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003256:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2220      	movs	r2, #32
 8003262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	f043 0204 	orr.w	r2, r3, #4
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e000      	b.n	8003288 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b20      	cmp	r3, #32
 80032a8:	d129      	bne.n	80032fe <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2224      	movs	r2, #36	; 0x24
 80032ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0201 	bic.w	r2, r2, #1
 80032c0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 0210 	bic.w	r2, r2, #16
 80032d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	430a      	orrs	r2, r1
 80032e0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f042 0201 	orr.w	r2, r2, #1
 80032f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2220      	movs	r2, #32
 80032f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80032fa:	2300      	movs	r3, #0
 80032fc:	e000      	b.n	8003300 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80032fe:	2302      	movs	r3, #2
  }
}
 8003300:	4618      	mov	r0, r3
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003316:	2300      	movs	r3, #0
 8003318:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b20      	cmp	r3, #32
 8003324:	d12a      	bne.n	800337c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2224      	movs	r2, #36	; 0x24
 800332a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0201 	bic.w	r2, r2, #1
 800333c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003344:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003346:	89fb      	ldrh	r3, [r7, #14]
 8003348:	f023 030f 	bic.w	r3, r3, #15
 800334c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	b29a      	uxth	r2, r3
 8003352:	89fb      	ldrh	r3, [r7, #14]
 8003354:	4313      	orrs	r3, r2
 8003356:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	89fa      	ldrh	r2, [r7, #14]
 800335e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f042 0201 	orr.w	r2, r2, #1
 800336e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2220      	movs	r2, #32
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003378:	2300      	movs	r3, #0
 800337a:	e000      	b.n	800337e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800337c:	2302      	movs	r3, #2
  }
}
 800337e:	4618      	mov	r0, r3
 8003380:	3714      	adds	r7, #20
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
	...

0800338c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e267      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d075      	beq.n	8003496 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033aa:	4b88      	ldr	r3, [pc, #544]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 030c 	and.w	r3, r3, #12
 80033b2:	2b04      	cmp	r3, #4
 80033b4:	d00c      	beq.n	80033d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033b6:	4b85      	ldr	r3, [pc, #532]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d112      	bne.n	80033e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033c2:	4b82      	ldr	r3, [pc, #520]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ce:	d10b      	bne.n	80033e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d0:	4b7e      	ldr	r3, [pc, #504]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d05b      	beq.n	8003494 <HAL_RCC_OscConfig+0x108>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d157      	bne.n	8003494 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e242      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033f0:	d106      	bne.n	8003400 <HAL_RCC_OscConfig+0x74>
 80033f2:	4b76      	ldr	r3, [pc, #472]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a75      	ldr	r2, [pc, #468]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 80033f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	e01d      	b.n	800343c <HAL_RCC_OscConfig+0xb0>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003408:	d10c      	bne.n	8003424 <HAL_RCC_OscConfig+0x98>
 800340a:	4b70      	ldr	r3, [pc, #448]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a6f      	ldr	r2, [pc, #444]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 8003410:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003414:	6013      	str	r3, [r2, #0]
 8003416:	4b6d      	ldr	r3, [pc, #436]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a6c      	ldr	r2, [pc, #432]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 800341c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003420:	6013      	str	r3, [r2, #0]
 8003422:	e00b      	b.n	800343c <HAL_RCC_OscConfig+0xb0>
 8003424:	4b69      	ldr	r3, [pc, #420]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a68      	ldr	r2, [pc, #416]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 800342a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800342e:	6013      	str	r3, [r2, #0]
 8003430:	4b66      	ldr	r3, [pc, #408]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a65      	ldr	r2, [pc, #404]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 8003436:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800343a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d013      	beq.n	800346c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003444:	f7fe fb84 	bl	8001b50 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800344c:	f7fe fb80 	bl	8001b50 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b64      	cmp	r3, #100	; 0x64
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e207      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345e:	4b5b      	ldr	r3, [pc, #364]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0f0      	beq.n	800344c <HAL_RCC_OscConfig+0xc0>
 800346a:	e014      	b.n	8003496 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346c:	f7fe fb70 	bl	8001b50 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003474:	f7fe fb6c 	bl	8001b50 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b64      	cmp	r3, #100	; 0x64
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e1f3      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003486:	4b51      	ldr	r3, [pc, #324]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1f0      	bne.n	8003474 <HAL_RCC_OscConfig+0xe8>
 8003492:	e000      	b.n	8003496 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d063      	beq.n	800356a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034a2:	4b4a      	ldr	r3, [pc, #296]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f003 030c 	and.w	r3, r3, #12
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00b      	beq.n	80034c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ae:	4b47      	ldr	r3, [pc, #284]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034b6:	2b08      	cmp	r3, #8
 80034b8:	d11c      	bne.n	80034f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ba:	4b44      	ldr	r3, [pc, #272]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d116      	bne.n	80034f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034c6:	4b41      	ldr	r3, [pc, #260]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d005      	beq.n	80034de <HAL_RCC_OscConfig+0x152>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d001      	beq.n	80034de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e1c7      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034de:	4b3b      	ldr	r3, [pc, #236]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	4937      	ldr	r1, [pc, #220]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034f2:	e03a      	b.n	800356a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d020      	beq.n	800353e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034fc:	4b34      	ldr	r3, [pc, #208]	; (80035d0 <HAL_RCC_OscConfig+0x244>)
 80034fe:	2201      	movs	r2, #1
 8003500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003502:	f7fe fb25 	bl	8001b50 <HAL_GetTick>
 8003506:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003508:	e008      	b.n	800351c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800350a:	f7fe fb21 	bl	8001b50 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d901      	bls.n	800351c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e1a8      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800351c:	4b2b      	ldr	r3, [pc, #172]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0f0      	beq.n	800350a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003528:	4b28      	ldr	r3, [pc, #160]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	4925      	ldr	r1, [pc, #148]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 8003538:	4313      	orrs	r3, r2
 800353a:	600b      	str	r3, [r1, #0]
 800353c:	e015      	b.n	800356a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800353e:	4b24      	ldr	r3, [pc, #144]	; (80035d0 <HAL_RCC_OscConfig+0x244>)
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003544:	f7fe fb04 	bl	8001b50 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800354c:	f7fe fb00 	bl	8001b50 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e187      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800355e:	4b1b      	ldr	r3, [pc, #108]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1f0      	bne.n	800354c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0308 	and.w	r3, r3, #8
 8003572:	2b00      	cmp	r3, #0
 8003574:	d036      	beq.n	80035e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d016      	beq.n	80035ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800357e:	4b15      	ldr	r3, [pc, #84]	; (80035d4 <HAL_RCC_OscConfig+0x248>)
 8003580:	2201      	movs	r2, #1
 8003582:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003584:	f7fe fae4 	bl	8001b50 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800358c:	f7fe fae0 	bl	8001b50 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e167      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800359e:	4b0b      	ldr	r3, [pc, #44]	; (80035cc <HAL_RCC_OscConfig+0x240>)
 80035a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d0f0      	beq.n	800358c <HAL_RCC_OscConfig+0x200>
 80035aa:	e01b      	b.n	80035e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035ac:	4b09      	ldr	r3, [pc, #36]	; (80035d4 <HAL_RCC_OscConfig+0x248>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b2:	f7fe facd 	bl	8001b50 <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035b8:	e00e      	b.n	80035d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035ba:	f7fe fac9 	bl	8001b50 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d907      	bls.n	80035d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e150      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
 80035cc:	40023800 	.word	0x40023800
 80035d0:	42470000 	.word	0x42470000
 80035d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035d8:	4b88      	ldr	r3, [pc, #544]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 80035da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1ea      	bne.n	80035ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 8097 	beq.w	8003720 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035f2:	2300      	movs	r3, #0
 80035f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035f6:	4b81      	ldr	r3, [pc, #516]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10f      	bne.n	8003622 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003602:	2300      	movs	r3, #0
 8003604:	60bb      	str	r3, [r7, #8]
 8003606:	4b7d      	ldr	r3, [pc, #500]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	4a7c      	ldr	r2, [pc, #496]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 800360c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003610:	6413      	str	r3, [r2, #64]	; 0x40
 8003612:	4b7a      	ldr	r3, [pc, #488]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361a:	60bb      	str	r3, [r7, #8]
 800361c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800361e:	2301      	movs	r3, #1
 8003620:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003622:	4b77      	ldr	r3, [pc, #476]	; (8003800 <HAL_RCC_OscConfig+0x474>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362a:	2b00      	cmp	r3, #0
 800362c:	d118      	bne.n	8003660 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800362e:	4b74      	ldr	r3, [pc, #464]	; (8003800 <HAL_RCC_OscConfig+0x474>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a73      	ldr	r2, [pc, #460]	; (8003800 <HAL_RCC_OscConfig+0x474>)
 8003634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003638:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800363a:	f7fe fa89 	bl	8001b50 <HAL_GetTick>
 800363e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003640:	e008      	b.n	8003654 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003642:	f7fe fa85 	bl	8001b50 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e10c      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003654:	4b6a      	ldr	r3, [pc, #424]	; (8003800 <HAL_RCC_OscConfig+0x474>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0f0      	beq.n	8003642 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d106      	bne.n	8003676 <HAL_RCC_OscConfig+0x2ea>
 8003668:	4b64      	ldr	r3, [pc, #400]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 800366a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366c:	4a63      	ldr	r2, [pc, #396]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 800366e:	f043 0301 	orr.w	r3, r3, #1
 8003672:	6713      	str	r3, [r2, #112]	; 0x70
 8003674:	e01c      	b.n	80036b0 <HAL_RCC_OscConfig+0x324>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	2b05      	cmp	r3, #5
 800367c:	d10c      	bne.n	8003698 <HAL_RCC_OscConfig+0x30c>
 800367e:	4b5f      	ldr	r3, [pc, #380]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 8003680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003682:	4a5e      	ldr	r2, [pc, #376]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 8003684:	f043 0304 	orr.w	r3, r3, #4
 8003688:	6713      	str	r3, [r2, #112]	; 0x70
 800368a:	4b5c      	ldr	r3, [pc, #368]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 800368c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368e:	4a5b      	ldr	r2, [pc, #364]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 8003690:	f043 0301 	orr.w	r3, r3, #1
 8003694:	6713      	str	r3, [r2, #112]	; 0x70
 8003696:	e00b      	b.n	80036b0 <HAL_RCC_OscConfig+0x324>
 8003698:	4b58      	ldr	r3, [pc, #352]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 800369a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369c:	4a57      	ldr	r2, [pc, #348]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 800369e:	f023 0301 	bic.w	r3, r3, #1
 80036a2:	6713      	str	r3, [r2, #112]	; 0x70
 80036a4:	4b55      	ldr	r3, [pc, #340]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 80036a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a8:	4a54      	ldr	r2, [pc, #336]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 80036aa:	f023 0304 	bic.w	r3, r3, #4
 80036ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d015      	beq.n	80036e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b8:	f7fe fa4a 	bl	8001b50 <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036be:	e00a      	b.n	80036d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036c0:	f7fe fa46 	bl	8001b50 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e0cb      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d6:	4b49      	ldr	r3, [pc, #292]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 80036d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d0ee      	beq.n	80036c0 <HAL_RCC_OscConfig+0x334>
 80036e2:	e014      	b.n	800370e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036e4:	f7fe fa34 	bl	8001b50 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ea:	e00a      	b.n	8003702 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036ec:	f7fe fa30 	bl	8001b50 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e0b5      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003702:	4b3e      	ldr	r3, [pc, #248]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 8003704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1ee      	bne.n	80036ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800370e:	7dfb      	ldrb	r3, [r7, #23]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d105      	bne.n	8003720 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003714:	4b39      	ldr	r3, [pc, #228]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 8003716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003718:	4a38      	ldr	r2, [pc, #224]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 800371a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800371e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 80a1 	beq.w	800386c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800372a:	4b34      	ldr	r3, [pc, #208]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 030c 	and.w	r3, r3, #12
 8003732:	2b08      	cmp	r3, #8
 8003734:	d05c      	beq.n	80037f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	2b02      	cmp	r3, #2
 800373c:	d141      	bne.n	80037c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800373e:	4b31      	ldr	r3, [pc, #196]	; (8003804 <HAL_RCC_OscConfig+0x478>)
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003744:	f7fe fa04 	bl	8001b50 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800374c:	f7fe fa00 	bl	8001b50 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e087      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800375e:	4b27      	ldr	r3, [pc, #156]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f0      	bne.n	800374c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69da      	ldr	r2, [r3, #28]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	019b      	lsls	r3, r3, #6
 800377a:	431a      	orrs	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003780:	085b      	lsrs	r3, r3, #1
 8003782:	3b01      	subs	r3, #1
 8003784:	041b      	lsls	r3, r3, #16
 8003786:	431a      	orrs	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378c:	061b      	lsls	r3, r3, #24
 800378e:	491b      	ldr	r1, [pc, #108]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 8003790:	4313      	orrs	r3, r2
 8003792:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003794:	4b1b      	ldr	r3, [pc, #108]	; (8003804 <HAL_RCC_OscConfig+0x478>)
 8003796:	2201      	movs	r2, #1
 8003798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379a:	f7fe f9d9 	bl	8001b50 <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037a2:	f7fe f9d5 	bl	8001b50 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e05c      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037b4:	4b11      	ldr	r3, [pc, #68]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0f0      	beq.n	80037a2 <HAL_RCC_OscConfig+0x416>
 80037c0:	e054      	b.n	800386c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c2:	4b10      	ldr	r3, [pc, #64]	; (8003804 <HAL_RCC_OscConfig+0x478>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c8:	f7fe f9c2 	bl	8001b50 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037d0:	f7fe f9be 	bl	8001b50 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e045      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037e2:	4b06      	ldr	r3, [pc, #24]	; (80037fc <HAL_RCC_OscConfig+0x470>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1f0      	bne.n	80037d0 <HAL_RCC_OscConfig+0x444>
 80037ee:	e03d      	b.n	800386c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d107      	bne.n	8003808 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e038      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
 80037fc:	40023800 	.word	0x40023800
 8003800:	40007000 	.word	0x40007000
 8003804:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003808:	4b1b      	ldr	r3, [pc, #108]	; (8003878 <HAL_RCC_OscConfig+0x4ec>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d028      	beq.n	8003868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003820:	429a      	cmp	r2, r3
 8003822:	d121      	bne.n	8003868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800382e:	429a      	cmp	r2, r3
 8003830:	d11a      	bne.n	8003868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003838:	4013      	ands	r3, r2
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800383e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003840:	4293      	cmp	r3, r2
 8003842:	d111      	bne.n	8003868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384e:	085b      	lsrs	r3, r3, #1
 8003850:	3b01      	subs	r3, #1
 8003852:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003854:	429a      	cmp	r2, r3
 8003856:	d107      	bne.n	8003868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003862:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003864:	429a      	cmp	r2, r3
 8003866:	d001      	beq.n	800386c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e000      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3718      	adds	r7, #24
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40023800 	.word	0x40023800

0800387c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d101      	bne.n	8003890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e0cc      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003890:	4b68      	ldr	r3, [pc, #416]	; (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 030f 	and.w	r3, r3, #15
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	429a      	cmp	r2, r3
 800389c:	d90c      	bls.n	80038b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800389e:	4b65      	ldr	r3, [pc, #404]	; (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	b2d2      	uxtb	r2, r2
 80038a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a6:	4b63      	ldr	r3, [pc, #396]	; (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d001      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e0b8      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d020      	beq.n	8003906 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d005      	beq.n	80038dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038d0:	4b59      	ldr	r3, [pc, #356]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	4a58      	ldr	r2, [pc, #352]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0308 	and.w	r3, r3, #8
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d005      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038e8:	4b53      	ldr	r3, [pc, #332]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	4a52      	ldr	r2, [pc, #328]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038f4:	4b50      	ldr	r3, [pc, #320]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	494d      	ldr	r1, [pc, #308]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	4313      	orrs	r3, r2
 8003904:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	d044      	beq.n	800399c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d107      	bne.n	800392a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800391a:	4b47      	ldr	r3, [pc, #284]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d119      	bne.n	800395a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e07f      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2b02      	cmp	r3, #2
 8003930:	d003      	beq.n	800393a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003936:	2b03      	cmp	r3, #3
 8003938:	d107      	bne.n	800394a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800393a:	4b3f      	ldr	r3, [pc, #252]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d109      	bne.n	800395a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e06f      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800394a:	4b3b      	ldr	r3, [pc, #236]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e067      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800395a:	4b37      	ldr	r3, [pc, #220]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f023 0203 	bic.w	r2, r3, #3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	4934      	ldr	r1, [pc, #208]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 8003968:	4313      	orrs	r3, r2
 800396a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800396c:	f7fe f8f0 	bl	8001b50 <HAL_GetTick>
 8003970:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003972:	e00a      	b.n	800398a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003974:	f7fe f8ec 	bl	8001b50 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003982:	4293      	cmp	r3, r2
 8003984:	d901      	bls.n	800398a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e04f      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800398a:	4b2b      	ldr	r3, [pc, #172]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 020c 	and.w	r2, r3, #12
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	429a      	cmp	r2, r3
 800399a:	d1eb      	bne.n	8003974 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800399c:	4b25      	ldr	r3, [pc, #148]	; (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 030f 	and.w	r3, r3, #15
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d20c      	bcs.n	80039c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039aa:	4b22      	ldr	r3, [pc, #136]	; (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b2:	4b20      	ldr	r3, [pc, #128]	; (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d001      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e032      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d008      	beq.n	80039e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039d0:	4b19      	ldr	r3, [pc, #100]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	4916      	ldr	r1, [pc, #88]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d009      	beq.n	8003a02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039ee:	4b12      	ldr	r3, [pc, #72]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	490e      	ldr	r1, [pc, #56]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a02:	f000 f821 	bl	8003a48 <HAL_RCC_GetSysClockFreq>
 8003a06:	4602      	mov	r2, r0
 8003a08:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	091b      	lsrs	r3, r3, #4
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	490a      	ldr	r1, [pc, #40]	; (8003a3c <HAL_RCC_ClockConfig+0x1c0>)
 8003a14:	5ccb      	ldrb	r3, [r1, r3]
 8003a16:	fa22 f303 	lsr.w	r3, r2, r3
 8003a1a:	4a09      	ldr	r2, [pc, #36]	; (8003a40 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a1e:	4b09      	ldr	r3, [pc, #36]	; (8003a44 <HAL_RCC_ClockConfig+0x1c8>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7fe f850 	bl	8001ac8 <HAL_InitTick>

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	40023c00 	.word	0x40023c00
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	08006b50 	.word	0x08006b50
 8003a40:	20000014 	.word	0x20000014
 8003a44:	20000018 	.word	0x20000018

08003a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a4c:	b090      	sub	sp, #64	; 0x40
 8003a4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a50:	2300      	movs	r3, #0
 8003a52:	637b      	str	r3, [r7, #52]	; 0x34
 8003a54:	2300      	movs	r3, #0
 8003a56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a58:	2300      	movs	r3, #0
 8003a5a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a60:	4b59      	ldr	r3, [pc, #356]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 030c 	and.w	r3, r3, #12
 8003a68:	2b08      	cmp	r3, #8
 8003a6a:	d00d      	beq.n	8003a88 <HAL_RCC_GetSysClockFreq+0x40>
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	f200 80a1 	bhi.w	8003bb4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <HAL_RCC_GetSysClockFreq+0x34>
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	d003      	beq.n	8003a82 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a7a:	e09b      	b.n	8003bb4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a7c:	4b53      	ldr	r3, [pc, #332]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x184>)
 8003a7e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003a80:	e09b      	b.n	8003bba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a82:	4b53      	ldr	r3, [pc, #332]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a84:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a86:	e098      	b.n	8003bba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a88:	4b4f      	ldr	r3, [pc, #316]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a90:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a92:	4b4d      	ldr	r3, [pc, #308]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d028      	beq.n	8003af0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a9e:	4b4a      	ldr	r3, [pc, #296]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	099b      	lsrs	r3, r3, #6
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	623b      	str	r3, [r7, #32]
 8003aa8:	627a      	str	r2, [r7, #36]	; 0x24
 8003aaa:	6a3b      	ldr	r3, [r7, #32]
 8003aac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	4b47      	ldr	r3, [pc, #284]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ab4:	fb03 f201 	mul.w	r2, r3, r1
 8003ab8:	2300      	movs	r3, #0
 8003aba:	fb00 f303 	mul.w	r3, r0, r3
 8003abe:	4413      	add	r3, r2
 8003ac0:	4a43      	ldr	r2, [pc, #268]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ac2:	fba0 1202 	umull	r1, r2, r0, r2
 8003ac6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ac8:	460a      	mov	r2, r1
 8003aca:	62ba      	str	r2, [r7, #40]	; 0x28
 8003acc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ace:	4413      	add	r3, r2
 8003ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	61bb      	str	r3, [r7, #24]
 8003ad8:	61fa      	str	r2, [r7, #28]
 8003ada:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ade:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003ae2:	f7fc fb8b 	bl	80001fc <__aeabi_uldivmod>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	460b      	mov	r3, r1
 8003aea:	4613      	mov	r3, r2
 8003aec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003aee:	e053      	b.n	8003b98 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003af0:	4b35      	ldr	r3, [pc, #212]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	099b      	lsrs	r3, r3, #6
 8003af6:	2200      	movs	r2, #0
 8003af8:	613b      	str	r3, [r7, #16]
 8003afa:	617a      	str	r2, [r7, #20]
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b02:	f04f 0b00 	mov.w	fp, #0
 8003b06:	4652      	mov	r2, sl
 8003b08:	465b      	mov	r3, fp
 8003b0a:	f04f 0000 	mov.w	r0, #0
 8003b0e:	f04f 0100 	mov.w	r1, #0
 8003b12:	0159      	lsls	r1, r3, #5
 8003b14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b18:	0150      	lsls	r0, r2, #5
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	ebb2 080a 	subs.w	r8, r2, sl
 8003b22:	eb63 090b 	sbc.w	r9, r3, fp
 8003b26:	f04f 0200 	mov.w	r2, #0
 8003b2a:	f04f 0300 	mov.w	r3, #0
 8003b2e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b32:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b36:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b3a:	ebb2 0408 	subs.w	r4, r2, r8
 8003b3e:	eb63 0509 	sbc.w	r5, r3, r9
 8003b42:	f04f 0200 	mov.w	r2, #0
 8003b46:	f04f 0300 	mov.w	r3, #0
 8003b4a:	00eb      	lsls	r3, r5, #3
 8003b4c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b50:	00e2      	lsls	r2, r4, #3
 8003b52:	4614      	mov	r4, r2
 8003b54:	461d      	mov	r5, r3
 8003b56:	eb14 030a 	adds.w	r3, r4, sl
 8003b5a:	603b      	str	r3, [r7, #0]
 8003b5c:	eb45 030b 	adc.w	r3, r5, fp
 8003b60:	607b      	str	r3, [r7, #4]
 8003b62:	f04f 0200 	mov.w	r2, #0
 8003b66:	f04f 0300 	mov.w	r3, #0
 8003b6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b6e:	4629      	mov	r1, r5
 8003b70:	028b      	lsls	r3, r1, #10
 8003b72:	4621      	mov	r1, r4
 8003b74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b78:	4621      	mov	r1, r4
 8003b7a:	028a      	lsls	r2, r1, #10
 8003b7c:	4610      	mov	r0, r2
 8003b7e:	4619      	mov	r1, r3
 8003b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b82:	2200      	movs	r2, #0
 8003b84:	60bb      	str	r3, [r7, #8]
 8003b86:	60fa      	str	r2, [r7, #12]
 8003b88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b8c:	f7fc fb36 	bl	80001fc <__aeabi_uldivmod>
 8003b90:	4602      	mov	r2, r0
 8003b92:	460b      	mov	r3, r1
 8003b94:	4613      	mov	r3, r2
 8003b96:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b98:	4b0b      	ldr	r3, [pc, #44]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	0c1b      	lsrs	r3, r3, #16
 8003b9e:	f003 0303 	and.w	r3, r3, #3
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003ba8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bb2:	e002      	b.n	8003bba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bb4:	4b05      	ldr	r3, [pc, #20]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x184>)
 8003bb6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3740      	adds	r7, #64	; 0x40
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bc6:	bf00      	nop
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	00f42400 	.word	0x00f42400
 8003bd0:	017d7840 	.word	0x017d7840

08003bd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bd8:	4b03      	ldr	r3, [pc, #12]	; (8003be8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bda:	681b      	ldr	r3, [r3, #0]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	20000014 	.word	0x20000014

08003bec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bf0:	f7ff fff0 	bl	8003bd4 <HAL_RCC_GetHCLKFreq>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	4b05      	ldr	r3, [pc, #20]	; (8003c0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	0a9b      	lsrs	r3, r3, #10
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	4903      	ldr	r1, [pc, #12]	; (8003c10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c02:	5ccb      	ldrb	r3, [r1, r3]
 8003c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	08006b60 	.word	0x08006b60

08003c14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c18:	f7ff ffdc 	bl	8003bd4 <HAL_RCC_GetHCLKFreq>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	4b05      	ldr	r3, [pc, #20]	; (8003c34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	0b5b      	lsrs	r3, r3, #13
 8003c24:	f003 0307 	and.w	r3, r3, #7
 8003c28:	4903      	ldr	r1, [pc, #12]	; (8003c38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c2a:	5ccb      	ldrb	r3, [r1, r3]
 8003c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	40023800 	.word	0x40023800
 8003c38:	08006b60 	.word	0x08006b60

08003c3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10b      	bne.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d105      	bne.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d075      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c70:	4b91      	ldr	r3, [pc, #580]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c76:	f7fd ff6b 	bl	8001b50 <HAL_GetTick>
 8003c7a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c7c:	e008      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003c7e:	f7fd ff67 	bl	8001b50 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e189      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c90:	4b8a      	ldr	r3, [pc, #552]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1f0      	bne.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d009      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	019a      	lsls	r2, r3, #6
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	071b      	lsls	r3, r3, #28
 8003cb4:	4981      	ldr	r1, [pc, #516]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d01f      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003cc8:	4b7c      	ldr	r3, [pc, #496]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cce:	0f1b      	lsrs	r3, r3, #28
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	019a      	lsls	r2, r3, #6
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	061b      	lsls	r3, r3, #24
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	071b      	lsls	r3, r3, #28
 8003ce8:	4974      	ldr	r1, [pc, #464]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003cf0:	4b72      	ldr	r3, [pc, #456]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cf6:	f023 021f 	bic.w	r2, r3, #31
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	69db      	ldr	r3, [r3, #28]
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	496e      	ldr	r1, [pc, #440]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00d      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	019a      	lsls	r2, r3, #6
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	061b      	lsls	r3, r3, #24
 8003d20:	431a      	orrs	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	071b      	lsls	r3, r3, #28
 8003d28:	4964      	ldr	r1, [pc, #400]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d30:	4b61      	ldr	r3, [pc, #388]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003d32:	2201      	movs	r2, #1
 8003d34:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d36:	f7fd ff0b 	bl	8001b50 <HAL_GetTick>
 8003d3a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d3c:	e008      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d3e:	f7fd ff07 	bl	8001b50 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e129      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d50:	4b5a      	ldr	r3, [pc, #360]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0f0      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d105      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d079      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003d74:	4b52      	ldr	r3, [pc, #328]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d7a:	f7fd fee9 	bl	8001b50 <HAL_GetTick>
 8003d7e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d80:	e008      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003d82:	f7fd fee5 	bl	8001b50 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e107      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d94:	4b49      	ldr	r3, [pc, #292]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003da0:	d0ef      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0304 	and.w	r3, r3, #4
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d020      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003dae:	4b43      	ldr	r3, [pc, #268]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db4:	0f1b      	lsrs	r3, r3, #28
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	019a      	lsls	r2, r3, #6
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	061b      	lsls	r3, r3, #24
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	071b      	lsls	r3, r3, #28
 8003dce:	493b      	ldr	r1, [pc, #236]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003dd6:	4b39      	ldr	r3, [pc, #228]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ddc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	3b01      	subs	r3, #1
 8003de6:	021b      	lsls	r3, r3, #8
 8003de8:	4934      	ldr	r1, [pc, #208]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0308 	and.w	r3, r3, #8
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d01e      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003dfc:	4b2f      	ldr	r3, [pc, #188]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e02:	0e1b      	lsrs	r3, r3, #24
 8003e04:	f003 030f 	and.w	r3, r3, #15
 8003e08:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	019a      	lsls	r2, r3, #6
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	061b      	lsls	r3, r3, #24
 8003e14:	431a      	orrs	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	071b      	lsls	r3, r3, #28
 8003e1c:	4927      	ldr	r1, [pc, #156]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003e24:	4b25      	ldr	r3, [pc, #148]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e2a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	4922      	ldr	r1, [pc, #136]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003e3a:	4b21      	ldr	r3, [pc, #132]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e40:	f7fd fe86 	bl	8001b50 <HAL_GetTick>
 8003e44:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e46:	e008      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003e48:	f7fd fe82 	bl	8001b50 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e0a4      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e5a:	4b18      	ldr	r3, [pc, #96]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e66:	d1ef      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0320 	and.w	r3, r3, #32
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f000 808b 	beq.w	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e76:	2300      	movs	r3, #0
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	4b10      	ldr	r3, [pc, #64]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	4a0f      	ldr	r2, [pc, #60]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e84:	6413      	str	r3, [r2, #64]	; 0x40
 8003e86:	4b0d      	ldr	r3, [pc, #52]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e8e:	60fb      	str	r3, [r7, #12]
 8003e90:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003e92:	4b0c      	ldr	r3, [pc, #48]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a0b      	ldr	r2, [pc, #44]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e9c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e9e:	f7fd fe57 	bl	8001b50 <HAL_GetTick>
 8003ea2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003ea4:	e010      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003ea6:	f7fd fe53 	bl	8001b50 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d909      	bls.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e075      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003eb8:	42470068 	.word	0x42470068
 8003ebc:	40023800 	.word	0x40023800
 8003ec0:	42470070 	.word	0x42470070
 8003ec4:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003ec8:	4b38      	ldr	r3, [pc, #224]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d0e8      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ed4:	4b36      	ldr	r3, [pc, #216]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003edc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d02f      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d028      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ef2:	4b2f      	ldr	r3, [pc, #188]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003efa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003efc:	4b2d      	ldr	r3, [pc, #180]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003efe:	2201      	movs	r2, #1
 8003f00:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f02:	4b2c      	ldr	r3, [pc, #176]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003f08:	4a29      	ldr	r2, [pc, #164]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f0e:	4b28      	ldr	r3, [pc, #160]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d114      	bne.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003f1a:	f7fd fe19 	bl	8001b50 <HAL_GetTick>
 8003f1e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f20:	e00a      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f22:	f7fd fe15 	bl	8001b50 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d901      	bls.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e035      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f38:	4b1d      	ldr	r3, [pc, #116]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d0ee      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f50:	d10d      	bne.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003f52:	4b17      	ldr	r3, [pc, #92]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003f62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f66:	4912      	ldr	r1, [pc, #72]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	608b      	str	r3, [r1, #8]
 8003f6c:	e005      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8003f6e:	4b10      	ldr	r3, [pc, #64]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	4a0f      	ldr	r2, [pc, #60]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f74:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f78:	6093      	str	r3, [r2, #8]
 8003f7a:	4b0d      	ldr	r3, [pc, #52]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f86:	490a      	ldr	r1, [pc, #40]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0310 	and.w	r3, r3, #16
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d004      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8003f9e:	4b06      	ldr	r3, [pc, #24]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8003fa0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3718      	adds	r7, #24
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	40007000 	.word	0x40007000
 8003fb0:	40023800 	.word	0x40023800
 8003fb4:	42470e40 	.word	0x42470e40
 8003fb8:	424711e0 	.word	0x424711e0

08003fbc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e073      	b.n	80040ba <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	7f5b      	ldrb	r3, [r3, #29]
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d105      	bne.n	8003fe8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7fd fa4e 	bl	8001484 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2202      	movs	r2, #2
 8003fec:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f003 0310 	and.w	r3, r3, #16
 8003ff8:	2b10      	cmp	r3, #16
 8003ffa:	d055      	beq.n	80040a8 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	22ca      	movs	r2, #202	; 0xca
 8004002:	625a      	str	r2, [r3, #36]	; 0x24
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2253      	movs	r2, #83	; 0x53
 800400a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 fa49 	bl	80044a4 <RTC_EnterInitMode>
 8004012:	4603      	mov	r3, r0
 8004014:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004016:	7bfb      	ldrb	r3, [r7, #15]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d12c      	bne.n	8004076 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	6812      	ldr	r2, [r2, #0]
 8004026:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800402a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800402e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6899      	ldr	r1, [r3, #8]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685a      	ldr	r2, [r3, #4]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	431a      	orrs	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	431a      	orrs	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	68d2      	ldr	r2, [r2, #12]
 8004056:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6919      	ldr	r1, [r3, #16]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	041a      	lsls	r2, r3, #16
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	430a      	orrs	r2, r1
 800406a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 fa50 	bl	8004512 <RTC_ExitInitMode>
 8004072:	4603      	mov	r3, r0
 8004074:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004076:	7bfb      	ldrb	r3, [r7, #15]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d110      	bne.n	800409e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800408a:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	699a      	ldr	r2, [r3, #24]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	22ff      	movs	r2, #255	; 0xff
 80040a4:	625a      	str	r2, [r3, #36]	; 0x24
 80040a6:	e001      	b.n	80040ac <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80040a8:	2300      	movs	r3, #0
 80040aa:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80040ac:	7bfb      	ldrb	r3, [r7, #15]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d102      	bne.n	80040b8 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80040b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80040c2:	b590      	push	{r4, r7, lr}
 80040c4:	b087      	sub	sp, #28
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	60f8      	str	r0, [r7, #12]
 80040ca:	60b9      	str	r1, [r7, #8]
 80040cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80040ce:	2300      	movs	r3, #0
 80040d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	7f1b      	ldrb	r3, [r3, #28]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d101      	bne.n	80040de <HAL_RTC_SetTime+0x1c>
 80040da:	2302      	movs	r3, #2
 80040dc:	e087      	b.n	80041ee <HAL_RTC_SetTime+0x12c>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2201      	movs	r2, #1
 80040e2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2202      	movs	r2, #2
 80040e8:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d126      	bne.n	800413e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d102      	bne.n	8004104 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	2200      	movs	r2, #0
 8004102:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	4618      	mov	r0, r3
 800410a:	f000 fa27 	bl	800455c <RTC_ByteToBcd2>
 800410e:	4603      	mov	r3, r0
 8004110:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	785b      	ldrb	r3, [r3, #1]
 8004116:	4618      	mov	r0, r3
 8004118:	f000 fa20 	bl	800455c <RTC_ByteToBcd2>
 800411c:	4603      	mov	r3, r0
 800411e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004120:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	789b      	ldrb	r3, [r3, #2]
 8004126:	4618      	mov	r0, r3
 8004128:	f000 fa18 	bl	800455c <RTC_ByteToBcd2>
 800412c:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800412e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	78db      	ldrb	r3, [r3, #3]
 8004136:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004138:	4313      	orrs	r3, r2
 800413a:	617b      	str	r3, [r7, #20]
 800413c:	e018      	b.n	8004170 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004148:	2b00      	cmp	r3, #0
 800414a:	d102      	bne.n	8004152 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	2200      	movs	r2, #0
 8004150:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	785b      	ldrb	r3, [r3, #1]
 800415c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800415e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004164:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	78db      	ldrb	r3, [r3, #3]
 800416a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800416c:	4313      	orrs	r3, r2
 800416e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	22ca      	movs	r2, #202	; 0xca
 8004176:	625a      	str	r2, [r3, #36]	; 0x24
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2253      	movs	r2, #83	; 0x53
 800417e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 f98f 	bl	80044a4 <RTC_EnterInitMode>
 8004186:	4603      	mov	r3, r0
 8004188:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800418a:	7cfb      	ldrb	r3, [r7, #19]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d120      	bne.n	80041d2 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800419a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800419e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	689a      	ldr	r2, [r3, #8]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80041ae:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6899      	ldr	r1, [r3, #8]
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	431a      	orrs	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f000 f9a2 	bl	8004512 <RTC_ExitInitMode>
 80041ce:	4603      	mov	r3, r0
 80041d0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80041d2:	7cfb      	ldrb	r3, [r7, #19]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d102      	bne.n	80041de <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2201      	movs	r2, #1
 80041dc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	22ff      	movs	r2, #255	; 0xff
 80041e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	771a      	strb	r2, [r3, #28]

  return status;
 80041ec:	7cfb      	ldrb	r3, [r7, #19]
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	371c      	adds	r7, #28
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd90      	pop	{r4, r7, pc}

080041f6 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b086      	sub	sp, #24
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	60f8      	str	r0, [r7, #12]
 80041fe:	60b9      	str	r1, [r7, #8]
 8004200:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004202:	2300      	movs	r3, #0
 8004204:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004228:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800422c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	0c1b      	lsrs	r3, r3, #16
 8004232:	b2db      	uxtb	r3, r3
 8004234:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004238:	b2da      	uxtb	r2, r3
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	0a1b      	lsrs	r3, r3, #8
 8004242:	b2db      	uxtb	r3, r3
 8004244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004248:	b2da      	uxtb	r2, r3
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	b2db      	uxtb	r3, r3
 8004252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004256:	b2da      	uxtb	r2, r3
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	0d9b      	lsrs	r3, r3, #22
 8004260:	b2db      	uxtb	r3, r3
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	b2da      	uxtb	r2, r3
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d11a      	bne.n	80042a8 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	4618      	mov	r0, r3
 8004278:	f000 f98e 	bl	8004598 <RTC_Bcd2ToByte>
 800427c:	4603      	mov	r3, r0
 800427e:	461a      	mov	r2, r3
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	785b      	ldrb	r3, [r3, #1]
 8004288:	4618      	mov	r0, r3
 800428a:	f000 f985 	bl	8004598 <RTC_Bcd2ToByte>
 800428e:	4603      	mov	r3, r0
 8004290:	461a      	mov	r2, r3
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	789b      	ldrb	r3, [r3, #2]
 800429a:	4618      	mov	r0, r3
 800429c:	f000 f97c 	bl	8004598 <RTC_Bcd2ToByte>
 80042a0:	4603      	mov	r3, r0
 80042a2:	461a      	mov	r2, r3
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3718      	adds	r7, #24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80042b2:	b590      	push	{r4, r7, lr}
 80042b4:	b087      	sub	sp, #28
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	60f8      	str	r0, [r7, #12]
 80042ba:	60b9      	str	r1, [r7, #8]
 80042bc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80042be:	2300      	movs	r3, #0
 80042c0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	7f1b      	ldrb	r3, [r3, #28]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d101      	bne.n	80042ce <HAL_RTC_SetDate+0x1c>
 80042ca:	2302      	movs	r3, #2
 80042cc:	e071      	b.n	80043b2 <HAL_RTC_SetDate+0x100>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2201      	movs	r2, #1
 80042d2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2202      	movs	r2, #2
 80042d8:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10e      	bne.n	80042fe <HAL_RTC_SetDate+0x4c>
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	785b      	ldrb	r3, [r3, #1]
 80042e4:	f003 0310 	and.w	r3, r3, #16
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d008      	beq.n	80042fe <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	785b      	ldrb	r3, [r3, #1]
 80042f0:	f023 0310 	bic.w	r3, r3, #16
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	330a      	adds	r3, #10
 80042f8:	b2da      	uxtb	r2, r3
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d11c      	bne.n	800433e <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	78db      	ldrb	r3, [r3, #3]
 8004308:	4618      	mov	r0, r3
 800430a:	f000 f927 	bl	800455c <RTC_ByteToBcd2>
 800430e:	4603      	mov	r3, r0
 8004310:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	785b      	ldrb	r3, [r3, #1]
 8004316:	4618      	mov	r0, r3
 8004318:	f000 f920 	bl	800455c <RTC_ByteToBcd2>
 800431c:	4603      	mov	r3, r0
 800431e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004320:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	789b      	ldrb	r3, [r3, #2]
 8004326:	4618      	mov	r0, r3
 8004328:	f000 f918 	bl	800455c <RTC_ByteToBcd2>
 800432c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800432e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004338:	4313      	orrs	r3, r2
 800433a:	617b      	str	r3, [r7, #20]
 800433c:	e00e      	b.n	800435c <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	78db      	ldrb	r3, [r3, #3]
 8004342:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	785b      	ldrb	r3, [r3, #1]
 8004348:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800434a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004350:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004358:	4313      	orrs	r3, r2
 800435a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	22ca      	movs	r2, #202	; 0xca
 8004362:	625a      	str	r2, [r3, #36]	; 0x24
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2253      	movs	r2, #83	; 0x53
 800436a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 f899 	bl	80044a4 <RTC_EnterInitMode>
 8004372:	4603      	mov	r3, r0
 8004374:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004376:	7cfb      	ldrb	r3, [r7, #19]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10c      	bne.n	8004396 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004386:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800438a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f000 f8c0 	bl	8004512 <RTC_ExitInitMode>
 8004392:	4603      	mov	r3, r0
 8004394:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004396:	7cfb      	ldrb	r3, [r7, #19]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d102      	bne.n	80043a2 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2201      	movs	r2, #1
 80043a0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	22ff      	movs	r2, #255	; 0xff
 80043a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	771a      	strb	r2, [r3, #28]

  return status;
 80043b0:	7cfb      	ldrb	r3, [r7, #19]
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	371c      	adds	r7, #28
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd90      	pop	{r4, r7, pc}

080043ba <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b086      	sub	sp, #24
 80043be:	af00      	add	r7, sp, #0
 80043c0:	60f8      	str	r0, [r7, #12]
 80043c2:	60b9      	str	r1, [r7, #8]
 80043c4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80043c6:	2300      	movs	r3, #0
 80043c8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80043d4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80043d8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	0c1b      	lsrs	r3, r3, #16
 80043de:	b2da      	uxtb	r2, r3
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	0a1b      	lsrs	r3, r3, #8
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	f003 031f 	and.w	r3, r3, #31
 80043ee:	b2da      	uxtb	r2, r3
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	0b5b      	lsrs	r3, r3, #13
 8004406:	b2db      	uxtb	r3, r3
 8004408:	f003 0307 	and.w	r3, r3, #7
 800440c:	b2da      	uxtb	r2, r3
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d11a      	bne.n	800444e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	78db      	ldrb	r3, [r3, #3]
 800441c:	4618      	mov	r0, r3
 800441e:	f000 f8bb 	bl	8004598 <RTC_Bcd2ToByte>
 8004422:	4603      	mov	r3, r0
 8004424:	461a      	mov	r2, r3
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	785b      	ldrb	r3, [r3, #1]
 800442e:	4618      	mov	r0, r3
 8004430:	f000 f8b2 	bl	8004598 <RTC_Bcd2ToByte>
 8004434:	4603      	mov	r3, r0
 8004436:	461a      	mov	r2, r3
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	789b      	ldrb	r3, [r3, #2]
 8004440:	4618      	mov	r0, r3
 8004442:	f000 f8a9 	bl	8004598 <RTC_Bcd2ToByte>
 8004446:	4603      	mov	r3, r0
 8004448:	461a      	mov	r2, r3
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3718      	adds	r7, #24
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004460:	2300      	movs	r3, #0
 8004462:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a0d      	ldr	r2, [pc, #52]	; (80044a0 <HAL_RTC_WaitForSynchro+0x48>)
 800446a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800446c:	f7fd fb70 	bl	8001b50 <HAL_GetTick>
 8004470:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004472:	e009      	b.n	8004488 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004474:	f7fd fb6c 	bl	8001b50 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004482:	d901      	bls.n	8004488 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e007      	b.n	8004498 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	f003 0320 	and.w	r3, r3, #32
 8004492:	2b00      	cmp	r3, #0
 8004494:	d0ee      	beq.n	8004474 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	00017f5f 	.word	0x00017f5f

080044a4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044ac:	2300      	movs	r3, #0
 80044ae:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80044b0:	2300      	movs	r3, #0
 80044b2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d122      	bne.n	8004508 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68da      	ldr	r2, [r3, #12]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80044d0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80044d2:	f7fd fb3d 	bl	8001b50 <HAL_GetTick>
 80044d6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80044d8:	e00c      	b.n	80044f4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80044da:	f7fd fb39 	bl	8001b50 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044e8:	d904      	bls.n	80044f4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2204      	movs	r2, #4
 80044ee:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d102      	bne.n	8004508 <RTC_EnterInitMode+0x64>
 8004502:	7bfb      	ldrb	r3, [r7, #15]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d1e8      	bne.n	80044da <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004508:	7bfb      	ldrb	r3, [r7, #15]
}
 800450a:	4618      	mov	r0, r3
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}

08004512 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004512:	b580      	push	{r7, lr}
 8004514:	b084      	sub	sp, #16
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800451a:	2300      	movs	r3, #0
 800451c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68da      	ldr	r2, [r3, #12]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800452c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f003 0320 	and.w	r3, r3, #32
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10a      	bne.n	8004552 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f7ff ff8b 	bl	8004458 <HAL_RTC_WaitForSynchro>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d004      	beq.n	8004552 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2204      	movs	r2, #4
 800454c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004552:	7bfb      	ldrb	r3, [r7, #15]
}
 8004554:	4618      	mov	r0, r3
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	4603      	mov	r3, r0
 8004564:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004566:	2300      	movs	r3, #0
 8004568:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800456a:	e005      	b.n	8004578 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	3301      	adds	r3, #1
 8004570:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004572:	79fb      	ldrb	r3, [r7, #7]
 8004574:	3b0a      	subs	r3, #10
 8004576:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004578:	79fb      	ldrb	r3, [r7, #7]
 800457a:	2b09      	cmp	r3, #9
 800457c:	d8f6      	bhi.n	800456c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	b2db      	uxtb	r3, r3
 8004582:	011b      	lsls	r3, r3, #4
 8004584:	b2da      	uxtb	r2, r3
 8004586:	79fb      	ldrb	r3, [r7, #7]
 8004588:	4313      	orrs	r3, r2
 800458a:	b2db      	uxtb	r3, r3
}
 800458c:	4618      	mov	r0, r3
 800458e:	3714      	adds	r7, #20
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	4603      	mov	r3, r0
 80045a0:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80045a2:	2300      	movs	r3, #0
 80045a4:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80045a6:	79fb      	ldrb	r3, [r7, #7]
 80045a8:	091b      	lsrs	r3, r3, #4
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	461a      	mov	r2, r3
 80045ae:	4613      	mov	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	4413      	add	r3, r2
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	79fb      	ldrb	r3, [r7, #7]
 80045be:	f003 030f 	and.w	r3, r3, #15
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	4413      	add	r3, r2
 80045c6:	b2db      	uxtb	r3, r3
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3714      	adds	r7, #20
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e07b      	b.n	80046de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d108      	bne.n	8004600 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045f6:	d009      	beq.n	800460c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	61da      	str	r2, [r3, #28]
 80045fe:	e005      	b.n	800460c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d106      	bne.n	800462c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7fc ff56 	bl	80014d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2202      	movs	r2, #2
 8004630:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004642:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004654:	431a      	orrs	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800465e:	431a      	orrs	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	431a      	orrs	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	431a      	orrs	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800467c:	431a      	orrs	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004686:	431a      	orrs	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a1b      	ldr	r3, [r3, #32]
 800468c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004690:	ea42 0103 	orr.w	r1, r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004698:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	0c1b      	lsrs	r3, r3, #16
 80046aa:	f003 0104 	and.w	r1, r3, #4
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b2:	f003 0210 	and.w	r2, r3, #16
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	69da      	ldr	r2, [r3, #28]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b088      	sub	sp, #32
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	60f8      	str	r0, [r7, #12]
 80046ee:	60b9      	str	r1, [r7, #8]
 80046f0:	603b      	str	r3, [r7, #0]
 80046f2:	4613      	mov	r3, r2
 80046f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80046f6:	2300      	movs	r3, #0
 80046f8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004700:	2b01      	cmp	r3, #1
 8004702:	d101      	bne.n	8004708 <HAL_SPI_Transmit+0x22>
 8004704:	2302      	movs	r3, #2
 8004706:	e12d      	b.n	8004964 <HAL_SPI_Transmit+0x27e>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004710:	f7fd fa1e 	bl	8001b50 <HAL_GetTick>
 8004714:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004716:	88fb      	ldrh	r3, [r7, #6]
 8004718:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b01      	cmp	r3, #1
 8004724:	d002      	beq.n	800472c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004726:	2302      	movs	r3, #2
 8004728:	77fb      	strb	r3, [r7, #31]
    goto error;
 800472a:	e116      	b.n	800495a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d002      	beq.n	8004738 <HAL_SPI_Transmit+0x52>
 8004732:	88fb      	ldrh	r3, [r7, #6]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d102      	bne.n	800473e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800473c:	e10d      	b.n	800495a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2203      	movs	r2, #3
 8004742:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	88fa      	ldrh	r2, [r7, #6]
 8004756:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	88fa      	ldrh	r2, [r7, #6]
 800475c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004784:	d10f      	bne.n	80047a6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004794:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b0:	2b40      	cmp	r3, #64	; 0x40
 80047b2:	d007      	beq.n	80047c4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047cc:	d14f      	bne.n	800486e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d002      	beq.n	80047dc <HAL_SPI_Transmit+0xf6>
 80047d6:	8afb      	ldrh	r3, [r7, #22]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d142      	bne.n	8004862 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e0:	881a      	ldrh	r2, [r3, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ec:	1c9a      	adds	r2, r3, #2
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	3b01      	subs	r3, #1
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004800:	e02f      	b.n	8004862 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b02      	cmp	r3, #2
 800480e:	d112      	bne.n	8004836 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004814:	881a      	ldrh	r2, [r3, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004820:	1c9a      	adds	r2, r3, #2
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800482a:	b29b      	uxth	r3, r3
 800482c:	3b01      	subs	r3, #1
 800482e:	b29a      	uxth	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	86da      	strh	r2, [r3, #54]	; 0x36
 8004834:	e015      	b.n	8004862 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004836:	f7fd f98b 	bl	8001b50 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	429a      	cmp	r2, r3
 8004844:	d803      	bhi.n	800484e <HAL_SPI_Transmit+0x168>
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800484c:	d102      	bne.n	8004854 <HAL_SPI_Transmit+0x16e>
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d106      	bne.n	8004862 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004860:	e07b      	b.n	800495a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004866:	b29b      	uxth	r3, r3
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1ca      	bne.n	8004802 <HAL_SPI_Transmit+0x11c>
 800486c:	e050      	b.n	8004910 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d002      	beq.n	800487c <HAL_SPI_Transmit+0x196>
 8004876:	8afb      	ldrh	r3, [r7, #22]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d144      	bne.n	8004906 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	330c      	adds	r3, #12
 8004886:	7812      	ldrb	r2, [r2, #0]
 8004888:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488e:	1c5a      	adds	r2, r3, #1
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004898:	b29b      	uxth	r3, r3
 800489a:	3b01      	subs	r3, #1
 800489c:	b29a      	uxth	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80048a2:	e030      	b.n	8004906 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d113      	bne.n	80048da <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	330c      	adds	r3, #12
 80048bc:	7812      	ldrb	r2, [r2, #0]
 80048be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c4:	1c5a      	adds	r2, r3, #1
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	3b01      	subs	r3, #1
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	86da      	strh	r2, [r3, #54]	; 0x36
 80048d8:	e015      	b.n	8004906 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048da:	f7fd f939 	bl	8001b50 <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	683a      	ldr	r2, [r7, #0]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d803      	bhi.n	80048f2 <HAL_SPI_Transmit+0x20c>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048f0:	d102      	bne.n	80048f8 <HAL_SPI_Transmit+0x212>
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d106      	bne.n	8004906 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004904:	e029      	b.n	800495a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800490a:	b29b      	uxth	r3, r3
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1c9      	bne.n	80048a4 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	6839      	ldr	r1, [r7, #0]
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f000 fbdf 	bl	80050d8 <SPI_EndRxTxTransaction>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d002      	beq.n	8004926 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2220      	movs	r2, #32
 8004924:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10a      	bne.n	8004944 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800492e:	2300      	movs	r3, #0
 8004930:	613b      	str	r3, [r7, #16]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	613b      	str	r3, [r7, #16]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	613b      	str	r3, [r7, #16]
 8004942:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004948:	2b00      	cmp	r3, #0
 800494a:	d002      	beq.n	8004952 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	77fb      	strb	r3, [r7, #31]
 8004950:	e003      	b.n	800495a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004962:	7ffb      	ldrb	r3, [r7, #31]
}
 8004964:	4618      	mov	r0, r3
 8004966:	3720      	adds	r7, #32
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b088      	sub	sp, #32
 8004970:	af02      	add	r7, sp, #8
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	603b      	str	r3, [r7, #0]
 8004978:	4613      	mov	r3, r2
 800497a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800497c:	2300      	movs	r3, #0
 800497e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004986:	b2db      	uxtb	r3, r3
 8004988:	2b01      	cmp	r3, #1
 800498a:	d002      	beq.n	8004992 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800498c:	2302      	movs	r3, #2
 800498e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004990:	e0fb      	b.n	8004b8a <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800499a:	d112      	bne.n	80049c2 <HAL_SPI_Receive+0x56>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10e      	bne.n	80049c2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2204      	movs	r2, #4
 80049a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80049ac:	88fa      	ldrh	r2, [r7, #6]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	4613      	mov	r3, r2
 80049b4:	68ba      	ldr	r2, [r7, #8]
 80049b6:	68b9      	ldr	r1, [r7, #8]
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f000 f8ef 	bl	8004b9c <HAL_SPI_TransmitReceive>
 80049be:	4603      	mov	r3, r0
 80049c0:	e0e8      	b.n	8004b94 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d101      	bne.n	80049d0 <HAL_SPI_Receive+0x64>
 80049cc:	2302      	movs	r3, #2
 80049ce:	e0e1      	b.n	8004b94 <HAL_SPI_Receive+0x228>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049d8:	f7fd f8ba 	bl	8001b50 <HAL_GetTick>
 80049dc:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d002      	beq.n	80049ea <HAL_SPI_Receive+0x7e>
 80049e4:	88fb      	ldrh	r3, [r7, #6]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d102      	bne.n	80049f0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80049ee:	e0cc      	b.n	8004b8a <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2204      	movs	r2, #4
 80049f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	88fa      	ldrh	r2, [r7, #6]
 8004a08:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	88fa      	ldrh	r2, [r7, #6]
 8004a0e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a36:	d10f      	bne.n	8004a58 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a46:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a56:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a62:	2b40      	cmp	r3, #64	; 0x40
 8004a64:	d007      	beq.n	8004a76 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a74:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d16a      	bne.n	8004b54 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004a7e:	e032      	b.n	8004ae6 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d115      	bne.n	8004aba <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f103 020c 	add.w	r2, r3, #12
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9a:	7812      	ldrb	r2, [r2, #0]
 8004a9c:	b2d2      	uxtb	r2, r2
 8004a9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa4:	1c5a      	adds	r2, r3, #1
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ab8:	e015      	b.n	8004ae6 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004aba:	f7fd f849 	bl	8001b50 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d803      	bhi.n	8004ad2 <HAL_SPI_Receive+0x166>
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ad0:	d102      	bne.n	8004ad8 <HAL_SPI_Receive+0x16c>
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d106      	bne.n	8004ae6 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004ae4:	e051      	b.n	8004b8a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1c7      	bne.n	8004a80 <HAL_SPI_Receive+0x114>
 8004af0:	e035      	b.n	8004b5e <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d113      	bne.n	8004b28 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68da      	ldr	r2, [r3, #12]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0a:	b292      	uxth	r2, r2
 8004b0c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b12:	1c9a      	adds	r2, r3, #2
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b26:	e015      	b.n	8004b54 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b28:	f7fd f812 	bl	8001b50 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	683a      	ldr	r2, [r7, #0]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d803      	bhi.n	8004b40 <HAL_SPI_Receive+0x1d4>
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b3e:	d102      	bne.n	8004b46 <HAL_SPI_Receive+0x1da>
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d106      	bne.n	8004b54 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004b52:	e01a      	b.n	8004b8a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1c9      	bne.n	8004af2 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	6839      	ldr	r1, [r7, #0]
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f000 fa52 	bl	800500c <SPI_EndRxTransaction>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d002      	beq.n	8004b74 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2220      	movs	r2, #32
 8004b72:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d002      	beq.n	8004b82 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	75fb      	strb	r3, [r7, #23]
 8004b80:	e003      	b.n	8004b8a <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3718      	adds	r7, #24
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b08c      	sub	sp, #48	; 0x30
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
 8004ba8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004baa:	2301      	movs	r3, #1
 8004bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d101      	bne.n	8004bc2 <HAL_SPI_TransmitReceive+0x26>
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	e198      	b.n	8004ef4 <HAL_SPI_TransmitReceive+0x358>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bca:	f7fc ffc1 	bl	8001b50 <HAL_GetTick>
 8004bce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004be0:	887b      	ldrh	r3, [r7, #2]
 8004be2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004be4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d00f      	beq.n	8004c0c <HAL_SPI_TransmitReceive+0x70>
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bf2:	d107      	bne.n	8004c04 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d103      	bne.n	8004c04 <HAL_SPI_TransmitReceive+0x68>
 8004bfc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c00:	2b04      	cmp	r3, #4
 8004c02:	d003      	beq.n	8004c0c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004c04:	2302      	movs	r3, #2
 8004c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c0a:	e16d      	b.n	8004ee8 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d005      	beq.n	8004c1e <HAL_SPI_TransmitReceive+0x82>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d002      	beq.n	8004c1e <HAL_SPI_TransmitReceive+0x82>
 8004c18:	887b      	ldrh	r3, [r7, #2]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d103      	bne.n	8004c26 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c24:	e160      	b.n	8004ee8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	d003      	beq.n	8004c3a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2205      	movs	r2, #5
 8004c36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	887a      	ldrh	r2, [r7, #2]
 8004c4a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	887a      	ldrh	r2, [r7, #2]
 8004c50:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	887a      	ldrh	r2, [r7, #2]
 8004c5c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	887a      	ldrh	r2, [r7, #2]
 8004c62:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7a:	2b40      	cmp	r3, #64	; 0x40
 8004c7c:	d007      	beq.n	8004c8e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c96:	d17c      	bne.n	8004d92 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d002      	beq.n	8004ca6 <HAL_SPI_TransmitReceive+0x10a>
 8004ca0:	8b7b      	ldrh	r3, [r7, #26]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d16a      	bne.n	8004d7c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004caa:	881a      	ldrh	r2, [r3, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb6:	1c9a      	adds	r2, r3, #2
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cca:	e057      	b.n	8004d7c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d11b      	bne.n	8004d12 <HAL_SPI_TransmitReceive+0x176>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d016      	beq.n	8004d12 <HAL_SPI_TransmitReceive+0x176>
 8004ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d113      	bne.n	8004d12 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cee:	881a      	ldrh	r2, [r3, #0]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfa:	1c9a      	adds	r2, r3, #2
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	3b01      	subs	r3, #1
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d119      	bne.n	8004d54 <HAL_SPI_TransmitReceive+0x1b8>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d014      	beq.n	8004d54 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68da      	ldr	r2, [r3, #12]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d34:	b292      	uxth	r2, r2
 8004d36:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3c:	1c9a      	adds	r2, r3, #2
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d50:	2301      	movs	r3, #1
 8004d52:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d54:	f7fc fefc 	bl	8001b50 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d80b      	bhi.n	8004d7c <HAL_SPI_TransmitReceive+0x1e0>
 8004d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d6a:	d007      	beq.n	8004d7c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004d7a:	e0b5      	b.n	8004ee8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1a2      	bne.n	8004ccc <HAL_SPI_TransmitReceive+0x130>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d19d      	bne.n	8004ccc <HAL_SPI_TransmitReceive+0x130>
 8004d90:	e080      	b.n	8004e94 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d002      	beq.n	8004da0 <HAL_SPI_TransmitReceive+0x204>
 8004d9a:	8b7b      	ldrh	r3, [r7, #26]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d16f      	bne.n	8004e80 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	330c      	adds	r3, #12
 8004daa:	7812      	ldrb	r2, [r2, #0]
 8004dac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db2:	1c5a      	adds	r2, r3, #1
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dc6:	e05b      	b.n	8004e80 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d11c      	bne.n	8004e10 <HAL_SPI_TransmitReceive+0x274>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d017      	beq.n	8004e10 <HAL_SPI_TransmitReceive+0x274>
 8004de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d114      	bne.n	8004e10 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	330c      	adds	r3, #12
 8004df0:	7812      	ldrb	r2, [r2, #0]
 8004df2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df8:	1c5a      	adds	r2, r3, #1
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	3b01      	subs	r3, #1
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d119      	bne.n	8004e52 <HAL_SPI_TransmitReceive+0x2b6>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d014      	beq.n	8004e52 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68da      	ldr	r2, [r3, #12]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e32:	b2d2      	uxtb	r2, r2
 8004e34:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3a:	1c5a      	adds	r2, r3, #1
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	3b01      	subs	r3, #1
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e52:	f7fc fe7d 	bl	8001b50 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d803      	bhi.n	8004e6a <HAL_SPI_TransmitReceive+0x2ce>
 8004e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e68:	d102      	bne.n	8004e70 <HAL_SPI_TransmitReceive+0x2d4>
 8004e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d107      	bne.n	8004e80 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004e7e:	e033      	b.n	8004ee8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d19e      	bne.n	8004dc8 <HAL_SPI_TransmitReceive+0x22c>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d199      	bne.n	8004dc8 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f000 f91d 	bl	80050d8 <SPI_EndRxTxTransaction>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d006      	beq.n	8004eb2 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2220      	movs	r2, #32
 8004eae:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004eb0:	e01a      	b.n	8004ee8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10a      	bne.n	8004ed0 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004eba:	2300      	movs	r3, #0
 8004ebc:	617b      	str	r3, [r7, #20]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	617b      	str	r3, [r7, #20]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	617b      	str	r3, [r7, #20]
 8004ece:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d003      	beq.n	8004ee0 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ede:	e003      	b.n	8004ee8 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ef0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3730      	adds	r7, #48	; 0x30
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b088      	sub	sp, #32
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	603b      	str	r3, [r7, #0]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f0c:	f7fc fe20 	bl	8001b50 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f14:	1a9b      	subs	r3, r3, r2
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	4413      	add	r3, r2
 8004f1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f1c:	f7fc fe18 	bl	8001b50 <HAL_GetTick>
 8004f20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f22:	4b39      	ldr	r3, [pc, #228]	; (8005008 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	015b      	lsls	r3, r3, #5
 8004f28:	0d1b      	lsrs	r3, r3, #20
 8004f2a:	69fa      	ldr	r2, [r7, #28]
 8004f2c:	fb02 f303 	mul.w	r3, r2, r3
 8004f30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f32:	e054      	b.n	8004fde <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f3a:	d050      	beq.n	8004fde <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f3c:	f7fc fe08 	bl	8001b50 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	69fa      	ldr	r2, [r7, #28]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d902      	bls.n	8004f52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d13d      	bne.n	8004fce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	685a      	ldr	r2, [r3, #4]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f6a:	d111      	bne.n	8004f90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f74:	d004      	beq.n	8004f80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f7e:	d107      	bne.n	8004f90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f98:	d10f      	bne.n	8004fba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fa8:	601a      	str	r2, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fb8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e017      	b.n	8004ffe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	689a      	ldr	r2, [r3, #8]
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	bf0c      	ite	eq
 8004fee:	2301      	moveq	r3, #1
 8004ff0:	2300      	movne	r3, #0
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	79fb      	ldrb	r3, [r7, #7]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d19b      	bne.n	8004f34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3720      	adds	r7, #32
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	20000014 	.word	0x20000014

0800500c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b086      	sub	sp, #24
 8005010:	af02      	add	r7, sp, #8
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005020:	d111      	bne.n	8005046 <SPI_EndRxTransaction+0x3a>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800502a:	d004      	beq.n	8005036 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005034:	d107      	bne.n	8005046 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005044:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800504e:	d12a      	bne.n	80050a6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005058:	d012      	beq.n	8005080 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	9300      	str	r3, [sp, #0]
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	2200      	movs	r2, #0
 8005062:	2180      	movs	r1, #128	; 0x80
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f7ff ff49 	bl	8004efc <SPI_WaitFlagStateUntilTimeout>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d02d      	beq.n	80050cc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005074:	f043 0220 	orr.w	r2, r3, #32
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e026      	b.n	80050ce <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	2200      	movs	r2, #0
 8005088:	2101      	movs	r1, #1
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f7ff ff36 	bl	8004efc <SPI_WaitFlagStateUntilTimeout>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d01a      	beq.n	80050cc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509a:	f043 0220 	orr.w	r2, r3, #32
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e013      	b.n	80050ce <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	2200      	movs	r2, #0
 80050ae:	2101      	movs	r1, #1
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f7ff ff23 	bl	8004efc <SPI_WaitFlagStateUntilTimeout>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d007      	beq.n	80050cc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c0:	f043 0220 	orr.w	r2, r3, #32
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e000      	b.n	80050ce <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
	...

080050d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b088      	sub	sp, #32
 80050dc:	af02      	add	r7, sp, #8
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	2201      	movs	r2, #1
 80050ec:	2102      	movs	r1, #2
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f7ff ff04 	bl	8004efc <SPI_WaitFlagStateUntilTimeout>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d007      	beq.n	800510a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050fe:	f043 0220 	orr.w	r2, r3, #32
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e032      	b.n	8005170 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800510a:	4b1b      	ldr	r3, [pc, #108]	; (8005178 <SPI_EndRxTxTransaction+0xa0>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a1b      	ldr	r2, [pc, #108]	; (800517c <SPI_EndRxTxTransaction+0xa4>)
 8005110:	fba2 2303 	umull	r2, r3, r2, r3
 8005114:	0d5b      	lsrs	r3, r3, #21
 8005116:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800511a:	fb02 f303 	mul.w	r3, r2, r3
 800511e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005128:	d112      	bne.n	8005150 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	2200      	movs	r2, #0
 8005132:	2180      	movs	r1, #128	; 0x80
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f7ff fee1 	bl	8004efc <SPI_WaitFlagStateUntilTimeout>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d016      	beq.n	800516e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005144:	f043 0220 	orr.w	r2, r3, #32
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e00f      	b.n	8005170 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00a      	beq.n	800516c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	3b01      	subs	r3, #1
 800515a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005166:	2b80      	cmp	r3, #128	; 0x80
 8005168:	d0f2      	beq.n	8005150 <SPI_EndRxTxTransaction+0x78>
 800516a:	e000      	b.n	800516e <SPI_EndRxTxTransaction+0x96>
        break;
 800516c:	bf00      	nop
  }

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3718      	adds	r7, #24
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	20000014 	.word	0x20000014
 800517c:	165e9f81 	.word	0x165e9f81

08005180 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e041      	b.n	8005216 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d106      	bne.n	80051ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f7fc f9de 	bl	8001568 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	3304      	adds	r3, #4
 80051bc:	4619      	mov	r1, r3
 80051be:	4610      	mov	r0, r2
 80051c0:	f000 f9f0 	bl	80055a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
	...

08005220 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800522e:	b2db      	uxtb	r3, r3
 8005230:	2b01      	cmp	r3, #1
 8005232:	d001      	beq.n	8005238 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e04e      	b.n	80052d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2202      	movs	r2, #2
 800523c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68da      	ldr	r2, [r3, #12]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f042 0201 	orr.w	r2, r2, #1
 800524e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a23      	ldr	r2, [pc, #140]	; (80052e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d022      	beq.n	80052a0 <HAL_TIM_Base_Start_IT+0x80>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005262:	d01d      	beq.n	80052a0 <HAL_TIM_Base_Start_IT+0x80>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a1f      	ldr	r2, [pc, #124]	; (80052e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d018      	beq.n	80052a0 <HAL_TIM_Base_Start_IT+0x80>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a1e      	ldr	r2, [pc, #120]	; (80052ec <HAL_TIM_Base_Start_IT+0xcc>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d013      	beq.n	80052a0 <HAL_TIM_Base_Start_IT+0x80>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a1c      	ldr	r2, [pc, #112]	; (80052f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d00e      	beq.n	80052a0 <HAL_TIM_Base_Start_IT+0x80>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a1b      	ldr	r2, [pc, #108]	; (80052f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d009      	beq.n	80052a0 <HAL_TIM_Base_Start_IT+0x80>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a19      	ldr	r2, [pc, #100]	; (80052f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d004      	beq.n	80052a0 <HAL_TIM_Base_Start_IT+0x80>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a18      	ldr	r2, [pc, #96]	; (80052fc <HAL_TIM_Base_Start_IT+0xdc>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d111      	bne.n	80052c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f003 0307 	and.w	r3, r3, #7
 80052aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2b06      	cmp	r3, #6
 80052b0:	d010      	beq.n	80052d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f042 0201 	orr.w	r2, r2, #1
 80052c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c2:	e007      	b.n	80052d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f042 0201 	orr.w	r2, r2, #1
 80052d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	40010000 	.word	0x40010000
 80052e8:	40000400 	.word	0x40000400
 80052ec:	40000800 	.word	0x40000800
 80052f0:	40000c00 	.word	0x40000c00
 80052f4:	40010400 	.word	0x40010400
 80052f8:	40014000 	.word	0x40014000
 80052fc:	40001800 	.word	0x40001800

08005300 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68da      	ldr	r2, [r3, #12]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f022 0201 	bic.w	r2, r2, #1
 8005316:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6a1a      	ldr	r2, [r3, #32]
 800531e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005322:	4013      	ands	r3, r2
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10f      	bne.n	8005348 <HAL_TIM_Base_Stop_IT+0x48>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6a1a      	ldr	r2, [r3, #32]
 800532e:	f240 4344 	movw	r3, #1092	; 0x444
 8005332:	4013      	ands	r3, r2
 8005334:	2b00      	cmp	r3, #0
 8005336:	d107      	bne.n	8005348 <HAL_TIM_Base_Stop_IT+0x48>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 0201 	bic.w	r2, r2, #1
 8005346:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800535e:	b580      	push	{r7, lr}
 8005360:	b084      	sub	sp, #16
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	f003 0302 	and.w	r3, r3, #2
 800537c:	2b00      	cmp	r3, #0
 800537e:	d020      	beq.n	80053c2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f003 0302 	and.w	r3, r3, #2
 8005386:	2b00      	cmp	r3, #0
 8005388:	d01b      	beq.n	80053c2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f06f 0202 	mvn.w	r2, #2
 8005392:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	f003 0303 	and.w	r3, r3, #3
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d003      	beq.n	80053b0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 f8dc 	bl	8005566 <HAL_TIM_IC_CaptureCallback>
 80053ae:	e005      	b.n	80053bc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 f8ce 	bl	8005552 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f8df 	bl	800557a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	f003 0304 	and.w	r3, r3, #4
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d020      	beq.n	800540e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f003 0304 	and.w	r3, r3, #4
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d01b      	beq.n	800540e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f06f 0204 	mvn.w	r2, #4
 80053de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2202      	movs	r2, #2
 80053e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d003      	beq.n	80053fc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 f8b6 	bl	8005566 <HAL_TIM_IC_CaptureCallback>
 80053fa:	e005      	b.n	8005408 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 f8a8 	bl	8005552 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 f8b9 	bl	800557a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	f003 0308 	and.w	r3, r3, #8
 8005414:	2b00      	cmp	r3, #0
 8005416:	d020      	beq.n	800545a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f003 0308 	and.w	r3, r3, #8
 800541e:	2b00      	cmp	r3, #0
 8005420:	d01b      	beq.n	800545a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f06f 0208 	mvn.w	r2, #8
 800542a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2204      	movs	r2, #4
 8005430:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	69db      	ldr	r3, [r3, #28]
 8005438:	f003 0303 	and.w	r3, r3, #3
 800543c:	2b00      	cmp	r3, #0
 800543e:	d003      	beq.n	8005448 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 f890 	bl	8005566 <HAL_TIM_IC_CaptureCallback>
 8005446:	e005      	b.n	8005454 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 f882 	bl	8005552 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f893 	bl	800557a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	f003 0310 	and.w	r3, r3, #16
 8005460:	2b00      	cmp	r3, #0
 8005462:	d020      	beq.n	80054a6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f003 0310 	and.w	r3, r3, #16
 800546a:	2b00      	cmp	r3, #0
 800546c:	d01b      	beq.n	80054a6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f06f 0210 	mvn.w	r2, #16
 8005476:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2208      	movs	r2, #8
 800547c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	69db      	ldr	r3, [r3, #28]
 8005484:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005488:	2b00      	cmp	r3, #0
 800548a:	d003      	beq.n	8005494 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 f86a 	bl	8005566 <HAL_TIM_IC_CaptureCallback>
 8005492:	e005      	b.n	80054a0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 f85c 	bl	8005552 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 f86d 	bl	800557a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	f003 0301 	and.w	r3, r3, #1
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00c      	beq.n	80054ca <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f003 0301 	and.w	r3, r3, #1
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d007      	beq.n	80054ca <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f06f 0201 	mvn.w	r2, #1
 80054c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 f83a 	bl	800553e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00c      	beq.n	80054ee <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d007      	beq.n	80054ee <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 f98d 	bl	8005808 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00c      	beq.n	8005512 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d007      	beq.n	8005512 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800550a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f83e 	bl	800558e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	f003 0320 	and.w	r3, r3, #32
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00c      	beq.n	8005536 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f003 0320 	and.w	r3, r3, #32
 8005522:	2b00      	cmp	r3, #0
 8005524:	d007      	beq.n	8005536 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f06f 0220 	mvn.w	r2, #32
 800552e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 f95f 	bl	80057f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005536:	bf00      	nop
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800553e:	b480      	push	{r7}
 8005540:	b083      	sub	sp, #12
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005546:	bf00      	nop
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005552:	b480      	push	{r7}
 8005554:	b083      	sub	sp, #12
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800555a:	bf00      	nop
 800555c:	370c      	adds	r7, #12
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005566:	b480      	push	{r7}
 8005568:	b083      	sub	sp, #12
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800556e:	bf00      	nop
 8005570:	370c      	adds	r7, #12
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005582:	bf00      	nop
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr

0800558e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800558e:	b480      	push	{r7}
 8005590:	b083      	sub	sp, #12
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005596:	bf00      	nop
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
	...

080055a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a46      	ldr	r2, [pc, #280]	; (80056d0 <TIM_Base_SetConfig+0x12c>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d013      	beq.n	80055e4 <TIM_Base_SetConfig+0x40>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055c2:	d00f      	beq.n	80055e4 <TIM_Base_SetConfig+0x40>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a43      	ldr	r2, [pc, #268]	; (80056d4 <TIM_Base_SetConfig+0x130>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d00b      	beq.n	80055e4 <TIM_Base_SetConfig+0x40>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a42      	ldr	r2, [pc, #264]	; (80056d8 <TIM_Base_SetConfig+0x134>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d007      	beq.n	80055e4 <TIM_Base_SetConfig+0x40>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a41      	ldr	r2, [pc, #260]	; (80056dc <TIM_Base_SetConfig+0x138>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d003      	beq.n	80055e4 <TIM_Base_SetConfig+0x40>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a40      	ldr	r2, [pc, #256]	; (80056e0 <TIM_Base_SetConfig+0x13c>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d108      	bne.n	80055f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a35      	ldr	r2, [pc, #212]	; (80056d0 <TIM_Base_SetConfig+0x12c>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d02b      	beq.n	8005656 <TIM_Base_SetConfig+0xb2>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005604:	d027      	beq.n	8005656 <TIM_Base_SetConfig+0xb2>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a32      	ldr	r2, [pc, #200]	; (80056d4 <TIM_Base_SetConfig+0x130>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d023      	beq.n	8005656 <TIM_Base_SetConfig+0xb2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a31      	ldr	r2, [pc, #196]	; (80056d8 <TIM_Base_SetConfig+0x134>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d01f      	beq.n	8005656 <TIM_Base_SetConfig+0xb2>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a30      	ldr	r2, [pc, #192]	; (80056dc <TIM_Base_SetConfig+0x138>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d01b      	beq.n	8005656 <TIM_Base_SetConfig+0xb2>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a2f      	ldr	r2, [pc, #188]	; (80056e0 <TIM_Base_SetConfig+0x13c>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d017      	beq.n	8005656 <TIM_Base_SetConfig+0xb2>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a2e      	ldr	r2, [pc, #184]	; (80056e4 <TIM_Base_SetConfig+0x140>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d013      	beq.n	8005656 <TIM_Base_SetConfig+0xb2>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a2d      	ldr	r2, [pc, #180]	; (80056e8 <TIM_Base_SetConfig+0x144>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d00f      	beq.n	8005656 <TIM_Base_SetConfig+0xb2>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a2c      	ldr	r2, [pc, #176]	; (80056ec <TIM_Base_SetConfig+0x148>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d00b      	beq.n	8005656 <TIM_Base_SetConfig+0xb2>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a2b      	ldr	r2, [pc, #172]	; (80056f0 <TIM_Base_SetConfig+0x14c>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d007      	beq.n	8005656 <TIM_Base_SetConfig+0xb2>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a2a      	ldr	r2, [pc, #168]	; (80056f4 <TIM_Base_SetConfig+0x150>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d003      	beq.n	8005656 <TIM_Base_SetConfig+0xb2>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a29      	ldr	r2, [pc, #164]	; (80056f8 <TIM_Base_SetConfig+0x154>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d108      	bne.n	8005668 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800565c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	4313      	orrs	r3, r2
 8005666:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	4313      	orrs	r3, r2
 8005674:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	689a      	ldr	r2, [r3, #8]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a10      	ldr	r2, [pc, #64]	; (80056d0 <TIM_Base_SetConfig+0x12c>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d003      	beq.n	800569c <TIM_Base_SetConfig+0xf8>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a12      	ldr	r2, [pc, #72]	; (80056e0 <TIM_Base_SetConfig+0x13c>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d103      	bne.n	80056a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	691a      	ldr	r2, [r3, #16]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d105      	bne.n	80056c2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	f023 0201 	bic.w	r2, r3, #1
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	611a      	str	r2, [r3, #16]
  }
}
 80056c2:	bf00      	nop
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	40010000 	.word	0x40010000
 80056d4:	40000400 	.word	0x40000400
 80056d8:	40000800 	.word	0x40000800
 80056dc:	40000c00 	.word	0x40000c00
 80056e0:	40010400 	.word	0x40010400
 80056e4:	40014000 	.word	0x40014000
 80056e8:	40014400 	.word	0x40014400
 80056ec:	40014800 	.word	0x40014800
 80056f0:	40001800 	.word	0x40001800
 80056f4:	40001c00 	.word	0x40001c00
 80056f8:	40002000 	.word	0x40002000

080056fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800570c:	2b01      	cmp	r3, #1
 800570e:	d101      	bne.n	8005714 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005710:	2302      	movs	r3, #2
 8005712:	e05a      	b.n	80057ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2202      	movs	r2, #2
 8005720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800573a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	4313      	orrs	r3, r2
 8005744:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a21      	ldr	r2, [pc, #132]	; (80057d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d022      	beq.n	800579e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005760:	d01d      	beq.n	800579e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a1d      	ldr	r2, [pc, #116]	; (80057dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d018      	beq.n	800579e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a1b      	ldr	r2, [pc, #108]	; (80057e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d013      	beq.n	800579e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a1a      	ldr	r2, [pc, #104]	; (80057e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d00e      	beq.n	800579e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a18      	ldr	r2, [pc, #96]	; (80057e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d009      	beq.n	800579e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a17      	ldr	r2, [pc, #92]	; (80057ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d004      	beq.n	800579e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a15      	ldr	r2, [pc, #84]	; (80057f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d10c      	bne.n	80057b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	68ba      	ldr	r2, [r7, #8]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68ba      	ldr	r2, [r7, #8]
 80057b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3714      	adds	r7, #20
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	40010000 	.word	0x40010000
 80057dc:	40000400 	.word	0x40000400
 80057e0:	40000800 	.word	0x40000800
 80057e4:	40000c00 	.word	0x40000c00
 80057e8:	40010400 	.word	0x40010400
 80057ec:	40014000 	.word	0x40014000
 80057f0:	40001800 	.word	0x40001800

080057f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e042      	b.n	80058b4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d106      	bne.n	8005848 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7fb feb8 	bl	80015b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2224      	movs	r2, #36	; 0x24
 800584c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68da      	ldr	r2, [r3, #12]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800585e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 fe91 	bl	8006588 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	691a      	ldr	r2, [r3, #16]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005874:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	695a      	ldr	r2, [r3, #20]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005884:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68da      	ldr	r2, [r3, #12]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005894:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2220      	movs	r2, #32
 80058a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2220      	movs	r2, #32
 80058a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3708      	adds	r7, #8
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b08a      	sub	sp, #40	; 0x28
 80058c0:	af02      	add	r7, sp, #8
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	603b      	str	r3, [r7, #0]
 80058c8:	4613      	mov	r3, r2
 80058ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	2b20      	cmp	r3, #32
 80058da:	d175      	bne.n	80059c8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d002      	beq.n	80058e8 <HAL_UART_Transmit+0x2c>
 80058e2:	88fb      	ldrh	r3, [r7, #6]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d101      	bne.n	80058ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e06e      	b.n	80059ca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2221      	movs	r2, #33	; 0x21
 80058f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058fa:	f7fc f929 	bl	8001b50 <HAL_GetTick>
 80058fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	88fa      	ldrh	r2, [r7, #6]
 8005904:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	88fa      	ldrh	r2, [r7, #6]
 800590a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005914:	d108      	bne.n	8005928 <HAL_UART_Transmit+0x6c>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d104      	bne.n	8005928 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800591e:	2300      	movs	r3, #0
 8005920:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	61bb      	str	r3, [r7, #24]
 8005926:	e003      	b.n	8005930 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800592c:	2300      	movs	r3, #0
 800592e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005930:	e02e      	b.n	8005990 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	9300      	str	r3, [sp, #0]
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	2200      	movs	r2, #0
 800593a:	2180      	movs	r1, #128	; 0x80
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f000 fbdb 	bl	80060f8 <UART_WaitOnFlagUntilTimeout>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d005      	beq.n	8005954 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2220      	movs	r2, #32
 800594c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e03a      	b.n	80059ca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10b      	bne.n	8005972 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	881b      	ldrh	r3, [r3, #0]
 800595e:	461a      	mov	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005968:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	3302      	adds	r3, #2
 800596e:	61bb      	str	r3, [r7, #24]
 8005970:	e007      	b.n	8005982 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	781a      	ldrb	r2, [r3, #0]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	3301      	adds	r3, #1
 8005980:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005986:	b29b      	uxth	r3, r3
 8005988:	3b01      	subs	r3, #1
 800598a:	b29a      	uxth	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005994:	b29b      	uxth	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1cb      	bne.n	8005932 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	9300      	str	r3, [sp, #0]
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	2200      	movs	r2, #0
 80059a2:	2140      	movs	r1, #64	; 0x40
 80059a4:	68f8      	ldr	r0, [r7, #12]
 80059a6:	f000 fba7 	bl	80060f8 <UART_WaitOnFlagUntilTimeout>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d005      	beq.n	80059bc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2220      	movs	r2, #32
 80059b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80059b8:	2303      	movs	r3, #3
 80059ba:	e006      	b.n	80059ca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2220      	movs	r2, #32
 80059c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80059c4:	2300      	movs	r3, #0
 80059c6:	e000      	b.n	80059ca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80059c8:	2302      	movs	r3, #2
  }
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3720      	adds	r7, #32
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b084      	sub	sp, #16
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	60f8      	str	r0, [r7, #12]
 80059da:	60b9      	str	r1, [r7, #8]
 80059dc:	4613      	mov	r3, r2
 80059de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	2b20      	cmp	r3, #32
 80059ea:	d112      	bne.n	8005a12 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d002      	beq.n	80059f8 <HAL_UART_Receive_IT+0x26>
 80059f2:	88fb      	ldrh	r3, [r7, #6]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d101      	bne.n	80059fc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e00b      	b.n	8005a14 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005a02:	88fb      	ldrh	r3, [r7, #6]
 8005a04:	461a      	mov	r2, r3
 8005a06:	68b9      	ldr	r1, [r7, #8]
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f000 fbce 	bl	80061aa <UART_Start_Receive_IT>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	e000      	b.n	8005a14 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005a12:	2302      	movs	r3, #2
  }
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3710      	adds	r7, #16
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b09a      	sub	sp, #104	; 0x68
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	330c      	adds	r3, #12
 8005a2a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a2e:	e853 3f00 	ldrex	r3, [r3]
 8005a32:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a3a:	667b      	str	r3, [r7, #100]	; 0x64
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	330c      	adds	r3, #12
 8005a42:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005a44:	657a      	str	r2, [r7, #84]	; 0x54
 8005a46:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a48:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a4a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005a4c:	e841 2300 	strex	r3, r2, [r1]
 8005a50:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1e5      	bne.n	8005a24 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	3314      	adds	r3, #20
 8005a5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a62:	e853 3f00 	ldrex	r3, [r3]
 8005a66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6a:	f023 0301 	bic.w	r3, r3, #1
 8005a6e:	663b      	str	r3, [r7, #96]	; 0x60
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	3314      	adds	r3, #20
 8005a76:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a78:	643a      	str	r2, [r7, #64]	; 0x40
 8005a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a80:	e841 2300 	strex	r3, r2, [r1]
 8005a84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1e5      	bne.n	8005a58 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d119      	bne.n	8005ac8 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	330c      	adds	r3, #12
 8005a9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
 8005a9e:	e853 3f00 	ldrex	r3, [r3]
 8005aa2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	f023 0310 	bic.w	r3, r3, #16
 8005aaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	330c      	adds	r3, #12
 8005ab2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ab4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ab6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005aba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005abc:	e841 2300 	strex	r3, r2, [r1]
 8005ac0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d1e5      	bne.n	8005a94 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad2:	2b40      	cmp	r3, #64	; 0x40
 8005ad4:	d13f      	bne.n	8005b56 <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	3314      	adds	r3, #20
 8005adc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	e853 3f00 	ldrex	r3, [r3]
 8005ae4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aec:	65bb      	str	r3, [r7, #88]	; 0x58
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	3314      	adds	r3, #20
 8005af4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005af6:	61ba      	str	r2, [r7, #24]
 8005af8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afa:	6979      	ldr	r1, [r7, #20]
 8005afc:	69ba      	ldr	r2, [r7, #24]
 8005afe:	e841 2300 	strex	r3, r2, [r1]
 8005b02:	613b      	str	r3, [r7, #16]
   return(result);
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1e5      	bne.n	8005ad6 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d013      	beq.n	8005b3a <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b16:	4a19      	ldr	r2, [pc, #100]	; (8005b7c <HAL_UART_AbortReceive_IT+0x160>)
 8005b18:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7fc f9a3 	bl	8001e6a <HAL_DMA_Abort_IT>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d022      	beq.n	8005b70 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005b34:	4610      	mov	r0, r2
 8005b36:	4798      	blx	r3
 8005b38:	e01a      	b.n	8005b70 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2220      	movs	r2, #32
 8005b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 fabc 	bl	80060cc <HAL_UART_AbortReceiveCpltCallback>
 8005b54:	e00c      	b.n	8005b70 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2220      	movs	r2, #32
 8005b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 faae 	bl	80060cc <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3768      	adds	r7, #104	; 0x68
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	0800630d 	.word	0x0800630d

08005b80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b0ba      	sub	sp, #232	; 0xe8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005bac:	2300      	movs	r3, #0
 8005bae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bb6:	f003 030f 	and.w	r3, r3, #15
 8005bba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005bbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d10f      	bne.n	8005be6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bca:	f003 0320 	and.w	r3, r3, #32
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d009      	beq.n	8005be6 <HAL_UART_IRQHandler+0x66>
 8005bd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bd6:	f003 0320 	and.w	r3, r3, #32
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d003      	beq.n	8005be6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 fc14 	bl	800640c <UART_Receive_IT>
      return;
 8005be4:	e25b      	b.n	800609e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005be6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f000 80de 	beq.w	8005dac <HAL_UART_IRQHandler+0x22c>
 8005bf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bf4:	f003 0301 	and.w	r3, r3, #1
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d106      	bne.n	8005c0a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c00:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f000 80d1 	beq.w	8005dac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c0e:	f003 0301 	and.w	r3, r3, #1
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00b      	beq.n	8005c2e <HAL_UART_IRQHandler+0xae>
 8005c16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d005      	beq.n	8005c2e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c26:	f043 0201 	orr.w	r2, r3, #1
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c32:	f003 0304 	and.w	r3, r3, #4
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00b      	beq.n	8005c52 <HAL_UART_IRQHandler+0xd2>
 8005c3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d005      	beq.n	8005c52 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c4a:	f043 0202 	orr.w	r2, r3, #2
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c56:	f003 0302 	and.w	r3, r3, #2
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00b      	beq.n	8005c76 <HAL_UART_IRQHandler+0xf6>
 8005c5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c62:	f003 0301 	and.w	r3, r3, #1
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d005      	beq.n	8005c76 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c6e:	f043 0204 	orr.w	r2, r3, #4
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c7a:	f003 0308 	and.w	r3, r3, #8
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d011      	beq.n	8005ca6 <HAL_UART_IRQHandler+0x126>
 8005c82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c86:	f003 0320 	and.w	r3, r3, #32
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d105      	bne.n	8005c9a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d005      	beq.n	8005ca6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c9e:	f043 0208 	orr.w	r2, r3, #8
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f000 81f2 	beq.w	8006094 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cb4:	f003 0320 	and.w	r3, r3, #32
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d008      	beq.n	8005cce <HAL_UART_IRQHandler+0x14e>
 8005cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cc0:	f003 0320 	and.w	r3, r3, #32
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d002      	beq.n	8005cce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 fb9f 	bl	800640c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	695b      	ldr	r3, [r3, #20]
 8005cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd8:	2b40      	cmp	r3, #64	; 0x40
 8005cda:	bf0c      	ite	eq
 8005cdc:	2301      	moveq	r3, #1
 8005cde:	2300      	movne	r3, #0
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cea:	f003 0308 	and.w	r3, r3, #8
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d103      	bne.n	8005cfa <HAL_UART_IRQHandler+0x17a>
 8005cf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d04f      	beq.n	8005d9a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 fa8f 	bl	800621e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d0a:	2b40      	cmp	r3, #64	; 0x40
 8005d0c:	d141      	bne.n	8005d92 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	3314      	adds	r3, #20
 8005d14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d1c:	e853 3f00 	ldrex	r3, [r3]
 8005d20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005d24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3314      	adds	r3, #20
 8005d36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005d3a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005d3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d4a:	e841 2300 	strex	r3, r2, [r1]
 8005d4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1d9      	bne.n	8005d0e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d013      	beq.n	8005d8a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d66:	4a7e      	ldr	r2, [pc, #504]	; (8005f60 <HAL_UART_IRQHandler+0x3e0>)
 8005d68:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7fc f87b 	bl	8001e6a <HAL_DMA_Abort_IT>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d016      	beq.n	8005da8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005d84:	4610      	mov	r0, r2
 8005d86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d88:	e00e      	b.n	8005da8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 f994 	bl	80060b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d90:	e00a      	b.n	8005da8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 f990 	bl	80060b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d98:	e006      	b.n	8005da8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 f98c 	bl	80060b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005da6:	e175      	b.n	8006094 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005da8:	bf00      	nop
    return;
 8005daa:	e173      	b.n	8006094 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	f040 814f 	bne.w	8006054 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dba:	f003 0310 	and.w	r3, r3, #16
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f000 8148 	beq.w	8006054 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dc8:	f003 0310 	and.w	r3, r3, #16
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 8141 	beq.w	8006054 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	60bb      	str	r3, [r7, #8]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	60bb      	str	r3, [r7, #8]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	60bb      	str	r3, [r7, #8]
 8005de6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df2:	2b40      	cmp	r3, #64	; 0x40
 8005df4:	f040 80b6 	bne.w	8005f64 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	f000 8145 	beq.w	8006098 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e16:	429a      	cmp	r2, r3
 8005e18:	f080 813e 	bcs.w	8006098 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e22:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e28:	69db      	ldr	r3, [r3, #28]
 8005e2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e2e:	f000 8088 	beq.w	8005f42 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	330c      	adds	r3, #12
 8005e38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e40:	e853 3f00 	ldrex	r3, [r3]
 8005e44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	330c      	adds	r3, #12
 8005e5a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005e5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e66:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e6e:	e841 2300 	strex	r3, r2, [r1]
 8005e72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1d9      	bne.n	8005e32 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	3314      	adds	r3, #20
 8005e84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e88:	e853 3f00 	ldrex	r3, [r3]
 8005e8c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e90:	f023 0301 	bic.w	r3, r3, #1
 8005e94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	3314      	adds	r3, #20
 8005e9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005ea2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005ea6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005eaa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005eae:	e841 2300 	strex	r3, r2, [r1]
 8005eb2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005eb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1e1      	bne.n	8005e7e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	3314      	adds	r3, #20
 8005ec0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ec4:	e853 3f00 	ldrex	r3, [r3]
 8005ec8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005eca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ecc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ed0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	3314      	adds	r3, #20
 8005eda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005ede:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ee0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ee4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ee6:	e841 2300 	strex	r3, r2, [r1]
 8005eea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005eec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1e3      	bne.n	8005eba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2220      	movs	r2, #32
 8005ef6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	330c      	adds	r3, #12
 8005f06:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f0a:	e853 3f00 	ldrex	r3, [r3]
 8005f0e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f12:	f023 0310 	bic.w	r3, r3, #16
 8005f16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	330c      	adds	r3, #12
 8005f20:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005f24:	65ba      	str	r2, [r7, #88]	; 0x58
 8005f26:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f2c:	e841 2300 	strex	r3, r2, [r1]
 8005f30:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1e3      	bne.n	8005f00 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f7fb ff24 	bl	8001d8a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2202      	movs	r2, #2
 8005f46:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	4619      	mov	r1, r3
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f8c1 	bl	80060e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f5e:	e09b      	b.n	8006098 <HAL_UART_IRQHandler+0x518>
 8005f60:	080062e5 	.word	0x080062e5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f000 808e 	beq.w	800609c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005f80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f000 8089 	beq.w	800609c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	330c      	adds	r3, #12
 8005f90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f94:	e853 3f00 	ldrex	r3, [r3]
 8005f98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fa0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	330c      	adds	r3, #12
 8005faa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005fae:	647a      	str	r2, [r7, #68]	; 0x44
 8005fb0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005fb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fb6:	e841 2300 	strex	r3, r2, [r1]
 8005fba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1e3      	bne.n	8005f8a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	3314      	adds	r3, #20
 8005fc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fcc:	e853 3f00 	ldrex	r3, [r3]
 8005fd0:	623b      	str	r3, [r7, #32]
   return(result);
 8005fd2:	6a3b      	ldr	r3, [r7, #32]
 8005fd4:	f023 0301 	bic.w	r3, r3, #1
 8005fd8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	3314      	adds	r3, #20
 8005fe2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005fe6:	633a      	str	r2, [r7, #48]	; 0x30
 8005fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fee:	e841 2300 	strex	r3, r2, [r1]
 8005ff2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1e3      	bne.n	8005fc2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2220      	movs	r2, #32
 8005ffe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	330c      	adds	r3, #12
 800600e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	e853 3f00 	ldrex	r3, [r3]
 8006016:	60fb      	str	r3, [r7, #12]
   return(result);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f023 0310 	bic.w	r3, r3, #16
 800601e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	330c      	adds	r3, #12
 8006028:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800602c:	61fa      	str	r2, [r7, #28]
 800602e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006030:	69b9      	ldr	r1, [r7, #24]
 8006032:	69fa      	ldr	r2, [r7, #28]
 8006034:	e841 2300 	strex	r3, r2, [r1]
 8006038:	617b      	str	r3, [r7, #20]
   return(result);
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1e3      	bne.n	8006008 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2202      	movs	r2, #2
 8006044:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006046:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800604a:	4619      	mov	r1, r3
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 f847 	bl	80060e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006052:	e023      	b.n	800609c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800605c:	2b00      	cmp	r3, #0
 800605e:	d009      	beq.n	8006074 <HAL_UART_IRQHandler+0x4f4>
 8006060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006068:	2b00      	cmp	r3, #0
 800606a:	d003      	beq.n	8006074 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 f965 	bl	800633c <UART_Transmit_IT>
    return;
 8006072:	e014      	b.n	800609e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00e      	beq.n	800609e <HAL_UART_IRQHandler+0x51e>
 8006080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006088:	2b00      	cmp	r3, #0
 800608a:	d008      	beq.n	800609e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f9a5 	bl	80063dc <UART_EndTransmit_IT>
    return;
 8006092:	e004      	b.n	800609e <HAL_UART_IRQHandler+0x51e>
    return;
 8006094:	bf00      	nop
 8006096:	e002      	b.n	800609e <HAL_UART_IRQHandler+0x51e>
      return;
 8006098:	bf00      	nop
 800609a:	e000      	b.n	800609e <HAL_UART_IRQHandler+0x51e>
      return;
 800609c:	bf00      	nop
  }
}
 800609e:	37e8      	adds	r7, #232	; 0xe8
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80060ac:	bf00      	nop
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	460b      	mov	r3, r1
 80060ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	603b      	str	r3, [r7, #0]
 8006104:	4613      	mov	r3, r2
 8006106:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006108:	e03b      	b.n	8006182 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800610a:	6a3b      	ldr	r3, [r7, #32]
 800610c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006110:	d037      	beq.n	8006182 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006112:	f7fb fd1d 	bl	8001b50 <HAL_GetTick>
 8006116:	4602      	mov	r2, r0
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	6a3a      	ldr	r2, [r7, #32]
 800611e:	429a      	cmp	r2, r3
 8006120:	d302      	bcc.n	8006128 <UART_WaitOnFlagUntilTimeout+0x30>
 8006122:	6a3b      	ldr	r3, [r7, #32]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d101      	bne.n	800612c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e03a      	b.n	80061a2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	f003 0304 	and.w	r3, r3, #4
 8006136:	2b00      	cmp	r3, #0
 8006138:	d023      	beq.n	8006182 <UART_WaitOnFlagUntilTimeout+0x8a>
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	2b80      	cmp	r3, #128	; 0x80
 800613e:	d020      	beq.n	8006182 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	2b40      	cmp	r3, #64	; 0x40
 8006144:	d01d      	beq.n	8006182 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0308 	and.w	r3, r3, #8
 8006150:	2b08      	cmp	r3, #8
 8006152:	d116      	bne.n	8006182 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006154:	2300      	movs	r3, #0
 8006156:	617b      	str	r3, [r7, #20]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	617b      	str	r3, [r7, #20]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	617b      	str	r3, [r7, #20]
 8006168:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f000 f857 	bl	800621e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2208      	movs	r2, #8
 8006174:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e00f      	b.n	80061a2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	4013      	ands	r3, r2
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	429a      	cmp	r2, r3
 8006190:	bf0c      	ite	eq
 8006192:	2301      	moveq	r3, #1
 8006194:	2300      	movne	r3, #0
 8006196:	b2db      	uxtb	r3, r3
 8006198:	461a      	mov	r2, r3
 800619a:	79fb      	ldrb	r3, [r7, #7]
 800619c:	429a      	cmp	r2, r3
 800619e:	d0b4      	beq.n	800610a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3718      	adds	r7, #24
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b085      	sub	sp, #20
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	60f8      	str	r0, [r7, #12]
 80061b2:	60b9      	str	r1, [r7, #8]
 80061b4:	4613      	mov	r3, r2
 80061b6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	68ba      	ldr	r2, [r7, #8]
 80061bc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	88fa      	ldrh	r2, [r7, #6]
 80061c2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	88fa      	ldrh	r2, [r7, #6]
 80061c8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2222      	movs	r2, #34	; 0x22
 80061d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d007      	beq.n	80061f0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68da      	ldr	r2, [r3, #12]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061ee:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	695a      	ldr	r2, [r3, #20]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f042 0201 	orr.w	r2, r2, #1
 80061fe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68da      	ldr	r2, [r3, #12]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f042 0220 	orr.w	r2, r2, #32
 800620e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3714      	adds	r7, #20
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800621e:	b480      	push	{r7}
 8006220:	b095      	sub	sp, #84	; 0x54
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	330c      	adds	r3, #12
 800622c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006230:	e853 3f00 	ldrex	r3, [r3]
 8006234:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006238:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800623c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	330c      	adds	r3, #12
 8006244:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006246:	643a      	str	r2, [r7, #64]	; 0x40
 8006248:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800624c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800624e:	e841 2300 	strex	r3, r2, [r1]
 8006252:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006256:	2b00      	cmp	r3, #0
 8006258:	d1e5      	bne.n	8006226 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	3314      	adds	r3, #20
 8006260:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006262:	6a3b      	ldr	r3, [r7, #32]
 8006264:	e853 3f00 	ldrex	r3, [r3]
 8006268:	61fb      	str	r3, [r7, #28]
   return(result);
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	f023 0301 	bic.w	r3, r3, #1
 8006270:	64bb      	str	r3, [r7, #72]	; 0x48
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	3314      	adds	r3, #20
 8006278:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800627a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800627c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006280:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006282:	e841 2300 	strex	r3, r2, [r1]
 8006286:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1e5      	bne.n	800625a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006292:	2b01      	cmp	r3, #1
 8006294:	d119      	bne.n	80062ca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	330c      	adds	r3, #12
 800629c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	e853 3f00 	ldrex	r3, [r3]
 80062a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	f023 0310 	bic.w	r3, r3, #16
 80062ac:	647b      	str	r3, [r7, #68]	; 0x44
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	330c      	adds	r3, #12
 80062b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062b6:	61ba      	str	r2, [r7, #24]
 80062b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ba:	6979      	ldr	r1, [r7, #20]
 80062bc:	69ba      	ldr	r2, [r7, #24]
 80062be:	e841 2300 	strex	r3, r2, [r1]
 80062c2:	613b      	str	r3, [r7, #16]
   return(result);
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1e5      	bne.n	8006296 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2220      	movs	r2, #32
 80062ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80062d8:	bf00      	nop
 80062da:	3754      	adds	r7, #84	; 0x54
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062fe:	68f8      	ldr	r0, [r7, #12]
 8006300:	f7ff feda 	bl	80060b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006304:	bf00      	nop
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006318:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2200      	movs	r2, #0
 800631e:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2220      	movs	r2, #32
 8006324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800632e:	68f8      	ldr	r0, [r7, #12]
 8006330:	f7ff fecc 	bl	80060cc <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006334:	bf00      	nop
 8006336:	3710      	adds	r7, #16
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800633c:	b480      	push	{r7}
 800633e:	b085      	sub	sp, #20
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800634a:	b2db      	uxtb	r3, r3
 800634c:	2b21      	cmp	r3, #33	; 0x21
 800634e:	d13e      	bne.n	80063ce <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006358:	d114      	bne.n	8006384 <UART_Transmit_IT+0x48>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d110      	bne.n	8006384 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	881b      	ldrh	r3, [r3, #0]
 800636c:	461a      	mov	r2, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006376:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a1b      	ldr	r3, [r3, #32]
 800637c:	1c9a      	adds	r2, r3, #2
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	621a      	str	r2, [r3, #32]
 8006382:	e008      	b.n	8006396 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a1b      	ldr	r3, [r3, #32]
 8006388:	1c59      	adds	r1, r3, #1
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	6211      	str	r1, [r2, #32]
 800638e:	781a      	ldrb	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800639a:	b29b      	uxth	r3, r3
 800639c:	3b01      	subs	r3, #1
 800639e:	b29b      	uxth	r3, r3
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	4619      	mov	r1, r3
 80063a4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10f      	bne.n	80063ca <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68da      	ldr	r2, [r3, #12]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063b8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68da      	ldr	r2, [r3, #12]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063c8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80063ca:	2300      	movs	r3, #0
 80063cc:	e000      	b.n	80063d0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80063ce:	2302      	movs	r3, #2
  }
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3714      	adds	r7, #20
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68da      	ldr	r2, [r3, #12]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063f2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2220      	movs	r2, #32
 80063f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f7ff fe51 	bl	80060a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3708      	adds	r7, #8
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b08c      	sub	sp, #48	; 0x30
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800641a:	b2db      	uxtb	r3, r3
 800641c:	2b22      	cmp	r3, #34	; 0x22
 800641e:	f040 80ae 	bne.w	800657e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800642a:	d117      	bne.n	800645c <UART_Receive_IT+0x50>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d113      	bne.n	800645c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006434:	2300      	movs	r3, #0
 8006436:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800643c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	b29b      	uxth	r3, r3
 8006446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800644a:	b29a      	uxth	r2, r3
 800644c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006454:	1c9a      	adds	r2, r3, #2
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	629a      	str	r2, [r3, #40]	; 0x28
 800645a:	e026      	b.n	80064aa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006460:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006462:	2300      	movs	r3, #0
 8006464:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800646e:	d007      	beq.n	8006480 <UART_Receive_IT+0x74>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d10a      	bne.n	800648e <UART_Receive_IT+0x82>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d106      	bne.n	800648e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	b2da      	uxtb	r2, r3
 8006488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648a:	701a      	strb	r2, [r3, #0]
 800648c:	e008      	b.n	80064a0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	b2db      	uxtb	r3, r3
 8006496:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800649a:	b2da      	uxtb	r2, r3
 800649c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a4:	1c5a      	adds	r2, r3, #1
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	3b01      	subs	r3, #1
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	4619      	mov	r1, r3
 80064b8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d15d      	bne.n	800657a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68da      	ldr	r2, [r3, #12]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f022 0220 	bic.w	r2, r2, #32
 80064cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68da      	ldr	r2, [r3, #12]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	695a      	ldr	r2, [r3, #20]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f022 0201 	bic.w	r2, r2, #1
 80064ec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2220      	movs	r2, #32
 80064f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006500:	2b01      	cmp	r3, #1
 8006502:	d135      	bne.n	8006570 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	330c      	adds	r3, #12
 8006510:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	e853 3f00 	ldrex	r3, [r3]
 8006518:	613b      	str	r3, [r7, #16]
   return(result);
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	f023 0310 	bic.w	r3, r3, #16
 8006520:	627b      	str	r3, [r7, #36]	; 0x24
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	330c      	adds	r3, #12
 8006528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800652a:	623a      	str	r2, [r7, #32]
 800652c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652e:	69f9      	ldr	r1, [r7, #28]
 8006530:	6a3a      	ldr	r2, [r7, #32]
 8006532:	e841 2300 	strex	r3, r2, [r1]
 8006536:	61bb      	str	r3, [r7, #24]
   return(result);
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1e5      	bne.n	800650a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 0310 	and.w	r3, r3, #16
 8006548:	2b10      	cmp	r3, #16
 800654a:	d10a      	bne.n	8006562 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800654c:	2300      	movs	r3, #0
 800654e:	60fb      	str	r3, [r7, #12]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	60fb      	str	r3, [r7, #12]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	60fb      	str	r3, [r7, #12]
 8006560:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006566:	4619      	mov	r1, r3
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f7ff fdb9 	bl	80060e0 <HAL_UARTEx_RxEventCallback>
 800656e:	e002      	b.n	8006576 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f7fb f90b 	bl	800178c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006576:	2300      	movs	r3, #0
 8006578:	e002      	b.n	8006580 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800657a:	2300      	movs	r3, #0
 800657c:	e000      	b.n	8006580 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800657e:	2302      	movs	r3, #2
  }
}
 8006580:	4618      	mov	r0, r3
 8006582:	3730      	adds	r7, #48	; 0x30
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006588:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800658c:	b0c0      	sub	sp, #256	; 0x100
 800658e:	af00      	add	r7, sp, #0
 8006590:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80065a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a4:	68d9      	ldr	r1, [r3, #12]
 80065a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	ea40 0301 	orr.w	r3, r0, r1
 80065b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80065b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065b6:	689a      	ldr	r2, [r3, #8]
 80065b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	431a      	orrs	r2, r3
 80065c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065c4:	695b      	ldr	r3, [r3, #20]
 80065c6:	431a      	orrs	r2, r3
 80065c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065cc:	69db      	ldr	r3, [r3, #28]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80065d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80065e0:	f021 010c 	bic.w	r1, r1, #12
 80065e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80065ee:	430b      	orrs	r3, r1
 80065f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	695b      	ldr	r3, [r3, #20]
 80065fa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80065fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006602:	6999      	ldr	r1, [r3, #24]
 8006604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	ea40 0301 	orr.w	r3, r0, r1
 800660e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	4b8f      	ldr	r3, [pc, #572]	; (8006854 <UART_SetConfig+0x2cc>)
 8006618:	429a      	cmp	r2, r3
 800661a:	d005      	beq.n	8006628 <UART_SetConfig+0xa0>
 800661c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	4b8d      	ldr	r3, [pc, #564]	; (8006858 <UART_SetConfig+0x2d0>)
 8006624:	429a      	cmp	r2, r3
 8006626:	d104      	bne.n	8006632 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006628:	f7fd faf4 	bl	8003c14 <HAL_RCC_GetPCLK2Freq>
 800662c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006630:	e003      	b.n	800663a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006632:	f7fd fadb 	bl	8003bec <HAL_RCC_GetPCLK1Freq>
 8006636:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800663a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800663e:	69db      	ldr	r3, [r3, #28]
 8006640:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006644:	f040 810c 	bne.w	8006860 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006648:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800664c:	2200      	movs	r2, #0
 800664e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006652:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006656:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800665a:	4622      	mov	r2, r4
 800665c:	462b      	mov	r3, r5
 800665e:	1891      	adds	r1, r2, r2
 8006660:	65b9      	str	r1, [r7, #88]	; 0x58
 8006662:	415b      	adcs	r3, r3
 8006664:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006666:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800666a:	4621      	mov	r1, r4
 800666c:	eb12 0801 	adds.w	r8, r2, r1
 8006670:	4629      	mov	r1, r5
 8006672:	eb43 0901 	adc.w	r9, r3, r1
 8006676:	f04f 0200 	mov.w	r2, #0
 800667a:	f04f 0300 	mov.w	r3, #0
 800667e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006682:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006686:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800668a:	4690      	mov	r8, r2
 800668c:	4699      	mov	r9, r3
 800668e:	4623      	mov	r3, r4
 8006690:	eb18 0303 	adds.w	r3, r8, r3
 8006694:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006698:	462b      	mov	r3, r5
 800669a:	eb49 0303 	adc.w	r3, r9, r3
 800669e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80066a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80066b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80066b6:	460b      	mov	r3, r1
 80066b8:	18db      	adds	r3, r3, r3
 80066ba:	653b      	str	r3, [r7, #80]	; 0x50
 80066bc:	4613      	mov	r3, r2
 80066be:	eb42 0303 	adc.w	r3, r2, r3
 80066c2:	657b      	str	r3, [r7, #84]	; 0x54
 80066c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80066c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80066cc:	f7f9 fd96 	bl	80001fc <__aeabi_uldivmod>
 80066d0:	4602      	mov	r2, r0
 80066d2:	460b      	mov	r3, r1
 80066d4:	4b61      	ldr	r3, [pc, #388]	; (800685c <UART_SetConfig+0x2d4>)
 80066d6:	fba3 2302 	umull	r2, r3, r3, r2
 80066da:	095b      	lsrs	r3, r3, #5
 80066dc:	011c      	lsls	r4, r3, #4
 80066de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066e2:	2200      	movs	r2, #0
 80066e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066e8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80066ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80066f0:	4642      	mov	r2, r8
 80066f2:	464b      	mov	r3, r9
 80066f4:	1891      	adds	r1, r2, r2
 80066f6:	64b9      	str	r1, [r7, #72]	; 0x48
 80066f8:	415b      	adcs	r3, r3
 80066fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006700:	4641      	mov	r1, r8
 8006702:	eb12 0a01 	adds.w	sl, r2, r1
 8006706:	4649      	mov	r1, r9
 8006708:	eb43 0b01 	adc.w	fp, r3, r1
 800670c:	f04f 0200 	mov.w	r2, #0
 8006710:	f04f 0300 	mov.w	r3, #0
 8006714:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006718:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800671c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006720:	4692      	mov	sl, r2
 8006722:	469b      	mov	fp, r3
 8006724:	4643      	mov	r3, r8
 8006726:	eb1a 0303 	adds.w	r3, sl, r3
 800672a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800672e:	464b      	mov	r3, r9
 8006730:	eb4b 0303 	adc.w	r3, fp, r3
 8006734:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006744:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006748:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800674c:	460b      	mov	r3, r1
 800674e:	18db      	adds	r3, r3, r3
 8006750:	643b      	str	r3, [r7, #64]	; 0x40
 8006752:	4613      	mov	r3, r2
 8006754:	eb42 0303 	adc.w	r3, r2, r3
 8006758:	647b      	str	r3, [r7, #68]	; 0x44
 800675a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800675e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006762:	f7f9 fd4b 	bl	80001fc <__aeabi_uldivmod>
 8006766:	4602      	mov	r2, r0
 8006768:	460b      	mov	r3, r1
 800676a:	4611      	mov	r1, r2
 800676c:	4b3b      	ldr	r3, [pc, #236]	; (800685c <UART_SetConfig+0x2d4>)
 800676e:	fba3 2301 	umull	r2, r3, r3, r1
 8006772:	095b      	lsrs	r3, r3, #5
 8006774:	2264      	movs	r2, #100	; 0x64
 8006776:	fb02 f303 	mul.w	r3, r2, r3
 800677a:	1acb      	subs	r3, r1, r3
 800677c:	00db      	lsls	r3, r3, #3
 800677e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006782:	4b36      	ldr	r3, [pc, #216]	; (800685c <UART_SetConfig+0x2d4>)
 8006784:	fba3 2302 	umull	r2, r3, r3, r2
 8006788:	095b      	lsrs	r3, r3, #5
 800678a:	005b      	lsls	r3, r3, #1
 800678c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006790:	441c      	add	r4, r3
 8006792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006796:	2200      	movs	r2, #0
 8006798:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800679c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80067a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80067a4:	4642      	mov	r2, r8
 80067a6:	464b      	mov	r3, r9
 80067a8:	1891      	adds	r1, r2, r2
 80067aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80067ac:	415b      	adcs	r3, r3
 80067ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80067b4:	4641      	mov	r1, r8
 80067b6:	1851      	adds	r1, r2, r1
 80067b8:	6339      	str	r1, [r7, #48]	; 0x30
 80067ba:	4649      	mov	r1, r9
 80067bc:	414b      	adcs	r3, r1
 80067be:	637b      	str	r3, [r7, #52]	; 0x34
 80067c0:	f04f 0200 	mov.w	r2, #0
 80067c4:	f04f 0300 	mov.w	r3, #0
 80067c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80067cc:	4659      	mov	r1, fp
 80067ce:	00cb      	lsls	r3, r1, #3
 80067d0:	4651      	mov	r1, sl
 80067d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067d6:	4651      	mov	r1, sl
 80067d8:	00ca      	lsls	r2, r1, #3
 80067da:	4610      	mov	r0, r2
 80067dc:	4619      	mov	r1, r3
 80067de:	4603      	mov	r3, r0
 80067e0:	4642      	mov	r2, r8
 80067e2:	189b      	adds	r3, r3, r2
 80067e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067e8:	464b      	mov	r3, r9
 80067ea:	460a      	mov	r2, r1
 80067ec:	eb42 0303 	adc.w	r3, r2, r3
 80067f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006800:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006804:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006808:	460b      	mov	r3, r1
 800680a:	18db      	adds	r3, r3, r3
 800680c:	62bb      	str	r3, [r7, #40]	; 0x28
 800680e:	4613      	mov	r3, r2
 8006810:	eb42 0303 	adc.w	r3, r2, r3
 8006814:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006816:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800681a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800681e:	f7f9 fced 	bl	80001fc <__aeabi_uldivmod>
 8006822:	4602      	mov	r2, r0
 8006824:	460b      	mov	r3, r1
 8006826:	4b0d      	ldr	r3, [pc, #52]	; (800685c <UART_SetConfig+0x2d4>)
 8006828:	fba3 1302 	umull	r1, r3, r3, r2
 800682c:	095b      	lsrs	r3, r3, #5
 800682e:	2164      	movs	r1, #100	; 0x64
 8006830:	fb01 f303 	mul.w	r3, r1, r3
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	00db      	lsls	r3, r3, #3
 8006838:	3332      	adds	r3, #50	; 0x32
 800683a:	4a08      	ldr	r2, [pc, #32]	; (800685c <UART_SetConfig+0x2d4>)
 800683c:	fba2 2303 	umull	r2, r3, r2, r3
 8006840:	095b      	lsrs	r3, r3, #5
 8006842:	f003 0207 	and.w	r2, r3, #7
 8006846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4422      	add	r2, r4
 800684e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006850:	e106      	b.n	8006a60 <UART_SetConfig+0x4d8>
 8006852:	bf00      	nop
 8006854:	40011000 	.word	0x40011000
 8006858:	40011400 	.word	0x40011400
 800685c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006860:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006864:	2200      	movs	r2, #0
 8006866:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800686a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800686e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006872:	4642      	mov	r2, r8
 8006874:	464b      	mov	r3, r9
 8006876:	1891      	adds	r1, r2, r2
 8006878:	6239      	str	r1, [r7, #32]
 800687a:	415b      	adcs	r3, r3
 800687c:	627b      	str	r3, [r7, #36]	; 0x24
 800687e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006882:	4641      	mov	r1, r8
 8006884:	1854      	adds	r4, r2, r1
 8006886:	4649      	mov	r1, r9
 8006888:	eb43 0501 	adc.w	r5, r3, r1
 800688c:	f04f 0200 	mov.w	r2, #0
 8006890:	f04f 0300 	mov.w	r3, #0
 8006894:	00eb      	lsls	r3, r5, #3
 8006896:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800689a:	00e2      	lsls	r2, r4, #3
 800689c:	4614      	mov	r4, r2
 800689e:	461d      	mov	r5, r3
 80068a0:	4643      	mov	r3, r8
 80068a2:	18e3      	adds	r3, r4, r3
 80068a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80068a8:	464b      	mov	r3, r9
 80068aa:	eb45 0303 	adc.w	r3, r5, r3
 80068ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80068b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80068be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80068c2:	f04f 0200 	mov.w	r2, #0
 80068c6:	f04f 0300 	mov.w	r3, #0
 80068ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80068ce:	4629      	mov	r1, r5
 80068d0:	008b      	lsls	r3, r1, #2
 80068d2:	4621      	mov	r1, r4
 80068d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068d8:	4621      	mov	r1, r4
 80068da:	008a      	lsls	r2, r1, #2
 80068dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80068e0:	f7f9 fc8c 	bl	80001fc <__aeabi_uldivmod>
 80068e4:	4602      	mov	r2, r0
 80068e6:	460b      	mov	r3, r1
 80068e8:	4b60      	ldr	r3, [pc, #384]	; (8006a6c <UART_SetConfig+0x4e4>)
 80068ea:	fba3 2302 	umull	r2, r3, r3, r2
 80068ee:	095b      	lsrs	r3, r3, #5
 80068f0:	011c      	lsls	r4, r3, #4
 80068f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068f6:	2200      	movs	r2, #0
 80068f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80068fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006900:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006904:	4642      	mov	r2, r8
 8006906:	464b      	mov	r3, r9
 8006908:	1891      	adds	r1, r2, r2
 800690a:	61b9      	str	r1, [r7, #24]
 800690c:	415b      	adcs	r3, r3
 800690e:	61fb      	str	r3, [r7, #28]
 8006910:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006914:	4641      	mov	r1, r8
 8006916:	1851      	adds	r1, r2, r1
 8006918:	6139      	str	r1, [r7, #16]
 800691a:	4649      	mov	r1, r9
 800691c:	414b      	adcs	r3, r1
 800691e:	617b      	str	r3, [r7, #20]
 8006920:	f04f 0200 	mov.w	r2, #0
 8006924:	f04f 0300 	mov.w	r3, #0
 8006928:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800692c:	4659      	mov	r1, fp
 800692e:	00cb      	lsls	r3, r1, #3
 8006930:	4651      	mov	r1, sl
 8006932:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006936:	4651      	mov	r1, sl
 8006938:	00ca      	lsls	r2, r1, #3
 800693a:	4610      	mov	r0, r2
 800693c:	4619      	mov	r1, r3
 800693e:	4603      	mov	r3, r0
 8006940:	4642      	mov	r2, r8
 8006942:	189b      	adds	r3, r3, r2
 8006944:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006948:	464b      	mov	r3, r9
 800694a:	460a      	mov	r2, r1
 800694c:	eb42 0303 	adc.w	r3, r2, r3
 8006950:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	67bb      	str	r3, [r7, #120]	; 0x78
 800695e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006960:	f04f 0200 	mov.w	r2, #0
 8006964:	f04f 0300 	mov.w	r3, #0
 8006968:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800696c:	4649      	mov	r1, r9
 800696e:	008b      	lsls	r3, r1, #2
 8006970:	4641      	mov	r1, r8
 8006972:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006976:	4641      	mov	r1, r8
 8006978:	008a      	lsls	r2, r1, #2
 800697a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800697e:	f7f9 fc3d 	bl	80001fc <__aeabi_uldivmod>
 8006982:	4602      	mov	r2, r0
 8006984:	460b      	mov	r3, r1
 8006986:	4611      	mov	r1, r2
 8006988:	4b38      	ldr	r3, [pc, #224]	; (8006a6c <UART_SetConfig+0x4e4>)
 800698a:	fba3 2301 	umull	r2, r3, r3, r1
 800698e:	095b      	lsrs	r3, r3, #5
 8006990:	2264      	movs	r2, #100	; 0x64
 8006992:	fb02 f303 	mul.w	r3, r2, r3
 8006996:	1acb      	subs	r3, r1, r3
 8006998:	011b      	lsls	r3, r3, #4
 800699a:	3332      	adds	r3, #50	; 0x32
 800699c:	4a33      	ldr	r2, [pc, #204]	; (8006a6c <UART_SetConfig+0x4e4>)
 800699e:	fba2 2303 	umull	r2, r3, r2, r3
 80069a2:	095b      	lsrs	r3, r3, #5
 80069a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069a8:	441c      	add	r4, r3
 80069aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069ae:	2200      	movs	r2, #0
 80069b0:	673b      	str	r3, [r7, #112]	; 0x70
 80069b2:	677a      	str	r2, [r7, #116]	; 0x74
 80069b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80069b8:	4642      	mov	r2, r8
 80069ba:	464b      	mov	r3, r9
 80069bc:	1891      	adds	r1, r2, r2
 80069be:	60b9      	str	r1, [r7, #8]
 80069c0:	415b      	adcs	r3, r3
 80069c2:	60fb      	str	r3, [r7, #12]
 80069c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80069c8:	4641      	mov	r1, r8
 80069ca:	1851      	adds	r1, r2, r1
 80069cc:	6039      	str	r1, [r7, #0]
 80069ce:	4649      	mov	r1, r9
 80069d0:	414b      	adcs	r3, r1
 80069d2:	607b      	str	r3, [r7, #4]
 80069d4:	f04f 0200 	mov.w	r2, #0
 80069d8:	f04f 0300 	mov.w	r3, #0
 80069dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80069e0:	4659      	mov	r1, fp
 80069e2:	00cb      	lsls	r3, r1, #3
 80069e4:	4651      	mov	r1, sl
 80069e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069ea:	4651      	mov	r1, sl
 80069ec:	00ca      	lsls	r2, r1, #3
 80069ee:	4610      	mov	r0, r2
 80069f0:	4619      	mov	r1, r3
 80069f2:	4603      	mov	r3, r0
 80069f4:	4642      	mov	r2, r8
 80069f6:	189b      	adds	r3, r3, r2
 80069f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80069fa:	464b      	mov	r3, r9
 80069fc:	460a      	mov	r2, r1
 80069fe:	eb42 0303 	adc.w	r3, r2, r3
 8006a02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	663b      	str	r3, [r7, #96]	; 0x60
 8006a0e:	667a      	str	r2, [r7, #100]	; 0x64
 8006a10:	f04f 0200 	mov.w	r2, #0
 8006a14:	f04f 0300 	mov.w	r3, #0
 8006a18:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006a1c:	4649      	mov	r1, r9
 8006a1e:	008b      	lsls	r3, r1, #2
 8006a20:	4641      	mov	r1, r8
 8006a22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a26:	4641      	mov	r1, r8
 8006a28:	008a      	lsls	r2, r1, #2
 8006a2a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006a2e:	f7f9 fbe5 	bl	80001fc <__aeabi_uldivmod>
 8006a32:	4602      	mov	r2, r0
 8006a34:	460b      	mov	r3, r1
 8006a36:	4b0d      	ldr	r3, [pc, #52]	; (8006a6c <UART_SetConfig+0x4e4>)
 8006a38:	fba3 1302 	umull	r1, r3, r3, r2
 8006a3c:	095b      	lsrs	r3, r3, #5
 8006a3e:	2164      	movs	r1, #100	; 0x64
 8006a40:	fb01 f303 	mul.w	r3, r1, r3
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	011b      	lsls	r3, r3, #4
 8006a48:	3332      	adds	r3, #50	; 0x32
 8006a4a:	4a08      	ldr	r2, [pc, #32]	; (8006a6c <UART_SetConfig+0x4e4>)
 8006a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a50:	095b      	lsrs	r3, r3, #5
 8006a52:	f003 020f 	and.w	r2, r3, #15
 8006a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4422      	add	r2, r4
 8006a5e:	609a      	str	r2, [r3, #8]
}
 8006a60:	bf00      	nop
 8006a62:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006a66:	46bd      	mov	sp, r7
 8006a68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a6c:	51eb851f 	.word	0x51eb851f

08006a70 <memset>:
 8006a70:	4402      	add	r2, r0
 8006a72:	4603      	mov	r3, r0
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d100      	bne.n	8006a7a <memset+0xa>
 8006a78:	4770      	bx	lr
 8006a7a:	f803 1b01 	strb.w	r1, [r3], #1
 8006a7e:	e7f9      	b.n	8006a74 <memset+0x4>

08006a80 <__libc_init_array>:
 8006a80:	b570      	push	{r4, r5, r6, lr}
 8006a82:	4d0d      	ldr	r5, [pc, #52]	; (8006ab8 <__libc_init_array+0x38>)
 8006a84:	4c0d      	ldr	r4, [pc, #52]	; (8006abc <__libc_init_array+0x3c>)
 8006a86:	1b64      	subs	r4, r4, r5
 8006a88:	10a4      	asrs	r4, r4, #2
 8006a8a:	2600      	movs	r6, #0
 8006a8c:	42a6      	cmp	r6, r4
 8006a8e:	d109      	bne.n	8006aa4 <__libc_init_array+0x24>
 8006a90:	4d0b      	ldr	r5, [pc, #44]	; (8006ac0 <__libc_init_array+0x40>)
 8006a92:	4c0c      	ldr	r4, [pc, #48]	; (8006ac4 <__libc_init_array+0x44>)
 8006a94:	f000 f818 	bl	8006ac8 <_init>
 8006a98:	1b64      	subs	r4, r4, r5
 8006a9a:	10a4      	asrs	r4, r4, #2
 8006a9c:	2600      	movs	r6, #0
 8006a9e:	42a6      	cmp	r6, r4
 8006aa0:	d105      	bne.n	8006aae <__libc_init_array+0x2e>
 8006aa2:	bd70      	pop	{r4, r5, r6, pc}
 8006aa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aa8:	4798      	blx	r3
 8006aaa:	3601      	adds	r6, #1
 8006aac:	e7ee      	b.n	8006a8c <__libc_init_array+0xc>
 8006aae:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ab2:	4798      	blx	r3
 8006ab4:	3601      	adds	r6, #1
 8006ab6:	e7f2      	b.n	8006a9e <__libc_init_array+0x1e>
 8006ab8:	08006b70 	.word	0x08006b70
 8006abc:	08006b70 	.word	0x08006b70
 8006ac0:	08006b70 	.word	0x08006b70
 8006ac4:	08006b74 	.word	0x08006b74

08006ac8 <_init>:
 8006ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aca:	bf00      	nop
 8006acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ace:	bc08      	pop	{r3}
 8006ad0:	469e      	mov	lr, r3
 8006ad2:	4770      	bx	lr

08006ad4 <_fini>:
 8006ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ad6:	bf00      	nop
 8006ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ada:	bc08      	pop	{r3}
 8006adc:	469e      	mov	lr, r3
 8006ade:	4770      	bx	lr
