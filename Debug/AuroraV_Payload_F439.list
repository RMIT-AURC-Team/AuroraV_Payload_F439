
AuroraV_Payload_F439.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e94  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08008040  08008040  00018040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080f8  080080f8  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  080080f8  080080f8  000180f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008100  08008100  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008100  08008100  00018100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008104  08008104  00018104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08008108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
 10 .bss          0000055c  20000024  20000024  00020024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000580  20000580  00020024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001a4da  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003a0b  00000000  00000000  0003a571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001530  00000000  00000000  0003df80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001083  00000000  00000000  0003f4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000273e4  00000000  00000000  00040533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001bb22  00000000  00000000  00067917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e725c  00000000  00000000  00083439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005814  00000000  00000000  0016a698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0016feac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000024 	.word	0x20000024
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08008028 	.word	0x08008028

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000028 	.word	0x20000028
 80001e8:	08008028 	.word	0x08008028

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <init_accel>:
uint8_t OUT_Y_L 				= 0x2A;
uint8_t OUT_Y_H 				= 0x2B;
uint8_t OUT_Z_L 				= 0x2C;
uint8_t OUT_Z_H 				= 0x2D;

HAL_StatusTypeDef init_accel(I2C_HandleTypeDef* hi2c) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;

	// Write Control Register 1
	ret = i2c_write_reg(hi2c, H3LIS331DL_ADDR, &CTRL_REG1, MASK_1kHz);
 8000500:	2118      	movs	r1, #24
 8000502:	233f      	movs	r3, #63	; 0x3f
 8000504:	4a09      	ldr	r2, [pc, #36]	; (800052c <init_accel+0x34>)
 8000506:	6878      	ldr	r0, [r7, #4]
 8000508:	f000 fb7f 	bl	8000c0a <i2c_write_reg>
 800050c:	4603      	mov	r3, r0
 800050e:	73fb      	strb	r3, [r7, #15]

	// Write Control Register 4
	ret = i2c_write_reg(hi2c, H3LIS331DL_ADDR, &CTRL_REG4, MASK_100G);
 8000510:	2118      	movs	r1, #24
 8000512:	2300      	movs	r3, #0
 8000514:	4a06      	ldr	r2, [pc, #24]	; (8000530 <init_accel+0x38>)
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	f000 fb77 	bl	8000c0a <i2c_write_reg>
 800051c:	4603      	mov	r3, r0
 800051e:	73fb      	strb	r3, [r7, #15]
	return ret;
 8000520:	7bfb      	ldrb	r3, [r7, #15]
}
 8000522:	4618      	mov	r0, r3
 8000524:	3710      	adds	r7, #16
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	20000000 	.word	0x20000000
 8000530:	20000001 	.word	0x20000001

08000534 <readAccelerometer>:

void readAccelerometer(uint8_t values[6], I2C_HandleTypeDef* hi2c) {
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af02      	add	r7, sp, #8
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
	i2c_burst_read(hi2c, H3LIS331DL_ADDR, OUT_X_L, 6, values);
 800053e:	2118      	movs	r1, #24
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <readAccelerometer+0x24>)
 8000542:	781a      	ldrb	r2, [r3, #0]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	9300      	str	r3, [sp, #0]
 8000548:	2306      	movs	r3, #6
 800054a:	6838      	ldr	r0, [r7, #0]
 800054c:	f000 fb28 	bl	8000ba0 <i2c_burst_read>
}
 8000550:	bf00      	nop
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000003 	.word	0x20000003

0800055c <readAccel_whoami>:

uint8_t readAccel_whoami(I2C_HandleTypeDef* hi2c) {
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	uint8_t data = 0x00;
 8000564:	2300      	movs	r3, #0
 8000566:	73fb      	strb	r3, [r7, #15]
	i2c_read_reg(hi2c, &data, H3LIS331DL_ADDR, &WHOAMI);
 8000568:	2218      	movs	r2, #24
 800056a:	f107 010f 	add.w	r1, r7, #15
 800056e:	4b04      	ldr	r3, [pc, #16]	; (8000580 <readAccel_whoami+0x24>)
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f000 faec 	bl	8000b4e <i2c_read_reg>

	return data;
 8000576:	7bfb      	ldrb	r3, [r7, #15]
}
 8000578:	4618      	mov	r0, r3
 800057a:	3710      	adds	r7, #16
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000002 	.word	0x20000002

08000584 <init_bme280>:
uint8_t OUT_HUM_H 			= 0xFD;
uint8_t CALIB_ST_1			= 0x88;
uint8_t CALIB_ST_2			= 0xE1;


HAL_StatusTypeDef init_bme280(I2C_HandleTypeDef* hi2c, uint8_t bme) {
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	460b      	mov	r3, r1
 800058e:	70fb      	strb	r3, [r7, #3]
	uint8_t bme_addr = getBME280Config(bme).bme_addr;
 8000590:	78fb      	ldrb	r3, [r7, #3]
 8000592:	4618      	mov	r0, r3
 8000594:	f000 f8e0 	bl	8000758 <getBME280Config>
 8000598:	4603      	mov	r3, r0
 800059a:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef ret;
	uint8_t control_reg = 0x00;
 800059c:	2300      	movs	r3, #0
 800059e:	737b      	strb	r3, [r7, #13]

	// Reset the sensor
	ret =  i2c_write_reg(hi2c, bme_addr, &RST_REG, RST);
 80005a0:	7bf9      	ldrb	r1, [r7, #15]
 80005a2:	23b6      	movs	r3, #182	; 0xb6
 80005a4:	4a19      	ldr	r2, [pc, #100]	; (800060c <init_bme280+0x88>)
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f000 fb2f 	bl	8000c0a <i2c_write_reg>
 80005ac:	4603      	mov	r3, r0
 80005ae:	73bb      	strb	r3, [r7, #14]

	// Set humidity control register
	i2c_read_reg(hi2c, &control_reg, bme_addr, &CTRL_HUM_REG);
 80005b0:	7bfa      	ldrb	r2, [r7, #15]
 80005b2:	f107 010d 	add.w	r1, r7, #13
 80005b6:	4b16      	ldr	r3, [pc, #88]	; (8000610 <init_bme280+0x8c>)
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f000 fac8 	bl	8000b4e <i2c_read_reg>
	control_reg = control_reg & 0xF8;
 80005be:	7b7b      	ldrb	r3, [r7, #13]
 80005c0:	f023 0307 	bic.w	r3, r3, #7
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	737b      	strb	r3, [r7, #13]
	control_reg = control_reg | CTRL_HUM_MSK;
 80005c8:	7b7b      	ldrb	r3, [r7, #13]
 80005ca:	f043 0301 	orr.w	r3, r3, #1
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	737b      	strb	r3, [r7, #13]
	ret = i2c_write_reg(hi2c, bme_addr, &CTRL_HUM_REG, control_reg);
 80005d2:	7b7b      	ldrb	r3, [r7, #13]
 80005d4:	7bf9      	ldrb	r1, [r7, #15]
 80005d6:	4a0e      	ldr	r2, [pc, #56]	; (8000610 <init_bme280+0x8c>)
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f000 fb16 	bl	8000c0a <i2c_write_reg>
 80005de:	4603      	mov	r3, r0
 80005e0:	73bb      	strb	r3, [r7, #14]

	// Set measure control register
	ret = i2c_write_reg(hi2c, bme_addr, &CTRL_MEAS_REG, CTRL_MEAS_MSK);
 80005e2:	7bf9      	ldrb	r1, [r7, #15]
 80005e4:	2327      	movs	r3, #39	; 0x27
 80005e6:	4a0b      	ldr	r2, [pc, #44]	; (8000614 <init_bme280+0x90>)
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f000 fb0e 	bl	8000c0a <i2c_write_reg>
 80005ee:	4603      	mov	r3, r0
 80005f0:	73bb      	strb	r3, [r7, #14]

	// Set the config register
	ret = i2c_write_reg(hi2c, bme_addr, &CONF_REG, CONF_MSK);
 80005f2:	7bf9      	ldrb	r1, [r7, #15]
 80005f4:	2300      	movs	r3, #0
 80005f6:	4a08      	ldr	r2, [pc, #32]	; (8000618 <init_bme280+0x94>)
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f000 fb06 	bl	8000c0a <i2c_write_reg>
 80005fe:	4603      	mov	r3, r0
 8000600:	73bb      	strb	r3, [r7, #14]

	return ret;
 8000602:	7bbb      	ldrb	r3, [r7, #14]
}
 8000604:	4618      	mov	r0, r3
 8000606:	3710      	adds	r7, #16
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000005 	.word	0x20000005
 8000610:	20000006 	.word	0x20000006
 8000614:	20000007 	.word	0x20000007
 8000618:	20000008 	.word	0x20000008

0800061c <readTempHumPres>:

void readTempHumPres(uint8_t values[6], I2C_HandleTypeDef* hi2c, uint8_t bme) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b08a      	sub	sp, #40	; 0x28
 8000620:	af02      	add	r7, sp, #8
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	4613      	mov	r3, r2
 8000628:	71fb      	strb	r3, [r7, #7]
	uint8_t readings[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 800062a:	4a27      	ldr	r2, [pc, #156]	; (80006c8 <readTempHumPres+0xac>)
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000634:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t bme_addr = getBME280Config(bme).bme_addr;
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	4618      	mov	r0, r3
 800063c:	f000 f88c 	bl	8000758 <getBME280Config>
 8000640:	4603      	mov	r3, r0
 8000642:	777b      	strb	r3, [r7, #29]
	i2c_burst_read(hi2c, bme_addr, OUT_PRESS_H, 8, readings);
 8000644:	4b21      	ldr	r3, [pc, #132]	; (80006cc <readTempHumPres+0xb0>)
 8000646:	781a      	ldrb	r2, [r3, #0]
 8000648:	7f79      	ldrb	r1, [r7, #29]
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	2308      	movs	r3, #8
 8000652:	68b8      	ldr	r0, [r7, #8]
 8000654:	f000 faa4 	bl	8000ba0 <i2c_burst_read>

	// Clear the 0 values on the xlsb registers
	uint8_t j = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	77fb      	strb	r3, [r7, #31]
    for(uint8_t i = 0; i < 8; i++) {
 800065c:	2300      	movs	r3, #0
 800065e:	77bb      	strb	r3, [r7, #30]
 8000660:	e014      	b.n	800068c <readTempHumPres+0x70>
        if(i != 2 && i != 5) {  // if the index is not 2 or 5
 8000662:	7fbb      	ldrb	r3, [r7, #30]
 8000664:	2b02      	cmp	r3, #2
 8000666:	d00e      	beq.n	8000686 <readTempHumPres+0x6a>
 8000668:	7fbb      	ldrb	r3, [r7, #30]
 800066a:	2b05      	cmp	r3, #5
 800066c:	d00b      	beq.n	8000686 <readTempHumPres+0x6a>
        	values[j] = readings[i];
 800066e:	7fba      	ldrb	r2, [r7, #30]
 8000670:	7ffb      	ldrb	r3, [r7, #31]
 8000672:	68f9      	ldr	r1, [r7, #12]
 8000674:	440b      	add	r3, r1
 8000676:	3220      	adds	r2, #32
 8000678:	443a      	add	r2, r7
 800067a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800067e:	701a      	strb	r2, [r3, #0]
            j++;
 8000680:	7ffb      	ldrb	r3, [r7, #31]
 8000682:	3301      	adds	r3, #1
 8000684:	77fb      	strb	r3, [r7, #31]
    for(uint8_t i = 0; i < 8; i++) {
 8000686:	7fbb      	ldrb	r3, [r7, #30]
 8000688:	3301      	adds	r3, #1
 800068a:	77bb      	strb	r3, [r7, #30]
 800068c:	7fbb      	ldrb	r3, [r7, #30]
 800068e:	2b07      	cmp	r3, #7
 8000690:	d9e7      	bls.n	8000662 <readTempHumPres+0x46>
        }
    }

    // Swap elements to make the array little endian
    swap(&values[0], &values[1]);
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	3301      	adds	r3, #1
 8000696:	4619      	mov	r1, r3
 8000698:	68f8      	ldr	r0, [r7, #12]
 800069a:	f000 f874 	bl	8000786 <swap>
    swap(&values[2], &values[3]);
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	1c9a      	adds	r2, r3, #2
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	3303      	adds	r3, #3
 80006a6:	4619      	mov	r1, r3
 80006a8:	4610      	mov	r0, r2
 80006aa:	f000 f86c 	bl	8000786 <swap>
    swap(&values[4], &values[5]);
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	1d1a      	adds	r2, r3, #4
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	3305      	adds	r3, #5
 80006b6:	4619      	mov	r1, r3
 80006b8:	4610      	mov	r0, r2
 80006ba:	f000 f864 	bl	8000786 <swap>
}
 80006be:	bf00      	nop
 80006c0:	3720      	adds	r7, #32
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	08008040 	.word	0x08008040
 80006cc:	20000009 	.word	0x20000009

080006d0 <readBME280_id_reg>:

uint8_t readBME280_id_reg(I2C_HandleTypeDef* hi2c, uint8_t bme) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	460b      	mov	r3, r1
 80006da:	70fb      	strb	r3, [r7, #3]
	uint8_t bme_addr = getBME280Config(bme).bme_addr;
 80006dc:	78fb      	ldrb	r3, [r7, #3]
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 f83a 	bl	8000758 <getBME280Config>
 80006e4:	4603      	mov	r3, r0
 80006e6:	73fb      	strb	r3, [r7, #15]
	uint8_t data = 0x00;
 80006e8:	2300      	movs	r3, #0
 80006ea:	73bb      	strb	r3, [r7, #14]
	i2c_read_reg(hi2c, &data, bme_addr, &ID_REG);
 80006ec:	7bfa      	ldrb	r2, [r7, #15]
 80006ee:	f107 010e 	add.w	r1, r7, #14
 80006f2:	4b04      	ldr	r3, [pc, #16]	; (8000704 <readBME280_id_reg+0x34>)
 80006f4:	6878      	ldr	r0, [r7, #4]
 80006f6:	f000 fa2a 	bl	8000b4e <i2c_read_reg>

	return data;
 80006fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3710      	adds	r7, #16
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000004 	.word	0x20000004

08000708 <readBME280_calib>:

void readBME280_calib(I2C_HandleTypeDef* hi2c, uint8_t bme, uint8_t calibration1[CALIB_CNT_1], uint8_t calibration2[CALIB_CNT_2]) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b088      	sub	sp, #32
 800070c:	af02      	add	r7, sp, #8
 800070e:	60f8      	str	r0, [r7, #12]
 8000710:	607a      	str	r2, [r7, #4]
 8000712:	603b      	str	r3, [r7, #0]
 8000714:	460b      	mov	r3, r1
 8000716:	72fb      	strb	r3, [r7, #11]
	uint8_t bme_addr = getBME280Config(bme).bme_addr;
 8000718:	7afb      	ldrb	r3, [r7, #11]
 800071a:	4618      	mov	r0, r3
 800071c:	f000 f81c 	bl	8000758 <getBME280Config>
 8000720:	4603      	mov	r3, r0
 8000722:	75fb      	strb	r3, [r7, #23]
	i2c_burst_read(hi2c, bme_addr, CALIB_ST_1, CALIB_CNT_1, calibration1);
 8000724:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <readBME280_calib+0x48>)
 8000726:	781a      	ldrb	r2, [r3, #0]
 8000728:	7df9      	ldrb	r1, [r7, #23]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	9300      	str	r3, [sp, #0]
 800072e:	2319      	movs	r3, #25
 8000730:	68f8      	ldr	r0, [r7, #12]
 8000732:	f000 fa35 	bl	8000ba0 <i2c_burst_read>
	i2c_burst_read(hi2c, bme_addr, CALIB_ST_2, CALIB_CNT_2, calibration2);
 8000736:	4b07      	ldr	r3, [pc, #28]	; (8000754 <readBME280_calib+0x4c>)
 8000738:	781a      	ldrb	r2, [r3, #0]
 800073a:	7df9      	ldrb	r1, [r7, #23]
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	9300      	str	r3, [sp, #0]
 8000740:	2307      	movs	r3, #7
 8000742:	68f8      	ldr	r0, [r7, #12]
 8000744:	f000 fa2c 	bl	8000ba0 <i2c_burst_read>
}
 8000748:	bf00      	nop
 800074a:	3718      	adds	r7, #24
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	2000000a 	.word	0x2000000a
 8000754:	2000000b 	.word	0x2000000b

08000758 <getBME280Config>:

BME280_Config getBME280Config(uint8_t bme) {
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	71fb      	strb	r3, [r7, #7]
	BME280_Config config;
	if (bme == 0) {
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d102      	bne.n	800076e <getBME280Config+0x16>
		config.bme_addr = BME280_ADDR_0;
 8000768:	2376      	movs	r3, #118	; 0x76
 800076a:	733b      	strb	r3, [r7, #12]
 800076c:	e004      	b.n	8000778 <getBME280Config+0x20>
	} else if (bme == 1) {
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	2b01      	cmp	r3, #1
 8000772:	d101      	bne.n	8000778 <getBME280Config+0x20>
		config.bme_addr = BME280_ADDR_1;
 8000774:	2377      	movs	r3, #119	; 0x77
 8000776:	733b      	strb	r3, [r7, #12]
	}
    return config;
 8000778:	7b3b      	ldrb	r3, [r7, #12]
}
 800077a:	4618      	mov	r0, r3
 800077c:	3714      	adds	r7, #20
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr

08000786 <swap>:

void swap(uint8_t* a, uint8_t* b) {
 8000786:	b480      	push	{r7}
 8000788:	b085      	sub	sp, #20
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
 800078e:	6039      	str	r1, [r7, #0]
    uint8_t temp = *a;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	73fb      	strb	r3, [r7, #15]
    *a = *b;
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	781a      	ldrb	r2, [r3, #0]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	701a      	strb	r2, [r3, #0]
    *b = temp;
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	7bfa      	ldrb	r2, [r7, #15]
 80007a2:	701a      	strb	r2, [r3, #0]
}
 80007a4:	bf00      	nop
 80007a6:	3714      	adds	r7, #20
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <check_busy>:
uint8_t FLASH_32K_ERS	= 0x52;			// Erase all memory within a 32K-byte block
uint8_t FLASH_ERASE		= 0xC7;			// Erase the entire chip
uint8_t RST_EN			= 0x66;			// Reset enable
uint8_t DEV_RST			= 0x99;			// Reset device

uint8_t check_busy(SPI_HandleTypeDef *hspi, GPIO_Config config, int timeout) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b088      	sub	sp, #32
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	1d38      	adds	r0, r7, #4
 80007ba:	e880 0006 	stmia.w	r0, {r1, r2}
 80007be:	603b      	str	r3, [r7, #0]
	uint8_t ret_val = 0x00;
 80007c0:	2300      	movs	r3, #0
 80007c2:	77fb      	strb	r3, [r7, #31]

    // Get the current time
	uint32_t startTick = HAL_GetTick();
 80007c4:	f002 f89c 	bl	8002900 <HAL_GetTick>
 80007c8:	61b8      	str	r0, [r7, #24]

	// Read the status register to ensure no write is currently in progress
	uint8_t busy = 0x01;
 80007ca:	2301      	movs	r3, #1
 80007cc:	77bb      	strb	r3, [r7, #30]
	while(busy) {
 80007ce:	e015      	b.n	80007fc <check_busy+0x4c>
		// Check if there is a write in progress
		busy = (check_status_register(hspi, config) & 0x01);
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80007d6:	68f8      	ldr	r0, [r7, #12]
 80007d8:	f000 f818 	bl	800080c <check_status_register>
 80007dc:	4603      	mov	r3, r0
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	77bb      	strb	r3, [r7, #30]

		uint32_t currTick = HAL_GetTick();
 80007e4:	f002 f88c 	bl	8002900 <HAL_GetTick>
 80007e8:	6178      	str	r0, [r7, #20]

        // Check if the timeout has been reached
		if ((currTick - startTick) >= timeout) {
 80007ea:	697a      	ldr	r2, [r7, #20]
 80007ec:	69bb      	ldr	r3, [r7, #24]
 80007ee:	1ad2      	subs	r2, r2, r3
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d302      	bcc.n	80007fc <check_busy+0x4c>
        	ret_val = 0x01;
 80007f6:	2301      	movs	r3, #1
 80007f8:	77fb      	strb	r3, [r7, #31]
            break;
 80007fa:	e002      	b.n	8000802 <check_busy+0x52>
	while(busy) {
 80007fc:	7fbb      	ldrb	r3, [r7, #30]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d1e6      	bne.n	80007d0 <check_busy+0x20>
        }
	}

	return ret_val;
 8000802:	7ffb      	ldrb	r3, [r7, #31]
}
 8000804:	4618      	mov	r0, r3
 8000806:	3720      	adds	r7, #32
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <check_status_register>:

uint8_t check_status_register(SPI_HandleTypeDef *hspi, GPIO_Config config) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b088      	sub	sp, #32
 8000810:	af02      	add	r7, sp, #8
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	e883 0006 	stmia.w	r3, {r1, r2}
	uint8_t status_reg = 0x00;
 800081a:	2300      	movs	r3, #0
 800081c:	75fb      	strb	r3, [r7, #23]
	spi_sendOp_readByte(&FLASH_READSR1, hspi, &status_reg, config.GPIOx, config.GPIO_Pin);
 800081e:	6879      	ldr	r1, [r7, #4]
 8000820:	893b      	ldrh	r3, [r7, #8]
 8000822:	f107 0217 	add.w	r2, r7, #23
 8000826:	9300      	str	r3, [sp, #0]
 8000828:	460b      	mov	r3, r1
 800082a:	68f9      	ldr	r1, [r7, #12]
 800082c:	4803      	ldr	r0, [pc, #12]	; (800083c <check_status_register+0x30>)
 800082e:	f001 fbc3 	bl	8001fb8 <spi_sendOp_readByte>
	return status_reg;
 8000832:	7dfb      	ldrb	r3, [r7, #23]
}
 8000834:	4618      	mov	r0, r3
 8000836:	3718      	adds	r7, #24
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	2000000e 	.word	0x2000000e

08000840 <erase_chip_spi>:
 *      Author: aidencontini
 */

#include "data_output_spi.h"

HAL_StatusTypeDef erase_chip_spi(SPI_HandleTypeDef *hspi, GPIO_Config config) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	60f8      	str	r0, [r7, #12]
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	e883 0006 	stmia.w	r3, {r1, r2}
	check_busy(hspi, config, BSY_TIMEOUT_MS);
 800084e:	2305      	movs	r3, #5
 8000850:	1d3a      	adds	r2, r7, #4
 8000852:	ca06      	ldmia	r2, {r1, r2}
 8000854:	68f8      	ldr	r0, [r7, #12]
 8000856:	f7ff ffab 	bl	80007b0 <check_busy>

	write_enable_spi(hspi, config);
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000860:	68f8      	ldr	r0, [r7, #12]
 8000862:	f000 f815 	bl	8000890 <write_enable_spi>
	perform_operation(&FLASH_ERASE, hspi, config.GPIOx, config.GPIO_Pin);
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	893b      	ldrh	r3, [r7, #8]
 800086a:	68f9      	ldr	r1, [r7, #12]
 800086c:	4806      	ldr	r0, [pc, #24]	; (8000888 <erase_chip_spi+0x48>)
 800086e:	f001 fbc9 	bl	8002004 <perform_operation>

	check_busy(hspi, config, CHIP_ERASE_TO);
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <erase_chip_spi+0x4c>)
 8000874:	1d3a      	adds	r2, r7, #4
 8000876:	ca06      	ldmia	r2, {r1, r2}
 8000878:	68f8      	ldr	r0, [r7, #12]
 800087a:	f7ff ff99 	bl	80007b0 <check_busy>

	return HAL_OK;
 800087e:	2300      	movs	r3, #0
}
 8000880:	4618      	mov	r0, r3
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000011 	.word	0x20000011
 800088c:	00030d40 	.word	0x00030d40

08000890 <write_enable_spi>:
	check_busy(hspi, config, BLK_ERS_32K_TO);

	return HAL_OK;
}

void write_enable_spi(SPI_HandleTypeDef *hspi, GPIO_Config config) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	e883 0006 	stmia.w	r3, {r1, r2}
	perform_operation(&FLASH_WREN, hspi, config.GPIOx, config.GPIO_Pin);
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	893b      	ldrh	r3, [r7, #8]
 80008a2:	68f9      	ldr	r1, [r7, #12]
 80008a4:	4803      	ldr	r0, [pc, #12]	; (80008b4 <write_enable_spi+0x24>)
 80008a6:	f001 fbad 	bl	8002004 <perform_operation>
}
 80008aa:	bf00      	nop
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	2000000c 	.word	0x2000000c

080008b8 <software_reset>:

void write_disable_spi(SPI_HandleTypeDef *hspi, GPIO_Config config) {
	perform_operation(&FLASH_WRDIS, hspi, config.GPIOx, config.GPIO_Pin);
}

void software_reset(SPI_HandleTypeDef *hspi, GPIO_Config config) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	e883 0006 	stmia.w	r3, {r1, r2}

	check_busy(hspi, config, BSY_TIMEOUT_MS);
 80008c6:	2305      	movs	r3, #5
 80008c8:	1d3a      	adds	r2, r7, #4
 80008ca:	ca06      	ldmia	r2, {r1, r2}
 80008cc:	68f8      	ldr	r0, [r7, #12]
 80008ce:	f7ff ff6f 	bl	80007b0 <check_busy>

	perform_operation(&RST_EN, hspi, config.GPIOx, config.GPIO_Pin);
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	893b      	ldrh	r3, [r7, #8]
 80008d6:	68f9      	ldr	r1, [r7, #12]
 80008d8:	4807      	ldr	r0, [pc, #28]	; (80008f8 <software_reset+0x40>)
 80008da:	f001 fb93 	bl	8002004 <perform_operation>
	perform_operation(&DEV_RST, hspi, config.GPIOx, config.GPIO_Pin);
 80008de:	687a      	ldr	r2, [r7, #4]
 80008e0:	893b      	ldrh	r3, [r7, #8]
 80008e2:	68f9      	ldr	r1, [r7, #12]
 80008e4:	4805      	ldr	r0, [pc, #20]	; (80008fc <software_reset+0x44>)
 80008e6:	f001 fb8d 	bl	8002004 <perform_operation>

	HAL_Delay(5);
 80008ea:	2005      	movs	r0, #5
 80008ec:	f002 f814 	bl	8002918 <HAL_Delay>
}
 80008f0:	bf00      	nop
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000012 	.word	0x20000012
 80008fc:	20000013 	.word	0x20000013

08000900 <write_data_spi_dma>:
	spi_write_data(&FLASH_PGWR, PAGE_SIZE, page, hspi, addr, config.GPIOx, config.GPIO_Pin);

	return 0;
}

uint8_t write_data_spi_dma(uint8_t page[PAGE_SIZE], SPI_HandleTypeDef *hspi, uint32_t addr, GPIO_Config config) {
 8000900:	b082      	sub	sp, #8
 8000902:	b580      	push	{r7, lr}
 8000904:	b088      	sub	sp, #32
 8000906:	af04      	add	r7, sp, #16
 8000908:	60f8      	str	r0, [r7, #12]
 800090a:	60b9      	str	r1, [r7, #8]
 800090c:	607a      	str	r2, [r7, #4]
 800090e:	61fb      	str	r3, [r7, #28]
	check_busy(hspi, config, BSY_TIMEOUT_MS);
 8000910:	2305      	movs	r3, #5
 8000912:	f107 021c 	add.w	r2, r7, #28
 8000916:	ca06      	ldmia	r2, {r1, r2}
 8000918:	68b8      	ldr	r0, [r7, #8]
 800091a:	f7ff ff49 	bl	80007b0 <check_busy>

	// Send the write enable signal
	write_enable_spi(hspi, config);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000926:	68b8      	ldr	r0, [r7, #8]
 8000928:	f7ff ffb2 	bl	8000890 <write_enable_spi>
	spi_write_data_dma(&FLASH_PGWR, PAGE_SIZE, page, hspi, addr, config.GPIOx, config.GPIO_Pin);
 800092c:	69fb      	ldr	r3, [r7, #28]
 800092e:	8c3a      	ldrh	r2, [r7, #32]
 8000930:	9202      	str	r2, [sp, #8]
 8000932:	9301      	str	r3, [sp, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	9300      	str	r3, [sp, #0]
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	68fa      	ldr	r2, [r7, #12]
 800093c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000940:	4805      	ldr	r0, [pc, #20]	; (8000958 <write_data_spi_dma+0x58>)
 8000942:	f001 fbc6 	bl	80020d2 <spi_write_data_dma>

	return 0;
 8000946:	2300      	movs	r3, #0
}
 8000948:	4618      	mov	r0, r3
 800094a:	3710      	adds	r7, #16
 800094c:	46bd      	mov	sp, r7
 800094e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000952:	b002      	add	sp, #8
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	2000000d 	.word	0x2000000d

0800095c <find_next_blank_page>:
 *      Author: aidencontini
 */

#include "data_read_spi.h"

uint32_t find_next_blank_page(SPI_HandleTypeDef *hspi, GPIO_PinState *end_of_flash_ptr, GPIO_Config config) {
 800095c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000960:	b091      	sub	sp, #68	; 0x44
 8000962:	af04      	add	r7, sp, #16
 8000964:	60f8      	str	r0, [r7, #12]
 8000966:	60b9      	str	r1, [r7, #8]
 8000968:	4639      	mov	r1, r7
 800096a:	e881 000c 	stmia.w	r1, {r2, r3}
 800096e:	466b      	mov	r3, sp
 8000970:	461e      	mov	r6, r3
	uint8_t firstBytes = 4;
 8000972:	2304      	movs	r3, #4
 8000974:	77fb      	strb	r3, [r7, #31]

	uint8_t page_start[firstBytes];
 8000976:	7ff9      	ldrb	r1, [r7, #31]
 8000978:	460b      	mov	r3, r1
 800097a:	3b01      	subs	r3, #1
 800097c:	61bb      	str	r3, [r7, #24]
 800097e:	b2cb      	uxtb	r3, r1
 8000980:	2200      	movs	r2, #0
 8000982:	4698      	mov	r8, r3
 8000984:	4691      	mov	r9, r2
 8000986:	f04f 0200 	mov.w	r2, #0
 800098a:	f04f 0300 	mov.w	r3, #0
 800098e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000992:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000996:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800099a:	b2cb      	uxtb	r3, r1
 800099c:	2200      	movs	r2, #0
 800099e:	461c      	mov	r4, r3
 80009a0:	4615      	mov	r5, r2
 80009a2:	f04f 0200 	mov.w	r2, #0
 80009a6:	f04f 0300 	mov.w	r3, #0
 80009aa:	00eb      	lsls	r3, r5, #3
 80009ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80009b0:	00e2      	lsls	r2, r4, #3
 80009b2:	460b      	mov	r3, r1
 80009b4:	3307      	adds	r3, #7
 80009b6:	08db      	lsrs	r3, r3, #3
 80009b8:	00db      	lsls	r3, r3, #3
 80009ba:	ebad 0d03 	sub.w	sp, sp, r3
 80009be:	ab04      	add	r3, sp, #16
 80009c0:	3300      	adds	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < firstBytes; i++) {
 80009c4:	2300      	movs	r3, #0
 80009c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009c8:	e007      	b.n	80009da <find_next_blank_page+0x7e>
		page_start[i] = 0;
 80009ca:	697a      	ldr	r2, [r7, #20]
 80009cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009ce:	4413      	add	r3, r2
 80009d0:	2200      	movs	r2, #0
 80009d2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < firstBytes; i++) {
 80009d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009d6:	3301      	adds	r3, #1
 80009d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009da:	7ffb      	ldrb	r3, [r7, #31]
 80009dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009de:	429a      	cmp	r2, r3
 80009e0:	dbf3      	blt.n	80009ca <find_next_blank_page+0x6e>
	}

	uint32_t page_start_concat = (page_start[0] << 24) | (page_start[1] << 16) | (page_start[2] << 8) | page_start[3];
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	061a      	lsls	r2, r3, #24
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	785b      	ldrb	r3, [r3, #1]
 80009ec:	041b      	lsls	r3, r3, #16
 80009ee:	431a      	orrs	r2, r3
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	789b      	ldrb	r3, [r3, #2]
 80009f4:	021b      	lsls	r3, r3, #8
 80009f6:	4313      	orrs	r3, r2
 80009f8:	697a      	ldr	r2, [r7, #20]
 80009fa:	78d2      	ldrb	r2, [r2, #3]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t temp = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t page_address = temp;
 8000a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a06:	623b      	str	r3, [r7, #32]

	while ((page_start_concat != 0xFFFFFFFF) || (temp == NUM_OF_PAGES)) {
 8000a08:	e027      	b.n	8000a5a <find_next_blank_page+0xfe>
		page_address = temp;
 8000a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0c:	623b      	str	r3, [r7, #32]

		check_busy(hspi, config, BSY_TIMEOUT_MS);
 8000a0e:	2305      	movs	r3, #5
 8000a10:	463a      	mov	r2, r7
 8000a12:	ca06      	ldmia	r2, {r1, r2}
 8000a14:	68f8      	ldr	r0, [r7, #12]
 8000a16:	f7ff fecb 	bl	80007b0 <check_busy>

		spi_read_data(&FLASH_READEN, firstBytes, page_start, hspi, page_address, config.GPIOx, config.GPIO_Pin);
 8000a1a:	7ffb      	ldrb	r3, [r7, #31]
 8000a1c:	b299      	uxth	r1, r3
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	88ba      	ldrh	r2, [r7, #4]
 8000a22:	9202      	str	r2, [sp, #8]
 8000a24:	9301      	str	r3, [sp, #4]
 8000a26:	6a3b      	ldr	r3, [r7, #32]
 8000a28:	9300      	str	r3, [sp, #0]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	697a      	ldr	r2, [r7, #20]
 8000a2e:	4816      	ldr	r0, [pc, #88]	; (8000a88 <find_next_blank_page+0x12c>)
 8000a30:	f001 fb08 	bl	8002044 <spi_read_data>

		page_start_concat = (page_start[0] << 24) | (page_start[1] << 16) | (page_start[2] << 8) | page_start[3];
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	061a      	lsls	r2, r3, #24
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	785b      	ldrb	r3, [r3, #1]
 8000a3e:	041b      	lsls	r3, r3, #16
 8000a40:	431a      	orrs	r2, r3
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	789b      	ldrb	r3, [r3, #2]
 8000a46:	021b      	lsls	r3, r3, #8
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	697a      	ldr	r2, [r7, #20]
 8000a4c:	78d2      	ldrb	r2, [r2, #3]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	62bb      	str	r3, [r7, #40]	; 0x28
		temp += PAGE_SIZE;
 8000a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a54:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
	while ((page_start_concat != 0xFFFFFFFF) || (temp == NUM_OF_PAGES)) {
 8000a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a60:	d1d3      	bne.n	8000a0a <find_next_blank_page+0xae>
 8000a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a68:	d0cf      	beq.n	8000a0a <find_next_blank_page+0xae>
	}

	if (page_address == (NUM_OF_PAGES * PAGE_SIZE)) {
 8000a6a:	6a3b      	ldr	r3, [r7, #32]
 8000a6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a70:	d102      	bne.n	8000a78 <find_next_blank_page+0x11c>
		*end_of_flash_ptr = GPIO_PIN_RESET;
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]
	}
	return page_address;
 8000a78:	6a3b      	ldr	r3, [r7, #32]
 8000a7a:	46b5      	mov	sp, r6
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3734      	adds	r7, #52	; 0x34
 8000a80:	46bd      	mov	sp, r7
 8000a82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a86:	bf00      	nop
 8000a88:	2000000f 	.word	0x2000000f

08000a8c <read_page_spi>:

void read_page_spi(uint8_t data_read[PAGE_SIZE], SPI_HandleTypeDef *hspi, uint32_t addr, GPIO_Config config) {
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b088      	sub	sp, #32
 8000a92:	af04      	add	r7, sp, #16
 8000a94:	60f8      	str	r0, [r7, #12]
 8000a96:	60b9      	str	r1, [r7, #8]
 8000a98:	607a      	str	r2, [r7, #4]
 8000a9a:	61fb      	str	r3, [r7, #28]

	// Read the status register to ensure no write is currently in progress
	check_busy(hspi, config, BSY_TIMEOUT_MS);
 8000a9c:	2305      	movs	r3, #5
 8000a9e:	f107 021c 	add.w	r2, r7, #28
 8000aa2:	ca06      	ldmia	r2, {r1, r2}
 8000aa4:	68b8      	ldr	r0, [r7, #8]
 8000aa6:	f7ff fe83 	bl	80007b0 <check_busy>
	spi_read_data(&FLASH_READEN, PAGE_SIZE, data_read, hspi, addr, config.GPIOx, config.GPIO_Pin);
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	8c3a      	ldrh	r2, [r7, #32]
 8000aae:	9202      	str	r2, [sp, #8]
 8000ab0:	9301      	str	r3, [sp, #4]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	9300      	str	r3, [sp, #0]
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	68fa      	ldr	r2, [r7, #12]
 8000aba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <read_page_spi+0x48>)
 8000ac0:	f001 fac0 	bl	8002044 <spi_read_data>
}
 8000ac4:	bf00      	nop
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ace:	b002      	add	sp, #8
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	2000000f 	.word	0x2000000f

08000ad8 <read_manufacturer_id>:

void read_manufacturer_id(uint8_t manu[2], SPI_HandleTypeDef *hspi, GPIO_Config config) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	; 0x28
 8000adc:	af04      	add	r7, sp, #16
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	4639      	mov	r1, r7
 8000ae4:	e881 000c 	stmia.w	r1, {r2, r3}

	// Read the status register to ensure no write is currently in progress
	check_busy(hspi, config, BSY_TIMEOUT_MS);
 8000ae8:	2305      	movs	r3, #5
 8000aea:	463a      	mov	r2, r7
 8000aec:	ca06      	ldmia	r2, {r1, r2}
 8000aee:	68b8      	ldr	r0, [r7, #8]
 8000af0:	f7ff fe5e 	bl	80007b0 <check_busy>

	// Read the entire contents of a page starting from the given address
	uint8_t addr = 0x00;
 8000af4:	2300      	movs	r3, #0
 8000af6:	75fb      	strb	r3, [r7, #23]
	spi_read_data(&FLASH_READ_MANU, 2, manu, hspi, addr, config.GPIOx, config.GPIO_Pin);
 8000af8:	7dfb      	ldrb	r3, [r7, #23]
 8000afa:	683a      	ldr	r2, [r7, #0]
 8000afc:	88b9      	ldrh	r1, [r7, #4]
 8000afe:	9102      	str	r1, [sp, #8]
 8000b00:	9201      	str	r2, [sp, #4]
 8000b02:	9300      	str	r3, [sp, #0]
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	68fa      	ldr	r2, [r7, #12]
 8000b08:	2102      	movs	r1, #2
 8000b0a:	4803      	ldr	r0, [pc, #12]	; (8000b18 <read_manufacturer_id+0x40>)
 8000b0c:	f001 fa9a 	bl	8002044 <spi_read_data>
}
 8000b10:	bf00      	nop
 8000b12:	3718      	adds	r7, #24
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000010 	.word	0x20000010

08000b1c <create_GPIO_Config>:
 */

#include "gpio_struct.h"

// Function to initialize the GPIO_Config struct
GPIO_Config create_GPIO_Config(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8000b1c:	b480      	push	{r7}
 8000b1e:	b087      	sub	sp, #28
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	4613      	mov	r3, r2
 8000b28:	80fb      	strh	r3, [r7, #6]
    GPIO_Config new_config;
    new_config.GPIOx = GPIOx;
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	613b      	str	r3, [r7, #16]
    new_config.GPIO_Pin = GPIO_Pin;
 8000b2e:	88fb      	ldrh	r3, [r7, #6]
 8000b30:	82bb      	strh	r3, [r7, #20]
    return new_config;
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	461a      	mov	r2, r3
 8000b36:	f107 0310 	add.w	r3, r7, #16
 8000b3a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000b3e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000b42:	68f8      	ldr	r0, [r7, #12]
 8000b44:	371c      	adds	r7, #28
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <i2c_read_reg>:
 *      Author: aidencontini
 */

#include "i2c_driver.h"

HAL_StatusTypeDef i2c_read_reg(I2C_HandleTypeDef* hi2c, uint8_t* data_ptr, uint8_t dev_addr, uint8_t* register_addr) {
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b088      	sub	sp, #32
 8000b52:	af02      	add	r7, sp, #8
 8000b54:	60f8      	str	r0, [r7, #12]
 8000b56:	60b9      	str	r1, [r7, #8]
 8000b58:	603b      	str	r3, [r7, #0]
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(hi2c, (dev_addr << 1) & 0xFE, register_addr, 1, I2C_TIMEOUT_SML);
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	b299      	uxth	r1, r3
 8000b68:	2301      	movs	r3, #1
 8000b6a:	9300      	str	r3, [sp, #0]
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	683a      	ldr	r2, [r7, #0]
 8000b70:	68f8      	ldr	r0, [r7, #12]
 8000b72:	f002 ff45 	bl	8003a00 <HAL_I2C_Master_Transmit>
	HAL_StatusTypeDef hal_status = HAL_I2C_Master_Receive(hi2c, (dev_addr << 1) | 0x01, data_ptr, 1, I2C_TIMEOUT_SML);
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	b21b      	sxth	r3, r3
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	b21b      	sxth	r3, r3
 8000b82:	b299      	uxth	r1, r3
 8000b84:	2301      	movs	r3, #1
 8000b86:	9300      	str	r3, [sp, #0]
 8000b88:	2301      	movs	r3, #1
 8000b8a:	68ba      	ldr	r2, [r7, #8]
 8000b8c:	68f8      	ldr	r0, [r7, #12]
 8000b8e:	f003 f835 	bl	8003bfc <HAL_I2C_Master_Receive>
 8000b92:	4603      	mov	r3, r0
 8000b94:	75fb      	strb	r3, [r7, #23]

	return hal_status;
 8000b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3718      	adds	r7, #24
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <i2c_burst_read>:

HAL_StatusTypeDef i2c_burst_read(I2C_HandleTypeDef* hi2c, uint8_t dev_addr, uint8_t register_addr, uint8_t size, uint8_t data_buffer[size]) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af02      	add	r7, sp, #8
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	4608      	mov	r0, r1
 8000baa:	4611      	mov	r1, r2
 8000bac:	461a      	mov	r2, r3
 8000bae:	4603      	mov	r3, r0
 8000bb0:	70fb      	strb	r3, [r7, #3]
 8000bb2:	460b      	mov	r3, r1
 8000bb4:	70bb      	strb	r3, [r7, #2]
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	707b      	strb	r3, [r7, #1]
	// In order to read multiple bytes, it is necessary to assert the most significant bit of the sub-address field.
	uint8_t addr = register_addr | 0x80;
 8000bba:	78bb      	ldrb	r3, [r7, #2]
 8000bbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(hi2c, (dev_addr << 1) & 0xFE, &addr, 1, I2C_TIMEOUT_SML);
 8000bc4:	78fb      	ldrb	r3, [r7, #3]
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	b299      	uxth	r1, r3
 8000bce:	f107 020e 	add.w	r2, r7, #14
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	9300      	str	r3, [sp, #0]
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f002 ff11 	bl	8003a00 <HAL_I2C_Master_Transmit>
	HAL_StatusTypeDef hal_status =  HAL_I2C_Master_Receive(hi2c, (dev_addr << 1) | 0x01, data_buffer, size, I2C_TIMEOUT_LRG);
 8000bde:	78fb      	ldrb	r3, [r7, #3]
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	b21b      	sxth	r3, r3
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	b21b      	sxth	r3, r3
 8000bea:	b299      	uxth	r1, r3
 8000bec:	787b      	ldrb	r3, [r7, #1]
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	220a      	movs	r2, #10
 8000bf2:	9200      	str	r2, [sp, #0]
 8000bf4:	69ba      	ldr	r2, [r7, #24]
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f003 f800 	bl	8003bfc <HAL_I2C_Master_Receive>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	73fb      	strb	r3, [r7, #15]

	return hal_status;
 8000c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <i2c_write_reg>:

HAL_StatusTypeDef i2c_write_reg(I2C_HandleTypeDef* hi2c, uint8_t dev_addr, uint8_t* register_addr, uint8_t data) {
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b088      	sub	sp, #32
 8000c0e:	af02      	add	r7, sp, #8
 8000c10:	60f8      	str	r0, [r7, #12]
 8000c12:	607a      	str	r2, [r7, #4]
 8000c14:	461a      	mov	r2, r3
 8000c16:	460b      	mov	r3, r1
 8000c18:	72fb      	strb	r3, [r7, #11]
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	72bb      	strb	r3, [r7, #10]
	uint8_t data_tx[2] = {*register_addr, data};
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	753b      	strb	r3, [r7, #20]
 8000c24:	7abb      	ldrb	r3, [r7, #10]
 8000c26:	757b      	strb	r3, [r7, #21]
	HAL_StatusTypeDef hal_status = HAL_I2C_Master_Transmit(hi2c, (dev_addr << 1) & 0xFE, data_tx, 2, I2C_TIMEOUT_SML);
 8000c28:	7afb      	ldrb	r3, [r7, #11]
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	b299      	uxth	r1, r3
 8000c32:	f107 0214 	add.w	r2, r7, #20
 8000c36:	2301      	movs	r3, #1
 8000c38:	9300      	str	r3, [sp, #0]
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	68f8      	ldr	r0, [r7, #12]
 8000c3e:	f002 fedf 	bl	8003a00 <HAL_I2C_Master_Transmit>
 8000c42:	4603      	mov	r3, r0
 8000c44:	75fb      	strb	r3, [r7, #23]

	return hal_status;
 8000c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3718      	adds	r7, #24
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c56:	f001 fded 	bl	8002834 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c5a:	f000 f8bf 	bl	8000ddc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c5e:	f000 fac7 	bl	80011f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c62:	f000 fa8f 	bl	8001184 <MX_DMA_Init>
  MX_I2C1_Init();
 8000c66:	f000 f91b 	bl	8000ea0 <MX_I2C1_Init>
  MX_RTC_Init();
 8000c6a:	f000 f999 	bl	8000fa0 <MX_RTC_Init>
  MX_SPI1_Init();
 8000c6e:	f000 f9bd 	bl	8000fec <MX_SPI1_Init>
  MX_TIM6_Init();
 8000c72:	f000 fa27 	bl	80010c4 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8000c76:	f000 fa5b 	bl	8001130 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8000c7a:	f000 f951 	bl	8000f20 <MX_I2C2_Init>
  MX_SPI2_Init();
 8000c7e:	f000 f9eb 	bl	8001058 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  systemInit();
 8000c82:	f000 fbab 	bl	80013dc <systemInit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Handle UART receive flag
	  if(uart2_rec_flag == 0x01) {
 8000c86:	4b44      	ldr	r3, [pc, #272]	; (8000d98 <main+0x148>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d101      	bne.n	8000c92 <main+0x42>
		  handleUART();
 8000c8e:	f000 fcdd 	bl	800164c <handleUART>
	  }

	  // Handle Timer 6 overflow flag
	  if(tim6_overflow_flag == 0x01) {
 8000c92:	4b42      	ldr	r3, [pc, #264]	; (8000d9c <main+0x14c>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d117      	bne.n	8000cca <main+0x7a>
		  HAL_GPIO_TogglePin(led_orange.GPIOx, led_orange.GPIO_Pin);		// Toggle LED
 8000c9a:	4b41      	ldr	r3, [pc, #260]	; (8000da0 <main+0x150>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a40      	ldr	r2, [pc, #256]	; (8000da0 <main+0x150>)
 8000ca0:	8892      	ldrh	r2, [r2, #4]
 8000ca2:	4611      	mov	r1, r2
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f002 fd4c 	bl	8003742 <HAL_GPIO_TogglePin>
		  readAllSensors(&hi2c1, &hi2c2, &hrtc);
 8000caa:	4a3e      	ldr	r2, [pc, #248]	; (8000da4 <main+0x154>)
 8000cac:	493e      	ldr	r1, [pc, #248]	; (8000da8 <main+0x158>)
 8000cae:	483f      	ldr	r0, [pc, #252]	; (8000dac <main+0x15c>)
 8000cb0:	f001 f856 	bl	8001d60 <readAllSensors>
		  tim6_overflow_flag = 0x00;
 8000cb4:	4b39      	ldr	r3, [pc, #228]	; (8000d9c <main+0x14c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(led_orange.GPIOx, led_orange.GPIO_Pin);		// Toggle LED
 8000cba:	4b39      	ldr	r3, [pc, #228]	; (8000da0 <main+0x150>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a38      	ldr	r2, [pc, #224]	; (8000da0 <main+0x150>)
 8000cc0:	8892      	ldrh	r2, [r2, #4]
 8000cc2:	4611      	mov	r1, r2
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f002 fd3c 	bl	8003742 <HAL_GPIO_TogglePin>
	  }

	  // Write data to flash when buffer is full
	  if(byte_tracker > (PAGE_SIZE - READ_SIZE)) {
 8000cca:	4b39      	ldr	r3, [pc, #228]	; (8000db0 <main+0x160>)
 8000ccc:	881b      	ldrh	r3, [r3, #0]
 8000cce:	2bec      	cmp	r3, #236	; 0xec
 8000cd0:	d952      	bls.n	8000d78 <main+0x128>
		  GPIO_PinState flight_mode = HAL_GPIO_ReadPin(jmp_flight.GPIOx, jmp_flight.GPIO_Pin);
 8000cd2:	4b38      	ldr	r3, [pc, #224]	; (8000db4 <main+0x164>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a37      	ldr	r2, [pc, #220]	; (8000db4 <main+0x164>)
 8000cd8:	8892      	ldrh	r2, [r2, #4]
 8000cda:	4611      	mov	r1, r2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f002 fcff 	bl	80036e0 <HAL_GPIO_ReadPin>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	71fb      	strb	r3, [r7, #7]
		  if((flight_mode & !(end_of_flash)) == GPIO_PIN_SET) {
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	4a33      	ldr	r2, [pc, #204]	; (8000db8 <main+0x168>)
 8000cea:	7812      	ldrb	r2, [r2, #0]
 8000cec:	2a00      	cmp	r2, #0
 8000cee:	bf0c      	ite	eq
 8000cf0:	2201      	moveq	r2, #1
 8000cf2:	2200      	movne	r2, #0
 8000cf4:	b2d2      	uxtb	r2, r2
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d133      	bne.n	8000d64 <main+0x114>
			  HAL_GPIO_WritePin(led_green.GPIOx, led_green.GPIO_Pin, GPIO_PIN_SET);		// Toggle LED when writing data
 8000cfc:	4b2f      	ldr	r3, [pc, #188]	; (8000dbc <main+0x16c>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a2e      	ldr	r2, [pc, #184]	; (8000dbc <main+0x16c>)
 8000d02:	8891      	ldrh	r1, [r2, #4]
 8000d04:	2201      	movs	r2, #1
 8000d06:	4618      	mov	r0, r3
 8000d08:	f002 fd02 	bl	8003710 <HAL_GPIO_WritePin>

			  write_data_spi_dma(data_buffer_tx[buffer_tracker], &hspi1, next_blank_page, cs_spi1);
 8000d0c:	4b2c      	ldr	r3, [pc, #176]	; (8000dc0 <main+0x170>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	021b      	lsls	r3, r3, #8
 8000d12:	4a2c      	ldr	r2, [pc, #176]	; (8000dc4 <main+0x174>)
 8000d14:	1898      	adds	r0, r3, r2
 8000d16:	4b2c      	ldr	r3, [pc, #176]	; (8000dc8 <main+0x178>)
 8000d18:	6819      	ldr	r1, [r3, #0]
 8000d1a:	4b2c      	ldr	r3, [pc, #176]	; (8000dcc <main+0x17c>)
 8000d1c:	685a      	ldr	r2, [r3, #4]
 8000d1e:	9200      	str	r2, [sp, #0]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	460a      	mov	r2, r1
 8000d24:	492a      	ldr	r1, [pc, #168]	; (8000dd0 <main+0x180>)
 8000d26:	f7ff fdeb 	bl	8000900 <write_data_spi_dma>
			  write_data_spi_dma(data_buffer_tx[buffer_tracker], &hspi2, next_blank_page, cs_spi2);
 8000d2a:	4b25      	ldr	r3, [pc, #148]	; (8000dc0 <main+0x170>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	021b      	lsls	r3, r3, #8
 8000d30:	4a24      	ldr	r2, [pc, #144]	; (8000dc4 <main+0x174>)
 8000d32:	1898      	adds	r0, r3, r2
 8000d34:	4b24      	ldr	r3, [pc, #144]	; (8000dc8 <main+0x178>)
 8000d36:	6819      	ldr	r1, [r3, #0]
 8000d38:	4b26      	ldr	r3, [pc, #152]	; (8000dd4 <main+0x184>)
 8000d3a:	685a      	ldr	r2, [r3, #4]
 8000d3c:	9200      	str	r2, [sp, #0]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	460a      	mov	r2, r1
 8000d42:	4925      	ldr	r1, [pc, #148]	; (8000dd8 <main+0x188>)
 8000d44:	f7ff fddc 	bl	8000900 <write_data_spi_dma>
			  next_blank_page += PAGE_SIZE;
 8000d48:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <main+0x178>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000d50:	4a1d      	ldr	r2, [pc, #116]	; (8000dc8 <main+0x178>)
 8000d52:	6013      	str	r3, [r2, #0]

			  HAL_GPIO_WritePin(led_green.GPIOx, led_green.GPIO_Pin, GPIO_PIN_RESET);		// Toggle LED when writing data
 8000d54:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <main+0x16c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a18      	ldr	r2, [pc, #96]	; (8000dbc <main+0x16c>)
 8000d5a:	8891      	ldrh	r1, [r2, #4]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f002 fcd6 	bl	8003710 <HAL_GPIO_WritePin>
		  }

		// Reset the buffer trackers
		buffer_tracker = buffer_tracker ^ 0x01;
 8000d64:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <main+0x170>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	f083 0301 	eor.w	r3, r3, #1
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <main+0x170>)
 8000d70:	701a      	strb	r2, [r3, #0]
		byte_tracker = 0;
 8000d72:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <main+0x160>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	801a      	strh	r2, [r3, #0]
	  }

	  if(next_blank_page == (NUM_OF_PAGES*PAGE_SIZE)) {
 8000d78:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <main+0x178>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d80:	d181      	bne.n	8000c86 <main+0x36>
		  next_blank_page = find_next_blank_page(&hspi1, &end_of_flash, cs_spi1);
 8000d82:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <main+0x17c>)
 8000d84:	cb0c      	ldmia	r3, {r2, r3}
 8000d86:	490c      	ldr	r1, [pc, #48]	; (8000db8 <main+0x168>)
 8000d88:	4811      	ldr	r0, [pc, #68]	; (8000dd0 <main+0x180>)
 8000d8a:	f7ff fde7 	bl	800095c <find_next_blank_page>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	4a0d      	ldr	r2, [pc, #52]	; (8000dc8 <main+0x178>)
 8000d92:	6013      	str	r3, [r2, #0]
	  if(uart2_rec_flag == 0x01) {
 8000d94:	e777      	b.n	8000c86 <main+0x36>
 8000d96:	bf00      	nop
 8000d98:	2000030a 	.word	0x2000030a
 8000d9c:	2000030b 	.word	0x2000030b
 8000da0:	20000530 	.word	0x20000530
 8000da4:	200000e8 	.word	0x200000e8
 8000da8:	20000094 	.word	0x20000094
 8000dac:	20000040 	.word	0x20000040
 8000db0:	2000052c 	.word	0x2000052c
 8000db4:	20000560 	.word	0x20000560
 8000db8:	2000052e 	.word	0x2000052e
 8000dbc:	20000538 	.word	0x20000538
 8000dc0:	2000050c 	.word	0x2000050c
 8000dc4:	2000030c 	.word	0x2000030c
 8000dc8:	20000528 	.word	0x20000528
 8000dcc:	20000540 	.word	0x20000540
 8000dd0:	20000108 	.word	0x20000108
 8000dd4:	20000550 	.word	0x20000550
 8000dd8:	20000160 	.word	0x20000160

08000ddc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b094      	sub	sp, #80	; 0x50
 8000de0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de2:	f107 0320 	add.w	r3, r7, #32
 8000de6:	2230      	movs	r2, #48	; 0x30
 8000de8:	2100      	movs	r1, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f007 f8f0 	bl	8007fd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df0:	f107 030c 	add.w	r3, r7, #12
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e00:	2300      	movs	r3, #0
 8000e02:	60bb      	str	r3, [r7, #8]
 8000e04:	4b24      	ldr	r3, [pc, #144]	; (8000e98 <SystemClock_Config+0xbc>)
 8000e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e08:	4a23      	ldr	r2, [pc, #140]	; (8000e98 <SystemClock_Config+0xbc>)
 8000e0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e10:	4b21      	ldr	r3, [pc, #132]	; (8000e98 <SystemClock_Config+0xbc>)
 8000e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	4b1e      	ldr	r3, [pc, #120]	; (8000e9c <SystemClock_Config+0xc0>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e28:	4a1c      	ldr	r2, [pc, #112]	; (8000e9c <SystemClock_Config+0xc0>)
 8000e2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <SystemClock_Config+0xc0>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000e3c:	230a      	movs	r3, #10
 8000e3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e40:	2301      	movs	r3, #1
 8000e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e44:	2310      	movs	r3, #16
 8000e46:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e50:	f107 0320 	add.w	r3, r7, #32
 8000e54:	4618      	mov	r0, r3
 8000e56:	f003 fd05 	bl	8004864 <HAL_RCC_OscConfig>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000e60:	f000 fd31 	bl	80018c6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e64:	230f      	movs	r3, #15
 8000e66:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e78:	f107 030c 	add.w	r3, r7, #12
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f003 ff68 	bl	8004d54 <HAL_RCC_ClockConfig>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000e8a:	f000 fd1c 	bl	80018c6 <Error_Handler>
  }
}
 8000e8e:	bf00      	nop
 8000e90:	3750      	adds	r7, #80	; 0x50
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40007000 	.word	0x40007000

08000ea0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ea4:	4b1b      	ldr	r3, [pc, #108]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000ea6:	4a1c      	ldr	r2, [pc, #112]	; (8000f18 <MX_I2C1_Init+0x78>)
 8000ea8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000eaa:	4b1a      	ldr	r3, [pc, #104]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000eac:	4a1b      	ldr	r2, [pc, #108]	; (8000f1c <MX_I2C1_Init+0x7c>)
 8000eae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000eb0:	4b18      	ldr	r3, [pc, #96]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000eb6:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ebc:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000ebe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ec2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ec4:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000eca:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ed0:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ed6:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000edc:	480d      	ldr	r0, [pc, #52]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000ede:	f002 fc4b 	bl	8003778 <HAL_I2C_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ee8:	f000 fced 	bl	80018c6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eec:	2100      	movs	r1, #0
 8000eee:	4809      	ldr	r0, [pc, #36]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000ef0:	f003 fc3c 	bl	800476c <HAL_I2CEx_ConfigAnalogFilter>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000efa:	f000 fce4 	bl	80018c6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000efe:	2100      	movs	r1, #0
 8000f00:	4804      	ldr	r0, [pc, #16]	; (8000f14 <MX_I2C1_Init+0x74>)
 8000f02:	f003 fc6f 	bl	80047e4 <HAL_I2CEx_ConfigDigitalFilter>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000f0c:	f000 fcdb 	bl	80018c6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000040 	.word	0x20000040
 8000f18:	40005400 	.word	0x40005400
 8000f1c:	000186a0 	.word	0x000186a0

08000f20 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f24:	4b1b      	ldr	r3, [pc, #108]	; (8000f94 <MX_I2C2_Init+0x74>)
 8000f26:	4a1c      	ldr	r2, [pc, #112]	; (8000f98 <MX_I2C2_Init+0x78>)
 8000f28:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000f2a:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <MX_I2C2_Init+0x74>)
 8000f2c:	4a1b      	ldr	r2, [pc, #108]	; (8000f9c <MX_I2C2_Init+0x7c>)
 8000f2e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f30:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <MX_I2C2_Init+0x74>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000f36:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <MX_I2C2_Init+0x74>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f3c:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <MX_I2C2_Init+0x74>)
 8000f3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f42:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f44:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <MX_I2C2_Init+0x74>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000f4a:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <MX_I2C2_Init+0x74>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f50:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <MX_I2C2_Init+0x74>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f56:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <MX_I2C2_Init+0x74>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f5c:	480d      	ldr	r0, [pc, #52]	; (8000f94 <MX_I2C2_Init+0x74>)
 8000f5e:	f002 fc0b 	bl	8003778 <HAL_I2C_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000f68:	f000 fcad 	bl	80018c6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4809      	ldr	r0, [pc, #36]	; (8000f94 <MX_I2C2_Init+0x74>)
 8000f70:	f003 fbfc 	bl	800476c <HAL_I2CEx_ConfigAnalogFilter>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000f7a:	f000 fca4 	bl	80018c6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4804      	ldr	r0, [pc, #16]	; (8000f94 <MX_I2C2_Init+0x74>)
 8000f82:	f003 fc2f 	bl	80047e4 <HAL_I2CEx_ConfigDigitalFilter>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000f8c:	f000 fc9b 	bl	80018c6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000094 	.word	0x20000094
 8000f98:	40005800 	.word	0x40005800
 8000f9c:	000186a0 	.word	0x000186a0

08000fa0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <MX_RTC_Init+0x44>)
 8000fa6:	4a10      	ldr	r2, [pc, #64]	; (8000fe8 <MX_RTC_Init+0x48>)
 8000fa8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000faa:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <MX_RTC_Init+0x44>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <MX_RTC_Init+0x44>)
 8000fb2:	227f      	movs	r2, #127	; 0x7f
 8000fb4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000fb6:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <MX_RTC_Init+0x44>)
 8000fb8:	22ff      	movs	r2, #255	; 0xff
 8000fba:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000fbc:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <MX_RTC_Init+0x44>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000fc2:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <MX_RTC_Init+0x44>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000fc8:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <MX_RTC_Init+0x44>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000fce:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <MX_RTC_Init+0x44>)
 8000fd0:	f004 fa60 	bl	8005494 <HAL_RTC_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000fda:	f000 fc74 	bl	80018c6 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200000e8 	.word	0x200000e8
 8000fe8:	40002800 	.word	0x40002800

08000fec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ff0:	4b17      	ldr	r3, [pc, #92]	; (8001050 <MX_SPI1_Init+0x64>)
 8000ff2:	4a18      	ldr	r2, [pc, #96]	; (8001054 <MX_SPI1_Init+0x68>)
 8000ff4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ff6:	4b16      	ldr	r3, [pc, #88]	; (8001050 <MX_SPI1_Init+0x64>)
 8000ff8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ffc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ffe:	4b14      	ldr	r3, [pc, #80]	; (8001050 <MX_SPI1_Init+0x64>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <MX_SPI1_Init+0x64>)
 8001006:	2200      	movs	r2, #0
 8001008:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <MX_SPI1_Init+0x64>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001010:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <MX_SPI1_Init+0x64>)
 8001012:	2200      	movs	r2, #0
 8001014:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <MX_SPI1_Init+0x64>)
 8001018:	f44f 7200 	mov.w	r2, #512	; 0x200
 800101c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <MX_SPI1_Init+0x64>)
 8001020:	2200      	movs	r2, #0
 8001022:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001024:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <MX_SPI1_Init+0x64>)
 8001026:	2200      	movs	r2, #0
 8001028:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <MX_SPI1_Init+0x64>)
 800102c:	2200      	movs	r2, #0
 800102e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001030:	4b07      	ldr	r3, [pc, #28]	; (8001050 <MX_SPI1_Init+0x64>)
 8001032:	2200      	movs	r2, #0
 8001034:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <MX_SPI1_Init+0x64>)
 8001038:	220a      	movs	r2, #10
 800103a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800103c:	4804      	ldr	r0, [pc, #16]	; (8001050 <MX_SPI1_Init+0x64>)
 800103e:	f004 fd35 	bl	8005aac <HAL_SPI_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001048:	f000 fc3d 	bl	80018c6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000108 	.word	0x20000108
 8001054:	40013000 	.word	0x40013000

08001058 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800105c:	4b17      	ldr	r3, [pc, #92]	; (80010bc <MX_SPI2_Init+0x64>)
 800105e:	4a18      	ldr	r2, [pc, #96]	; (80010c0 <MX_SPI2_Init+0x68>)
 8001060:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001062:	4b16      	ldr	r3, [pc, #88]	; (80010bc <MX_SPI2_Init+0x64>)
 8001064:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001068:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800106a:	4b14      	ldr	r3, [pc, #80]	; (80010bc <MX_SPI2_Init+0x64>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001070:	4b12      	ldr	r3, [pc, #72]	; (80010bc <MX_SPI2_Init+0x64>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001076:	4b11      	ldr	r3, [pc, #68]	; (80010bc <MX_SPI2_Init+0x64>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800107c:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <MX_SPI2_Init+0x64>)
 800107e:	2200      	movs	r2, #0
 8001080:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <MX_SPI2_Init+0x64>)
 8001084:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001088:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800108a:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <MX_SPI2_Init+0x64>)
 800108c:	2200      	movs	r2, #0
 800108e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001090:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <MX_SPI2_Init+0x64>)
 8001092:	2200      	movs	r2, #0
 8001094:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <MX_SPI2_Init+0x64>)
 8001098:	2200      	movs	r2, #0
 800109a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800109c:	4b07      	ldr	r3, [pc, #28]	; (80010bc <MX_SPI2_Init+0x64>)
 800109e:	2200      	movs	r2, #0
 80010a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <MX_SPI2_Init+0x64>)
 80010a4:	220a      	movs	r2, #10
 80010a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010a8:	4804      	ldr	r0, [pc, #16]	; (80010bc <MX_SPI2_Init+0x64>)
 80010aa:	f004 fcff 	bl	8005aac <HAL_SPI_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80010b4:	f000 fc07 	bl	80018c6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000160 	.word	0x20000160
 80010c0:	40003800 	.word	0x40003800

080010c4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ca:	463b      	mov	r3, r7
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <MX_TIM6_Init+0x64>)
 80010d4:	4a15      	ldr	r2, [pc, #84]	; (800112c <MX_TIM6_Init+0x68>)
 80010d6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 80010d8:	4b13      	ldr	r3, [pc, #76]	; (8001128 <MX_TIM6_Init+0x64>)
 80010da:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80010de:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e0:	4b11      	ldr	r3, [pc, #68]	; (8001128 <MX_TIM6_Init+0x64>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 40;
 80010e6:	4b10      	ldr	r3, [pc, #64]	; (8001128 <MX_TIM6_Init+0x64>)
 80010e8:	2228      	movs	r2, #40	; 0x28
 80010ea:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ec:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <MX_TIM6_Init+0x64>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80010f2:	480d      	ldr	r0, [pc, #52]	; (8001128 <MX_TIM6_Init+0x64>)
 80010f4:	f005 fbf8 	bl	80068e8 <HAL_TIM_Base_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80010fe:	f000 fbe2 	bl	80018c6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001102:	2300      	movs	r3, #0
 8001104:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800110a:	463b      	mov	r3, r7
 800110c:	4619      	mov	r1, r3
 800110e:	4806      	ldr	r0, [pc, #24]	; (8001128 <MX_TIM6_Init+0x64>)
 8001110:	f005 fe78 	bl	8006e04 <HAL_TIMEx_MasterConfigSynchronization>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800111a:	f000 fbd4 	bl	80018c6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000278 	.word	0x20000278
 800112c:	40001000 	.word	0x40001000

08001130 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <MX_USART2_UART_Init+0x4c>)
 8001136:	4a12      	ldr	r2, [pc, #72]	; (8001180 <MX_USART2_UART_Init+0x50>)
 8001138:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800113a:	4b10      	ldr	r3, [pc, #64]	; (800117c <MX_USART2_UART_Init+0x4c>)
 800113c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001140:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <MX_USART2_UART_Init+0x4c>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <MX_USART2_UART_Init+0x4c>)
 800114a:	2200      	movs	r2, #0
 800114c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800114e:	4b0b      	ldr	r3, [pc, #44]	; (800117c <MX_USART2_UART_Init+0x4c>)
 8001150:	2200      	movs	r2, #0
 8001152:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001154:	4b09      	ldr	r3, [pc, #36]	; (800117c <MX_USART2_UART_Init+0x4c>)
 8001156:	220c      	movs	r2, #12
 8001158:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800115a:	4b08      	ldr	r3, [pc, #32]	; (800117c <MX_USART2_UART_Init+0x4c>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <MX_USART2_UART_Init+0x4c>)
 8001162:	2200      	movs	r2, #0
 8001164:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001166:	4805      	ldr	r0, [pc, #20]	; (800117c <MX_USART2_UART_Init+0x4c>)
 8001168:	f005 fedc 	bl	8006f24 <HAL_UART_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001172:	f000 fba8 	bl	80018c6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200002c0 	.word	0x200002c0
 8001180:	40004400 	.word	0x40004400

08001184 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	4b17      	ldr	r3, [pc, #92]	; (80011ec <MX_DMA_Init+0x68>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a16      	ldr	r2, [pc, #88]	; (80011ec <MX_DMA_Init+0x68>)
 8001194:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b14      	ldr	r3, [pc, #80]	; (80011ec <MX_DMA_Init+0x68>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	603b      	str	r3, [r7, #0]
 80011aa:	4b10      	ldr	r3, [pc, #64]	; (80011ec <MX_DMA_Init+0x68>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a0f      	ldr	r2, [pc, #60]	; (80011ec <MX_DMA_Init+0x68>)
 80011b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <MX_DMA_Init+0x68>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2100      	movs	r1, #0
 80011c6:	200f      	movs	r0, #15
 80011c8:	f001 fca5 	bl	8002b16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80011cc:	200f      	movs	r0, #15
 80011ce:	f001 fcbe 	bl	8002b4e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2100      	movs	r1, #0
 80011d6:	203b      	movs	r0, #59	; 0x3b
 80011d8:	f001 fc9d 	bl	8002b16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80011dc:	203b      	movs	r0, #59	; 0x3b
 80011de:	f001 fcb6 	bl	8002b4e <HAL_NVIC_EnableIRQ>

}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800

080011f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	; 0x28
 80011f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	4b61      	ldr	r3, [pc, #388]	; (8001390 <MX_GPIO_Init+0x1a0>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a60      	ldr	r2, [pc, #384]	; (8001390 <MX_GPIO_Init+0x1a0>)
 8001210:	f043 0304 	orr.w	r3, r3, #4
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b5e      	ldr	r3, [pc, #376]	; (8001390 <MX_GPIO_Init+0x1a0>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0304 	and.w	r3, r3, #4
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	4b5a      	ldr	r3, [pc, #360]	; (8001390 <MX_GPIO_Init+0x1a0>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a59      	ldr	r2, [pc, #356]	; (8001390 <MX_GPIO_Init+0x1a0>)
 800122c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b57      	ldr	r3, [pc, #348]	; (8001390 <MX_GPIO_Init+0x1a0>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	4b53      	ldr	r3, [pc, #332]	; (8001390 <MX_GPIO_Init+0x1a0>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a52      	ldr	r2, [pc, #328]	; (8001390 <MX_GPIO_Init+0x1a0>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b50      	ldr	r3, [pc, #320]	; (8001390 <MX_GPIO_Init+0x1a0>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	4b4c      	ldr	r3, [pc, #304]	; (8001390 <MX_GPIO_Init+0x1a0>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a4b      	ldr	r2, [pc, #300]	; (8001390 <MX_GPIO_Init+0x1a0>)
 8001264:	f043 0302 	orr.w	r3, r3, #2
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b49      	ldr	r3, [pc, #292]	; (8001390 <MX_GPIO_Init+0x1a0>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	603b      	str	r3, [r7, #0]
 800127a:	4b45      	ldr	r3, [pc, #276]	; (8001390 <MX_GPIO_Init+0x1a0>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a44      	ldr	r2, [pc, #272]	; (8001390 <MX_GPIO_Init+0x1a0>)
 8001280:	f043 0308 	orr.w	r3, r3, #8
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b42      	ldr	r3, [pc, #264]	; (8001390 <MX_GPIO_Init+0x1a0>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0308 	and.w	r3, r3, #8
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_WP_GPIO_Port, SPI2_WP_Pin, GPIO_PIN_RESET);
 8001292:	2200      	movs	r2, #0
 8001294:	2101      	movs	r1, #1
 8001296:	483f      	ldr	r0, [pc, #252]	; (8001394 <MX_GPIO_Init+0x1a4>)
 8001298:	f002 fa3a 	bl	8003710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_WP_GPIO_Port, SPI1_WP_Pin, GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	2110      	movs	r1, #16
 80012a0:	483d      	ldr	r0, [pc, #244]	; (8001398 <MX_GPIO_Init+0x1a8>)
 80012a2:	f002 fa35 	bl	8003710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	f44f 41a1 	mov.w	r1, #20608	; 0x5080
 80012ac:	483b      	ldr	r0, [pc, #236]	; (800139c <MX_GPIO_Init+0x1ac>)
 80012ae:	f002 fa2f 	bl	8003710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2104      	movs	r1, #4
 80012b6:	483a      	ldr	r0, [pc, #232]	; (80013a0 <MX_GPIO_Init+0x1b0>)
 80012b8:	f002 fa2a 	bl	8003710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI2_WP_Pin */
  GPIO_InitStruct.Pin = SPI2_WP_Pin;
 80012bc:	2301      	movs	r3, #1
 80012be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c0:	2301      	movs	r3, #1
 80012c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012c4:	2301      	movs	r3, #1
 80012c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c8:	2300      	movs	r3, #0
 80012ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_WP_GPIO_Port, &GPIO_InitStruct);
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	4619      	mov	r1, r3
 80012d2:	4830      	ldr	r0, [pc, #192]	; (8001394 <MX_GPIO_Init+0x1a4>)
 80012d4:	f002 f858 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_WP_Pin */
  GPIO_InitStruct.Pin = SPI1_WP_Pin;
 80012d8:	2310      	movs	r3, #16
 80012da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012dc:	2301      	movs	r3, #1
 80012de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012e0:	2301      	movs	r3, #1
 80012e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e4:	2300      	movs	r3, #0
 80012e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_WP_GPIO_Port, &GPIO_InitStruct);
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	4619      	mov	r1, r3
 80012ee:	482a      	ldr	r0, [pc, #168]	; (8001398 <MX_GPIO_Init+0x1a8>)
 80012f0:	f002 f84a 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pin : JMP_Flight_Pin */
  GPIO_InitStruct.Pin = JMP_Flight_Pin;
 80012f4:	2302      	movs	r3, #2
 80012f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012fc:	2302      	movs	r3, #2
 80012fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(JMP_Flight_GPIO_Port, &GPIO_InitStruct);
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	4619      	mov	r1, r3
 8001306:	4825      	ldr	r0, [pc, #148]	; (800139c <MX_GPIO_Init+0x1ac>)
 8001308:	f002 f83e 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 800130c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001310:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001312:	2301      	movs	r3, #1
 8001314:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001316:	2301      	movs	r3, #1
 8001318:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131a:	2300      	movs	r3, #0
 800131c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	4619      	mov	r1, r3
 8001324:	481d      	ldr	r0, [pc, #116]	; (800139c <MX_GPIO_Init+0x1ac>)
 8001326:	f002 f82f 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 800132a:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800132e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001330:	2301      	movs	r3, #1
 8001332:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001334:	2302      	movs	r3, #2
 8001336:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	2300      	movs	r3, #0
 800133a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	4619      	mov	r1, r3
 8001342:	4816      	ldr	r0, [pc, #88]	; (800139c <MX_GPIO_Init+0x1ac>)
 8001344:	f002 f820 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001348:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800134c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001356:	2303      	movs	r3, #3
 8001358:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800135a:	2309      	movs	r3, #9
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	4619      	mov	r1, r3
 8001364:	480c      	ldr	r0, [pc, #48]	; (8001398 <MX_GPIO_Init+0x1a8>)
 8001366:	f002 f80f 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800136a:	2304      	movs	r3, #4
 800136c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136e:	2301      	movs	r3, #1
 8001370:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4619      	mov	r1, r3
 8001380:	4807      	ldr	r0, [pc, #28]	; (80013a0 <MX_GPIO_Init+0x1b0>)
 8001382:	f002 f801 	bl	8003388 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001386:	bf00      	nop
 8001388:	3728      	adds	r7, #40	; 0x28
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40023800 	.word	0x40023800
 8001394:	40020800 	.word	0x40020800
 8001398:	40020000 	.word	0x40020000
 800139c:	40020400 	.word	0x40020400
 80013a0:	40020c00 	.word	0x40020c00

080013a4 <clean_data_buffer>:

/* USER CODE BEGIN 4 */
void clean_data_buffer(uint16_t array_size, uint8_t data_array[array_size]) {
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	6039      	str	r1, [r7, #0]
 80013ae:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < array_size; ++i) {
 80013b0:	2300      	movs	r3, #0
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	e007      	b.n	80013c6 <clean_data_buffer+0x22>
    	data_array[i] = 0xFF;  // Initialize each element to 0xFF
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	4413      	add	r3, r2
 80013bc:	22ff      	movs	r2, #255	; 0xff
 80013be:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < array_size; ++i) {
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	3301      	adds	r3, #1
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	88fb      	ldrh	r3, [r7, #6]
 80013c8:	68fa      	ldr	r2, [r7, #12]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	dbf3      	blt.n	80013b6 <clean_data_buffer+0x12>
    }
}
 80013ce:	bf00      	nop
 80013d0:	bf00      	nop
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <systemInit>:

void systemInit() {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
	gpio_set_config();
 80013e2:	f000 f8b9 	bl	8001558 <gpio_set_config>

	HAL_GPIO_WritePin(led_orange.GPIOx, led_orange.GPIO_Pin, GPIO_PIN_RESET);	// Turn LED off
 80013e6:	4b47      	ldr	r3, [pc, #284]	; (8001504 <systemInit+0x128>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a46      	ldr	r2, [pc, #280]	; (8001504 <systemInit+0x128>)
 80013ec:	8891      	ldrh	r1, [r2, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	4618      	mov	r0, r3
 80013f2:	f002 f98d 	bl	8003710 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(cs_spi1.GPIOx, cs_spi1.GPIO_Pin, GPIO_PIN_SET);		// SET SPI CS High to disable bus 1
 80013f6:	4b44      	ldr	r3, [pc, #272]	; (8001508 <systemInit+0x12c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a43      	ldr	r2, [pc, #268]	; (8001508 <systemInit+0x12c>)
 80013fc:	8891      	ldrh	r1, [r2, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	4618      	mov	r0, r3
 8001402:	f002 f985 	bl	8003710 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(cs_spi2.GPIOx, cs_spi2.GPIO_Pin, GPIO_PIN_SET);		// SET SPI CS High to disable bus 2
 8001406:	4b41      	ldr	r3, [pc, #260]	; (800150c <systemInit+0x130>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a40      	ldr	r2, [pc, #256]	; (800150c <systemInit+0x130>)
 800140c:	8891      	ldrh	r1, [r2, #4]
 800140e:	2201      	movs	r2, #1
 8001410:	4618      	mov	r0, r3
 8001412:	f002 f97d 	bl	8003710 <HAL_GPIO_WritePin>

	// Clean the data buffer and set all values to 0xFF
	next_blank_page = 0;
 8001416:	4b3e      	ldr	r3, [pc, #248]	; (8001510 <systemInit+0x134>)
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]

	clean_data_buffer(PAGE_SIZE, data_buffer_tx[0]);
 800141c:	493d      	ldr	r1, [pc, #244]	; (8001514 <systemInit+0x138>)
 800141e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001422:	f7ff ffbf 	bl	80013a4 <clean_data_buffer>
	clean_data_buffer(PAGE_SIZE, data_buffer_tx[1]);
 8001426:	493c      	ldr	r1, [pc, #240]	; (8001518 <systemInit+0x13c>)
 8001428:	f44f 7080 	mov.w	r0, #256	; 0x100
 800142c:	f7ff ffba 	bl	80013a4 <clean_data_buffer>

	for (uint8_t i = 0; i < 6; i++) {
 8001430:	2300      	movs	r3, #0
 8001432:	73fb      	strb	r3, [r7, #15]
 8001434:	e00e      	b.n	8001454 <systemInit+0x78>
		accel_data[i] = 0x00;
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	4a38      	ldr	r2, [pc, #224]	; (800151c <systemInit+0x140>)
 800143a:	2100      	movs	r1, #0
 800143c:	54d1      	strb	r1, [r2, r3]
		bme280_data_1[i] = 0x00;
 800143e:	7bfb      	ldrb	r3, [r7, #15]
 8001440:	4a37      	ldr	r2, [pc, #220]	; (8001520 <systemInit+0x144>)
 8001442:	2100      	movs	r1, #0
 8001444:	54d1      	strb	r1, [r2, r3]
		bme280_data_2[i] = 0x00;
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	4a36      	ldr	r2, [pc, #216]	; (8001524 <systemInit+0x148>)
 800144a:	2100      	movs	r1, #0
 800144c:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 6; i++) {
 800144e:	7bfb      	ldrb	r3, [r7, #15]
 8001450:	3301      	adds	r3, #1
 8001452:	73fb      	strb	r3, [r7, #15]
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	2b05      	cmp	r3, #5
 8001458:	d9ed      	bls.n	8001436 <systemInit+0x5a>
	}

	// Initialise the peripherals
	init_accel(&hi2c1);
 800145a:	4833      	ldr	r0, [pc, #204]	; (8001528 <systemInit+0x14c>)
 800145c:	f7ff f84c 	bl	80004f8 <init_accel>
	init_bme280(&hi2c2, 0);
 8001460:	2100      	movs	r1, #0
 8001462:	4832      	ldr	r0, [pc, #200]	; (800152c <systemInit+0x150>)
 8001464:	f7ff f88e 	bl	8000584 <init_bme280>
	init_bme280(&hi2c2, 1);
 8001468:	2101      	movs	r1, #1
 800146a:	4830      	ldr	r0, [pc, #192]	; (800152c <systemInit+0x150>)
 800146c:	f7ff f88a 	bl	8000584 <init_bme280>
	software_reset(&hspi1, cs_spi1);
 8001470:	4b25      	ldr	r3, [pc, #148]	; (8001508 <systemInit+0x12c>)
 8001472:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001476:	482e      	ldr	r0, [pc, #184]	; (8001530 <systemInit+0x154>)
 8001478:	f7ff fa1e 	bl	80008b8 <software_reset>
	software_reset(&hspi2, cs_spi2);
 800147c:	4b23      	ldr	r3, [pc, #140]	; (800150c <systemInit+0x130>)
 800147e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001482:	482c      	ldr	r0, [pc, #176]	; (8001534 <systemInit+0x158>)
 8001484:	f7ff fa18 	bl	80008b8 <software_reset>

	int next_blank_page0 = find_next_blank_page(&hspi1, &end_of_flash, cs_spi1);
 8001488:	4b1f      	ldr	r3, [pc, #124]	; (8001508 <systemInit+0x12c>)
 800148a:	cb0c      	ldmia	r3, {r2, r3}
 800148c:	492a      	ldr	r1, [pc, #168]	; (8001538 <systemInit+0x15c>)
 800148e:	4828      	ldr	r0, [pc, #160]	; (8001530 <systemInit+0x154>)
 8001490:	f7ff fa64 	bl	800095c <find_next_blank_page>
 8001494:	4603      	mov	r3, r0
 8001496:	60bb      	str	r3, [r7, #8]
	int next_blank_page1 = find_next_blank_page(&hspi2, &end_of_flash, cs_spi2);
 8001498:	4b1c      	ldr	r3, [pc, #112]	; (800150c <systemInit+0x130>)
 800149a:	cb0c      	ldmia	r3, {r2, r3}
 800149c:	4926      	ldr	r1, [pc, #152]	; (8001538 <systemInit+0x15c>)
 800149e:	4825      	ldr	r0, [pc, #148]	; (8001534 <systemInit+0x158>)
 80014a0:	f7ff fa5c 	bl	800095c <find_next_blank_page>
 80014a4:	4603      	mov	r3, r0
 80014a6:	607b      	str	r3, [r7, #4]

	// Assign the value of next_blank_page to the larger of next_blank_page0 and next_blank_page1
	next_blank_page = (next_blank_page0 > next_blank_page1) ? next_blank_page0 : next_blank_page1;
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	4293      	cmp	r3, r2
 80014ae:	bfb8      	it	lt
 80014b0:	4613      	movlt	r3, r2
 80014b2:	461a      	mov	r2, r3
 80014b4:	4b16      	ldr	r3, [pc, #88]	; (8001510 <systemInit+0x134>)
 80014b6:	601a      	str	r2, [r3, #0]

	buffer_ref = 0;
 80014b8:	4b20      	ldr	r3, [pc, #128]	; (800153c <systemInit+0x160>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	701a      	strb	r2, [r3, #0]
	byte_tracker = 0;
 80014be:	4b20      	ldr	r3, [pc, #128]	; (8001540 <systemInit+0x164>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	801a      	strh	r2, [r3, #0]
	end_of_flash = GPIO_PIN_RESET;
 80014c4:	4b1c      	ldr	r3, [pc, #112]	; (8001538 <systemInit+0x15c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	701a      	strb	r2, [r3, #0]
	uart2_rec_flag = 0;
 80014ca:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <systemInit+0x168>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]

	send_uart_hex(&huart2, systemStatus(&hspi1, &hspi2, &hi2c1, &hi2c2));
 80014d0:	4b16      	ldr	r3, [pc, #88]	; (800152c <systemInit+0x150>)
 80014d2:	4a15      	ldr	r2, [pc, #84]	; (8001528 <systemInit+0x14c>)
 80014d4:	4917      	ldr	r1, [pc, #92]	; (8001534 <systemInit+0x158>)
 80014d6:	4816      	ldr	r0, [pc, #88]	; (8001530 <systemInit+0x154>)
 80014d8:	f000 f9fa 	bl	80018d0 <systemStatus>
 80014dc:	4603      	mov	r3, r0
 80014de:	4619      	mov	r1, r3
 80014e0:	4819      	ldr	r0, [pc, #100]	; (8001548 <systemInit+0x16c>)
 80014e2:	f001 f968 	bl	80027b6 <send_uart_hex>

	// Initiate clocks, interrupts and DMA
	HAL_UART_Receive_IT(&huart2, UARTRxData, 2);
 80014e6:	2202      	movs	r2, #2
 80014e8:	4918      	ldr	r1, [pc, #96]	; (800154c <systemInit+0x170>)
 80014ea:	4817      	ldr	r0, [pc, #92]	; (8001548 <systemInit+0x16c>)
 80014ec:	f005 fdf5 	bl	80070da <HAL_UART_Receive_IT>
	initialise_rtc_default(&hrtc);
 80014f0:	4817      	ldr	r0, [pc, #92]	; (8001550 <systemInit+0x174>)
 80014f2:	f000 fcf3 	bl	8001edc <initialise_rtc_default>
	HAL_TIM_Base_Start_IT(&htim6);
 80014f6:	4817      	ldr	r0, [pc, #92]	; (8001554 <systemInit+0x178>)
 80014f8:	f005 fa46 	bl	8006988 <HAL_TIM_Base_Start_IT>
}
 80014fc:	bf00      	nop
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000530 	.word	0x20000530
 8001508:	20000540 	.word	0x20000540
 800150c:	20000550 	.word	0x20000550
 8001510:	20000528 	.word	0x20000528
 8001514:	2000030c 	.word	0x2000030c
 8001518:	2000040c 	.word	0x2000040c
 800151c:	20000510 	.word	0x20000510
 8001520:	20000518 	.word	0x20000518
 8001524:	20000520 	.word	0x20000520
 8001528:	20000040 	.word	0x20000040
 800152c:	20000094 	.word	0x20000094
 8001530:	20000108 	.word	0x20000108
 8001534:	20000160 	.word	0x20000160
 8001538:	2000052e 	.word	0x2000052e
 800153c:	20000526 	.word	0x20000526
 8001540:	2000052c 	.word	0x2000052c
 8001544:	2000030a 	.word	0x2000030a
 8001548:	200002c0 	.word	0x200002c0
 800154c:	20000308 	.word	0x20000308
 8001550:	200000e8 	.word	0x200000e8
 8001554:	20000278 	.word	0x20000278

08001558 <gpio_set_config>:

void gpio_set_config() {
 8001558:	b590      	push	{r4, r7, lr}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
	// Orange LED (Heartbeat LED)
	led_orange = create_GPIO_Config(GPIOB, GPIO_PIN_14);
 800155e:	4c30      	ldr	r4, [pc, #192]	; (8001620 <gpio_set_config+0xc8>)
 8001560:	463b      	mov	r3, r7
 8001562:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001566:	492f      	ldr	r1, [pc, #188]	; (8001624 <gpio_set_config+0xcc>)
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff fad7 	bl	8000b1c <create_GPIO_Config>
 800156e:	4622      	mov	r2, r4
 8001570:	463b      	mov	r3, r7
 8001572:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001576:	e882 0003 	stmia.w	r2, {r0, r1}

	// Green LED (Hard Drive LED)
	led_green = create_GPIO_Config(GPIOB, GPIO_PIN_7);
 800157a:	4c2b      	ldr	r4, [pc, #172]	; (8001628 <gpio_set_config+0xd0>)
 800157c:	463b      	mov	r3, r7
 800157e:	2280      	movs	r2, #128	; 0x80
 8001580:	4928      	ldr	r1, [pc, #160]	; (8001624 <gpio_set_config+0xcc>)
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff faca 	bl	8000b1c <create_GPIO_Config>
 8001588:	4622      	mov	r2, r4
 800158a:	463b      	mov	r3, r7
 800158c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001590:	e882 0003 	stmia.w	r2, {r0, r1}

	// SPI Flash 0 CS and WP
	cs_spi1 = create_GPIO_Config(GPIOD, GPIO_PIN_2);		// Change for SRAD
 8001594:	4c25      	ldr	r4, [pc, #148]	; (800162c <gpio_set_config+0xd4>)
 8001596:	463b      	mov	r3, r7
 8001598:	2204      	movs	r2, #4
 800159a:	4925      	ldr	r1, [pc, #148]	; (8001630 <gpio_set_config+0xd8>)
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff fabd 	bl	8000b1c <create_GPIO_Config>
 80015a2:	4622      	mov	r2, r4
 80015a4:	463b      	mov	r3, r7
 80015a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015aa:	e882 0003 	stmia.w	r2, {r0, r1}
	wp_spi1 = create_GPIO_Config(GPIOA, GPIO_PIN_4);
 80015ae:	4c21      	ldr	r4, [pc, #132]	; (8001634 <gpio_set_config+0xdc>)
 80015b0:	463b      	mov	r3, r7
 80015b2:	2210      	movs	r2, #16
 80015b4:	4920      	ldr	r1, [pc, #128]	; (8001638 <gpio_set_config+0xe0>)
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff fab0 	bl	8000b1c <create_GPIO_Config>
 80015bc:	4622      	mov	r2, r4
 80015be:	463b      	mov	r3, r7
 80015c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015c4:	e882 0003 	stmia.w	r2, {r0, r1}

	// SPI Flash 1 CS and WP
	cs_spi2 = create_GPIO_Config(GPIOB, GPIO_PIN_12);		// Change for SRAD
 80015c8:	4c1c      	ldr	r4, [pc, #112]	; (800163c <gpio_set_config+0xe4>)
 80015ca:	463b      	mov	r3, r7
 80015cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015d0:	4914      	ldr	r1, [pc, #80]	; (8001624 <gpio_set_config+0xcc>)
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff faa2 	bl	8000b1c <create_GPIO_Config>
 80015d8:	4622      	mov	r2, r4
 80015da:	463b      	mov	r3, r7
 80015dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015e0:	e882 0003 	stmia.w	r2, {r0, r1}
	wp_spi2 = create_GPIO_Config(GPIOC, GPIO_PIN_0);
 80015e4:	4c16      	ldr	r4, [pc, #88]	; (8001640 <gpio_set_config+0xe8>)
 80015e6:	463b      	mov	r3, r7
 80015e8:	2201      	movs	r2, #1
 80015ea:	4916      	ldr	r1, [pc, #88]	; (8001644 <gpio_set_config+0xec>)
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff fa95 	bl	8000b1c <create_GPIO_Config>
 80015f2:	4622      	mov	r2, r4
 80015f4:	463b      	mov	r3, r7
 80015f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015fa:	e882 0003 	stmia.w	r2, {r0, r1}

	// Flight Jumper GPIO Input
	jmp_flight = create_GPIO_Config(GPIOB, GPIO_PIN_1);
 80015fe:	4c12      	ldr	r4, [pc, #72]	; (8001648 <gpio_set_config+0xf0>)
 8001600:	463b      	mov	r3, r7
 8001602:	2202      	movs	r2, #2
 8001604:	4907      	ldr	r1, [pc, #28]	; (8001624 <gpio_set_config+0xcc>)
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fa88 	bl	8000b1c <create_GPIO_Config>
 800160c:	4622      	mov	r2, r4
 800160e:	463b      	mov	r3, r7
 8001610:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001614:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	bd90      	pop	{r4, r7, pc}
 8001620:	20000530 	.word	0x20000530
 8001624:	40020400 	.word	0x40020400
 8001628:	20000538 	.word	0x20000538
 800162c:	20000540 	.word	0x20000540
 8001630:	40020c00 	.word	0x40020c00
 8001634:	20000548 	.word	0x20000548
 8001638:	40020000 	.word	0x40020000
 800163c:	20000550 	.word	0x20000550
 8001640:	20000558 	.word	0x20000558
 8001644:	40020800 	.word	0x40020800
 8001648:	20000560 	.word	0x20000560

0800164c <handleUART>:

void handleUART() {
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
	UART_HandleTypeDef *huart = &huart2;
 8001652:	4b87      	ldr	r3, [pc, #540]	; (8001870 <handleUART+0x224>)
 8001654:	607b      	str	r3, [r7, #4]

	// Send Heartbeat to UART (data_rx[0] = "h")
	if (UARTRxData[0] == 0x68) {
 8001656:	4b87      	ldr	r3, [pc, #540]	; (8001874 <handleUART+0x228>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b68      	cmp	r3, #104	; 0x68
 800165c:	d10e      	bne.n	800167c <handleUART+0x30>
		heartbeatUART(huart);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 f988 	bl	8001974 <heartbeatUART>
		send_uart_hex(huart, systemStatus(&hspi1, &hspi2, &hi2c1, &hi2c2));
 8001664:	4b84      	ldr	r3, [pc, #528]	; (8001878 <handleUART+0x22c>)
 8001666:	4a85      	ldr	r2, [pc, #532]	; (800187c <handleUART+0x230>)
 8001668:	4985      	ldr	r1, [pc, #532]	; (8001880 <handleUART+0x234>)
 800166a:	4886      	ldr	r0, [pc, #536]	; (8001884 <handleUART+0x238>)
 800166c:	f000 f930 	bl	80018d0 <systemStatus>
 8001670:	4603      	mov	r3, r0
 8001672:	4619      	mov	r1, r3
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f001 f89e 	bl	80027b6 <send_uart_hex>
 800167a:	e0eb      	b.n	8001854 <handleUART+0x208>
	}

/***************************** SPI Flash ************************************************/
	// Erase specified flash chip (data_rx[0]  = "e")
	else if (UARTRxData[0] == 0x65) {
 800167c:	4b7d      	ldr	r3, [pc, #500]	; (8001874 <handleUART+0x228>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b65      	cmp	r3, #101	; 0x65
 8001682:	d11e      	bne.n	80016c2 <handleUART+0x76>
		if(decodeASCII(UARTRxData[1]) == 0) {
 8001684:	4b7b      	ldr	r3, [pc, #492]	; (8001874 <handleUART+0x228>)
 8001686:	785b      	ldrb	r3, [r3, #1]
 8001688:	4618      	mov	r0, r3
 800168a:	f000 f903 	bl	8001894 <decodeASCII>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d106      	bne.n	80016a2 <handleUART+0x56>
			eraseFlashSPI(&hspi1, huart, cs_spi1);
 8001694:	4b7c      	ldr	r3, [pc, #496]	; (8001888 <handleUART+0x23c>)
 8001696:	cb0c      	ldmia	r3, {r2, r3}
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	487a      	ldr	r0, [pc, #488]	; (8001884 <handleUART+0x238>)
 800169c:	f000 f976 	bl	800198c <eraseFlashSPI>
 80016a0:	e0d8      	b.n	8001854 <handleUART+0x208>
		} else if (decodeASCII(UARTRxData[1]) == 1) {
 80016a2:	4b74      	ldr	r3, [pc, #464]	; (8001874 <handleUART+0x228>)
 80016a4:	785b      	ldrb	r3, [r3, #1]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f000 f8f4 	bl	8001894 <decodeASCII>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	f040 80d0 	bne.w	8001854 <handleUART+0x208>
			eraseFlashSPI(&hspi2, huart, cs_spi2);
 80016b4:	4b75      	ldr	r3, [pc, #468]	; (800188c <handleUART+0x240>)
 80016b6:	cb0c      	ldmia	r3, {r2, r3}
 80016b8:	6879      	ldr	r1, [r7, #4]
 80016ba:	4871      	ldr	r0, [pc, #452]	; (8001880 <handleUART+0x234>)
 80016bc:	f000 f966 	bl	800198c <eraseFlashSPI>
 80016c0:	e0c8      	b.n	8001854 <handleUART+0x208>
		}
	}

	// Read data from specified flash chip (data_rx[0] = "r")
	else if (UARTRxData[0] == 0x72) {
 80016c2:	4b6c      	ldr	r3, [pc, #432]	; (8001874 <handleUART+0x228>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b72      	cmp	r3, #114	; 0x72
 80016c8:	d11e      	bne.n	8001708 <handleUART+0xbc>
		if(decodeASCII(UARTRxData[1]) == 0) {
 80016ca:	4b6a      	ldr	r3, [pc, #424]	; (8001874 <handleUART+0x228>)
 80016cc:	785b      	ldrb	r3, [r3, #1]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 f8e0 	bl	8001894 <decodeASCII>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d106      	bne.n	80016e8 <handleUART+0x9c>
			readFlashToUART(&hspi1, huart, cs_spi1);
 80016da:	4b6b      	ldr	r3, [pc, #428]	; (8001888 <handleUART+0x23c>)
 80016dc:	cb0c      	ldmia	r3, {r2, r3}
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	4868      	ldr	r0, [pc, #416]	; (8001884 <handleUART+0x238>)
 80016e2:	f000 f98f 	bl	8001a04 <readFlashToUART>
 80016e6:	e0b5      	b.n	8001854 <handleUART+0x208>
		} else if (decodeASCII(UARTRxData[1]) == 1) {
 80016e8:	4b62      	ldr	r3, [pc, #392]	; (8001874 <handleUART+0x228>)
 80016ea:	785b      	ldrb	r3, [r3, #1]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f000 f8d1 	bl	8001894 <decodeASCII>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	f040 80ad 	bne.w	8001854 <handleUART+0x208>
			readFlashToUART(&hspi2, huart, cs_spi2);
 80016fa:	4b64      	ldr	r3, [pc, #400]	; (800188c <handleUART+0x240>)
 80016fc:	cb0c      	ldmia	r3, {r2, r3}
 80016fe:	6879      	ldr	r1, [r7, #4]
 8001700:	485f      	ldr	r0, [pc, #380]	; (8001880 <handleUART+0x234>)
 8001702:	f000 f97f 	bl	8001a04 <readFlashToUART>
 8001706:	e0a5      	b.n	8001854 <handleUART+0x208>
		}
	}

	// Read Manufacturer over SPI (data_rx[0] = "m")
	else if (UARTRxData[0] == 0x6d) {
 8001708:	4b5a      	ldr	r3, [pc, #360]	; (8001874 <handleUART+0x228>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b6d      	cmp	r3, #109	; 0x6d
 800170e:	d11e      	bne.n	800174e <handleUART+0x102>
		if(decodeASCII(UARTRxData[1]) == 0) {
 8001710:	4b58      	ldr	r3, [pc, #352]	; (8001874 <handleUART+0x228>)
 8001712:	785b      	ldrb	r3, [r3, #1]
 8001714:	4618      	mov	r0, r3
 8001716:	f000 f8bd 	bl	8001894 <decodeASCII>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d106      	bne.n	800172e <handleUART+0xe2>
			readFlashManuSPI(&hspi1, huart, cs_spi1);
 8001720:	4b59      	ldr	r3, [pc, #356]	; (8001888 <handleUART+0x23c>)
 8001722:	cb0c      	ldmia	r3, {r2, r3}
 8001724:	6879      	ldr	r1, [r7, #4]
 8001726:	4857      	ldr	r0, [pc, #348]	; (8001884 <handleUART+0x238>)
 8001728:	f000 f9d8 	bl	8001adc <readFlashManuSPI>
 800172c:	e092      	b.n	8001854 <handleUART+0x208>
		} else if (decodeASCII(UARTRxData[1]) == 1) {
 800172e:	4b51      	ldr	r3, [pc, #324]	; (8001874 <handleUART+0x228>)
 8001730:	785b      	ldrb	r3, [r3, #1]
 8001732:	4618      	mov	r0, r3
 8001734:	f000 f8ae 	bl	8001894 <decodeASCII>
 8001738:	4603      	mov	r3, r0
 800173a:	2b01      	cmp	r3, #1
 800173c:	f040 808a 	bne.w	8001854 <handleUART+0x208>
			readFlashManuSPI(&hspi2, huart, cs_spi2);
 8001740:	4b52      	ldr	r3, [pc, #328]	; (800188c <handleUART+0x240>)
 8001742:	cb0c      	ldmia	r3, {r2, r3}
 8001744:	6879      	ldr	r1, [r7, #4]
 8001746:	484e      	ldr	r0, [pc, #312]	; (8001880 <handleUART+0x234>)
 8001748:	f000 f9c8 	bl	8001adc <readFlashManuSPI>
 800174c:	e082      	b.n	8001854 <handleUART+0x208>
		}
	}

	// Write a page over SPI (data_rx[0] = "w")
	else if (UARTRxData[0] == 0x77) {
 800174e:	4b49      	ldr	r3, [pc, #292]	; (8001874 <handleUART+0x228>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b77      	cmp	r3, #119	; 0x77
 8001754:	d11d      	bne.n	8001792 <handleUART+0x146>
		if(decodeASCII(UARTRxData[1]) == 0) {
 8001756:	4b47      	ldr	r3, [pc, #284]	; (8001874 <handleUART+0x228>)
 8001758:	785b      	ldrb	r3, [r3, #1]
 800175a:	4618      	mov	r0, r3
 800175c:	f000 f89a 	bl	8001894 <decodeASCII>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d106      	bne.n	8001774 <handleUART+0x128>
			writePageSPI_W(&hspi1, huart, cs_spi1);
 8001766:	4b48      	ldr	r3, [pc, #288]	; (8001888 <handleUART+0x23c>)
 8001768:	cb0c      	ldmia	r3, {r2, r3}
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	4845      	ldr	r0, [pc, #276]	; (8001884 <handleUART+0x238>)
 800176e:	f000 f9d5 	bl	8001b1c <writePageSPI_W>
 8001772:	e06f      	b.n	8001854 <handleUART+0x208>
		} else if (decodeASCII(UARTRxData[1]) == 1) {
 8001774:	4b3f      	ldr	r3, [pc, #252]	; (8001874 <handleUART+0x228>)
 8001776:	785b      	ldrb	r3, [r3, #1]
 8001778:	4618      	mov	r0, r3
 800177a:	f000 f88b 	bl	8001894 <decodeASCII>
 800177e:	4603      	mov	r3, r0
 8001780:	2b01      	cmp	r3, #1
 8001782:	d167      	bne.n	8001854 <handleUART+0x208>
			writePageSPI_W(&hspi2, huart, cs_spi2);
 8001784:	4b41      	ldr	r3, [pc, #260]	; (800188c <handleUART+0x240>)
 8001786:	cb0c      	ldmia	r3, {r2, r3}
 8001788:	6879      	ldr	r1, [r7, #4]
 800178a:	483d      	ldr	r0, [pc, #244]	; (8001880 <handleUART+0x234>)
 800178c:	f000 f9c6 	bl	8001b1c <writePageSPI_W>
 8001790:	e060      	b.n	8001854 <handleUART+0x208>
		}
	}

	// Software reset flash chip over SPI (data_rx[0] = "x")
	else if (UARTRxData[0] == 0x78) {
 8001792:	4b38      	ldr	r3, [pc, #224]	; (8001874 <handleUART+0x228>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b78      	cmp	r3, #120	; 0x78
 8001798:	d11d      	bne.n	80017d6 <handleUART+0x18a>
		if(decodeASCII(UARTRxData[1]) == 0) {
 800179a:	4b36      	ldr	r3, [pc, #216]	; (8001874 <handleUART+0x228>)
 800179c:	785b      	ldrb	r3, [r3, #1]
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 f878 	bl	8001894 <decodeASCII>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d106      	bne.n	80017b8 <handleUART+0x16c>
			resetSPIFlash(&hspi1, huart, cs_spi1);
 80017aa:	4b37      	ldr	r3, [pc, #220]	; (8001888 <handleUART+0x23c>)
 80017ac:	cb0c      	ldmia	r3, {r2, r3}
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	4834      	ldr	r0, [pc, #208]	; (8001884 <handleUART+0x238>)
 80017b2:	f000 fa07 	bl	8001bc4 <resetSPIFlash>
 80017b6:	e04d      	b.n	8001854 <handleUART+0x208>
		} else if (decodeASCII(UARTRxData[1]) == 1) {
 80017b8:	4b2e      	ldr	r3, [pc, #184]	; (8001874 <handleUART+0x228>)
 80017ba:	785b      	ldrb	r3, [r3, #1]
 80017bc:	4618      	mov	r0, r3
 80017be:	f000 f869 	bl	8001894 <decodeASCII>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d145      	bne.n	8001854 <handleUART+0x208>
			resetSPIFlash(&hspi2, huart, cs_spi2);
 80017c8:	4b30      	ldr	r3, [pc, #192]	; (800188c <handleUART+0x240>)
 80017ca:	cb0c      	ldmia	r3, {r2, r3}
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	482c      	ldr	r0, [pc, #176]	; (8001880 <handleUART+0x234>)
 80017d0:	f000 f9f8 	bl	8001bc4 <resetSPIFlash>
 80017d4:	e03e      	b.n	8001854 <handleUART+0x208>
		}
	}

/*********************************** I2C Accelerometer ***********************************/
	// Read Accelerometer WhoAmI (data_rx[0] = "c")
	else if (UARTRxData[0] == 0x63) {
 80017d6:	4b27      	ldr	r3, [pc, #156]	; (8001874 <handleUART+0x228>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b63      	cmp	r3, #99	; 0x63
 80017dc:	d104      	bne.n	80017e8 <handleUART+0x19c>
		checkAccelWhoAmI(&hi2c1, huart);
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	4826      	ldr	r0, [pc, #152]	; (800187c <handleUART+0x230>)
 80017e2:	f000 fa07 	bl	8001bf4 <checkAccelWhoAmI>
 80017e6:	e035      	b.n	8001854 <handleUART+0x208>
	}

	// Read the accelerometer and print to the UART[0] (data_rx [0] = "a")
	else if (UARTRxData[0] == 0x61) {
 80017e8:	4b22      	ldr	r3, [pc, #136]	; (8001874 <handleUART+0x228>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b61      	cmp	r3, #97	; 0x61
 80017ee:	d103      	bne.n	80017f8 <handleUART+0x1ac>
		accelToUART(huart);
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f000 fa13 	bl	8001c1c <accelToUART>
 80017f6:	e02d      	b.n	8001854 <handleUART+0x208>
	}

/********************************** I2C BME280 *******************************************/
	// Read the temp sensor ID and print to the UART[0] (data_rx [0]= "b")
	else if (UARTRxData[0] == 0x62) {
 80017f8:	4b1e      	ldr	r3, [pc, #120]	; (8001874 <handleUART+0x228>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b62      	cmp	r3, #98	; 0x62
 80017fe:	d10b      	bne.n	8001818 <handleUART+0x1cc>
		readTempSensorID(&hi2c2, huart, decodeASCII(UARTRxData[1]));
 8001800:	4b1c      	ldr	r3, [pc, #112]	; (8001874 <handleUART+0x228>)
 8001802:	785b      	ldrb	r3, [r3, #1]
 8001804:	4618      	mov	r0, r3
 8001806:	f000 f845 	bl	8001894 <decodeASCII>
 800180a:	4603      	mov	r3, r0
 800180c:	461a      	mov	r2, r3
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	4819      	ldr	r0, [pc, #100]	; (8001878 <handleUART+0x22c>)
 8001812:	f000 fa1f 	bl	8001c54 <readTempSensorID>
 8001816:	e01d      	b.n	8001854 <handleUART+0x208>
	}

	// Read the temp sensor calibration registers and print to the UART (data_rx[0] = "p")
	else if (UARTRxData[0] == 0x70) {
 8001818:	4b16      	ldr	r3, [pc, #88]	; (8001874 <handleUART+0x228>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b70      	cmp	r3, #112	; 0x70
 800181e:	d10b      	bne.n	8001838 <handleUART+0x1ec>
		readTempCalibration(&hi2c2, huart, decodeASCII(UARTRxData[1]));
 8001820:	4b14      	ldr	r3, [pc, #80]	; (8001874 <handleUART+0x228>)
 8001822:	785b      	ldrb	r3, [r3, #1]
 8001824:	4618      	mov	r0, r3
 8001826:	f000 f835 	bl	8001894 <decodeASCII>
 800182a:	4603      	mov	r3, r0
 800182c:	461a      	mov	r2, r3
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	4811      	ldr	r0, [pc, #68]	; (8001878 <handleUART+0x22c>)
 8001832:	f000 fa24 	bl	8001c7e <readTempCalibration>
 8001836:	e00d      	b.n	8001854 <handleUART+0x208>
	}

	// Read the temp sensor and print to the UART[0] (data_rx [0]= "t")
	else if (UARTRxData[0] == 0x74) {
 8001838:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <handleUART+0x228>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b74      	cmp	r3, #116	; 0x74
 800183e:	d109      	bne.n	8001854 <handleUART+0x208>
		readTempSensor(huart, decodeASCII(UARTRxData[1]));
 8001840:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <handleUART+0x228>)
 8001842:	785b      	ldrb	r3, [r3, #1]
 8001844:	4618      	mov	r0, r3
 8001846:	f000 f825 	bl	8001894 <decodeASCII>
 800184a:	4603      	mov	r3, r0
 800184c:	4619      	mov	r1, r3
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f000 fa4e 	bl	8001cf0 <readTempSensor>
	}

	uart2_rec_flag = 0x00;
 8001854:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <handleUART+0x244>)
 8001856:	2200      	movs	r2, #0
 8001858:	701a      	strb	r2, [r3, #0]
	UARTRxData[0] = 0x00;
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <handleUART+0x228>)
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]
	UARTRxData[1] = 0x00;
 8001860:	4b04      	ldr	r3, [pc, #16]	; (8001874 <handleUART+0x228>)
 8001862:	2200      	movs	r2, #0
 8001864:	705a      	strb	r2, [r3, #1]
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	200002c0 	.word	0x200002c0
 8001874:	20000308 	.word	0x20000308
 8001878:	20000094 	.word	0x20000094
 800187c:	20000040 	.word	0x20000040
 8001880:	20000160 	.word	0x20000160
 8001884:	20000108 	.word	0x20000108
 8001888:	20000540 	.word	0x20000540
 800188c:	20000550 	.word	0x20000550
 8001890:	2000030a 	.word	0x2000030a

08001894 <decodeASCII>:

uint8_t decodeASCII(uint8_t asciiVal) {
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	71fb      	strb	r3, [r7, #7]
	int returnVal = -1;
 800189e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018a2:	60fb      	str	r3, [r7, #12]
	if ((asciiVal >= 48) && (asciiVal <= 57)) {
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	2b2f      	cmp	r3, #47	; 0x2f
 80018a8:	d905      	bls.n	80018b6 <decodeASCII+0x22>
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	2b39      	cmp	r3, #57	; 0x39
 80018ae:	d802      	bhi.n	80018b6 <decodeASCII+0x22>
		returnVal = asciiVal - 48;
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	3b30      	subs	r3, #48	; 0x30
 80018b4:	60fb      	str	r3, [r7, #12]
	}
	return returnVal;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	b2db      	uxtb	r3, r3
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018ca:	b672      	cpsid	i
}
 80018cc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018ce:	e7fe      	b.n	80018ce <Error_Handler+0x8>

080018d0 <systemStatus>:

#include "peripheral_driver.h"
/***************************************************************************************************************
 * Generic Functions
 */
uint8_t systemStatus(SPI_HandleTypeDef *hspi1, SPI_HandleTypeDef *hspi2, I2C_HandleTypeDef* hi2c1, I2C_HandleTypeDef* hi2c2) {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
 80018dc:	603b      	str	r3, [r7, #0]
	uint8_t retVal = 0x00;
 80018de:	2300      	movs	r3, #0
 80018e0:	75fb      	strb	r3, [r7, #23]

	// Check BME280_1
	if(readBME280_id_reg(hi2c2, 1) != 0x60) {			// Expected 0x60
 80018e2:	2101      	movs	r1, #1
 80018e4:	6838      	ldr	r0, [r7, #0]
 80018e6:	f7fe fef3 	bl	80006d0 <readBME280_id_reg>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b60      	cmp	r3, #96	; 0x60
 80018ee:	d003      	beq.n	80018f8 <systemStatus+0x28>
		retVal  = retVal | 0x10;
 80018f0:	7dfb      	ldrb	r3, [r7, #23]
 80018f2:	f043 0310 	orr.w	r3, r3, #16
 80018f6:	75fb      	strb	r3, [r7, #23]
	}

	// Check BME280_0
	if(readBME280_id_reg(hi2c2, 0) != 0x60) {			// Expected 0x60
 80018f8:	2100      	movs	r1, #0
 80018fa:	6838      	ldr	r0, [r7, #0]
 80018fc:	f7fe fee8 	bl	80006d0 <readBME280_id_reg>
 8001900:	4603      	mov	r3, r0
 8001902:	2b60      	cmp	r3, #96	; 0x60
 8001904:	d003      	beq.n	800190e <systemStatus+0x3e>
		retVal  = retVal | 0x08;
 8001906:	7dfb      	ldrb	r3, [r7, #23]
 8001908:	f043 0308 	orr.w	r3, r3, #8
 800190c:	75fb      	strb	r3, [r7, #23]
	}

	// Check Accelerometer
	if(readAccel_whoami(hi2c1) != 0x32) {				// Expected 0x32
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7fe fe24 	bl	800055c <readAccel_whoami>
 8001914:	4603      	mov	r3, r0
 8001916:	2b32      	cmp	r3, #50	; 0x32
 8001918:	d003      	beq.n	8001922 <systemStatus+0x52>
		retVal  = retVal | 0x04;
 800191a:	7dfb      	ldrb	r3, [r7, #23]
 800191c:	f043 0304 	orr.w	r3, r3, #4
 8001920:	75fb      	strb	r3, [r7, #23]
	}

	// Check SPIFlash_1
	uint8_t manu[2] = {0, 0};
 8001922:	2300      	movs	r3, #0
 8001924:	82bb      	strh	r3, [r7, #20]
	read_manufacturer_id(manu, hspi2, cs_spi2);
 8001926:	4b11      	ldr	r3, [pc, #68]	; (800196c <systemStatus+0x9c>)
 8001928:	f107 0014 	add.w	r0, r7, #20
 800192c:	cb0c      	ldmia	r3, {r2, r3}
 800192e:	68b9      	ldr	r1, [r7, #8]
 8001930:	f7ff f8d2 	bl	8000ad8 <read_manufacturer_id>
	if(manu[0] != 0xEF) {								// Expected 0xEF
 8001934:	7d3b      	ldrb	r3, [r7, #20]
 8001936:	2bef      	cmp	r3, #239	; 0xef
 8001938:	d003      	beq.n	8001942 <systemStatus+0x72>
		retVal  = retVal | 0x02;
 800193a:	7dfb      	ldrb	r3, [r7, #23]
 800193c:	f043 0302 	orr.w	r3, r3, #2
 8001940:	75fb      	strb	r3, [r7, #23]
	}

	// Check SPIFlash_0
	uint8_t manu0[2] = {0, 0};
 8001942:	2300      	movs	r3, #0
 8001944:	823b      	strh	r3, [r7, #16]
	read_manufacturer_id(manu0, hspi1, cs_spi1);
 8001946:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <systemStatus+0xa0>)
 8001948:	f107 0010 	add.w	r0, r7, #16
 800194c:	cb0c      	ldmia	r3, {r2, r3}
 800194e:	68f9      	ldr	r1, [r7, #12]
 8001950:	f7ff f8c2 	bl	8000ad8 <read_manufacturer_id>
	if(manu0[0] != 0xEF) {								// Expected 0xEF
 8001954:	7c3b      	ldrb	r3, [r7, #16]
 8001956:	2bef      	cmp	r3, #239	; 0xef
 8001958:	d003      	beq.n	8001962 <systemStatus+0x92>
		retVal  = retVal | 0x01;
 800195a:	7dfb      	ldrb	r3, [r7, #23]
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	75fb      	strb	r3, [r7, #23]
	}
	return retVal;
 8001962:	7dfb      	ldrb	r3, [r7, #23]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3718      	adds	r7, #24
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20000550 	.word	0x20000550
 8001970:	20000540 	.word	0x20000540

08001974 <heartbeatUART>:

void heartbeatUART(UART_HandleTypeDef *huart) {
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
	send_uart_hex(huart, 0x51);			// Transmit the heartbeat as device ID (0x51 = Q)
 800197c:	2151      	movs	r1, #81	; 0x51
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 ff19 	bl	80027b6 <send_uart_hex>
}
 8001984:	bf00      	nop
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <eraseFlashSPI>:

/***************************************************************************************************************
 * SPI Flash Functions
 */
void eraseFlashSPI(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, GPIO_Config config) {
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	4639      	mov	r1, r7
 8001998:	e881 000c 	stmia.w	r1, {r2, r3}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);		// Activate the "write out" LED
 800199c:	2201      	movs	r2, #1
 800199e:	2180      	movs	r1, #128	; 0x80
 80019a0:	4813      	ldr	r0, [pc, #76]	; (80019f0 <eraseFlashSPI+0x64>)
 80019a2:	f001 feb5 	bl	8003710 <HAL_GPIO_WritePin>
	if (erase_chip_spi(hspi, config) == HAL_OK) {
 80019a6:	463b      	mov	r3, r7
 80019a8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f7fe ff47 	bl	8000840 <erase_chip_spi>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d10d      	bne.n	80019d4 <eraseFlashSPI+0x48>
		send_uart_string(huart, "Successful Chip Erase\r\n");
 80019b8:	490e      	ldr	r1, [pc, #56]	; (80019f4 <eraseFlashSPI+0x68>)
 80019ba:	68b8      	ldr	r0, [r7, #8]
 80019bc:	f000 fee7 	bl	800278e <send_uart_string>
		next_blank_page = find_next_blank_page(hspi, &end_of_flash, config);
 80019c0:	463b      	mov	r3, r7
 80019c2:	cb0c      	ldmia	r3, {r2, r3}
 80019c4:	490c      	ldr	r1, [pc, #48]	; (80019f8 <eraseFlashSPI+0x6c>)
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	f7fe ffc8 	bl	800095c <find_next_blank_page>
 80019cc:	4603      	mov	r3, r0
 80019ce:	4a0b      	ldr	r2, [pc, #44]	; (80019fc <eraseFlashSPI+0x70>)
 80019d0:	6013      	str	r3, [r2, #0]
 80019d2:	e003      	b.n	80019dc <eraseFlashSPI+0x50>
	} else {
		send_uart_string(huart, "Error during chip erase. Please check the connection and try again.\r\n");
 80019d4:	490a      	ldr	r1, [pc, #40]	; (8001a00 <eraseFlashSPI+0x74>)
 80019d6:	68b8      	ldr	r0, [r7, #8]
 80019d8:	f000 fed9 	bl	800278e <send_uart_string>
	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);	// Deactivate the "write out" LED
 80019dc:	2200      	movs	r2, #0
 80019de:	2180      	movs	r1, #128	; 0x80
 80019e0:	4803      	ldr	r0, [pc, #12]	; (80019f0 <eraseFlashSPI+0x64>)
 80019e2:	f001 fe95 	bl	8003710 <HAL_GPIO_WritePin>
}
 80019e6:	bf00      	nop
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40020400 	.word	0x40020400
 80019f4:	08008048 	.word	0x08008048
 80019f8:	2000052e 	.word	0x2000052e
 80019fc:	20000528 	.word	0x20000528
 8001a00:	08008060 	.word	0x08008060

08001a04 <readFlashToUART>:

void readFlashToUART(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, GPIO_Config config) {
 8001a04:	b590      	push	{r4, r7, lr}
 8001a06:	b0cb      	sub	sp, #300	; 0x12c
 8001a08:	af02      	add	r7, sp, #8
 8001a0a:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8001a0e:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 8001a12:	6020      	str	r0, [r4, #0]
 8001a14:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8001a18:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 8001a1c:	6001      	str	r1, [r0, #0]
 8001a1e:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8001a22:	f5a1 7190 	sub.w	r1, r1, #288	; 0x120
 8001a26:	e881 000c 	stmia.w	r1, {r2, r3}
	uint32_t num_of_pages = next_blank_page;
 8001a2a:	4b2a      	ldr	r3, [pc, #168]	; (8001ad4 <readFlashToUART+0xd0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	if(num_of_pages == 0) {
 8001a32:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d103      	bne.n	8001a42 <readFlashToUART+0x3e>
		num_of_pages = PAGE_SIZE;
 8001a3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a3e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	}
	num_of_pages = num_of_pages/PAGE_SIZE;
 8001a42:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001a46:	0a1b      	lsrs	r3, r3, #8
 8001a48:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	uint32_t address = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET);		// Activate the "write out" LED
 8001a52:	2201      	movs	r2, #1
 8001a54:	2180      	movs	r1, #128	; 0x80
 8001a56:	4820      	ldr	r0, [pc, #128]	; (8001ad8 <readFlashToUART+0xd4>)
 8001a58:	f001 fe5a 	bl	8003710 <HAL_GPIO_WritePin>

	for (int i = 0; i < (num_of_pages); i++) {
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001a62:	e026      	b.n	8001ab2 <readFlashToUART+0xae>
		uint8_t page[PAGE_SIZE];
		read_page_spi(page, hspi, address, config);
 8001a64:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001a68:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001a6c:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001a70:	f5a2 718a 	sub.w	r1, r2, #276	; 0x114
 8001a74:	f107 0014 	add.w	r0, r7, #20
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	9200      	str	r2, [sp, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001a82:	6809      	ldr	r1, [r1, #0]
 8001a84:	f7ff f802 	bl	8000a8c <read_page_spi>
		uart_transmit_page(huart, page);						// Transmit the data//
 8001a88:	f107 0214 	add.w	r2, r7, #20
 8001a8c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001a90:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001a94:	4611      	mov	r1, r2
 8001a96:	6818      	ldr	r0, [r3, #0]
 8001a98:	f000 fe68 	bl	800276c <uart_transmit_page>
		address += PAGE_SIZE;
 8001a9c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001aa0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001aa4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	for (int i = 0; i < (num_of_pages); i++) {
 8001aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001aac:	3301      	adds	r3, #1
 8001aae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001ab6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d8d2      	bhi.n	8001a64 <readFlashToUART+0x60>
	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);	// Deactivate the "write out" LED
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2180      	movs	r1, #128	; 0x80
 8001ac2:	4805      	ldr	r0, [pc, #20]	; (8001ad8 <readFlashToUART+0xd4>)
 8001ac4:	f001 fe24 	bl	8003710 <HAL_GPIO_WritePin>
}
 8001ac8:	bf00      	nop
 8001aca:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd90      	pop	{r4, r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000528 	.word	0x20000528
 8001ad8:	40020400 	.word	0x40020400

08001adc <readFlashManuSPI>:

void readFlashManuSPI(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, GPIO_Config config) {
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	4639      	mov	r1, r7
 8001ae8:	e881 000c 	stmia.w	r1, {r2, r3}
	uint8_t manu[2] = {0, 0};
 8001aec:	2300      	movs	r3, #0
 8001aee:	82bb      	strh	r3, [r7, #20]
	read_manufacturer_id(manu, hspi, config);
 8001af0:	f107 0014 	add.w	r0, r7, #20
 8001af4:	463b      	mov	r3, r7
 8001af6:	cb0c      	ldmia	r3, {r2, r3}
 8001af8:	68f9      	ldr	r1, [r7, #12]
 8001afa:	f7fe ffed 	bl	8000ad8 <read_manufacturer_id>
	send_uart_hex(huart, manu[0]);
 8001afe:	7d3b      	ldrb	r3, [r7, #20]
 8001b00:	4619      	mov	r1, r3
 8001b02:	68b8      	ldr	r0, [r7, #8]
 8001b04:	f000 fe57 	bl	80027b6 <send_uart_hex>
	send_uart_hex(huart, manu[1]);
 8001b08:	7d7b      	ldrb	r3, [r7, #21]
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	68b8      	ldr	r0, [r7, #8]
 8001b0e:	f000 fe52 	bl	80027b6 <send_uart_hex>
}
 8001b12:	bf00      	nop
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <writePageSPI_W>:

void writePageSPI_W(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, GPIO_Config config) {
 8001b1c:	b590      	push	{r4, r7, lr}
 8001b1e:	b0c9      	sub	sp, #292	; 0x124
 8001b20:	af02      	add	r7, sp, #8
 8001b22:	f507 748c 	add.w	r4, r7, #280	; 0x118
 8001b26:	f5a4 7486 	sub.w	r4, r4, #268	; 0x10c
 8001b2a:	6020      	str	r0, [r4, #0]
 8001b2c:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8001b30:	f5a0 7088 	sub.w	r0, r0, #272	; 0x110
 8001b34:	6001      	str	r1, [r0, #0]
 8001b36:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8001b3a:	f5a1 718c 	sub.w	r1, r1, #280	; 0x118
 8001b3e:	e881 000c 	stmia.w	r1, {r2, r3}
	uint8_t data_out[PAGE_SIZE];
	for (int i = 0; i < PAGE_SIZE; i++) {
 8001b42:	2300      	movs	r3, #0
 8001b44:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001b48:	e00d      	b.n	8001b66 <writePageSPI_W+0x4a>
		data_out[i] = 0x77;		// Make all data in the page 'w'
 8001b4a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001b4e:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 8001b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001b56:	4413      	add	r3, r2
 8001b58:	2277      	movs	r2, #119	; 0x77
 8001b5a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < PAGE_SIZE; i++) {
 8001b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001b60:	3301      	adds	r3, #1
 8001b62:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001b6a:	2bff      	cmp	r3, #255	; 0xff
 8001b6c:	dded      	ble.n	8001b4a <writePageSPI_W+0x2e>
	}
	write_data_spi_dma(data_out, hspi, next_blank_page, config);
 8001b6e:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <writePageSPI_W+0xa0>)
 8001b70:	681c      	ldr	r4, [r3, #0]
 8001b72:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001b76:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001b7a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001b7e:	f5a2 7186 	sub.w	r1, r2, #268	; 0x10c
 8001b82:	f107 0014 	add.w	r0, r7, #20
 8001b86:	685a      	ldr	r2, [r3, #4]
 8001b88:	9200      	str	r2, [sp, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4622      	mov	r2, r4
 8001b8e:	6809      	ldr	r1, [r1, #0]
 8001b90:	f7fe feb6 	bl	8000900 <write_data_spi_dma>
	next_blank_page += PAGE_SIZE;
 8001b94:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <writePageSPI_W+0xa0>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001b9c:	4a07      	ldr	r2, [pc, #28]	; (8001bbc <writePageSPI_W+0xa0>)
 8001b9e:	6013      	str	r3, [r2, #0]

	send_uart_string(huart, "Successful Page Written\r\n");
 8001ba0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001ba4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ba8:	4905      	ldr	r1, [pc, #20]	; (8001bc0 <writePageSPI_W+0xa4>)
 8001baa:	6818      	ldr	r0, [r3, #0]
 8001bac:	f000 fdef 	bl	800278e <send_uart_string>
}
 8001bb0:	bf00      	nop
 8001bb2:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd90      	pop	{r4, r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000528 	.word	0x20000528
 8001bc0:	080080a8 	.word	0x080080a8

08001bc4 <resetSPIFlash>:

void resetSPIFlash(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, GPIO_Config config) {
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	4639      	mov	r1, r7
 8001bd0:	e881 000c 	stmia.w	r1, {r2, r3}
	software_reset(hspi, config);
 8001bd4:	463b      	mov	r3, r7
 8001bd6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f7fe fe6c 	bl	80008b8 <software_reset>
	send_uart_string(huart, "Flash Chip Reset\r\n");
 8001be0:	4903      	ldr	r1, [pc, #12]	; (8001bf0 <resetSPIFlash+0x2c>)
 8001be2:	68b8      	ldr	r0, [r7, #8]
 8001be4:	f000 fdd3 	bl	800278e <send_uart_string>
}
 8001be8:	bf00      	nop
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	080080c4 	.word	0x080080c4

08001bf4 <checkAccelWhoAmI>:

/***************************************************************************************************************
 * I2C Accelerometer Functions
 */
void checkAccelWhoAmI(I2C_HandleTypeDef* hi2c, UART_HandleTypeDef *huart) {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
	uint8_t whoami = readAccel_whoami(hi2c);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7fe fcac 	bl	800055c <readAccel_whoami>
 8001c04:	4603      	mov	r3, r0
 8001c06:	73fb      	strb	r3, [r7, #15]
	send_uart_hex(huart, whoami);
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	6838      	ldr	r0, [r7, #0]
 8001c0e:	f000 fdd2 	bl	80027b6 <send_uart_hex>
}
 8001c12:	bf00      	nop
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
	...

08001c1c <accelToUART>:

void accelToUART(UART_HandleTypeDef *huart) {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 6; i++) {
 8001c24:	2300      	movs	r3, #0
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	e00a      	b.n	8001c40 <accelToUART+0x24>
		send_uart_hex(huart, accel_data[i]);
 8001c2a:	4a09      	ldr	r2, [pc, #36]	; (8001c50 <accelToUART+0x34>)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	4413      	add	r3, r2
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	4619      	mov	r1, r3
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 fdbe 	bl	80027b6 <send_uart_hex>
	for (int i = 0; i < 6; i++) {
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2b05      	cmp	r3, #5
 8001c44:	ddf1      	ble.n	8001c2a <accelToUART+0xe>
	}
}
 8001c46:	bf00      	nop
 8001c48:	bf00      	nop
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20000510 	.word	0x20000510

08001c54 <readTempSensorID>:

/***************************************************************************************************************
 * I2C BME280 Sensor Functions
 */
void readTempSensorID(I2C_HandleTypeDef* hi2c, UART_HandleTypeDef *huart, uint8_t tempNo) {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	71fb      	strb	r3, [r7, #7]
	send_uart_hex(huart, readBME280_id_reg(hi2c, tempNo));
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	4619      	mov	r1, r3
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f7fe fd32 	bl	80006d0 <readBME280_id_reg>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	4619      	mov	r1, r3
 8001c70:	68b8      	ldr	r0, [r7, #8]
 8001c72:	f000 fda0 	bl	80027b6 <send_uart_hex>
}
 8001c76:	bf00      	nop
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <readTempCalibration>:

void readTempCalibration(I2C_HandleTypeDef* hi2c, UART_HandleTypeDef *huart, uint8_t tempNo) {
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b090      	sub	sp, #64	; 0x40
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	60f8      	str	r0, [r7, #12]
 8001c86:	60b9      	str	r1, [r7, #8]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	71fb      	strb	r3, [r7, #7]
	uint8_t calibration1[25];
	uint8_t calibration2[7];
	readBME280_calib(hi2c, tempNo, calibration1, calibration2);
 8001c8c:	f107 0314 	add.w	r3, r7, #20
 8001c90:	f107 021c 	add.w	r2, r7, #28
 8001c94:	79f9      	ldrb	r1, [r7, #7]
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	f7fe fd36 	bl	8000708 <readBME280_calib>

	for (int i = 0; i < 25; i++) {
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ca0:	e00b      	b.n	8001cba <readTempCalibration+0x3c>
	  send_uart_hex(huart, calibration1[i]);
 8001ca2:	f107 021c 	add.w	r2, r7, #28
 8001ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ca8:	4413      	add	r3, r2
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	4619      	mov	r1, r3
 8001cae:	68b8      	ldr	r0, [r7, #8]
 8001cb0:	f000 fd81 	bl	80027b6 <send_uart_hex>
	for (int i = 0; i < 25; i++) {
 8001cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cbc:	2b18      	cmp	r3, #24
 8001cbe:	ddf0      	ble.n	8001ca2 <readTempCalibration+0x24>
	}

	for (int i = 0; i < 7; i++) {
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cc4:	e00b      	b.n	8001cde <readTempCalibration+0x60>
	  send_uart_hex(huart, calibration2[i]);
 8001cc6:	f107 0214 	add.w	r2, r7, #20
 8001cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ccc:	4413      	add	r3, r2
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	68b8      	ldr	r0, [r7, #8]
 8001cd4:	f000 fd6f 	bl	80027b6 <send_uart_hex>
	for (int i = 0; i < 7; i++) {
 8001cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cda:	3301      	adds	r3, #1
 8001cdc:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ce0:	2b06      	cmp	r3, #6
 8001ce2:	ddf0      	ble.n	8001cc6 <readTempCalibration+0x48>
	}
}
 8001ce4:	bf00      	nop
 8001ce6:	bf00      	nop
 8001ce8:	3740      	adds	r7, #64	; 0x40
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
	...

08001cf0 <readTempSensor>:

void readTempSensor(UART_HandleTypeDef *huart, uint8_t tempNo) {
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	70fb      	strb	r3, [r7, #3]
	if (tempNo == 0) {
 8001cfc:	78fb      	ldrb	r3, [r7, #3]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d111      	bne.n	8001d26 <readTempSensor+0x36>
		for (int i = 0; i < 6; i++) {
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	e00a      	b.n	8001d1e <readTempSensor+0x2e>
			send_uart_hex(huart, bme280_data_1[i]);
 8001d08:	4a13      	ldr	r2, [pc, #76]	; (8001d58 <readTempSensor+0x68>)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	4619      	mov	r1, r3
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 fd4f 	bl	80027b6 <send_uart_hex>
		for (int i = 0; i < 6; i++) {
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2b05      	cmp	r3, #5
 8001d22:	ddf1      	ble.n	8001d08 <readTempSensor+0x18>
	} else if (tempNo == 1) {
		for (int i = 0; i < 6; i++) {
			send_uart_hex(huart, bme280_data_2[i]);
		}
	}
}
 8001d24:	e013      	b.n	8001d4e <readTempSensor+0x5e>
	} else if (tempNo == 1) {
 8001d26:	78fb      	ldrb	r3, [r7, #3]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d110      	bne.n	8001d4e <readTempSensor+0x5e>
		for (int i = 0; i < 6; i++) {
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60bb      	str	r3, [r7, #8]
 8001d30:	e00a      	b.n	8001d48 <readTempSensor+0x58>
			send_uart_hex(huart, bme280_data_2[i]);
 8001d32:	4a0a      	ldr	r2, [pc, #40]	; (8001d5c <readTempSensor+0x6c>)
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	4413      	add	r3, r2
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 fd3a 	bl	80027b6 <send_uart_hex>
		for (int i = 0; i < 6; i++) {
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	3301      	adds	r3, #1
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	2b05      	cmp	r3, #5
 8001d4c:	ddf1      	ble.n	8001d32 <readTempSensor+0x42>
}
 8001d4e:	bf00      	nop
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000518 	.word	0x20000518
 8001d5c:	20000520 	.word	0x20000520

08001d60 <readAllSensors>:

/***************************************************************************************************************
 * Process All Sensors
 */
void readAllSensors(I2C_HandleTypeDef* hi2c_accel, I2C_HandleTypeDef* hi2c_temp, RTC_HandleTypeDef* hrtc) {
 8001d60:	b590      	push	{r4, r7, lr}
 8001d62:	b08b      	sub	sp, #44	; 0x2c
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
	// Read Accelerometer Data
	readAccelerometer(accel_data, hi2c_accel);
 8001d6c:	68f9      	ldr	r1, [r7, #12]
 8001d6e:	4855      	ldr	r0, [pc, #340]	; (8001ec4 <readAllSensors+0x164>)
 8001d70:	f7fe fbe0 	bl	8000534 <readAccelerometer>

	// Read BME280 Data
	readTempHumPres(bme280_data_1, hi2c_temp, 0);
 8001d74:	2200      	movs	r2, #0
 8001d76:	68b9      	ldr	r1, [r7, #8]
 8001d78:	4853      	ldr	r0, [pc, #332]	; (8001ec8 <readAllSensors+0x168>)
 8001d7a:	f7fe fc4f 	bl	800061c <readTempHumPres>
	readTempHumPres(bme280_data_2, hi2c_temp, 1);
 8001d7e:	2201      	movs	r2, #1
 8001d80:	68b9      	ldr	r1, [r7, #8]
 8001d82:	4852      	ldr	r0, [pc, #328]	; (8001ecc <readAllSensors+0x16c>)
 8001d84:	f7fe fc4a 	bl	800061c <readTempHumPres>

	uint16_t time = getTimestampMilliseconds(hrtc);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f8c1 	bl	8001f10 <getTimestampMilliseconds>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	82fb      	strh	r3, [r7, #22]
	uint8_t array_ptr = 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// Store the new read in the buffer if there is space
	if (byte_tracker < (PAGE_SIZE - READ_SIZE)) {
 8001d98:	4b4d      	ldr	r3, [pc, #308]	; (8001ed0 <readAllSensors+0x170>)
 8001d9a:	881b      	ldrh	r3, [r3, #0]
 8001d9c:	2beb      	cmp	r3, #235	; 0xeb
 8001d9e:	f200 808c 	bhi.w	8001eba <readAllSensors+0x15a>
		data_buffer_tx[buffer_tracker][byte_tracker + 0] = (uint8_t) ((time >> 8) & 0xFF);
 8001da2:	8afb      	ldrh	r3, [r7, #22]
 8001da4:	0a1b      	lsrs	r3, r3, #8
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	4b4a      	ldr	r3, [pc, #296]	; (8001ed4 <readAllSensors+0x174>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	461c      	mov	r4, r3
 8001dae:	4b48      	ldr	r3, [pc, #288]	; (8001ed0 <readAllSensors+0x170>)
 8001db0:	881b      	ldrh	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	b2d1      	uxtb	r1, r2
 8001db6:	4a48      	ldr	r2, [pc, #288]	; (8001ed8 <readAllSensors+0x178>)
 8001db8:	0223      	lsls	r3, r4, #8
 8001dba:	4413      	add	r3, r2
 8001dbc:	4403      	add	r3, r0
 8001dbe:	460a      	mov	r2, r1
 8001dc0:	701a      	strb	r2, [r3, #0]
		data_buffer_tx[buffer_tracker][byte_tracker + 1] = (uint8_t) (time & 0xFF); // Least significant byte (LSB)
 8001dc2:	4b44      	ldr	r3, [pc, #272]	; (8001ed4 <readAllSensors+0x174>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	4b41      	ldr	r3, [pc, #260]	; (8001ed0 <readAllSensors+0x170>)
 8001dca:	881b      	ldrh	r3, [r3, #0]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	8af9      	ldrh	r1, [r7, #22]
 8001dd0:	b2c8      	uxtb	r0, r1
 8001dd2:	4941      	ldr	r1, [pc, #260]	; (8001ed8 <readAllSensors+0x178>)
 8001dd4:	0212      	lsls	r2, r2, #8
 8001dd6:	440a      	add	r2, r1
 8001dd8:	4413      	add	r3, r2
 8001dda:	4602      	mov	r2, r0
 8001ddc:	701a      	strb	r2, [r3, #0]

		array_ptr += 2;
 8001dde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001de2:	3302      	adds	r3, #2
 8001de4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for (int i = 0; i < 6; i++) {
 8001de8:	2300      	movs	r3, #0
 8001dea:	623b      	str	r3, [r7, #32]
 8001dec:	e01a      	b.n	8001e24 <readAllSensors+0xc4>
		  data_buffer_tx[buffer_tracker][byte_tracker + array_ptr] = accel_data[i];
 8001dee:	4b39      	ldr	r3, [pc, #228]	; (8001ed4 <readAllSensors+0x174>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	461c      	mov	r4, r3
 8001df4:	4b36      	ldr	r3, [pc, #216]	; (8001ed0 <readAllSensors+0x170>)
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001dfe:	4413      	add	r3, r2
 8001e00:	4930      	ldr	r1, [pc, #192]	; (8001ec4 <readAllSensors+0x164>)
 8001e02:	6a3a      	ldr	r2, [r7, #32]
 8001e04:	440a      	add	r2, r1
 8001e06:	7810      	ldrb	r0, [r2, #0]
 8001e08:	4933      	ldr	r1, [pc, #204]	; (8001ed8 <readAllSensors+0x178>)
 8001e0a:	0222      	lsls	r2, r4, #8
 8001e0c:	440a      	add	r2, r1
 8001e0e:	4413      	add	r3, r2
 8001e10:	4602      	mov	r2, r0
 8001e12:	701a      	strb	r2, [r3, #0]
		  array_ptr += 1;
 8001e14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e18:	3301      	adds	r3, #1
 8001e1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for (int i = 0; i < 6; i++) {
 8001e1e:	6a3b      	ldr	r3, [r7, #32]
 8001e20:	3301      	adds	r3, #1
 8001e22:	623b      	str	r3, [r7, #32]
 8001e24:	6a3b      	ldr	r3, [r7, #32]
 8001e26:	2b05      	cmp	r3, #5
 8001e28:	dde1      	ble.n	8001dee <readAllSensors+0x8e>
		}

		for (int i = 0; i < 6; i++) {
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61fb      	str	r3, [r7, #28]
 8001e2e:	e01a      	b.n	8001e66 <readAllSensors+0x106>
		  data_buffer_tx[buffer_tracker][byte_tracker + array_ptr] = bme280_data_1[i];
 8001e30:	4b28      	ldr	r3, [pc, #160]	; (8001ed4 <readAllSensors+0x174>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	461c      	mov	r4, r3
 8001e36:	4b26      	ldr	r3, [pc, #152]	; (8001ed0 <readAllSensors+0x170>)
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e40:	4413      	add	r3, r2
 8001e42:	4921      	ldr	r1, [pc, #132]	; (8001ec8 <readAllSensors+0x168>)
 8001e44:	69fa      	ldr	r2, [r7, #28]
 8001e46:	440a      	add	r2, r1
 8001e48:	7810      	ldrb	r0, [r2, #0]
 8001e4a:	4923      	ldr	r1, [pc, #140]	; (8001ed8 <readAllSensors+0x178>)
 8001e4c:	0222      	lsls	r2, r4, #8
 8001e4e:	440a      	add	r2, r1
 8001e50:	4413      	add	r3, r2
 8001e52:	4602      	mov	r2, r0
 8001e54:	701a      	strb	r2, [r3, #0]
		  array_ptr += 1;
 8001e56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for (int i = 0; i < 6; i++) {
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	3301      	adds	r3, #1
 8001e64:	61fb      	str	r3, [r7, #28]
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	2b05      	cmp	r3, #5
 8001e6a:	dde1      	ble.n	8001e30 <readAllSensors+0xd0>
		}

		for (int i = 0; i < 6; i++) {
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61bb      	str	r3, [r7, #24]
 8001e70:	e01a      	b.n	8001ea8 <readAllSensors+0x148>
		  data_buffer_tx[buffer_tracker][byte_tracker + array_ptr] = bme280_data_2[i];
 8001e72:	4b18      	ldr	r3, [pc, #96]	; (8001ed4 <readAllSensors+0x174>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	461c      	mov	r4, r3
 8001e78:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <readAllSensors+0x170>)
 8001e7a:	881b      	ldrh	r3, [r3, #0]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e82:	4413      	add	r3, r2
 8001e84:	4911      	ldr	r1, [pc, #68]	; (8001ecc <readAllSensors+0x16c>)
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	440a      	add	r2, r1
 8001e8a:	7810      	ldrb	r0, [r2, #0]
 8001e8c:	4912      	ldr	r1, [pc, #72]	; (8001ed8 <readAllSensors+0x178>)
 8001e8e:	0222      	lsls	r2, r4, #8
 8001e90:	440a      	add	r2, r1
 8001e92:	4413      	add	r3, r2
 8001e94:	4602      	mov	r2, r0
 8001e96:	701a      	strb	r2, [r3, #0]
		  array_ptr += 1;
 8001e98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for (int i = 0; i < 6; i++) {
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	61bb      	str	r3, [r7, #24]
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	2b05      	cmp	r3, #5
 8001eac:	dde1      	ble.n	8001e72 <readAllSensors+0x112>
		}

		byte_tracker = byte_tracker + READ_SIZE;
 8001eae:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <readAllSensors+0x170>)
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	3314      	adds	r3, #20
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <readAllSensors+0x170>)
 8001eb8:	801a      	strh	r2, [r3, #0]
	}
}
 8001eba:	bf00      	nop
 8001ebc:	372c      	adds	r7, #44	; 0x2c
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd90      	pop	{r4, r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000510 	.word	0x20000510
 8001ec8:	20000518 	.word	0x20000518
 8001ecc:	20000520 	.word	0x20000520
 8001ed0:	2000052c 	.word	0x2000052c
 8001ed4:	2000050c 	.word	0x2000050c
 8001ed8:	2000030c 	.word	0x2000030c

08001edc <initialise_rtc_default>:
    .Month = RTC_MONTH_JANUARY, // Set default month (e.g., January)
    .Date = 1, // Set default day of the month
    .Year = 24 // Set default year (e.g., 2021)
};

void initialise_rtc_default(RTC_HandleTypeDef* hrtc) {
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
	// Reset RTC on boot
	HAL_RTC_MspInit(hrtc); // Initialize RTC hardware
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f9db 	bl	80022a0 <HAL_RTC_MspInit>
	HAL_RTC_SetTime(hrtc, &defaultTime, RTC_FORMAT_BIN); // Set default time
 8001eea:	2200      	movs	r2, #0
 8001eec:	4906      	ldr	r1, [pc, #24]	; (8001f08 <initialise_rtc_default+0x2c>)
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f003 fb53 	bl	800559a <HAL_RTC_SetTime>
	HAL_RTC_SetDate(hrtc, &defaultDate, RTC_FORMAT_BIN); // Set default date
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	4905      	ldr	r1, [pc, #20]	; (8001f0c <initialise_rtc_default+0x30>)
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f003 fc46 	bl	800578a <HAL_RTC_SetDate>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000568 	.word	0x20000568
 8001f0c:	20000014 	.word	0x20000014

08001f10 <getTimestampMilliseconds>:

uint32_t getTimestampMilliseconds(RTC_HandleTypeDef* hrtc) {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08c      	sub	sp, #48	; 0x30
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
    RTC_TimeTypeDef rtcTime;
    RTC_DateTypeDef rtcDate;

    // Read RTC time and date
    HAL_RTC_GetTime(hrtc, &rtcTime, RTC_FORMAT_BIN);
 8001f18:	f107 0310 	add.w	r3, r7, #16
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	4619      	mov	r1, r3
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f003 fbd4 	bl	80056ce <HAL_RTC_GetTime>
    HAL_RTC_GetDate(hrtc, &rtcDate, RTC_FORMAT_BIN);
 8001f26:	f107 030c 	add.w	r3, r7, #12
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f003 fcaf 	bl	8005892 <HAL_RTC_GetDate>

    // Calculate timestamp in milliseconds
    uint32_t timestampSeconds = rtcTime.Seconds + rtcTime.Minutes * 60 + rtcTime.Hours * 3600;
 8001f34:	7cbb      	ldrb	r3, [r7, #18]
 8001f36:	4619      	mov	r1, r3
 8001f38:	7c7b      	ldrb	r3, [r7, #17]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	011b      	lsls	r3, r3, #4
 8001f40:	1a9b      	subs	r3, r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	18ca      	adds	r2, r1, r3
 8001f46:	7c3b      	ldrb	r3, [r7, #16]
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001f4e:	fb01 f303 	mul.w	r3, r1, r3
 8001f52:	4413      	add	r3, r2
 8001f54:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t timestampMilliseconds = timestampSeconds * 1000;
 8001f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f5c:	fb02 f303 	mul.w	r3, r2, r3
 8001f60:	62bb      	str	r3, [r7, #40]	; 0x28
    float subsecondsFraction = (float)(rtcTime.SecondFraction - rtcTime.SubSeconds) / (rtcTime.SecondFraction + 1);
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	ee07 3a90 	vmov	s15, r3
 8001f6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	3301      	adds	r3, #1
 8001f74:	ee07 3a90 	vmov	s15, r3
 8001f78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f80:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    timestampMilliseconds += subsecondsFraction * 1000;
 8001f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f86:	ee07 3a90 	vmov	s15, r3
 8001f8a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f8e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001f92:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001fb4 <getTimestampMilliseconds+0xa4>
 8001f96:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fa2:	ee17 3a90 	vmov	r3, s15
 8001fa6:	62bb      	str	r3, [r7, #40]	; 0x28

    return timestampMilliseconds;
 8001fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3730      	adds	r7, #48	; 0x30
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	447a0000 	.word	0x447a0000

08001fb8 <spi_sendOp_readByte>:
#ifndef SRC_SPI_DRIVER_C_
#define SRC_SPI_DRIVER_C_

#include "spi_driver.h"

HAL_StatusTypeDef spi_sendOp_readByte(uint8_t* opcode, SPI_HandleTypeDef *hspi, uint8_t* data_ptr, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
 8001fc4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status;
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);	// Set the chip select pin to low to initiate SPI comms
 8001fc6:	8c3b      	ldrh	r3, [r7, #32]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	4619      	mov	r1, r3
 8001fcc:	6838      	ldr	r0, [r7, #0]
 8001fce:	f001 fb9f 	bl	8003710 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, opcode, 1, TIMEOUT_SML);			// Write the write enable value to the Flash to initial reading
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	68f9      	ldr	r1, [r7, #12]
 8001fd8:	68b8      	ldr	r0, [r7, #8]
 8001fda:	f003 fdf0 	bl	8005bbe <HAL_SPI_Transmit>
	status = HAL_SPI_Receive(hspi, data_ptr, 1, TIMEOUT_SML);
 8001fde:	2302      	movs	r3, #2
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	68b8      	ldr	r0, [r7, #8]
 8001fe6:	f003 ff2d 	bl	8005e44 <HAL_SPI_Receive>
 8001fea:	4603      	mov	r3, r0
 8001fec:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);
 8001fee:	8c3b      	ldrh	r3, [r7, #32]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	6838      	ldr	r0, [r7, #0]
 8001ff6:	f001 fb8b 	bl	8003710 <HAL_GPIO_WritePin>
	return status;
 8001ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <perform_operation>:

HAL_StatusTypeDef perform_operation(uint8_t* opcode, SPI_HandleTypeDef *hspi, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
 8002010:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef status;
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);				// Set the chip select pin to low to initiate SPI comms
 8002012:	887b      	ldrh	r3, [r7, #2]
 8002014:	2200      	movs	r2, #0
 8002016:	4619      	mov	r1, r3
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f001 fb79 	bl	8003710 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(hspi, opcode, 1, TIMEOUT_SML);				// Write the opcode value
 800201e:	2302      	movs	r3, #2
 8002020:	2201      	movs	r2, #1
 8002022:	68f9      	ldr	r1, [r7, #12]
 8002024:	68b8      	ldr	r0, [r7, #8]
 8002026:	f003 fdca 	bl	8005bbe <HAL_SPI_Transmit>
 800202a:	4603      	mov	r3, r0
 800202c:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);
 800202e:	887b      	ldrh	r3, [r7, #2]
 8002030:	2201      	movs	r2, #1
 8002032:	4619      	mov	r1, r3
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f001 fb6b 	bl	8003710 <HAL_GPIO_WritePin>

	return status;
 800203a:	7dfb      	ldrb	r3, [r7, #23]
}
 800203c:	4618      	mov	r0, r3
 800203e:	3718      	adds	r7, #24
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <spi_read_data>:

HAL_StatusTypeDef spi_read_data(uint8_t* opcode, uint16_t data_size, uint8_t data_read[data_size], SPI_HandleTypeDef *hspi, uint32_t addr, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	607a      	str	r2, [r7, #4]
 800204e:	603b      	str	r3, [r7, #0]
 8002050:	460b      	mov	r3, r1
 8002052:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef status;

	// Split the 24 bit address into three 8 bit ints
	uint8_t addrL = addr & 0xFF;  // Get the low byte
 8002054:	6a3b      	ldr	r3, [r7, #32]
 8002056:	b2db      	uxtb	r3, r3
 8002058:	75bb      	strb	r3, [r7, #22]
	uint8_t addrM = (addr >> 8) & 0xFF;  // Get the middle byte
 800205a:	6a3b      	ldr	r3, [r7, #32]
 800205c:	0a1b      	lsrs	r3, r3, #8
 800205e:	b2db      	uxtb	r3, r3
 8002060:	757b      	strb	r3, [r7, #21]
	uint8_t addrH = (addr >> 16) & 0xFF;  // Get the high byte
 8002062:	6a3b      	ldr	r3, [r7, #32]
 8002064:	0c1b      	lsrs	r3, r3, #16
 8002066:	b2db      	uxtb	r3, r3
 8002068:	753b      	strb	r3, [r7, #20]

	// Read the data denoted by the given address
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);
 800206a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800206c:	2200      	movs	r2, #0
 800206e:	4619      	mov	r1, r3
 8002070:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002072:	f001 fb4d 	bl	8003710 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, opcode, 1, TIMEOUT_SML);	// Write the read enable value
 8002076:	2302      	movs	r3, #2
 8002078:	2201      	movs	r2, #1
 800207a:	68f9      	ldr	r1, [r7, #12]
 800207c:	6838      	ldr	r0, [r7, #0]
 800207e:	f003 fd9e 	bl	8005bbe <HAL_SPI_Transmit>

	// Transmit the 24 bit address of the page to initialise read from
	HAL_SPI_Transmit(hspi, &addrH, 1, TIMEOUT_SML);
 8002082:	f107 0114 	add.w	r1, r7, #20
 8002086:	2302      	movs	r3, #2
 8002088:	2201      	movs	r2, #1
 800208a:	6838      	ldr	r0, [r7, #0]
 800208c:	f003 fd97 	bl	8005bbe <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &addrM, 1, TIMEOUT_SML);
 8002090:	f107 0115 	add.w	r1, r7, #21
 8002094:	2302      	movs	r3, #2
 8002096:	2201      	movs	r2, #1
 8002098:	6838      	ldr	r0, [r7, #0]
 800209a:	f003 fd90 	bl	8005bbe <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &addrL, 1, TIMEOUT_SML);
 800209e:	f107 0116 	add.w	r1, r7, #22
 80020a2:	2302      	movs	r3, #2
 80020a4:	2201      	movs	r2, #1
 80020a6:	6838      	ldr	r0, [r7, #0]
 80020a8:	f003 fd89 	bl	8005bbe <HAL_SPI_Transmit>

	status = HAL_SPI_Receive(hspi, data_read, data_size, TIMEOUT_LRG);
 80020ac:	897a      	ldrh	r2, [r7, #10]
 80020ae:	2364      	movs	r3, #100	; 0x64
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	6838      	ldr	r0, [r7, #0]
 80020b4:	f003 fec6 	bl	8005e44 <HAL_SPI_Receive>
 80020b8:	4603      	mov	r3, r0
 80020ba:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);
 80020bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80020be:	2201      	movs	r2, #1
 80020c0:	4619      	mov	r1, r3
 80020c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020c4:	f001 fb24 	bl	8003710 <HAL_GPIO_WritePin>

	return status;
 80020c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3718      	adds	r7, #24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <spi_write_data_dma>:
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);	// Set the chip select pin to high to remove the Flash from the SPI bus

	return status;
}

HAL_StatusTypeDef spi_write_data_dma(uint8_t* opcode, uint16_t data_size, uint8_t data_write[data_size], SPI_HandleTypeDef *hspi, uint32_t addr, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b086      	sub	sp, #24
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	60f8      	str	r0, [r7, #12]
 80020da:	607a      	str	r2, [r7, #4]
 80020dc:	603b      	str	r3, [r7, #0]
 80020de:	460b      	mov	r3, r1
 80020e0:	817b      	strh	r3, [r7, #10]
    HAL_StatusTypeDef status;

    // Split the 24 bit address into three 8 bit ints
    uint8_t addrL = addr & 0xFF;  			// Get the low byte
 80020e2:	6a3b      	ldr	r3, [r7, #32]
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	75bb      	strb	r3, [r7, #22]
    uint8_t addrM = (addr >> 8) & 0xFF;  	// Get the middle byte
 80020e8:	6a3b      	ldr	r3, [r7, #32]
 80020ea:	0a1b      	lsrs	r3, r3, #8
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	757b      	strb	r3, [r7, #21]
    uint8_t addrH = (addr >> 16) & 0xFF;  	// Get the high byte
 80020f0:	6a3b      	ldr	r3, [r7, #32]
 80020f2:	0c1b      	lsrs	r3, r3, #16
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	753b      	strb	r3, [r7, #20]

    // Send the PageWrite command
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);	// Set the chip select pin to low to initiate SPI comms
 80020f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80020fa:	2200      	movs	r2, #0
 80020fc:	4619      	mov	r1, r3
 80020fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002100:	f001 fb06 	bl	8003710 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(hspi, opcode, 1, TIMEOUT_SML);					// Write the write enable value to the Flash to initial writing
 8002104:	2302      	movs	r3, #2
 8002106:	2201      	movs	r2, #1
 8002108:	68f9      	ldr	r1, [r7, #12]
 800210a:	6838      	ldr	r0, [r7, #0]
 800210c:	f003 fd57 	bl	8005bbe <HAL_SPI_Transmit>

    // Transmit the 24 bit address of the page to write to
    HAL_SPI_Transmit(hspi, &addrH, 1, TIMEOUT_SML);
 8002110:	f107 0114 	add.w	r1, r7, #20
 8002114:	2302      	movs	r3, #2
 8002116:	2201      	movs	r2, #1
 8002118:	6838      	ldr	r0, [r7, #0]
 800211a:	f003 fd50 	bl	8005bbe <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hspi, &addrM, 1, TIMEOUT_SML);
 800211e:	f107 0115 	add.w	r1, r7, #21
 8002122:	2302      	movs	r3, #2
 8002124:	2201      	movs	r2, #1
 8002126:	6838      	ldr	r0, [r7, #0]
 8002128:	f003 fd49 	bl	8005bbe <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hspi, &addrL, 1, TIMEOUT_SML);
 800212c:	f107 0116 	add.w	r1, r7, #22
 8002130:	2302      	movs	r3, #2
 8002132:	2201      	movs	r2, #1
 8002134:	6838      	ldr	r0, [r7, #0]
 8002136:	f003 fd42 	bl	8005bbe <HAL_SPI_Transmit>

    // Start the DMA transfer
    status = HAL_SPI_Transmit_DMA(hspi, data_write, data_size);
 800213a:	897b      	ldrh	r3, [r7, #10]
 800213c:	461a      	mov	r2, r3
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	6838      	ldr	r0, [r7, #0]
 8002142:	f004 f947 	bl	80063d4 <HAL_SPI_Transmit_DMA>
 8002146:	4603      	mov	r3, r0
 8002148:	75fb      	strb	r3, [r7, #23]

    return status;
 800214a:	7dfb      	ldrb	r3, [r7, #23]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	607b      	str	r3, [r7, #4]
 800215e:	4b10      	ldr	r3, [pc, #64]	; (80021a0 <HAL_MspInit+0x4c>)
 8002160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002162:	4a0f      	ldr	r2, [pc, #60]	; (80021a0 <HAL_MspInit+0x4c>)
 8002164:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002168:	6453      	str	r3, [r2, #68]	; 0x44
 800216a:	4b0d      	ldr	r3, [pc, #52]	; (80021a0 <HAL_MspInit+0x4c>)
 800216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002172:	607b      	str	r3, [r7, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	603b      	str	r3, [r7, #0]
 800217a:	4b09      	ldr	r3, [pc, #36]	; (80021a0 <HAL_MspInit+0x4c>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	4a08      	ldr	r2, [pc, #32]	; (80021a0 <HAL_MspInit+0x4c>)
 8002180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002184:	6413      	str	r3, [r2, #64]	; 0x40
 8002186:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <HAL_MspInit+0x4c>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218e:	603b      	str	r3, [r7, #0]
 8002190:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40023800 	.word	0x40023800

080021a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08c      	sub	sp, #48	; 0x30
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ac:	f107 031c 	add.w	r3, r7, #28
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a33      	ldr	r2, [pc, #204]	; (8002290 <HAL_I2C_MspInit+0xec>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d12d      	bne.n	8002222 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	61bb      	str	r3, [r7, #24]
 80021ca:	4b32      	ldr	r3, [pc, #200]	; (8002294 <HAL_I2C_MspInit+0xf0>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	4a31      	ldr	r2, [pc, #196]	; (8002294 <HAL_I2C_MspInit+0xf0>)
 80021d0:	f043 0302 	orr.w	r3, r3, #2
 80021d4:	6313      	str	r3, [r2, #48]	; 0x30
 80021d6:	4b2f      	ldr	r3, [pc, #188]	; (8002294 <HAL_I2C_MspInit+0xf0>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	61bb      	str	r3, [r7, #24]
 80021e0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80021e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021e8:	2312      	movs	r3, #18
 80021ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f0:	2303      	movs	r3, #3
 80021f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021f4:	2304      	movs	r3, #4
 80021f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f8:	f107 031c 	add.w	r3, r7, #28
 80021fc:	4619      	mov	r1, r3
 80021fe:	4826      	ldr	r0, [pc, #152]	; (8002298 <HAL_I2C_MspInit+0xf4>)
 8002200:	f001 f8c2 	bl	8003388 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
 8002208:	4b22      	ldr	r3, [pc, #136]	; (8002294 <HAL_I2C_MspInit+0xf0>)
 800220a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220c:	4a21      	ldr	r2, [pc, #132]	; (8002294 <HAL_I2C_MspInit+0xf0>)
 800220e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002212:	6413      	str	r3, [r2, #64]	; 0x40
 8002214:	4b1f      	ldr	r3, [pc, #124]	; (8002294 <HAL_I2C_MspInit+0xf0>)
 8002216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002220:	e031      	b.n	8002286 <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a1d      	ldr	r2, [pc, #116]	; (800229c <HAL_I2C_MspInit+0xf8>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d12c      	bne.n	8002286 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800222c:	2300      	movs	r3, #0
 800222e:	613b      	str	r3, [r7, #16]
 8002230:	4b18      	ldr	r3, [pc, #96]	; (8002294 <HAL_I2C_MspInit+0xf0>)
 8002232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002234:	4a17      	ldr	r2, [pc, #92]	; (8002294 <HAL_I2C_MspInit+0xf0>)
 8002236:	f043 0302 	orr.w	r3, r3, #2
 800223a:	6313      	str	r3, [r2, #48]	; 0x30
 800223c:	4b15      	ldr	r3, [pc, #84]	; (8002294 <HAL_I2C_MspInit+0xf0>)
 800223e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002248:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800224c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800224e:	2312      	movs	r3, #18
 8002250:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002256:	2303      	movs	r3, #3
 8002258:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800225a:	2304      	movs	r3, #4
 800225c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800225e:	f107 031c 	add.w	r3, r7, #28
 8002262:	4619      	mov	r1, r3
 8002264:	480c      	ldr	r0, [pc, #48]	; (8002298 <HAL_I2C_MspInit+0xf4>)
 8002266:	f001 f88f 	bl	8003388 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	4b09      	ldr	r3, [pc, #36]	; (8002294 <HAL_I2C_MspInit+0xf0>)
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	4a08      	ldr	r2, [pc, #32]	; (8002294 <HAL_I2C_MspInit+0xf0>)
 8002274:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002278:	6413      	str	r3, [r2, #64]	; 0x40
 800227a:	4b06      	ldr	r3, [pc, #24]	; (8002294 <HAL_I2C_MspInit+0xf0>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
}
 8002286:	bf00      	nop
 8002288:	3730      	adds	r7, #48	; 0x30
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40005400 	.word	0x40005400
 8002294:	40023800 	.word	0x40023800
 8002298:	40020400 	.word	0x40020400
 800229c:	40005800 	.word	0x40005800

080022a0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b08e      	sub	sp, #56	; 0x38
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022a8:	f107 0308 	add.w	r3, r7, #8
 80022ac:	2230      	movs	r2, #48	; 0x30
 80022ae:	2100      	movs	r1, #0
 80022b0:	4618      	mov	r0, r3
 80022b2:	f005 fe8d 	bl	8007fd0 <memset>
  if(hrtc->Instance==RTC)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a0c      	ldr	r2, [pc, #48]	; (80022ec <HAL_RTC_MspInit+0x4c>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d111      	bne.n	80022e4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80022c0:	2320      	movs	r3, #32
 80022c2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80022c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022c8:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022ca:	f107 0308 	add.w	r3, r7, #8
 80022ce:	4618      	mov	r0, r3
 80022d0:	f002 ff20 	bl	8005114 <HAL_RCCEx_PeriphCLKConfig>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80022da:	f7ff faf4 	bl	80018c6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80022de:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <HAL_RTC_MspInit+0x50>)
 80022e0:	2201      	movs	r2, #1
 80022e2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80022e4:	bf00      	nop
 80022e6:	3738      	adds	r7, #56	; 0x38
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40002800 	.word	0x40002800
 80022f0:	42470e3c 	.word	0x42470e3c

080022f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08c      	sub	sp, #48	; 0x30
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022fc:	f107 031c 	add.w	r3, r7, #28
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	60da      	str	r2, [r3, #12]
 800230a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a6f      	ldr	r2, [pc, #444]	; (80024d0 <HAL_SPI_MspInit+0x1dc>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d15b      	bne.n	80023ce <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	61bb      	str	r3, [r7, #24]
 800231a:	4b6e      	ldr	r3, [pc, #440]	; (80024d4 <HAL_SPI_MspInit+0x1e0>)
 800231c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231e:	4a6d      	ldr	r2, [pc, #436]	; (80024d4 <HAL_SPI_MspInit+0x1e0>)
 8002320:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002324:	6453      	str	r3, [r2, #68]	; 0x44
 8002326:	4b6b      	ldr	r3, [pc, #428]	; (80024d4 <HAL_SPI_MspInit+0x1e0>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800232e:	61bb      	str	r3, [r7, #24]
 8002330:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	4b67      	ldr	r3, [pc, #412]	; (80024d4 <HAL_SPI_MspInit+0x1e0>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	4a66      	ldr	r2, [pc, #408]	; (80024d4 <HAL_SPI_MspInit+0x1e0>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	6313      	str	r3, [r2, #48]	; 0x30
 8002342:	4b64      	ldr	r3, [pc, #400]	; (80024d4 <HAL_SPI_MspInit+0x1e0>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800234e:	23e0      	movs	r3, #224	; 0xe0
 8002350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002352:	2302      	movs	r3, #2
 8002354:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002356:	2300      	movs	r3, #0
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800235a:	2303      	movs	r3, #3
 800235c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800235e:	2305      	movs	r3, #5
 8002360:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002362:	f107 031c 	add.w	r3, r7, #28
 8002366:	4619      	mov	r1, r3
 8002368:	485b      	ldr	r0, [pc, #364]	; (80024d8 <HAL_SPI_MspInit+0x1e4>)
 800236a:	f001 f80d 	bl	8003388 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800236e:	4b5b      	ldr	r3, [pc, #364]	; (80024dc <HAL_SPI_MspInit+0x1e8>)
 8002370:	4a5b      	ldr	r2, [pc, #364]	; (80024e0 <HAL_SPI_MspInit+0x1ec>)
 8002372:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002374:	4b59      	ldr	r3, [pc, #356]	; (80024dc <HAL_SPI_MspInit+0x1e8>)
 8002376:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800237a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800237c:	4b57      	ldr	r3, [pc, #348]	; (80024dc <HAL_SPI_MspInit+0x1e8>)
 800237e:	2240      	movs	r2, #64	; 0x40
 8002380:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002382:	4b56      	ldr	r3, [pc, #344]	; (80024dc <HAL_SPI_MspInit+0x1e8>)
 8002384:	2200      	movs	r2, #0
 8002386:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002388:	4b54      	ldr	r3, [pc, #336]	; (80024dc <HAL_SPI_MspInit+0x1e8>)
 800238a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800238e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002390:	4b52      	ldr	r3, [pc, #328]	; (80024dc <HAL_SPI_MspInit+0x1e8>)
 8002392:	2200      	movs	r2, #0
 8002394:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002396:	4b51      	ldr	r3, [pc, #324]	; (80024dc <HAL_SPI_MspInit+0x1e8>)
 8002398:	2200      	movs	r2, #0
 800239a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800239c:	4b4f      	ldr	r3, [pc, #316]	; (80024dc <HAL_SPI_MspInit+0x1e8>)
 800239e:	2200      	movs	r2, #0
 80023a0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80023a2:	4b4e      	ldr	r3, [pc, #312]	; (80024dc <HAL_SPI_MspInit+0x1e8>)
 80023a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80023a8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023aa:	4b4c      	ldr	r3, [pc, #304]	; (80024dc <HAL_SPI_MspInit+0x1e8>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80023b0:	484a      	ldr	r0, [pc, #296]	; (80024dc <HAL_SPI_MspInit+0x1e8>)
 80023b2:	f000 fbe7 	bl	8002b84 <HAL_DMA_Init>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80023bc:	f7ff fa83 	bl	80018c6 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a46      	ldr	r2, [pc, #280]	; (80024dc <HAL_SPI_MspInit+0x1e8>)
 80023c4:	649a      	str	r2, [r3, #72]	; 0x48
 80023c6:	4a45      	ldr	r2, [pc, #276]	; (80024dc <HAL_SPI_MspInit+0x1e8>)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80023cc:	e07b      	b.n	80024c6 <HAL_SPI_MspInit+0x1d2>
  else if(hspi->Instance==SPI2)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a44      	ldr	r2, [pc, #272]	; (80024e4 <HAL_SPI_MspInit+0x1f0>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d176      	bne.n	80024c6 <HAL_SPI_MspInit+0x1d2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80023d8:	2300      	movs	r3, #0
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	4b3d      	ldr	r3, [pc, #244]	; (80024d4 <HAL_SPI_MspInit+0x1e0>)
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	4a3c      	ldr	r2, [pc, #240]	; (80024d4 <HAL_SPI_MspInit+0x1e0>)
 80023e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023e6:	6413      	str	r3, [r2, #64]	; 0x40
 80023e8:	4b3a      	ldr	r3, [pc, #232]	; (80024d4 <HAL_SPI_MspInit+0x1e0>)
 80023ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023f0:	613b      	str	r3, [r7, #16]
 80023f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023f4:	2300      	movs	r3, #0
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	4b36      	ldr	r3, [pc, #216]	; (80024d4 <HAL_SPI_MspInit+0x1e0>)
 80023fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fc:	4a35      	ldr	r2, [pc, #212]	; (80024d4 <HAL_SPI_MspInit+0x1e0>)
 80023fe:	f043 0304 	orr.w	r3, r3, #4
 8002402:	6313      	str	r3, [r2, #48]	; 0x30
 8002404:	4b33      	ldr	r3, [pc, #204]	; (80024d4 <HAL_SPI_MspInit+0x1e0>)
 8002406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002410:	2300      	movs	r3, #0
 8002412:	60bb      	str	r3, [r7, #8]
 8002414:	4b2f      	ldr	r3, [pc, #188]	; (80024d4 <HAL_SPI_MspInit+0x1e0>)
 8002416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002418:	4a2e      	ldr	r2, [pc, #184]	; (80024d4 <HAL_SPI_MspInit+0x1e0>)
 800241a:	f043 0308 	orr.w	r3, r3, #8
 800241e:	6313      	str	r3, [r2, #48]	; 0x30
 8002420:	4b2c      	ldr	r3, [pc, #176]	; (80024d4 <HAL_SPI_MspInit+0x1e0>)
 8002422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002424:	f003 0308 	and.w	r3, r3, #8
 8002428:	60bb      	str	r3, [r7, #8]
 800242a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800242c:	230c      	movs	r3, #12
 800242e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002430:	2302      	movs	r3, #2
 8002432:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002434:	2300      	movs	r3, #0
 8002436:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002438:	2303      	movs	r3, #3
 800243a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800243c:	2305      	movs	r3, #5
 800243e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002440:	f107 031c 	add.w	r3, r7, #28
 8002444:	4619      	mov	r1, r3
 8002446:	4828      	ldr	r0, [pc, #160]	; (80024e8 <HAL_SPI_MspInit+0x1f4>)
 8002448:	f000 ff9e 	bl	8003388 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800244c:	2308      	movs	r3, #8
 800244e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002450:	2302      	movs	r3, #2
 8002452:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002454:	2300      	movs	r3, #0
 8002456:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002458:	2303      	movs	r3, #3
 800245a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800245c:	2305      	movs	r3, #5
 800245e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002460:	f107 031c 	add.w	r3, r7, #28
 8002464:	4619      	mov	r1, r3
 8002466:	4821      	ldr	r0, [pc, #132]	; (80024ec <HAL_SPI_MspInit+0x1f8>)
 8002468:	f000 ff8e 	bl	8003388 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800246c:	4b20      	ldr	r3, [pc, #128]	; (80024f0 <HAL_SPI_MspInit+0x1fc>)
 800246e:	4a21      	ldr	r2, [pc, #132]	; (80024f4 <HAL_SPI_MspInit+0x200>)
 8002470:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8002472:	4b1f      	ldr	r3, [pc, #124]	; (80024f0 <HAL_SPI_MspInit+0x1fc>)
 8002474:	2200      	movs	r2, #0
 8002476:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002478:	4b1d      	ldr	r3, [pc, #116]	; (80024f0 <HAL_SPI_MspInit+0x1fc>)
 800247a:	2240      	movs	r2, #64	; 0x40
 800247c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800247e:	4b1c      	ldr	r3, [pc, #112]	; (80024f0 <HAL_SPI_MspInit+0x1fc>)
 8002480:	2200      	movs	r2, #0
 8002482:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002484:	4b1a      	ldr	r3, [pc, #104]	; (80024f0 <HAL_SPI_MspInit+0x1fc>)
 8002486:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800248a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800248c:	4b18      	ldr	r3, [pc, #96]	; (80024f0 <HAL_SPI_MspInit+0x1fc>)
 800248e:	2200      	movs	r2, #0
 8002490:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002492:	4b17      	ldr	r3, [pc, #92]	; (80024f0 <HAL_SPI_MspInit+0x1fc>)
 8002494:	2200      	movs	r2, #0
 8002496:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002498:	4b15      	ldr	r3, [pc, #84]	; (80024f0 <HAL_SPI_MspInit+0x1fc>)
 800249a:	2200      	movs	r2, #0
 800249c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800249e:	4b14      	ldr	r3, [pc, #80]	; (80024f0 <HAL_SPI_MspInit+0x1fc>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024a4:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <HAL_SPI_MspInit+0x1fc>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80024aa:	4811      	ldr	r0, [pc, #68]	; (80024f0 <HAL_SPI_MspInit+0x1fc>)
 80024ac:	f000 fb6a 	bl	8002b84 <HAL_DMA_Init>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <HAL_SPI_MspInit+0x1c6>
      Error_Handler();
 80024b6:	f7ff fa06 	bl	80018c6 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a0c      	ldr	r2, [pc, #48]	; (80024f0 <HAL_SPI_MspInit+0x1fc>)
 80024be:	649a      	str	r2, [r3, #72]	; 0x48
 80024c0:	4a0b      	ldr	r2, [pc, #44]	; (80024f0 <HAL_SPI_MspInit+0x1fc>)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80024c6:	bf00      	nop
 80024c8:	3730      	adds	r7, #48	; 0x30
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40013000 	.word	0x40013000
 80024d4:	40023800 	.word	0x40023800
 80024d8:	40020000 	.word	0x40020000
 80024dc:	200001b8 	.word	0x200001b8
 80024e0:	40026458 	.word	0x40026458
 80024e4:	40003800 	.word	0x40003800
 80024e8:	40020800 	.word	0x40020800
 80024ec:	40020c00 	.word	0x40020c00
 80024f0:	20000218 	.word	0x20000218
 80024f4:	40026070 	.word	0x40026070

080024f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a0e      	ldr	r2, [pc, #56]	; (8002540 <HAL_TIM_Base_MspInit+0x48>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d115      	bne.n	8002536 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800250a:	2300      	movs	r3, #0
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	4b0d      	ldr	r3, [pc, #52]	; (8002544 <HAL_TIM_Base_MspInit+0x4c>)
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	4a0c      	ldr	r2, [pc, #48]	; (8002544 <HAL_TIM_Base_MspInit+0x4c>)
 8002514:	f043 0310 	orr.w	r3, r3, #16
 8002518:	6413      	str	r3, [r2, #64]	; 0x40
 800251a:	4b0a      	ldr	r3, [pc, #40]	; (8002544 <HAL_TIM_Base_MspInit+0x4c>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	f003 0310 	and.w	r3, r3, #16
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002526:	2200      	movs	r2, #0
 8002528:	2100      	movs	r1, #0
 800252a:	2036      	movs	r0, #54	; 0x36
 800252c:	f000 faf3 	bl	8002b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002530:	2036      	movs	r0, #54	; 0x36
 8002532:	f000 fb0c 	bl	8002b4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002536:	bf00      	nop
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40001000 	.word	0x40001000
 8002544:	40023800 	.word	0x40023800

08002548 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b08a      	sub	sp, #40	; 0x28
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002550:	f107 0314 	add.w	r3, r7, #20
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	605a      	str	r2, [r3, #4]
 800255a:	609a      	str	r2, [r3, #8]
 800255c:	60da      	str	r2, [r3, #12]
 800255e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a1d      	ldr	r2, [pc, #116]	; (80025dc <HAL_UART_MspInit+0x94>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d133      	bne.n	80025d2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	613b      	str	r3, [r7, #16]
 800256e:	4b1c      	ldr	r3, [pc, #112]	; (80025e0 <HAL_UART_MspInit+0x98>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	4a1b      	ldr	r2, [pc, #108]	; (80025e0 <HAL_UART_MspInit+0x98>)
 8002574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002578:	6413      	str	r3, [r2, #64]	; 0x40
 800257a:	4b19      	ldr	r3, [pc, #100]	; (80025e0 <HAL_UART_MspInit+0x98>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002582:	613b      	str	r3, [r7, #16]
 8002584:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002586:	2300      	movs	r3, #0
 8002588:	60fb      	str	r3, [r7, #12]
 800258a:	4b15      	ldr	r3, [pc, #84]	; (80025e0 <HAL_UART_MspInit+0x98>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	4a14      	ldr	r2, [pc, #80]	; (80025e0 <HAL_UART_MspInit+0x98>)
 8002590:	f043 0308 	orr.w	r3, r3, #8
 8002594:	6313      	str	r3, [r2, #48]	; 0x30
 8002596:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <HAL_UART_MspInit+0x98>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	f003 0308 	and.w	r3, r3, #8
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80025a2:	2360      	movs	r3, #96	; 0x60
 80025a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a6:	2302      	movs	r3, #2
 80025a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025aa:	2300      	movs	r3, #0
 80025ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ae:	2303      	movs	r3, #3
 80025b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025b2:	2307      	movs	r3, #7
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025b6:	f107 0314 	add.w	r3, r7, #20
 80025ba:	4619      	mov	r1, r3
 80025bc:	4809      	ldr	r0, [pc, #36]	; (80025e4 <HAL_UART_MspInit+0x9c>)
 80025be:	f000 fee3 	bl	8003388 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80025c2:	2200      	movs	r2, #0
 80025c4:	2100      	movs	r1, #0
 80025c6:	2026      	movs	r0, #38	; 0x26
 80025c8:	f000 faa5 	bl	8002b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80025cc:	2026      	movs	r0, #38	; 0x26
 80025ce:	f000 fabe 	bl	8002b4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80025d2:	bf00      	nop
 80025d4:	3728      	adds	r7, #40	; 0x28
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40004400 	.word	0x40004400
 80025e0:	40023800 	.word	0x40023800
 80025e4:	40020c00 	.word	0x40020c00

080025e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025ec:	e7fe      	b.n	80025ec <NMI_Handler+0x4>

080025ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025ee:	b480      	push	{r7}
 80025f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025f2:	e7fe      	b.n	80025f2 <HardFault_Handler+0x4>

080025f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025f8:	e7fe      	b.n	80025f8 <MemManage_Handler+0x4>

080025fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025fa:	b480      	push	{r7}
 80025fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025fe:	e7fe      	b.n	80025fe <BusFault_Handler+0x4>

08002600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002604:	e7fe      	b.n	8002604 <UsageFault_Handler+0x4>

08002606 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002606:	b480      	push	{r7}
 8002608:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800260a:	bf00      	nop
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002618:	bf00      	nop
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002622:	b480      	push	{r7}
 8002624:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002626:	bf00      	nop
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002634:	f000 f950 	bl	80028d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002638:	bf00      	nop
 800263a:	bd80      	pop	{r7, pc}

0800263c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002640:	4802      	ldr	r0, [pc, #8]	; (800264c <DMA1_Stream4_IRQHandler+0x10>)
 8002642:	f000 fc37 	bl	8002eb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000218 	.word	0x20000218

08002650 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002654:	4802      	ldr	r0, [pc, #8]	; (8002660 <USART2_IRQHandler+0x10>)
 8002656:	f004 fd65 	bl	8007124 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	200002c0 	.word	0x200002c0

08002664 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002668:	4803      	ldr	r0, [pc, #12]	; (8002678 <TIM6_DAC_IRQHandler+0x14>)
 800266a:	f004 f9fd 	bl	8006a68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  tim6_overflow_flag = 0x01;
 800266e:	4b03      	ldr	r3, [pc, #12]	; (800267c <TIM6_DAC_IRQHandler+0x18>)
 8002670:	2201      	movs	r2, #1
 8002672:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002674:	bf00      	nop
 8002676:	bd80      	pop	{r7, pc}
 8002678:	20000278 	.word	0x20000278
 800267c:	2000030b 	.word	0x2000030b

08002680 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002684:	4802      	ldr	r0, [pc, #8]	; (8002690 <DMA2_Stream3_IRQHandler+0x10>)
 8002686:	f000 fc15 	bl	8002eb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	200001b8 	.word	0x200001b8

08002694 <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
	// Pull CS pin high to deselect the device
    if (hspi->Instance == SPI1) {
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a18      	ldr	r2, [pc, #96]	; (8002704 <HAL_SPI_TxCpltCallback+0x70>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d108      	bne.n	80026b8 <HAL_SPI_TxCpltCallback+0x24>
        // Pull CS pin high for SPI1 to deselect the device
    	HAL_GPIO_WritePin(cs_spi1.GPIOx, cs_spi1.GPIO_Pin, GPIO_PIN_SET);
 80026a6:	4b18      	ldr	r3, [pc, #96]	; (8002708 <HAL_SPI_TxCpltCallback+0x74>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a17      	ldr	r2, [pc, #92]	; (8002708 <HAL_SPI_TxCpltCallback+0x74>)
 80026ac:	8891      	ldrh	r1, [r2, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	4618      	mov	r0, r3
 80026b2:	f001 f82d 	bl	8003710 <HAL_GPIO_WritePin>
 80026b6:	e00c      	b.n	80026d2 <HAL_SPI_TxCpltCallback+0x3e>
    } else if (hspi->Instance == SPI2) {
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a13      	ldr	r2, [pc, #76]	; (800270c <HAL_SPI_TxCpltCallback+0x78>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d107      	bne.n	80026d2 <HAL_SPI_TxCpltCallback+0x3e>
        // Pull CS pin high for SPI2 to deselect the device
    	HAL_GPIO_WritePin(cs_spi2.GPIOx, cs_spi2.GPIO_Pin, GPIO_PIN_SET);
 80026c2:	4b13      	ldr	r3, [pc, #76]	; (8002710 <HAL_SPI_TxCpltCallback+0x7c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a12      	ldr	r2, [pc, #72]	; (8002710 <HAL_SPI_TxCpltCallback+0x7c>)
 80026c8:	8891      	ldrh	r1, [r2, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	4618      	mov	r0, r3
 80026ce:	f001 f81f 	bl	8003710 <HAL_GPIO_WritePin>
    }

    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0202 	bic.w	r2, r2, #2
 80026e0:	605a      	str	r2, [r3, #4]
    clean_data_buffer(PAGE_SIZE, data_buffer_tx[buffer_tracker ^ 0x01]);
 80026e2:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <HAL_SPI_TxCpltCallback+0x80>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	f083 0301 	eor.w	r3, r3, #1
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	021b      	lsls	r3, r3, #8
 80026ee:	4a0a      	ldr	r2, [pc, #40]	; (8002718 <HAL_SPI_TxCpltCallback+0x84>)
 80026f0:	4413      	add	r3, r2
 80026f2:	4619      	mov	r1, r3
 80026f4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80026f8:	f7fe fe54 	bl	80013a4 <clean_data_buffer>
}
 80026fc:	bf00      	nop
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40013000 	.word	0x40013000
 8002708:	20000540 	.word	0x20000540
 800270c:	40003800 	.word	0x40003800
 8002710:	20000550 	.word	0x20000550
 8002714:	2000050c 	.word	0x2000050c
 8002718:	2000030c 	.word	0x2000030c

0800271c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
	uart2_rec_flag = 0x01;
 8002724:	4b05      	ldr	r3, [pc, #20]	; (800273c <HAL_UART_RxCpltCallback+0x20>)
 8002726:	2201      	movs	r2, #1
 8002728:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, UARTRxData, 2);
 800272a:	2202      	movs	r2, #2
 800272c:	4904      	ldr	r1, [pc, #16]	; (8002740 <HAL_UART_RxCpltCallback+0x24>)
 800272e:	4805      	ldr	r0, [pc, #20]	; (8002744 <HAL_UART_RxCpltCallback+0x28>)
 8002730:	f004 fcd3 	bl	80070da <HAL_UART_Receive_IT>
}
 8002734:	bf00      	nop
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	2000030a 	.word	0x2000030a
 8002740:	20000308 	.word	0x20000308
 8002744:	200002c0 	.word	0x200002c0

08002748 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800274c:	4b06      	ldr	r3, [pc, #24]	; (8002768 <SystemInit+0x20>)
 800274e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002752:	4a05      	ldr	r2, [pc, #20]	; (8002768 <SystemInit+0x20>)
 8002754:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002758:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800275c:	bf00      	nop
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	e000ed00 	.word	0xe000ed00

0800276c <uart_transmit_page>:

#include "uart_transmit.h"
/**
 * Transmit one single page over the UART interface
 */
void uart_transmit_page(UART_HandleTypeDef *huart, uint8_t page[PAGE_SIZE]) {
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huart, page, PAGE_SIZE, HAL_MAX_DELAY);
 8002776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800277a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800277e:	6839      	ldr	r1, [r7, #0]
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f004 fc1f 	bl	8006fc4 <HAL_UART_Transmit>
}
 8002786:	bf00      	nop
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <send_uart_string>:

void send_uart_string(UART_HandleTypeDef *huart, const char *str) {
 800278e:	b580      	push	{r7, lr}
 8002790:	b082      	sub	sp, #8
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
 8002796:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8002798:	6838      	ldr	r0, [r7, #0]
 800279a:	f7fd fd27 	bl	80001ec <strlen>
 800279e:	4603      	mov	r3, r0
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027a6:	6839      	ldr	r1, [r7, #0]
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f004 fc0b 	bl	8006fc4 <HAL_UART_Transmit>
}
 80027ae:	bf00      	nop
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <send_uart_hex>:
	// Call the send_uart_string function to send the value to UART
	send_uart_string(huart, value_str);
	send_uart_string(huart, "\r\n");
}

void send_uart_hex(UART_HandleTypeDef *huart, uint8_t value) {
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b084      	sub	sp, #16
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
 80027be:	460b      	mov	r3, r1
 80027c0:	70fb      	strb	r3, [r7, #3]
	uint8_t buffer[1];
	buffer[0] = value;
 80027c2:	78fb      	ldrb	r3, [r7, #3]
 80027c4:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(huart, buffer, 1, HAL_MAX_DELAY);
 80027c6:	f107 010c 	add.w	r1, r7, #12
 80027ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027ce:	2201      	movs	r2, #1
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f004 fbf7 	bl	8006fc4 <HAL_UART_Transmit>
}
 80027d6:	bf00      	nop
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80027e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002818 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80027e4:	f7ff ffb0 	bl	8002748 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027e8:	480c      	ldr	r0, [pc, #48]	; (800281c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027ea:	490d      	ldr	r1, [pc, #52]	; (8002820 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027ec:	4a0d      	ldr	r2, [pc, #52]	; (8002824 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027f0:	e002      	b.n	80027f8 <LoopCopyDataInit>

080027f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027f6:	3304      	adds	r3, #4

080027f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027fc:	d3f9      	bcc.n	80027f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027fe:	4a0a      	ldr	r2, [pc, #40]	; (8002828 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002800:	4c0a      	ldr	r4, [pc, #40]	; (800282c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002804:	e001      	b.n	800280a <LoopFillZerobss>

08002806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002808:	3204      	adds	r2, #4

0800280a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800280a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800280c:	d3fb      	bcc.n	8002806 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800280e:	f005 fbe7 	bl	8007fe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002812:	f7fe fa1d 	bl	8000c50 <main>
  bx  lr    
 8002816:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002818:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800281c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002820:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8002824:	08008108 	.word	0x08008108
  ldr r2, =_sbss
 8002828:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 800282c:	20000580 	.word	0x20000580

08002830 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002830:	e7fe      	b.n	8002830 <ADC_IRQHandler>
	...

08002834 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002838:	4b0e      	ldr	r3, [pc, #56]	; (8002874 <HAL_Init+0x40>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a0d      	ldr	r2, [pc, #52]	; (8002874 <HAL_Init+0x40>)
 800283e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002842:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002844:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <HAL_Init+0x40>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a0a      	ldr	r2, [pc, #40]	; (8002874 <HAL_Init+0x40>)
 800284a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800284e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002850:	4b08      	ldr	r3, [pc, #32]	; (8002874 <HAL_Init+0x40>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a07      	ldr	r2, [pc, #28]	; (8002874 <HAL_Init+0x40>)
 8002856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800285a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800285c:	2003      	movs	r0, #3
 800285e:	f000 f94f 	bl	8002b00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002862:	200f      	movs	r0, #15
 8002864:	f000 f808 	bl	8002878 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002868:	f7ff fc74 	bl	8002154 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40023c00 	.word	0x40023c00

08002878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002880:	4b12      	ldr	r3, [pc, #72]	; (80028cc <HAL_InitTick+0x54>)
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <HAL_InitTick+0x58>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	4619      	mov	r1, r3
 800288a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800288e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002892:	fbb2 f3f3 	udiv	r3, r2, r3
 8002896:	4618      	mov	r0, r3
 8002898:	f000 f967 	bl	8002b6a <HAL_SYSTICK_Config>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e00e      	b.n	80028c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b0f      	cmp	r3, #15
 80028aa:	d80a      	bhi.n	80028c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028ac:	2200      	movs	r2, #0
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028b4:	f000 f92f 	bl	8002b16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028b8:	4a06      	ldr	r2, [pc, #24]	; (80028d4 <HAL_InitTick+0x5c>)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028be:	2300      	movs	r3, #0
 80028c0:	e000      	b.n	80028c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	20000018 	.word	0x20000018
 80028d0:	20000020 	.word	0x20000020
 80028d4:	2000001c 	.word	0x2000001c

080028d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028dc:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <HAL_IncTick+0x20>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	461a      	mov	r2, r3
 80028e2:	4b06      	ldr	r3, [pc, #24]	; (80028fc <HAL_IncTick+0x24>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4413      	add	r3, r2
 80028e8:	4a04      	ldr	r2, [pc, #16]	; (80028fc <HAL_IncTick+0x24>)
 80028ea:	6013      	str	r3, [r2, #0]
}
 80028ec:	bf00      	nop
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	20000020 	.word	0x20000020
 80028fc:	2000057c 	.word	0x2000057c

08002900 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  return uwTick;
 8002904:	4b03      	ldr	r3, [pc, #12]	; (8002914 <HAL_GetTick+0x14>)
 8002906:	681b      	ldr	r3, [r3, #0]
}
 8002908:	4618      	mov	r0, r3
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	2000057c 	.word	0x2000057c

08002918 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002920:	f7ff ffee 	bl	8002900 <HAL_GetTick>
 8002924:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002930:	d005      	beq.n	800293e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002932:	4b0a      	ldr	r3, [pc, #40]	; (800295c <HAL_Delay+0x44>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	461a      	mov	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4413      	add	r3, r2
 800293c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800293e:	bf00      	nop
 8002940:	f7ff ffde 	bl	8002900 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	429a      	cmp	r2, r3
 800294e:	d8f7      	bhi.n	8002940 <HAL_Delay+0x28>
  {
  }
}
 8002950:	bf00      	nop
 8002952:	bf00      	nop
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20000020 	.word	0x20000020

08002960 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002970:	4b0c      	ldr	r3, [pc, #48]	; (80029a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800297c:	4013      	ands	r3, r2
 800297e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002988:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800298c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002992:	4a04      	ldr	r2, [pc, #16]	; (80029a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	60d3      	str	r3, [r2, #12]
}
 8002998:	bf00      	nop
 800299a:	3714      	adds	r7, #20
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	e000ed00 	.word	0xe000ed00

080029a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029ac:	4b04      	ldr	r3, [pc, #16]	; (80029c0 <__NVIC_GetPriorityGrouping+0x18>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	0a1b      	lsrs	r3, r3, #8
 80029b2:	f003 0307 	and.w	r3, r3, #7
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	e000ed00 	.word	0xe000ed00

080029c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	4603      	mov	r3, r0
 80029cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	db0b      	blt.n	80029ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029d6:	79fb      	ldrb	r3, [r7, #7]
 80029d8:	f003 021f 	and.w	r2, r3, #31
 80029dc:	4907      	ldr	r1, [pc, #28]	; (80029fc <__NVIC_EnableIRQ+0x38>)
 80029de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e2:	095b      	lsrs	r3, r3, #5
 80029e4:	2001      	movs	r0, #1
 80029e6:	fa00 f202 	lsl.w	r2, r0, r2
 80029ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	e000e100 	.word	0xe000e100

08002a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	6039      	str	r1, [r7, #0]
 8002a0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	db0a      	blt.n	8002a2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	490c      	ldr	r1, [pc, #48]	; (8002a4c <__NVIC_SetPriority+0x4c>)
 8002a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1e:	0112      	lsls	r2, r2, #4
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	440b      	add	r3, r1
 8002a24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a28:	e00a      	b.n	8002a40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	b2da      	uxtb	r2, r3
 8002a2e:	4908      	ldr	r1, [pc, #32]	; (8002a50 <__NVIC_SetPriority+0x50>)
 8002a30:	79fb      	ldrb	r3, [r7, #7]
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	3b04      	subs	r3, #4
 8002a38:	0112      	lsls	r2, r2, #4
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	761a      	strb	r2, [r3, #24]
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	e000e100 	.word	0xe000e100
 8002a50:	e000ed00 	.word	0xe000ed00

08002a54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b089      	sub	sp, #36	; 0x24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	f1c3 0307 	rsb	r3, r3, #7
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	bf28      	it	cs
 8002a72:	2304      	movcs	r3, #4
 8002a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	3304      	adds	r3, #4
 8002a7a:	2b06      	cmp	r3, #6
 8002a7c:	d902      	bls.n	8002a84 <NVIC_EncodePriority+0x30>
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	3b03      	subs	r3, #3
 8002a82:	e000      	b.n	8002a86 <NVIC_EncodePriority+0x32>
 8002a84:	2300      	movs	r3, #0
 8002a86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	43da      	mvns	r2, r3
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	401a      	ands	r2, r3
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa6:	43d9      	mvns	r1, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aac:	4313      	orrs	r3, r2
         );
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3724      	adds	r7, #36	; 0x24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
	...

08002abc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002acc:	d301      	bcc.n	8002ad2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e00f      	b.n	8002af2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ad2:	4a0a      	ldr	r2, [pc, #40]	; (8002afc <SysTick_Config+0x40>)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ada:	210f      	movs	r1, #15
 8002adc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ae0:	f7ff ff8e 	bl	8002a00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ae4:	4b05      	ldr	r3, [pc, #20]	; (8002afc <SysTick_Config+0x40>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aea:	4b04      	ldr	r3, [pc, #16]	; (8002afc <SysTick_Config+0x40>)
 8002aec:	2207      	movs	r2, #7
 8002aee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	e000e010 	.word	0xe000e010

08002b00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f7ff ff29 	bl	8002960 <__NVIC_SetPriorityGrouping>
}
 8002b0e:	bf00      	nop
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b086      	sub	sp, #24
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	60b9      	str	r1, [r7, #8]
 8002b20:	607a      	str	r2, [r7, #4]
 8002b22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b28:	f7ff ff3e 	bl	80029a8 <__NVIC_GetPriorityGrouping>
 8002b2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	68b9      	ldr	r1, [r7, #8]
 8002b32:	6978      	ldr	r0, [r7, #20]
 8002b34:	f7ff ff8e 	bl	8002a54 <NVIC_EncodePriority>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b3e:	4611      	mov	r1, r2
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff ff5d 	bl	8002a00 <__NVIC_SetPriority>
}
 8002b46:	bf00      	nop
 8002b48:	3718      	adds	r7, #24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b082      	sub	sp, #8
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	4603      	mov	r3, r0
 8002b56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff ff31 	bl	80029c4 <__NVIC_EnableIRQ>
}
 8002b62:	bf00      	nop
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b082      	sub	sp, #8
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7ff ffa2 	bl	8002abc <SysTick_Config>
 8002b78:	4603      	mov	r3, r0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
	...

08002b84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b90:	f7ff feb6 	bl	8002900 <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e099      	b.n	8002cd4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 0201 	bic.w	r2, r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bc0:	e00f      	b.n	8002be2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bc2:	f7ff fe9d 	bl	8002900 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b05      	cmp	r3, #5
 8002bce:	d908      	bls.n	8002be2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2203      	movs	r2, #3
 8002bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e078      	b.n	8002cd4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1e8      	bne.n	8002bc2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	4b38      	ldr	r3, [pc, #224]	; (8002cdc <HAL_DMA_Init+0x158>)
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	2b04      	cmp	r3, #4
 8002c3a:	d107      	bne.n	8002c4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c44:	4313      	orrs	r3, r2
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	f023 0307 	bic.w	r3, r3, #7
 8002c62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	d117      	bne.n	8002ca6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00e      	beq.n	8002ca6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 fb01 	bl	8003290 <DMA_CheckFifoParam>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d008      	beq.n	8002ca6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2240      	movs	r2, #64	; 0x40
 8002c98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e016      	b.n	8002cd4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 fab8 	bl	8003224 <DMA_CalcBaseAndBitshift>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cbc:	223f      	movs	r2, #63	; 0x3f
 8002cbe:	409a      	lsls	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	f010803f 	.word	0xf010803f

08002ce0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
 8002cec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d101      	bne.n	8002d06 <HAL_DMA_Start_IT+0x26>
 8002d02:	2302      	movs	r3, #2
 8002d04:	e040      	b.n	8002d88 <HAL_DMA_Start_IT+0xa8>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d12f      	bne.n	8002d7a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	68b9      	ldr	r1, [r7, #8]
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 fa4a 	bl	80031c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d38:	223f      	movs	r2, #63	; 0x3f
 8002d3a:	409a      	lsls	r2, r3
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f042 0216 	orr.w	r2, r2, #22
 8002d4e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d007      	beq.n	8002d68 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f042 0208 	orr.w	r2, r2, #8
 8002d66:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0201 	orr.w	r2, r2, #1
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	e005      	b.n	8002d86 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d82:	2302      	movs	r3, #2
 8002d84:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d9e:	f7ff fdaf 	bl	8002900 <HAL_GetTick>
 8002da2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d008      	beq.n	8002dc2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2280      	movs	r2, #128	; 0x80
 8002db4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e052      	b.n	8002e68 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 0216 	bic.w	r2, r2, #22
 8002dd0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	695a      	ldr	r2, [r3, #20]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002de0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d103      	bne.n	8002df2 <HAL_DMA_Abort+0x62>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d007      	beq.n	8002e02 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 0208 	bic.w	r2, r2, #8
 8002e00:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0201 	bic.w	r2, r2, #1
 8002e10:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e12:	e013      	b.n	8002e3c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e14:	f7ff fd74 	bl	8002900 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b05      	cmp	r3, #5
 8002e20:	d90c      	bls.n	8002e3c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2220      	movs	r2, #32
 8002e26:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2203      	movs	r2, #3
 8002e2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e015      	b.n	8002e68 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1e4      	bne.n	8002e14 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e4e:	223f      	movs	r2, #63	; 0x3f
 8002e50:	409a      	lsls	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d004      	beq.n	8002e8e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2280      	movs	r2, #128	; 0x80
 8002e88:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e00c      	b.n	8002ea8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2205      	movs	r2, #5
 8002e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0201 	bic.w	r2, r2, #1
 8002ea4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ec0:	4b8e      	ldr	r3, [pc, #568]	; (80030fc <HAL_DMA_IRQHandler+0x248>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a8e      	ldr	r2, [pc, #568]	; (8003100 <HAL_DMA_IRQHandler+0x24c>)
 8002ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eca:	0a9b      	lsrs	r3, r3, #10
 8002ecc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ede:	2208      	movs	r2, #8
 8002ee0:	409a      	lsls	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d01a      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d013      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0204 	bic.w	r2, r2, #4
 8002f06:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0c:	2208      	movs	r2, #8
 8002f0e:	409a      	lsls	r2, r3
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f18:	f043 0201 	orr.w	r2, r3, #1
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f24:	2201      	movs	r2, #1
 8002f26:	409a      	lsls	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d012      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00b      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f42:	2201      	movs	r2, #1
 8002f44:	409a      	lsls	r2, r3
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4e:	f043 0202 	orr.w	r2, r3, #2
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f5a:	2204      	movs	r2, #4
 8002f5c:	409a      	lsls	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	4013      	ands	r3, r2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d012      	beq.n	8002f8c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00b      	beq.n	8002f8c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f78:	2204      	movs	r2, #4
 8002f7a:	409a      	lsls	r2, r3
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f84:	f043 0204 	orr.w	r2, r3, #4
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f90:	2210      	movs	r2, #16
 8002f92:	409a      	lsls	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	4013      	ands	r3, r2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d043      	beq.n	8003024 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d03c      	beq.n	8003024 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fae:	2210      	movs	r2, #16
 8002fb0:	409a      	lsls	r2, r3
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d018      	beq.n	8002ff6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d108      	bne.n	8002fe4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d024      	beq.n	8003024 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	4798      	blx	r3
 8002fe2:	e01f      	b.n	8003024 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d01b      	beq.n	8003024 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	4798      	blx	r3
 8002ff4:	e016      	b.n	8003024 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003000:	2b00      	cmp	r3, #0
 8003002:	d107      	bne.n	8003014 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 0208 	bic.w	r2, r2, #8
 8003012:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003028:	2220      	movs	r2, #32
 800302a:	409a      	lsls	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	4013      	ands	r3, r2
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 808f 	beq.w	8003154 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0310 	and.w	r3, r3, #16
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 8087 	beq.w	8003154 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800304a:	2220      	movs	r2, #32
 800304c:	409a      	lsls	r2, r3
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b05      	cmp	r3, #5
 800305c:	d136      	bne.n	80030cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 0216 	bic.w	r2, r2, #22
 800306c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	695a      	ldr	r2, [r3, #20]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800307c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	2b00      	cmp	r3, #0
 8003084:	d103      	bne.n	800308e <HAL_DMA_IRQHandler+0x1da>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800308a:	2b00      	cmp	r3, #0
 800308c:	d007      	beq.n	800309e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0208 	bic.w	r2, r2, #8
 800309c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a2:	223f      	movs	r2, #63	; 0x3f
 80030a4:	409a      	lsls	r2, r3
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d07e      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	4798      	blx	r3
        }
        return;
 80030ca:	e079      	b.n	80031c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d01d      	beq.n	8003116 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10d      	bne.n	8003104 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d031      	beq.n	8003154 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	4798      	blx	r3
 80030f8:	e02c      	b.n	8003154 <HAL_DMA_IRQHandler+0x2a0>
 80030fa:	bf00      	nop
 80030fc:	20000018 	.word	0x20000018
 8003100:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003108:	2b00      	cmp	r3, #0
 800310a:	d023      	beq.n	8003154 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	4798      	blx	r3
 8003114:	e01e      	b.n	8003154 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10f      	bne.n	8003144 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0210 	bic.w	r2, r2, #16
 8003132:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003148:	2b00      	cmp	r3, #0
 800314a:	d003      	beq.n	8003154 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003158:	2b00      	cmp	r3, #0
 800315a:	d032      	beq.n	80031c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	2b00      	cmp	r3, #0
 8003166:	d022      	beq.n	80031ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2205      	movs	r2, #5
 800316c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 0201 	bic.w	r2, r2, #1
 800317e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	3301      	adds	r3, #1
 8003184:	60bb      	str	r3, [r7, #8]
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	429a      	cmp	r2, r3
 800318a:	d307      	bcc.n	800319c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1f2      	bne.n	8003180 <HAL_DMA_IRQHandler+0x2cc>
 800319a:	e000      	b.n	800319e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800319c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d005      	beq.n	80031c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	4798      	blx	r3
 80031be:	e000      	b.n	80031c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80031c0:	bf00      	nop
    }
  }
}
 80031c2:	3718      	adds	r7, #24
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
 80031d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	2b40      	cmp	r3, #64	; 0x40
 80031f4:	d108      	bne.n	8003208 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003206:	e007      	b.n	8003218 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	60da      	str	r2, [r3, #12]
}
 8003218:	bf00      	nop
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	b2db      	uxtb	r3, r3
 8003232:	3b10      	subs	r3, #16
 8003234:	4a14      	ldr	r2, [pc, #80]	; (8003288 <DMA_CalcBaseAndBitshift+0x64>)
 8003236:	fba2 2303 	umull	r2, r3, r2, r3
 800323a:	091b      	lsrs	r3, r3, #4
 800323c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800323e:	4a13      	ldr	r2, [pc, #76]	; (800328c <DMA_CalcBaseAndBitshift+0x68>)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4413      	add	r3, r2
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	461a      	mov	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2b03      	cmp	r3, #3
 8003250:	d909      	bls.n	8003266 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800325a:	f023 0303 	bic.w	r3, r3, #3
 800325e:	1d1a      	adds	r2, r3, #4
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	659a      	str	r2, [r3, #88]	; 0x58
 8003264:	e007      	b.n	8003276 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800326e:	f023 0303 	bic.w	r3, r3, #3
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800327a:	4618      	mov	r0, r3
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	aaaaaaab 	.word	0xaaaaaaab
 800328c:	080080f0 	.word	0x080080f0

08003290 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003298:	2300      	movs	r3, #0
 800329a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d11f      	bne.n	80032ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	2b03      	cmp	r3, #3
 80032ae:	d856      	bhi.n	800335e <DMA_CheckFifoParam+0xce>
 80032b0:	a201      	add	r2, pc, #4	; (adr r2, 80032b8 <DMA_CheckFifoParam+0x28>)
 80032b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b6:	bf00      	nop
 80032b8:	080032c9 	.word	0x080032c9
 80032bc:	080032db 	.word	0x080032db
 80032c0:	080032c9 	.word	0x080032c9
 80032c4:	0800335f 	.word	0x0800335f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d046      	beq.n	8003362 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032d8:	e043      	b.n	8003362 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032e2:	d140      	bne.n	8003366 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032e8:	e03d      	b.n	8003366 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032f2:	d121      	bne.n	8003338 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2b03      	cmp	r3, #3
 80032f8:	d837      	bhi.n	800336a <DMA_CheckFifoParam+0xda>
 80032fa:	a201      	add	r2, pc, #4	; (adr r2, 8003300 <DMA_CheckFifoParam+0x70>)
 80032fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003300:	08003311 	.word	0x08003311
 8003304:	08003317 	.word	0x08003317
 8003308:	08003311 	.word	0x08003311
 800330c:	08003329 	.word	0x08003329
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	73fb      	strb	r3, [r7, #15]
      break;
 8003314:	e030      	b.n	8003378 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d025      	beq.n	800336e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003326:	e022      	b.n	800336e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003330:	d11f      	bne.n	8003372 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003336:	e01c      	b.n	8003372 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	2b02      	cmp	r3, #2
 800333c:	d903      	bls.n	8003346 <DMA_CheckFifoParam+0xb6>
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	2b03      	cmp	r3, #3
 8003342:	d003      	beq.n	800334c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003344:	e018      	b.n	8003378 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	73fb      	strb	r3, [r7, #15]
      break;
 800334a:	e015      	b.n	8003378 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003350:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00e      	beq.n	8003376 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	73fb      	strb	r3, [r7, #15]
      break;
 800335c:	e00b      	b.n	8003376 <DMA_CheckFifoParam+0xe6>
      break;
 800335e:	bf00      	nop
 8003360:	e00a      	b.n	8003378 <DMA_CheckFifoParam+0xe8>
      break;
 8003362:	bf00      	nop
 8003364:	e008      	b.n	8003378 <DMA_CheckFifoParam+0xe8>
      break;
 8003366:	bf00      	nop
 8003368:	e006      	b.n	8003378 <DMA_CheckFifoParam+0xe8>
      break;
 800336a:	bf00      	nop
 800336c:	e004      	b.n	8003378 <DMA_CheckFifoParam+0xe8>
      break;
 800336e:	bf00      	nop
 8003370:	e002      	b.n	8003378 <DMA_CheckFifoParam+0xe8>
      break;   
 8003372:	bf00      	nop
 8003374:	e000      	b.n	8003378 <DMA_CheckFifoParam+0xe8>
      break;
 8003376:	bf00      	nop
    }
  } 
  
  return status; 
 8003378:	7bfb      	ldrb	r3, [r7, #15]
}
 800337a:	4618      	mov	r0, r3
 800337c:	3714      	adds	r7, #20
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop

08003388 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003388:	b480      	push	{r7}
 800338a:	b089      	sub	sp, #36	; 0x24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003392:	2300      	movs	r3, #0
 8003394:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003396:	2300      	movs	r3, #0
 8003398:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800339a:	2300      	movs	r3, #0
 800339c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800339e:	2300      	movs	r3, #0
 80033a0:	61fb      	str	r3, [r7, #28]
 80033a2:	e177      	b.n	8003694 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033a4:	2201      	movs	r2, #1
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	4013      	ands	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	429a      	cmp	r2, r3
 80033be:	f040 8166 	bne.w	800368e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d005      	beq.n	80033da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d130      	bne.n	800343c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	2203      	movs	r2, #3
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	43db      	mvns	r3, r3
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	4013      	ands	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	4313      	orrs	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003410:	2201      	movs	r2, #1
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	43db      	mvns	r3, r3
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	4013      	ands	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	091b      	lsrs	r3, r3, #4
 8003426:	f003 0201 	and.w	r2, r3, #1
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4313      	orrs	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f003 0303 	and.w	r3, r3, #3
 8003444:	2b03      	cmp	r3, #3
 8003446:	d017      	beq.n	8003478 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	2203      	movs	r2, #3
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	43db      	mvns	r3, r3
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	4013      	ands	r3, r2
 800345e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	4313      	orrs	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f003 0303 	and.w	r3, r3, #3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d123      	bne.n	80034cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	08da      	lsrs	r2, r3, #3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3208      	adds	r2, #8
 800348c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003490:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	220f      	movs	r2, #15
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	43db      	mvns	r3, r3
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	4013      	ands	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	691a      	ldr	r2, [r3, #16]
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	f003 0307 	and.w	r3, r3, #7
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	08da      	lsrs	r2, r3, #3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	3208      	adds	r2, #8
 80034c6:	69b9      	ldr	r1, [r7, #24]
 80034c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	2203      	movs	r2, #3
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	43db      	mvns	r3, r3
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	4013      	ands	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f003 0203 	and.w	r2, r3, #3
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 80c0 	beq.w	800368e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800350e:	2300      	movs	r3, #0
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	4b66      	ldr	r3, [pc, #408]	; (80036ac <HAL_GPIO_Init+0x324>)
 8003514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003516:	4a65      	ldr	r2, [pc, #404]	; (80036ac <HAL_GPIO_Init+0x324>)
 8003518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800351c:	6453      	str	r3, [r2, #68]	; 0x44
 800351e:	4b63      	ldr	r3, [pc, #396]	; (80036ac <HAL_GPIO_Init+0x324>)
 8003520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800352a:	4a61      	ldr	r2, [pc, #388]	; (80036b0 <HAL_GPIO_Init+0x328>)
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	089b      	lsrs	r3, r3, #2
 8003530:	3302      	adds	r3, #2
 8003532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003536:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	220f      	movs	r2, #15
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	43db      	mvns	r3, r3
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	4013      	ands	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a58      	ldr	r2, [pc, #352]	; (80036b4 <HAL_GPIO_Init+0x32c>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d037      	beq.n	80035c6 <HAL_GPIO_Init+0x23e>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a57      	ldr	r2, [pc, #348]	; (80036b8 <HAL_GPIO_Init+0x330>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d031      	beq.n	80035c2 <HAL_GPIO_Init+0x23a>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a56      	ldr	r2, [pc, #344]	; (80036bc <HAL_GPIO_Init+0x334>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d02b      	beq.n	80035be <HAL_GPIO_Init+0x236>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a55      	ldr	r2, [pc, #340]	; (80036c0 <HAL_GPIO_Init+0x338>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d025      	beq.n	80035ba <HAL_GPIO_Init+0x232>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a54      	ldr	r2, [pc, #336]	; (80036c4 <HAL_GPIO_Init+0x33c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d01f      	beq.n	80035b6 <HAL_GPIO_Init+0x22e>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a53      	ldr	r2, [pc, #332]	; (80036c8 <HAL_GPIO_Init+0x340>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d019      	beq.n	80035b2 <HAL_GPIO_Init+0x22a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a52      	ldr	r2, [pc, #328]	; (80036cc <HAL_GPIO_Init+0x344>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d013      	beq.n	80035ae <HAL_GPIO_Init+0x226>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a51      	ldr	r2, [pc, #324]	; (80036d0 <HAL_GPIO_Init+0x348>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d00d      	beq.n	80035aa <HAL_GPIO_Init+0x222>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a50      	ldr	r2, [pc, #320]	; (80036d4 <HAL_GPIO_Init+0x34c>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d007      	beq.n	80035a6 <HAL_GPIO_Init+0x21e>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a4f      	ldr	r2, [pc, #316]	; (80036d8 <HAL_GPIO_Init+0x350>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d101      	bne.n	80035a2 <HAL_GPIO_Init+0x21a>
 800359e:	2309      	movs	r3, #9
 80035a0:	e012      	b.n	80035c8 <HAL_GPIO_Init+0x240>
 80035a2:	230a      	movs	r3, #10
 80035a4:	e010      	b.n	80035c8 <HAL_GPIO_Init+0x240>
 80035a6:	2308      	movs	r3, #8
 80035a8:	e00e      	b.n	80035c8 <HAL_GPIO_Init+0x240>
 80035aa:	2307      	movs	r3, #7
 80035ac:	e00c      	b.n	80035c8 <HAL_GPIO_Init+0x240>
 80035ae:	2306      	movs	r3, #6
 80035b0:	e00a      	b.n	80035c8 <HAL_GPIO_Init+0x240>
 80035b2:	2305      	movs	r3, #5
 80035b4:	e008      	b.n	80035c8 <HAL_GPIO_Init+0x240>
 80035b6:	2304      	movs	r3, #4
 80035b8:	e006      	b.n	80035c8 <HAL_GPIO_Init+0x240>
 80035ba:	2303      	movs	r3, #3
 80035bc:	e004      	b.n	80035c8 <HAL_GPIO_Init+0x240>
 80035be:	2302      	movs	r3, #2
 80035c0:	e002      	b.n	80035c8 <HAL_GPIO_Init+0x240>
 80035c2:	2301      	movs	r3, #1
 80035c4:	e000      	b.n	80035c8 <HAL_GPIO_Init+0x240>
 80035c6:	2300      	movs	r3, #0
 80035c8:	69fa      	ldr	r2, [r7, #28]
 80035ca:	f002 0203 	and.w	r2, r2, #3
 80035ce:	0092      	lsls	r2, r2, #2
 80035d0:	4093      	lsls	r3, r2
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035d8:	4935      	ldr	r1, [pc, #212]	; (80036b0 <HAL_GPIO_Init+0x328>)
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	089b      	lsrs	r3, r3, #2
 80035de:	3302      	adds	r3, #2
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035e6:	4b3d      	ldr	r3, [pc, #244]	; (80036dc <HAL_GPIO_Init+0x354>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	43db      	mvns	r3, r3
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	4013      	ands	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	4313      	orrs	r3, r2
 8003608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800360a:	4a34      	ldr	r2, [pc, #208]	; (80036dc <HAL_GPIO_Init+0x354>)
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003610:	4b32      	ldr	r3, [pc, #200]	; (80036dc <HAL_GPIO_Init+0x354>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	43db      	mvns	r3, r3
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	4013      	ands	r3, r2
 800361e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	4313      	orrs	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003634:	4a29      	ldr	r2, [pc, #164]	; (80036dc <HAL_GPIO_Init+0x354>)
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800363a:	4b28      	ldr	r3, [pc, #160]	; (80036dc <HAL_GPIO_Init+0x354>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	43db      	mvns	r3, r3
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4013      	ands	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d003      	beq.n	800365e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	4313      	orrs	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800365e:	4a1f      	ldr	r2, [pc, #124]	; (80036dc <HAL_GPIO_Init+0x354>)
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003664:	4b1d      	ldr	r3, [pc, #116]	; (80036dc <HAL_GPIO_Init+0x354>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	43db      	mvns	r3, r3
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4013      	ands	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	4313      	orrs	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003688:	4a14      	ldr	r2, [pc, #80]	; (80036dc <HAL_GPIO_Init+0x354>)
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	3301      	adds	r3, #1
 8003692:	61fb      	str	r3, [r7, #28]
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	2b0f      	cmp	r3, #15
 8003698:	f67f ae84 	bls.w	80033a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800369c:	bf00      	nop
 800369e:	bf00      	nop
 80036a0:	3724      	adds	r7, #36	; 0x24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	40023800 	.word	0x40023800
 80036b0:	40013800 	.word	0x40013800
 80036b4:	40020000 	.word	0x40020000
 80036b8:	40020400 	.word	0x40020400
 80036bc:	40020800 	.word	0x40020800
 80036c0:	40020c00 	.word	0x40020c00
 80036c4:	40021000 	.word	0x40021000
 80036c8:	40021400 	.word	0x40021400
 80036cc:	40021800 	.word	0x40021800
 80036d0:	40021c00 	.word	0x40021c00
 80036d4:	40022000 	.word	0x40022000
 80036d8:	40022400 	.word	0x40022400
 80036dc:	40013c00 	.word	0x40013c00

080036e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	691a      	ldr	r2, [r3, #16]
 80036f0:	887b      	ldrh	r3, [r7, #2]
 80036f2:	4013      	ands	r3, r2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d002      	beq.n	80036fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036f8:	2301      	movs	r3, #1
 80036fa:	73fb      	strb	r3, [r7, #15]
 80036fc:	e001      	b.n	8003702 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036fe:	2300      	movs	r3, #0
 8003700:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003702:	7bfb      	ldrb	r3, [r7, #15]
}
 8003704:	4618      	mov	r0, r3
 8003706:	3714      	adds	r7, #20
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	460b      	mov	r3, r1
 800371a:	807b      	strh	r3, [r7, #2]
 800371c:	4613      	mov	r3, r2
 800371e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003720:	787b      	ldrb	r3, [r7, #1]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003726:	887a      	ldrh	r2, [r7, #2]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800372c:	e003      	b.n	8003736 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800372e:	887b      	ldrh	r3, [r7, #2]
 8003730:	041a      	lsls	r2, r3, #16
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	619a      	str	r2, [r3, #24]
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003742:	b480      	push	{r7}
 8003744:	b085      	sub	sp, #20
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
 800374a:	460b      	mov	r3, r1
 800374c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003754:	887a      	ldrh	r2, [r7, #2]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	4013      	ands	r3, r2
 800375a:	041a      	lsls	r2, r3, #16
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	43d9      	mvns	r1, r3
 8003760:	887b      	ldrh	r3, [r7, #2]
 8003762:	400b      	ands	r3, r1
 8003764:	431a      	orrs	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	619a      	str	r2, [r3, #24]
}
 800376a:	bf00      	nop
 800376c:	3714      	adds	r7, #20
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
	...

08003778 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e12b      	b.n	80039e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d106      	bne.n	80037a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7fe fd00 	bl	80021a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2224      	movs	r2, #36	; 0x24
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0201 	bic.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037dc:	f001 fc72 	bl	80050c4 <HAL_RCC_GetPCLK1Freq>
 80037e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	4a81      	ldr	r2, [pc, #516]	; (80039ec <HAL_I2C_Init+0x274>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d807      	bhi.n	80037fc <HAL_I2C_Init+0x84>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4a80      	ldr	r2, [pc, #512]	; (80039f0 <HAL_I2C_Init+0x278>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	bf94      	ite	ls
 80037f4:	2301      	movls	r3, #1
 80037f6:	2300      	movhi	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	e006      	b.n	800380a <HAL_I2C_Init+0x92>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	4a7d      	ldr	r2, [pc, #500]	; (80039f4 <HAL_I2C_Init+0x27c>)
 8003800:	4293      	cmp	r3, r2
 8003802:	bf94      	ite	ls
 8003804:	2301      	movls	r3, #1
 8003806:	2300      	movhi	r3, #0
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e0e7      	b.n	80039e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	4a78      	ldr	r2, [pc, #480]	; (80039f8 <HAL_I2C_Init+0x280>)
 8003816:	fba2 2303 	umull	r2, r3, r2, r3
 800381a:	0c9b      	lsrs	r3, r3, #18
 800381c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	430a      	orrs	r2, r1
 8003830:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	4a6a      	ldr	r2, [pc, #424]	; (80039ec <HAL_I2C_Init+0x274>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d802      	bhi.n	800384c <HAL_I2C_Init+0xd4>
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	3301      	adds	r3, #1
 800384a:	e009      	b.n	8003860 <HAL_I2C_Init+0xe8>
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003852:	fb02 f303 	mul.w	r3, r2, r3
 8003856:	4a69      	ldr	r2, [pc, #420]	; (80039fc <HAL_I2C_Init+0x284>)
 8003858:	fba2 2303 	umull	r2, r3, r2, r3
 800385c:	099b      	lsrs	r3, r3, #6
 800385e:	3301      	adds	r3, #1
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6812      	ldr	r2, [r2, #0]
 8003864:	430b      	orrs	r3, r1
 8003866:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003872:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	495c      	ldr	r1, [pc, #368]	; (80039ec <HAL_I2C_Init+0x274>)
 800387c:	428b      	cmp	r3, r1
 800387e:	d819      	bhi.n	80038b4 <HAL_I2C_Init+0x13c>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	1e59      	subs	r1, r3, #1
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	fbb1 f3f3 	udiv	r3, r1, r3
 800388e:	1c59      	adds	r1, r3, #1
 8003890:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003894:	400b      	ands	r3, r1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00a      	beq.n	80038b0 <HAL_I2C_Init+0x138>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	1e59      	subs	r1, r3, #1
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80038a8:	3301      	adds	r3, #1
 80038aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ae:	e051      	b.n	8003954 <HAL_I2C_Init+0x1dc>
 80038b0:	2304      	movs	r3, #4
 80038b2:	e04f      	b.n	8003954 <HAL_I2C_Init+0x1dc>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d111      	bne.n	80038e0 <HAL_I2C_Init+0x168>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	1e58      	subs	r0, r3, #1
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6859      	ldr	r1, [r3, #4]
 80038c4:	460b      	mov	r3, r1
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	440b      	add	r3, r1
 80038ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ce:	3301      	adds	r3, #1
 80038d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	bf0c      	ite	eq
 80038d8:	2301      	moveq	r3, #1
 80038da:	2300      	movne	r3, #0
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	e012      	b.n	8003906 <HAL_I2C_Init+0x18e>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	1e58      	subs	r0, r3, #1
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6859      	ldr	r1, [r3, #4]
 80038e8:	460b      	mov	r3, r1
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	0099      	lsls	r1, r3, #2
 80038f0:	440b      	add	r3, r1
 80038f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80038f6:	3301      	adds	r3, #1
 80038f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	bf0c      	ite	eq
 8003900:	2301      	moveq	r3, #1
 8003902:	2300      	movne	r3, #0
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <HAL_I2C_Init+0x196>
 800390a:	2301      	movs	r3, #1
 800390c:	e022      	b.n	8003954 <HAL_I2C_Init+0x1dc>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10e      	bne.n	8003934 <HAL_I2C_Init+0x1bc>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	1e58      	subs	r0, r3, #1
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6859      	ldr	r1, [r3, #4]
 800391e:	460b      	mov	r3, r1
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	440b      	add	r3, r1
 8003924:	fbb0 f3f3 	udiv	r3, r0, r3
 8003928:	3301      	adds	r3, #1
 800392a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800392e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003932:	e00f      	b.n	8003954 <HAL_I2C_Init+0x1dc>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	1e58      	subs	r0, r3, #1
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6859      	ldr	r1, [r3, #4]
 800393c:	460b      	mov	r3, r1
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	440b      	add	r3, r1
 8003942:	0099      	lsls	r1, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	fbb0 f3f3 	udiv	r3, r0, r3
 800394a:	3301      	adds	r3, #1
 800394c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003950:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003954:	6879      	ldr	r1, [r7, #4]
 8003956:	6809      	ldr	r1, [r1, #0]
 8003958:	4313      	orrs	r3, r2
 800395a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	69da      	ldr	r2, [r3, #28]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	431a      	orrs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003982:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6911      	ldr	r1, [r2, #16]
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	68d2      	ldr	r2, [r2, #12]
 800398e:	4311      	orrs	r1, r2
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6812      	ldr	r2, [r2, #0]
 8003994:	430b      	orrs	r3, r1
 8003996:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	695a      	ldr	r2, [r3, #20]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	431a      	orrs	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	430a      	orrs	r2, r1
 80039b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 0201 	orr.w	r2, r2, #1
 80039c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2220      	movs	r2, #32
 80039ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	000186a0 	.word	0x000186a0
 80039f0:	001e847f 	.word	0x001e847f
 80039f4:	003d08ff 	.word	0x003d08ff
 80039f8:	431bde83 	.word	0x431bde83
 80039fc:	10624dd3 	.word	0x10624dd3

08003a00 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b088      	sub	sp, #32
 8003a04:	af02      	add	r7, sp, #8
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	607a      	str	r2, [r7, #4]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	817b      	strh	r3, [r7, #10]
 8003a10:	4613      	mov	r3, r2
 8003a12:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a14:	f7fe ff74 	bl	8002900 <HAL_GetTick>
 8003a18:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b20      	cmp	r3, #32
 8003a24:	f040 80e0 	bne.w	8003be8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	2319      	movs	r3, #25
 8003a2e:	2201      	movs	r2, #1
 8003a30:	4970      	ldr	r1, [pc, #448]	; (8003bf4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 fc64 	bl	8004300 <I2C_WaitOnFlagUntilTimeout>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003a3e:	2302      	movs	r3, #2
 8003a40:	e0d3      	b.n	8003bea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d101      	bne.n	8003a50 <HAL_I2C_Master_Transmit+0x50>
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	e0cc      	b.n	8003bea <HAL_I2C_Master_Transmit+0x1ea>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d007      	beq.n	8003a76 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f042 0201 	orr.w	r2, r2, #1
 8003a74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a84:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2221      	movs	r2, #33	; 0x21
 8003a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2210      	movs	r2, #16
 8003a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	893a      	ldrh	r2, [r7, #8]
 8003aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	4a50      	ldr	r2, [pc, #320]	; (8003bf8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003ab6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ab8:	8979      	ldrh	r1, [r7, #10]
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	6a3a      	ldr	r2, [r7, #32]
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 face 	bl	8004060 <I2C_MasterRequestWrite>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e08d      	b.n	8003bea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ace:	2300      	movs	r3, #0
 8003ad0:	613b      	str	r3, [r7, #16]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	613b      	str	r3, [r7, #16]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	613b      	str	r3, [r7, #16]
 8003ae2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003ae4:	e066      	b.n	8003bb4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	6a39      	ldr	r1, [r7, #32]
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 fd22 	bl	8004534 <I2C_WaitOnTXEFlagUntilTimeout>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00d      	beq.n	8003b12 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	d107      	bne.n	8003b0e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e06b      	b.n	8003bea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	781a      	ldrb	r2, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b22:	1c5a      	adds	r2, r3, #1
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b04      	cmp	r3, #4
 8003b4e:	d11b      	bne.n	8003b88 <HAL_I2C_Master_Transmit+0x188>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d017      	beq.n	8003b88 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	781a      	ldrb	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	1c5a      	adds	r2, r3, #1
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	3b01      	subs	r3, #1
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b80:	3b01      	subs	r3, #1
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	6a39      	ldr	r1, [r7, #32]
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f000 fd19 	bl	80045c4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00d      	beq.n	8003bb4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	d107      	bne.n	8003bb0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e01a      	b.n	8003bea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d194      	bne.n	8003ae6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003be4:	2300      	movs	r3, #0
 8003be6:	e000      	b.n	8003bea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003be8:	2302      	movs	r3, #2
  }
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3718      	adds	r7, #24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	00100002 	.word	0x00100002
 8003bf8:	ffff0000 	.word	0xffff0000

08003bfc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b08c      	sub	sp, #48	; 0x30
 8003c00:	af02      	add	r7, sp, #8
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	607a      	str	r2, [r7, #4]
 8003c06:	461a      	mov	r2, r3
 8003c08:	460b      	mov	r3, r1
 8003c0a:	817b      	strh	r3, [r7, #10]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c10:	f7fe fe76 	bl	8002900 <HAL_GetTick>
 8003c14:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b20      	cmp	r3, #32
 8003c20:	f040 8217 	bne.w	8004052 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	2319      	movs	r3, #25
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	497c      	ldr	r1, [pc, #496]	; (8003e20 <HAL_I2C_Master_Receive+0x224>)
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 fb66 	bl	8004300 <I2C_WaitOnFlagUntilTimeout>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	e20a      	b.n	8004054 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d101      	bne.n	8003c4c <HAL_I2C_Master_Receive+0x50>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	e203      	b.n	8004054 <HAL_I2C_Master_Receive+0x458>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d007      	beq.n	8003c72 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f042 0201 	orr.w	r2, r2, #1
 8003c70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c80:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2222      	movs	r2, #34	; 0x22
 8003c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2210      	movs	r2, #16
 8003c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	893a      	ldrh	r2, [r7, #8]
 8003ca2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4a5c      	ldr	r2, [pc, #368]	; (8003e24 <HAL_I2C_Master_Receive+0x228>)
 8003cb2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003cb4:	8979      	ldrh	r1, [r7, #10]
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f000 fa52 	bl	8004164 <I2C_MasterRequestRead>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e1c4      	b.n	8004054 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d113      	bne.n	8003cfa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	623b      	str	r3, [r7, #32]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	623b      	str	r3, [r7, #32]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	623b      	str	r3, [r7, #32]
 8003ce6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	e198      	b.n	800402c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d11b      	bne.n	8003d3a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d12:	2300      	movs	r3, #0
 8003d14:	61fb      	str	r3, [r7, #28]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	61fb      	str	r3, [r7, #28]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	61fb      	str	r3, [r7, #28]
 8003d26:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	e178      	b.n	800402c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d11b      	bne.n	8003d7a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d50:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d62:	2300      	movs	r3, #0
 8003d64:	61bb      	str	r3, [r7, #24]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	61bb      	str	r3, [r7, #24]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	61bb      	str	r3, [r7, #24]
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	e158      	b.n	800402c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	617b      	str	r3, [r7, #20]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	617b      	str	r3, [r7, #20]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	617b      	str	r3, [r7, #20]
 8003d9e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003da0:	e144      	b.n	800402c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da6:	2b03      	cmp	r3, #3
 8003da8:	f200 80f1 	bhi.w	8003f8e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d123      	bne.n	8003dfc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f000 fc4b 	bl	8004654 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e145      	b.n	8004054 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	691a      	ldr	r2, [r3, #16]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd2:	b2d2      	uxtb	r2, r2
 8003dd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	1c5a      	adds	r2, r3, #1
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003de4:	3b01      	subs	r3, #1
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	3b01      	subs	r3, #1
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003dfa:	e117      	b.n	800402c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d14e      	bne.n	8003ea2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	4906      	ldr	r1, [pc, #24]	; (8003e28 <HAL_I2C_Master_Receive+0x22c>)
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f000 fa76 	bl	8004300 <I2C_WaitOnFlagUntilTimeout>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d008      	beq.n	8003e2c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e11a      	b.n	8004054 <HAL_I2C_Master_Receive+0x458>
 8003e1e:	bf00      	nop
 8003e20:	00100002 	.word	0x00100002
 8003e24:	ffff0000 	.word	0xffff0000
 8003e28:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	691a      	ldr	r2, [r3, #16]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e46:	b2d2      	uxtb	r2, r2
 8003e48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	1c5a      	adds	r2, r3, #1
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	3b01      	subs	r3, #1
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	691a      	ldr	r2, [r3, #16]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	b2d2      	uxtb	r2, r2
 8003e7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e80:	1c5a      	adds	r2, r3, #1
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ea0:	e0c4      	b.n	800402c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	496c      	ldr	r1, [pc, #432]	; (800405c <HAL_I2C_Master_Receive+0x460>)
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f000 fa27 	bl	8004300 <I2C_WaitOnFlagUntilTimeout>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e0cb      	b.n	8004054 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	691a      	ldr	r2, [r3, #16]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed6:	b2d2      	uxtb	r2, r2
 8003ed8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ede:	1c5a      	adds	r2, r3, #1
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f04:	2200      	movs	r2, #0
 8003f06:	4955      	ldr	r1, [pc, #340]	; (800405c <HAL_I2C_Master_Receive+0x460>)
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f000 f9f9 	bl	8004300 <I2C_WaitOnFlagUntilTimeout>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d001      	beq.n	8003f18 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e09d      	b.n	8004054 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	691a      	ldr	r2, [r3, #16]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f32:	b2d2      	uxtb	r2, r2
 8003f34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	1c5a      	adds	r2, r3, #1
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f44:	3b01      	subs	r3, #1
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	691a      	ldr	r2, [r3, #16]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	b2d2      	uxtb	r2, r2
 8003f66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6c:	1c5a      	adds	r2, r3, #1
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f76:	3b01      	subs	r3, #1
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	3b01      	subs	r3, #1
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f8c:	e04e      	b.n	800402c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f000 fb5e 	bl	8004654 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e058      	b.n	8004054 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	691a      	ldr	r2, [r3, #16]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	b2d2      	uxtb	r2, r2
 8003fae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb4:	1c5a      	adds	r2, r3, #1
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	f003 0304 	and.w	r3, r3, #4
 8003fde:	2b04      	cmp	r3, #4
 8003fe0:	d124      	bne.n	800402c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe6:	2b03      	cmp	r3, #3
 8003fe8:	d107      	bne.n	8003ffa <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ff8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	691a      	ldr	r2, [r3, #16]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	b2d2      	uxtb	r2, r2
 8004006:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	1c5a      	adds	r2, r3, #1
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004016:	3b01      	subs	r3, #1
 8004018:	b29a      	uxth	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004022:	b29b      	uxth	r3, r3
 8004024:	3b01      	subs	r3, #1
 8004026:	b29a      	uxth	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004030:	2b00      	cmp	r3, #0
 8004032:	f47f aeb6 	bne.w	8003da2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2220      	movs	r2, #32
 800403a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800404e:	2300      	movs	r3, #0
 8004050:	e000      	b.n	8004054 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004052:	2302      	movs	r3, #2
  }
}
 8004054:	4618      	mov	r0, r3
 8004056:	3728      	adds	r7, #40	; 0x28
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	00010004 	.word	0x00010004

08004060 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b088      	sub	sp, #32
 8004064:	af02      	add	r7, sp, #8
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	607a      	str	r2, [r7, #4]
 800406a:	603b      	str	r3, [r7, #0]
 800406c:	460b      	mov	r3, r1
 800406e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004074:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	2b08      	cmp	r3, #8
 800407a:	d006      	beq.n	800408a <I2C_MasterRequestWrite+0x2a>
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d003      	beq.n	800408a <I2C_MasterRequestWrite+0x2a>
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004088:	d108      	bne.n	800409c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	e00b      	b.n	80040b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a0:	2b12      	cmp	r3, #18
 80040a2:	d107      	bne.n	80040b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 f91d 	bl	8004300 <I2C_WaitOnFlagUntilTimeout>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00d      	beq.n	80040e8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040da:	d103      	bne.n	80040e4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e035      	b.n	8004154 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040f0:	d108      	bne.n	8004104 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040f2:	897b      	ldrh	r3, [r7, #10]
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	461a      	mov	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004100:	611a      	str	r2, [r3, #16]
 8004102:	e01b      	b.n	800413c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004104:	897b      	ldrh	r3, [r7, #10]
 8004106:	11db      	asrs	r3, r3, #7
 8004108:	b2db      	uxtb	r3, r3
 800410a:	f003 0306 	and.w	r3, r3, #6
 800410e:	b2db      	uxtb	r3, r3
 8004110:	f063 030f 	orn	r3, r3, #15
 8004114:	b2da      	uxtb	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	490e      	ldr	r1, [pc, #56]	; (800415c <I2C_MasterRequestWrite+0xfc>)
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f000 f966 	bl	80043f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e010      	b.n	8004154 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004132:	897b      	ldrh	r3, [r7, #10]
 8004134:	b2da      	uxtb	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	4907      	ldr	r1, [pc, #28]	; (8004160 <I2C_MasterRequestWrite+0x100>)
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f000 f956 	bl	80043f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e000      	b.n	8004154 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3718      	adds	r7, #24
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	00010008 	.word	0x00010008
 8004160:	00010002 	.word	0x00010002

08004164 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b088      	sub	sp, #32
 8004168:	af02      	add	r7, sp, #8
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	607a      	str	r2, [r7, #4]
 800416e:	603b      	str	r3, [r7, #0]
 8004170:	460b      	mov	r3, r1
 8004172:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004178:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004188:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	2b08      	cmp	r3, #8
 800418e:	d006      	beq.n	800419e <I2C_MasterRequestRead+0x3a>
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d003      	beq.n	800419e <I2C_MasterRequestRead+0x3a>
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800419c:	d108      	bne.n	80041b0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	e00b      	b.n	80041c8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b4:	2b11      	cmp	r3, #17
 80041b6:	d107      	bne.n	80041c8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f000 f893 	bl	8004300 <I2C_WaitOnFlagUntilTimeout>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00d      	beq.n	80041fc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ee:	d103      	bne.n	80041f8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e079      	b.n	80042f0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004204:	d108      	bne.n	8004218 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004206:	897b      	ldrh	r3, [r7, #10]
 8004208:	b2db      	uxtb	r3, r3
 800420a:	f043 0301 	orr.w	r3, r3, #1
 800420e:	b2da      	uxtb	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	611a      	str	r2, [r3, #16]
 8004216:	e05f      	b.n	80042d8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004218:	897b      	ldrh	r3, [r7, #10]
 800421a:	11db      	asrs	r3, r3, #7
 800421c:	b2db      	uxtb	r3, r3
 800421e:	f003 0306 	and.w	r3, r3, #6
 8004222:	b2db      	uxtb	r3, r3
 8004224:	f063 030f 	orn	r3, r3, #15
 8004228:	b2da      	uxtb	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	4930      	ldr	r1, [pc, #192]	; (80042f8 <I2C_MasterRequestRead+0x194>)
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f000 f8dc 	bl	80043f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e054      	b.n	80042f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004246:	897b      	ldrh	r3, [r7, #10]
 8004248:	b2da      	uxtb	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	4929      	ldr	r1, [pc, #164]	; (80042fc <I2C_MasterRequestRead+0x198>)
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f000 f8cc 	bl	80043f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e044      	b.n	80042f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004266:	2300      	movs	r3, #0
 8004268:	613b      	str	r3, [r7, #16]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	613b      	str	r3, [r7, #16]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	613b      	str	r3, [r7, #16]
 800427a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800428a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f000 f831 	bl	8004300 <I2C_WaitOnFlagUntilTimeout>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00d      	beq.n	80042c0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042b2:	d103      	bne.n	80042bc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042ba:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e017      	b.n	80042f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80042c0:	897b      	ldrh	r3, [r7, #10]
 80042c2:	11db      	asrs	r3, r3, #7
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	f003 0306 	and.w	r3, r3, #6
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	f063 030e 	orn	r3, r3, #14
 80042d0:	b2da      	uxtb	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	4907      	ldr	r1, [pc, #28]	; (80042fc <I2C_MasterRequestRead+0x198>)
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f000 f888 	bl	80043f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e000      	b.n	80042f0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3718      	adds	r7, #24
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	00010008 	.word	0x00010008
 80042fc:	00010002 	.word	0x00010002

08004300 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	603b      	str	r3, [r7, #0]
 800430c:	4613      	mov	r3, r2
 800430e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004310:	e048      	b.n	80043a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004318:	d044      	beq.n	80043a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800431a:	f7fe faf1 	bl	8002900 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	683a      	ldr	r2, [r7, #0]
 8004326:	429a      	cmp	r2, r3
 8004328:	d302      	bcc.n	8004330 <I2C_WaitOnFlagUntilTimeout+0x30>
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d139      	bne.n	80043a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	0c1b      	lsrs	r3, r3, #16
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b01      	cmp	r3, #1
 8004338:	d10d      	bne.n	8004356 <I2C_WaitOnFlagUntilTimeout+0x56>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	43da      	mvns	r2, r3
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	4013      	ands	r3, r2
 8004346:	b29b      	uxth	r3, r3
 8004348:	2b00      	cmp	r3, #0
 800434a:	bf0c      	ite	eq
 800434c:	2301      	moveq	r3, #1
 800434e:	2300      	movne	r3, #0
 8004350:	b2db      	uxtb	r3, r3
 8004352:	461a      	mov	r2, r3
 8004354:	e00c      	b.n	8004370 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	43da      	mvns	r2, r3
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	4013      	ands	r3, r2
 8004362:	b29b      	uxth	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	bf0c      	ite	eq
 8004368:	2301      	moveq	r3, #1
 800436a:	2300      	movne	r3, #0
 800436c:	b2db      	uxtb	r3, r3
 800436e:	461a      	mov	r2, r3
 8004370:	79fb      	ldrb	r3, [r7, #7]
 8004372:	429a      	cmp	r2, r3
 8004374:	d116      	bne.n	80043a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2220      	movs	r2, #32
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004390:	f043 0220 	orr.w	r2, r3, #32
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e023      	b.n	80043ec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	0c1b      	lsrs	r3, r3, #16
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d10d      	bne.n	80043ca <I2C_WaitOnFlagUntilTimeout+0xca>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	43da      	mvns	r2, r3
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	4013      	ands	r3, r2
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	2b00      	cmp	r3, #0
 80043be:	bf0c      	ite	eq
 80043c0:	2301      	moveq	r3, #1
 80043c2:	2300      	movne	r3, #0
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	461a      	mov	r2, r3
 80043c8:	e00c      	b.n	80043e4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	43da      	mvns	r2, r3
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	4013      	ands	r3, r2
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	bf0c      	ite	eq
 80043dc:	2301      	moveq	r3, #1
 80043de:	2300      	movne	r3, #0
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	461a      	mov	r2, r3
 80043e4:	79fb      	ldrb	r3, [r7, #7]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d093      	beq.n	8004312 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
 8004400:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004402:	e071      	b.n	80044e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800440e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004412:	d123      	bne.n	800445c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004422:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800442c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2220      	movs	r2, #32
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004448:	f043 0204 	orr.w	r2, r3, #4
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e067      	b.n	800452c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004462:	d041      	beq.n	80044e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004464:	f7fe fa4c 	bl	8002900 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	429a      	cmp	r2, r3
 8004472:	d302      	bcc.n	800447a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d136      	bne.n	80044e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	0c1b      	lsrs	r3, r3, #16
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b01      	cmp	r3, #1
 8004482:	d10c      	bne.n	800449e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	43da      	mvns	r2, r3
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	4013      	ands	r3, r2
 8004490:	b29b      	uxth	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	bf14      	ite	ne
 8004496:	2301      	movne	r3, #1
 8004498:	2300      	moveq	r3, #0
 800449a:	b2db      	uxtb	r3, r3
 800449c:	e00b      	b.n	80044b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	43da      	mvns	r2, r3
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	4013      	ands	r3, r2
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	bf14      	ite	ne
 80044b0:	2301      	movne	r3, #1
 80044b2:	2300      	moveq	r3, #0
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d016      	beq.n	80044e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d4:	f043 0220 	orr.w	r2, r3, #32
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e021      	b.n	800452c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	0c1b      	lsrs	r3, r3, #16
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d10c      	bne.n	800450c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	43da      	mvns	r2, r3
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	4013      	ands	r3, r2
 80044fe:	b29b      	uxth	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	bf14      	ite	ne
 8004504:	2301      	movne	r3, #1
 8004506:	2300      	moveq	r3, #0
 8004508:	b2db      	uxtb	r3, r3
 800450a:	e00b      	b.n	8004524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	43da      	mvns	r2, r3
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	4013      	ands	r3, r2
 8004518:	b29b      	uxth	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	bf14      	ite	ne
 800451e:	2301      	movne	r3, #1
 8004520:	2300      	moveq	r3, #0
 8004522:	b2db      	uxtb	r3, r3
 8004524:	2b00      	cmp	r3, #0
 8004526:	f47f af6d 	bne.w	8004404 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004540:	e034      	b.n	80045ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 f8e3 	bl	800470e <I2C_IsAcknowledgeFailed>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e034      	b.n	80045bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004558:	d028      	beq.n	80045ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800455a:	f7fe f9d1 	bl	8002900 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	429a      	cmp	r2, r3
 8004568:	d302      	bcc.n	8004570 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d11d      	bne.n	80045ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800457a:	2b80      	cmp	r3, #128	; 0x80
 800457c:	d016      	beq.n	80045ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2220      	movs	r2, #32
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004598:	f043 0220 	orr.w	r2, r3, #32
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e007      	b.n	80045bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b6:	2b80      	cmp	r3, #128	; 0x80
 80045b8:	d1c3      	bne.n	8004542 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045d0:	e034      	b.n	800463c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f000 f89b 	bl	800470e <I2C_IsAcknowledgeFailed>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e034      	b.n	800464c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045e8:	d028      	beq.n	800463c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ea:	f7fe f989 	bl	8002900 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d302      	bcc.n	8004600 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d11d      	bne.n	800463c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	f003 0304 	and.w	r3, r3, #4
 800460a:	2b04      	cmp	r3, #4
 800460c:	d016      	beq.n	800463c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2220      	movs	r2, #32
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004628:	f043 0220 	orr.w	r2, r3, #32
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e007      	b.n	800464c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	f003 0304 	and.w	r3, r3, #4
 8004646:	2b04      	cmp	r3, #4
 8004648:	d1c3      	bne.n	80045d2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004660:	e049      	b.n	80046f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	f003 0310 	and.w	r3, r3, #16
 800466c:	2b10      	cmp	r3, #16
 800466e:	d119      	bne.n	80046a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f06f 0210 	mvn.w	r2, #16
 8004678:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2220      	movs	r2, #32
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e030      	b.n	8004706 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046a4:	f7fe f92c 	bl	8002900 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d302      	bcc.n	80046ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d11d      	bne.n	80046f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c4:	2b40      	cmp	r3, #64	; 0x40
 80046c6:	d016      	beq.n	80046f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2220      	movs	r2, #32
 80046d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e2:	f043 0220 	orr.w	r2, r3, #32
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e007      	b.n	8004706 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004700:	2b40      	cmp	r3, #64	; 0x40
 8004702:	d1ae      	bne.n	8004662 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800470e:	b480      	push	{r7}
 8004710:	b083      	sub	sp, #12
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004724:	d11b      	bne.n	800475e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800472e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2220      	movs	r2, #32
 800473a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474a:	f043 0204 	orr.w	r2, r3, #4
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e000      	b.n	8004760 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b20      	cmp	r3, #32
 8004780:	d129      	bne.n	80047d6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2224      	movs	r2, #36	; 0x24
 8004786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f022 0201 	bic.w	r2, r2, #1
 8004798:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f022 0210 	bic.w	r2, r2, #16
 80047a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f042 0201 	orr.w	r2, r2, #1
 80047c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2220      	movs	r2, #32
 80047ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80047d2:	2300      	movs	r3, #0
 80047d4:	e000      	b.n	80047d8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80047d6:	2302      	movs	r3, #2
  }
}
 80047d8:	4618      	mov	r0, r3
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80047ee:	2300      	movs	r3, #0
 80047f0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b20      	cmp	r3, #32
 80047fc:	d12a      	bne.n	8004854 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2224      	movs	r2, #36	; 0x24
 8004802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 0201 	bic.w	r2, r2, #1
 8004814:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800481e:	89fb      	ldrh	r3, [r7, #14]
 8004820:	f023 030f 	bic.w	r3, r3, #15
 8004824:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	b29a      	uxth	r2, r3
 800482a:	89fb      	ldrh	r3, [r7, #14]
 800482c:	4313      	orrs	r3, r2
 800482e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	89fa      	ldrh	r2, [r7, #14]
 8004836:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f042 0201 	orr.w	r2, r2, #1
 8004846:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2220      	movs	r2, #32
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004850:	2300      	movs	r3, #0
 8004852:	e000      	b.n	8004856 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004854:	2302      	movs	r3, #2
  }
}
 8004856:	4618      	mov	r0, r3
 8004858:	3714      	adds	r7, #20
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
	...

08004864 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e267      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d075      	beq.n	800496e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004882:	4b88      	ldr	r3, [pc, #544]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f003 030c 	and.w	r3, r3, #12
 800488a:	2b04      	cmp	r3, #4
 800488c:	d00c      	beq.n	80048a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800488e:	4b85      	ldr	r3, [pc, #532]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004896:	2b08      	cmp	r3, #8
 8004898:	d112      	bne.n	80048c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800489a:	4b82      	ldr	r3, [pc, #520]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048a6:	d10b      	bne.n	80048c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048a8:	4b7e      	ldr	r3, [pc, #504]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d05b      	beq.n	800496c <HAL_RCC_OscConfig+0x108>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d157      	bne.n	800496c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e242      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048c8:	d106      	bne.n	80048d8 <HAL_RCC_OscConfig+0x74>
 80048ca:	4b76      	ldr	r3, [pc, #472]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a75      	ldr	r2, [pc, #468]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 80048d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048d4:	6013      	str	r3, [r2, #0]
 80048d6:	e01d      	b.n	8004914 <HAL_RCC_OscConfig+0xb0>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048e0:	d10c      	bne.n	80048fc <HAL_RCC_OscConfig+0x98>
 80048e2:	4b70      	ldr	r3, [pc, #448]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a6f      	ldr	r2, [pc, #444]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 80048e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048ec:	6013      	str	r3, [r2, #0]
 80048ee:	4b6d      	ldr	r3, [pc, #436]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a6c      	ldr	r2, [pc, #432]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 80048f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048f8:	6013      	str	r3, [r2, #0]
 80048fa:	e00b      	b.n	8004914 <HAL_RCC_OscConfig+0xb0>
 80048fc:	4b69      	ldr	r3, [pc, #420]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a68      	ldr	r2, [pc, #416]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 8004902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004906:	6013      	str	r3, [r2, #0]
 8004908:	4b66      	ldr	r3, [pc, #408]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a65      	ldr	r2, [pc, #404]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 800490e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004912:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d013      	beq.n	8004944 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800491c:	f7fd fff0 	bl	8002900 <HAL_GetTick>
 8004920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004924:	f7fd ffec 	bl	8002900 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b64      	cmp	r3, #100	; 0x64
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e207      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004936:	4b5b      	ldr	r3, [pc, #364]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d0f0      	beq.n	8004924 <HAL_RCC_OscConfig+0xc0>
 8004942:	e014      	b.n	800496e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004944:	f7fd ffdc 	bl	8002900 <HAL_GetTick>
 8004948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800494a:	e008      	b.n	800495e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800494c:	f7fd ffd8 	bl	8002900 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b64      	cmp	r3, #100	; 0x64
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e1f3      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800495e:	4b51      	ldr	r3, [pc, #324]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1f0      	bne.n	800494c <HAL_RCC_OscConfig+0xe8>
 800496a:	e000      	b.n	800496e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800496c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d063      	beq.n	8004a42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800497a:	4b4a      	ldr	r3, [pc, #296]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f003 030c 	and.w	r3, r3, #12
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00b      	beq.n	800499e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004986:	4b47      	ldr	r3, [pc, #284]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800498e:	2b08      	cmp	r3, #8
 8004990:	d11c      	bne.n	80049cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004992:	4b44      	ldr	r3, [pc, #272]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d116      	bne.n	80049cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800499e:	4b41      	ldr	r3, [pc, #260]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d005      	beq.n	80049b6 <HAL_RCC_OscConfig+0x152>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d001      	beq.n	80049b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e1c7      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049b6:	4b3b      	ldr	r3, [pc, #236]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	4937      	ldr	r1, [pc, #220]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049ca:	e03a      	b.n	8004a42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d020      	beq.n	8004a16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049d4:	4b34      	ldr	r3, [pc, #208]	; (8004aa8 <HAL_RCC_OscConfig+0x244>)
 80049d6:	2201      	movs	r2, #1
 80049d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049da:	f7fd ff91 	bl	8002900 <HAL_GetTick>
 80049de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049e0:	e008      	b.n	80049f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049e2:	f7fd ff8d 	bl	8002900 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d901      	bls.n	80049f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e1a8      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049f4:	4b2b      	ldr	r3, [pc, #172]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0f0      	beq.n	80049e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a00:	4b28      	ldr	r3, [pc, #160]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	00db      	lsls	r3, r3, #3
 8004a0e:	4925      	ldr	r1, [pc, #148]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	600b      	str	r3, [r1, #0]
 8004a14:	e015      	b.n	8004a42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a16:	4b24      	ldr	r3, [pc, #144]	; (8004aa8 <HAL_RCC_OscConfig+0x244>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a1c:	f7fd ff70 	bl	8002900 <HAL_GetTick>
 8004a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a22:	e008      	b.n	8004a36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a24:	f7fd ff6c 	bl	8002900 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e187      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a36:	4b1b      	ldr	r3, [pc, #108]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1f0      	bne.n	8004a24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0308 	and.w	r3, r3, #8
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d036      	beq.n	8004abc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d016      	beq.n	8004a84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a56:	4b15      	ldr	r3, [pc, #84]	; (8004aac <HAL_RCC_OscConfig+0x248>)
 8004a58:	2201      	movs	r2, #1
 8004a5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a5c:	f7fd ff50 	bl	8002900 <HAL_GetTick>
 8004a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a62:	e008      	b.n	8004a76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a64:	f7fd ff4c 	bl	8002900 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e167      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a76:	4b0b      	ldr	r3, [pc, #44]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 8004a78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d0f0      	beq.n	8004a64 <HAL_RCC_OscConfig+0x200>
 8004a82:	e01b      	b.n	8004abc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a84:	4b09      	ldr	r3, [pc, #36]	; (8004aac <HAL_RCC_OscConfig+0x248>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a8a:	f7fd ff39 	bl	8002900 <HAL_GetTick>
 8004a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a90:	e00e      	b.n	8004ab0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a92:	f7fd ff35 	bl	8002900 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d907      	bls.n	8004ab0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e150      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
 8004aa4:	40023800 	.word	0x40023800
 8004aa8:	42470000 	.word	0x42470000
 8004aac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ab0:	4b88      	ldr	r3, [pc, #544]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ab4:	f003 0302 	and.w	r3, r3, #2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1ea      	bne.n	8004a92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 8097 	beq.w	8004bf8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004aca:	2300      	movs	r3, #0
 8004acc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ace:	4b81      	ldr	r3, [pc, #516]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10f      	bne.n	8004afa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ada:	2300      	movs	r3, #0
 8004adc:	60bb      	str	r3, [r7, #8]
 8004ade:	4b7d      	ldr	r3, [pc, #500]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	4a7c      	ldr	r2, [pc, #496]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8004aea:	4b7a      	ldr	r3, [pc, #488]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af2:	60bb      	str	r3, [r7, #8]
 8004af4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004af6:	2301      	movs	r3, #1
 8004af8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004afa:	4b77      	ldr	r3, [pc, #476]	; (8004cd8 <HAL_RCC_OscConfig+0x474>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d118      	bne.n	8004b38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b06:	4b74      	ldr	r3, [pc, #464]	; (8004cd8 <HAL_RCC_OscConfig+0x474>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a73      	ldr	r2, [pc, #460]	; (8004cd8 <HAL_RCC_OscConfig+0x474>)
 8004b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b12:	f7fd fef5 	bl	8002900 <HAL_GetTick>
 8004b16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b18:	e008      	b.n	8004b2c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b1a:	f7fd fef1 	bl	8002900 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d901      	bls.n	8004b2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e10c      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b2c:	4b6a      	ldr	r3, [pc, #424]	; (8004cd8 <HAL_RCC_OscConfig+0x474>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d0f0      	beq.n	8004b1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d106      	bne.n	8004b4e <HAL_RCC_OscConfig+0x2ea>
 8004b40:	4b64      	ldr	r3, [pc, #400]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b44:	4a63      	ldr	r2, [pc, #396]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004b46:	f043 0301 	orr.w	r3, r3, #1
 8004b4a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b4c:	e01c      	b.n	8004b88 <HAL_RCC_OscConfig+0x324>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	2b05      	cmp	r3, #5
 8004b54:	d10c      	bne.n	8004b70 <HAL_RCC_OscConfig+0x30c>
 8004b56:	4b5f      	ldr	r3, [pc, #380]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5a:	4a5e      	ldr	r2, [pc, #376]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004b5c:	f043 0304 	orr.w	r3, r3, #4
 8004b60:	6713      	str	r3, [r2, #112]	; 0x70
 8004b62:	4b5c      	ldr	r3, [pc, #368]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b66:	4a5b      	ldr	r2, [pc, #364]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004b68:	f043 0301 	orr.w	r3, r3, #1
 8004b6c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b6e:	e00b      	b.n	8004b88 <HAL_RCC_OscConfig+0x324>
 8004b70:	4b58      	ldr	r3, [pc, #352]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b74:	4a57      	ldr	r2, [pc, #348]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004b76:	f023 0301 	bic.w	r3, r3, #1
 8004b7a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b7c:	4b55      	ldr	r3, [pc, #340]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b80:	4a54      	ldr	r2, [pc, #336]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004b82:	f023 0304 	bic.w	r3, r3, #4
 8004b86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d015      	beq.n	8004bbc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b90:	f7fd feb6 	bl	8002900 <HAL_GetTick>
 8004b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b96:	e00a      	b.n	8004bae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b98:	f7fd feb2 	bl	8002900 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e0cb      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bae:	4b49      	ldr	r3, [pc, #292]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d0ee      	beq.n	8004b98 <HAL_RCC_OscConfig+0x334>
 8004bba:	e014      	b.n	8004be6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bbc:	f7fd fea0 	bl	8002900 <HAL_GetTick>
 8004bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bc2:	e00a      	b.n	8004bda <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bc4:	f7fd fe9c 	bl	8002900 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d901      	bls.n	8004bda <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e0b5      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bda:	4b3e      	ldr	r3, [pc, #248]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1ee      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004be6:	7dfb      	ldrb	r3, [r7, #23]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d105      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bec:	4b39      	ldr	r3, [pc, #228]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf0:	4a38      	ldr	r2, [pc, #224]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004bf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bf6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f000 80a1 	beq.w	8004d44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c02:	4b34      	ldr	r3, [pc, #208]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f003 030c 	and.w	r3, r3, #12
 8004c0a:	2b08      	cmp	r3, #8
 8004c0c:	d05c      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d141      	bne.n	8004c9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c16:	4b31      	ldr	r3, [pc, #196]	; (8004cdc <HAL_RCC_OscConfig+0x478>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c1c:	f7fd fe70 	bl	8002900 <HAL_GetTick>
 8004c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c22:	e008      	b.n	8004c36 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c24:	f7fd fe6c 	bl	8002900 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e087      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c36:	4b27      	ldr	r3, [pc, #156]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1f0      	bne.n	8004c24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	69da      	ldr	r2, [r3, #28]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c50:	019b      	lsls	r3, r3, #6
 8004c52:	431a      	orrs	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c58:	085b      	lsrs	r3, r3, #1
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	041b      	lsls	r3, r3, #16
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c64:	061b      	lsls	r3, r3, #24
 8004c66:	491b      	ldr	r1, [pc, #108]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c6c:	4b1b      	ldr	r3, [pc, #108]	; (8004cdc <HAL_RCC_OscConfig+0x478>)
 8004c6e:	2201      	movs	r2, #1
 8004c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c72:	f7fd fe45 	bl	8002900 <HAL_GetTick>
 8004c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c78:	e008      	b.n	8004c8c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c7a:	f7fd fe41 	bl	8002900 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d901      	bls.n	8004c8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e05c      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c8c:	4b11      	ldr	r3, [pc, #68]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d0f0      	beq.n	8004c7a <HAL_RCC_OscConfig+0x416>
 8004c98:	e054      	b.n	8004d44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c9a:	4b10      	ldr	r3, [pc, #64]	; (8004cdc <HAL_RCC_OscConfig+0x478>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca0:	f7fd fe2e 	bl	8002900 <HAL_GetTick>
 8004ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ca6:	e008      	b.n	8004cba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ca8:	f7fd fe2a 	bl	8002900 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e045      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cba:	4b06      	ldr	r3, [pc, #24]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1f0      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x444>
 8004cc6:	e03d      	b.n	8004d44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d107      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e038      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
 8004cd4:	40023800 	.word	0x40023800
 8004cd8:	40007000 	.word	0x40007000
 8004cdc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ce0:	4b1b      	ldr	r3, [pc, #108]	; (8004d50 <HAL_RCC_OscConfig+0x4ec>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d028      	beq.n	8004d40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d121      	bne.n	8004d40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d11a      	bne.n	8004d40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d10:	4013      	ands	r3, r2
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d111      	bne.n	8004d40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d26:	085b      	lsrs	r3, r3, #1
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d107      	bne.n	8004d40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d001      	beq.n	8004d44 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e000      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3718      	adds	r7, #24
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	40023800 	.word	0x40023800

08004d54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d101      	bne.n	8004d68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e0cc      	b.n	8004f02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d68:	4b68      	ldr	r3, [pc, #416]	; (8004f0c <HAL_RCC_ClockConfig+0x1b8>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 030f 	and.w	r3, r3, #15
 8004d70:	683a      	ldr	r2, [r7, #0]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d90c      	bls.n	8004d90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d76:	4b65      	ldr	r3, [pc, #404]	; (8004f0c <HAL_RCC_ClockConfig+0x1b8>)
 8004d78:	683a      	ldr	r2, [r7, #0]
 8004d7a:	b2d2      	uxtb	r2, r2
 8004d7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d7e:	4b63      	ldr	r3, [pc, #396]	; (8004f0c <HAL_RCC_ClockConfig+0x1b8>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 030f 	and.w	r3, r3, #15
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d001      	beq.n	8004d90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e0b8      	b.n	8004f02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0302 	and.w	r3, r3, #2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d020      	beq.n	8004dde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0304 	and.w	r3, r3, #4
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d005      	beq.n	8004db4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004da8:	4b59      	ldr	r3, [pc, #356]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	4a58      	ldr	r2, [pc, #352]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004dae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004db2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0308 	and.w	r3, r3, #8
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d005      	beq.n	8004dcc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004dc0:	4b53      	ldr	r3, [pc, #332]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	4a52      	ldr	r2, [pc, #328]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004dca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dcc:	4b50      	ldr	r3, [pc, #320]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	494d      	ldr	r1, [pc, #308]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d044      	beq.n	8004e74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d107      	bne.n	8004e02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004df2:	4b47      	ldr	r3, [pc, #284]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d119      	bne.n	8004e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e07f      	b.n	8004f02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d003      	beq.n	8004e12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e0e:	2b03      	cmp	r3, #3
 8004e10:	d107      	bne.n	8004e22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e12:	4b3f      	ldr	r3, [pc, #252]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d109      	bne.n	8004e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e06f      	b.n	8004f02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e22:	4b3b      	ldr	r3, [pc, #236]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e067      	b.n	8004f02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e32:	4b37      	ldr	r3, [pc, #220]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f023 0203 	bic.w	r2, r3, #3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	4934      	ldr	r1, [pc, #208]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e44:	f7fd fd5c 	bl	8002900 <HAL_GetTick>
 8004e48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e4a:	e00a      	b.n	8004e62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e4c:	f7fd fd58 	bl	8002900 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e04f      	b.n	8004f02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e62:	4b2b      	ldr	r3, [pc, #172]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f003 020c 	and.w	r2, r3, #12
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d1eb      	bne.n	8004e4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e74:	4b25      	ldr	r3, [pc, #148]	; (8004f0c <HAL_RCC_ClockConfig+0x1b8>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 030f 	and.w	r3, r3, #15
 8004e7c:	683a      	ldr	r2, [r7, #0]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d20c      	bcs.n	8004e9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e82:	4b22      	ldr	r3, [pc, #136]	; (8004f0c <HAL_RCC_ClockConfig+0x1b8>)
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	b2d2      	uxtb	r2, r2
 8004e88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e8a:	4b20      	ldr	r3, [pc, #128]	; (8004f0c <HAL_RCC_ClockConfig+0x1b8>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 030f 	and.w	r3, r3, #15
 8004e92:	683a      	ldr	r2, [r7, #0]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d001      	beq.n	8004e9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e032      	b.n	8004f02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0304 	and.w	r3, r3, #4
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d008      	beq.n	8004eba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ea8:	4b19      	ldr	r3, [pc, #100]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	4916      	ldr	r1, [pc, #88]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0308 	and.w	r3, r3, #8
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d009      	beq.n	8004eda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ec6:	4b12      	ldr	r3, [pc, #72]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	00db      	lsls	r3, r3, #3
 8004ed4:	490e      	ldr	r1, [pc, #56]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004eda:	f000 f821 	bl	8004f20 <HAL_RCC_GetSysClockFreq>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	4b0b      	ldr	r3, [pc, #44]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	091b      	lsrs	r3, r3, #4
 8004ee6:	f003 030f 	and.w	r3, r3, #15
 8004eea:	490a      	ldr	r1, [pc, #40]	; (8004f14 <HAL_RCC_ClockConfig+0x1c0>)
 8004eec:	5ccb      	ldrb	r3, [r1, r3]
 8004eee:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef2:	4a09      	ldr	r2, [pc, #36]	; (8004f18 <HAL_RCC_ClockConfig+0x1c4>)
 8004ef4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ef6:	4b09      	ldr	r3, [pc, #36]	; (8004f1c <HAL_RCC_ClockConfig+0x1c8>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7fd fcbc 	bl	8002878 <HAL_InitTick>

  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	40023c00 	.word	0x40023c00
 8004f10:	40023800 	.word	0x40023800
 8004f14:	080080d8 	.word	0x080080d8
 8004f18:	20000018 	.word	0x20000018
 8004f1c:	2000001c 	.word	0x2000001c

08004f20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f24:	b090      	sub	sp, #64	; 0x40
 8004f26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	637b      	str	r3, [r7, #52]	; 0x34
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f30:	2300      	movs	r3, #0
 8004f32:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004f34:	2300      	movs	r3, #0
 8004f36:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f38:	4b59      	ldr	r3, [pc, #356]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f003 030c 	and.w	r3, r3, #12
 8004f40:	2b08      	cmp	r3, #8
 8004f42:	d00d      	beq.n	8004f60 <HAL_RCC_GetSysClockFreq+0x40>
 8004f44:	2b08      	cmp	r3, #8
 8004f46:	f200 80a1 	bhi.w	800508c <HAL_RCC_GetSysClockFreq+0x16c>
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d002      	beq.n	8004f54 <HAL_RCC_GetSysClockFreq+0x34>
 8004f4e:	2b04      	cmp	r3, #4
 8004f50:	d003      	beq.n	8004f5a <HAL_RCC_GetSysClockFreq+0x3a>
 8004f52:	e09b      	b.n	800508c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f54:	4b53      	ldr	r3, [pc, #332]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004f56:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004f58:	e09b      	b.n	8005092 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f5a:	4b53      	ldr	r3, [pc, #332]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f5c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f5e:	e098      	b.n	8005092 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f60:	4b4f      	ldr	r3, [pc, #316]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f68:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f6a:	4b4d      	ldr	r3, [pc, #308]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d028      	beq.n	8004fc8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f76:	4b4a      	ldr	r3, [pc, #296]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	099b      	lsrs	r3, r3, #6
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	623b      	str	r3, [r7, #32]
 8004f80:	627a      	str	r2, [r7, #36]	; 0x24
 8004f82:	6a3b      	ldr	r3, [r7, #32]
 8004f84:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004f88:	2100      	movs	r1, #0
 8004f8a:	4b47      	ldr	r3, [pc, #284]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f8c:	fb03 f201 	mul.w	r2, r3, r1
 8004f90:	2300      	movs	r3, #0
 8004f92:	fb00 f303 	mul.w	r3, r0, r3
 8004f96:	4413      	add	r3, r2
 8004f98:	4a43      	ldr	r2, [pc, #268]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f9a:	fba0 1202 	umull	r1, r2, r0, r2
 8004f9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fa0:	460a      	mov	r2, r1
 8004fa2:	62ba      	str	r2, [r7, #40]	; 0x28
 8004fa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fa6:	4413      	add	r3, r2
 8004fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fac:	2200      	movs	r2, #0
 8004fae:	61bb      	str	r3, [r7, #24]
 8004fb0:	61fa      	str	r2, [r7, #28]
 8004fb2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fb6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004fba:	f7fb f91f 	bl	80001fc <__aeabi_uldivmod>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fc6:	e053      	b.n	8005070 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fc8:	4b35      	ldr	r3, [pc, #212]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	099b      	lsrs	r3, r3, #6
 8004fce:	2200      	movs	r2, #0
 8004fd0:	613b      	str	r3, [r7, #16]
 8004fd2:	617a      	str	r2, [r7, #20]
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004fda:	f04f 0b00 	mov.w	fp, #0
 8004fde:	4652      	mov	r2, sl
 8004fe0:	465b      	mov	r3, fp
 8004fe2:	f04f 0000 	mov.w	r0, #0
 8004fe6:	f04f 0100 	mov.w	r1, #0
 8004fea:	0159      	lsls	r1, r3, #5
 8004fec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ff0:	0150      	lsls	r0, r2, #5
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	ebb2 080a 	subs.w	r8, r2, sl
 8004ffa:	eb63 090b 	sbc.w	r9, r3, fp
 8004ffe:	f04f 0200 	mov.w	r2, #0
 8005002:	f04f 0300 	mov.w	r3, #0
 8005006:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800500a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800500e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005012:	ebb2 0408 	subs.w	r4, r2, r8
 8005016:	eb63 0509 	sbc.w	r5, r3, r9
 800501a:	f04f 0200 	mov.w	r2, #0
 800501e:	f04f 0300 	mov.w	r3, #0
 8005022:	00eb      	lsls	r3, r5, #3
 8005024:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005028:	00e2      	lsls	r2, r4, #3
 800502a:	4614      	mov	r4, r2
 800502c:	461d      	mov	r5, r3
 800502e:	eb14 030a 	adds.w	r3, r4, sl
 8005032:	603b      	str	r3, [r7, #0]
 8005034:	eb45 030b 	adc.w	r3, r5, fp
 8005038:	607b      	str	r3, [r7, #4]
 800503a:	f04f 0200 	mov.w	r2, #0
 800503e:	f04f 0300 	mov.w	r3, #0
 8005042:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005046:	4629      	mov	r1, r5
 8005048:	028b      	lsls	r3, r1, #10
 800504a:	4621      	mov	r1, r4
 800504c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005050:	4621      	mov	r1, r4
 8005052:	028a      	lsls	r2, r1, #10
 8005054:	4610      	mov	r0, r2
 8005056:	4619      	mov	r1, r3
 8005058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800505a:	2200      	movs	r2, #0
 800505c:	60bb      	str	r3, [r7, #8]
 800505e:	60fa      	str	r2, [r7, #12]
 8005060:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005064:	f7fb f8ca 	bl	80001fc <__aeabi_uldivmod>
 8005068:	4602      	mov	r2, r0
 800506a:	460b      	mov	r3, r1
 800506c:	4613      	mov	r3, r2
 800506e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005070:	4b0b      	ldr	r3, [pc, #44]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	0c1b      	lsrs	r3, r3, #16
 8005076:	f003 0303 	and.w	r3, r3, #3
 800507a:	3301      	adds	r3, #1
 800507c:	005b      	lsls	r3, r3, #1
 800507e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005080:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005084:	fbb2 f3f3 	udiv	r3, r2, r3
 8005088:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800508a:	e002      	b.n	8005092 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800508c:	4b05      	ldr	r3, [pc, #20]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800508e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005090:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005094:	4618      	mov	r0, r3
 8005096:	3740      	adds	r7, #64	; 0x40
 8005098:	46bd      	mov	sp, r7
 800509a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800509e:	bf00      	nop
 80050a0:	40023800 	.word	0x40023800
 80050a4:	00f42400 	.word	0x00f42400
 80050a8:	017d7840 	.word	0x017d7840

080050ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050b0:	4b03      	ldr	r3, [pc, #12]	; (80050c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80050b2:	681b      	ldr	r3, [r3, #0]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	20000018 	.word	0x20000018

080050c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050c8:	f7ff fff0 	bl	80050ac <HAL_RCC_GetHCLKFreq>
 80050cc:	4602      	mov	r2, r0
 80050ce:	4b05      	ldr	r3, [pc, #20]	; (80050e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	0a9b      	lsrs	r3, r3, #10
 80050d4:	f003 0307 	and.w	r3, r3, #7
 80050d8:	4903      	ldr	r1, [pc, #12]	; (80050e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050da:	5ccb      	ldrb	r3, [r1, r3]
 80050dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	40023800 	.word	0x40023800
 80050e8:	080080e8 	.word	0x080080e8

080050ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050f0:	f7ff ffdc 	bl	80050ac <HAL_RCC_GetHCLKFreq>
 80050f4:	4602      	mov	r2, r0
 80050f6:	4b05      	ldr	r3, [pc, #20]	; (800510c <HAL_RCC_GetPCLK2Freq+0x20>)
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	0b5b      	lsrs	r3, r3, #13
 80050fc:	f003 0307 	and.w	r3, r3, #7
 8005100:	4903      	ldr	r1, [pc, #12]	; (8005110 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005102:	5ccb      	ldrb	r3, [r1, r3]
 8005104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005108:	4618      	mov	r0, r3
 800510a:	bd80      	pop	{r7, pc}
 800510c:	40023800 	.word	0x40023800
 8005110:	080080e8 	.word	0x080080e8

08005114 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800511c:	2300      	movs	r3, #0
 800511e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005120:	2300      	movs	r3, #0
 8005122:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0301 	and.w	r3, r3, #1
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10b      	bne.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005138:	2b00      	cmp	r3, #0
 800513a:	d105      	bne.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005144:	2b00      	cmp	r3, #0
 8005146:	d075      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005148:	4b91      	ldr	r3, [pc, #580]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800514a:	2200      	movs	r2, #0
 800514c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800514e:	f7fd fbd7 	bl	8002900 <HAL_GetTick>
 8005152:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005154:	e008      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005156:	f7fd fbd3 	bl	8002900 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d901      	bls.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e189      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005168:	4b8a      	ldr	r3, [pc, #552]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1f0      	bne.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b00      	cmp	r3, #0
 800517e:	d009      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	019a      	lsls	r2, r3, #6
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	071b      	lsls	r3, r3, #28
 800518c:	4981      	ldr	r1, [pc, #516]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800518e:	4313      	orrs	r3, r2
 8005190:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0302 	and.w	r3, r3, #2
 800519c:	2b00      	cmp	r3, #0
 800519e:	d01f      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80051a0:	4b7c      	ldr	r3, [pc, #496]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051a6:	0f1b      	lsrs	r3, r3, #28
 80051a8:	f003 0307 	and.w	r3, r3, #7
 80051ac:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	019a      	lsls	r2, r3, #6
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	061b      	lsls	r3, r3, #24
 80051ba:	431a      	orrs	r2, r3
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	071b      	lsls	r3, r3, #28
 80051c0:	4974      	ldr	r1, [pc, #464]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80051c8:	4b72      	ldr	r3, [pc, #456]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051ce:	f023 021f 	bic.w	r2, r3, #31
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	69db      	ldr	r3, [r3, #28]
 80051d6:	3b01      	subs	r3, #1
 80051d8:	496e      	ldr	r1, [pc, #440]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00d      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	019a      	lsls	r2, r3, #6
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	061b      	lsls	r3, r3, #24
 80051f8:	431a      	orrs	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	071b      	lsls	r3, r3, #28
 8005200:	4964      	ldr	r1, [pc, #400]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005202:	4313      	orrs	r3, r2
 8005204:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005208:	4b61      	ldr	r3, [pc, #388]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800520a:	2201      	movs	r2, #1
 800520c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800520e:	f7fd fb77 	bl	8002900 <HAL_GetTick>
 8005212:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005214:	e008      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005216:	f7fd fb73 	bl	8002900 <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	2b02      	cmp	r3, #2
 8005222:	d901      	bls.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e129      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005228:	4b5a      	ldr	r3, [pc, #360]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d0f0      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0304 	and.w	r3, r3, #4
 800523c:	2b00      	cmp	r3, #0
 800523e:	d105      	bne.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005248:	2b00      	cmp	r3, #0
 800524a:	d079      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800524c:	4b52      	ldr	r3, [pc, #328]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800524e:	2200      	movs	r2, #0
 8005250:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005252:	f7fd fb55 	bl	8002900 <HAL_GetTick>
 8005256:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005258:	e008      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800525a:	f7fd fb51 	bl	8002900 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	2b02      	cmp	r3, #2
 8005266:	d901      	bls.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e107      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800526c:	4b49      	ldr	r3, [pc, #292]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005274:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005278:	d0ef      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0304 	and.w	r3, r3, #4
 8005282:	2b00      	cmp	r3, #0
 8005284:	d020      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005286:	4b43      	ldr	r3, [pc, #268]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800528c:	0f1b      	lsrs	r3, r3, #28
 800528e:	f003 0307 	and.w	r3, r3, #7
 8005292:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	019a      	lsls	r2, r3, #6
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	061b      	lsls	r3, r3, #24
 80052a0:	431a      	orrs	r2, r3
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	071b      	lsls	r3, r3, #28
 80052a6:	493b      	ldr	r1, [pc, #236]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80052ae:	4b39      	ldr	r3, [pc, #228]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052b4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	3b01      	subs	r3, #1
 80052be:	021b      	lsls	r3, r3, #8
 80052c0:	4934      	ldr	r1, [pc, #208]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0308 	and.w	r3, r3, #8
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d01e      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80052d4:	4b2f      	ldr	r3, [pc, #188]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052da:	0e1b      	lsrs	r3, r3, #24
 80052dc:	f003 030f 	and.w	r3, r3, #15
 80052e0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	019a      	lsls	r2, r3, #6
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	061b      	lsls	r3, r3, #24
 80052ec:	431a      	orrs	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	071b      	lsls	r3, r3, #28
 80052f4:	4927      	ldr	r1, [pc, #156]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80052fc:	4b25      	ldr	r3, [pc, #148]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005302:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530a:	4922      	ldr	r1, [pc, #136]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800530c:	4313      	orrs	r3, r2
 800530e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005312:	4b21      	ldr	r3, [pc, #132]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005314:	2201      	movs	r2, #1
 8005316:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005318:	f7fd faf2 	bl	8002900 <HAL_GetTick>
 800531c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800531e:	e008      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005320:	f7fd faee 	bl	8002900 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	2b02      	cmp	r3, #2
 800532c:	d901      	bls.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e0a4      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005332:	4b18      	ldr	r3, [pc, #96]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800533a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800533e:	d1ef      	bne.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0320 	and.w	r3, r3, #32
 8005348:	2b00      	cmp	r3, #0
 800534a:	f000 808b 	beq.w	8005464 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800534e:	2300      	movs	r3, #0
 8005350:	60fb      	str	r3, [r7, #12]
 8005352:	4b10      	ldr	r3, [pc, #64]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005356:	4a0f      	ldr	r2, [pc, #60]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800535c:	6413      	str	r3, [r2, #64]	; 0x40
 800535e:	4b0d      	ldr	r3, [pc, #52]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005366:	60fb      	str	r3, [r7, #12]
 8005368:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800536a:	4b0c      	ldr	r3, [pc, #48]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a0b      	ldr	r2, [pc, #44]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005374:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005376:	f7fd fac3 	bl	8002900 <HAL_GetTick>
 800537a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800537c:	e010      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800537e:	f7fd fabf 	bl	8002900 <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	2b02      	cmp	r3, #2
 800538a:	d909      	bls.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e075      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005390:	42470068 	.word	0x42470068
 8005394:	40023800 	.word	0x40023800
 8005398:	42470070 	.word	0x42470070
 800539c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80053a0:	4b38      	ldr	r3, [pc, #224]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d0e8      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053ac:	4b36      	ldr	r3, [pc, #216]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053b4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d02f      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d028      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053ca:	4b2f      	ldr	r3, [pc, #188]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053d2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80053d4:	4b2d      	ldr	r3, [pc, #180]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80053d6:	2201      	movs	r2, #1
 80053d8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053da:	4b2c      	ldr	r3, [pc, #176]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80053dc:	2200      	movs	r2, #0
 80053de:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80053e0:	4a29      	ldr	r2, [pc, #164]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80053e6:	4b28      	ldr	r3, [pc, #160]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d114      	bne.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80053f2:	f7fd fa85 	bl	8002900 <HAL_GetTick>
 80053f6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053f8:	e00a      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053fa:	f7fd fa81 	bl	8002900 <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	f241 3288 	movw	r2, #5000	; 0x1388
 8005408:	4293      	cmp	r3, r2
 800540a:	d901      	bls.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e035      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005410:	4b1d      	ldr	r3, [pc, #116]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005414:	f003 0302 	and.w	r3, r3, #2
 8005418:	2b00      	cmp	r3, #0
 800541a:	d0ee      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005420:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005424:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005428:	d10d      	bne.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800542a:	4b17      	ldr	r3, [pc, #92]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005436:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800543a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800543e:	4912      	ldr	r1, [pc, #72]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005440:	4313      	orrs	r3, r2
 8005442:	608b      	str	r3, [r1, #8]
 8005444:	e005      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005446:	4b10      	ldr	r3, [pc, #64]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	4a0f      	ldr	r2, [pc, #60]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800544c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005450:	6093      	str	r3, [r2, #8]
 8005452:	4b0d      	ldr	r3, [pc, #52]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005454:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800545e:	490a      	ldr	r1, [pc, #40]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005460:	4313      	orrs	r3, r2
 8005462:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0310 	and.w	r3, r3, #16
 800546c:	2b00      	cmp	r3, #0
 800546e:	d004      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005476:	4b06      	ldr	r3, [pc, #24]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005478:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3718      	adds	r7, #24
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	40007000 	.word	0x40007000
 8005488:	40023800 	.word	0x40023800
 800548c:	42470e40 	.word	0x42470e40
 8005490:	424711e0 	.word	0x424711e0

08005494 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d101      	bne.n	80054aa <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e073      	b.n	8005592 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	7f5b      	ldrb	r3, [r3, #29]
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d105      	bne.n	80054c0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f7fc fef0 	bl	80022a0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2202      	movs	r2, #2
 80054c4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	f003 0310 	and.w	r3, r3, #16
 80054d0:	2b10      	cmp	r3, #16
 80054d2:	d055      	beq.n	8005580 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	22ca      	movs	r2, #202	; 0xca
 80054da:	625a      	str	r2, [r3, #36]	; 0x24
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2253      	movs	r2, #83	; 0x53
 80054e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 fa49 	bl	800597c <RTC_EnterInitMode>
 80054ea:	4603      	mov	r3, r0
 80054ec:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80054ee:	7bfb      	ldrb	r3, [r7, #15]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d12c      	bne.n	800554e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	6812      	ldr	r2, [r2, #0]
 80054fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005502:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005506:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	6899      	ldr	r1, [r3, #8]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685a      	ldr	r2, [r3, #4]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	431a      	orrs	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	695b      	ldr	r3, [r3, #20]
 800551c:	431a      	orrs	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	430a      	orrs	r2, r1
 8005524:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	68d2      	ldr	r2, [r2, #12]
 800552e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	6919      	ldr	r1, [r3, #16]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	041a      	lsls	r2, r3, #16
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	430a      	orrs	r2, r1
 8005542:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 fa50 	bl	80059ea <RTC_ExitInitMode>
 800554a:	4603      	mov	r3, r0
 800554c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800554e:	7bfb      	ldrb	r3, [r7, #15]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d110      	bne.n	8005576 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005562:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	699a      	ldr	r2, [r3, #24]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	430a      	orrs	r2, r1
 8005574:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	22ff      	movs	r2, #255	; 0xff
 800557c:	625a      	str	r2, [r3, #36]	; 0x24
 800557e:	e001      	b.n	8005584 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005580:	2300      	movs	r3, #0
 8005582:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005584:	7bfb      	ldrb	r3, [r7, #15]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d102      	bne.n	8005590 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8005590:	7bfb      	ldrb	r3, [r7, #15]
}
 8005592:	4618      	mov	r0, r3
 8005594:	3710      	adds	r7, #16
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800559a:	b590      	push	{r4, r7, lr}
 800559c:	b087      	sub	sp, #28
 800559e:	af00      	add	r7, sp, #0
 80055a0:	60f8      	str	r0, [r7, #12]
 80055a2:	60b9      	str	r1, [r7, #8]
 80055a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80055a6:	2300      	movs	r3, #0
 80055a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	7f1b      	ldrb	r3, [r3, #28]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d101      	bne.n	80055b6 <HAL_RTC_SetTime+0x1c>
 80055b2:	2302      	movs	r3, #2
 80055b4:	e087      	b.n	80056c6 <HAL_RTC_SetTime+0x12c>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2201      	movs	r2, #1
 80055ba:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2202      	movs	r2, #2
 80055c0:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d126      	bne.n	8005616 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d102      	bne.n	80055dc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	2200      	movs	r2, #0
 80055da:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	4618      	mov	r0, r3
 80055e2:	f000 fa27 	bl	8005a34 <RTC_ByteToBcd2>
 80055e6:	4603      	mov	r3, r0
 80055e8:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	785b      	ldrb	r3, [r3, #1]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 fa20 	bl	8005a34 <RTC_ByteToBcd2>
 80055f4:	4603      	mov	r3, r0
 80055f6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80055f8:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	789b      	ldrb	r3, [r3, #2]
 80055fe:	4618      	mov	r0, r3
 8005600:	f000 fa18 	bl	8005a34 <RTC_ByteToBcd2>
 8005604:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005606:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	78db      	ldrb	r3, [r3, #3]
 800560e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005610:	4313      	orrs	r3, r2
 8005612:	617b      	str	r3, [r7, #20]
 8005614:	e018      	b.n	8005648 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005620:	2b00      	cmp	r3, #0
 8005622:	d102      	bne.n	800562a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	2200      	movs	r2, #0
 8005628:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	785b      	ldrb	r3, [r3, #1]
 8005634:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005636:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800563c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	78db      	ldrb	r3, [r3, #3]
 8005642:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005644:	4313      	orrs	r3, r2
 8005646:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	22ca      	movs	r2, #202	; 0xca
 800564e:	625a      	str	r2, [r3, #36]	; 0x24
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2253      	movs	r2, #83	; 0x53
 8005656:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005658:	68f8      	ldr	r0, [r7, #12]
 800565a:	f000 f98f 	bl	800597c <RTC_EnterInitMode>
 800565e:	4603      	mov	r3, r0
 8005660:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005662:	7cfb      	ldrb	r3, [r7, #19]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d120      	bne.n	80056aa <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005672:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005676:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	689a      	ldr	r2, [r3, #8]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005686:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6899      	ldr	r1, [r3, #8]
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	68da      	ldr	r2, [r3, #12]
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	431a      	orrs	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	430a      	orrs	r2, r1
 800569e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 f9a2 	bl	80059ea <RTC_ExitInitMode>
 80056a6:	4603      	mov	r3, r0
 80056a8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80056aa:	7cfb      	ldrb	r3, [r7, #19]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d102      	bne.n	80056b6 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2201      	movs	r2, #1
 80056b4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	22ff      	movs	r2, #255	; 0xff
 80056bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2200      	movs	r2, #0
 80056c2:	771a      	strb	r2, [r3, #28]

  return status;
 80056c4:	7cfb      	ldrb	r3, [r7, #19]
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	371c      	adds	r7, #28
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd90      	pop	{r4, r7, pc}

080056ce <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b086      	sub	sp, #24
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	60f8      	str	r0, [r7, #12]
 80056d6:	60b9      	str	r1, [r7, #8]
 80056d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80056da:	2300      	movs	r3, #0
 80056dc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005700:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005704:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	0c1b      	lsrs	r3, r3, #16
 800570a:	b2db      	uxtb	r3, r3
 800570c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005710:	b2da      	uxtb	r2, r3
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	0a1b      	lsrs	r3, r3, #8
 800571a:	b2db      	uxtb	r3, r3
 800571c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005720:	b2da      	uxtb	r2, r3
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	b2db      	uxtb	r3, r3
 800572a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800572e:	b2da      	uxtb	r2, r3
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	0d9b      	lsrs	r3, r3, #22
 8005738:	b2db      	uxtb	r3, r3
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	b2da      	uxtb	r2, r3
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d11a      	bne.n	8005780 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	4618      	mov	r0, r3
 8005750:	f000 f98e 	bl	8005a70 <RTC_Bcd2ToByte>
 8005754:	4603      	mov	r3, r0
 8005756:	461a      	mov	r2, r3
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	785b      	ldrb	r3, [r3, #1]
 8005760:	4618      	mov	r0, r3
 8005762:	f000 f985 	bl	8005a70 <RTC_Bcd2ToByte>
 8005766:	4603      	mov	r3, r0
 8005768:	461a      	mov	r2, r3
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	789b      	ldrb	r3, [r3, #2]
 8005772:	4618      	mov	r0, r3
 8005774:	f000 f97c 	bl	8005a70 <RTC_Bcd2ToByte>
 8005778:	4603      	mov	r3, r0
 800577a:	461a      	mov	r2, r3
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3718      	adds	r7, #24
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800578a:	b590      	push	{r4, r7, lr}
 800578c:	b087      	sub	sp, #28
 800578e:	af00      	add	r7, sp, #0
 8005790:	60f8      	str	r0, [r7, #12]
 8005792:	60b9      	str	r1, [r7, #8]
 8005794:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005796:	2300      	movs	r3, #0
 8005798:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	7f1b      	ldrb	r3, [r3, #28]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d101      	bne.n	80057a6 <HAL_RTC_SetDate+0x1c>
 80057a2:	2302      	movs	r3, #2
 80057a4:	e071      	b.n	800588a <HAL_RTC_SetDate+0x100>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2201      	movs	r2, #1
 80057aa:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2202      	movs	r2, #2
 80057b0:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10e      	bne.n	80057d6 <HAL_RTC_SetDate+0x4c>
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	785b      	ldrb	r3, [r3, #1]
 80057bc:	f003 0310 	and.w	r3, r3, #16
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d008      	beq.n	80057d6 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	785b      	ldrb	r3, [r3, #1]
 80057c8:	f023 0310 	bic.w	r3, r3, #16
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	330a      	adds	r3, #10
 80057d0:	b2da      	uxtb	r2, r3
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d11c      	bne.n	8005816 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	78db      	ldrb	r3, [r3, #3]
 80057e0:	4618      	mov	r0, r3
 80057e2:	f000 f927 	bl	8005a34 <RTC_ByteToBcd2>
 80057e6:	4603      	mov	r3, r0
 80057e8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	785b      	ldrb	r3, [r3, #1]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f000 f920 	bl	8005a34 <RTC_ByteToBcd2>
 80057f4:	4603      	mov	r3, r0
 80057f6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80057f8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	789b      	ldrb	r3, [r3, #2]
 80057fe:	4618      	mov	r0, r3
 8005800:	f000 f918 	bl	8005a34 <RTC_ByteToBcd2>
 8005804:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005806:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005810:	4313      	orrs	r3, r2
 8005812:	617b      	str	r3, [r7, #20]
 8005814:	e00e      	b.n	8005834 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	78db      	ldrb	r3, [r3, #3]
 800581a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	785b      	ldrb	r3, [r3, #1]
 8005820:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005822:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005828:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005830:	4313      	orrs	r3, r2
 8005832:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	22ca      	movs	r2, #202	; 0xca
 800583a:	625a      	str	r2, [r3, #36]	; 0x24
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2253      	movs	r2, #83	; 0x53
 8005842:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f000 f899 	bl	800597c <RTC_EnterInitMode>
 800584a:	4603      	mov	r3, r0
 800584c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800584e:	7cfb      	ldrb	r3, [r7, #19]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10c      	bne.n	800586e <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800585e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005862:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f000 f8c0 	bl	80059ea <RTC_ExitInitMode>
 800586a:	4603      	mov	r3, r0
 800586c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800586e:	7cfb      	ldrb	r3, [r7, #19]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d102      	bne.n	800587a <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2201      	movs	r2, #1
 8005878:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	22ff      	movs	r2, #255	; 0xff
 8005880:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	771a      	strb	r2, [r3, #28]

  return status;
 8005888:	7cfb      	ldrb	r3, [r7, #19]
}
 800588a:	4618      	mov	r0, r3
 800588c:	371c      	adds	r7, #28
 800588e:	46bd      	mov	sp, r7
 8005890:	bd90      	pop	{r4, r7, pc}

08005892 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005892:	b580      	push	{r7, lr}
 8005894:	b086      	sub	sp, #24
 8005896:	af00      	add	r7, sp, #0
 8005898:	60f8      	str	r0, [r7, #12]
 800589a:	60b9      	str	r1, [r7, #8]
 800589c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800589e:	2300      	movs	r3, #0
 80058a0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80058ac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80058b0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	0c1b      	lsrs	r3, r3, #16
 80058b6:	b2da      	uxtb	r2, r3
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	0a1b      	lsrs	r3, r3, #8
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	f003 031f 	and.w	r3, r3, #31
 80058c6:	b2da      	uxtb	r2, r3
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058d4:	b2da      	uxtb	r2, r3
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	0b5b      	lsrs	r3, r3, #13
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	f003 0307 	and.w	r3, r3, #7
 80058e4:	b2da      	uxtb	r2, r3
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d11a      	bne.n	8005926 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	78db      	ldrb	r3, [r3, #3]
 80058f4:	4618      	mov	r0, r3
 80058f6:	f000 f8bb 	bl	8005a70 <RTC_Bcd2ToByte>
 80058fa:	4603      	mov	r3, r0
 80058fc:	461a      	mov	r2, r3
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	785b      	ldrb	r3, [r3, #1]
 8005906:	4618      	mov	r0, r3
 8005908:	f000 f8b2 	bl	8005a70 <RTC_Bcd2ToByte>
 800590c:	4603      	mov	r3, r0
 800590e:	461a      	mov	r2, r3
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	789b      	ldrb	r3, [r3, #2]
 8005918:	4618      	mov	r0, r3
 800591a:	f000 f8a9 	bl	8005a70 <RTC_Bcd2ToByte>
 800591e:	4603      	mov	r3, r0
 8005920:	461a      	mov	r2, r3
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3718      	adds	r7, #24
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005938:	2300      	movs	r3, #0
 800593a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a0d      	ldr	r2, [pc, #52]	; (8005978 <HAL_RTC_WaitForSynchro+0x48>)
 8005942:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005944:	f7fc ffdc 	bl	8002900 <HAL_GetTick>
 8005948:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800594a:	e009      	b.n	8005960 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800594c:	f7fc ffd8 	bl	8002900 <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800595a:	d901      	bls.n	8005960 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e007      	b.n	8005970 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	f003 0320 	and.w	r3, r3, #32
 800596a:	2b00      	cmp	r3, #0
 800596c:	d0ee      	beq.n	800594c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	00017f5f 	.word	0x00017f5f

0800597c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005984:	2300      	movs	r3, #0
 8005986:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005988:	2300      	movs	r3, #0
 800598a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005996:	2b00      	cmp	r3, #0
 8005998:	d122      	bne.n	80059e0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68da      	ldr	r2, [r3, #12]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80059a8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80059aa:	f7fc ffa9 	bl	8002900 <HAL_GetTick>
 80059ae:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80059b0:	e00c      	b.n	80059cc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80059b2:	f7fc ffa5 	bl	8002900 <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059c0:	d904      	bls.n	80059cc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2204      	movs	r2, #4
 80059c6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d102      	bne.n	80059e0 <RTC_EnterInitMode+0x64>
 80059da:	7bfb      	ldrb	r3, [r7, #15]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d1e8      	bne.n	80059b2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80059e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}

080059ea <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b084      	sub	sp, #16
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059f2:	2300      	movs	r3, #0
 80059f4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68da      	ldr	r2, [r3, #12]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a04:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	f003 0320 	and.w	r3, r3, #32
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d10a      	bne.n	8005a2a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f7ff ff8b 	bl	8005930 <HAL_RTC_WaitForSynchro>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d004      	beq.n	8005a2a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2204      	movs	r2, #4
 8005a24:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3710      	adds	r7, #16
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005a42:	e005      	b.n	8005a50 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	3301      	adds	r3, #1
 8005a48:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8005a4a:	79fb      	ldrb	r3, [r7, #7]
 8005a4c:	3b0a      	subs	r3, #10
 8005a4e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005a50:	79fb      	ldrb	r3, [r7, #7]
 8005a52:	2b09      	cmp	r3, #9
 8005a54:	d8f6      	bhi.n	8005a44 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	011b      	lsls	r3, r3, #4
 8005a5c:	b2da      	uxtb	r2, r3
 8005a5e:	79fb      	ldrb	r3, [r7, #7]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	b2db      	uxtb	r3, r3
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3714      	adds	r7, #20
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	4603      	mov	r3, r0
 8005a78:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8005a7e:	79fb      	ldrb	r3, [r7, #7]
 8005a80:	091b      	lsrs	r3, r3, #4
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	461a      	mov	r2, r3
 8005a86:	4613      	mov	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	4413      	add	r3, r2
 8005a8c:	005b      	lsls	r3, r3, #1
 8005a8e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	b2da      	uxtb	r2, r3
 8005a94:	79fb      	ldrb	r3, [r7, #7]
 8005a96:	f003 030f 	and.w	r3, r3, #15
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	4413      	add	r3, r2
 8005a9e:	b2db      	uxtb	r3, r3
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3714      	adds	r7, #20
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d101      	bne.n	8005abe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e07b      	b.n	8005bb6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d108      	bne.n	8005ad8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ace:	d009      	beq.n	8005ae4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	61da      	str	r2, [r3, #28]
 8005ad6:	e005      	b.n	8005ae4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d106      	bne.n	8005b04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f7fc fbf8 	bl	80022f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2202      	movs	r2, #2
 8005b08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b1a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005b2c:	431a      	orrs	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b36:	431a      	orrs	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	f003 0302 	and.w	r3, r3, #2
 8005b40:	431a      	orrs	r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	431a      	orrs	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	699b      	ldr	r3, [r3, #24]
 8005b50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b54:	431a      	orrs	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	69db      	ldr	r3, [r3, #28]
 8005b5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b5e:	431a      	orrs	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a1b      	ldr	r3, [r3, #32]
 8005b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b68:	ea42 0103 	orr.w	r1, r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b70:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	0c1b      	lsrs	r3, r3, #16
 8005b82:	f003 0104 	and.w	r1, r3, #4
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8a:	f003 0210 	and.w	r2, r3, #16
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	69da      	ldr	r2, [r3, #28]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ba4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b088      	sub	sp, #32
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	60f8      	str	r0, [r7, #12]
 8005bc6:	60b9      	str	r1, [r7, #8]
 8005bc8:	603b      	str	r3, [r7, #0]
 8005bca:	4613      	mov	r3, r2
 8005bcc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d101      	bne.n	8005be0 <HAL_SPI_Transmit+0x22>
 8005bdc:	2302      	movs	r3, #2
 8005bde:	e12d      	b.n	8005e3c <HAL_SPI_Transmit+0x27e>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005be8:	f7fc fe8a 	bl	8002900 <HAL_GetTick>
 8005bec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005bee:	88fb      	ldrh	r3, [r7, #6]
 8005bf0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d002      	beq.n	8005c04 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005bfe:	2302      	movs	r3, #2
 8005c00:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c02:	e116      	b.n	8005e32 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d002      	beq.n	8005c10 <HAL_SPI_Transmit+0x52>
 8005c0a:	88fb      	ldrh	r3, [r7, #6]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d102      	bne.n	8005c16 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c14:	e10d      	b.n	8005e32 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2203      	movs	r2, #3
 8005c1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	68ba      	ldr	r2, [r7, #8]
 8005c28:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	88fa      	ldrh	r2, [r7, #6]
 8005c2e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	88fa      	ldrh	r2, [r7, #6]
 8005c34:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c5c:	d10f      	bne.n	8005c7e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c7c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c88:	2b40      	cmp	r3, #64	; 0x40
 8005c8a:	d007      	beq.n	8005c9c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ca4:	d14f      	bne.n	8005d46 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d002      	beq.n	8005cb4 <HAL_SPI_Transmit+0xf6>
 8005cae:	8afb      	ldrh	r3, [r7, #22]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d142      	bne.n	8005d3a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb8:	881a      	ldrh	r2, [r3, #0]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc4:	1c9a      	adds	r2, r3, #2
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005cd8:	e02f      	b.n	8005d3a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	f003 0302 	and.w	r3, r3, #2
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d112      	bne.n	8005d0e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cec:	881a      	ldrh	r2, [r3, #0]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf8:	1c9a      	adds	r2, r3, #2
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	3b01      	subs	r3, #1
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	86da      	strh	r2, [r3, #54]	; 0x36
 8005d0c:	e015      	b.n	8005d3a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d0e:	f7fc fdf7 	bl	8002900 <HAL_GetTick>
 8005d12:	4602      	mov	r2, r0
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	1ad3      	subs	r3, r2, r3
 8005d18:	683a      	ldr	r2, [r7, #0]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d803      	bhi.n	8005d26 <HAL_SPI_Transmit+0x168>
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d24:	d102      	bne.n	8005d2c <HAL_SPI_Transmit+0x16e>
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d106      	bne.n	8005d3a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005d38:	e07b      	b.n	8005e32 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1ca      	bne.n	8005cda <HAL_SPI_Transmit+0x11c>
 8005d44:	e050      	b.n	8005de8 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d002      	beq.n	8005d54 <HAL_SPI_Transmit+0x196>
 8005d4e:	8afb      	ldrh	r3, [r7, #22]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d144      	bne.n	8005dde <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	330c      	adds	r3, #12
 8005d5e:	7812      	ldrb	r2, [r2, #0]
 8005d60:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d66:	1c5a      	adds	r2, r3, #1
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	3b01      	subs	r3, #1
 8005d74:	b29a      	uxth	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005d7a:	e030      	b.n	8005dde <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f003 0302 	and.w	r3, r3, #2
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d113      	bne.n	8005db2 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	330c      	adds	r3, #12
 8005d94:	7812      	ldrb	r2, [r2, #0]
 8005d96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9c:	1c5a      	adds	r2, r3, #1
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	3b01      	subs	r3, #1
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	86da      	strh	r2, [r3, #54]	; 0x36
 8005db0:	e015      	b.n	8005dde <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005db2:	f7fc fda5 	bl	8002900 <HAL_GetTick>
 8005db6:	4602      	mov	r2, r0
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	683a      	ldr	r2, [r7, #0]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d803      	bhi.n	8005dca <HAL_SPI_Transmit+0x20c>
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dc8:	d102      	bne.n	8005dd0 <HAL_SPI_Transmit+0x212>
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d106      	bne.n	8005dde <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005ddc:	e029      	b.n	8005e32 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1c9      	bne.n	8005d7c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005de8:	69ba      	ldr	r2, [r7, #24]
 8005dea:	6839      	ldr	r1, [r7, #0]
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f000 fd27 	bl	8006840 <SPI_EndRxTxTransaction>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d002      	beq.n	8005dfe <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2220      	movs	r2, #32
 8005dfc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10a      	bne.n	8005e1c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e06:	2300      	movs	r3, #0
 8005e08:	613b      	str	r3, [r7, #16]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	613b      	str	r3, [r7, #16]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	613b      	str	r3, [r7, #16]
 8005e1a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d002      	beq.n	8005e2a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	77fb      	strb	r3, [r7, #31]
 8005e28:	e003      	b.n	8005e32 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3720      	adds	r7, #32
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b088      	sub	sp, #32
 8005e48:	af02      	add	r7, sp, #8
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	603b      	str	r3, [r7, #0]
 8005e50:	4613      	mov	r3, r2
 8005e52:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e54:	2300      	movs	r3, #0
 8005e56:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d002      	beq.n	8005e6a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005e64:	2302      	movs	r3, #2
 8005e66:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005e68:	e0fb      	b.n	8006062 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e72:	d112      	bne.n	8005e9a <HAL_SPI_Receive+0x56>
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10e      	bne.n	8005e9a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2204      	movs	r2, #4
 8005e80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005e84:	88fa      	ldrh	r2, [r7, #6]
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	68ba      	ldr	r2, [r7, #8]
 8005e8e:	68b9      	ldr	r1, [r7, #8]
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f000 f8ef 	bl	8006074 <HAL_SPI_TransmitReceive>
 8005e96:	4603      	mov	r3, r0
 8005e98:	e0e8      	b.n	800606c <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d101      	bne.n	8005ea8 <HAL_SPI_Receive+0x64>
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	e0e1      	b.n	800606c <HAL_SPI_Receive+0x228>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005eb0:	f7fc fd26 	bl	8002900 <HAL_GetTick>
 8005eb4:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d002      	beq.n	8005ec2 <HAL_SPI_Receive+0x7e>
 8005ebc:	88fb      	ldrh	r3, [r7, #6]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d102      	bne.n	8005ec8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ec6:	e0cc      	b.n	8006062 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2204      	movs	r2, #4
 8005ecc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	68ba      	ldr	r2, [r7, #8]
 8005eda:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	88fa      	ldrh	r2, [r7, #6]
 8005ee0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	88fa      	ldrh	r2, [r7, #6]
 8005ee6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f0e:	d10f      	bne.n	8005f30 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f1e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005f2e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f3a:	2b40      	cmp	r3, #64	; 0x40
 8005f3c:	d007      	beq.n	8005f4e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f4c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d16a      	bne.n	800602c <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005f56:	e032      	b.n	8005fbe <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f003 0301 	and.w	r3, r3, #1
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d115      	bne.n	8005f92 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f103 020c 	add.w	r2, r3, #12
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f72:	7812      	ldrb	r2, [r2, #0]
 8005f74:	b2d2      	uxtb	r2, r2
 8005f76:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7c:	1c5a      	adds	r2, r3, #1
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f90:	e015      	b.n	8005fbe <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f92:	f7fc fcb5 	bl	8002900 <HAL_GetTick>
 8005f96:	4602      	mov	r2, r0
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	683a      	ldr	r2, [r7, #0]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d803      	bhi.n	8005faa <HAL_SPI_Receive+0x166>
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fa8:	d102      	bne.n	8005fb0 <HAL_SPI_Receive+0x16c>
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d106      	bne.n	8005fbe <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005fbc:	e051      	b.n	8006062 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1c7      	bne.n	8005f58 <HAL_SPI_Receive+0x114>
 8005fc8:	e035      	b.n	8006036 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	f003 0301 	and.w	r3, r3, #1
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d113      	bne.n	8006000 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68da      	ldr	r2, [r3, #12]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe2:	b292      	uxth	r2, r2
 8005fe4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fea:	1c9a      	adds	r2, r3, #2
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ffe:	e015      	b.n	800602c <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006000:	f7fc fc7e 	bl	8002900 <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	683a      	ldr	r2, [r7, #0]
 800600c:	429a      	cmp	r2, r3
 800600e:	d803      	bhi.n	8006018 <HAL_SPI_Receive+0x1d4>
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006016:	d102      	bne.n	800601e <HAL_SPI_Receive+0x1da>
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d106      	bne.n	800602c <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800602a:	e01a      	b.n	8006062 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006030:	b29b      	uxth	r3, r3
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1c9      	bne.n	8005fca <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	6839      	ldr	r1, [r7, #0]
 800603a:	68f8      	ldr	r0, [r7, #12]
 800603c:	f000 fb9a 	bl	8006774 <SPI_EndRxTransaction>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d002      	beq.n	800604c <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2220      	movs	r2, #32
 800604a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006050:	2b00      	cmp	r3, #0
 8006052:	d002      	beq.n	800605a <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	75fb      	strb	r3, [r7, #23]
 8006058:	e003      	b.n	8006062 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800606a:	7dfb      	ldrb	r3, [r7, #23]
}
 800606c:	4618      	mov	r0, r3
 800606e:	3718      	adds	r7, #24
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b08c      	sub	sp, #48	; 0x30
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	607a      	str	r2, [r7, #4]
 8006080:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006082:	2301      	movs	r3, #1
 8006084:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006086:	2300      	movs	r3, #0
 8006088:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006092:	2b01      	cmp	r3, #1
 8006094:	d101      	bne.n	800609a <HAL_SPI_TransmitReceive+0x26>
 8006096:	2302      	movs	r3, #2
 8006098:	e198      	b.n	80063cc <HAL_SPI_TransmitReceive+0x358>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060a2:	f7fc fc2d 	bl	8002900 <HAL_GetTick>
 80060a6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80060b8:	887b      	ldrh	r3, [r7, #2]
 80060ba:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80060bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d00f      	beq.n	80060e4 <HAL_SPI_TransmitReceive+0x70>
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060ca:	d107      	bne.n	80060dc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d103      	bne.n	80060dc <HAL_SPI_TransmitReceive+0x68>
 80060d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060d8:	2b04      	cmp	r3, #4
 80060da:	d003      	beq.n	80060e4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80060dc:	2302      	movs	r3, #2
 80060de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80060e2:	e16d      	b.n	80063c0 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d005      	beq.n	80060f6 <HAL_SPI_TransmitReceive+0x82>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d002      	beq.n	80060f6 <HAL_SPI_TransmitReceive+0x82>
 80060f0:	887b      	ldrh	r3, [r7, #2]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d103      	bne.n	80060fe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80060fc:	e160      	b.n	80063c0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b04      	cmp	r3, #4
 8006108:	d003      	beq.n	8006112 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2205      	movs	r2, #5
 800610e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	887a      	ldrh	r2, [r7, #2]
 8006122:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	887a      	ldrh	r2, [r7, #2]
 8006128:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	887a      	ldrh	r2, [r7, #2]
 8006134:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	887a      	ldrh	r2, [r7, #2]
 800613a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006152:	2b40      	cmp	r3, #64	; 0x40
 8006154:	d007      	beq.n	8006166 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006164:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800616e:	d17c      	bne.n	800626a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d002      	beq.n	800617e <HAL_SPI_TransmitReceive+0x10a>
 8006178:	8b7b      	ldrh	r3, [r7, #26]
 800617a:	2b01      	cmp	r3, #1
 800617c:	d16a      	bne.n	8006254 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006182:	881a      	ldrh	r2, [r3, #0]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618e:	1c9a      	adds	r2, r3, #2
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006198:	b29b      	uxth	r3, r3
 800619a:	3b01      	subs	r3, #1
 800619c:	b29a      	uxth	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061a2:	e057      	b.n	8006254 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f003 0302 	and.w	r3, r3, #2
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d11b      	bne.n	80061ea <HAL_SPI_TransmitReceive+0x176>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d016      	beq.n	80061ea <HAL_SPI_TransmitReceive+0x176>
 80061bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d113      	bne.n	80061ea <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c6:	881a      	ldrh	r2, [r3, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d2:	1c9a      	adds	r2, r3, #2
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061dc:	b29b      	uxth	r3, r3
 80061de:	3b01      	subs	r3, #1
 80061e0:	b29a      	uxth	r2, r3
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80061e6:	2300      	movs	r3, #0
 80061e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	f003 0301 	and.w	r3, r3, #1
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d119      	bne.n	800622c <HAL_SPI_TransmitReceive+0x1b8>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d014      	beq.n	800622c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68da      	ldr	r2, [r3, #12]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620c:	b292      	uxth	r2, r2
 800620e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006214:	1c9a      	adds	r2, r3, #2
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800621e:	b29b      	uxth	r3, r3
 8006220:	3b01      	subs	r3, #1
 8006222:	b29a      	uxth	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006228:	2301      	movs	r3, #1
 800622a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800622c:	f7fc fb68 	bl	8002900 <HAL_GetTick>
 8006230:	4602      	mov	r2, r0
 8006232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006238:	429a      	cmp	r2, r3
 800623a:	d80b      	bhi.n	8006254 <HAL_SPI_TransmitReceive+0x1e0>
 800623c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006242:	d007      	beq.n	8006254 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006252:	e0b5      	b.n	80063c0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006258:	b29b      	uxth	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1a2      	bne.n	80061a4 <HAL_SPI_TransmitReceive+0x130>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006262:	b29b      	uxth	r3, r3
 8006264:	2b00      	cmp	r3, #0
 8006266:	d19d      	bne.n	80061a4 <HAL_SPI_TransmitReceive+0x130>
 8006268:	e080      	b.n	800636c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d002      	beq.n	8006278 <HAL_SPI_TransmitReceive+0x204>
 8006272:	8b7b      	ldrh	r3, [r7, #26]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d16f      	bne.n	8006358 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	330c      	adds	r3, #12
 8006282:	7812      	ldrb	r2, [r2, #0]
 8006284:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628a:	1c5a      	adds	r2, r3, #1
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006294:	b29b      	uxth	r3, r3
 8006296:	3b01      	subs	r3, #1
 8006298:	b29a      	uxth	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800629e:	e05b      	b.n	8006358 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f003 0302 	and.w	r3, r3, #2
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d11c      	bne.n	80062e8 <HAL_SPI_TransmitReceive+0x274>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d017      	beq.n	80062e8 <HAL_SPI_TransmitReceive+0x274>
 80062b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d114      	bne.n	80062e8 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	330c      	adds	r3, #12
 80062c8:	7812      	ldrb	r2, [r2, #0]
 80062ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d0:	1c5a      	adds	r2, r3, #1
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062da:	b29b      	uxth	r3, r3
 80062dc:	3b01      	subs	r3, #1
 80062de:	b29a      	uxth	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062e4:	2300      	movs	r3, #0
 80062e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f003 0301 	and.w	r3, r3, #1
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d119      	bne.n	800632a <HAL_SPI_TransmitReceive+0x2b6>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d014      	beq.n	800632a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68da      	ldr	r2, [r3, #12]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630a:	b2d2      	uxtb	r2, r2
 800630c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006312:	1c5a      	adds	r2, r3, #1
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800631c:	b29b      	uxth	r3, r3
 800631e:	3b01      	subs	r3, #1
 8006320:	b29a      	uxth	r2, r3
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006326:	2301      	movs	r3, #1
 8006328:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800632a:	f7fc fae9 	bl	8002900 <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006336:	429a      	cmp	r2, r3
 8006338:	d803      	bhi.n	8006342 <HAL_SPI_TransmitReceive+0x2ce>
 800633a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006340:	d102      	bne.n	8006348 <HAL_SPI_TransmitReceive+0x2d4>
 8006342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006344:	2b00      	cmp	r3, #0
 8006346:	d107      	bne.n	8006358 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2201      	movs	r2, #1
 8006352:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006356:	e033      	b.n	80063c0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800635c:	b29b      	uxth	r3, r3
 800635e:	2b00      	cmp	r3, #0
 8006360:	d19e      	bne.n	80062a0 <HAL_SPI_TransmitReceive+0x22c>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006366:	b29b      	uxth	r3, r3
 8006368:	2b00      	cmp	r3, #0
 800636a:	d199      	bne.n	80062a0 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800636c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800636e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f000 fa65 	bl	8006840 <SPI_EndRxTxTransaction>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d006      	beq.n	800638a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2220      	movs	r2, #32
 8006386:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006388:	e01a      	b.n	80063c0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10a      	bne.n	80063a8 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006392:	2300      	movs	r3, #0
 8006394:	617b      	str	r3, [r7, #20]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	617b      	str	r3, [r7, #20]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	617b      	str	r3, [r7, #20]
 80063a6:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d003      	beq.n	80063b8 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063b6:	e003      	b.n	80063c0 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80063c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3730      	adds	r7, #48	; 0x30
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b086      	sub	sp, #24
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	4613      	mov	r3, r2
 80063e0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063e2:	2300      	movs	r3, #0
 80063e4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d101      	bne.n	80063f4 <HAL_SPI_Transmit_DMA+0x20>
 80063f0:	2302      	movs	r3, #2
 80063f2:	e097      	b.n	8006524 <HAL_SPI_Transmit_DMA+0x150>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006402:	b2db      	uxtb	r3, r3
 8006404:	2b01      	cmp	r3, #1
 8006406:	d002      	beq.n	800640e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8006408:	2302      	movs	r3, #2
 800640a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800640c:	e085      	b.n	800651a <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d002      	beq.n	800641a <HAL_SPI_Transmit_DMA+0x46>
 8006414:	88fb      	ldrh	r3, [r7, #6]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d102      	bne.n	8006420 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800641e:	e07c      	b.n	800651a <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2203      	movs	r2, #3
 8006424:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	88fa      	ldrh	r2, [r7, #6]
 8006438:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	88fa      	ldrh	r2, [r7, #6]
 800643e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006466:	d10f      	bne.n	8006488 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006476:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006486:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800648c:	4a27      	ldr	r2, [pc, #156]	; (800652c <HAL_SPI_Transmit_DMA+0x158>)
 800648e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006494:	4a26      	ldr	r2, [pc, #152]	; (8006530 <HAL_SPI_Transmit_DMA+0x15c>)
 8006496:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800649c:	4a25      	ldr	r2, [pc, #148]	; (8006534 <HAL_SPI_Transmit_DMA+0x160>)
 800649e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064a4:	2200      	movs	r2, #0
 80064a6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b0:	4619      	mov	r1, r3
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	330c      	adds	r3, #12
 80064b8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064be:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80064c0:	f7fc fc0e 	bl	8002ce0 <HAL_DMA_Start_IT>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d008      	beq.n	80064dc <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ce:	f043 0210 	orr.w	r2, r3, #16
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	75fb      	strb	r3, [r7, #23]

    goto error;
 80064da:	e01e      	b.n	800651a <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e6:	2b40      	cmp	r3, #64	; 0x40
 80064e8:	d007      	beq.n	80064fa <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064f8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	685a      	ldr	r2, [r3, #4]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f042 0220 	orr.w	r2, r2, #32
 8006508:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	685a      	ldr	r2, [r3, #4]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f042 0202 	orr.w	r2, r2, #2
 8006518:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006522:	7dfb      	ldrb	r3, [r7, #23]
}
 8006524:	4618      	mov	r0, r3
 8006526:	3718      	adds	r7, #24
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}
 800652c:	08006609 	.word	0x08006609
 8006530:	08006561 	.word	0x08006561
 8006534:	08006625 	.word	0x08006625

08006538 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006540:	bf00      	nop
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b086      	sub	sp, #24
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800656e:	f7fc f9c7 	bl	8002900 <HAL_GetTick>
 8006572:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800657e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006582:	d03b      	beq.n	80065fc <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	685a      	ldr	r2, [r3, #4]
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f022 0220 	bic.w	r2, r2, #32
 8006592:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	685a      	ldr	r2, [r3, #4]
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f022 0202 	bic.w	r2, r2, #2
 80065a2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80065a4:	693a      	ldr	r2, [r7, #16]
 80065a6:	2164      	movs	r1, #100	; 0x64
 80065a8:	6978      	ldr	r0, [r7, #20]
 80065aa:	f000 f949 	bl	8006840 <SPI_EndRxTxTransaction>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d005      	beq.n	80065c0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065b8:	f043 0220 	orr.w	r2, r3, #32
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10a      	bne.n	80065de <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065c8:	2300      	movs	r3, #0
 80065ca:	60fb      	str	r3, [r7, #12]
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	60fb      	str	r3, [r7, #12]
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	60fb      	str	r3, [r7, #12]
 80065dc:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	2200      	movs	r2, #0
 80065e2:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d003      	beq.n	80065fc <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80065f4:	6978      	ldr	r0, [r7, #20]
 80065f6:	f7ff ffa9 	bl	800654c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80065fa:	e002      	b.n	8006602 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80065fc:	6978      	ldr	r0, [r7, #20]
 80065fe:	f7fc f849 	bl	8002694 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006602:	3718      	adds	r7, #24
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006614:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	f7ff ff8e 	bl	8006538 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800661c:	bf00      	nop
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006630:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	685a      	ldr	r2, [r3, #4]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f022 0203 	bic.w	r2, r2, #3
 8006640:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006646:	f043 0210 	orr.w	r2, r3, #16
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2201      	movs	r2, #1
 8006652:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	f7ff ff78 	bl	800654c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800665c:	bf00      	nop
 800665e:	3710      	adds	r7, #16
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b088      	sub	sp, #32
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	603b      	str	r3, [r7, #0]
 8006670:	4613      	mov	r3, r2
 8006672:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006674:	f7fc f944 	bl	8002900 <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667c:	1a9b      	subs	r3, r3, r2
 800667e:	683a      	ldr	r2, [r7, #0]
 8006680:	4413      	add	r3, r2
 8006682:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006684:	f7fc f93c 	bl	8002900 <HAL_GetTick>
 8006688:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800668a:	4b39      	ldr	r3, [pc, #228]	; (8006770 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	015b      	lsls	r3, r3, #5
 8006690:	0d1b      	lsrs	r3, r3, #20
 8006692:	69fa      	ldr	r2, [r7, #28]
 8006694:	fb02 f303 	mul.w	r3, r2, r3
 8006698:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800669a:	e054      	b.n	8006746 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066a2:	d050      	beq.n	8006746 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80066a4:	f7fc f92c 	bl	8002900 <HAL_GetTick>
 80066a8:	4602      	mov	r2, r0
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	69fa      	ldr	r2, [r7, #28]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d902      	bls.n	80066ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d13d      	bne.n	8006736 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	685a      	ldr	r2, [r3, #4]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80066c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066d2:	d111      	bne.n	80066f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066dc:	d004      	beq.n	80066e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066e6:	d107      	bne.n	80066f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006700:	d10f      	bne.n	8006722 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006710:	601a      	str	r2, [r3, #0]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006720:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2201      	movs	r2, #1
 8006726:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006732:	2303      	movs	r3, #3
 8006734:	e017      	b.n	8006766 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d101      	bne.n	8006740 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800673c:	2300      	movs	r3, #0
 800673e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	3b01      	subs	r3, #1
 8006744:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	689a      	ldr	r2, [r3, #8]
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	4013      	ands	r3, r2
 8006750:	68ba      	ldr	r2, [r7, #8]
 8006752:	429a      	cmp	r2, r3
 8006754:	bf0c      	ite	eq
 8006756:	2301      	moveq	r3, #1
 8006758:	2300      	movne	r3, #0
 800675a:	b2db      	uxtb	r3, r3
 800675c:	461a      	mov	r2, r3
 800675e:	79fb      	ldrb	r3, [r7, #7]
 8006760:	429a      	cmp	r2, r3
 8006762:	d19b      	bne.n	800669c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3720      	adds	r7, #32
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	20000018 	.word	0x20000018

08006774 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b086      	sub	sp, #24
 8006778:	af02      	add	r7, sp, #8
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006788:	d111      	bne.n	80067ae <SPI_EndRxTransaction+0x3a>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006792:	d004      	beq.n	800679e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800679c:	d107      	bne.n	80067ae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067ac:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067b6:	d12a      	bne.n	800680e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067c0:	d012      	beq.n	80067e8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	9300      	str	r3, [sp, #0]
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	2200      	movs	r2, #0
 80067ca:	2180      	movs	r1, #128	; 0x80
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f7ff ff49 	bl	8006664 <SPI_WaitFlagStateUntilTimeout>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d02d      	beq.n	8006834 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067dc:	f043 0220 	orr.w	r2, r3, #32
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e026      	b.n	8006836 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	9300      	str	r3, [sp, #0]
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	2200      	movs	r2, #0
 80067f0:	2101      	movs	r1, #1
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	f7ff ff36 	bl	8006664 <SPI_WaitFlagStateUntilTimeout>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d01a      	beq.n	8006834 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006802:	f043 0220 	orr.w	r2, r3, #32
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	e013      	b.n	8006836 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	9300      	str	r3, [sp, #0]
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	2200      	movs	r2, #0
 8006816:	2101      	movs	r1, #1
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	f7ff ff23 	bl	8006664 <SPI_WaitFlagStateUntilTimeout>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d007      	beq.n	8006834 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006828:	f043 0220 	orr.w	r2, r3, #32
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	e000      	b.n	8006836 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
	...

08006840 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b088      	sub	sp, #32
 8006844:	af02      	add	r7, sp, #8
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	9300      	str	r3, [sp, #0]
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	2201      	movs	r2, #1
 8006854:	2102      	movs	r1, #2
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	f7ff ff04 	bl	8006664 <SPI_WaitFlagStateUntilTimeout>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d007      	beq.n	8006872 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006866:	f043 0220 	orr.w	r2, r3, #32
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e032      	b.n	80068d8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006872:	4b1b      	ldr	r3, [pc, #108]	; (80068e0 <SPI_EndRxTxTransaction+0xa0>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a1b      	ldr	r2, [pc, #108]	; (80068e4 <SPI_EndRxTxTransaction+0xa4>)
 8006878:	fba2 2303 	umull	r2, r3, r2, r3
 800687c:	0d5b      	lsrs	r3, r3, #21
 800687e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006882:	fb02 f303 	mul.w	r3, r2, r3
 8006886:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006890:	d112      	bne.n	80068b8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	9300      	str	r3, [sp, #0]
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	2200      	movs	r2, #0
 800689a:	2180      	movs	r1, #128	; 0x80
 800689c:	68f8      	ldr	r0, [r7, #12]
 800689e:	f7ff fee1 	bl	8006664 <SPI_WaitFlagStateUntilTimeout>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d016      	beq.n	80068d6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ac:	f043 0220 	orr.w	r2, r3, #32
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80068b4:	2303      	movs	r3, #3
 80068b6:	e00f      	b.n	80068d8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00a      	beq.n	80068d4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	3b01      	subs	r3, #1
 80068c2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ce:	2b80      	cmp	r3, #128	; 0x80
 80068d0:	d0f2      	beq.n	80068b8 <SPI_EndRxTxTransaction+0x78>
 80068d2:	e000      	b.n	80068d6 <SPI_EndRxTxTransaction+0x96>
        break;
 80068d4:	bf00      	nop
  }

  return HAL_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3718      	adds	r7, #24
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}
 80068e0:	20000018 	.word	0x20000018
 80068e4:	165e9f81 	.word	0x165e9f81

080068e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d101      	bne.n	80068fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e041      	b.n	800697e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006900:	b2db      	uxtb	r3, r3
 8006902:	2b00      	cmp	r3, #0
 8006904:	d106      	bne.n	8006914 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f7fb fdf2 	bl	80024f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2202      	movs	r2, #2
 8006918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	3304      	adds	r3, #4
 8006924:	4619      	mov	r1, r3
 8006926:	4610      	mov	r0, r2
 8006928:	f000 f9c0 	bl	8006cac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3708      	adds	r7, #8
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
	...

08006988 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006996:	b2db      	uxtb	r3, r3
 8006998:	2b01      	cmp	r3, #1
 800699a:	d001      	beq.n	80069a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	e04e      	b.n	8006a3e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2202      	movs	r2, #2
 80069a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68da      	ldr	r2, [r3, #12]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f042 0201 	orr.w	r2, r2, #1
 80069b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a23      	ldr	r2, [pc, #140]	; (8006a4c <HAL_TIM_Base_Start_IT+0xc4>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d022      	beq.n	8006a08 <HAL_TIM_Base_Start_IT+0x80>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069ca:	d01d      	beq.n	8006a08 <HAL_TIM_Base_Start_IT+0x80>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a1f      	ldr	r2, [pc, #124]	; (8006a50 <HAL_TIM_Base_Start_IT+0xc8>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d018      	beq.n	8006a08 <HAL_TIM_Base_Start_IT+0x80>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a1e      	ldr	r2, [pc, #120]	; (8006a54 <HAL_TIM_Base_Start_IT+0xcc>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d013      	beq.n	8006a08 <HAL_TIM_Base_Start_IT+0x80>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a1c      	ldr	r2, [pc, #112]	; (8006a58 <HAL_TIM_Base_Start_IT+0xd0>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d00e      	beq.n	8006a08 <HAL_TIM_Base_Start_IT+0x80>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a1b      	ldr	r2, [pc, #108]	; (8006a5c <HAL_TIM_Base_Start_IT+0xd4>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d009      	beq.n	8006a08 <HAL_TIM_Base_Start_IT+0x80>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a19      	ldr	r2, [pc, #100]	; (8006a60 <HAL_TIM_Base_Start_IT+0xd8>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d004      	beq.n	8006a08 <HAL_TIM_Base_Start_IT+0x80>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a18      	ldr	r2, [pc, #96]	; (8006a64 <HAL_TIM_Base_Start_IT+0xdc>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d111      	bne.n	8006a2c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f003 0307 	and.w	r3, r3, #7
 8006a12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2b06      	cmp	r3, #6
 8006a18:	d010      	beq.n	8006a3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f042 0201 	orr.w	r2, r2, #1
 8006a28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a2a:	e007      	b.n	8006a3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f042 0201 	orr.w	r2, r2, #1
 8006a3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3714      	adds	r7, #20
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	40010000 	.word	0x40010000
 8006a50:	40000400 	.word	0x40000400
 8006a54:	40000800 	.word	0x40000800
 8006a58:	40000c00 	.word	0x40000c00
 8006a5c:	40010400 	.word	0x40010400
 8006a60:	40014000 	.word	0x40014000
 8006a64:	40001800 	.word	0x40001800

08006a68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	f003 0302 	and.w	r3, r3, #2
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d020      	beq.n	8006acc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f003 0302 	and.w	r3, r3, #2
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d01b      	beq.n	8006acc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f06f 0202 	mvn.w	r2, #2
 8006a9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	f003 0303 	and.w	r3, r3, #3
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d003      	beq.n	8006aba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f8dc 	bl	8006c70 <HAL_TIM_IC_CaptureCallback>
 8006ab8:	e005      	b.n	8006ac6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 f8ce 	bl	8006c5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 f8df 	bl	8006c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	f003 0304 	and.w	r3, r3, #4
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d020      	beq.n	8006b18 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f003 0304 	and.w	r3, r3, #4
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d01b      	beq.n	8006b18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f06f 0204 	mvn.w	r2, #4
 8006ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2202      	movs	r2, #2
 8006aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	699b      	ldr	r3, [r3, #24]
 8006af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d003      	beq.n	8006b06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f8b6 	bl	8006c70 <HAL_TIM_IC_CaptureCallback>
 8006b04:	e005      	b.n	8006b12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 f8a8 	bl	8006c5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 f8b9 	bl	8006c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	f003 0308 	and.w	r3, r3, #8
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d020      	beq.n	8006b64 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f003 0308 	and.w	r3, r3, #8
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d01b      	beq.n	8006b64 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f06f 0208 	mvn.w	r2, #8
 8006b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2204      	movs	r2, #4
 8006b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	69db      	ldr	r3, [r3, #28]
 8006b42:	f003 0303 	and.w	r3, r3, #3
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d003      	beq.n	8006b52 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 f890 	bl	8006c70 <HAL_TIM_IC_CaptureCallback>
 8006b50:	e005      	b.n	8006b5e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 f882 	bl	8006c5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 f893 	bl	8006c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	f003 0310 	and.w	r3, r3, #16
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d020      	beq.n	8006bb0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f003 0310 	and.w	r3, r3, #16
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d01b      	beq.n	8006bb0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f06f 0210 	mvn.w	r2, #16
 8006b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2208      	movs	r2, #8
 8006b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	69db      	ldr	r3, [r3, #28]
 8006b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d003      	beq.n	8006b9e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 f86a 	bl	8006c70 <HAL_TIM_IC_CaptureCallback>
 8006b9c:	e005      	b.n	8006baa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 f85c 	bl	8006c5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 f86d 	bl	8006c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	f003 0301 	and.w	r3, r3, #1
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00c      	beq.n	8006bd4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f003 0301 	and.w	r3, r3, #1
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d007      	beq.n	8006bd4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f06f 0201 	mvn.w	r2, #1
 8006bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 f83a 	bl	8006c48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00c      	beq.n	8006bf8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d007      	beq.n	8006bf8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 f98c 	bl	8006f10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00c      	beq.n	8006c1c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d007      	beq.n	8006c1c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 f83e 	bl	8006c98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	f003 0320 	and.w	r3, r3, #32
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00c      	beq.n	8006c40 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f003 0320 	and.w	r3, r3, #32
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d007      	beq.n	8006c40 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f06f 0220 	mvn.w	r2, #32
 8006c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f95e 	bl	8006efc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c40:	bf00      	nop
 8006c42:	3710      	adds	r7, #16
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006c50:	bf00      	nop
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c64:	bf00      	nop
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c78:	bf00      	nop
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b085      	sub	sp, #20
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4a46      	ldr	r2, [pc, #280]	; (8006dd8 <TIM_Base_SetConfig+0x12c>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d013      	beq.n	8006cec <TIM_Base_SetConfig+0x40>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cca:	d00f      	beq.n	8006cec <TIM_Base_SetConfig+0x40>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4a43      	ldr	r2, [pc, #268]	; (8006ddc <TIM_Base_SetConfig+0x130>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d00b      	beq.n	8006cec <TIM_Base_SetConfig+0x40>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4a42      	ldr	r2, [pc, #264]	; (8006de0 <TIM_Base_SetConfig+0x134>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d007      	beq.n	8006cec <TIM_Base_SetConfig+0x40>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4a41      	ldr	r2, [pc, #260]	; (8006de4 <TIM_Base_SetConfig+0x138>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d003      	beq.n	8006cec <TIM_Base_SetConfig+0x40>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a40      	ldr	r2, [pc, #256]	; (8006de8 <TIM_Base_SetConfig+0x13c>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d108      	bne.n	8006cfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4a35      	ldr	r2, [pc, #212]	; (8006dd8 <TIM_Base_SetConfig+0x12c>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d02b      	beq.n	8006d5e <TIM_Base_SetConfig+0xb2>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d0c:	d027      	beq.n	8006d5e <TIM_Base_SetConfig+0xb2>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4a32      	ldr	r2, [pc, #200]	; (8006ddc <TIM_Base_SetConfig+0x130>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d023      	beq.n	8006d5e <TIM_Base_SetConfig+0xb2>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a31      	ldr	r2, [pc, #196]	; (8006de0 <TIM_Base_SetConfig+0x134>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d01f      	beq.n	8006d5e <TIM_Base_SetConfig+0xb2>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	4a30      	ldr	r2, [pc, #192]	; (8006de4 <TIM_Base_SetConfig+0x138>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d01b      	beq.n	8006d5e <TIM_Base_SetConfig+0xb2>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a2f      	ldr	r2, [pc, #188]	; (8006de8 <TIM_Base_SetConfig+0x13c>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d017      	beq.n	8006d5e <TIM_Base_SetConfig+0xb2>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4a2e      	ldr	r2, [pc, #184]	; (8006dec <TIM_Base_SetConfig+0x140>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d013      	beq.n	8006d5e <TIM_Base_SetConfig+0xb2>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a2d      	ldr	r2, [pc, #180]	; (8006df0 <TIM_Base_SetConfig+0x144>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d00f      	beq.n	8006d5e <TIM_Base_SetConfig+0xb2>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a2c      	ldr	r2, [pc, #176]	; (8006df4 <TIM_Base_SetConfig+0x148>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d00b      	beq.n	8006d5e <TIM_Base_SetConfig+0xb2>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a2b      	ldr	r2, [pc, #172]	; (8006df8 <TIM_Base_SetConfig+0x14c>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d007      	beq.n	8006d5e <TIM_Base_SetConfig+0xb2>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a2a      	ldr	r2, [pc, #168]	; (8006dfc <TIM_Base_SetConfig+0x150>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d003      	beq.n	8006d5e <TIM_Base_SetConfig+0xb2>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a29      	ldr	r2, [pc, #164]	; (8006e00 <TIM_Base_SetConfig+0x154>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d108      	bne.n	8006d70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	695b      	ldr	r3, [r3, #20]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	689a      	ldr	r2, [r3, #8]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4a10      	ldr	r2, [pc, #64]	; (8006dd8 <TIM_Base_SetConfig+0x12c>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d003      	beq.n	8006da4 <TIM_Base_SetConfig+0xf8>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a12      	ldr	r2, [pc, #72]	; (8006de8 <TIM_Base_SetConfig+0x13c>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d103      	bne.n	8006dac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	691a      	ldr	r2, [r3, #16]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	f003 0301 	and.w	r3, r3, #1
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d105      	bne.n	8006dca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	f023 0201 	bic.w	r2, r3, #1
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	611a      	str	r2, [r3, #16]
  }
}
 8006dca:	bf00      	nop
 8006dcc:	3714      	adds	r7, #20
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	40010000 	.word	0x40010000
 8006ddc:	40000400 	.word	0x40000400
 8006de0:	40000800 	.word	0x40000800
 8006de4:	40000c00 	.word	0x40000c00
 8006de8:	40010400 	.word	0x40010400
 8006dec:	40014000 	.word	0x40014000
 8006df0:	40014400 	.word	0x40014400
 8006df4:	40014800 	.word	0x40014800
 8006df8:	40001800 	.word	0x40001800
 8006dfc:	40001c00 	.word	0x40001c00
 8006e00:	40002000 	.word	0x40002000

08006e04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d101      	bne.n	8006e1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e18:	2302      	movs	r3, #2
 8006e1a:	e05a      	b.n	8006ed2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2202      	movs	r2, #2
 8006e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a21      	ldr	r2, [pc, #132]	; (8006ee0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d022      	beq.n	8006ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e68:	d01d      	beq.n	8006ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a1d      	ldr	r2, [pc, #116]	; (8006ee4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d018      	beq.n	8006ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a1b      	ldr	r2, [pc, #108]	; (8006ee8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d013      	beq.n	8006ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a1a      	ldr	r2, [pc, #104]	; (8006eec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d00e      	beq.n	8006ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a18      	ldr	r2, [pc, #96]	; (8006ef0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d009      	beq.n	8006ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a17      	ldr	r2, [pc, #92]	; (8006ef4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d004      	beq.n	8006ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a15      	ldr	r2, [pc, #84]	; (8006ef8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d10c      	bne.n	8006ec0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006eac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	68ba      	ldr	r2, [r7, #8]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68ba      	ldr	r2, [r7, #8]
 8006ebe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3714      	adds	r7, #20
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	40010000 	.word	0x40010000
 8006ee4:	40000400 	.word	0x40000400
 8006ee8:	40000800 	.word	0x40000800
 8006eec:	40000c00 	.word	0x40000c00
 8006ef0:	40010400 	.word	0x40010400
 8006ef4:	40014000 	.word	0x40014000
 8006ef8:	40001800 	.word	0x40001800

08006efc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f04:	bf00      	nop
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f18:	bf00      	nop
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d101      	bne.n	8006f36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e042      	b.n	8006fbc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d106      	bne.n	8006f50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f7fb fafc 	bl	8002548 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2224      	movs	r2, #36	; 0x24
 8006f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	68da      	ldr	r2, [r3, #12]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 fdbd 	bl	8007ae8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	691a      	ldr	r2, [r3, #16]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	695a      	ldr	r2, [r3, #20]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	68da      	ldr	r2, [r3, #12]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2220      	movs	r2, #32
 8006fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2220      	movs	r2, #32
 8006fb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3708      	adds	r7, #8
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b08a      	sub	sp, #40	; 0x28
 8006fc8:	af02      	add	r7, sp, #8
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	603b      	str	r3, [r7, #0]
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	2b20      	cmp	r3, #32
 8006fe2:	d175      	bne.n	80070d0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d002      	beq.n	8006ff0 <HAL_UART_Transmit+0x2c>
 8006fea:	88fb      	ldrh	r3, [r7, #6]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d101      	bne.n	8006ff4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e06e      	b.n	80070d2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2221      	movs	r2, #33	; 0x21
 8006ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007002:	f7fb fc7d 	bl	8002900 <HAL_GetTick>
 8007006:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	88fa      	ldrh	r2, [r7, #6]
 800700c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	88fa      	ldrh	r2, [r7, #6]
 8007012:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800701c:	d108      	bne.n	8007030 <HAL_UART_Transmit+0x6c>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d104      	bne.n	8007030 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007026:	2300      	movs	r3, #0
 8007028:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	61bb      	str	r3, [r7, #24]
 800702e:	e003      	b.n	8007038 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007034:	2300      	movs	r3, #0
 8007036:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007038:	e02e      	b.n	8007098 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	9300      	str	r3, [sp, #0]
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	2200      	movs	r2, #0
 8007042:	2180      	movs	r1, #128	; 0x80
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f000 fb1f 	bl	8007688 <UART_WaitOnFlagUntilTimeout>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d005      	beq.n	800705c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2220      	movs	r2, #32
 8007054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8007058:	2303      	movs	r3, #3
 800705a:	e03a      	b.n	80070d2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d10b      	bne.n	800707a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	881b      	ldrh	r3, [r3, #0]
 8007066:	461a      	mov	r2, r3
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007070:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	3302      	adds	r3, #2
 8007076:	61bb      	str	r3, [r7, #24]
 8007078:	e007      	b.n	800708a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	781a      	ldrb	r2, [r3, #0]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	3301      	adds	r3, #1
 8007088:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800708e:	b29b      	uxth	r3, r3
 8007090:	3b01      	subs	r3, #1
 8007092:	b29a      	uxth	r2, r3
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800709c:	b29b      	uxth	r3, r3
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1cb      	bne.n	800703a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	9300      	str	r3, [sp, #0]
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	2200      	movs	r2, #0
 80070aa:	2140      	movs	r1, #64	; 0x40
 80070ac:	68f8      	ldr	r0, [r7, #12]
 80070ae:	f000 faeb 	bl	8007688 <UART_WaitOnFlagUntilTimeout>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d005      	beq.n	80070c4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2220      	movs	r2, #32
 80070bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80070c0:	2303      	movs	r3, #3
 80070c2:	e006      	b.n	80070d2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2220      	movs	r2, #32
 80070c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80070cc:	2300      	movs	r3, #0
 80070ce:	e000      	b.n	80070d2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80070d0:	2302      	movs	r3, #2
  }
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3720      	adds	r7, #32
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b084      	sub	sp, #16
 80070de:	af00      	add	r7, sp, #0
 80070e0:	60f8      	str	r0, [r7, #12]
 80070e2:	60b9      	str	r1, [r7, #8]
 80070e4:	4613      	mov	r3, r2
 80070e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	2b20      	cmp	r3, #32
 80070f2:	d112      	bne.n	800711a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d002      	beq.n	8007100 <HAL_UART_Receive_IT+0x26>
 80070fa:	88fb      	ldrh	r3, [r7, #6]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d101      	bne.n	8007104 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	e00b      	b.n	800711c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2200      	movs	r2, #0
 8007108:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800710a:	88fb      	ldrh	r3, [r7, #6]
 800710c:	461a      	mov	r2, r3
 800710e:	68b9      	ldr	r1, [r7, #8]
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f000 fb12 	bl	800773a <UART_Start_Receive_IT>
 8007116:	4603      	mov	r3, r0
 8007118:	e000      	b.n	800711c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800711a:	2302      	movs	r3, #2
  }
}
 800711c:	4618      	mov	r0, r3
 800711e:	3710      	adds	r7, #16
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b0ba      	sub	sp, #232	; 0xe8
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800714a:	2300      	movs	r3, #0
 800714c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007150:	2300      	movs	r3, #0
 8007152:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800715a:	f003 030f 	and.w	r3, r3, #15
 800715e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007162:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007166:	2b00      	cmp	r3, #0
 8007168:	d10f      	bne.n	800718a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800716a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800716e:	f003 0320 	and.w	r3, r3, #32
 8007172:	2b00      	cmp	r3, #0
 8007174:	d009      	beq.n	800718a <HAL_UART_IRQHandler+0x66>
 8007176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800717a:	f003 0320 	and.w	r3, r3, #32
 800717e:	2b00      	cmp	r3, #0
 8007180:	d003      	beq.n	800718a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 fbf2 	bl	800796c <UART_Receive_IT>
      return;
 8007188:	e25b      	b.n	8007642 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800718a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800718e:	2b00      	cmp	r3, #0
 8007190:	f000 80de 	beq.w	8007350 <HAL_UART_IRQHandler+0x22c>
 8007194:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007198:	f003 0301 	and.w	r3, r3, #1
 800719c:	2b00      	cmp	r3, #0
 800719e:	d106      	bne.n	80071ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80071a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	f000 80d1 	beq.w	8007350 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80071ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071b2:	f003 0301 	and.w	r3, r3, #1
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00b      	beq.n	80071d2 <HAL_UART_IRQHandler+0xae>
 80071ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d005      	beq.n	80071d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ca:	f043 0201 	orr.w	r2, r3, #1
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071d6:	f003 0304 	and.w	r3, r3, #4
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00b      	beq.n	80071f6 <HAL_UART_IRQHandler+0xd2>
 80071de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071e2:	f003 0301 	and.w	r3, r3, #1
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d005      	beq.n	80071f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ee:	f043 0202 	orr.w	r2, r3, #2
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071fa:	f003 0302 	and.w	r3, r3, #2
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00b      	beq.n	800721a <HAL_UART_IRQHandler+0xf6>
 8007202:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007206:	f003 0301 	and.w	r3, r3, #1
 800720a:	2b00      	cmp	r3, #0
 800720c:	d005      	beq.n	800721a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007212:	f043 0204 	orr.w	r2, r3, #4
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800721a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800721e:	f003 0308 	and.w	r3, r3, #8
 8007222:	2b00      	cmp	r3, #0
 8007224:	d011      	beq.n	800724a <HAL_UART_IRQHandler+0x126>
 8007226:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800722a:	f003 0320 	and.w	r3, r3, #32
 800722e:	2b00      	cmp	r3, #0
 8007230:	d105      	bne.n	800723e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007232:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007236:	f003 0301 	and.w	r3, r3, #1
 800723a:	2b00      	cmp	r3, #0
 800723c:	d005      	beq.n	800724a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007242:	f043 0208 	orr.w	r2, r3, #8
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800724e:	2b00      	cmp	r3, #0
 8007250:	f000 81f2 	beq.w	8007638 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007258:	f003 0320 	and.w	r3, r3, #32
 800725c:	2b00      	cmp	r3, #0
 800725e:	d008      	beq.n	8007272 <HAL_UART_IRQHandler+0x14e>
 8007260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007264:	f003 0320 	and.w	r3, r3, #32
 8007268:	2b00      	cmp	r3, #0
 800726a:	d002      	beq.n	8007272 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 fb7d 	bl	800796c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	695b      	ldr	r3, [r3, #20]
 8007278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800727c:	2b40      	cmp	r3, #64	; 0x40
 800727e:	bf0c      	ite	eq
 8007280:	2301      	moveq	r3, #1
 8007282:	2300      	movne	r3, #0
 8007284:	b2db      	uxtb	r3, r3
 8007286:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800728e:	f003 0308 	and.w	r3, r3, #8
 8007292:	2b00      	cmp	r3, #0
 8007294:	d103      	bne.n	800729e <HAL_UART_IRQHandler+0x17a>
 8007296:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800729a:	2b00      	cmp	r3, #0
 800729c:	d04f      	beq.n	800733e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 fa85 	bl	80077ae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	695b      	ldr	r3, [r3, #20]
 80072aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ae:	2b40      	cmp	r3, #64	; 0x40
 80072b0:	d141      	bne.n	8007336 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	3314      	adds	r3, #20
 80072b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80072c0:	e853 3f00 	ldrex	r3, [r3]
 80072c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80072c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	3314      	adds	r3, #20
 80072da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80072de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80072e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80072ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80072ee:	e841 2300 	strex	r3, r2, [r1]
 80072f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80072f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d1d9      	bne.n	80072b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007302:	2b00      	cmp	r3, #0
 8007304:	d013      	beq.n	800732e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800730a:	4a7e      	ldr	r2, [pc, #504]	; (8007504 <HAL_UART_IRQHandler+0x3e0>)
 800730c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007312:	4618      	mov	r0, r3
 8007314:	f7fb fdac 	bl	8002e70 <HAL_DMA_Abort_IT>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d016      	beq.n	800734c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007328:	4610      	mov	r0, r2
 800732a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800732c:	e00e      	b.n	800734c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 f994 	bl	800765c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007334:	e00a      	b.n	800734c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f990 	bl	800765c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800733c:	e006      	b.n	800734c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 f98c 	bl	800765c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800734a:	e175      	b.n	8007638 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800734c:	bf00      	nop
    return;
 800734e:	e173      	b.n	8007638 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007354:	2b01      	cmp	r3, #1
 8007356:	f040 814f 	bne.w	80075f8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800735a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800735e:	f003 0310 	and.w	r3, r3, #16
 8007362:	2b00      	cmp	r3, #0
 8007364:	f000 8148 	beq.w	80075f8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800736c:	f003 0310 	and.w	r3, r3, #16
 8007370:	2b00      	cmp	r3, #0
 8007372:	f000 8141 	beq.w	80075f8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007376:	2300      	movs	r3, #0
 8007378:	60bb      	str	r3, [r7, #8]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	60bb      	str	r3, [r7, #8]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	60bb      	str	r3, [r7, #8]
 800738a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	695b      	ldr	r3, [r3, #20]
 8007392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007396:	2b40      	cmp	r3, #64	; 0x40
 8007398:	f040 80b6 	bne.w	8007508 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80073a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f000 8145 	beq.w	800763c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80073b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80073ba:	429a      	cmp	r2, r3
 80073bc:	f080 813e 	bcs.w	800763c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80073c6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073cc:	69db      	ldr	r3, [r3, #28]
 80073ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073d2:	f000 8088 	beq.w	80074e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	330c      	adds	r3, #12
 80073dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80073e4:	e853 3f00 	ldrex	r3, [r3]
 80073e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80073ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80073f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	330c      	adds	r3, #12
 80073fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007402:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007406:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800740e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007412:	e841 2300 	strex	r3, r2, [r1]
 8007416:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800741a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800741e:	2b00      	cmp	r3, #0
 8007420:	d1d9      	bne.n	80073d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	3314      	adds	r3, #20
 8007428:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800742c:	e853 3f00 	ldrex	r3, [r3]
 8007430:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007432:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007434:	f023 0301 	bic.w	r3, r3, #1
 8007438:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	3314      	adds	r3, #20
 8007442:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007446:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800744a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800744e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007452:	e841 2300 	strex	r3, r2, [r1]
 8007456:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007458:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800745a:	2b00      	cmp	r3, #0
 800745c:	d1e1      	bne.n	8007422 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	3314      	adds	r3, #20
 8007464:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007466:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007468:	e853 3f00 	ldrex	r3, [r3]
 800746c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800746e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007470:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007474:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	3314      	adds	r3, #20
 800747e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007482:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007484:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007486:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007488:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800748a:	e841 2300 	strex	r3, r2, [r1]
 800748e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007490:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007492:	2b00      	cmp	r3, #0
 8007494:	d1e3      	bne.n	800745e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2220      	movs	r2, #32
 800749a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	330c      	adds	r3, #12
 80074aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074ae:	e853 3f00 	ldrex	r3, [r3]
 80074b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80074b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074b6:	f023 0310 	bic.w	r3, r3, #16
 80074ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	330c      	adds	r3, #12
 80074c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80074c8:	65ba      	str	r2, [r7, #88]	; 0x58
 80074ca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80074ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80074d0:	e841 2300 	strex	r3, r2, [r1]
 80074d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80074d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d1e3      	bne.n	80074a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7fb fc55 	bl	8002d90 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2202      	movs	r2, #2
 80074ea:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	4619      	mov	r1, r3
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 f8b7 	bl	8007670 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007502:	e09b      	b.n	800763c <HAL_UART_IRQHandler+0x518>
 8007504:	08007875 	.word	0x08007875
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007510:	b29b      	uxth	r3, r3
 8007512:	1ad3      	subs	r3, r2, r3
 8007514:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800751c:	b29b      	uxth	r3, r3
 800751e:	2b00      	cmp	r3, #0
 8007520:	f000 808e 	beq.w	8007640 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007524:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007528:	2b00      	cmp	r3, #0
 800752a:	f000 8089 	beq.w	8007640 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	330c      	adds	r3, #12
 8007534:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007538:	e853 3f00 	ldrex	r3, [r3]
 800753c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800753e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007540:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007544:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	330c      	adds	r3, #12
 800754e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007552:	647a      	str	r2, [r7, #68]	; 0x44
 8007554:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007556:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007558:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800755a:	e841 2300 	strex	r3, r2, [r1]
 800755e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007562:	2b00      	cmp	r3, #0
 8007564:	d1e3      	bne.n	800752e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	3314      	adds	r3, #20
 800756c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007570:	e853 3f00 	ldrex	r3, [r3]
 8007574:	623b      	str	r3, [r7, #32]
   return(result);
 8007576:	6a3b      	ldr	r3, [r7, #32]
 8007578:	f023 0301 	bic.w	r3, r3, #1
 800757c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	3314      	adds	r3, #20
 8007586:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800758a:	633a      	str	r2, [r7, #48]	; 0x30
 800758c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007592:	e841 2300 	strex	r3, r2, [r1]
 8007596:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759a:	2b00      	cmp	r3, #0
 800759c:	d1e3      	bne.n	8007566 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2220      	movs	r2, #32
 80075a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	330c      	adds	r3, #12
 80075b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	e853 3f00 	ldrex	r3, [r3]
 80075ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f023 0310 	bic.w	r3, r3, #16
 80075c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	330c      	adds	r3, #12
 80075cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80075d0:	61fa      	str	r2, [r7, #28]
 80075d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d4:	69b9      	ldr	r1, [r7, #24]
 80075d6:	69fa      	ldr	r2, [r7, #28]
 80075d8:	e841 2300 	strex	r3, r2, [r1]
 80075dc:	617b      	str	r3, [r7, #20]
   return(result);
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d1e3      	bne.n	80075ac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2202      	movs	r2, #2
 80075e8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80075ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80075ee:	4619      	mov	r1, r3
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 f83d 	bl	8007670 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80075f6:	e023      	b.n	8007640 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80075f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007600:	2b00      	cmp	r3, #0
 8007602:	d009      	beq.n	8007618 <HAL_UART_IRQHandler+0x4f4>
 8007604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800760c:	2b00      	cmp	r3, #0
 800760e:	d003      	beq.n	8007618 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 f943 	bl	800789c <UART_Transmit_IT>
    return;
 8007616:	e014      	b.n	8007642 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800761c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00e      	beq.n	8007642 <HAL_UART_IRQHandler+0x51e>
 8007624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800762c:	2b00      	cmp	r3, #0
 800762e:	d008      	beq.n	8007642 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 f983 	bl	800793c <UART_EndTransmit_IT>
    return;
 8007636:	e004      	b.n	8007642 <HAL_UART_IRQHandler+0x51e>
    return;
 8007638:	bf00      	nop
 800763a:	e002      	b.n	8007642 <HAL_UART_IRQHandler+0x51e>
      return;
 800763c:	bf00      	nop
 800763e:	e000      	b.n	8007642 <HAL_UART_IRQHandler+0x51e>
      return;
 8007640:	bf00      	nop
  }
}
 8007642:	37e8      	adds	r7, #232	; 0xe8
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007650:	bf00      	nop
 8007652:	370c      	adds	r7, #12
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007664:	bf00      	nop
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	460b      	mov	r3, r1
 800767a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800767c:	bf00      	nop
 800767e:	370c      	adds	r7, #12
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b086      	sub	sp, #24
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	603b      	str	r3, [r7, #0]
 8007694:	4613      	mov	r3, r2
 8007696:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007698:	e03b      	b.n	8007712 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800769a:	6a3b      	ldr	r3, [r7, #32]
 800769c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076a0:	d037      	beq.n	8007712 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076a2:	f7fb f92d 	bl	8002900 <HAL_GetTick>
 80076a6:	4602      	mov	r2, r0
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	1ad3      	subs	r3, r2, r3
 80076ac:	6a3a      	ldr	r2, [r7, #32]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d302      	bcc.n	80076b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80076b2:	6a3b      	ldr	r3, [r7, #32]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d101      	bne.n	80076bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80076b8:	2303      	movs	r3, #3
 80076ba:	e03a      	b.n	8007732 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	f003 0304 	and.w	r3, r3, #4
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d023      	beq.n	8007712 <UART_WaitOnFlagUntilTimeout+0x8a>
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	2b80      	cmp	r3, #128	; 0x80
 80076ce:	d020      	beq.n	8007712 <UART_WaitOnFlagUntilTimeout+0x8a>
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	2b40      	cmp	r3, #64	; 0x40
 80076d4:	d01d      	beq.n	8007712 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f003 0308 	and.w	r3, r3, #8
 80076e0:	2b08      	cmp	r3, #8
 80076e2:	d116      	bne.n	8007712 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80076e4:	2300      	movs	r3, #0
 80076e6:	617b      	str	r3, [r7, #20]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	617b      	str	r3, [r7, #20]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	617b      	str	r3, [r7, #20]
 80076f8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076fa:	68f8      	ldr	r0, [r7, #12]
 80076fc:	f000 f857 	bl	80077ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2208      	movs	r2, #8
 8007704:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2200      	movs	r2, #0
 800770a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	e00f      	b.n	8007732 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	4013      	ands	r3, r2
 800771c:	68ba      	ldr	r2, [r7, #8]
 800771e:	429a      	cmp	r2, r3
 8007720:	bf0c      	ite	eq
 8007722:	2301      	moveq	r3, #1
 8007724:	2300      	movne	r3, #0
 8007726:	b2db      	uxtb	r3, r3
 8007728:	461a      	mov	r2, r3
 800772a:	79fb      	ldrb	r3, [r7, #7]
 800772c:	429a      	cmp	r2, r3
 800772e:	d0b4      	beq.n	800769a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	3718      	adds	r7, #24
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}

0800773a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800773a:	b480      	push	{r7}
 800773c:	b085      	sub	sp, #20
 800773e:	af00      	add	r7, sp, #0
 8007740:	60f8      	str	r0, [r7, #12]
 8007742:	60b9      	str	r1, [r7, #8]
 8007744:	4613      	mov	r3, r2
 8007746:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	88fa      	ldrh	r2, [r7, #6]
 8007752:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	88fa      	ldrh	r2, [r7, #6]
 8007758:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2200      	movs	r2, #0
 800775e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2222      	movs	r2, #34	; 0x22
 8007764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d007      	beq.n	8007780 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68da      	ldr	r2, [r3, #12]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800777e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	695a      	ldr	r2, [r3, #20]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f042 0201 	orr.w	r2, r2, #1
 800778e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68da      	ldr	r2, [r3, #12]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f042 0220 	orr.w	r2, r2, #32
 800779e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3714      	adds	r7, #20
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr

080077ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077ae:	b480      	push	{r7}
 80077b0:	b095      	sub	sp, #84	; 0x54
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	330c      	adds	r3, #12
 80077bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077c0:	e853 3f00 	ldrex	r3, [r3]
 80077c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80077c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	330c      	adds	r3, #12
 80077d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80077d6:	643a      	str	r2, [r7, #64]	; 0x40
 80077d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80077dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077de:	e841 2300 	strex	r3, r2, [r1]
 80077e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d1e5      	bne.n	80077b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	3314      	adds	r3, #20
 80077f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f2:	6a3b      	ldr	r3, [r7, #32]
 80077f4:	e853 3f00 	ldrex	r3, [r3]
 80077f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80077fa:	69fb      	ldr	r3, [r7, #28]
 80077fc:	f023 0301 	bic.w	r3, r3, #1
 8007800:	64bb      	str	r3, [r7, #72]	; 0x48
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	3314      	adds	r3, #20
 8007808:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800780a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800780c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007810:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007812:	e841 2300 	strex	r3, r2, [r1]
 8007816:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1e5      	bne.n	80077ea <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007822:	2b01      	cmp	r3, #1
 8007824:	d119      	bne.n	800785a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	330c      	adds	r3, #12
 800782c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	e853 3f00 	ldrex	r3, [r3]
 8007834:	60bb      	str	r3, [r7, #8]
   return(result);
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	f023 0310 	bic.w	r3, r3, #16
 800783c:	647b      	str	r3, [r7, #68]	; 0x44
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	330c      	adds	r3, #12
 8007844:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007846:	61ba      	str	r2, [r7, #24]
 8007848:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784a:	6979      	ldr	r1, [r7, #20]
 800784c:	69ba      	ldr	r2, [r7, #24]
 800784e:	e841 2300 	strex	r3, r2, [r1]
 8007852:	613b      	str	r3, [r7, #16]
   return(result);
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d1e5      	bne.n	8007826 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2220      	movs	r2, #32
 800785e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007868:	bf00      	nop
 800786a:	3754      	adds	r7, #84	; 0x54
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007880:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2200      	movs	r2, #0
 8007886:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800788e:	68f8      	ldr	r0, [r7, #12]
 8007890:	f7ff fee4 	bl	800765c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007894:	bf00      	nop
 8007896:	3710      	adds	r7, #16
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	2b21      	cmp	r3, #33	; 0x21
 80078ae:	d13e      	bne.n	800792e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078b8:	d114      	bne.n	80078e4 <UART_Transmit_IT+0x48>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d110      	bne.n	80078e4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6a1b      	ldr	r3, [r3, #32]
 80078c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	881b      	ldrh	r3, [r3, #0]
 80078cc:	461a      	mov	r2, r3
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078d6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6a1b      	ldr	r3, [r3, #32]
 80078dc:	1c9a      	adds	r2, r3, #2
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	621a      	str	r2, [r3, #32]
 80078e2:	e008      	b.n	80078f6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6a1b      	ldr	r3, [r3, #32]
 80078e8:	1c59      	adds	r1, r3, #1
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	6211      	str	r1, [r2, #32]
 80078ee:	781a      	ldrb	r2, [r3, #0]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	3b01      	subs	r3, #1
 80078fe:	b29b      	uxth	r3, r3
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	4619      	mov	r1, r3
 8007904:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007906:	2b00      	cmp	r3, #0
 8007908:	d10f      	bne.n	800792a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	68da      	ldr	r2, [r3, #12]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007918:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	68da      	ldr	r2, [r3, #12]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007928:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800792a:	2300      	movs	r3, #0
 800792c:	e000      	b.n	8007930 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800792e:	2302      	movs	r3, #2
  }
}
 8007930:	4618      	mov	r0, r3
 8007932:	3714      	adds	r7, #20
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	68da      	ldr	r2, [r3, #12]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007952:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2220      	movs	r2, #32
 8007958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f7ff fe73 	bl	8007648 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	3708      	adds	r7, #8
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b08c      	sub	sp, #48	; 0x30
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800797a:	b2db      	uxtb	r3, r3
 800797c:	2b22      	cmp	r3, #34	; 0x22
 800797e:	f040 80ae 	bne.w	8007ade <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800798a:	d117      	bne.n	80079bc <UART_Receive_IT+0x50>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	691b      	ldr	r3, [r3, #16]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d113      	bne.n	80079bc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007994:	2300      	movs	r3, #0
 8007996:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800799c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079aa:	b29a      	uxth	r2, r3
 80079ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b4:	1c9a      	adds	r2, r3, #2
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	629a      	str	r2, [r3, #40]	; 0x28
 80079ba:	e026      	b.n	8007a0a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80079c2:	2300      	movs	r3, #0
 80079c4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079ce:	d007      	beq.n	80079e0 <UART_Receive_IT+0x74>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d10a      	bne.n	80079ee <UART_Receive_IT+0x82>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	691b      	ldr	r3, [r3, #16]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d106      	bne.n	80079ee <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	b2da      	uxtb	r2, r3
 80079e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ea:	701a      	strb	r2, [r3, #0]
 80079ec:	e008      	b.n	8007a00 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079fa:	b2da      	uxtb	r2, r3
 80079fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a04:	1c5a      	adds	r2, r3, #1
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	3b01      	subs	r3, #1
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	4619      	mov	r1, r3
 8007a18:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d15d      	bne.n	8007ada <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	68da      	ldr	r2, [r3, #12]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f022 0220 	bic.w	r2, r2, #32
 8007a2c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68da      	ldr	r2, [r3, #12]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a3c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	695a      	ldr	r2, [r3, #20]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f022 0201 	bic.w	r2, r2, #1
 8007a4c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2220      	movs	r2, #32
 8007a52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d135      	bne.n	8007ad0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	330c      	adds	r3, #12
 8007a70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	e853 3f00 	ldrex	r3, [r3]
 8007a78:	613b      	str	r3, [r7, #16]
   return(result);
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	f023 0310 	bic.w	r3, r3, #16
 8007a80:	627b      	str	r3, [r7, #36]	; 0x24
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	330c      	adds	r3, #12
 8007a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a8a:	623a      	str	r2, [r7, #32]
 8007a8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8e:	69f9      	ldr	r1, [r7, #28]
 8007a90:	6a3a      	ldr	r2, [r7, #32]
 8007a92:	e841 2300 	strex	r3, r2, [r1]
 8007a96:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d1e5      	bne.n	8007a6a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 0310 	and.w	r3, r3, #16
 8007aa8:	2b10      	cmp	r3, #16
 8007aaa:	d10a      	bne.n	8007ac2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007aac:	2300      	movs	r3, #0
 8007aae:	60fb      	str	r3, [r7, #12]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	60fb      	str	r3, [r7, #12]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	60fb      	str	r3, [r7, #12]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f7ff fdd1 	bl	8007670 <HAL_UARTEx_RxEventCallback>
 8007ace:	e002      	b.n	8007ad6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f7fa fe23 	bl	800271c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	e002      	b.n	8007ae0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007ada:	2300      	movs	r3, #0
 8007adc:	e000      	b.n	8007ae0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007ade:	2302      	movs	r3, #2
  }
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3730      	adds	r7, #48	; 0x30
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007aec:	b0c0      	sub	sp, #256	; 0x100
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	691b      	ldr	r3, [r3, #16]
 8007afc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b04:	68d9      	ldr	r1, [r3, #12]
 8007b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	ea40 0301 	orr.w	r3, r0, r1
 8007b10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b16:	689a      	ldr	r2, [r3, #8]
 8007b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b1c:	691b      	ldr	r3, [r3, #16]
 8007b1e:	431a      	orrs	r2, r3
 8007b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b24:	695b      	ldr	r3, [r3, #20]
 8007b26:	431a      	orrs	r2, r3
 8007b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b2c:	69db      	ldr	r3, [r3, #28]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007b40:	f021 010c 	bic.w	r1, r1, #12
 8007b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b4e:	430b      	orrs	r3, r1
 8007b50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	695b      	ldr	r3, [r3, #20]
 8007b5a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b62:	6999      	ldr	r1, [r3, #24]
 8007b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	ea40 0301 	orr.w	r3, r0, r1
 8007b6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	4b8f      	ldr	r3, [pc, #572]	; (8007db4 <UART_SetConfig+0x2cc>)
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d005      	beq.n	8007b88 <UART_SetConfig+0xa0>
 8007b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	4b8d      	ldr	r3, [pc, #564]	; (8007db8 <UART_SetConfig+0x2d0>)
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d104      	bne.n	8007b92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b88:	f7fd fab0 	bl	80050ec <HAL_RCC_GetPCLK2Freq>
 8007b8c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007b90:	e003      	b.n	8007b9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b92:	f7fd fa97 	bl	80050c4 <HAL_RCC_GetPCLK1Freq>
 8007b96:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b9e:	69db      	ldr	r3, [r3, #28]
 8007ba0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ba4:	f040 810c 	bne.w	8007dc0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ba8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bac:	2200      	movs	r2, #0
 8007bae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007bb2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007bb6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007bba:	4622      	mov	r2, r4
 8007bbc:	462b      	mov	r3, r5
 8007bbe:	1891      	adds	r1, r2, r2
 8007bc0:	65b9      	str	r1, [r7, #88]	; 0x58
 8007bc2:	415b      	adcs	r3, r3
 8007bc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007bca:	4621      	mov	r1, r4
 8007bcc:	eb12 0801 	adds.w	r8, r2, r1
 8007bd0:	4629      	mov	r1, r5
 8007bd2:	eb43 0901 	adc.w	r9, r3, r1
 8007bd6:	f04f 0200 	mov.w	r2, #0
 8007bda:	f04f 0300 	mov.w	r3, #0
 8007bde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007be2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007be6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007bea:	4690      	mov	r8, r2
 8007bec:	4699      	mov	r9, r3
 8007bee:	4623      	mov	r3, r4
 8007bf0:	eb18 0303 	adds.w	r3, r8, r3
 8007bf4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007bf8:	462b      	mov	r3, r5
 8007bfa:	eb49 0303 	adc.w	r3, r9, r3
 8007bfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007c0e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007c12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007c16:	460b      	mov	r3, r1
 8007c18:	18db      	adds	r3, r3, r3
 8007c1a:	653b      	str	r3, [r7, #80]	; 0x50
 8007c1c:	4613      	mov	r3, r2
 8007c1e:	eb42 0303 	adc.w	r3, r2, r3
 8007c22:	657b      	str	r3, [r7, #84]	; 0x54
 8007c24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007c28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007c2c:	f7f8 fae6 	bl	80001fc <__aeabi_uldivmod>
 8007c30:	4602      	mov	r2, r0
 8007c32:	460b      	mov	r3, r1
 8007c34:	4b61      	ldr	r3, [pc, #388]	; (8007dbc <UART_SetConfig+0x2d4>)
 8007c36:	fba3 2302 	umull	r2, r3, r3, r2
 8007c3a:	095b      	lsrs	r3, r3, #5
 8007c3c:	011c      	lsls	r4, r3, #4
 8007c3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c42:	2200      	movs	r2, #0
 8007c44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c48:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007c4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007c50:	4642      	mov	r2, r8
 8007c52:	464b      	mov	r3, r9
 8007c54:	1891      	adds	r1, r2, r2
 8007c56:	64b9      	str	r1, [r7, #72]	; 0x48
 8007c58:	415b      	adcs	r3, r3
 8007c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007c60:	4641      	mov	r1, r8
 8007c62:	eb12 0a01 	adds.w	sl, r2, r1
 8007c66:	4649      	mov	r1, r9
 8007c68:	eb43 0b01 	adc.w	fp, r3, r1
 8007c6c:	f04f 0200 	mov.w	r2, #0
 8007c70:	f04f 0300 	mov.w	r3, #0
 8007c74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007c78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007c7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c80:	4692      	mov	sl, r2
 8007c82:	469b      	mov	fp, r3
 8007c84:	4643      	mov	r3, r8
 8007c86:	eb1a 0303 	adds.w	r3, sl, r3
 8007c8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c8e:	464b      	mov	r3, r9
 8007c90:	eb4b 0303 	adc.w	r3, fp, r3
 8007c94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ca4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007ca8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007cac:	460b      	mov	r3, r1
 8007cae:	18db      	adds	r3, r3, r3
 8007cb0:	643b      	str	r3, [r7, #64]	; 0x40
 8007cb2:	4613      	mov	r3, r2
 8007cb4:	eb42 0303 	adc.w	r3, r2, r3
 8007cb8:	647b      	str	r3, [r7, #68]	; 0x44
 8007cba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007cbe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007cc2:	f7f8 fa9b 	bl	80001fc <__aeabi_uldivmod>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	460b      	mov	r3, r1
 8007cca:	4611      	mov	r1, r2
 8007ccc:	4b3b      	ldr	r3, [pc, #236]	; (8007dbc <UART_SetConfig+0x2d4>)
 8007cce:	fba3 2301 	umull	r2, r3, r3, r1
 8007cd2:	095b      	lsrs	r3, r3, #5
 8007cd4:	2264      	movs	r2, #100	; 0x64
 8007cd6:	fb02 f303 	mul.w	r3, r2, r3
 8007cda:	1acb      	subs	r3, r1, r3
 8007cdc:	00db      	lsls	r3, r3, #3
 8007cde:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007ce2:	4b36      	ldr	r3, [pc, #216]	; (8007dbc <UART_SetConfig+0x2d4>)
 8007ce4:	fba3 2302 	umull	r2, r3, r3, r2
 8007ce8:	095b      	lsrs	r3, r3, #5
 8007cea:	005b      	lsls	r3, r3, #1
 8007cec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007cf0:	441c      	add	r4, r3
 8007cf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007cfc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007d00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007d04:	4642      	mov	r2, r8
 8007d06:	464b      	mov	r3, r9
 8007d08:	1891      	adds	r1, r2, r2
 8007d0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8007d0c:	415b      	adcs	r3, r3
 8007d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007d14:	4641      	mov	r1, r8
 8007d16:	1851      	adds	r1, r2, r1
 8007d18:	6339      	str	r1, [r7, #48]	; 0x30
 8007d1a:	4649      	mov	r1, r9
 8007d1c:	414b      	adcs	r3, r1
 8007d1e:	637b      	str	r3, [r7, #52]	; 0x34
 8007d20:	f04f 0200 	mov.w	r2, #0
 8007d24:	f04f 0300 	mov.w	r3, #0
 8007d28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007d2c:	4659      	mov	r1, fp
 8007d2e:	00cb      	lsls	r3, r1, #3
 8007d30:	4651      	mov	r1, sl
 8007d32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d36:	4651      	mov	r1, sl
 8007d38:	00ca      	lsls	r2, r1, #3
 8007d3a:	4610      	mov	r0, r2
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	4603      	mov	r3, r0
 8007d40:	4642      	mov	r2, r8
 8007d42:	189b      	adds	r3, r3, r2
 8007d44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d48:	464b      	mov	r3, r9
 8007d4a:	460a      	mov	r2, r1
 8007d4c:	eb42 0303 	adc.w	r3, r2, r3
 8007d50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007d60:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007d64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007d68:	460b      	mov	r3, r1
 8007d6a:	18db      	adds	r3, r3, r3
 8007d6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d6e:	4613      	mov	r3, r2
 8007d70:	eb42 0303 	adc.w	r3, r2, r3
 8007d74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007d7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007d7e:	f7f8 fa3d 	bl	80001fc <__aeabi_uldivmod>
 8007d82:	4602      	mov	r2, r0
 8007d84:	460b      	mov	r3, r1
 8007d86:	4b0d      	ldr	r3, [pc, #52]	; (8007dbc <UART_SetConfig+0x2d4>)
 8007d88:	fba3 1302 	umull	r1, r3, r3, r2
 8007d8c:	095b      	lsrs	r3, r3, #5
 8007d8e:	2164      	movs	r1, #100	; 0x64
 8007d90:	fb01 f303 	mul.w	r3, r1, r3
 8007d94:	1ad3      	subs	r3, r2, r3
 8007d96:	00db      	lsls	r3, r3, #3
 8007d98:	3332      	adds	r3, #50	; 0x32
 8007d9a:	4a08      	ldr	r2, [pc, #32]	; (8007dbc <UART_SetConfig+0x2d4>)
 8007d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8007da0:	095b      	lsrs	r3, r3, #5
 8007da2:	f003 0207 	and.w	r2, r3, #7
 8007da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4422      	add	r2, r4
 8007dae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007db0:	e106      	b.n	8007fc0 <UART_SetConfig+0x4d8>
 8007db2:	bf00      	nop
 8007db4:	40011000 	.word	0x40011000
 8007db8:	40011400 	.word	0x40011400
 8007dbc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007dc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007dca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007dce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007dd2:	4642      	mov	r2, r8
 8007dd4:	464b      	mov	r3, r9
 8007dd6:	1891      	adds	r1, r2, r2
 8007dd8:	6239      	str	r1, [r7, #32]
 8007dda:	415b      	adcs	r3, r3
 8007ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8007dde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007de2:	4641      	mov	r1, r8
 8007de4:	1854      	adds	r4, r2, r1
 8007de6:	4649      	mov	r1, r9
 8007de8:	eb43 0501 	adc.w	r5, r3, r1
 8007dec:	f04f 0200 	mov.w	r2, #0
 8007df0:	f04f 0300 	mov.w	r3, #0
 8007df4:	00eb      	lsls	r3, r5, #3
 8007df6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007dfa:	00e2      	lsls	r2, r4, #3
 8007dfc:	4614      	mov	r4, r2
 8007dfe:	461d      	mov	r5, r3
 8007e00:	4643      	mov	r3, r8
 8007e02:	18e3      	adds	r3, r4, r3
 8007e04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007e08:	464b      	mov	r3, r9
 8007e0a:	eb45 0303 	adc.w	r3, r5, r3
 8007e0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007e1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007e22:	f04f 0200 	mov.w	r2, #0
 8007e26:	f04f 0300 	mov.w	r3, #0
 8007e2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007e2e:	4629      	mov	r1, r5
 8007e30:	008b      	lsls	r3, r1, #2
 8007e32:	4621      	mov	r1, r4
 8007e34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e38:	4621      	mov	r1, r4
 8007e3a:	008a      	lsls	r2, r1, #2
 8007e3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007e40:	f7f8 f9dc 	bl	80001fc <__aeabi_uldivmod>
 8007e44:	4602      	mov	r2, r0
 8007e46:	460b      	mov	r3, r1
 8007e48:	4b60      	ldr	r3, [pc, #384]	; (8007fcc <UART_SetConfig+0x4e4>)
 8007e4a:	fba3 2302 	umull	r2, r3, r3, r2
 8007e4e:	095b      	lsrs	r3, r3, #5
 8007e50:	011c      	lsls	r4, r3, #4
 8007e52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e56:	2200      	movs	r2, #0
 8007e58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007e5c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007e60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007e64:	4642      	mov	r2, r8
 8007e66:	464b      	mov	r3, r9
 8007e68:	1891      	adds	r1, r2, r2
 8007e6a:	61b9      	str	r1, [r7, #24]
 8007e6c:	415b      	adcs	r3, r3
 8007e6e:	61fb      	str	r3, [r7, #28]
 8007e70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e74:	4641      	mov	r1, r8
 8007e76:	1851      	adds	r1, r2, r1
 8007e78:	6139      	str	r1, [r7, #16]
 8007e7a:	4649      	mov	r1, r9
 8007e7c:	414b      	adcs	r3, r1
 8007e7e:	617b      	str	r3, [r7, #20]
 8007e80:	f04f 0200 	mov.w	r2, #0
 8007e84:	f04f 0300 	mov.w	r3, #0
 8007e88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007e8c:	4659      	mov	r1, fp
 8007e8e:	00cb      	lsls	r3, r1, #3
 8007e90:	4651      	mov	r1, sl
 8007e92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e96:	4651      	mov	r1, sl
 8007e98:	00ca      	lsls	r2, r1, #3
 8007e9a:	4610      	mov	r0, r2
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	4642      	mov	r2, r8
 8007ea2:	189b      	adds	r3, r3, r2
 8007ea4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007ea8:	464b      	mov	r3, r9
 8007eaa:	460a      	mov	r2, r1
 8007eac:	eb42 0303 	adc.w	r3, r2, r3
 8007eb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	67bb      	str	r3, [r7, #120]	; 0x78
 8007ebe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007ec0:	f04f 0200 	mov.w	r2, #0
 8007ec4:	f04f 0300 	mov.w	r3, #0
 8007ec8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007ecc:	4649      	mov	r1, r9
 8007ece:	008b      	lsls	r3, r1, #2
 8007ed0:	4641      	mov	r1, r8
 8007ed2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ed6:	4641      	mov	r1, r8
 8007ed8:	008a      	lsls	r2, r1, #2
 8007eda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007ede:	f7f8 f98d 	bl	80001fc <__aeabi_uldivmod>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	4611      	mov	r1, r2
 8007ee8:	4b38      	ldr	r3, [pc, #224]	; (8007fcc <UART_SetConfig+0x4e4>)
 8007eea:	fba3 2301 	umull	r2, r3, r3, r1
 8007eee:	095b      	lsrs	r3, r3, #5
 8007ef0:	2264      	movs	r2, #100	; 0x64
 8007ef2:	fb02 f303 	mul.w	r3, r2, r3
 8007ef6:	1acb      	subs	r3, r1, r3
 8007ef8:	011b      	lsls	r3, r3, #4
 8007efa:	3332      	adds	r3, #50	; 0x32
 8007efc:	4a33      	ldr	r2, [pc, #204]	; (8007fcc <UART_SetConfig+0x4e4>)
 8007efe:	fba2 2303 	umull	r2, r3, r2, r3
 8007f02:	095b      	lsrs	r3, r3, #5
 8007f04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f08:	441c      	add	r4, r3
 8007f0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f0e:	2200      	movs	r2, #0
 8007f10:	673b      	str	r3, [r7, #112]	; 0x70
 8007f12:	677a      	str	r2, [r7, #116]	; 0x74
 8007f14:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007f18:	4642      	mov	r2, r8
 8007f1a:	464b      	mov	r3, r9
 8007f1c:	1891      	adds	r1, r2, r2
 8007f1e:	60b9      	str	r1, [r7, #8]
 8007f20:	415b      	adcs	r3, r3
 8007f22:	60fb      	str	r3, [r7, #12]
 8007f24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f28:	4641      	mov	r1, r8
 8007f2a:	1851      	adds	r1, r2, r1
 8007f2c:	6039      	str	r1, [r7, #0]
 8007f2e:	4649      	mov	r1, r9
 8007f30:	414b      	adcs	r3, r1
 8007f32:	607b      	str	r3, [r7, #4]
 8007f34:	f04f 0200 	mov.w	r2, #0
 8007f38:	f04f 0300 	mov.w	r3, #0
 8007f3c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007f40:	4659      	mov	r1, fp
 8007f42:	00cb      	lsls	r3, r1, #3
 8007f44:	4651      	mov	r1, sl
 8007f46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f4a:	4651      	mov	r1, sl
 8007f4c:	00ca      	lsls	r2, r1, #3
 8007f4e:	4610      	mov	r0, r2
 8007f50:	4619      	mov	r1, r3
 8007f52:	4603      	mov	r3, r0
 8007f54:	4642      	mov	r2, r8
 8007f56:	189b      	adds	r3, r3, r2
 8007f58:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f5a:	464b      	mov	r3, r9
 8007f5c:	460a      	mov	r2, r1
 8007f5e:	eb42 0303 	adc.w	r3, r2, r3
 8007f62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	663b      	str	r3, [r7, #96]	; 0x60
 8007f6e:	667a      	str	r2, [r7, #100]	; 0x64
 8007f70:	f04f 0200 	mov.w	r2, #0
 8007f74:	f04f 0300 	mov.w	r3, #0
 8007f78:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007f7c:	4649      	mov	r1, r9
 8007f7e:	008b      	lsls	r3, r1, #2
 8007f80:	4641      	mov	r1, r8
 8007f82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f86:	4641      	mov	r1, r8
 8007f88:	008a      	lsls	r2, r1, #2
 8007f8a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007f8e:	f7f8 f935 	bl	80001fc <__aeabi_uldivmod>
 8007f92:	4602      	mov	r2, r0
 8007f94:	460b      	mov	r3, r1
 8007f96:	4b0d      	ldr	r3, [pc, #52]	; (8007fcc <UART_SetConfig+0x4e4>)
 8007f98:	fba3 1302 	umull	r1, r3, r3, r2
 8007f9c:	095b      	lsrs	r3, r3, #5
 8007f9e:	2164      	movs	r1, #100	; 0x64
 8007fa0:	fb01 f303 	mul.w	r3, r1, r3
 8007fa4:	1ad3      	subs	r3, r2, r3
 8007fa6:	011b      	lsls	r3, r3, #4
 8007fa8:	3332      	adds	r3, #50	; 0x32
 8007faa:	4a08      	ldr	r2, [pc, #32]	; (8007fcc <UART_SetConfig+0x4e4>)
 8007fac:	fba2 2303 	umull	r2, r3, r2, r3
 8007fb0:	095b      	lsrs	r3, r3, #5
 8007fb2:	f003 020f 	and.w	r2, r3, #15
 8007fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4422      	add	r2, r4
 8007fbe:	609a      	str	r2, [r3, #8]
}
 8007fc0:	bf00      	nop
 8007fc2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007fcc:	51eb851f 	.word	0x51eb851f

08007fd0 <memset>:
 8007fd0:	4402      	add	r2, r0
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d100      	bne.n	8007fda <memset+0xa>
 8007fd8:	4770      	bx	lr
 8007fda:	f803 1b01 	strb.w	r1, [r3], #1
 8007fde:	e7f9      	b.n	8007fd4 <memset+0x4>

08007fe0 <__libc_init_array>:
 8007fe0:	b570      	push	{r4, r5, r6, lr}
 8007fe2:	4d0d      	ldr	r5, [pc, #52]	; (8008018 <__libc_init_array+0x38>)
 8007fe4:	4c0d      	ldr	r4, [pc, #52]	; (800801c <__libc_init_array+0x3c>)
 8007fe6:	1b64      	subs	r4, r4, r5
 8007fe8:	10a4      	asrs	r4, r4, #2
 8007fea:	2600      	movs	r6, #0
 8007fec:	42a6      	cmp	r6, r4
 8007fee:	d109      	bne.n	8008004 <__libc_init_array+0x24>
 8007ff0:	4d0b      	ldr	r5, [pc, #44]	; (8008020 <__libc_init_array+0x40>)
 8007ff2:	4c0c      	ldr	r4, [pc, #48]	; (8008024 <__libc_init_array+0x44>)
 8007ff4:	f000 f818 	bl	8008028 <_init>
 8007ff8:	1b64      	subs	r4, r4, r5
 8007ffa:	10a4      	asrs	r4, r4, #2
 8007ffc:	2600      	movs	r6, #0
 8007ffe:	42a6      	cmp	r6, r4
 8008000:	d105      	bne.n	800800e <__libc_init_array+0x2e>
 8008002:	bd70      	pop	{r4, r5, r6, pc}
 8008004:	f855 3b04 	ldr.w	r3, [r5], #4
 8008008:	4798      	blx	r3
 800800a:	3601      	adds	r6, #1
 800800c:	e7ee      	b.n	8007fec <__libc_init_array+0xc>
 800800e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008012:	4798      	blx	r3
 8008014:	3601      	adds	r6, #1
 8008016:	e7f2      	b.n	8007ffe <__libc_init_array+0x1e>
 8008018:	08008100 	.word	0x08008100
 800801c:	08008100 	.word	0x08008100
 8008020:	08008100 	.word	0x08008100
 8008024:	08008104 	.word	0x08008104

08008028 <_init>:
 8008028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800802a:	bf00      	nop
 800802c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800802e:	bc08      	pop	{r3}
 8008030:	469e      	mov	lr, r3
 8008032:	4770      	bx	lr

08008034 <_fini>:
 8008034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008036:	bf00      	nop
 8008038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800803a:	bc08      	pop	{r3}
 800803c:	469e      	mov	lr, r3
 800803e:	4770      	bx	lr
