
AuroraV_Payload_F439.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c68  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08006e14  08006e14  00016e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006eb8  08006eb8  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08006eb8  08006eb8  00016eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ec0  08006ec0  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ec0  08006ec0  00016ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ec4  08006ec4  00016ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08006ec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
 10 .bss          00000308  20000024  20000024  00020024  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000032c  2000032c  00020024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019ad9  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003898  00000000  00000000  00039b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000014a8  00000000  00000000  0003d408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000101e  00000000  00000000  0003e8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002765d  00000000  00000000  0003f8ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001b47b  00000000  00000000  00066f2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e709d  00000000  00000000  000823a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000055e8  00000000  00000000  00169444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0016ea2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000024 	.word	0x20000024
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006dfc 	.word	0x08006dfc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000028 	.word	0x20000028
 80001e8:	08006dfc 	.word	0x08006dfc

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <init_accel>:
uint8_t OUT_Y_L 				= 0x2A;
uint8_t OUT_Y_H 				= 0x2B;
uint8_t OUT_Z_L 				= 0x2C;
uint8_t OUT_Z_H 				= 0x2D;

HAL_StatusTypeDef init_accel(I2C_HandleTypeDef* hi2c) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;

	// Write Control Register 1
	ret = i2c_write_reg(hi2c, H3LIS331DL_ADDR, &CTRL_REG1, MASK_1kHz);
 8000500:	2118      	movs	r1, #24
 8000502:	233f      	movs	r3, #63	; 0x3f
 8000504:	4a09      	ldr	r2, [pc, #36]	; (800052c <init_accel+0x34>)
 8000506:	6878      	ldr	r0, [r7, #4]
 8000508:	f000 fb8b 	bl	8000c22 <i2c_write_reg>
 800050c:	4603      	mov	r3, r0
 800050e:	73fb      	strb	r3, [r7, #15]

	// Write Control Register 4
	ret = i2c_write_reg(hi2c, H3LIS331DL_ADDR, &CTRL_REG4, MASK_100G);
 8000510:	2118      	movs	r1, #24
 8000512:	2300      	movs	r3, #0
 8000514:	4a06      	ldr	r2, [pc, #24]	; (8000530 <init_accel+0x38>)
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	f000 fb83 	bl	8000c22 <i2c_write_reg>
 800051c:	4603      	mov	r3, r0
 800051e:	73fb      	strb	r3, [r7, #15]
	return ret;
 8000520:	7bfb      	ldrb	r3, [r7, #15]
}
 8000522:	4618      	mov	r0, r3
 8000524:	3710      	adds	r7, #16
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	20000000 	.word	0x20000000
 8000530:	20000001 	.word	0x20000001

08000534 <readAccelerometer>:

void readAccelerometer(uint8_t values[6], I2C_HandleTypeDef* hi2c) {
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af02      	add	r7, sp, #8
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
	i2c_burst_read(hi2c, H3LIS331DL_ADDR, OUT_X_L, 6, values);
 800053e:	2118      	movs	r1, #24
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <readAccelerometer+0x24>)
 8000542:	781a      	ldrb	r2, [r3, #0]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	9300      	str	r3, [sp, #0]
 8000548:	2306      	movs	r3, #6
 800054a:	6838      	ldr	r0, [r7, #0]
 800054c:	f000 fb38 	bl	8000bc0 <i2c_burst_read>
}
 8000550:	bf00      	nop
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000003 	.word	0x20000003

0800055c <readAccel_whoami>:

uint8_t readAccel_whoami(I2C_HandleTypeDef* hi2c) {
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	return i2c_read_reg(hi2c, H3LIS331DL_ADDR, &WHOAMI);
 8000564:	2318      	movs	r3, #24
 8000566:	4a05      	ldr	r2, [pc, #20]	; (800057c <readAccel_whoami+0x20>)
 8000568:	4619      	mov	r1, r3
 800056a:	6878      	ldr	r0, [r7, #4]
 800056c:	f000 fb00 	bl	8000b70 <i2c_read_reg>
 8000570:	4603      	mov	r3, r0
}
 8000572:	4618      	mov	r0, r3
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000002 	.word	0x20000002

08000580 <init_bme280>:
uint8_t OUT_HUM_H 			= 0xFD;
uint8_t CALIB_ST_1			= 0x88;
uint8_t CALIB_ST_2			= 0xE1;


HAL_StatusTypeDef init_bme280(I2C_HandleTypeDef* hi2c, uint8_t bme) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	460b      	mov	r3, r1
 800058a:	70fb      	strb	r3, [r7, #3]
	uint8_t bme_addr = getBME280Config(bme).bme_addr;
 800058c:	78fb      	ldrb	r3, [r7, #3]
 800058e:	4618      	mov	r0, r3
 8000590:	f000 f8d4 	bl	800073c <getBME280Config>
 8000594:	4603      	mov	r3, r0
 8000596:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef ret;
	uint8_t control_reg = 0x00;
 8000598:	2300      	movs	r3, #0
 800059a:	73bb      	strb	r3, [r7, #14]

	// Reset the sensor
	ret =  i2c_write_reg(hi2c, bme_addr, &RST_REG, RST);
 800059c:	7bf9      	ldrb	r1, [r7, #15]
 800059e:	23b6      	movs	r3, #182	; 0xb6
 80005a0:	4a19      	ldr	r2, [pc, #100]	; (8000608 <init_bme280+0x88>)
 80005a2:	6878      	ldr	r0, [r7, #4]
 80005a4:	f000 fb3d 	bl	8000c22 <i2c_write_reg>
 80005a8:	4603      	mov	r3, r0
 80005aa:	737b      	strb	r3, [r7, #13]

	// Set humidity control register
	control_reg = i2c_read_reg(hi2c, bme_addr, &CTRL_HUM_REG);
 80005ac:	7bfb      	ldrb	r3, [r7, #15]
 80005ae:	4a17      	ldr	r2, [pc, #92]	; (800060c <init_bme280+0x8c>)
 80005b0:	4619      	mov	r1, r3
 80005b2:	6878      	ldr	r0, [r7, #4]
 80005b4:	f000 fadc 	bl	8000b70 <i2c_read_reg>
 80005b8:	4603      	mov	r3, r0
 80005ba:	73bb      	strb	r3, [r7, #14]
	control_reg = control_reg & 0xF8;
 80005bc:	7bbb      	ldrb	r3, [r7, #14]
 80005be:	f023 0307 	bic.w	r3, r3, #7
 80005c2:	73bb      	strb	r3, [r7, #14]
	control_reg = control_reg | CTRL_HUM_MSK;
 80005c4:	7bbb      	ldrb	r3, [r7, #14]
 80005c6:	f043 0301 	orr.w	r3, r3, #1
 80005ca:	73bb      	strb	r3, [r7, #14]
	ret = i2c_write_reg(hi2c, bme_addr, &CTRL_HUM_REG, control_reg);
 80005cc:	7bbb      	ldrb	r3, [r7, #14]
 80005ce:	7bf9      	ldrb	r1, [r7, #15]
 80005d0:	4a0e      	ldr	r2, [pc, #56]	; (800060c <init_bme280+0x8c>)
 80005d2:	6878      	ldr	r0, [r7, #4]
 80005d4:	f000 fb25 	bl	8000c22 <i2c_write_reg>
 80005d8:	4603      	mov	r3, r0
 80005da:	737b      	strb	r3, [r7, #13]

	// Set measure control register
	ret = i2c_write_reg(hi2c, bme_addr, &CTRL_MEAS_REG, CTRL_MEAS_MSK);
 80005dc:	7bf9      	ldrb	r1, [r7, #15]
 80005de:	2327      	movs	r3, #39	; 0x27
 80005e0:	4a0b      	ldr	r2, [pc, #44]	; (8000610 <init_bme280+0x90>)
 80005e2:	6878      	ldr	r0, [r7, #4]
 80005e4:	f000 fb1d 	bl	8000c22 <i2c_write_reg>
 80005e8:	4603      	mov	r3, r0
 80005ea:	737b      	strb	r3, [r7, #13]

	// Set the config register
	ret = i2c_write_reg(hi2c, bme_addr, &CONF_REG, CONF_MSK);
 80005ec:	7bf9      	ldrb	r1, [r7, #15]
 80005ee:	2300      	movs	r3, #0
 80005f0:	4a08      	ldr	r2, [pc, #32]	; (8000614 <init_bme280+0x94>)
 80005f2:	6878      	ldr	r0, [r7, #4]
 80005f4:	f000 fb15 	bl	8000c22 <i2c_write_reg>
 80005f8:	4603      	mov	r3, r0
 80005fa:	737b      	strb	r3, [r7, #13]

	return ret;
 80005fc:	7b7b      	ldrb	r3, [r7, #13]
}
 80005fe:	4618      	mov	r0, r3
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000005 	.word	0x20000005
 800060c:	20000006 	.word	0x20000006
 8000610:	20000007 	.word	0x20000007
 8000614:	20000008 	.word	0x20000008

08000618 <readTempHumPres>:

void readTempHumPres(uint8_t values[6], I2C_HandleTypeDef* hi2c, uint8_t bme) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b08a      	sub	sp, #40	; 0x28
 800061c:	af02      	add	r7, sp, #8
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	4613      	mov	r3, r2
 8000624:	71fb      	strb	r3, [r7, #7]
	uint8_t readings[8];
	uint8_t bme_addr = getBME280Config(bme).bme_addr;
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	4618      	mov	r0, r3
 800062a:	f000 f887 	bl	800073c <getBME280Config>
 800062e:	4603      	mov	r3, r0
 8000630:	777b      	strb	r3, [r7, #29]
	i2c_burst_read(hi2c, bme_addr, OUT_PRESS_H, 8, readings);
 8000632:	4b20      	ldr	r3, [pc, #128]	; (80006b4 <readTempHumPres+0x9c>)
 8000634:	781a      	ldrb	r2, [r3, #0]
 8000636:	7f79      	ldrb	r1, [r7, #29]
 8000638:	f107 0314 	add.w	r3, r7, #20
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2308      	movs	r3, #8
 8000640:	68b8      	ldr	r0, [r7, #8]
 8000642:	f000 fabd 	bl	8000bc0 <i2c_burst_read>

	// Clear the 0 values on the xlsb registers
	uint8_t j = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	77fb      	strb	r3, [r7, #31]
    for(uint8_t i = 0; i < 8; i++) {
 800064a:	2300      	movs	r3, #0
 800064c:	77bb      	strb	r3, [r7, #30]
 800064e:	e014      	b.n	800067a <readTempHumPres+0x62>
        if(i != 2 && i != 5) {  // if the index is not 2 or 5
 8000650:	7fbb      	ldrb	r3, [r7, #30]
 8000652:	2b02      	cmp	r3, #2
 8000654:	d00e      	beq.n	8000674 <readTempHumPres+0x5c>
 8000656:	7fbb      	ldrb	r3, [r7, #30]
 8000658:	2b05      	cmp	r3, #5
 800065a:	d00b      	beq.n	8000674 <readTempHumPres+0x5c>
        	values[j] = readings[i];
 800065c:	7fba      	ldrb	r2, [r7, #30]
 800065e:	7ffb      	ldrb	r3, [r7, #31]
 8000660:	68f9      	ldr	r1, [r7, #12]
 8000662:	440b      	add	r3, r1
 8000664:	3220      	adds	r2, #32
 8000666:	443a      	add	r2, r7
 8000668:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800066c:	701a      	strb	r2, [r3, #0]
            j++;
 800066e:	7ffb      	ldrb	r3, [r7, #31]
 8000670:	3301      	adds	r3, #1
 8000672:	77fb      	strb	r3, [r7, #31]
    for(uint8_t i = 0; i < 8; i++) {
 8000674:	7fbb      	ldrb	r3, [r7, #30]
 8000676:	3301      	adds	r3, #1
 8000678:	77bb      	strb	r3, [r7, #30]
 800067a:	7fbb      	ldrb	r3, [r7, #30]
 800067c:	2b07      	cmp	r3, #7
 800067e:	d9e7      	bls.n	8000650 <readTempHumPres+0x38>
        }
    }

    // Swap elements to make the array little endian
    swap(&values[0], &values[1]);
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	3301      	adds	r3, #1
 8000684:	4619      	mov	r1, r3
 8000686:	68f8      	ldr	r0, [r7, #12]
 8000688:	f000 f86f 	bl	800076a <swap>
    swap(&values[2], &values[3]);
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	1c9a      	adds	r2, r3, #2
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	3303      	adds	r3, #3
 8000694:	4619      	mov	r1, r3
 8000696:	4610      	mov	r0, r2
 8000698:	f000 f867 	bl	800076a <swap>
    swap(&values[4], &values[5]);
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	1d1a      	adds	r2, r3, #4
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	3305      	adds	r3, #5
 80006a4:	4619      	mov	r1, r3
 80006a6:	4610      	mov	r0, r2
 80006a8:	f000 f85f 	bl	800076a <swap>
}
 80006ac:	bf00      	nop
 80006ae:	3720      	adds	r7, #32
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000009 	.word	0x20000009

080006b8 <readBME280_id_reg>:

uint8_t readBME280_id_reg(I2C_HandleTypeDef* hi2c, uint8_t bme) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	460b      	mov	r3, r1
 80006c2:	70fb      	strb	r3, [r7, #3]
	uint8_t bme_addr = getBME280Config(bme).bme_addr;
 80006c4:	78fb      	ldrb	r3, [r7, #3]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 f838 	bl	800073c <getBME280Config>
 80006cc:	4603      	mov	r3, r0
 80006ce:	73fb      	strb	r3, [r7, #15]
	return i2c_read_reg(hi2c, bme_addr, &ID_REG);
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
 80006d2:	4a05      	ldr	r2, [pc, #20]	; (80006e8 <readBME280_id_reg+0x30>)
 80006d4:	4619      	mov	r1, r3
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f000 fa4a 	bl	8000b70 <i2c_read_reg>
 80006dc:	4603      	mov	r3, r0
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3710      	adds	r7, #16
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000004 	.word	0x20000004

080006ec <readBME280_calib>:

void readBME280_calib(I2C_HandleTypeDef* hi2c, uint8_t bme, uint8_t calibration1[CALIB_CNT_1], uint8_t calibration2[CALIB_CNT_2]) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b088      	sub	sp, #32
 80006f0:	af02      	add	r7, sp, #8
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	607a      	str	r2, [r7, #4]
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	460b      	mov	r3, r1
 80006fa:	72fb      	strb	r3, [r7, #11]
	uint8_t bme_addr = getBME280Config(bme).bme_addr;
 80006fc:	7afb      	ldrb	r3, [r7, #11]
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 f81c 	bl	800073c <getBME280Config>
 8000704:	4603      	mov	r3, r0
 8000706:	75fb      	strb	r3, [r7, #23]
	i2c_burst_read(hi2c, bme_addr, CALIB_ST_1, CALIB_CNT_1, calibration1);
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <readBME280_calib+0x48>)
 800070a:	781a      	ldrb	r2, [r3, #0]
 800070c:	7df9      	ldrb	r1, [r7, #23]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	2319      	movs	r3, #25
 8000714:	68f8      	ldr	r0, [r7, #12]
 8000716:	f000 fa53 	bl	8000bc0 <i2c_burst_read>
	i2c_burst_read(hi2c, bme_addr, CALIB_ST_2, CALIB_CNT_2, calibration2);
 800071a:	4b07      	ldr	r3, [pc, #28]	; (8000738 <readBME280_calib+0x4c>)
 800071c:	781a      	ldrb	r2, [r3, #0]
 800071e:	7df9      	ldrb	r1, [r7, #23]
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	2307      	movs	r3, #7
 8000726:	68f8      	ldr	r0, [r7, #12]
 8000728:	f000 fa4a 	bl	8000bc0 <i2c_burst_read>
}
 800072c:	bf00      	nop
 800072e:	3718      	adds	r7, #24
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	2000000a 	.word	0x2000000a
 8000738:	2000000b 	.word	0x2000000b

0800073c <getBME280Config>:

BME280_Config getBME280Config(uint8_t bme) {
 800073c:	b480      	push	{r7}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]
	BME280_Config config;
	if (bme == 0) {
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d102      	bne.n	8000752 <getBME280Config+0x16>
		config.bme_addr = BME280_ADDR_0;
 800074c:	2376      	movs	r3, #118	; 0x76
 800074e:	733b      	strb	r3, [r7, #12]
 8000750:	e004      	b.n	800075c <getBME280Config+0x20>
	} else if (bme == 1) {
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	2b01      	cmp	r3, #1
 8000756:	d101      	bne.n	800075c <getBME280Config+0x20>
		config.bme_addr = BME280_ADDR_1;
 8000758:	2377      	movs	r3, #119	; 0x77
 800075a:	733b      	strb	r3, [r7, #12]
	}
    return config;
 800075c:	7b3b      	ldrb	r3, [r7, #12]
}
 800075e:	4618      	mov	r0, r3
 8000760:	3714      	adds	r7, #20
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr

0800076a <swap>:

void swap(uint8_t* a, uint8_t* b) {
 800076a:	b480      	push	{r7}
 800076c:	b085      	sub	sp, #20
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
 8000772:	6039      	str	r1, [r7, #0]
    uint8_t temp = *a;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	73fb      	strb	r3, [r7, #15]
    *a = *b;
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	781a      	ldrb	r2, [r3, #0]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	701a      	strb	r2, [r3, #0]
    *b = temp;
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	7bfa      	ldrb	r2, [r7, #15]
 8000786:	701a      	strb	r2, [r3, #0]
}
 8000788:	bf00      	nop
 800078a:	3714      	adds	r7, #20
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr

08000794 <getGPIOConfig>:
uint8_t FLASH_READEN 	= 0x03;			// Read enable to begin reading data
uint8_t FLASH_READ_MANU	= 0x90;			// Instruction code to read the manufacturer ID
uint8_t FLASH_32K_ERS	= 0x52;			// Erase all memory within a 32K-byte block
uint8_t FLASH_ERASE		= 0x60;			// Erase the entire chip

GPIO_Config getGPIOConfig(uint8_t flashNo) {
 8000794:	b480      	push	{r7}
 8000796:	b085      	sub	sp, #20
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	460b      	mov	r3, r1
 800079e:	70fb      	strb	r3, [r7, #3]
    GPIO_Config config;

    if (flashNo == 0) {
 80007a0:	78fb      	ldrb	r3, [r7, #3]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d104      	bne.n	80007b0 <getGPIOConfig+0x1c>
        config.GPIOx = GPIOD;
 80007a6:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <getGPIOConfig+0x48>)
 80007a8:	60bb      	str	r3, [r7, #8]
        config.GPIO_Pin_CS = GPIO_PIN_2;
 80007aa:	2304      	movs	r3, #4
 80007ac:	81bb      	strh	r3, [r7, #12]
 80007ae:	e007      	b.n	80007c0 <getGPIOConfig+0x2c>
    } else if (flashNo == 1) {
 80007b0:	78fb      	ldrb	r3, [r7, #3]
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d104      	bne.n	80007c0 <getGPIOConfig+0x2c>
        config.GPIOx = GPIOB;
 80007b6:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <getGPIOConfig+0x4c>)
 80007b8:	60bb      	str	r3, [r7, #8]
        config.GPIO_Pin_CS = GPIO_PIN_12;
 80007ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007be:	81bb      	strh	r3, [r7, #12]
    }

    return config;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	461a      	mov	r2, r3
 80007c4:	f107 0308 	add.w	r3, r7, #8
 80007c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007cc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	3714      	adds	r7, #20
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	40020c00 	.word	0x40020c00
 80007e0:	40020400 	.word	0x40020400

080007e4 <erase_chip_spi>:
 *      Author: aidencontini
 */

#include "data_output_spi.h"

HAL_StatusTypeDef erase_chip_spi(SPI_HandleTypeDef *hspi, uint8_t flashNo) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	460b      	mov	r3, r1
 80007ee:	70fb      	strb	r3, [r7, #3]
	GPIO_Config config = getGPIOConfig(flashNo);
 80007f0:	f107 030c 	add.w	r3, r7, #12
 80007f4:	78fa      	ldrb	r2, [r7, #3]
 80007f6:	4611      	mov	r1, r2
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ffcb 	bl	8000794 <getGPIOConfig>

	uint8_t busy = 0x01;
 80007fe:	2301      	movs	r3, #1
 8000800:	75fb      	strb	r3, [r7, #23]
	while(busy) {
 8000802:	e008      	b.n	8000816 <erase_chip_spi+0x32>
		busy = (check_status_register(hspi, flashNo) & 0x01);	// Check if there is a write in progress
 8000804:	78fb      	ldrb	r3, [r7, #3]
 8000806:	4619      	mov	r1, r3
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f000 f887 	bl	800091c <check_status_register>
 800080e:	4603      	mov	r3, r0
 8000810:	f003 0301 	and.w	r3, r3, #1
 8000814:	75fb      	strb	r3, [r7, #23]
	while(busy) {
 8000816:	7dfb      	ldrb	r3, [r7, #23]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d1f3      	bne.n	8000804 <erase_chip_spi+0x20>
	}

	write_enable_spi(hspi, flashNo);
 800081c:	78fb      	ldrb	r3, [r7, #3]
 800081e:	4619      	mov	r1, r3
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f000 f81d 	bl	8000860 <write_enable_spi>
	perform_operation(&FLASH_ERASE, hspi, config.GPIOx, config.GPIO_Pin_CS);
 8000826:	68fa      	ldr	r2, [r7, #12]
 8000828:	8a3b      	ldrh	r3, [r7, #16]
 800082a:	6879      	ldr	r1, [r7, #4]
 800082c:	480b      	ldr	r0, [pc, #44]	; (800085c <erase_chip_spi+0x78>)
 800082e:	f001 f832 	bl	8001896 <perform_operation>

	busy = 0x01;
 8000832:	2301      	movs	r3, #1
 8000834:	75fb      	strb	r3, [r7, #23]
	while(busy) {
 8000836:	e008      	b.n	800084a <erase_chip_spi+0x66>
		busy = (check_status_register(hspi, flashNo) & 0x01);	// Check if there is a write in progress
 8000838:	78fb      	ldrb	r3, [r7, #3]
 800083a:	4619      	mov	r1, r3
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f000 f86d 	bl	800091c <check_status_register>
 8000842:	4603      	mov	r3, r0
 8000844:	f003 0301 	and.w	r3, r3, #1
 8000848:	75fb      	strb	r3, [r7, #23]
	while(busy) {
 800084a:	7dfb      	ldrb	r3, [r7, #23]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d1f3      	bne.n	8000838 <erase_chip_spi+0x54>
	}

	return HAL_OK;
 8000850:	2300      	movs	r3, #0
}
 8000852:	4618      	mov	r0, r3
 8000854:	3718      	adds	r7, #24
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000011 	.word	0x20000011

08000860 <write_enable_spi>:

	write_enable_spi(hspi, flashNo);
	perform_operation(&FLASH_32K_ERS, hspi, config.GPIOx, config.GPIO_Pin_CS);
}

void write_enable_spi(SPI_HandleTypeDef *hspi, uint8_t flashNo) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	460b      	mov	r3, r1
 800086a:	70fb      	strb	r3, [r7, #3]
	GPIO_Config config = getGPIOConfig(flashNo);
 800086c:	f107 0308 	add.w	r3, r7, #8
 8000870:	78fa      	ldrb	r2, [r7, #3]
 8000872:	4611      	mov	r1, r2
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff ff8d 	bl	8000794 <getGPIOConfig>
	perform_operation(&FLASH_WREN, hspi, config.GPIOx, config.GPIO_Pin_CS);
 800087a:	68ba      	ldr	r2, [r7, #8]
 800087c:	89bb      	ldrh	r3, [r7, #12]
 800087e:	6879      	ldr	r1, [r7, #4]
 8000880:	4803      	ldr	r0, [pc, #12]	; (8000890 <write_enable_spi+0x30>)
 8000882:	f001 f808 	bl	8001896 <perform_operation>
}
 8000886:	bf00      	nop
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	2000000c 	.word	0x2000000c

08000894 <write_data_spi>:
void write_disable_spi(SPI_HandleTypeDef *hspi, uint8_t flashNo) {
	GPIO_Config config = getGPIOConfig(flashNo);
	perform_operation(&FLASH_WRDIS, hspi, config.GPIOx, config.GPIO_Pin_CS);
}

uint8_t write_data_spi(uint8_t page[PAGE_SIZE], GPIO_PinState flight_mode, SPI_HandleTypeDef *hspi, int addr, uint8_t flashNo) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b08c      	sub	sp, #48	; 0x30
 8000898:	af04      	add	r7, sp, #16
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	607a      	str	r2, [r7, #4]
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	460b      	mov	r3, r1
 80008a2:	72fb      	strb	r3, [r7, #11]
	GPIO_Config config = getGPIOConfig(flashNo);
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80008ac:	4611      	mov	r1, r2
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff ff70 	bl	8000794 <getGPIOConfig>
	uint8_t exit = EXIT_FAILURE;
 80008b4:	2301      	movs	r3, #1
 80008b6:	77fb      	strb	r3, [r7, #31]

	// If in flight mode, write data out to flash
	if(flight_mode == GPIO_PIN_SET) {
 80008b8:	7afb      	ldrb	r3, [r7, #11]
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d125      	bne.n	800090a <write_data_spi+0x76>

		uint8_t busy = 0x01;
 80008be:	2301      	movs	r3, #1
 80008c0:	77bb      	strb	r3, [r7, #30]
		while(busy) {
 80008c2:	e009      	b.n	80008d8 <write_data_spi+0x44>
			busy = (check_status_register(hspi, flashNo) & 0x01);	// Check if there is a write in progress
 80008c4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80008c8:	4619      	mov	r1, r3
 80008ca:	6878      	ldr	r0, [r7, #4]
 80008cc:	f000 f826 	bl	800091c <check_status_register>
 80008d0:	4603      	mov	r3, r0
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	77bb      	strb	r3, [r7, #30]
		while(busy) {
 80008d8:	7fbb      	ldrb	r3, [r7, #30]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d1f2      	bne.n	80008c4 <write_data_spi+0x30>
		}

		// Send the write enable signal
		write_enable_spi(hspi, flashNo);
 80008de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80008e2:	4619      	mov	r1, r3
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	f7ff ffbb 	bl	8000860 <write_enable_spi>
		spi_write_data(&FLASH_PGWR, PAGE_SIZE, page, hspi, addr, config.GPIOx, config.GPIO_Pin_CS);
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	697a      	ldr	r2, [r7, #20]
 80008ee:	8b39      	ldrh	r1, [r7, #24]
 80008f0:	9102      	str	r1, [sp, #8]
 80008f2:	9201      	str	r2, [sp, #4]
 80008f4:	9300      	str	r3, [sp, #0]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	68fa      	ldr	r2, [r7, #12]
 80008fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008fe:	4806      	ldr	r0, [pc, #24]	; (8000918 <write_data_spi+0x84>)
 8000900:	f001 f82a 	bl	8001958 <spi_write_data>
		exit = EXIT_SUCCESS;
 8000904:	2300      	movs	r3, #0
 8000906:	77fb      	strb	r3, [r7, #31]
 8000908:	e001      	b.n	800090e <write_data_spi+0x7a>

	// If not in flight mode, exit
	} else {
		exit = EXIT_SUCCESS;
 800090a:	2300      	movs	r3, #0
 800090c:	77fb      	strb	r3, [r7, #31]
	}
	return exit;
 800090e:	7ffb      	ldrb	r3, [r7, #31]
}
 8000910:	4618      	mov	r0, r3
 8000912:	3720      	adds	r7, #32
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	2000000d 	.word	0x2000000d

0800091c <check_status_register>:
 *      Author: aidencontini
 */

#include "data_read_spi.h"

uint8_t check_status_register(SPI_HandleTypeDef *hspi, uint8_t flashNo) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	460b      	mov	r3, r1
 8000926:	70fb      	strb	r3, [r7, #3]
	GPIO_Config config = getGPIOConfig(flashNo);
 8000928:	f107 0308 	add.w	r3, r7, #8
 800092c:	78fa      	ldrb	r2, [r7, #3]
 800092e:	4611      	mov	r1, r2
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff ff2f 	bl	8000794 <getGPIOConfig>
	return spi_sendOp_readByte(&FLASH_READSR1, hspi, config.GPIOx, config.GPIO_Pin_CS);
 8000936:	68ba      	ldr	r2, [r7, #8]
 8000938:	89bb      	ldrh	r3, [r7, #12]
 800093a:	6879      	ldr	r1, [r7, #4]
 800093c:	4803      	ldr	r0, [pc, #12]	; (800094c <check_status_register+0x30>)
 800093e:	f000 ff83 	bl	8001848 <spi_sendOp_readByte>
 8000942:	4603      	mov	r3, r0
}
 8000944:	4618      	mov	r0, r3
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	2000000e 	.word	0x2000000e

08000950 <find_next_blank_page>:

uint32_t find_next_blank_page(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, GPIO_PinState *end_of_flash_ptr, uint8_t flashNo) {
 8000950:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000954:	b093      	sub	sp, #76	; 0x4c
 8000956:	af04      	add	r7, sp, #16
 8000958:	60f8      	str	r0, [r7, #12]
 800095a:	60b9      	str	r1, [r7, #8]
 800095c:	607a      	str	r2, [r7, #4]
 800095e:	70fb      	strb	r3, [r7, #3]
 8000960:	466b      	mov	r3, sp
 8000962:	461e      	mov	r6, r3
	uint8_t firstBytes = 4;
 8000964:	2304      	movs	r3, #4
 8000966:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	GPIO_Config config = getGPIOConfig(flashNo);
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	78fa      	ldrb	r2, [r7, #3]
 8000970:	4611      	mov	r1, r2
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff ff0e 	bl	8000794 <getGPIOConfig>

	uint8_t page_start[firstBytes];
 8000978:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 800097c:	460b      	mov	r3, r1
 800097e:	3b01      	subs	r3, #1
 8000980:	623b      	str	r3, [r7, #32]
 8000982:	b2cb      	uxtb	r3, r1
 8000984:	2200      	movs	r2, #0
 8000986:	4698      	mov	r8, r3
 8000988:	4691      	mov	r9, r2
 800098a:	f04f 0200 	mov.w	r2, #0
 800098e:	f04f 0300 	mov.w	r3, #0
 8000992:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000996:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800099a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800099e:	b2cb      	uxtb	r3, r1
 80009a0:	2200      	movs	r2, #0
 80009a2:	461c      	mov	r4, r3
 80009a4:	4615      	mov	r5, r2
 80009a6:	f04f 0200 	mov.w	r2, #0
 80009aa:	f04f 0300 	mov.w	r3, #0
 80009ae:	00eb      	lsls	r3, r5, #3
 80009b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80009b4:	00e2      	lsls	r2, r4, #3
 80009b6:	460b      	mov	r3, r1
 80009b8:	3307      	adds	r3, #7
 80009ba:	08db      	lsrs	r3, r3, #3
 80009bc:	00db      	lsls	r3, r3, #3
 80009be:	ebad 0d03 	sub.w	sp, sp, r3
 80009c2:	ab04      	add	r3, sp, #16
 80009c4:	3300      	adds	r3, #0
 80009c6:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < firstBytes; i++) {
 80009c8:	2300      	movs	r3, #0
 80009ca:	637b      	str	r3, [r7, #52]	; 0x34
 80009cc:	e007      	b.n	80009de <find_next_blank_page+0x8e>
		page_start[i] = 0;
 80009ce:	69fa      	ldr	r2, [r7, #28]
 80009d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009d2:	4413      	add	r3, r2
 80009d4:	2200      	movs	r2, #0
 80009d6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < firstBytes; i++) {
 80009d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009da:	3301      	adds	r3, #1
 80009dc:	637b      	str	r3, [r7, #52]	; 0x34
 80009de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80009e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009e4:	429a      	cmp	r2, r3
 80009e6:	dbf2      	blt.n	80009ce <find_next_blank_page+0x7e>
	}

	uint32_t page_start_concat = (page_start[0] << 24) | (page_start[1] << 16) | (page_start[2] << 8) | page_start[3];
 80009e8:	69fb      	ldr	r3, [r7, #28]
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	061a      	lsls	r2, r3, #24
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	785b      	ldrb	r3, [r3, #1]
 80009f2:	041b      	lsls	r3, r3, #16
 80009f4:	431a      	orrs	r2, r3
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	789b      	ldrb	r3, [r3, #2]
 80009fa:	021b      	lsls	r3, r3, #8
 80009fc:	4313      	orrs	r3, r2
 80009fe:	69fa      	ldr	r2, [r7, #28]
 8000a00:	78d2      	ldrb	r2, [r2, #3]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t temp = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t page_address = temp;
 8000a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a0c:	62bb      	str	r3, [r7, #40]	; 0x28

	while ((page_start_concat != 0xFFFFFFFF) || (temp == NUM_OF_PAGES)) {
 8000a0e:	e034      	b.n	8000a7a <find_next_blank_page+0x12a>
		page_address = temp;
 8000a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28

		uint8_t busy = 0x01;
 8000a14:	2301      	movs	r3, #1
 8000a16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while(busy) {
 8000a1a:	e009      	b.n	8000a30 <find_next_blank_page+0xe0>
			busy = (check_status_register(hspi, flashNo) & 0x01);	// Check if there is a write in progress
 8000a1c:	78fb      	ldrb	r3, [r7, #3]
 8000a1e:	4619      	mov	r1, r3
 8000a20:	68f8      	ldr	r0, [r7, #12]
 8000a22:	f7ff ff7b 	bl	800091c <check_status_register>
 8000a26:	4603      	mov	r3, r0
 8000a28:	f003 0301 	and.w	r3, r3, #1
 8000a2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while(busy) {
 8000a30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d1f1      	bne.n	8000a1c <find_next_blank_page+0xcc>
		}

		spi_read_data(&FLASH_READEN, firstBytes, page_start, hspi, page_address, config.GPIOx, config.GPIO_Pin_CS);
 8000a38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a3c:	b299      	uxth	r1, r3
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	8b3a      	ldrh	r2, [r7, #24]
 8000a42:	9202      	str	r2, [sp, #8]
 8000a44:	9301      	str	r3, [sp, #4]
 8000a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a48:	9300      	str	r3, [sp, #0]
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	69fa      	ldr	r2, [r7, #28]
 8000a4e:	4816      	ldr	r0, [pc, #88]	; (8000aa8 <find_next_blank_page+0x158>)
 8000a50:	f000 ff3e 	bl	80018d0 <spi_read_data>

		page_start_concat = (page_start[0] << 24) | (page_start[1] << 16) | (page_start[2] << 8) | page_start[3];
 8000a54:	69fb      	ldr	r3, [r7, #28]
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	061a      	lsls	r2, r3, #24
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	785b      	ldrb	r3, [r3, #1]
 8000a5e:	041b      	lsls	r3, r3, #16
 8000a60:	431a      	orrs	r2, r3
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	789b      	ldrb	r3, [r3, #2]
 8000a66:	021b      	lsls	r3, r3, #8
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	69fa      	ldr	r2, [r7, #28]
 8000a6c:	78d2      	ldrb	r2, [r2, #3]
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	633b      	str	r3, [r7, #48]	; 0x30
		temp += PAGE_SIZE;
 8000a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a74:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000a78:	62fb      	str	r3, [r7, #44]	; 0x2c
	while ((page_start_concat != 0xFFFFFFFF) || (temp == NUM_OF_PAGES)) {
 8000a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a80:	d1c6      	bne.n	8000a10 <find_next_blank_page+0xc0>
 8000a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a88:	d0c2      	beq.n	8000a10 <find_next_blank_page+0xc0>
	}

	if (page_address == (NUM_OF_PAGES * PAGE_SIZE)) {
 8000a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a90:	d102      	bne.n	8000a98 <find_next_blank_page+0x148>
		*end_of_flash_ptr = GPIO_PIN_RESET;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2200      	movs	r2, #0
 8000a96:	701a      	strb	r2, [r3, #0]
	}
	return page_address;
 8000a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a9a:	46b5      	mov	sp, r6
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	373c      	adds	r7, #60	; 0x3c
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000aa6:	bf00      	nop
 8000aa8:	2000000f 	.word	0x2000000f

08000aac <read_page_spi>:

void read_page_spi(uint8_t data_read[PAGE_SIZE], SPI_HandleTypeDef *hspi, uint32_t addr, uint8_t flashNo) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08c      	sub	sp, #48	; 0x30
 8000ab0:	af04      	add	r7, sp, #16
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
 8000ab8:	70fb      	strb	r3, [r7, #3]
	GPIO_Config config = getGPIOConfig(flashNo);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	78fa      	ldrb	r2, [r7, #3]
 8000ac0:	4611      	mov	r1, r2
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff fe66 	bl	8000794 <getGPIOConfig>

	// Read the status register to ensure no write is currently in progress
	uint8_t busy = 0x01;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	77fb      	strb	r3, [r7, #31]
	while(busy) {
 8000acc:	e008      	b.n	8000ae0 <read_page_spi+0x34>
		busy = (check_status_register(hspi, flashNo) & 0x01);	// Check if there is a write in progress
 8000ace:	78fb      	ldrb	r3, [r7, #3]
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	68b8      	ldr	r0, [r7, #8]
 8000ad4:	f7ff ff22 	bl	800091c <check_status_register>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	77fb      	strb	r3, [r7, #31]
	while(busy) {
 8000ae0:	7ffb      	ldrb	r3, [r7, #31]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d1f3      	bne.n	8000ace <read_page_spi+0x22>
	}

	spi_read_data(&FLASH_READEN, PAGE_SIZE, data_read, hspi, addr, config.GPIOx, config.GPIO_Pin_CS);
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	8b3a      	ldrh	r2, [r7, #24]
 8000aea:	9202      	str	r2, [sp, #8]
 8000aec:	9301      	str	r3, [sp, #4]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	9300      	str	r3, [sp, #0]
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	68fa      	ldr	r2, [r7, #12]
 8000af6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000afa:	4803      	ldr	r0, [pc, #12]	; (8000b08 <read_page_spi+0x5c>)
 8000afc:	f000 fee8 	bl	80018d0 <spi_read_data>
}
 8000b00:	bf00      	nop
 8000b02:	3720      	adds	r7, #32
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	2000000f 	.word	0x2000000f

08000b0c <read_manufacturer_id>:

void read_manufacturer_id(uint8_t manu[2], SPI_HandleTypeDef *hspi, uint8_t flashNo) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08c      	sub	sp, #48	; 0x30
 8000b10:	af04      	add	r7, sp, #16
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	4613      	mov	r3, r2
 8000b18:	71fb      	strb	r3, [r7, #7]
	GPIO_Config config = getGPIOConfig(flashNo);
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	79fa      	ldrb	r2, [r7, #7]
 8000b20:	4611      	mov	r1, r2
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fe36 	bl	8000794 <getGPIOConfig>

	// Read the status register to ensure no write is currently in progress
	uint8_t busy = 0x01;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	77fb      	strb	r3, [r7, #31]
	while(busy) {
 8000b2c:	e008      	b.n	8000b40 <read_manufacturer_id+0x34>
		busy = (check_status_register(hspi, flashNo) & 0x01);	// Check if there is a write in progress
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	4619      	mov	r1, r3
 8000b32:	68b8      	ldr	r0, [r7, #8]
 8000b34:	f7ff fef2 	bl	800091c <check_status_register>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	77fb      	strb	r3, [r7, #31]
	while(busy) {
 8000b40:	7ffb      	ldrb	r3, [r7, #31]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d1f3      	bne.n	8000b2e <read_manufacturer_id+0x22>
	}

	uint8_t addr = 0x00;
 8000b46:	2300      	movs	r3, #0
 8000b48:	77bb      	strb	r3, [r7, #30]

	// Read the entire contents of a page starting from the given address
	// Split the 24 bit address into three 8 bit ints
	spi_read_data(&FLASH_READ_MANU, 2, manu, hspi, addr, config.GPIOx, config.GPIO_Pin_CS);
 8000b4a:	7fbb      	ldrb	r3, [r7, #30]
 8000b4c:	697a      	ldr	r2, [r7, #20]
 8000b4e:	8b39      	ldrh	r1, [r7, #24]
 8000b50:	9102      	str	r1, [sp, #8]
 8000b52:	9201      	str	r2, [sp, #4]
 8000b54:	9300      	str	r3, [sp, #0]
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	68fa      	ldr	r2, [r7, #12]
 8000b5a:	2102      	movs	r1, #2
 8000b5c:	4803      	ldr	r0, [pc, #12]	; (8000b6c <read_manufacturer_id+0x60>)
 8000b5e:	f000 feb7 	bl	80018d0 <spi_read_data>
}
 8000b62:	bf00      	nop
 8000b64:	3720      	adds	r7, #32
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000010 	.word	0x20000010

08000b70 <i2c_read_reg>:
 *      Author: aidencontini
 */

#include "i2c_driver.h"

uint8_t i2c_read_reg(I2C_HandleTypeDef* hi2c, uint8_t dev_addr, uint8_t* register_addr) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b088      	sub	sp, #32
 8000b74:	af02      	add	r7, sp, #8
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	460b      	mov	r3, r1
 8000b7a:	607a      	str	r2, [r7, #4]
 8000b7c:	72fb      	strb	r3, [r7, #11]
	uint8_t read = 0x00;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Master_Transmit(hi2c, (dev_addr << 1) | 0x00, register_addr, 1, 100);
 8000b82:	7afb      	ldrb	r3, [r7, #11]
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	b299      	uxth	r1, r3
 8000b8a:	2364      	movs	r3, #100	; 0x64
 8000b8c:	9300      	str	r3, [sp, #0]
 8000b8e:	2301      	movs	r3, #1
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	68f8      	ldr	r0, [r7, #12]
 8000b94:	f001 ff66 	bl	8002a64 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, (dev_addr << 1) | 0x01, &read, 1, 100);
 8000b98:	7afb      	ldrb	r3, [r7, #11]
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	b21b      	sxth	r3, r3
 8000b9e:	f043 0301 	orr.w	r3, r3, #1
 8000ba2:	b21b      	sxth	r3, r3
 8000ba4:	b299      	uxth	r1, r3
 8000ba6:	f107 0217 	add.w	r2, r7, #23
 8000baa:	2364      	movs	r3, #100	; 0x64
 8000bac:	9300      	str	r3, [sp, #0]
 8000bae:	2301      	movs	r3, #1
 8000bb0:	68f8      	ldr	r0, [r7, #12]
 8000bb2:	f002 f855 	bl	8002c60 <HAL_I2C_Master_Receive>
	return read;
 8000bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <i2c_burst_read>:

void i2c_burst_read(I2C_HandleTypeDef* hi2c, uint8_t dev_addr, uint8_t register_addr, uint8_t size, uint8_t data_buffer[size]) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af02      	add	r7, sp, #8
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	4608      	mov	r0, r1
 8000bca:	4611      	mov	r1, r2
 8000bcc:	461a      	mov	r2, r3
 8000bce:	4603      	mov	r3, r0
 8000bd0:	70fb      	strb	r3, [r7, #3]
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	70bb      	strb	r3, [r7, #2]
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	707b      	strb	r3, [r7, #1]
	// In order to read multiple bytes, it is necessary to assert the most significant bit of the sub-address field.
	uint8_t addr = register_addr | 0x80;
 8000bda:	78bb      	ldrb	r3, [r7, #2]
 8000bdc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(hi2c, (dev_addr << 1) | 0x00, &addr, 1, 100);
 8000be4:	78fb      	ldrb	r3, [r7, #3]
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	b299      	uxth	r1, r3
 8000bec:	f107 020f 	add.w	r2, r7, #15
 8000bf0:	2364      	movs	r3, #100	; 0x64
 8000bf2:	9300      	str	r3, [sp, #0]
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f001 ff34 	bl	8002a64 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, (dev_addr << 1) | 0x01, data_buffer, size, 100);
 8000bfc:	78fb      	ldrb	r3, [r7, #3]
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	b21b      	sxth	r3, r3
 8000c02:	f043 0301 	orr.w	r3, r3, #1
 8000c06:	b21b      	sxth	r3, r3
 8000c08:	b299      	uxth	r1, r3
 8000c0a:	787b      	ldrb	r3, [r7, #1]
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	2264      	movs	r2, #100	; 0x64
 8000c10:	9200      	str	r2, [sp, #0]
 8000c12:	69ba      	ldr	r2, [r7, #24]
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f002 f823 	bl	8002c60 <HAL_I2C_Master_Receive>
}
 8000c1a:	bf00      	nop
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <i2c_write_reg>:

HAL_StatusTypeDef i2c_write_reg(I2C_HandleTypeDef* hi2c, uint8_t dev_addr, uint8_t* register_addr, uint8_t data) {
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b088      	sub	sp, #32
 8000c26:	af02      	add	r7, sp, #8
 8000c28:	60f8      	str	r0, [r7, #12]
 8000c2a:	607a      	str	r2, [r7, #4]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	460b      	mov	r3, r1
 8000c30:	72fb      	strb	r3, [r7, #11]
 8000c32:	4613      	mov	r3, r2
 8000c34:	72bb      	strb	r3, [r7, #10]
	uint8_t data_tx[2] = {*register_addr, data};
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	753b      	strb	r3, [r7, #20]
 8000c3c:	7abb      	ldrb	r3, [r7, #10]
 8000c3e:	757b      	strb	r3, [r7, #21]
	return HAL_I2C_Master_Transmit(hi2c, (dev_addr << 1) | 0x00, data_tx, 2, 100);
 8000c40:	7afb      	ldrb	r3, [r7, #11]
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	b299      	uxth	r1, r3
 8000c48:	f107 0214 	add.w	r2, r7, #20
 8000c4c:	2364      	movs	r3, #100	; 0x64
 8000c4e:	9300      	str	r3, [sp, #0]
 8000c50:	2302      	movs	r3, #2
 8000c52:	68f8      	ldr	r0, [r7, #12]
 8000c54:	f001 ff06 	bl	8002a64 <HAL_I2C_Master_Transmit>
 8000c58:	4603      	mov	r3, r0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3718      	adds	r7, #24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c68:	f001 f9c2 	bl	8001ff0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c6c:	f000 f854 	bl	8000d18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c70:	f000 f9f0 	bl	8001054 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c74:	f000 f8b2 	bl	8000ddc <MX_I2C1_Init>
  MX_RTC_Init();
 8000c78:	f000 f930 	bl	8000edc <MX_RTC_Init>
  MX_SPI1_Init();
 8000c7c:	f000 f954 	bl	8000f28 <MX_SPI1_Init>
  MX_TIM6_Init();
 8000c80:	f000 f988 	bl	8000f94 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8000c84:	f000 f9bc 	bl	8001000 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8000c88:	f000 f8e8 	bl	8000e5c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, UARTRxData, 2);			// Initiate the UART Receive interrupt
 8000c8c:	2202      	movs	r2, #2
 8000c8e:	4918      	ldr	r1, [pc, #96]	; (8000cf0 <main+0x8c>)
 8000c90:	4818      	ldr	r0, [pc, #96]	; (8000cf4 <main+0x90>)
 8000c92:	f005 f90c 	bl	8005eae <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);	// Turn LED off
 8000c96:	2200      	movs	r2, #0
 8000c98:	2180      	movs	r1, #128	; 0x80
 8000c9a:	4817      	ldr	r0, [pc, #92]	; (8000cf8 <main+0x94>)
 8000c9c:	f001 fd6a 	bl	8002774 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim6);
 8000ca0:	4816      	ldr	r0, [pc, #88]	; (8000cfc <main+0x98>)
 8000ca2:	f004 fd5b 	bl	800575c <HAL_TIM_Base_Start_IT>
  byte_tracker = 0;
 8000ca6:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <main+0x9c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	801a      	strh	r2, [r3, #0]
  end_of_flash = GPIO_PIN_SET;
 8000cac:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <main+0xa0>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	701a      	strb	r2, [r3, #0]
  clean_data_buffer();
 8000cb2:	f000 fac5 	bl	8001240 <clean_data_buffer>
  initialise_rtc_default(&hrtc);
 8000cb6:	4814      	ldr	r0, [pc, #80]	; (8000d08 <main+0xa4>)
 8000cb8:	f000 fd58 	bl	800176c <initialise_rtc_default>
  init_accel(&hi2c1);
 8000cbc:	4813      	ldr	r0, [pc, #76]	; (8000d0c <main+0xa8>)
 8000cbe:	f7ff fc1b 	bl	80004f8 <init_accel>
  init_bme280(&hi2c2, 0);
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4812      	ldr	r0, [pc, #72]	; (8000d10 <main+0xac>)
 8000cc6:	f7ff fc5b 	bl	8000580 <init_bme280>
//  init_bme280(&hi2c2, 1);
  HAL_UART_Receive_IT(&huart2, UARTRxData,1);				// Initiate the UART Receive interrupt
 8000cca:	2201      	movs	r2, #1
 8000ccc:	4908      	ldr	r1, [pc, #32]	; (8000cf0 <main+0x8c>)
 8000cce:	4809      	ldr	r0, [pc, #36]	; (8000cf4 <main+0x90>)
 8000cd0:	f005 f8ed 	bl	8005eae <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);		// SET SPI CS High to disable bus
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2104      	movs	r1, #4
 8000cd8:	480e      	ldr	r0, [pc, #56]	; (8000d14 <main+0xb0>)
 8000cda:	f001 fd4b 	bl	8002774 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);		// Turn LED off
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2180      	movs	r1, #128	; 0x80
 8000ce2:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <main+0x94>)
 8000ce4:	f001 fd46 	bl	8002774 <HAL_GPIO_WritePin>

  /**
  next_blank_page = find_next_blank_page(&hspi1, &huart2, &end_of_flash);
  **/

  HAL_TIM_Base_Start_IT(&htim6);
 8000ce8:	4804      	ldr	r0, [pc, #16]	; (8000cfc <main+0x98>)
 8000cea:	f004 fd37 	bl	800575c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cee:	e7fe      	b.n	8000cee <main+0x8a>
 8000cf0:	200001f0 	.word	0x200001f0
 8000cf4:	200001a8 	.word	0x200001a8
 8000cf8:	40020400 	.word	0x40020400
 8000cfc:	20000160 	.word	0x20000160
 8000d00:	20000310 	.word	0x20000310
 8000d04:	20000312 	.word	0x20000312
 8000d08:	200000e8 	.word	0x200000e8
 8000d0c:	20000040 	.word	0x20000040
 8000d10:	20000094 	.word	0x20000094
 8000d14:	40020c00 	.word	0x40020c00

08000d18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b094      	sub	sp, #80	; 0x50
 8000d1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d1e:	f107 0320 	add.w	r3, r7, #32
 8000d22:	2230      	movs	r2, #48	; 0x30
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f006 f83c 	bl	8006da4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d2c:	f107 030c 	add.w	r3, r7, #12
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	4b24      	ldr	r3, [pc, #144]	; (8000dd4 <SystemClock_Config+0xbc>)
 8000d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d44:	4a23      	ldr	r2, [pc, #140]	; (8000dd4 <SystemClock_Config+0xbc>)
 8000d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4c:	4b21      	ldr	r3, [pc, #132]	; (8000dd4 <SystemClock_Config+0xbc>)
 8000d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d58:	2300      	movs	r3, #0
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <SystemClock_Config+0xc0>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d64:	4a1c      	ldr	r2, [pc, #112]	; (8000dd8 <SystemClock_Config+0xc0>)
 8000d66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d6a:	6013      	str	r3, [r2, #0]
 8000d6c:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <SystemClock_Config+0xc0>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000d78:	230a      	movs	r3, #10
 8000d7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d80:	2310      	movs	r3, #16
 8000d82:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d84:	2301      	movs	r3, #1
 8000d86:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d8c:	f107 0320 	add.w	r3, r7, #32
 8000d90:	4618      	mov	r0, r3
 8000d92:	f002 fd99 	bl	80038c8 <HAL_RCC_OscConfig>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000d9c:	f000 fa6a 	bl	8001274 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da0:	230f      	movs	r3, #15
 8000da2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000da4:	2300      	movs	r3, #0
 8000da6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000db4:	f107 030c 	add.w	r3, r7, #12
 8000db8:	2100      	movs	r1, #0
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f002 fffc 	bl	8003db8 <HAL_RCC_ClockConfig>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000dc6:	f000 fa55 	bl	8001274 <Error_Handler>
  }
}
 8000dca:	bf00      	nop
 8000dcc:	3750      	adds	r7, #80	; 0x50
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40007000 	.word	0x40007000

08000ddc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000de0:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000de2:	4a1c      	ldr	r2, [pc, #112]	; (8000e54 <MX_I2C1_Init+0x78>)
 8000de4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000de6:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000de8:	4a1b      	ldr	r2, [pc, #108]	; (8000e58 <MX_I2C1_Init+0x7c>)
 8000dea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dec:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000df2:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000df8:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000dfa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dfe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e06:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e0c:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e12:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e18:	480d      	ldr	r0, [pc, #52]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000e1a:	f001 fcdf 	bl	80027dc <HAL_I2C_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e24:	f000 fa26 	bl	8001274 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4809      	ldr	r0, [pc, #36]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000e2c:	f002 fcd0 	bl	80037d0 <HAL_I2CEx_ConfigAnalogFilter>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000e36:	f000 fa1d 	bl	8001274 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4804      	ldr	r0, [pc, #16]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000e3e:	f002 fd03 	bl	8003848 <HAL_I2CEx_ConfigDigitalFilter>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000e48:	f000 fa14 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000040 	.word	0x20000040
 8000e54:	40005400 	.word	0x40005400
 8000e58:	000186a0 	.word	0x000186a0

08000e5c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e60:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <MX_I2C2_Init+0x74>)
 8000e62:	4a1c      	ldr	r2, [pc, #112]	; (8000ed4 <MX_I2C2_Init+0x78>)
 8000e64:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000e66:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <MX_I2C2_Init+0x74>)
 8000e68:	4a1b      	ldr	r2, [pc, #108]	; (8000ed8 <MX_I2C2_Init+0x7c>)
 8000e6a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e6c:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <MX_I2C2_Init+0x74>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000e72:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <MX_I2C2_Init+0x74>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e78:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <MX_I2C2_Init+0x74>)
 8000e7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e7e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e80:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <MX_I2C2_Init+0x74>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000e86:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <MX_I2C2_Init+0x74>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e8c:	4b10      	ldr	r3, [pc, #64]	; (8000ed0 <MX_I2C2_Init+0x74>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <MX_I2C2_Init+0x74>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e98:	480d      	ldr	r0, [pc, #52]	; (8000ed0 <MX_I2C2_Init+0x74>)
 8000e9a:	f001 fc9f 	bl	80027dc <HAL_I2C_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000ea4:	f000 f9e6 	bl	8001274 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4809      	ldr	r0, [pc, #36]	; (8000ed0 <MX_I2C2_Init+0x74>)
 8000eac:	f002 fc90 	bl	80037d0 <HAL_I2CEx_ConfigAnalogFilter>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000eb6:	f000 f9dd 	bl	8001274 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <MX_I2C2_Init+0x74>)
 8000ebe:	f002 fcc3 	bl	8003848 <HAL_I2CEx_ConfigDigitalFilter>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000ec8:	f000 f9d4 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000094 	.word	0x20000094
 8000ed4:	40005800 	.word	0x40005800
 8000ed8:	000186a0 	.word	0x000186a0

08000edc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <MX_RTC_Init+0x44>)
 8000ee2:	4a10      	ldr	r2, [pc, #64]	; (8000f24 <MX_RTC_Init+0x48>)
 8000ee4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <MX_RTC_Init+0x44>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <MX_RTC_Init+0x44>)
 8000eee:	227f      	movs	r2, #127	; 0x7f
 8000ef0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ef2:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <MX_RTC_Init+0x44>)
 8000ef4:	22ff      	movs	r2, #255	; 0xff
 8000ef6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ef8:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <MX_RTC_Init+0x44>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000efe:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <MX_RTC_Init+0x44>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <MX_RTC_Init+0x44>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f0a:	4805      	ldr	r0, [pc, #20]	; (8000f20 <MX_RTC_Init+0x44>)
 8000f0c:	f003 faf4 	bl	80044f8 <HAL_RTC_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000f16:	f000 f9ad 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200000e8 	.word	0x200000e8
 8000f24:	40002800 	.word	0x40002800

08000f28 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f2c:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <MX_SPI1_Init+0x64>)
 8000f2e:	4a18      	ldr	r2, [pc, #96]	; (8000f90 <MX_SPI1_Init+0x68>)
 8000f30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f32:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <MX_SPI1_Init+0x64>)
 8000f34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f3a:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <MX_SPI1_Init+0x64>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <MX_SPI1_Init+0x64>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f46:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <MX_SPI1_Init+0x64>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <MX_SPI1_Init+0x64>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <MX_SPI1_Init+0x64>)
 8000f54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f58:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <MX_SPI1_Init+0x64>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f60:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <MX_SPI1_Init+0x64>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f66:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <MX_SPI1_Init+0x64>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f6c:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <MX_SPI1_Init+0x64>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <MX_SPI1_Init+0x64>)
 8000f74:	220a      	movs	r2, #10
 8000f76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f78:	4804      	ldr	r0, [pc, #16]	; (8000f8c <MX_SPI1_Init+0x64>)
 8000f7a:	f003 fdc9 	bl	8004b10 <HAL_SPI_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f84:	f000 f976 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000108 	.word	0x20000108
 8000f90:	40013000 	.word	0x40013000

08000f94 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f9a:	463b      	mov	r3, r7
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000fa2:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <MX_TIM6_Init+0x64>)
 8000fa4:	4a15      	ldr	r2, [pc, #84]	; (8000ffc <MX_TIM6_Init+0x68>)
 8000fa6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15999;
 8000fa8:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <MX_TIM6_Init+0x64>)
 8000faa:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000fae:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <MX_TIM6_Init+0x64>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8000fb6:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <MX_TIM6_Init+0x64>)
 8000fb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fbc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <MX_TIM6_Init+0x64>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000fc4:	480c      	ldr	r0, [pc, #48]	; (8000ff8 <MX_TIM6_Init+0x64>)
 8000fc6:	f004 fb79 	bl	80056bc <HAL_TIM_Base_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000fd0:	f000 f950 	bl	8001274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000fdc:	463b      	mov	r3, r7
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <MX_TIM6_Init+0x64>)
 8000fe2:	f004 fdf9 	bl	8005bd8 <HAL_TIMEx_MasterConfigSynchronization>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000fec:	f000 f942 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000160 	.word	0x20000160
 8000ffc:	40001000 	.word	0x40001000

08001000 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <MX_USART2_UART_Init+0x4c>)
 8001006:	4a12      	ldr	r2, [pc, #72]	; (8001050 <MX_USART2_UART_Init+0x50>)
 8001008:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800100a:	4b10      	ldr	r3, [pc, #64]	; (800104c <MX_USART2_UART_Init+0x4c>)
 800100c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001010:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <MX_USART2_UART_Init+0x4c>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <MX_USART2_UART_Init+0x4c>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <MX_USART2_UART_Init+0x4c>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001024:	4b09      	ldr	r3, [pc, #36]	; (800104c <MX_USART2_UART_Init+0x4c>)
 8001026:	220c      	movs	r2, #12
 8001028:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800102a:	4b08      	ldr	r3, [pc, #32]	; (800104c <MX_USART2_UART_Init+0x4c>)
 800102c:	2200      	movs	r2, #0
 800102e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <MX_USART2_UART_Init+0x4c>)
 8001032:	2200      	movs	r2, #0
 8001034:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001036:	4805      	ldr	r0, [pc, #20]	; (800104c <MX_USART2_UART_Init+0x4c>)
 8001038:	f004 fe5e 	bl	8005cf8 <HAL_UART_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001042:	f000 f917 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200001a8 	.word	0x200001a8
 8001050:	40004400 	.word	0x40004400

08001054 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	; 0x28
 8001058:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
 8001068:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	4b6f      	ldr	r3, [pc, #444]	; (800122c <MX_GPIO_Init+0x1d8>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a6e      	ldr	r2, [pc, #440]	; (800122c <MX_GPIO_Init+0x1d8>)
 8001074:	f043 0304 	orr.w	r3, r3, #4
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b6c      	ldr	r3, [pc, #432]	; (800122c <MX_GPIO_Init+0x1d8>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0304 	and.w	r3, r3, #4
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	4b68      	ldr	r3, [pc, #416]	; (800122c <MX_GPIO_Init+0x1d8>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a67      	ldr	r2, [pc, #412]	; (800122c <MX_GPIO_Init+0x1d8>)
 8001090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b65      	ldr	r3, [pc, #404]	; (800122c <MX_GPIO_Init+0x1d8>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	4b61      	ldr	r3, [pc, #388]	; (800122c <MX_GPIO_Init+0x1d8>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a60      	ldr	r2, [pc, #384]	; (800122c <MX_GPIO_Init+0x1d8>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b5e      	ldr	r3, [pc, #376]	; (800122c <MX_GPIO_Init+0x1d8>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	4b5a      	ldr	r3, [pc, #360]	; (800122c <MX_GPIO_Init+0x1d8>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a59      	ldr	r2, [pc, #356]	; (800122c <MX_GPIO_Init+0x1d8>)
 80010c8:	f043 0302 	orr.w	r3, r3, #2
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b57      	ldr	r3, [pc, #348]	; (800122c <MX_GPIO_Init+0x1d8>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	603b      	str	r3, [r7, #0]
 80010de:	4b53      	ldr	r3, [pc, #332]	; (800122c <MX_GPIO_Init+0x1d8>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a52      	ldr	r2, [pc, #328]	; (800122c <MX_GPIO_Init+0x1d8>)
 80010e4:	f043 0308 	orr.w	r3, r3, #8
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b50      	ldr	r3, [pc, #320]	; (800122c <MX_GPIO_Init+0x1d8>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0308 	and.w	r3, r3, #8
 80010f2:	603b      	str	r3, [r7, #0]
 80010f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_WP_GPIO_Port, SPI2_WP_Pin, GPIO_PIN_RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2101      	movs	r1, #1
 80010fa:	484d      	ldr	r0, [pc, #308]	; (8001230 <MX_GPIO_Init+0x1dc>)
 80010fc:	f001 fb3a 	bl	8002774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001100:	2200      	movs	r2, #0
 8001102:	f44f 41a1 	mov.w	r1, #20608	; 0x5080
 8001106:	484b      	ldr	r0, [pc, #300]	; (8001234 <MX_GPIO_Init+0x1e0>)
 8001108:	f001 fb34 	bl	8002774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI1_WP_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 800110c:	2200      	movs	r2, #0
 800110e:	f244 0104 	movw	r1, #16388	; 0x4004
 8001112:	4849      	ldr	r0, [pc, #292]	; (8001238 <MX_GPIO_Init+0x1e4>)
 8001114:	f001 fb2e 	bl	8002774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI2_WP_Pin */
  GPIO_InitStruct.Pin = SPI2_WP_Pin;
 8001118:	2301      	movs	r3, #1
 800111a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111c:	2301      	movs	r3, #1
 800111e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001120:	2301      	movs	r3, #1
 8001122:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001124:	2300      	movs	r3, #0
 8001126:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_WP_GPIO_Port, &GPIO_InitStruct);
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	4619      	mov	r1, r3
 800112e:	4840      	ldr	r0, [pc, #256]	; (8001230 <MX_GPIO_Init+0x1dc>)
 8001130:	f001 f974 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001134:	230c      	movs	r3, #12
 8001136:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001138:	2302      	movs	r3, #2
 800113a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001140:	2303      	movs	r3, #3
 8001142:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001144:	2305      	movs	r3, #5
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	4619      	mov	r1, r3
 800114e:	4838      	ldr	r0, [pc, #224]	; (8001230 <MX_GPIO_Init+0x1dc>)
 8001150:	f001 f964 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pin : JMP_Flight_Pin */
  GPIO_InitStruct.Pin = JMP_Flight_Pin;
 8001154:	2302      	movs	r3, #2
 8001156:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001158:	2300      	movs	r3, #0
 800115a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800115c:	2302      	movs	r3, #2
 800115e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(JMP_Flight_GPIO_Port, &GPIO_InitStruct);
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	4619      	mov	r1, r3
 8001166:	4833      	ldr	r0, [pc, #204]	; (8001234 <MX_GPIO_Init+0x1e0>)
 8001168:	f001 f958 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 800116c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001170:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001172:	2301      	movs	r3, #1
 8001174:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001176:	2301      	movs	r3, #1
 8001178:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	4619      	mov	r1, r3
 8001184:	482b      	ldr	r0, [pc, #172]	; (8001234 <MX_GPIO_Init+0x1e0>)
 8001186:	f001 f949 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 800118a:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800118e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001190:	2301      	movs	r3, #1
 8001192:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001194:	2302      	movs	r3, #2
 8001196:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001198:	2300      	movs	r3, #0
 800119a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	4619      	mov	r1, r3
 80011a2:	4824      	ldr	r0, [pc, #144]	; (8001234 <MX_GPIO_Init+0x1e0>)
 80011a4:	f001 f93a 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_WP_Pin */
  GPIO_InitStruct.Pin = SPI1_WP_Pin;
 80011a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ae:	2301      	movs	r3, #1
 80011b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011b2:	2301      	movs	r3, #1
 80011b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2300      	movs	r3, #0
 80011b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_WP_GPIO_Port, &GPIO_InitStruct);
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	4619      	mov	r1, r3
 80011c0:	481d      	ldr	r0, [pc, #116]	; (8001238 <MX_GPIO_Init+0x1e4>)
 80011c2:	f001 f92b 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80011c6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80011ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d4:	2303      	movs	r3, #3
 80011d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80011d8:	2309      	movs	r3, #9
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	4619      	mov	r1, r3
 80011e2:	4816      	ldr	r0, [pc, #88]	; (800123c <MX_GPIO_Init+0x1e8>)
 80011e4:	f001 f91a 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80011e8:	2304      	movs	r3, #4
 80011ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ec:	2301      	movs	r3, #1
 80011ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	2300      	movs	r3, #0
 80011f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	4619      	mov	r1, r3
 80011fe:	480e      	ldr	r0, [pc, #56]	; (8001238 <MX_GPIO_Init+0x1e4>)
 8001200:	f001 f90c 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001204:	2308      	movs	r3, #8
 8001206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	2302      	movs	r3, #2
 800120a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001210:	2303      	movs	r3, #3
 8001212:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001214:	2305      	movs	r3, #5
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	4619      	mov	r1, r3
 800121e:	4806      	ldr	r0, [pc, #24]	; (8001238 <MX_GPIO_Init+0x1e4>)
 8001220:	f001 f8fc 	bl	800241c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001224:	bf00      	nop
 8001226:	3728      	adds	r7, #40	; 0x28
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40023800 	.word	0x40023800
 8001230:	40020800 	.word	0x40020800
 8001234:	40020400 	.word	0x40020400
 8001238:	40020c00 	.word	0x40020c00
 800123c:	40020000 	.word	0x40020000

08001240 <clean_data_buffer>:

/* USER CODE BEGIN 4 */
void clean_data_buffer() {
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
    for (int i = 0; i < PAGE_SIZE; ++i) {
 8001246:	2300      	movs	r3, #0
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	e007      	b.n	800125c <clean_data_buffer+0x1c>
        data_buffer[i] = 0xFF;  // Initialize each element to 0xFF
 800124c:	4a08      	ldr	r2, [pc, #32]	; (8001270 <clean_data_buffer+0x30>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4413      	add	r3, r2
 8001252:	22ff      	movs	r2, #255	; 0xff
 8001254:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < PAGE_SIZE; ++i) {
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	3301      	adds	r3, #1
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2bff      	cmp	r3, #255	; 0xff
 8001260:	ddf4      	ble.n	800124c <clean_data_buffer+0xc>
    }
}
 8001262:	bf00      	nop
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	200001f4 	.word	0x200001f4

08001274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001278:	b672      	cpsid	i
}
 800127a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800127c:	e7fe      	b.n	800127c <Error_Handler+0x8>
	...

08001280 <heartbeatUART>:

#include "peripheral_driver.h"
/***************************************************************************************************************
 * Generic Functions
 */
void heartbeatUART(UART_HandleTypeDef *huart) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	send_uart_string(huart, "**Heartbeat**\r\n");			// Transmit the heartbeat
 8001288:	4903      	ldr	r1, [pc, #12]	; (8001298 <heartbeatUART+0x18>)
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f000 fe5d 	bl	8001f4a <send_uart_string>
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	08006e14 	.word	0x08006e14

0800129c <eraseFlashSPI>:

void eraseFlashSPI(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, uint8_t flashNo) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	4613      	mov	r3, r2
 80012a8:	71fb      	strb	r3, [r7, #7]
	if (flashNo == 0 || flashNo == 1) {
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d002      	beq.n	80012b6 <eraseFlashSPI+0x1a>
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d123      	bne.n	80012fe <eraseFlashSPI+0x62>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET);		// Activate the "write out" LED
 80012b6:	2201      	movs	r2, #1
 80012b8:	2180      	movs	r1, #128	; 0x80
 80012ba:	4813      	ldr	r0, [pc, #76]	; (8001308 <eraseFlashSPI+0x6c>)
 80012bc:	f001 fa5a 	bl	8002774 <HAL_GPIO_WritePin>
		if (erase_chip_spi(hspi, flashNo) == HAL_OK) {
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	4619      	mov	r1, r3
 80012c4:	68f8      	ldr	r0, [r7, #12]
 80012c6:	f7ff fa8d 	bl	80007e4 <erase_chip_spi>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d10d      	bne.n	80012ec <eraseFlashSPI+0x50>
			send_uart_string(huart, "Successful Chip Erase\r\n");
 80012d0:	490e      	ldr	r1, [pc, #56]	; (800130c <eraseFlashSPI+0x70>)
 80012d2:	68b8      	ldr	r0, [r7, #8]
 80012d4:	f000 fe39 	bl	8001f4a <send_uart_string>
			next_blank_page = find_next_blank_page(hspi, huart, &end_of_flash, flashNo);
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	4a0d      	ldr	r2, [pc, #52]	; (8001310 <eraseFlashSPI+0x74>)
 80012dc:	68b9      	ldr	r1, [r7, #8]
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	f7ff fb36 	bl	8000950 <find_next_blank_page>
 80012e4:	4603      	mov	r3, r0
 80012e6:	4a0b      	ldr	r2, [pc, #44]	; (8001314 <eraseFlashSPI+0x78>)
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	e003      	b.n	80012f4 <eraseFlashSPI+0x58>
		} else {
			send_uart_string(huart, "Error during chip erase. Please check the connection and try again.\r\n");
 80012ec:	490a      	ldr	r1, [pc, #40]	; (8001318 <eraseFlashSPI+0x7c>)
 80012ee:	68b8      	ldr	r0, [r7, #8]
 80012f0:	f000 fe2b 	bl	8001f4a <send_uart_string>
		}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);	// Deactivate the "write out" LED
 80012f4:	2200      	movs	r2, #0
 80012f6:	2180      	movs	r1, #128	; 0x80
 80012f8:	4803      	ldr	r0, [pc, #12]	; (8001308 <eraseFlashSPI+0x6c>)
 80012fa:	f001 fa3b 	bl	8002774 <HAL_GPIO_WritePin>
	}
}
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40020400 	.word	0x40020400
 800130c:	08006e24 	.word	0x08006e24
 8001310:	20000312 	.word	0x20000312
 8001314:	2000030c 	.word	0x2000030c
 8001318:	08006e3c 	.word	0x08006e3c

0800131c <readFlashToUART>:

/***************************************************************************************************************
 * SPI Flash Functions
 */
void readFlashToUART(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, uint8_t flashNo) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b0c8      	sub	sp, #288	; 0x120
 8001320:	af00      	add	r7, sp, #0
 8001322:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001326:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800132a:	6018      	str	r0, [r3, #0]
 800132c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001330:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001334:	6019      	str	r1, [r3, #0]
 8001336:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800133a:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800133e:	701a      	strb	r2, [r3, #0]
	uint32_t num_of_pages = next_blank_page;
 8001340:	4b28      	ldr	r3, [pc, #160]	; (80013e4 <readFlashToUART+0xc8>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	if(num_of_pages == 0) {
 8001348:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800134c:	2b00      	cmp	r3, #0
 800134e:	d103      	bne.n	8001358 <readFlashToUART+0x3c>
		num_of_pages = PAGE_SIZE;
 8001350:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001354:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	}
	num_of_pages = num_of_pages/PAGE_SIZE;
 8001358:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800135c:	0a1b      	lsrs	r3, r3, #8
 800135e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	uint32_t address = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET);		// Activate the "write out" LED
 8001368:	2201      	movs	r2, #1
 800136a:	2180      	movs	r1, #128	; 0x80
 800136c:	481e      	ldr	r0, [pc, #120]	; (80013e8 <readFlashToUART+0xcc>)
 800136e:	f001 fa01 	bl	8002774 <HAL_GPIO_WritePin>

	for (int i = 0; i < (num_of_pages); i++) {
 8001372:	2300      	movs	r3, #0
 8001374:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001378:	e024      	b.n	80013c4 <readFlashToUART+0xa8>
		uint8_t page[PAGE_SIZE];
		read_page_spi(page, hspi, address, flashNo);//
 800137a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800137e:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001388:	f5a2 718a 	sub.w	r1, r2, #276	; 0x114
 800138c:	f107 0014 	add.w	r0, r7, #20
 8001390:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001394:	6809      	ldr	r1, [r1, #0]
 8001396:	f7ff fb89 	bl	8000aac <read_page_spi>
		uart_transmit_page(huart, page);						// Transmit the data//
 800139a:	f107 0214 	add.w	r2, r7, #20
 800139e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80013a2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80013a6:	4611      	mov	r1, r2
 80013a8:	6818      	ldr	r0, [r3, #0]
 80013aa:	f000 fdbd 	bl	8001f28 <uart_transmit_page>
		address += PAGE_SIZE;
 80013ae:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80013b2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80013b6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	for (int i = 0; i < (num_of_pages); i++) {
 80013ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80013be:	3301      	adds	r3, #1
 80013c0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80013c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80013c8:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d8d4      	bhi.n	800137a <readFlashToUART+0x5e>
	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);	// Deactivate the "write out" LED
 80013d0:	2200      	movs	r2, #0
 80013d2:	2180      	movs	r1, #128	; 0x80
 80013d4:	4804      	ldr	r0, [pc, #16]	; (80013e8 <readFlashToUART+0xcc>)
 80013d6:	f001 f9cd 	bl	8002774 <HAL_GPIO_WritePin>
}
 80013da:	bf00      	nop
 80013dc:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	2000030c 	.word	0x2000030c
 80013e8:	40020400 	.word	0x40020400

080013ec <readFlashManuSPI>:

void readFlashManuSPI(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, uint8_t flashNo) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	4613      	mov	r3, r2
 80013f8:	71fb      	strb	r3, [r7, #7]
	uint8_t manu[2] = {0, 0};
 80013fa:	2300      	movs	r3, #0
 80013fc:	82bb      	strh	r3, [r7, #20]
	read_manufacturer_id(manu, hspi, flashNo);
 80013fe:	79fa      	ldrb	r2, [r7, #7]
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	68f9      	ldr	r1, [r7, #12]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fb80 	bl	8000b0c <read_manufacturer_id>
	send_uart_hex(huart, manu[0]);
 800140c:	7d3b      	ldrb	r3, [r7, #20]
 800140e:	4619      	mov	r1, r3
 8001410:	68b8      	ldr	r0, [r7, #8]
 8001412:	f000 fdae 	bl	8001f72 <send_uart_hex>
	send_uart_hex(huart, manu[1]);
 8001416:	7d7b      	ldrb	r3, [r7, #21]
 8001418:	4619      	mov	r1, r3
 800141a:	68b8      	ldr	r0, [r7, #8]
 800141c:	f000 fda9 	bl	8001f72 <send_uart_hex>
}
 8001420:	bf00      	nop
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <writePageSPI_W>:

void writePageSPI_W(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, uint8_t flashNo) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b0c8      	sub	sp, #288	; 0x120
 800142c:	af02      	add	r7, sp, #8
 800142e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001432:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001436:	6018      	str	r0, [r3, #0]
 8001438:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800143c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001440:	6019      	str	r1, [r3, #0]
 8001442:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001446:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800144a:	701a      	strb	r2, [r3, #0]
	uint8_t data_out[PAGE_SIZE];
	for (int i = 0; i < PAGE_SIZE; i++) {
 800144c:	2300      	movs	r3, #0
 800144e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001452:	e00d      	b.n	8001470 <writePageSPI_W+0x48>
		data_out[i] = 0x77;		// Make all data in the page 'w'
 8001454:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001458:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 800145c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001460:	4413      	add	r3, r2
 8001462:	2277      	movs	r2, #119	; 0x77
 8001464:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < PAGE_SIZE; i++) {
 8001466:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800146a:	3301      	adds	r3, #1
 800146c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001470:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001474:	2bff      	cmp	r3, #255	; 0xff
 8001476:	dded      	ble.n	8001454 <writePageSPI_W+0x2c>
	}
	write_data_spi(data_out, GPIO_PIN_SET, hspi, next_blank_page, flashNo);
 8001478:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <writePageSPI_W+0xa0>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4619      	mov	r1, r3
 800147e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001482:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8001486:	f107 0014 	add.w	r0, r7, #20
 800148a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800148e:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	460b      	mov	r3, r1
 8001498:	6812      	ldr	r2, [r2, #0]
 800149a:	2101      	movs	r1, #1
 800149c:	f7ff f9fa 	bl	8000894 <write_data_spi>
	next_blank_page += PAGE_SIZE;
 80014a0:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <writePageSPI_W+0xa0>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80014a8:	4a07      	ldr	r2, [pc, #28]	; (80014c8 <writePageSPI_W+0xa0>)
 80014aa:	6013      	str	r3, [r2, #0]

	send_uart_string(huart, "Successful Page Written\r\n");
 80014ac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80014b0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80014b4:	4905      	ldr	r1, [pc, #20]	; (80014cc <writePageSPI_W+0xa4>)
 80014b6:	6818      	ldr	r0, [r3, #0]
 80014b8:	f000 fd47 	bl	8001f4a <send_uart_string>
}
 80014bc:	bf00      	nop
 80014be:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	2000030c 	.word	0x2000030c
 80014cc:	08006e84 	.word	0x08006e84

080014d0 <checkAccelWhoAmI>:

/***************************************************************************************************************
 * I2C Accelerometer Functions
 */
void checkAccelWhoAmI(I2C_HandleTypeDef* hi2c, UART_HandleTypeDef *huart) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
	uint8_t whoami = readAccel_whoami(hi2c);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff f83e 	bl	800055c <readAccel_whoami>
 80014e0:	4603      	mov	r3, r0
 80014e2:	73fb      	strb	r3, [r7, #15]
	send_uart_hex(huart, whoami);
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	4619      	mov	r1, r3
 80014e8:	6838      	ldr	r0, [r7, #0]
 80014ea:	f000 fd42 	bl	8001f72 <send_uart_hex>
}
 80014ee:	bf00      	nop
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <accelToUART>:

void accelToUART(UART_HandleTypeDef *huart) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 6; i++) {
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	e00a      	b.n	800151c <accelToUART+0x24>
		send_uart_hex(huart, accel_data[i]);
 8001506:	4a09      	ldr	r2, [pc, #36]	; (800152c <accelToUART+0x34>)
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4413      	add	r3, r2
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	4619      	mov	r1, r3
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 fd2e 	bl	8001f72 <send_uart_hex>
	for (int i = 0; i < 6; i++) {
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	3301      	adds	r3, #1
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2b05      	cmp	r3, #5
 8001520:	ddf1      	ble.n	8001506 <accelToUART+0xe>
	}
}
 8001522:	bf00      	nop
 8001524:	bf00      	nop
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	200002f4 	.word	0x200002f4

08001530 <readTempSensorID>:

/***************************************************************************************************************
 * I2C Temperature Sensor Functions
 */
void readTempSensorID(I2C_HandleTypeDef* hi2c, UART_HandleTypeDef *huart, uint8_t tempNo) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	4613      	mov	r3, r2
 800153c:	71fb      	strb	r3, [r7, #7]
	send_uart_hex(huart, readBME280_id_reg(hi2c, tempNo));
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	4619      	mov	r1, r3
 8001542:	68f8      	ldr	r0, [r7, #12]
 8001544:	f7ff f8b8 	bl	80006b8 <readBME280_id_reg>
 8001548:	4603      	mov	r3, r0
 800154a:	4619      	mov	r1, r3
 800154c:	68b8      	ldr	r0, [r7, #8]
 800154e:	f000 fd10 	bl	8001f72 <send_uart_hex>
}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <readTempCalibration>:

void readTempCalibration(I2C_HandleTypeDef* hi2c, UART_HandleTypeDef *huart, uint8_t tempNo) {
 800155a:	b580      	push	{r7, lr}
 800155c:	b090      	sub	sp, #64	; 0x40
 800155e:	af00      	add	r7, sp, #0
 8001560:	60f8      	str	r0, [r7, #12]
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	4613      	mov	r3, r2
 8001566:	71fb      	strb	r3, [r7, #7]
	uint8_t calibration1[25];
	uint8_t calibration2[7];
	readBME280_calib(hi2c, tempNo, calibration1, calibration2);
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	f107 021c 	add.w	r2, r7, #28
 8001570:	79f9      	ldrb	r1, [r7, #7]
 8001572:	68f8      	ldr	r0, [r7, #12]
 8001574:	f7ff f8ba 	bl	80006ec <readBME280_calib>

	for (int i = 0; i < 25; i++) {
 8001578:	2300      	movs	r3, #0
 800157a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800157c:	e00b      	b.n	8001596 <readTempCalibration+0x3c>
	  send_uart_hex(huart, calibration1[i]);
 800157e:	f107 021c 	add.w	r2, r7, #28
 8001582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001584:	4413      	add	r3, r2
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	4619      	mov	r1, r3
 800158a:	68b8      	ldr	r0, [r7, #8]
 800158c:	f000 fcf1 	bl	8001f72 <send_uart_hex>
	for (int i = 0; i < 25; i++) {
 8001590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001592:	3301      	adds	r3, #1
 8001594:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001598:	2b18      	cmp	r3, #24
 800159a:	ddf0      	ble.n	800157e <readTempCalibration+0x24>
	}

	for (int i = 0; i < 7; i++) {
 800159c:	2300      	movs	r3, #0
 800159e:	63bb      	str	r3, [r7, #56]	; 0x38
 80015a0:	e00b      	b.n	80015ba <readTempCalibration+0x60>
	  send_uart_hex(huart, calibration2[i]);
 80015a2:	f107 0214 	add.w	r2, r7, #20
 80015a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015a8:	4413      	add	r3, r2
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	4619      	mov	r1, r3
 80015ae:	68b8      	ldr	r0, [r7, #8]
 80015b0:	f000 fcdf 	bl	8001f72 <send_uart_hex>
	for (int i = 0; i < 7; i++) {
 80015b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015b6:	3301      	adds	r3, #1
 80015b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80015ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015bc:	2b06      	cmp	r3, #6
 80015be:	ddf0      	ble.n	80015a2 <readTempCalibration+0x48>
	}
}
 80015c0:	bf00      	nop
 80015c2:	bf00      	nop
 80015c4:	3740      	adds	r7, #64	; 0x40
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
	...

080015cc <readTempSensor>:

void readTempSensor(UART_HandleTypeDef *huart, uint8_t tempNo) {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	460b      	mov	r3, r1
 80015d6:	70fb      	strb	r3, [r7, #3]
	if (tempNo == 0) {
 80015d8:	78fb      	ldrb	r3, [r7, #3]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d111      	bne.n	8001602 <readTempSensor+0x36>
		for (int i = 0; i < 8; i++) {
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	e00a      	b.n	80015fa <readTempSensor+0x2e>
			send_uart_hex(huart, bme280_data_1[i]);
 80015e4:	4a13      	ldr	r2, [pc, #76]	; (8001634 <readTempSensor+0x68>)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4413      	add	r3, r2
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	4619      	mov	r1, r3
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 fcbf 	bl	8001f72 <send_uart_hex>
		for (int i = 0; i < 8; i++) {
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	3301      	adds	r3, #1
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2b07      	cmp	r3, #7
 80015fe:	ddf1      	ble.n	80015e4 <readTempSensor+0x18>
			send_uart_hex(huart, bme280_data_2[i]);
		}
	}


}
 8001600:	e013      	b.n	800162a <readTempSensor+0x5e>
	} else if (tempNo == 1) {
 8001602:	78fb      	ldrb	r3, [r7, #3]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d110      	bne.n	800162a <readTempSensor+0x5e>
		for (int i = 0; i < 8; i++) {
 8001608:	2300      	movs	r3, #0
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	e00a      	b.n	8001624 <readTempSensor+0x58>
			send_uart_hex(huart, bme280_data_2[i]);
 800160e:	4a0a      	ldr	r2, [pc, #40]	; (8001638 <readTempSensor+0x6c>)
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	4413      	add	r3, r2
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	4619      	mov	r1, r3
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f000 fcaa 	bl	8001f72 <send_uart_hex>
		for (int i = 0; i < 8; i++) {
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	3301      	adds	r3, #1
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	2b07      	cmp	r3, #7
 8001628:	ddf1      	ble.n	800160e <readTempSensor+0x42>
}
 800162a:	bf00      	nop
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	200002fc 	.word	0x200002fc
 8001638:	20000304 	.word	0x20000304

0800163c <readAllSensors>:

/***************************************************************************************************************
 * Process All Sensors
 */
void readAllSensors(I2C_HandleTypeDef* hi2c_accel, I2C_HandleTypeDef* hi2c_temp, RTC_HandleTypeDef* hrtc) {
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	; 0x28
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);		// Toggle LED
 8001648:	2180      	movs	r1, #128	; 0x80
 800164a:	4842      	ldr	r0, [pc, #264]	; (8001754 <readAllSensors+0x118>)
 800164c:	f001 f8ab 	bl	80027a6 <HAL_GPIO_TogglePin>

	// Read Accelerometer Data
	readAccelerometer(accel_data, hi2c_accel);
 8001650:	68f9      	ldr	r1, [r7, #12]
 8001652:	4841      	ldr	r0, [pc, #260]	; (8001758 <readAllSensors+0x11c>)
 8001654:	f7fe ff6e 	bl	8000534 <readAccelerometer>

	readTempHumPres(bme280_data_1, hi2c_temp, 0);
 8001658:	2200      	movs	r2, #0
 800165a:	68b9      	ldr	r1, [r7, #8]
 800165c:	483f      	ldr	r0, [pc, #252]	; (800175c <readAllSensors+0x120>)
 800165e:	f7fe ffdb 	bl	8000618 <readTempHumPres>
	//  readTempHumPres(bme280_data_2, hi2c_temp, 1);

	uint16_t time = getTimestampMilliseconds(hrtc);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f000 f89c 	bl	80017a0 <getTimestampMilliseconds>
 8001668:	4603      	mov	r3, r0
 800166a:	82fb      	strh	r3, [r7, #22]
	uint8_t array_ptr = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	// Store the time in the buffer if there is space
	if (byte_tracker < (PAGE_SIZE - READ_SIZE)) {
 8001672:	4b3b      	ldr	r3, [pc, #236]	; (8001760 <readAllSensors+0x124>)
 8001674:	881b      	ldrh	r3, [r3, #0]
 8001676:	2be7      	cmp	r3, #231	; 0xe7
 8001678:	d868      	bhi.n	800174c <readAllSensors+0x110>
		data_buffer[byte_tracker + 0] = (uint8_t) ((time >> 8) & 0xFF);
 800167a:	8afb      	ldrh	r3, [r7, #22]
 800167c:	0a1b      	lsrs	r3, r3, #8
 800167e:	b299      	uxth	r1, r3
 8001680:	4b37      	ldr	r3, [pc, #220]	; (8001760 <readAllSensors+0x124>)
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	461a      	mov	r2, r3
 8001686:	b2c9      	uxtb	r1, r1
 8001688:	4b36      	ldr	r3, [pc, #216]	; (8001764 <readAllSensors+0x128>)
 800168a:	5499      	strb	r1, [r3, r2]
		data_buffer[byte_tracker + 1] = (uint8_t) (time & 0xFF); // Least significant byte (LSB)
 800168c:	4b34      	ldr	r3, [pc, #208]	; (8001760 <readAllSensors+0x124>)
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	3301      	adds	r3, #1
 8001692:	8afa      	ldrh	r2, [r7, #22]
 8001694:	b2d1      	uxtb	r1, r2
 8001696:	4a33      	ldr	r2, [pc, #204]	; (8001764 <readAllSensors+0x128>)
 8001698:	54d1      	strb	r1, [r2, r3]

		array_ptr += 2;
 800169a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800169e:	3302      	adds	r3, #2
 80016a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for (int i = 0; i < 6; i++) {
 80016a4:	2300      	movs	r3, #0
 80016a6:	623b      	str	r3, [r7, #32]
 80016a8:	e013      	b.n	80016d2 <readAllSensors+0x96>
		  data_buffer[byte_tracker + array_ptr] = accel_data[i];
 80016aa:	4b2d      	ldr	r3, [pc, #180]	; (8001760 <readAllSensors+0x124>)
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	461a      	mov	r2, r3
 80016b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016b4:	4413      	add	r3, r2
 80016b6:	4928      	ldr	r1, [pc, #160]	; (8001758 <readAllSensors+0x11c>)
 80016b8:	6a3a      	ldr	r2, [r7, #32]
 80016ba:	440a      	add	r2, r1
 80016bc:	7811      	ldrb	r1, [r2, #0]
 80016be:	4a29      	ldr	r2, [pc, #164]	; (8001764 <readAllSensors+0x128>)
 80016c0:	54d1      	strb	r1, [r2, r3]
		  array_ptr += 1;
 80016c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016c6:	3301      	adds	r3, #1
 80016c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for (int i = 0; i < 6; i++) {
 80016cc:	6a3b      	ldr	r3, [r7, #32]
 80016ce:	3301      	adds	r3, #1
 80016d0:	623b      	str	r3, [r7, #32]
 80016d2:	6a3b      	ldr	r3, [r7, #32]
 80016d4:	2b05      	cmp	r3, #5
 80016d6:	dde8      	ble.n	80016aa <readAllSensors+0x6e>
		}

		for (int i = 0; i < 8; i++) {
 80016d8:	2300      	movs	r3, #0
 80016da:	61fb      	str	r3, [r7, #28]
 80016dc:	e013      	b.n	8001706 <readAllSensors+0xca>
		  data_buffer[byte_tracker + array_ptr] = bme280_data_1[i];
 80016de:	4b20      	ldr	r3, [pc, #128]	; (8001760 <readAllSensors+0x124>)
 80016e0:	881b      	ldrh	r3, [r3, #0]
 80016e2:	461a      	mov	r2, r3
 80016e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016e8:	4413      	add	r3, r2
 80016ea:	491c      	ldr	r1, [pc, #112]	; (800175c <readAllSensors+0x120>)
 80016ec:	69fa      	ldr	r2, [r7, #28]
 80016ee:	440a      	add	r2, r1
 80016f0:	7811      	ldrb	r1, [r2, #0]
 80016f2:	4a1c      	ldr	r2, [pc, #112]	; (8001764 <readAllSensors+0x128>)
 80016f4:	54d1      	strb	r1, [r2, r3]
		  array_ptr += 1;
 80016f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016fa:	3301      	adds	r3, #1
 80016fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for (int i = 0; i < 8; i++) {
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	3301      	adds	r3, #1
 8001704:	61fb      	str	r3, [r7, #28]
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	2b07      	cmp	r3, #7
 800170a:	dde8      	ble.n	80016de <readAllSensors+0xa2>
		}

		for (int i = 0; i < 8; i++) {
 800170c:	2300      	movs	r3, #0
 800170e:	61bb      	str	r3, [r7, #24]
 8001710:	e013      	b.n	800173a <readAllSensors+0xfe>
		  data_buffer[byte_tracker + array_ptr] = bme280_data_2[i];
 8001712:	4b13      	ldr	r3, [pc, #76]	; (8001760 <readAllSensors+0x124>)
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	461a      	mov	r2, r3
 8001718:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800171c:	4413      	add	r3, r2
 800171e:	4912      	ldr	r1, [pc, #72]	; (8001768 <readAllSensors+0x12c>)
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	440a      	add	r2, r1
 8001724:	7811      	ldrb	r1, [r2, #0]
 8001726:	4a0f      	ldr	r2, [pc, #60]	; (8001764 <readAllSensors+0x128>)
 8001728:	54d1      	strb	r1, [r2, r3]
		  array_ptr += 1;
 800172a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800172e:	3301      	adds	r3, #1
 8001730:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for (int i = 0; i < 8; i++) {
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	3301      	adds	r3, #1
 8001738:	61bb      	str	r3, [r7, #24]
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	2b07      	cmp	r3, #7
 800173e:	dde8      	ble.n	8001712 <readAllSensors+0xd6>
		}

		byte_tracker = byte_tracker + 24;
 8001740:	4b07      	ldr	r3, [pc, #28]	; (8001760 <readAllSensors+0x124>)
 8001742:	881b      	ldrh	r3, [r3, #0]
 8001744:	3318      	adds	r3, #24
 8001746:	b29a      	uxth	r2, r3
 8001748:	4b05      	ldr	r3, [pc, #20]	; (8001760 <readAllSensors+0x124>)
 800174a:	801a      	strh	r2, [r3, #0]
	}
}
 800174c:	bf00      	nop
 800174e:	3728      	adds	r7, #40	; 0x28
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40020400 	.word	0x40020400
 8001758:	200002f4 	.word	0x200002f4
 800175c:	200002fc 	.word	0x200002fc
 8001760:	20000310 	.word	0x20000310
 8001764:	200001f4 	.word	0x200001f4
 8001768:	20000304 	.word	0x20000304

0800176c <initialise_rtc_default>:
    .Month = RTC_MONTH_JANUARY, // Set default month (e.g., January)
    .Date = 1, // Set default day of the month
    .Year = 24 // Set default year (e.g., 2021)
};

void initialise_rtc_default(RTC_HandleTypeDef* hrtc) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	// Reset RTC on boot
	HAL_RTC_MspInit(hrtc); // Initialize RTC hardware
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 f9db 	bl	8001b30 <HAL_RTC_MspInit>
	HAL_RTC_SetTime(hrtc, &defaultTime, RTC_FORMAT_BIN); // Set default time
 800177a:	2200      	movs	r2, #0
 800177c:	4906      	ldr	r1, [pc, #24]	; (8001798 <initialise_rtc_default+0x2c>)
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f002 ff3d 	bl	80045fe <HAL_RTC_SetTime>
	HAL_RTC_SetDate(hrtc, &defaultDate, RTC_FORMAT_BIN); // Set default date
 8001784:	2200      	movs	r2, #0
 8001786:	4905      	ldr	r1, [pc, #20]	; (800179c <initialise_rtc_default+0x30>)
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f003 f830 	bl	80047ee <HAL_RTC_SetDate>
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000314 	.word	0x20000314
 800179c:	20000014 	.word	0x20000014

080017a0 <getTimestampMilliseconds>:

uint32_t getTimestampMilliseconds(RTC_HandleTypeDef* hrtc) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08c      	sub	sp, #48	; 0x30
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
    RTC_TimeTypeDef rtcTime;
    RTC_DateTypeDef rtcDate;

    // Read RTC time and date
    HAL_RTC_GetTime(hrtc, &rtcTime, RTC_FORMAT_BIN);
 80017a8:	f107 0310 	add.w	r3, r7, #16
 80017ac:	2200      	movs	r2, #0
 80017ae:	4619      	mov	r1, r3
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f002 ffbe 	bl	8004732 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(hrtc, &rtcDate, RTC_FORMAT_BIN);
 80017b6:	f107 030c 	add.w	r3, r7, #12
 80017ba:	2200      	movs	r2, #0
 80017bc:	4619      	mov	r1, r3
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f003 f899 	bl	80048f6 <HAL_RTC_GetDate>

    // Calculate timestamp in milliseconds
    uint32_t timestampSeconds = rtcTime.Seconds + rtcTime.Minutes * 60 + rtcTime.Hours * 3600;
 80017c4:	7cbb      	ldrb	r3, [r7, #18]
 80017c6:	4619      	mov	r1, r3
 80017c8:	7c7b      	ldrb	r3, [r7, #17]
 80017ca:	461a      	mov	r2, r3
 80017cc:	4613      	mov	r3, r2
 80017ce:	011b      	lsls	r3, r3, #4
 80017d0:	1a9b      	subs	r3, r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	18ca      	adds	r2, r1, r3
 80017d6:	7c3b      	ldrb	r3, [r7, #16]
 80017d8:	4619      	mov	r1, r3
 80017da:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80017de:	fb01 f303 	mul.w	r3, r1, r3
 80017e2:	4413      	add	r3, r2
 80017e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t timestampMilliseconds = timestampSeconds * 1000;
 80017e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017ec:	fb02 f303 	mul.w	r3, r2, r3
 80017f0:	62bb      	str	r3, [r7, #40]	; 0x28
    float subsecondsFraction = (float)(rtcTime.SecondFraction - rtcTime.SubSeconds) / (rtcTime.SecondFraction + 1);
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	ee07 3a90 	vmov	s15, r3
 80017fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	3301      	adds	r3, #1
 8001804:	ee07 3a90 	vmov	s15, r3
 8001808:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800180c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001810:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    timestampMilliseconds += subsecondsFraction * 1000;
 8001814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001816:	ee07 3a90 	vmov	s15, r3
 800181a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800181e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001822:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001844 <getTimestampMilliseconds+0xa4>
 8001826:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800182a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800182e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001832:	ee17 3a90 	vmov	r3, s15
 8001836:	62bb      	str	r3, [r7, #40]	; 0x28

    return timestampMilliseconds;
 8001838:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800183a:	4618      	mov	r0, r3
 800183c:	3730      	adds	r7, #48	; 0x30
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	447a0000 	.word	0x447a0000

08001848 <spi_sendOp_readByte>:
#ifndef SRC_SPI_DRIVER_C_
#define SRC_SPI_DRIVER_C_

#include "spi_driver.h"

uint8_t spi_sendOp_readByte(uint8_t* opcode, SPI_HandleTypeDef *hspi, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
 8001854:	807b      	strh	r3, [r7, #2]
	uint8_t ret_data = 0x00;
 8001856:	2300      	movs	r3, #0
 8001858:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);	// Set the chip select pin to low to initiate SPI comms
 800185a:	887b      	ldrh	r3, [r7, #2]
 800185c:	2200      	movs	r2, #0
 800185e:	4619      	mov	r1, r3
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 ff87 	bl	8002774 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, opcode, 1, 100);	// Write the write enable value to the Flash to initial reading
 8001866:	2364      	movs	r3, #100	; 0x64
 8001868:	2201      	movs	r2, #1
 800186a:	68f9      	ldr	r1, [r7, #12]
 800186c:	68b8      	ldr	r0, [r7, #8]
 800186e:	f003 f9d8 	bl	8004c22 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, &ret_data, 1, 100);
 8001872:	f107 0117 	add.w	r1, r7, #23
 8001876:	2364      	movs	r3, #100	; 0x64
 8001878:	2201      	movs	r2, #1
 800187a:	68b8      	ldr	r0, [r7, #8]
 800187c:	f003 fb14 	bl	8004ea8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);
 8001880:	887b      	ldrh	r3, [r7, #2]
 8001882:	2201      	movs	r2, #1
 8001884:	4619      	mov	r1, r3
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f000 ff74 	bl	8002774 <HAL_GPIO_WritePin>

	return ret_data;
 800188c:	7dfb      	ldrb	r3, [r7, #23]
}
 800188e:	4618      	mov	r0, r3
 8001890:	3718      	adds	r7, #24
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <perform_operation>:

void perform_operation(uint8_t* opcode, SPI_HandleTypeDef *hspi, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 8001896:	b580      	push	{r7, lr}
 8001898:	b084      	sub	sp, #16
 800189a:	af00      	add	r7, sp, #0
 800189c:	60f8      	str	r0, [r7, #12]
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
 80018a2:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);	// Set the chip select pin to low to initiate SPI comms
 80018a4:	887b      	ldrh	r3, [r7, #2]
 80018a6:	2200      	movs	r2, #0
 80018a8:	4619      	mov	r1, r3
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f000 ff62 	bl	8002774 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, opcode, 1, 100);				// Write the opcode value
 80018b0:	2364      	movs	r3, #100	; 0x64
 80018b2:	2201      	movs	r2, #1
 80018b4:	68f9      	ldr	r1, [r7, #12]
 80018b6:	68b8      	ldr	r0, [r7, #8]
 80018b8:	f003 f9b3 	bl	8004c22 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);
 80018bc:	887b      	ldrh	r3, [r7, #2]
 80018be:	2201      	movs	r2, #1
 80018c0:	4619      	mov	r1, r3
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 ff56 	bl	8002774 <HAL_GPIO_WritePin>
}
 80018c8:	bf00      	nop
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <spi_read_data>:


void spi_read_data(uint8_t* opcode, uint16_t data_size, uint8_t data_read[data_size], SPI_HandleTypeDef *hspi, uint32_t addr, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	607a      	str	r2, [r7, #4]
 80018da:	603b      	str	r3, [r7, #0]
 80018dc:	460b      	mov	r3, r1
 80018de:	817b      	strh	r3, [r7, #10]
	// Split the 24 bit address into three 8 bit ints
	uint8_t addrL = addr & 0xFF;  // Get the low byte
 80018e0:	6a3b      	ldr	r3, [r7, #32]
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	75fb      	strb	r3, [r7, #23]
	uint8_t addrM = (addr >> 8) & 0xFF;  // Get the middle byte
 80018e6:	6a3b      	ldr	r3, [r7, #32]
 80018e8:	0a1b      	lsrs	r3, r3, #8
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	75bb      	strb	r3, [r7, #22]
	uint8_t addrH = (addr >> 16) & 0xFF;  // Get the high byte
 80018ee:	6a3b      	ldr	r3, [r7, #32]
 80018f0:	0c1b      	lsrs	r3, r3, #16
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	757b      	strb	r3, [r7, #21]

	// Read the data denoted by the given address
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);
 80018f6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80018f8:	2200      	movs	r2, #0
 80018fa:	4619      	mov	r1, r3
 80018fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80018fe:	f000 ff39 	bl	8002774 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, opcode, 1, 100);	// Write the read enable value
 8001902:	2364      	movs	r3, #100	; 0x64
 8001904:	2201      	movs	r2, #1
 8001906:	68f9      	ldr	r1, [r7, #12]
 8001908:	6838      	ldr	r0, [r7, #0]
 800190a:	f003 f98a 	bl	8004c22 <HAL_SPI_Transmit>

	// Transmit the 24 bit address of the page to initialise read from
	HAL_SPI_Transmit(hspi, &addrH, 1, 100);
 800190e:	f107 0115 	add.w	r1, r7, #21
 8001912:	2364      	movs	r3, #100	; 0x64
 8001914:	2201      	movs	r2, #1
 8001916:	6838      	ldr	r0, [r7, #0]
 8001918:	f003 f983 	bl	8004c22 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &addrM, 1, 100);
 800191c:	f107 0116 	add.w	r1, r7, #22
 8001920:	2364      	movs	r3, #100	; 0x64
 8001922:	2201      	movs	r2, #1
 8001924:	6838      	ldr	r0, [r7, #0]
 8001926:	f003 f97c 	bl	8004c22 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &addrL, 1, 100);
 800192a:	f107 0117 	add.w	r1, r7, #23
 800192e:	2364      	movs	r3, #100	; 0x64
 8001930:	2201      	movs	r2, #1
 8001932:	6838      	ldr	r0, [r7, #0]
 8001934:	f003 f975 	bl	8004c22 <HAL_SPI_Transmit>

	HAL_SPI_Receive(hspi, data_read, 4, 100);
 8001938:	2364      	movs	r3, #100	; 0x64
 800193a:	2204      	movs	r2, #4
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	6838      	ldr	r0, [r7, #0]
 8001940:	f003 fab2 	bl	8004ea8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);
 8001944:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001946:	2201      	movs	r2, #1
 8001948:	4619      	mov	r1, r3
 800194a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800194c:	f000 ff12 	bl	8002774 <HAL_GPIO_WritePin>
}
 8001950:	bf00      	nop
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <spi_write_data>:

void spi_write_data(uint8_t* opcode, uint16_t data_size, uint8_t data_write[data_size], SPI_HandleTypeDef *hspi, uint32_t addr, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	607a      	str	r2, [r7, #4]
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	460b      	mov	r3, r1
 8001966:	817b      	strh	r3, [r7, #10]
	// Split the 24 bit address into three 8 bit ints
	uint8_t addrL = addr & 0xFF;  			// Get the low byte
 8001968:	6a3b      	ldr	r3, [r7, #32]
 800196a:	b2db      	uxtb	r3, r3
 800196c:	75fb      	strb	r3, [r7, #23]
	uint8_t addrM = (addr >> 8) & 0xFF;  	// Get the middle byte
 800196e:	6a3b      	ldr	r3, [r7, #32]
 8001970:	0a1b      	lsrs	r3, r3, #8
 8001972:	b2db      	uxtb	r3, r3
 8001974:	75bb      	strb	r3, [r7, #22]
	uint8_t addrH = (addr >> 16) & 0xFF;  	// Get the high byte
 8001976:	6a3b      	ldr	r3, [r7, #32]
 8001978:	0c1b      	lsrs	r3, r3, #16
 800197a:	b2db      	uxtb	r3, r3
 800197c:	757b      	strb	r3, [r7, #21]

	// Send the PageWrite command
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);	// Set the chip select pin to low to initiate SPI comms
 800197e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001980:	2200      	movs	r2, #0
 8001982:	4619      	mov	r1, r3
 8001984:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001986:	f000 fef5 	bl	8002774 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, opcode, 1, 100);					// Write the write enable value to the Flash to initial writing
 800198a:	2364      	movs	r3, #100	; 0x64
 800198c:	2201      	movs	r2, #1
 800198e:	68f9      	ldr	r1, [r7, #12]
 8001990:	6838      	ldr	r0, [r7, #0]
 8001992:	f003 f946 	bl	8004c22 <HAL_SPI_Transmit>

	// Transmit the 24 bit address of the page to write to
	HAL_SPI_Transmit(hspi, &addrH, 1, 100);
 8001996:	f107 0115 	add.w	r1, r7, #21
 800199a:	2364      	movs	r3, #100	; 0x64
 800199c:	2201      	movs	r2, #1
 800199e:	6838      	ldr	r0, [r7, #0]
 80019a0:	f003 f93f 	bl	8004c22 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &addrM, 1, 100);
 80019a4:	f107 0116 	add.w	r1, r7, #22
 80019a8:	2364      	movs	r3, #100	; 0x64
 80019aa:	2201      	movs	r2, #1
 80019ac:	6838      	ldr	r0, [r7, #0]
 80019ae:	f003 f938 	bl	8004c22 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &addrL, 1, 100);
 80019b2:	f107 0117 	add.w	r1, r7, #23
 80019b6:	2364      	movs	r3, #100	; 0x64
 80019b8:	2201      	movs	r2, #1
 80019ba:	6838      	ldr	r0, [r7, #0]
 80019bc:	f003 f931 	bl	8004c22 <HAL_SPI_Transmit>

	// Transmit the data to be written
	HAL_SPI_Transmit(hspi, data_write, data_size, 1000);
 80019c0:	897a      	ldrh	r2, [r7, #10]
 80019c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	6838      	ldr	r0, [r7, #0]
 80019ca:	f003 f92a 	bl	8004c22 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);	// Set the chip select pin to high to remove the Flash from the SPI bus
 80019ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80019d0:	2201      	movs	r2, #1
 80019d2:	4619      	mov	r1, r3
 80019d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80019d6:	f000 fecd 	bl	8002774 <HAL_GPIO_WritePin>
}
 80019da:	bf00      	nop
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	607b      	str	r3, [r7, #4]
 80019ee:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <HAL_MspInit+0x4c>)
 80019f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f2:	4a0f      	ldr	r2, [pc, #60]	; (8001a30 <HAL_MspInit+0x4c>)
 80019f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f8:	6453      	str	r3, [r2, #68]	; 0x44
 80019fa:	4b0d      	ldr	r3, [pc, #52]	; (8001a30 <HAL_MspInit+0x4c>)
 80019fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	603b      	str	r3, [r7, #0]
 8001a0a:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <HAL_MspInit+0x4c>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	4a08      	ldr	r2, [pc, #32]	; (8001a30 <HAL_MspInit+0x4c>)
 8001a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a14:	6413      	str	r3, [r2, #64]	; 0x40
 8001a16:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <HAL_MspInit+0x4c>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1e:	603b      	str	r3, [r7, #0]
 8001a20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	40023800 	.word	0x40023800

08001a34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08c      	sub	sp, #48	; 0x30
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3c:	f107 031c 	add.w	r3, r7, #28
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a33      	ldr	r2, [pc, #204]	; (8001b20 <HAL_I2C_MspInit+0xec>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d12d      	bne.n	8001ab2 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	61bb      	str	r3, [r7, #24]
 8001a5a:	4b32      	ldr	r3, [pc, #200]	; (8001b24 <HAL_I2C_MspInit+0xf0>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a31      	ldr	r2, [pc, #196]	; (8001b24 <HAL_I2C_MspInit+0xf0>)
 8001a60:	f043 0302 	orr.w	r3, r3, #2
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b2f      	ldr	r3, [pc, #188]	; (8001b24 <HAL_I2C_MspInit+0xf0>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	61bb      	str	r3, [r7, #24]
 8001a70:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a78:	2312      	movs	r3, #18
 8001a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a80:	2303      	movs	r3, #3
 8001a82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a84:	2304      	movs	r3, #4
 8001a86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a88:	f107 031c 	add.w	r3, r7, #28
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4826      	ldr	r0, [pc, #152]	; (8001b28 <HAL_I2C_MspInit+0xf4>)
 8001a90:	f000 fcc4 	bl	800241c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]
 8001a98:	4b22      	ldr	r3, [pc, #136]	; (8001b24 <HAL_I2C_MspInit+0xf0>)
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9c:	4a21      	ldr	r2, [pc, #132]	; (8001b24 <HAL_I2C_MspInit+0xf0>)
 8001a9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa4:	4b1f      	ldr	r3, [pc, #124]	; (8001b24 <HAL_I2C_MspInit+0xf0>)
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001ab0:	e031      	b.n	8001b16 <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a1d      	ldr	r2, [pc, #116]	; (8001b2c <HAL_I2C_MspInit+0xf8>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d12c      	bne.n	8001b16 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001abc:	2300      	movs	r3, #0
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	4b18      	ldr	r3, [pc, #96]	; (8001b24 <HAL_I2C_MspInit+0xf0>)
 8001ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac4:	4a17      	ldr	r2, [pc, #92]	; (8001b24 <HAL_I2C_MspInit+0xf0>)
 8001ac6:	f043 0302 	orr.w	r3, r3, #2
 8001aca:	6313      	str	r3, [r2, #48]	; 0x30
 8001acc:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <HAL_I2C_MspInit+0xf0>)
 8001ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ad8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ade:	2312      	movs	r3, #18
 8001ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001aea:	2304      	movs	r3, #4
 8001aec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aee:	f107 031c 	add.w	r3, r7, #28
 8001af2:	4619      	mov	r1, r3
 8001af4:	480c      	ldr	r0, [pc, #48]	; (8001b28 <HAL_I2C_MspInit+0xf4>)
 8001af6:	f000 fc91 	bl	800241c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <HAL_I2C_MspInit+0xf0>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	4a08      	ldr	r2, [pc, #32]	; (8001b24 <HAL_I2C_MspInit+0xf0>)
 8001b04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b08:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0a:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_I2C_MspInit+0xf0>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
}
 8001b16:	bf00      	nop
 8001b18:	3730      	adds	r7, #48	; 0x30
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40005400 	.word	0x40005400
 8001b24:	40023800 	.word	0x40023800
 8001b28:	40020400 	.word	0x40020400
 8001b2c:	40005800 	.word	0x40005800

08001b30 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08e      	sub	sp, #56	; 0x38
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b38:	f107 0308 	add.w	r3, r7, #8
 8001b3c:	2230      	movs	r2, #48	; 0x30
 8001b3e:	2100      	movs	r1, #0
 8001b40:	4618      	mov	r0, r3
 8001b42:	f005 f92f 	bl	8006da4 <memset>
  if(hrtc->Instance==RTC)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a0c      	ldr	r2, [pc, #48]	; (8001b7c <HAL_RTC_MspInit+0x4c>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d111      	bne.n	8001b74 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001b50:	2320      	movs	r3, #32
 8001b52:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001b54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b58:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b5a:	f107 0308 	add.w	r3, r7, #8
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f002 fb0a 	bl	8004178 <HAL_RCCEx_PeriphCLKConfig>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001b6a:	f7ff fb83 	bl	8001274 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001b6e:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <HAL_RTC_MspInit+0x50>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001b74:	bf00      	nop
 8001b76:	3738      	adds	r7, #56	; 0x38
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40002800 	.word	0x40002800
 8001b80:	42470e3c 	.word	0x42470e3c

08001b84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08a      	sub	sp, #40	; 0x28
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a19      	ldr	r2, [pc, #100]	; (8001c08 <HAL_SPI_MspInit+0x84>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d12b      	bne.n	8001bfe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	613b      	str	r3, [r7, #16]
 8001baa:	4b18      	ldr	r3, [pc, #96]	; (8001c0c <HAL_SPI_MspInit+0x88>)
 8001bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bae:	4a17      	ldr	r2, [pc, #92]	; (8001c0c <HAL_SPI_MspInit+0x88>)
 8001bb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bb6:	4b15      	ldr	r3, [pc, #84]	; (8001c0c <HAL_SPI_MspInit+0x88>)
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bbe:	613b      	str	r3, [r7, #16]
 8001bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <HAL_SPI_MspInit+0x88>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	4a10      	ldr	r2, [pc, #64]	; (8001c0c <HAL_SPI_MspInit+0x88>)
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd2:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <HAL_SPI_MspInit+0x88>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001bde:	23e0      	movs	r3, #224	; 0xe0
 8001be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be2:	2302      	movs	r3, #2
 8001be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bea:	2303      	movs	r3, #3
 8001bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bee:	2305      	movs	r3, #5
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf2:	f107 0314 	add.w	r3, r7, #20
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4805      	ldr	r0, [pc, #20]	; (8001c10 <HAL_SPI_MspInit+0x8c>)
 8001bfa:	f000 fc0f 	bl	800241c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001bfe:	bf00      	nop
 8001c00:	3728      	adds	r7, #40	; 0x28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40013000 	.word	0x40013000
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40020000 	.word	0x40020000

08001c14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a0e      	ldr	r2, [pc, #56]	; (8001c5c <HAL_TIM_Base_MspInit+0x48>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d115      	bne.n	8001c52 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	4b0d      	ldr	r3, [pc, #52]	; (8001c60 <HAL_TIM_Base_MspInit+0x4c>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	4a0c      	ldr	r2, [pc, #48]	; (8001c60 <HAL_TIM_Base_MspInit+0x4c>)
 8001c30:	f043 0310 	orr.w	r3, r3, #16
 8001c34:	6413      	str	r3, [r2, #64]	; 0x40
 8001c36:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <HAL_TIM_Base_MspInit+0x4c>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	f003 0310 	and.w	r3, r3, #16
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2100      	movs	r1, #0
 8001c46:	2036      	movs	r0, #54	; 0x36
 8001c48:	f000 fb1f 	bl	800228a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c4c:	2036      	movs	r0, #54	; 0x36
 8001c4e:	f000 fb38 	bl	80022c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001c52:	bf00      	nop
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40001000 	.word	0x40001000
 8001c60:	40023800 	.word	0x40023800

08001c64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08a      	sub	sp, #40	; 0x28
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a1d      	ldr	r2, [pc, #116]	; (8001cf8 <HAL_UART_MspInit+0x94>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d133      	bne.n	8001cee <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	4b1c      	ldr	r3, [pc, #112]	; (8001cfc <HAL_UART_MspInit+0x98>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	4a1b      	ldr	r2, [pc, #108]	; (8001cfc <HAL_UART_MspInit+0x98>)
 8001c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c94:	6413      	str	r3, [r2, #64]	; 0x40
 8001c96:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <HAL_UART_MspInit+0x98>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <HAL_UART_MspInit+0x98>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	4a14      	ldr	r2, [pc, #80]	; (8001cfc <HAL_UART_MspInit+0x98>)
 8001cac:	f043 0308 	orr.w	r3, r3, #8
 8001cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb2:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <HAL_UART_MspInit+0x98>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	f003 0308 	and.w	r3, r3, #8
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001cbe:	2360      	movs	r3, #96	; 0x60
 8001cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cce:	2307      	movs	r3, #7
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cd2:	f107 0314 	add.w	r3, r7, #20
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4809      	ldr	r0, [pc, #36]	; (8001d00 <HAL_UART_MspInit+0x9c>)
 8001cda:	f000 fb9f 	bl	800241c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	2026      	movs	r0, #38	; 0x26
 8001ce4:	f000 fad1 	bl	800228a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ce8:	2026      	movs	r0, #38	; 0x26
 8001cea:	f000 faea 	bl	80022c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cee:	bf00      	nop
 8001cf0:	3728      	adds	r7, #40	; 0x28
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40004400 	.word	0x40004400
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	40020c00 	.word	0x40020c00

08001d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d08:	e7fe      	b.n	8001d08 <NMI_Handler+0x4>

08001d0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d0e:	e7fe      	b.n	8001d0e <HardFault_Handler+0x4>

08001d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d14:	e7fe      	b.n	8001d14 <MemManage_Handler+0x4>

08001d16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d1a:	e7fe      	b.n	8001d1a <BusFault_Handler+0x4>

08001d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d20:	e7fe      	b.n	8001d20 <UsageFault_Handler+0x4>

08001d22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d34:	bf00      	nop
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d50:	f000 f9a0 	bl	8002094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d54:	bf00      	nop
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d5c:	4802      	ldr	r0, [pc, #8]	; (8001d68 <USART2_IRQHandler+0x10>)
 8001d5e:	f004 f8cb 	bl	8005ef8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	200001a8 	.word	0x200001a8

08001d6c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d70:	4804      	ldr	r0, [pc, #16]	; (8001d84 <TIM6_DAC_IRQHandler+0x18>)
 8001d72:	f003 fd63 	bl	800583c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  readAllSensors(&hi2c1, &hi2c2, &hrtc);
 8001d76:	4a04      	ldr	r2, [pc, #16]	; (8001d88 <TIM6_DAC_IRQHandler+0x1c>)
 8001d78:	4904      	ldr	r1, [pc, #16]	; (8001d8c <TIM6_DAC_IRQHandler+0x20>)
 8001d7a:	4805      	ldr	r0, [pc, #20]	; (8001d90 <TIM6_DAC_IRQHandler+0x24>)
 8001d7c:	f7ff fc5e 	bl	800163c <readAllSensors>
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d80:	bf00      	nop
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20000160 	.word	0x20000160
 8001d88:	200000e8 	.word	0x200000e8
 8001d8c:	20000094 	.word	0x20000094
 8001d90:	20000040 	.word	0x20000040

08001d94 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
	// Send Heartbeat to UART (data_rx[0] = "h")
	if (UARTRxData[0] == 0x68) {
 8001d9c:	4b47      	ldr	r3, [pc, #284]	; (8001ebc <HAL_UART_RxCpltCallback+0x128>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b68      	cmp	r3, #104	; 0x68
 8001da2:	d103      	bne.n	8001dac <HAL_UART_RxCpltCallback+0x18>
		heartbeatUART(huart);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f7ff fa6b 	bl	8001280 <heartbeatUART>
 8001daa:	e07e      	b.n	8001eaa <HAL_UART_RxCpltCallback+0x116>
	}

	// Erase specified flash chip (data_rx[0]  = "e")
	else if (UARTRxData[0] == 0x65) {
 8001dac:	4b43      	ldr	r3, [pc, #268]	; (8001ebc <HAL_UART_RxCpltCallback+0x128>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b65      	cmp	r3, #101	; 0x65
 8001db2:	d10b      	bne.n	8001dcc <HAL_UART_RxCpltCallback+0x38>
		eraseFlashSPI(&hspi1, huart, decodeASCII(UARTRxData[1]));
 8001db4:	4b41      	ldr	r3, [pc, #260]	; (8001ebc <HAL_UART_RxCpltCallback+0x128>)
 8001db6:	785b      	ldrb	r3, [r3, #1]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f000 f889 	bl	8001ed0 <decodeASCII>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	483e      	ldr	r0, [pc, #248]	; (8001ec0 <HAL_UART_RxCpltCallback+0x12c>)
 8001dc6:	f7ff fa69 	bl	800129c <eraseFlashSPI>
 8001dca:	e06e      	b.n	8001eaa <HAL_UART_RxCpltCallback+0x116>
	}

	// Read data from specified flash chip (data_rx[0] = "r")
	else if (UARTRxData[0] == 0x72) {
 8001dcc:	4b3b      	ldr	r3, [pc, #236]	; (8001ebc <HAL_UART_RxCpltCallback+0x128>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b72      	cmp	r3, #114	; 0x72
 8001dd2:	d10b      	bne.n	8001dec <HAL_UART_RxCpltCallback+0x58>
		readFlashToUART(&hspi1, huart, decodeASCII(UARTRxData[1]));
 8001dd4:	4b39      	ldr	r3, [pc, #228]	; (8001ebc <HAL_UART_RxCpltCallback+0x128>)
 8001dd6:	785b      	ldrb	r3, [r3, #1]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f000 f879 	bl	8001ed0 <decodeASCII>
 8001dde:	4603      	mov	r3, r0
 8001de0:	461a      	mov	r2, r3
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	4836      	ldr	r0, [pc, #216]	; (8001ec0 <HAL_UART_RxCpltCallback+0x12c>)
 8001de6:	f7ff fa99 	bl	800131c <readFlashToUART>
 8001dea:	e05e      	b.n	8001eaa <HAL_UART_RxCpltCallback+0x116>
	}

	// Read Manufacturer over SPI (data_rx[0] = "m")
	else if (UARTRxData[0] == 0x6d) {
 8001dec:	4b33      	ldr	r3, [pc, #204]	; (8001ebc <HAL_UART_RxCpltCallback+0x128>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2b6d      	cmp	r3, #109	; 0x6d
 8001df2:	d10b      	bne.n	8001e0c <HAL_UART_RxCpltCallback+0x78>
		readFlashManuSPI(&hspi1, huart, decodeASCII(UARTRxData[1]));
 8001df4:	4b31      	ldr	r3, [pc, #196]	; (8001ebc <HAL_UART_RxCpltCallback+0x128>)
 8001df6:	785b      	ldrb	r3, [r3, #1]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f000 f869 	bl	8001ed0 <decodeASCII>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	461a      	mov	r2, r3
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	482e      	ldr	r0, [pc, #184]	; (8001ec0 <HAL_UART_RxCpltCallback+0x12c>)
 8001e06:	f7ff faf1 	bl	80013ec <readFlashManuSPI>
 8001e0a:	e04e      	b.n	8001eaa <HAL_UART_RxCpltCallback+0x116>
	}

	// Write a page over SPI (data_rx[0] = "w")
	else if (UARTRxData[0] == 0x77) {
 8001e0c:	4b2b      	ldr	r3, [pc, #172]	; (8001ebc <HAL_UART_RxCpltCallback+0x128>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b77      	cmp	r3, #119	; 0x77
 8001e12:	d10b      	bne.n	8001e2c <HAL_UART_RxCpltCallback+0x98>
		writePageSPI_W(&hspi1, huart, decodeASCII(UARTRxData[1]));
 8001e14:	4b29      	ldr	r3, [pc, #164]	; (8001ebc <HAL_UART_RxCpltCallback+0x128>)
 8001e16:	785b      	ldrb	r3, [r3, #1]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f000 f859 	bl	8001ed0 <decodeASCII>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	461a      	mov	r2, r3
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	4826      	ldr	r0, [pc, #152]	; (8001ec0 <HAL_UART_RxCpltCallback+0x12c>)
 8001e26:	f7ff faff 	bl	8001428 <writePageSPI_W>
 8001e2a:	e03e      	b.n	8001eaa <HAL_UART_RxCpltCallback+0x116>
	}

	// Read Accelerometer WhoAmI (data_rx[0] = "c")
	else if (UARTRxData[0] == 0x63) {
 8001e2c:	4b23      	ldr	r3, [pc, #140]	; (8001ebc <HAL_UART_RxCpltCallback+0x128>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b63      	cmp	r3, #99	; 0x63
 8001e32:	d104      	bne.n	8001e3e <HAL_UART_RxCpltCallback+0xaa>
		checkAccelWhoAmI(&hi2c1, huart);
 8001e34:	6879      	ldr	r1, [r7, #4]
 8001e36:	4823      	ldr	r0, [pc, #140]	; (8001ec4 <HAL_UART_RxCpltCallback+0x130>)
 8001e38:	f7ff fb4a 	bl	80014d0 <checkAccelWhoAmI>
 8001e3c:	e035      	b.n	8001eaa <HAL_UART_RxCpltCallback+0x116>
	}

	// Read the accelerometer and print to the UART[0] (data_rx [0] = "a")
	else if (UARTRxData[0] == 0x61) {
 8001e3e:	4b1f      	ldr	r3, [pc, #124]	; (8001ebc <HAL_UART_RxCpltCallback+0x128>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b61      	cmp	r3, #97	; 0x61
 8001e44:	d103      	bne.n	8001e4e <HAL_UART_RxCpltCallback+0xba>
		accelToUART(huart);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7ff fb56 	bl	80014f8 <accelToUART>
 8001e4c:	e02d      	b.n	8001eaa <HAL_UART_RxCpltCallback+0x116>
	}

	// Read the temp sensor ID and print to the UART[0] (data_rx [0]= "b")
	else if (UARTRxData[0] == 0x62) {
 8001e4e:	4b1b      	ldr	r3, [pc, #108]	; (8001ebc <HAL_UART_RxCpltCallback+0x128>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b62      	cmp	r3, #98	; 0x62
 8001e54:	d10b      	bne.n	8001e6e <HAL_UART_RxCpltCallback+0xda>
		readTempSensorID(&hi2c2, huart, decodeASCII(UARTRxData[1]));
 8001e56:	4b19      	ldr	r3, [pc, #100]	; (8001ebc <HAL_UART_RxCpltCallback+0x128>)
 8001e58:	785b      	ldrb	r3, [r3, #1]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 f838 	bl	8001ed0 <decodeASCII>
 8001e60:	4603      	mov	r3, r0
 8001e62:	461a      	mov	r2, r3
 8001e64:	6879      	ldr	r1, [r7, #4]
 8001e66:	4818      	ldr	r0, [pc, #96]	; (8001ec8 <HAL_UART_RxCpltCallback+0x134>)
 8001e68:	f7ff fb62 	bl	8001530 <readTempSensorID>
 8001e6c:	e01d      	b.n	8001eaa <HAL_UART_RxCpltCallback+0x116>
	}

	// Read the temp sensor calibration registers and print to the UART (data_rx[0] = "p")
	else if (UARTRxData[0] == 0x70) {
 8001e6e:	4b13      	ldr	r3, [pc, #76]	; (8001ebc <HAL_UART_RxCpltCallback+0x128>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b70      	cmp	r3, #112	; 0x70
 8001e74:	d10b      	bne.n	8001e8e <HAL_UART_RxCpltCallback+0xfa>
		readTempCalibration(&hi2c2, huart, decodeASCII(UARTRxData[1]));
 8001e76:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <HAL_UART_RxCpltCallback+0x128>)
 8001e78:	785b      	ldrb	r3, [r3, #1]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 f828 	bl	8001ed0 <decodeASCII>
 8001e80:	4603      	mov	r3, r0
 8001e82:	461a      	mov	r2, r3
 8001e84:	6879      	ldr	r1, [r7, #4]
 8001e86:	4810      	ldr	r0, [pc, #64]	; (8001ec8 <HAL_UART_RxCpltCallback+0x134>)
 8001e88:	f7ff fb67 	bl	800155a <readTempCalibration>
 8001e8c:	e00d      	b.n	8001eaa <HAL_UART_RxCpltCallback+0x116>
	}

	// Read the temp sensor and print to the UART[0] (data_rx [0]= "t")
	else if (UARTRxData[0] == 0x74) {
 8001e8e:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <HAL_UART_RxCpltCallback+0x128>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	2b74      	cmp	r3, #116	; 0x74
 8001e94:	d109      	bne.n	8001eaa <HAL_UART_RxCpltCallback+0x116>
		readTempSensor(huart, decodeASCII(UARTRxData[1]));
 8001e96:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <HAL_UART_RxCpltCallback+0x128>)
 8001e98:	785b      	ldrb	r3, [r3, #1]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 f818 	bl	8001ed0 <decodeASCII>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7ff fb91 	bl	80015cc <readTempSensor>
	}

	HAL_UART_Receive_IT(&huart2, UARTRxData, 2);
 8001eaa:	2202      	movs	r2, #2
 8001eac:	4903      	ldr	r1, [pc, #12]	; (8001ebc <HAL_UART_RxCpltCallback+0x128>)
 8001eae:	4807      	ldr	r0, [pc, #28]	; (8001ecc <HAL_UART_RxCpltCallback+0x138>)
 8001eb0:	f003 fffd 	bl	8005eae <HAL_UART_Receive_IT>
}
 8001eb4:	bf00      	nop
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	200001f0 	.word	0x200001f0
 8001ec0:	20000108 	.word	0x20000108
 8001ec4:	20000040 	.word	0x20000040
 8001ec8:	20000094 	.word	0x20000094
 8001ecc:	200001a8 	.word	0x200001a8

08001ed0 <decodeASCII>:

uint8_t decodeASCII(uint8_t asciiVal) {
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	71fb      	strb	r3, [r7, #7]
	int returnVal = -1;
 8001eda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ede:	60fb      	str	r3, [r7, #12]
	if ((asciiVal >= 48) && (asciiVal <= 57)) {
 8001ee0:	79fb      	ldrb	r3, [r7, #7]
 8001ee2:	2b2f      	cmp	r3, #47	; 0x2f
 8001ee4:	d905      	bls.n	8001ef2 <decodeASCII+0x22>
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
 8001ee8:	2b39      	cmp	r3, #57	; 0x39
 8001eea:	d802      	bhi.n	8001ef2 <decodeASCII+0x22>
		returnVal = asciiVal - 48;
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	3b30      	subs	r3, #48	; 0x30
 8001ef0:	60fb      	str	r3, [r7, #12]
	}
	return returnVal;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	b2db      	uxtb	r3, r3
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
	...

08001f04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f08:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <SystemInit+0x20>)
 8001f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f0e:	4a05      	ldr	r2, [pc, #20]	; (8001f24 <SystemInit+0x20>)
 8001f10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <uart_transmit_page>:

#include "uart_transmit.h"
/**
 * Transmit one single page over the UART interface
 */
void uart_transmit_page(UART_HandleTypeDef *huart, uint8_t page[PAGE_SIZE]) {
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huart, page, PAGE_SIZE, HAL_MAX_DELAY);
 8001f32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f3a:	6839      	ldr	r1, [r7, #0]
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f003 ff2b 	bl	8005d98 <HAL_UART_Transmit>
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <send_uart_string>:

void send_uart_string(UART_HandleTypeDef *huart, const char *str) {
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
 8001f52:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8001f54:	6838      	ldr	r0, [r7, #0]
 8001f56:	f7fe f949 	bl	80001ec <strlen>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f62:	6839      	ldr	r1, [r7, #0]
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f003 ff17 	bl	8005d98 <HAL_UART_Transmit>
}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <send_uart_hex>:
	// Call the send_uart_string function to send the value to UART
	send_uart_string(huart, value_str);
	send_uart_string(huart, "\r\n");
}

void send_uart_hex(UART_HandleTypeDef *huart, uint8_t value) {
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b084      	sub	sp, #16
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	70fb      	strb	r3, [r7, #3]
	uint8_t buffer[1];
	buffer[0] = value;
 8001f7e:	78fb      	ldrb	r3, [r7, #3]
 8001f80:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(huart, buffer, 1, HAL_MAX_DELAY);
 8001f82:	f107 010c 	add.w	r1, r7, #12
 8001f86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f003 ff03 	bl	8005d98 <HAL_UART_Transmit>
}
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fd4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001fa0:	f7ff ffb0 	bl	8001f04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fa4:	480c      	ldr	r0, [pc, #48]	; (8001fd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fa6:	490d      	ldr	r1, [pc, #52]	; (8001fdc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fa8:	4a0d      	ldr	r2, [pc, #52]	; (8001fe0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001faa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fac:	e002      	b.n	8001fb4 <LoopCopyDataInit>

08001fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fb2:	3304      	adds	r3, #4

08001fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb8:	d3f9      	bcc.n	8001fae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fba:	4a0a      	ldr	r2, [pc, #40]	; (8001fe4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fbc:	4c0a      	ldr	r4, [pc, #40]	; (8001fe8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc0:	e001      	b.n	8001fc6 <LoopFillZerobss>

08001fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fc4:	3204      	adds	r2, #4

08001fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc8:	d3fb      	bcc.n	8001fc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fca:	f004 fef3 	bl	8006db4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fce:	f7fe fe49 	bl	8000c64 <main>
  bx  lr    
 8001fd2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001fd4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fdc:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001fe0:	08006ec8 	.word	0x08006ec8
  ldr r2, =_sbss
 8001fe4:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001fe8:	2000032c 	.word	0x2000032c

08001fec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fec:	e7fe      	b.n	8001fec <ADC_IRQHandler>
	...

08001ff0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ff4:	4b0e      	ldr	r3, [pc, #56]	; (8002030 <HAL_Init+0x40>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a0d      	ldr	r2, [pc, #52]	; (8002030 <HAL_Init+0x40>)
 8001ffa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ffe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002000:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <HAL_Init+0x40>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a0a      	ldr	r2, [pc, #40]	; (8002030 <HAL_Init+0x40>)
 8002006:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800200a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800200c:	4b08      	ldr	r3, [pc, #32]	; (8002030 <HAL_Init+0x40>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a07      	ldr	r2, [pc, #28]	; (8002030 <HAL_Init+0x40>)
 8002012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002016:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002018:	2003      	movs	r0, #3
 800201a:	f000 f92b 	bl	8002274 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800201e:	200f      	movs	r0, #15
 8002020:	f000 f808 	bl	8002034 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002024:	f7ff fcde 	bl	80019e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40023c00 	.word	0x40023c00

08002034 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800203c:	4b12      	ldr	r3, [pc, #72]	; (8002088 <HAL_InitTick+0x54>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	4b12      	ldr	r3, [pc, #72]	; (800208c <HAL_InitTick+0x58>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	4619      	mov	r1, r3
 8002046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800204a:	fbb3 f3f1 	udiv	r3, r3, r1
 800204e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002052:	4618      	mov	r0, r3
 8002054:	f000 f943 	bl	80022de <HAL_SYSTICK_Config>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e00e      	b.n	8002080 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b0f      	cmp	r3, #15
 8002066:	d80a      	bhi.n	800207e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002068:	2200      	movs	r2, #0
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002070:	f000 f90b 	bl	800228a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002074:	4a06      	ldr	r2, [pc, #24]	; (8002090 <HAL_InitTick+0x5c>)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800207a:	2300      	movs	r3, #0
 800207c:	e000      	b.n	8002080 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
}
 8002080:	4618      	mov	r0, r3
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20000018 	.word	0x20000018
 800208c:	20000020 	.word	0x20000020
 8002090:	2000001c 	.word	0x2000001c

08002094 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002098:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <HAL_IncTick+0x20>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	461a      	mov	r2, r3
 800209e:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <HAL_IncTick+0x24>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4413      	add	r3, r2
 80020a4:	4a04      	ldr	r2, [pc, #16]	; (80020b8 <HAL_IncTick+0x24>)
 80020a6:	6013      	str	r3, [r2, #0]
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	20000020 	.word	0x20000020
 80020b8:	20000328 	.word	0x20000328

080020bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  return uwTick;
 80020c0:	4b03      	ldr	r3, [pc, #12]	; (80020d0 <HAL_GetTick+0x14>)
 80020c2:	681b      	ldr	r3, [r3, #0]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	20000328 	.word	0x20000328

080020d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e4:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <__NVIC_SetPriorityGrouping+0x44>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020f0:	4013      	ands	r3, r2
 80020f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002106:	4a04      	ldr	r2, [pc, #16]	; (8002118 <__NVIC_SetPriorityGrouping+0x44>)
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	60d3      	str	r3, [r2, #12]
}
 800210c:	bf00      	nop
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002120:	4b04      	ldr	r3, [pc, #16]	; (8002134 <__NVIC_GetPriorityGrouping+0x18>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	0a1b      	lsrs	r3, r3, #8
 8002126:	f003 0307 	and.w	r3, r3, #7
}
 800212a:	4618      	mov	r0, r3
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	e000ed00 	.word	0xe000ed00

08002138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002146:	2b00      	cmp	r3, #0
 8002148:	db0b      	blt.n	8002162 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	f003 021f 	and.w	r2, r3, #31
 8002150:	4907      	ldr	r1, [pc, #28]	; (8002170 <__NVIC_EnableIRQ+0x38>)
 8002152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002156:	095b      	lsrs	r3, r3, #5
 8002158:	2001      	movs	r0, #1
 800215a:	fa00 f202 	lsl.w	r2, r0, r2
 800215e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	e000e100 	.word	0xe000e100

08002174 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	6039      	str	r1, [r7, #0]
 800217e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002184:	2b00      	cmp	r3, #0
 8002186:	db0a      	blt.n	800219e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	b2da      	uxtb	r2, r3
 800218c:	490c      	ldr	r1, [pc, #48]	; (80021c0 <__NVIC_SetPriority+0x4c>)
 800218e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002192:	0112      	lsls	r2, r2, #4
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	440b      	add	r3, r1
 8002198:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800219c:	e00a      	b.n	80021b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	4908      	ldr	r1, [pc, #32]	; (80021c4 <__NVIC_SetPriority+0x50>)
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	3b04      	subs	r3, #4
 80021ac:	0112      	lsls	r2, r2, #4
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	440b      	add	r3, r1
 80021b2:	761a      	strb	r2, [r3, #24]
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	e000e100 	.word	0xe000e100
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b089      	sub	sp, #36	; 0x24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f1c3 0307 	rsb	r3, r3, #7
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	bf28      	it	cs
 80021e6:	2304      	movcs	r3, #4
 80021e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	3304      	adds	r3, #4
 80021ee:	2b06      	cmp	r3, #6
 80021f0:	d902      	bls.n	80021f8 <NVIC_EncodePriority+0x30>
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	3b03      	subs	r3, #3
 80021f6:	e000      	b.n	80021fa <NVIC_EncodePriority+0x32>
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43da      	mvns	r2, r3
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	401a      	ands	r2, r3
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002210:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	fa01 f303 	lsl.w	r3, r1, r3
 800221a:	43d9      	mvns	r1, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002220:	4313      	orrs	r3, r2
         );
}
 8002222:	4618      	mov	r0, r3
 8002224:	3724      	adds	r7, #36	; 0x24
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
	...

08002230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3b01      	subs	r3, #1
 800223c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002240:	d301      	bcc.n	8002246 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002242:	2301      	movs	r3, #1
 8002244:	e00f      	b.n	8002266 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002246:	4a0a      	ldr	r2, [pc, #40]	; (8002270 <SysTick_Config+0x40>)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3b01      	subs	r3, #1
 800224c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800224e:	210f      	movs	r1, #15
 8002250:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002254:	f7ff ff8e 	bl	8002174 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <SysTick_Config+0x40>)
 800225a:	2200      	movs	r2, #0
 800225c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800225e:	4b04      	ldr	r3, [pc, #16]	; (8002270 <SysTick_Config+0x40>)
 8002260:	2207      	movs	r2, #7
 8002262:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	e000e010 	.word	0xe000e010

08002274 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7ff ff29 	bl	80020d4 <__NVIC_SetPriorityGrouping>
}
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800228a:	b580      	push	{r7, lr}
 800228c:	b086      	sub	sp, #24
 800228e:	af00      	add	r7, sp, #0
 8002290:	4603      	mov	r3, r0
 8002292:	60b9      	str	r1, [r7, #8]
 8002294:	607a      	str	r2, [r7, #4]
 8002296:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800229c:	f7ff ff3e 	bl	800211c <__NVIC_GetPriorityGrouping>
 80022a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	68b9      	ldr	r1, [r7, #8]
 80022a6:	6978      	ldr	r0, [r7, #20]
 80022a8:	f7ff ff8e 	bl	80021c8 <NVIC_EncodePriority>
 80022ac:	4602      	mov	r2, r0
 80022ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b2:	4611      	mov	r1, r2
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff ff5d 	bl	8002174 <__NVIC_SetPriority>
}
 80022ba:	bf00      	nop
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b082      	sub	sp, #8
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	4603      	mov	r3, r0
 80022ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff ff31 	bl	8002138 <__NVIC_EnableIRQ>
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff ffa2 	bl	8002230 <SysTick_Config>
 80022ec:	4603      	mov	r3, r0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b084      	sub	sp, #16
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002302:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002304:	f7ff feda 	bl	80020bc <HAL_GetTick>
 8002308:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d008      	beq.n	8002328 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2280      	movs	r2, #128	; 0x80
 800231a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e052      	b.n	80023ce <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 0216 	bic.w	r2, r2, #22
 8002336:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	695a      	ldr	r2, [r3, #20]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002346:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234c:	2b00      	cmp	r3, #0
 800234e:	d103      	bne.n	8002358 <HAL_DMA_Abort+0x62>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002354:	2b00      	cmp	r3, #0
 8002356:	d007      	beq.n	8002368 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 0208 	bic.w	r2, r2, #8
 8002366:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0201 	bic.w	r2, r2, #1
 8002376:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002378:	e013      	b.n	80023a2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800237a:	f7ff fe9f 	bl	80020bc <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b05      	cmp	r3, #5
 8002386:	d90c      	bls.n	80023a2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2220      	movs	r2, #32
 800238c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2203      	movs	r2, #3
 8002392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e015      	b.n	80023ce <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1e4      	bne.n	800237a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b4:	223f      	movs	r2, #63	; 0x3f
 80023b6:	409a      	lsls	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d004      	beq.n	80023f4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2280      	movs	r2, #128	; 0x80
 80023ee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e00c      	b.n	800240e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2205      	movs	r2, #5
 80023f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0201 	bic.w	r2, r2, #1
 800240a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
	...

0800241c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800241c:	b480      	push	{r7}
 800241e:	b089      	sub	sp, #36	; 0x24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800242a:	2300      	movs	r3, #0
 800242c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800242e:	2300      	movs	r3, #0
 8002430:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002432:	2300      	movs	r3, #0
 8002434:	61fb      	str	r3, [r7, #28]
 8002436:	e177      	b.n	8002728 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002438:	2201      	movs	r2, #1
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	4013      	ands	r3, r2
 800244a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	429a      	cmp	r2, r3
 8002452:	f040 8166 	bne.w	8002722 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	2b01      	cmp	r3, #1
 8002460:	d005      	beq.n	800246e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800246a:	2b02      	cmp	r3, #2
 800246c:	d130      	bne.n	80024d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	2203      	movs	r2, #3
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43db      	mvns	r3, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4013      	ands	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4313      	orrs	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024a4:	2201      	movs	r2, #1
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	091b      	lsrs	r3, r3, #4
 80024ba:	f003 0201 	and.w	r2, r3, #1
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 0303 	and.w	r3, r3, #3
 80024d8:	2b03      	cmp	r3, #3
 80024da:	d017      	beq.n	800250c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	2203      	movs	r2, #3
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 0303 	and.w	r3, r3, #3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d123      	bne.n	8002560 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	08da      	lsrs	r2, r3, #3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3208      	adds	r2, #8
 8002520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002524:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	220f      	movs	r2, #15
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	691a      	ldr	r2, [r3, #16]
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	08da      	lsrs	r2, r3, #3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3208      	adds	r2, #8
 800255a:	69b9      	ldr	r1, [r7, #24]
 800255c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	2203      	movs	r2, #3
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 0203 	and.w	r2, r3, #3
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 80c0 	beq.w	8002722 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	4b66      	ldr	r3, [pc, #408]	; (8002740 <HAL_GPIO_Init+0x324>)
 80025a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025aa:	4a65      	ldr	r2, [pc, #404]	; (8002740 <HAL_GPIO_Init+0x324>)
 80025ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025b0:	6453      	str	r3, [r2, #68]	; 0x44
 80025b2:	4b63      	ldr	r3, [pc, #396]	; (8002740 <HAL_GPIO_Init+0x324>)
 80025b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025be:	4a61      	ldr	r2, [pc, #388]	; (8002744 <HAL_GPIO_Init+0x328>)
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	089b      	lsrs	r3, r3, #2
 80025c4:	3302      	adds	r3, #2
 80025c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	220f      	movs	r2, #15
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43db      	mvns	r3, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4013      	ands	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a58      	ldr	r2, [pc, #352]	; (8002748 <HAL_GPIO_Init+0x32c>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d037      	beq.n	800265a <HAL_GPIO_Init+0x23e>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a57      	ldr	r2, [pc, #348]	; (800274c <HAL_GPIO_Init+0x330>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d031      	beq.n	8002656 <HAL_GPIO_Init+0x23a>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a56      	ldr	r2, [pc, #344]	; (8002750 <HAL_GPIO_Init+0x334>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d02b      	beq.n	8002652 <HAL_GPIO_Init+0x236>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a55      	ldr	r2, [pc, #340]	; (8002754 <HAL_GPIO_Init+0x338>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d025      	beq.n	800264e <HAL_GPIO_Init+0x232>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a54      	ldr	r2, [pc, #336]	; (8002758 <HAL_GPIO_Init+0x33c>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d01f      	beq.n	800264a <HAL_GPIO_Init+0x22e>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a53      	ldr	r2, [pc, #332]	; (800275c <HAL_GPIO_Init+0x340>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d019      	beq.n	8002646 <HAL_GPIO_Init+0x22a>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a52      	ldr	r2, [pc, #328]	; (8002760 <HAL_GPIO_Init+0x344>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d013      	beq.n	8002642 <HAL_GPIO_Init+0x226>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a51      	ldr	r2, [pc, #324]	; (8002764 <HAL_GPIO_Init+0x348>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d00d      	beq.n	800263e <HAL_GPIO_Init+0x222>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a50      	ldr	r2, [pc, #320]	; (8002768 <HAL_GPIO_Init+0x34c>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d007      	beq.n	800263a <HAL_GPIO_Init+0x21e>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a4f      	ldr	r2, [pc, #316]	; (800276c <HAL_GPIO_Init+0x350>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d101      	bne.n	8002636 <HAL_GPIO_Init+0x21a>
 8002632:	2309      	movs	r3, #9
 8002634:	e012      	b.n	800265c <HAL_GPIO_Init+0x240>
 8002636:	230a      	movs	r3, #10
 8002638:	e010      	b.n	800265c <HAL_GPIO_Init+0x240>
 800263a:	2308      	movs	r3, #8
 800263c:	e00e      	b.n	800265c <HAL_GPIO_Init+0x240>
 800263e:	2307      	movs	r3, #7
 8002640:	e00c      	b.n	800265c <HAL_GPIO_Init+0x240>
 8002642:	2306      	movs	r3, #6
 8002644:	e00a      	b.n	800265c <HAL_GPIO_Init+0x240>
 8002646:	2305      	movs	r3, #5
 8002648:	e008      	b.n	800265c <HAL_GPIO_Init+0x240>
 800264a:	2304      	movs	r3, #4
 800264c:	e006      	b.n	800265c <HAL_GPIO_Init+0x240>
 800264e:	2303      	movs	r3, #3
 8002650:	e004      	b.n	800265c <HAL_GPIO_Init+0x240>
 8002652:	2302      	movs	r3, #2
 8002654:	e002      	b.n	800265c <HAL_GPIO_Init+0x240>
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <HAL_GPIO_Init+0x240>
 800265a:	2300      	movs	r3, #0
 800265c:	69fa      	ldr	r2, [r7, #28]
 800265e:	f002 0203 	and.w	r2, r2, #3
 8002662:	0092      	lsls	r2, r2, #2
 8002664:	4093      	lsls	r3, r2
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4313      	orrs	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800266c:	4935      	ldr	r1, [pc, #212]	; (8002744 <HAL_GPIO_Init+0x328>)
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	089b      	lsrs	r3, r3, #2
 8002672:	3302      	adds	r3, #2
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800267a:	4b3d      	ldr	r3, [pc, #244]	; (8002770 <HAL_GPIO_Init+0x354>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800269e:	4a34      	ldr	r2, [pc, #208]	; (8002770 <HAL_GPIO_Init+0x354>)
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026a4:	4b32      	ldr	r3, [pc, #200]	; (8002770 <HAL_GPIO_Init+0x354>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	43db      	mvns	r3, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026c8:	4a29      	ldr	r2, [pc, #164]	; (8002770 <HAL_GPIO_Init+0x354>)
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026ce:	4b28      	ldr	r3, [pc, #160]	; (8002770 <HAL_GPIO_Init+0x354>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	43db      	mvns	r3, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4013      	ands	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026f2:	4a1f      	ldr	r2, [pc, #124]	; (8002770 <HAL_GPIO_Init+0x354>)
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026f8:	4b1d      	ldr	r3, [pc, #116]	; (8002770 <HAL_GPIO_Init+0x354>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	43db      	mvns	r3, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4013      	ands	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	4313      	orrs	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800271c:	4a14      	ldr	r2, [pc, #80]	; (8002770 <HAL_GPIO_Init+0x354>)
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	3301      	adds	r3, #1
 8002726:	61fb      	str	r3, [r7, #28]
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	2b0f      	cmp	r3, #15
 800272c:	f67f ae84 	bls.w	8002438 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002730:	bf00      	nop
 8002732:	bf00      	nop
 8002734:	3724      	adds	r7, #36	; 0x24
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	40023800 	.word	0x40023800
 8002744:	40013800 	.word	0x40013800
 8002748:	40020000 	.word	0x40020000
 800274c:	40020400 	.word	0x40020400
 8002750:	40020800 	.word	0x40020800
 8002754:	40020c00 	.word	0x40020c00
 8002758:	40021000 	.word	0x40021000
 800275c:	40021400 	.word	0x40021400
 8002760:	40021800 	.word	0x40021800
 8002764:	40021c00 	.word	0x40021c00
 8002768:	40022000 	.word	0x40022000
 800276c:	40022400 	.word	0x40022400
 8002770:	40013c00 	.word	0x40013c00

08002774 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	807b      	strh	r3, [r7, #2]
 8002780:	4613      	mov	r3, r2
 8002782:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002784:	787b      	ldrb	r3, [r7, #1]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800278a:	887a      	ldrh	r2, [r7, #2]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002790:	e003      	b.n	800279a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002792:	887b      	ldrh	r3, [r7, #2]
 8002794:	041a      	lsls	r2, r3, #16
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	619a      	str	r2, [r3, #24]
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b085      	sub	sp, #20
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
 80027ae:	460b      	mov	r3, r1
 80027b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027b8:	887a      	ldrh	r2, [r7, #2]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	4013      	ands	r3, r2
 80027be:	041a      	lsls	r2, r3, #16
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	43d9      	mvns	r1, r3
 80027c4:	887b      	ldrh	r3, [r7, #2]
 80027c6:	400b      	ands	r3, r1
 80027c8:	431a      	orrs	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	619a      	str	r2, [r3, #24]
}
 80027ce:	bf00      	nop
 80027d0:	3714      	adds	r7, #20
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
	...

080027dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e12b      	b.n	8002a46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d106      	bne.n	8002808 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7ff f916 	bl	8001a34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2224      	movs	r2, #36	; 0x24
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 0201 	bic.w	r2, r2, #1
 800281e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800282e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800283e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002840:	f001 fc72 	bl	8004128 <HAL_RCC_GetPCLK1Freq>
 8002844:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	4a81      	ldr	r2, [pc, #516]	; (8002a50 <HAL_I2C_Init+0x274>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d807      	bhi.n	8002860 <HAL_I2C_Init+0x84>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	4a80      	ldr	r2, [pc, #512]	; (8002a54 <HAL_I2C_Init+0x278>)
 8002854:	4293      	cmp	r3, r2
 8002856:	bf94      	ite	ls
 8002858:	2301      	movls	r3, #1
 800285a:	2300      	movhi	r3, #0
 800285c:	b2db      	uxtb	r3, r3
 800285e:	e006      	b.n	800286e <HAL_I2C_Init+0x92>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	4a7d      	ldr	r2, [pc, #500]	; (8002a58 <HAL_I2C_Init+0x27c>)
 8002864:	4293      	cmp	r3, r2
 8002866:	bf94      	ite	ls
 8002868:	2301      	movls	r3, #1
 800286a:	2300      	movhi	r3, #0
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e0e7      	b.n	8002a46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	4a78      	ldr	r2, [pc, #480]	; (8002a5c <HAL_I2C_Init+0x280>)
 800287a:	fba2 2303 	umull	r2, r3, r2, r3
 800287e:	0c9b      	lsrs	r3, r3, #18
 8002880:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68ba      	ldr	r2, [r7, #8]
 8002892:	430a      	orrs	r2, r1
 8002894:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	4a6a      	ldr	r2, [pc, #424]	; (8002a50 <HAL_I2C_Init+0x274>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d802      	bhi.n	80028b0 <HAL_I2C_Init+0xd4>
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	3301      	adds	r3, #1
 80028ae:	e009      	b.n	80028c4 <HAL_I2C_Init+0xe8>
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028b6:	fb02 f303 	mul.w	r3, r2, r3
 80028ba:	4a69      	ldr	r2, [pc, #420]	; (8002a60 <HAL_I2C_Init+0x284>)
 80028bc:	fba2 2303 	umull	r2, r3, r2, r3
 80028c0:	099b      	lsrs	r3, r3, #6
 80028c2:	3301      	adds	r3, #1
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6812      	ldr	r2, [r2, #0]
 80028c8:	430b      	orrs	r3, r1
 80028ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80028d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	495c      	ldr	r1, [pc, #368]	; (8002a50 <HAL_I2C_Init+0x274>)
 80028e0:	428b      	cmp	r3, r1
 80028e2:	d819      	bhi.n	8002918 <HAL_I2C_Init+0x13c>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	1e59      	subs	r1, r3, #1
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80028f2:	1c59      	adds	r1, r3, #1
 80028f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80028f8:	400b      	ands	r3, r1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00a      	beq.n	8002914 <HAL_I2C_Init+0x138>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	1e59      	subs	r1, r3, #1
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	fbb1 f3f3 	udiv	r3, r1, r3
 800290c:	3301      	adds	r3, #1
 800290e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002912:	e051      	b.n	80029b8 <HAL_I2C_Init+0x1dc>
 8002914:	2304      	movs	r3, #4
 8002916:	e04f      	b.n	80029b8 <HAL_I2C_Init+0x1dc>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d111      	bne.n	8002944 <HAL_I2C_Init+0x168>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	1e58      	subs	r0, r3, #1
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6859      	ldr	r1, [r3, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	440b      	add	r3, r1
 800292e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002932:	3301      	adds	r3, #1
 8002934:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002938:	2b00      	cmp	r3, #0
 800293a:	bf0c      	ite	eq
 800293c:	2301      	moveq	r3, #1
 800293e:	2300      	movne	r3, #0
 8002940:	b2db      	uxtb	r3, r3
 8002942:	e012      	b.n	800296a <HAL_I2C_Init+0x18e>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	1e58      	subs	r0, r3, #1
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6859      	ldr	r1, [r3, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	0099      	lsls	r1, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	fbb0 f3f3 	udiv	r3, r0, r3
 800295a:	3301      	adds	r3, #1
 800295c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002960:	2b00      	cmp	r3, #0
 8002962:	bf0c      	ite	eq
 8002964:	2301      	moveq	r3, #1
 8002966:	2300      	movne	r3, #0
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <HAL_I2C_Init+0x196>
 800296e:	2301      	movs	r3, #1
 8002970:	e022      	b.n	80029b8 <HAL_I2C_Init+0x1dc>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10e      	bne.n	8002998 <HAL_I2C_Init+0x1bc>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	1e58      	subs	r0, r3, #1
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6859      	ldr	r1, [r3, #4]
 8002982:	460b      	mov	r3, r1
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	440b      	add	r3, r1
 8002988:	fbb0 f3f3 	udiv	r3, r0, r3
 800298c:	3301      	adds	r3, #1
 800298e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002996:	e00f      	b.n	80029b8 <HAL_I2C_Init+0x1dc>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	1e58      	subs	r0, r3, #1
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6859      	ldr	r1, [r3, #4]
 80029a0:	460b      	mov	r3, r1
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	0099      	lsls	r1, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ae:	3301      	adds	r3, #1
 80029b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	6809      	ldr	r1, [r1, #0]
 80029bc:	4313      	orrs	r3, r2
 80029be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69da      	ldr	r2, [r3, #28]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80029e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6911      	ldr	r1, [r2, #16]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	68d2      	ldr	r2, [r2, #12]
 80029f2:	4311      	orrs	r1, r2
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6812      	ldr	r2, [r2, #0]
 80029f8:	430b      	orrs	r3, r1
 80029fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	695a      	ldr	r2, [r3, #20]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0201 	orr.w	r2, r2, #1
 8002a26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2220      	movs	r2, #32
 8002a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	000186a0 	.word	0x000186a0
 8002a54:	001e847f 	.word	0x001e847f
 8002a58:	003d08ff 	.word	0x003d08ff
 8002a5c:	431bde83 	.word	0x431bde83
 8002a60:	10624dd3 	.word	0x10624dd3

08002a64 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b088      	sub	sp, #32
 8002a68:	af02      	add	r7, sp, #8
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	607a      	str	r2, [r7, #4]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	460b      	mov	r3, r1
 8002a72:	817b      	strh	r3, [r7, #10]
 8002a74:	4613      	mov	r3, r2
 8002a76:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a78:	f7ff fb20 	bl	80020bc <HAL_GetTick>
 8002a7c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b20      	cmp	r3, #32
 8002a88:	f040 80e0 	bne.w	8002c4c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	2319      	movs	r3, #25
 8002a92:	2201      	movs	r2, #1
 8002a94:	4970      	ldr	r1, [pc, #448]	; (8002c58 <HAL_I2C_Master_Transmit+0x1f4>)
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 fc64 	bl	8003364 <I2C_WaitOnFlagUntilTimeout>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e0d3      	b.n	8002c4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d101      	bne.n	8002ab4 <HAL_I2C_Master_Transmit+0x50>
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	e0cc      	b.n	8002c4e <HAL_I2C_Master_Transmit+0x1ea>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d007      	beq.n	8002ada <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f042 0201 	orr.w	r2, r2, #1
 8002ad8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ae8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2221      	movs	r2, #33	; 0x21
 8002aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2210      	movs	r2, #16
 8002af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	893a      	ldrh	r2, [r7, #8]
 8002b0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	4a50      	ldr	r2, [pc, #320]	; (8002c5c <HAL_I2C_Master_Transmit+0x1f8>)
 8002b1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b1c:	8979      	ldrh	r1, [r7, #10]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	6a3a      	ldr	r2, [r7, #32]
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 face 	bl	80030c4 <I2C_MasterRequestWrite>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e08d      	b.n	8002c4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b32:	2300      	movs	r3, #0
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	613b      	str	r3, [r7, #16]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	613b      	str	r3, [r7, #16]
 8002b46:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b48:	e066      	b.n	8002c18 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	6a39      	ldr	r1, [r7, #32]
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f000 fd22 	bl	8003598 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00d      	beq.n	8002b76 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d107      	bne.n	8002b72 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e06b      	b.n	8002c4e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7a:	781a      	ldrb	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	1c5a      	adds	r2, r3, #1
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	3b01      	subs	r3, #1
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	d11b      	bne.n	8002bec <HAL_I2C_Master_Transmit+0x188>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d017      	beq.n	8002bec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	781a      	ldrb	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bcc:	1c5a      	adds	r2, r3, #1
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be4:	3b01      	subs	r3, #1
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	6a39      	ldr	r1, [r7, #32]
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 fd19 	bl	8003628 <I2C_WaitOnBTFFlagUntilTimeout>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00d      	beq.n	8002c18 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	d107      	bne.n	8002c14 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c12:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e01a      	b.n	8002c4e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d194      	bne.n	8002b4a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	e000      	b.n	8002c4e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c4c:	2302      	movs	r3, #2
  }
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3718      	adds	r7, #24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	00100002 	.word	0x00100002
 8002c5c:	ffff0000 	.word	0xffff0000

08002c60 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b08c      	sub	sp, #48	; 0x30
 8002c64:	af02      	add	r7, sp, #8
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	607a      	str	r2, [r7, #4]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	817b      	strh	r3, [r7, #10]
 8002c70:	4613      	mov	r3, r2
 8002c72:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c74:	f7ff fa22 	bl	80020bc <HAL_GetTick>
 8002c78:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b20      	cmp	r3, #32
 8002c84:	f040 8217 	bne.w	80030b6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	2319      	movs	r3, #25
 8002c8e:	2201      	movs	r2, #1
 8002c90:	497c      	ldr	r1, [pc, #496]	; (8002e84 <HAL_I2C_Master_Receive+0x224>)
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 fb66 	bl	8003364 <I2C_WaitOnFlagUntilTimeout>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	e20a      	b.n	80030b8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d101      	bne.n	8002cb0 <HAL_I2C_Master_Receive+0x50>
 8002cac:	2302      	movs	r3, #2
 8002cae:	e203      	b.n	80030b8 <HAL_I2C_Master_Receive+0x458>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d007      	beq.n	8002cd6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f042 0201 	orr.w	r2, r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ce4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2222      	movs	r2, #34	; 0x22
 8002cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2210      	movs	r2, #16
 8002cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	893a      	ldrh	r2, [r7, #8]
 8002d06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	4a5c      	ldr	r2, [pc, #368]	; (8002e88 <HAL_I2C_Master_Receive+0x228>)
 8002d16:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d18:	8979      	ldrh	r1, [r7, #10]
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 fa52 	bl	80031c8 <I2C_MasterRequestRead>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e1c4      	b.n	80030b8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d113      	bne.n	8002d5e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d36:	2300      	movs	r3, #0
 8002d38:	623b      	str	r3, [r7, #32]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	623b      	str	r3, [r7, #32]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	623b      	str	r3, [r7, #32]
 8002d4a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	e198      	b.n	8003090 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d11b      	bne.n	8002d9e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d76:	2300      	movs	r3, #0
 8002d78:	61fb      	str	r3, [r7, #28]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	61fb      	str	r3, [r7, #28]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	61fb      	str	r3, [r7, #28]
 8002d8a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	e178      	b.n	8003090 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d11b      	bne.n	8002dde <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002db4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dc4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61bb      	str	r3, [r7, #24]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	61bb      	str	r3, [r7, #24]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	61bb      	str	r3, [r7, #24]
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	e158      	b.n	8003090 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002dec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dee:	2300      	movs	r3, #0
 8002df0:	617b      	str	r3, [r7, #20]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	617b      	str	r3, [r7, #20]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	617b      	str	r3, [r7, #20]
 8002e02:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002e04:	e144      	b.n	8003090 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e0a:	2b03      	cmp	r3, #3
 8002e0c:	f200 80f1 	bhi.w	8002ff2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d123      	bne.n	8002e60 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f000 fc4b 	bl	80036b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e145      	b.n	80030b8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	691a      	ldr	r2, [r3, #16]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	1c5a      	adds	r2, r3, #1
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	3b01      	subs	r3, #1
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e5e:	e117      	b.n	8003090 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d14e      	bne.n	8002f06 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6e:	2200      	movs	r2, #0
 8002e70:	4906      	ldr	r1, [pc, #24]	; (8002e8c <HAL_I2C_Master_Receive+0x22c>)
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 fa76 	bl	8003364 <I2C_WaitOnFlagUntilTimeout>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d008      	beq.n	8002e90 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e11a      	b.n	80030b8 <HAL_I2C_Master_Receive+0x458>
 8002e82:	bf00      	nop
 8002e84:	00100002 	.word	0x00100002
 8002e88:	ffff0000 	.word	0xffff0000
 8002e8c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	691a      	ldr	r2, [r3, #16]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb2:	1c5a      	adds	r2, r3, #1
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	691a      	ldr	r2, [r3, #16]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002edc:	b2d2      	uxtb	r2, r2
 8002ede:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee4:	1c5a      	adds	r2, r3, #1
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	3b01      	subs	r3, #1
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f04:	e0c4      	b.n	8003090 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	496c      	ldr	r1, [pc, #432]	; (80030c0 <HAL_I2C_Master_Receive+0x460>)
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f000 fa27 	bl	8003364 <I2C_WaitOnFlagUntilTimeout>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e0cb      	b.n	80030b8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	691a      	ldr	r2, [r3, #16]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	b2d2      	uxtb	r2, r2
 8002f3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f68:	2200      	movs	r2, #0
 8002f6a:	4955      	ldr	r1, [pc, #340]	; (80030c0 <HAL_I2C_Master_Receive+0x460>)
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f000 f9f9 	bl	8003364 <I2C_WaitOnFlagUntilTimeout>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e09d      	b.n	80030b8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	691a      	ldr	r2, [r3, #16]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	1c5a      	adds	r2, r3, #1
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	691a      	ldr	r2, [r3, #16]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	1c5a      	adds	r2, r3, #1
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ff0:	e04e      	b.n	8003090 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 fb5e 	bl	80036b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e058      	b.n	80030b8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	691a      	ldr	r2, [r3, #16]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003010:	b2d2      	uxtb	r2, r2
 8003012:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	1c5a      	adds	r2, r3, #1
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003022:	3b01      	subs	r3, #1
 8003024:	b29a      	uxth	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302e:	b29b      	uxth	r3, r3
 8003030:	3b01      	subs	r3, #1
 8003032:	b29a      	uxth	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	f003 0304 	and.w	r3, r3, #4
 8003042:	2b04      	cmp	r3, #4
 8003044:	d124      	bne.n	8003090 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800304a:	2b03      	cmp	r3, #3
 800304c:	d107      	bne.n	800305e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800305c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	691a      	ldr	r2, [r3, #16]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003070:	1c5a      	adds	r2, r3, #1
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800307a:	3b01      	subs	r3, #1
 800307c:	b29a      	uxth	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003086:	b29b      	uxth	r3, r3
 8003088:	3b01      	subs	r3, #1
 800308a:	b29a      	uxth	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003094:	2b00      	cmp	r3, #0
 8003096:	f47f aeb6 	bne.w	8002e06 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2220      	movs	r2, #32
 800309e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030b2:	2300      	movs	r3, #0
 80030b4:	e000      	b.n	80030b8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80030b6:	2302      	movs	r3, #2
  }
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3728      	adds	r7, #40	; 0x28
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	00010004 	.word	0x00010004

080030c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b088      	sub	sp, #32
 80030c8:	af02      	add	r7, sp, #8
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	607a      	str	r2, [r7, #4]
 80030ce:	603b      	str	r3, [r7, #0]
 80030d0:	460b      	mov	r3, r1
 80030d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d006      	beq.n	80030ee <I2C_MasterRequestWrite+0x2a>
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d003      	beq.n	80030ee <I2C_MasterRequestWrite+0x2a>
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030ec:	d108      	bne.n	8003100 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	e00b      	b.n	8003118 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003104:	2b12      	cmp	r3, #18
 8003106:	d107      	bne.n	8003118 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003116:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 f91d 	bl	8003364 <I2C_WaitOnFlagUntilTimeout>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00d      	beq.n	800314c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800313e:	d103      	bne.n	8003148 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003146:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e035      	b.n	80031b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003154:	d108      	bne.n	8003168 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003156:	897b      	ldrh	r3, [r7, #10]
 8003158:	b2db      	uxtb	r3, r3
 800315a:	461a      	mov	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003164:	611a      	str	r2, [r3, #16]
 8003166:	e01b      	b.n	80031a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003168:	897b      	ldrh	r3, [r7, #10]
 800316a:	11db      	asrs	r3, r3, #7
 800316c:	b2db      	uxtb	r3, r3
 800316e:	f003 0306 	and.w	r3, r3, #6
 8003172:	b2db      	uxtb	r3, r3
 8003174:	f063 030f 	orn	r3, r3, #15
 8003178:	b2da      	uxtb	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	490e      	ldr	r1, [pc, #56]	; (80031c0 <I2C_MasterRequestWrite+0xfc>)
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f000 f966 	bl	8003458 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e010      	b.n	80031b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003196:	897b      	ldrh	r3, [r7, #10]
 8003198:	b2da      	uxtb	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	4907      	ldr	r1, [pc, #28]	; (80031c4 <I2C_MasterRequestWrite+0x100>)
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f000 f956 	bl	8003458 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e000      	b.n	80031b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3718      	adds	r7, #24
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	00010008 	.word	0x00010008
 80031c4:	00010002 	.word	0x00010002

080031c8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b088      	sub	sp, #32
 80031cc:	af02      	add	r7, sp, #8
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	607a      	str	r2, [r7, #4]
 80031d2:	603b      	str	r3, [r7, #0]
 80031d4:	460b      	mov	r3, r1
 80031d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031dc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031ec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d006      	beq.n	8003202 <I2C_MasterRequestRead+0x3a>
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d003      	beq.n	8003202 <I2C_MasterRequestRead+0x3a>
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003200:	d108      	bne.n	8003214 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	e00b      	b.n	800322c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003218:	2b11      	cmp	r3, #17
 800321a:	d107      	bne.n	800322c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800322a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f000 f893 	bl	8003364 <I2C_WaitOnFlagUntilTimeout>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00d      	beq.n	8003260 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003252:	d103      	bne.n	800325c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f44f 7200 	mov.w	r2, #512	; 0x200
 800325a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e079      	b.n	8003354 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003268:	d108      	bne.n	800327c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800326a:	897b      	ldrh	r3, [r7, #10]
 800326c:	b2db      	uxtb	r3, r3
 800326e:	f043 0301 	orr.w	r3, r3, #1
 8003272:	b2da      	uxtb	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	611a      	str	r2, [r3, #16]
 800327a:	e05f      	b.n	800333c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800327c:	897b      	ldrh	r3, [r7, #10]
 800327e:	11db      	asrs	r3, r3, #7
 8003280:	b2db      	uxtb	r3, r3
 8003282:	f003 0306 	and.w	r3, r3, #6
 8003286:	b2db      	uxtb	r3, r3
 8003288:	f063 030f 	orn	r3, r3, #15
 800328c:	b2da      	uxtb	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	4930      	ldr	r1, [pc, #192]	; (800335c <I2C_MasterRequestRead+0x194>)
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f000 f8dc 	bl	8003458 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e054      	b.n	8003354 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80032aa:	897b      	ldrh	r3, [r7, #10]
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	4929      	ldr	r1, [pc, #164]	; (8003360 <I2C_MasterRequestRead+0x198>)
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 f8cc 	bl	8003458 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e044      	b.n	8003354 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ca:	2300      	movs	r3, #0
 80032cc:	613b      	str	r3, [r7, #16]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	613b      	str	r3, [r7, #16]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	613b      	str	r3, [r7, #16]
 80032de:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032ee:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 f831 	bl	8003364 <I2C_WaitOnFlagUntilTimeout>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00d      	beq.n	8003324 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003312:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003316:	d103      	bne.n	8003320 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800331e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e017      	b.n	8003354 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003324:	897b      	ldrh	r3, [r7, #10]
 8003326:	11db      	asrs	r3, r3, #7
 8003328:	b2db      	uxtb	r3, r3
 800332a:	f003 0306 	and.w	r3, r3, #6
 800332e:	b2db      	uxtb	r3, r3
 8003330:	f063 030e 	orn	r3, r3, #14
 8003334:	b2da      	uxtb	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	4907      	ldr	r1, [pc, #28]	; (8003360 <I2C_MasterRequestRead+0x198>)
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 f888 	bl	8003458 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e000      	b.n	8003354 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3718      	adds	r7, #24
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	00010008 	.word	0x00010008
 8003360:	00010002 	.word	0x00010002

08003364 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	603b      	str	r3, [r7, #0]
 8003370:	4613      	mov	r3, r2
 8003372:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003374:	e048      	b.n	8003408 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800337c:	d044      	beq.n	8003408 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800337e:	f7fe fe9d 	bl	80020bc <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d302      	bcc.n	8003394 <I2C_WaitOnFlagUntilTimeout+0x30>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d139      	bne.n	8003408 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	0c1b      	lsrs	r3, r3, #16
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b01      	cmp	r3, #1
 800339c:	d10d      	bne.n	80033ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	43da      	mvns	r2, r3
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	4013      	ands	r3, r2
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	bf0c      	ite	eq
 80033b0:	2301      	moveq	r3, #1
 80033b2:	2300      	movne	r3, #0
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	461a      	mov	r2, r3
 80033b8:	e00c      	b.n	80033d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	43da      	mvns	r2, r3
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	4013      	ands	r3, r2
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	bf0c      	ite	eq
 80033cc:	2301      	moveq	r3, #1
 80033ce:	2300      	movne	r3, #0
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	461a      	mov	r2, r3
 80033d4:	79fb      	ldrb	r3, [r7, #7]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d116      	bne.n	8003408 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f4:	f043 0220 	orr.w	r2, r3, #32
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e023      	b.n	8003450 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	0c1b      	lsrs	r3, r3, #16
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b01      	cmp	r3, #1
 8003410:	d10d      	bne.n	800342e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	43da      	mvns	r2, r3
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	4013      	ands	r3, r2
 800341e:	b29b      	uxth	r3, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	bf0c      	ite	eq
 8003424:	2301      	moveq	r3, #1
 8003426:	2300      	movne	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	461a      	mov	r2, r3
 800342c:	e00c      	b.n	8003448 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	43da      	mvns	r2, r3
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	4013      	ands	r3, r2
 800343a:	b29b      	uxth	r3, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	bf0c      	ite	eq
 8003440:	2301      	moveq	r3, #1
 8003442:	2300      	movne	r3, #0
 8003444:	b2db      	uxtb	r3, r3
 8003446:	461a      	mov	r2, r3
 8003448:	79fb      	ldrb	r3, [r7, #7]
 800344a:	429a      	cmp	r2, r3
 800344c:	d093      	beq.n	8003376 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
 8003464:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003466:	e071      	b.n	800354c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003476:	d123      	bne.n	80034c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003486:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003490:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2220      	movs	r2, #32
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ac:	f043 0204 	orr.w	r2, r3, #4
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e067      	b.n	8003590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034c6:	d041      	beq.n	800354c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034c8:	f7fe fdf8 	bl	80020bc <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d302      	bcc.n	80034de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d136      	bne.n	800354c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	0c1b      	lsrs	r3, r3, #16
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d10c      	bne.n	8003502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	43da      	mvns	r2, r3
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	4013      	ands	r3, r2
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	bf14      	ite	ne
 80034fa:	2301      	movne	r3, #1
 80034fc:	2300      	moveq	r3, #0
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	e00b      	b.n	800351a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	43da      	mvns	r2, r3
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	4013      	ands	r3, r2
 800350e:	b29b      	uxth	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	bf14      	ite	ne
 8003514:	2301      	movne	r3, #1
 8003516:	2300      	moveq	r3, #0
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d016      	beq.n	800354c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2220      	movs	r2, #32
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003538:	f043 0220 	orr.w	r2, r3, #32
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e021      	b.n	8003590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	0c1b      	lsrs	r3, r3, #16
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b01      	cmp	r3, #1
 8003554:	d10c      	bne.n	8003570 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	43da      	mvns	r2, r3
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	4013      	ands	r3, r2
 8003562:	b29b      	uxth	r3, r3
 8003564:	2b00      	cmp	r3, #0
 8003566:	bf14      	ite	ne
 8003568:	2301      	movne	r3, #1
 800356a:	2300      	moveq	r3, #0
 800356c:	b2db      	uxtb	r3, r3
 800356e:	e00b      	b.n	8003588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	43da      	mvns	r2, r3
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	4013      	ands	r3, r2
 800357c:	b29b      	uxth	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	bf14      	ite	ne
 8003582:	2301      	movne	r3, #1
 8003584:	2300      	moveq	r3, #0
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	f47f af6d 	bne.w	8003468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035a4:	e034      	b.n	8003610 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f000 f8e3 	bl	8003772 <I2C_IsAcknowledgeFailed>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e034      	b.n	8003620 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035bc:	d028      	beq.n	8003610 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035be:	f7fe fd7d 	bl	80020bc <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d302      	bcc.n	80035d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d11d      	bne.n	8003610 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035de:	2b80      	cmp	r3, #128	; 0x80
 80035e0:	d016      	beq.n	8003610 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2220      	movs	r2, #32
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fc:	f043 0220 	orr.w	r2, r3, #32
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e007      	b.n	8003620 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800361a:	2b80      	cmp	r3, #128	; 0x80
 800361c:	d1c3      	bne.n	80035a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003634:	e034      	b.n	80036a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f000 f89b 	bl	8003772 <I2C_IsAcknowledgeFailed>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e034      	b.n	80036b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800364c:	d028      	beq.n	80036a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800364e:	f7fe fd35 	bl	80020bc <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	429a      	cmp	r2, r3
 800365c:	d302      	bcc.n	8003664 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d11d      	bne.n	80036a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	f003 0304 	and.w	r3, r3, #4
 800366e:	2b04      	cmp	r3, #4
 8003670:	d016      	beq.n	80036a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2220      	movs	r2, #32
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368c:	f043 0220 	orr.w	r2, r3, #32
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e007      	b.n	80036b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	f003 0304 	and.w	r3, r3, #4
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	d1c3      	bne.n	8003636 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036c4:	e049      	b.n	800375a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	f003 0310 	and.w	r3, r3, #16
 80036d0:	2b10      	cmp	r3, #16
 80036d2:	d119      	bne.n	8003708 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f06f 0210 	mvn.w	r2, #16
 80036dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2220      	movs	r2, #32
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e030      	b.n	800376a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003708:	f7fe fcd8 	bl	80020bc <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	429a      	cmp	r2, r3
 8003716:	d302      	bcc.n	800371e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d11d      	bne.n	800375a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003728:	2b40      	cmp	r3, #64	; 0x40
 800372a:	d016      	beq.n	800375a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2220      	movs	r2, #32
 8003736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	f043 0220 	orr.w	r2, r3, #32
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e007      	b.n	800376a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003764:	2b40      	cmp	r3, #64	; 0x40
 8003766:	d1ae      	bne.n	80036c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003772:	b480      	push	{r7}
 8003774:	b083      	sub	sp, #12
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003784:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003788:	d11b      	bne.n	80037c2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003792:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2220      	movs	r2, #32
 800379e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	f043 0204 	orr.w	r2, r3, #4
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e000      	b.n	80037c4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b20      	cmp	r3, #32
 80037e4:	d129      	bne.n	800383a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2224      	movs	r2, #36	; 0x24
 80037ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 0201 	bic.w	r2, r2, #1
 80037fc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0210 	bic.w	r2, r2, #16
 800380c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f042 0201 	orr.w	r2, r2, #1
 800382c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2220      	movs	r2, #32
 8003832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	e000      	b.n	800383c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800383a:	2302      	movs	r3, #2
  }
}
 800383c:	4618      	mov	r0, r3
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003852:	2300      	movs	r3, #0
 8003854:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b20      	cmp	r3, #32
 8003860:	d12a      	bne.n	80038b8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2224      	movs	r2, #36	; 0x24
 8003866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0201 	bic.w	r2, r2, #1
 8003878:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003882:	89fb      	ldrh	r3, [r7, #14]
 8003884:	f023 030f 	bic.w	r3, r3, #15
 8003888:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	b29a      	uxth	r2, r3
 800388e:	89fb      	ldrh	r3, [r7, #14]
 8003890:	4313      	orrs	r3, r2
 8003892:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	89fa      	ldrh	r2, [r7, #14]
 800389a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0201 	orr.w	r2, r2, #1
 80038aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80038b4:	2300      	movs	r3, #0
 80038b6:	e000      	b.n	80038ba <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80038b8:	2302      	movs	r3, #2
  }
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
	...

080038c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e267      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d075      	beq.n	80039d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038e6:	4b88      	ldr	r3, [pc, #544]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 030c 	and.w	r3, r3, #12
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d00c      	beq.n	800390c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038f2:	4b85      	ldr	r3, [pc, #532]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038fa:	2b08      	cmp	r3, #8
 80038fc:	d112      	bne.n	8003924 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038fe:	4b82      	ldr	r3, [pc, #520]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003906:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800390a:	d10b      	bne.n	8003924 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800390c:	4b7e      	ldr	r3, [pc, #504]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d05b      	beq.n	80039d0 <HAL_RCC_OscConfig+0x108>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d157      	bne.n	80039d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e242      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800392c:	d106      	bne.n	800393c <HAL_RCC_OscConfig+0x74>
 800392e:	4b76      	ldr	r3, [pc, #472]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a75      	ldr	r2, [pc, #468]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003938:	6013      	str	r3, [r2, #0]
 800393a:	e01d      	b.n	8003978 <HAL_RCC_OscConfig+0xb0>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003944:	d10c      	bne.n	8003960 <HAL_RCC_OscConfig+0x98>
 8003946:	4b70      	ldr	r3, [pc, #448]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a6f      	ldr	r2, [pc, #444]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 800394c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003950:	6013      	str	r3, [r2, #0]
 8003952:	4b6d      	ldr	r3, [pc, #436]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a6c      	ldr	r2, [pc, #432]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800395c:	6013      	str	r3, [r2, #0]
 800395e:	e00b      	b.n	8003978 <HAL_RCC_OscConfig+0xb0>
 8003960:	4b69      	ldr	r3, [pc, #420]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a68      	ldr	r2, [pc, #416]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003966:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800396a:	6013      	str	r3, [r2, #0]
 800396c:	4b66      	ldr	r3, [pc, #408]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a65      	ldr	r2, [pc, #404]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003972:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003976:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d013      	beq.n	80039a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003980:	f7fe fb9c 	bl	80020bc <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003988:	f7fe fb98 	bl	80020bc <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b64      	cmp	r3, #100	; 0x64
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e207      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800399a:	4b5b      	ldr	r3, [pc, #364]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0f0      	beq.n	8003988 <HAL_RCC_OscConfig+0xc0>
 80039a6:	e014      	b.n	80039d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a8:	f7fe fb88 	bl	80020bc <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039b0:	f7fe fb84 	bl	80020bc <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b64      	cmp	r3, #100	; 0x64
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e1f3      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039c2:	4b51      	ldr	r3, [pc, #324]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1f0      	bne.n	80039b0 <HAL_RCC_OscConfig+0xe8>
 80039ce:	e000      	b.n	80039d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d063      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039de:	4b4a      	ldr	r3, [pc, #296]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 030c 	and.w	r3, r3, #12
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00b      	beq.n	8003a02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039ea:	4b47      	ldr	r3, [pc, #284]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039f2:	2b08      	cmp	r3, #8
 80039f4:	d11c      	bne.n	8003a30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039f6:	4b44      	ldr	r3, [pc, #272]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d116      	bne.n	8003a30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a02:	4b41      	ldr	r3, [pc, #260]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d005      	beq.n	8003a1a <HAL_RCC_OscConfig+0x152>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d001      	beq.n	8003a1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e1c7      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a1a:	4b3b      	ldr	r3, [pc, #236]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	4937      	ldr	r1, [pc, #220]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a2e:	e03a      	b.n	8003aa6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d020      	beq.n	8003a7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a38:	4b34      	ldr	r3, [pc, #208]	; (8003b0c <HAL_RCC_OscConfig+0x244>)
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a3e:	f7fe fb3d 	bl	80020bc <HAL_GetTick>
 8003a42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a44:	e008      	b.n	8003a58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a46:	f7fe fb39 	bl	80020bc <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d901      	bls.n	8003a58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e1a8      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a58:	4b2b      	ldr	r3, [pc, #172]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0f0      	beq.n	8003a46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a64:	4b28      	ldr	r3, [pc, #160]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	4925      	ldr	r1, [pc, #148]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	600b      	str	r3, [r1, #0]
 8003a78:	e015      	b.n	8003aa6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a7a:	4b24      	ldr	r3, [pc, #144]	; (8003b0c <HAL_RCC_OscConfig+0x244>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a80:	f7fe fb1c 	bl	80020bc <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a88:	f7fe fb18 	bl	80020bc <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e187      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a9a:	4b1b      	ldr	r3, [pc, #108]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1f0      	bne.n	8003a88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0308 	and.w	r3, r3, #8
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d036      	beq.n	8003b20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d016      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aba:	4b15      	ldr	r3, [pc, #84]	; (8003b10 <HAL_RCC_OscConfig+0x248>)
 8003abc:	2201      	movs	r2, #1
 8003abe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac0:	f7fe fafc 	bl	80020bc <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ac8:	f7fe faf8 	bl	80020bc <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e167      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ada:	4b0b      	ldr	r3, [pc, #44]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0f0      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x200>
 8003ae6:	e01b      	b.n	8003b20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ae8:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <HAL_RCC_OscConfig+0x248>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aee:	f7fe fae5 	bl	80020bc <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003af4:	e00e      	b.n	8003b14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003af6:	f7fe fae1 	bl	80020bc <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d907      	bls.n	8003b14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e150      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	42470000 	.word	0x42470000
 8003b10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b14:	4b88      	ldr	r3, [pc, #544]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003b16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1ea      	bne.n	8003af6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 8097 	beq.w	8003c5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b32:	4b81      	ldr	r3, [pc, #516]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10f      	bne.n	8003b5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60bb      	str	r3, [r7, #8]
 8003b42:	4b7d      	ldr	r3, [pc, #500]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	4a7c      	ldr	r2, [pc, #496]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b4e:	4b7a      	ldr	r3, [pc, #488]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b56:	60bb      	str	r3, [r7, #8]
 8003b58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b5e:	4b77      	ldr	r3, [pc, #476]	; (8003d3c <HAL_RCC_OscConfig+0x474>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d118      	bne.n	8003b9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b6a:	4b74      	ldr	r3, [pc, #464]	; (8003d3c <HAL_RCC_OscConfig+0x474>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a73      	ldr	r2, [pc, #460]	; (8003d3c <HAL_RCC_OscConfig+0x474>)
 8003b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b76:	f7fe faa1 	bl	80020bc <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b7c:	e008      	b.n	8003b90 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b7e:	f7fe fa9d 	bl	80020bc <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e10c      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b90:	4b6a      	ldr	r3, [pc, #424]	; (8003d3c <HAL_RCC_OscConfig+0x474>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0f0      	beq.n	8003b7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d106      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x2ea>
 8003ba4:	4b64      	ldr	r3, [pc, #400]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba8:	4a63      	ldr	r2, [pc, #396]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003baa:	f043 0301 	orr.w	r3, r3, #1
 8003bae:	6713      	str	r3, [r2, #112]	; 0x70
 8003bb0:	e01c      	b.n	8003bec <HAL_RCC_OscConfig+0x324>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	2b05      	cmp	r3, #5
 8003bb8:	d10c      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x30c>
 8003bba:	4b5f      	ldr	r3, [pc, #380]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bbe:	4a5e      	ldr	r2, [pc, #376]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003bc0:	f043 0304 	orr.w	r3, r3, #4
 8003bc4:	6713      	str	r3, [r2, #112]	; 0x70
 8003bc6:	4b5c      	ldr	r3, [pc, #368]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bca:	4a5b      	ldr	r2, [pc, #364]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003bcc:	f043 0301 	orr.w	r3, r3, #1
 8003bd0:	6713      	str	r3, [r2, #112]	; 0x70
 8003bd2:	e00b      	b.n	8003bec <HAL_RCC_OscConfig+0x324>
 8003bd4:	4b58      	ldr	r3, [pc, #352]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd8:	4a57      	ldr	r2, [pc, #348]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003bda:	f023 0301 	bic.w	r3, r3, #1
 8003bde:	6713      	str	r3, [r2, #112]	; 0x70
 8003be0:	4b55      	ldr	r3, [pc, #340]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be4:	4a54      	ldr	r2, [pc, #336]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003be6:	f023 0304 	bic.w	r3, r3, #4
 8003bea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d015      	beq.n	8003c20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf4:	f7fe fa62 	bl	80020bc <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bfa:	e00a      	b.n	8003c12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bfc:	f7fe fa5e 	bl	80020bc <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e0cb      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c12:	4b49      	ldr	r3, [pc, #292]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0ee      	beq.n	8003bfc <HAL_RCC_OscConfig+0x334>
 8003c1e:	e014      	b.n	8003c4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c20:	f7fe fa4c 	bl	80020bc <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c26:	e00a      	b.n	8003c3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c28:	f7fe fa48 	bl	80020bc <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e0b5      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c3e:	4b3e      	ldr	r3, [pc, #248]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1ee      	bne.n	8003c28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c4a:	7dfb      	ldrb	r3, [r7, #23]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d105      	bne.n	8003c5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c50:	4b39      	ldr	r3, [pc, #228]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c54:	4a38      	ldr	r2, [pc, #224]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003c56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 80a1 	beq.w	8003da8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c66:	4b34      	ldr	r3, [pc, #208]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f003 030c 	and.w	r3, r3, #12
 8003c6e:	2b08      	cmp	r3, #8
 8003c70:	d05c      	beq.n	8003d2c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d141      	bne.n	8003cfe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c7a:	4b31      	ldr	r3, [pc, #196]	; (8003d40 <HAL_RCC_OscConfig+0x478>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c80:	f7fe fa1c 	bl	80020bc <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c88:	f7fe fa18 	bl	80020bc <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e087      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c9a:	4b27      	ldr	r3, [pc, #156]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1f0      	bne.n	8003c88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	69da      	ldr	r2, [r3, #28]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	019b      	lsls	r3, r3, #6
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbc:	085b      	lsrs	r3, r3, #1
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	041b      	lsls	r3, r3, #16
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc8:	061b      	lsls	r3, r3, #24
 8003cca:	491b      	ldr	r1, [pc, #108]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cd0:	4b1b      	ldr	r3, [pc, #108]	; (8003d40 <HAL_RCC_OscConfig+0x478>)
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd6:	f7fe f9f1 	bl	80020bc <HAL_GetTick>
 8003cda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cde:	f7fe f9ed 	bl	80020bc <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e05c      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cf0:	4b11      	ldr	r3, [pc, #68]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0f0      	beq.n	8003cde <HAL_RCC_OscConfig+0x416>
 8003cfc:	e054      	b.n	8003da8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cfe:	4b10      	ldr	r3, [pc, #64]	; (8003d40 <HAL_RCC_OscConfig+0x478>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d04:	f7fe f9da 	bl	80020bc <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d0c:	f7fe f9d6 	bl	80020bc <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e045      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d1e:	4b06      	ldr	r3, [pc, #24]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1f0      	bne.n	8003d0c <HAL_RCC_OscConfig+0x444>
 8003d2a:	e03d      	b.n	8003da8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d107      	bne.n	8003d44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e038      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	40007000 	.word	0x40007000
 8003d40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d44:	4b1b      	ldr	r3, [pc, #108]	; (8003db4 <HAL_RCC_OscConfig+0x4ec>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d028      	beq.n	8003da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d121      	bne.n	8003da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d11a      	bne.n	8003da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d74:	4013      	ands	r3, r2
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d111      	bne.n	8003da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8a:	085b      	lsrs	r3, r3, #1
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d107      	bne.n	8003da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d001      	beq.n	8003da8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e000      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3718      	adds	r7, #24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	40023800 	.word	0x40023800

08003db8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e0cc      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dcc:	4b68      	ldr	r3, [pc, #416]	; (8003f70 <HAL_RCC_ClockConfig+0x1b8>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 030f 	and.w	r3, r3, #15
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d90c      	bls.n	8003df4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dda:	4b65      	ldr	r3, [pc, #404]	; (8003f70 <HAL_RCC_ClockConfig+0x1b8>)
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de2:	4b63      	ldr	r3, [pc, #396]	; (8003f70 <HAL_RCC_ClockConfig+0x1b8>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 030f 	and.w	r3, r3, #15
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d001      	beq.n	8003df4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e0b8      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d020      	beq.n	8003e42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d005      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e0c:	4b59      	ldr	r3, [pc, #356]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	4a58      	ldr	r2, [pc, #352]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0308 	and.w	r3, r3, #8
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d005      	beq.n	8003e30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e24:	4b53      	ldr	r3, [pc, #332]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	4a52      	ldr	r2, [pc, #328]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e30:	4b50      	ldr	r3, [pc, #320]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	494d      	ldr	r1, [pc, #308]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d044      	beq.n	8003ed8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d107      	bne.n	8003e66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e56:	4b47      	ldr	r3, [pc, #284]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d119      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e07f      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d003      	beq.n	8003e76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e72:	2b03      	cmp	r3, #3
 8003e74:	d107      	bne.n	8003e86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e76:	4b3f      	ldr	r3, [pc, #252]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d109      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e06f      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e86:	4b3b      	ldr	r3, [pc, #236]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e067      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e96:	4b37      	ldr	r3, [pc, #220]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f023 0203 	bic.w	r2, r3, #3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	4934      	ldr	r1, [pc, #208]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ea8:	f7fe f908 	bl	80020bc <HAL_GetTick>
 8003eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eae:	e00a      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eb0:	f7fe f904 	bl	80020bc <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e04f      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec6:	4b2b      	ldr	r3, [pc, #172]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 020c 	and.w	r2, r3, #12
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d1eb      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ed8:	4b25      	ldr	r3, [pc, #148]	; (8003f70 <HAL_RCC_ClockConfig+0x1b8>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 030f 	and.w	r3, r3, #15
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d20c      	bcs.n	8003f00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee6:	4b22      	ldr	r3, [pc, #136]	; (8003f70 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	b2d2      	uxtb	r2, r2
 8003eec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eee:	4b20      	ldr	r3, [pc, #128]	; (8003f70 <HAL_RCC_ClockConfig+0x1b8>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 030f 	and.w	r3, r3, #15
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d001      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e032      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d008      	beq.n	8003f1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f0c:	4b19      	ldr	r3, [pc, #100]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	4916      	ldr	r1, [pc, #88]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0308 	and.w	r3, r3, #8
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d009      	beq.n	8003f3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f2a:	4b12      	ldr	r3, [pc, #72]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	490e      	ldr	r1, [pc, #56]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f3e:	f000 f821 	bl	8003f84 <HAL_RCC_GetSysClockFreq>
 8003f42:	4602      	mov	r2, r0
 8003f44:	4b0b      	ldr	r3, [pc, #44]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	091b      	lsrs	r3, r3, #4
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	490a      	ldr	r1, [pc, #40]	; (8003f78 <HAL_RCC_ClockConfig+0x1c0>)
 8003f50:	5ccb      	ldrb	r3, [r1, r3]
 8003f52:	fa22 f303 	lsr.w	r3, r2, r3
 8003f56:	4a09      	ldr	r2, [pc, #36]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003f58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f5a:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <HAL_RCC_ClockConfig+0x1c8>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7fe f868 	bl	8002034 <HAL_InitTick>

  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	40023c00 	.word	0x40023c00
 8003f74:	40023800 	.word	0x40023800
 8003f78:	08006ea0 	.word	0x08006ea0
 8003f7c:	20000018 	.word	0x20000018
 8003f80:	2000001c 	.word	0x2000001c

08003f84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f88:	b090      	sub	sp, #64	; 0x40
 8003f8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	637b      	str	r3, [r7, #52]	; 0x34
 8003f90:	2300      	movs	r3, #0
 8003f92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f94:	2300      	movs	r3, #0
 8003f96:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f9c:	4b59      	ldr	r3, [pc, #356]	; (8004104 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f003 030c 	and.w	r3, r3, #12
 8003fa4:	2b08      	cmp	r3, #8
 8003fa6:	d00d      	beq.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x40>
 8003fa8:	2b08      	cmp	r3, #8
 8003faa:	f200 80a1 	bhi.w	80040f0 <HAL_RCC_GetSysClockFreq+0x16c>
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d002      	beq.n	8003fb8 <HAL_RCC_GetSysClockFreq+0x34>
 8003fb2:	2b04      	cmp	r3, #4
 8003fb4:	d003      	beq.n	8003fbe <HAL_RCC_GetSysClockFreq+0x3a>
 8003fb6:	e09b      	b.n	80040f0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fb8:	4b53      	ldr	r3, [pc, #332]	; (8004108 <HAL_RCC_GetSysClockFreq+0x184>)
 8003fba:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003fbc:	e09b      	b.n	80040f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fbe:	4b53      	ldr	r3, [pc, #332]	; (800410c <HAL_RCC_GetSysClockFreq+0x188>)
 8003fc0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003fc2:	e098      	b.n	80040f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fc4:	4b4f      	ldr	r3, [pc, #316]	; (8004104 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fcc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fce:	4b4d      	ldr	r3, [pc, #308]	; (8004104 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d028      	beq.n	800402c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fda:	4b4a      	ldr	r3, [pc, #296]	; (8004104 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	099b      	lsrs	r3, r3, #6
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	623b      	str	r3, [r7, #32]
 8003fe4:	627a      	str	r2, [r7, #36]	; 0x24
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003fec:	2100      	movs	r1, #0
 8003fee:	4b47      	ldr	r3, [pc, #284]	; (800410c <HAL_RCC_GetSysClockFreq+0x188>)
 8003ff0:	fb03 f201 	mul.w	r2, r3, r1
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	fb00 f303 	mul.w	r3, r0, r3
 8003ffa:	4413      	add	r3, r2
 8003ffc:	4a43      	ldr	r2, [pc, #268]	; (800410c <HAL_RCC_GetSysClockFreq+0x188>)
 8003ffe:	fba0 1202 	umull	r1, r2, r0, r2
 8004002:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004004:	460a      	mov	r2, r1
 8004006:	62ba      	str	r2, [r7, #40]	; 0x28
 8004008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800400a:	4413      	add	r3, r2
 800400c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800400e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004010:	2200      	movs	r2, #0
 8004012:	61bb      	str	r3, [r7, #24]
 8004014:	61fa      	str	r2, [r7, #28]
 8004016:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800401a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800401e:	f7fc f8ed 	bl	80001fc <__aeabi_uldivmod>
 8004022:	4602      	mov	r2, r0
 8004024:	460b      	mov	r3, r1
 8004026:	4613      	mov	r3, r2
 8004028:	63fb      	str	r3, [r7, #60]	; 0x3c
 800402a:	e053      	b.n	80040d4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800402c:	4b35      	ldr	r3, [pc, #212]	; (8004104 <HAL_RCC_GetSysClockFreq+0x180>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	099b      	lsrs	r3, r3, #6
 8004032:	2200      	movs	r2, #0
 8004034:	613b      	str	r3, [r7, #16]
 8004036:	617a      	str	r2, [r7, #20]
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800403e:	f04f 0b00 	mov.w	fp, #0
 8004042:	4652      	mov	r2, sl
 8004044:	465b      	mov	r3, fp
 8004046:	f04f 0000 	mov.w	r0, #0
 800404a:	f04f 0100 	mov.w	r1, #0
 800404e:	0159      	lsls	r1, r3, #5
 8004050:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004054:	0150      	lsls	r0, r2, #5
 8004056:	4602      	mov	r2, r0
 8004058:	460b      	mov	r3, r1
 800405a:	ebb2 080a 	subs.w	r8, r2, sl
 800405e:	eb63 090b 	sbc.w	r9, r3, fp
 8004062:	f04f 0200 	mov.w	r2, #0
 8004066:	f04f 0300 	mov.w	r3, #0
 800406a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800406e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004072:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004076:	ebb2 0408 	subs.w	r4, r2, r8
 800407a:	eb63 0509 	sbc.w	r5, r3, r9
 800407e:	f04f 0200 	mov.w	r2, #0
 8004082:	f04f 0300 	mov.w	r3, #0
 8004086:	00eb      	lsls	r3, r5, #3
 8004088:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800408c:	00e2      	lsls	r2, r4, #3
 800408e:	4614      	mov	r4, r2
 8004090:	461d      	mov	r5, r3
 8004092:	eb14 030a 	adds.w	r3, r4, sl
 8004096:	603b      	str	r3, [r7, #0]
 8004098:	eb45 030b 	adc.w	r3, r5, fp
 800409c:	607b      	str	r3, [r7, #4]
 800409e:	f04f 0200 	mov.w	r2, #0
 80040a2:	f04f 0300 	mov.w	r3, #0
 80040a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040aa:	4629      	mov	r1, r5
 80040ac:	028b      	lsls	r3, r1, #10
 80040ae:	4621      	mov	r1, r4
 80040b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040b4:	4621      	mov	r1, r4
 80040b6:	028a      	lsls	r2, r1, #10
 80040b8:	4610      	mov	r0, r2
 80040ba:	4619      	mov	r1, r3
 80040bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040be:	2200      	movs	r2, #0
 80040c0:	60bb      	str	r3, [r7, #8]
 80040c2:	60fa      	str	r2, [r7, #12]
 80040c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040c8:	f7fc f898 	bl	80001fc <__aeabi_uldivmod>
 80040cc:	4602      	mov	r2, r0
 80040ce:	460b      	mov	r3, r1
 80040d0:	4613      	mov	r3, r2
 80040d2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040d4:	4b0b      	ldr	r3, [pc, #44]	; (8004104 <HAL_RCC_GetSysClockFreq+0x180>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	0c1b      	lsrs	r3, r3, #16
 80040da:	f003 0303 	and.w	r3, r3, #3
 80040de:	3301      	adds	r3, #1
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80040e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80040ee:	e002      	b.n	80040f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040f0:	4b05      	ldr	r3, [pc, #20]	; (8004108 <HAL_RCC_GetSysClockFreq+0x184>)
 80040f2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80040f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3740      	adds	r7, #64	; 0x40
 80040fc:	46bd      	mov	sp, r7
 80040fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004102:	bf00      	nop
 8004104:	40023800 	.word	0x40023800
 8004108:	00f42400 	.word	0x00f42400
 800410c:	017d7840 	.word	0x017d7840

08004110 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004114:	4b03      	ldr	r3, [pc, #12]	; (8004124 <HAL_RCC_GetHCLKFreq+0x14>)
 8004116:	681b      	ldr	r3, [r3, #0]
}
 8004118:	4618      	mov	r0, r3
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	20000018 	.word	0x20000018

08004128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800412c:	f7ff fff0 	bl	8004110 <HAL_RCC_GetHCLKFreq>
 8004130:	4602      	mov	r2, r0
 8004132:	4b05      	ldr	r3, [pc, #20]	; (8004148 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	0a9b      	lsrs	r3, r3, #10
 8004138:	f003 0307 	and.w	r3, r3, #7
 800413c:	4903      	ldr	r1, [pc, #12]	; (800414c <HAL_RCC_GetPCLK1Freq+0x24>)
 800413e:	5ccb      	ldrb	r3, [r1, r3]
 8004140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004144:	4618      	mov	r0, r3
 8004146:	bd80      	pop	{r7, pc}
 8004148:	40023800 	.word	0x40023800
 800414c:	08006eb0 	.word	0x08006eb0

08004150 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004154:	f7ff ffdc 	bl	8004110 <HAL_RCC_GetHCLKFreq>
 8004158:	4602      	mov	r2, r0
 800415a:	4b05      	ldr	r3, [pc, #20]	; (8004170 <HAL_RCC_GetPCLK2Freq+0x20>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	0b5b      	lsrs	r3, r3, #13
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	4903      	ldr	r1, [pc, #12]	; (8004174 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004166:	5ccb      	ldrb	r3, [r1, r3]
 8004168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800416c:	4618      	mov	r0, r3
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40023800 	.word	0x40023800
 8004174:	08006eb0 	.word	0x08006eb0

08004178 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004180:	2300      	movs	r3, #0
 8004182:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004184:	2300      	movs	r3, #0
 8004186:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10b      	bne.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800419c:	2b00      	cmp	r3, #0
 800419e:	d105      	bne.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d075      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80041ac:	4b91      	ldr	r3, [pc, #580]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041b2:	f7fd ff83 	bl	80020bc <HAL_GetTick>
 80041b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041b8:	e008      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80041ba:	f7fd ff7f 	bl	80020bc <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d901      	bls.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e189      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041cc:	4b8a      	ldr	r3, [pc, #552]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1f0      	bne.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d009      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	019a      	lsls	r2, r3, #6
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	071b      	lsls	r3, r3, #28
 80041f0:	4981      	ldr	r1, [pc, #516]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d01f      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004204:	4b7c      	ldr	r3, [pc, #496]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004206:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800420a:	0f1b      	lsrs	r3, r3, #28
 800420c:	f003 0307 	and.w	r3, r3, #7
 8004210:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	019a      	lsls	r2, r3, #6
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	061b      	lsls	r3, r3, #24
 800421e:	431a      	orrs	r2, r3
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	071b      	lsls	r3, r3, #28
 8004224:	4974      	ldr	r1, [pc, #464]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004226:	4313      	orrs	r3, r2
 8004228:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800422c:	4b72      	ldr	r3, [pc, #456]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800422e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004232:	f023 021f 	bic.w	r2, r3, #31
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	3b01      	subs	r3, #1
 800423c:	496e      	ldr	r1, [pc, #440]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800423e:	4313      	orrs	r3, r2
 8004240:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00d      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	019a      	lsls	r2, r3, #6
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	061b      	lsls	r3, r3, #24
 800425c:	431a      	orrs	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	071b      	lsls	r3, r3, #28
 8004264:	4964      	ldr	r1, [pc, #400]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004266:	4313      	orrs	r3, r2
 8004268:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800426c:	4b61      	ldr	r3, [pc, #388]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800426e:	2201      	movs	r2, #1
 8004270:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004272:	f7fd ff23 	bl	80020bc <HAL_GetTick>
 8004276:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004278:	e008      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800427a:	f7fd ff1f 	bl	80020bc <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d901      	bls.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e129      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800428c:	4b5a      	ldr	r3, [pc, #360]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d0f0      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0304 	and.w	r3, r3, #4
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d105      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d079      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80042b0:	4b52      	ldr	r3, [pc, #328]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042b6:	f7fd ff01 	bl	80020bc <HAL_GetTick>
 80042ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042bc:	e008      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80042be:	f7fd fefd 	bl	80020bc <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d901      	bls.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e107      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042d0:	4b49      	ldr	r3, [pc, #292]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042dc:	d0ef      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0304 	and.w	r3, r3, #4
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d020      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80042ea:	4b43      	ldr	r3, [pc, #268]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80042ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f0:	0f1b      	lsrs	r3, r3, #28
 80042f2:	f003 0307 	and.w	r3, r3, #7
 80042f6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	019a      	lsls	r2, r3, #6
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	061b      	lsls	r3, r3, #24
 8004304:	431a      	orrs	r2, r3
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	071b      	lsls	r3, r3, #28
 800430a:	493b      	ldr	r1, [pc, #236]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800430c:	4313      	orrs	r3, r2
 800430e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004312:	4b39      	ldr	r3, [pc, #228]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004314:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004318:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	3b01      	subs	r3, #1
 8004322:	021b      	lsls	r3, r3, #8
 8004324:	4934      	ldr	r1, [pc, #208]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004326:	4313      	orrs	r3, r2
 8004328:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0308 	and.w	r3, r3, #8
 8004334:	2b00      	cmp	r3, #0
 8004336:	d01e      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004338:	4b2f      	ldr	r3, [pc, #188]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800433a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800433e:	0e1b      	lsrs	r3, r3, #24
 8004340:	f003 030f 	and.w	r3, r3, #15
 8004344:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	019a      	lsls	r2, r3, #6
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	061b      	lsls	r3, r3, #24
 8004350:	431a      	orrs	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	071b      	lsls	r3, r3, #28
 8004358:	4927      	ldr	r1, [pc, #156]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800435a:	4313      	orrs	r3, r2
 800435c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004360:	4b25      	ldr	r3, [pc, #148]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004362:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004366:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	4922      	ldr	r1, [pc, #136]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004370:	4313      	orrs	r3, r2
 8004372:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004376:	4b21      	ldr	r3, [pc, #132]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004378:	2201      	movs	r2, #1
 800437a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800437c:	f7fd fe9e 	bl	80020bc <HAL_GetTick>
 8004380:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004382:	e008      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004384:	f7fd fe9a 	bl	80020bc <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d901      	bls.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e0a4      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004396:	4b18      	ldr	r3, [pc, #96]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800439e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043a2:	d1ef      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0320 	and.w	r3, r3, #32
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 808b 	beq.w	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043b2:	2300      	movs	r3, #0
 80043b4:	60fb      	str	r3, [r7, #12]
 80043b6:	4b10      	ldr	r3, [pc, #64]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	4a0f      	ldr	r2, [pc, #60]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80043bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043c0:	6413      	str	r3, [r2, #64]	; 0x40
 80043c2:	4b0d      	ldr	r3, [pc, #52]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ca:	60fb      	str	r3, [r7, #12]
 80043cc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80043ce:	4b0c      	ldr	r3, [pc, #48]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a0b      	ldr	r2, [pc, #44]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80043d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043d8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043da:	f7fd fe6f 	bl	80020bc <HAL_GetTick>
 80043de:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043e0:	e010      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80043e2:	f7fd fe6b 	bl	80020bc <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d909      	bls.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e075      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80043f4:	42470068 	.word	0x42470068
 80043f8:	40023800 	.word	0x40023800
 80043fc:	42470070 	.word	0x42470070
 8004400:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004404:	4b38      	ldr	r3, [pc, #224]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440c:	2b00      	cmp	r3, #0
 800440e:	d0e8      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004410:	4b36      	ldr	r3, [pc, #216]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004414:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004418:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d02f      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004424:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	429a      	cmp	r2, r3
 800442c:	d028      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800442e:	4b2f      	ldr	r3, [pc, #188]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004436:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004438:	4b2d      	ldr	r3, [pc, #180]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800443a:	2201      	movs	r2, #1
 800443c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800443e:	4b2c      	ldr	r3, [pc, #176]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004440:	2200      	movs	r2, #0
 8004442:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004444:	4a29      	ldr	r2, [pc, #164]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800444a:	4b28      	ldr	r3, [pc, #160]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800444c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b01      	cmp	r3, #1
 8004454:	d114      	bne.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004456:	f7fd fe31 	bl	80020bc <HAL_GetTick>
 800445a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800445c:	e00a      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800445e:	f7fd fe2d 	bl	80020bc <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	f241 3288 	movw	r2, #5000	; 0x1388
 800446c:	4293      	cmp	r3, r2
 800446e:	d901      	bls.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e035      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004474:	4b1d      	ldr	r3, [pc, #116]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d0ee      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004484:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004488:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800448c:	d10d      	bne.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x332>
 800448e:	4b17      	ldr	r3, [pc, #92]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800449e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044a2:	4912      	ldr	r1, [pc, #72]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	608b      	str	r3, [r1, #8]
 80044a8:	e005      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80044aa:	4b10      	ldr	r3, [pc, #64]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	4a0f      	ldr	r2, [pc, #60]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80044b0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80044b4:	6093      	str	r3, [r2, #8]
 80044b6:	4b0d      	ldr	r3, [pc, #52]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80044b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044c2:	490a      	ldr	r1, [pc, #40]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0310 	and.w	r3, r3, #16
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d004      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80044da:	4b06      	ldr	r3, [pc, #24]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80044dc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3718      	adds	r7, #24
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	40007000 	.word	0x40007000
 80044ec:	40023800 	.word	0x40023800
 80044f0:	42470e40 	.word	0x42470e40
 80044f4:	424711e0 	.word	0x424711e0

080044f8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e073      	b.n	80045f6 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	7f5b      	ldrb	r3, [r3, #29]
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b00      	cmp	r3, #0
 8004516:	d105      	bne.n	8004524 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7fd fb06 	bl	8001b30 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2202      	movs	r2, #2
 8004528:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	f003 0310 	and.w	r3, r3, #16
 8004534:	2b10      	cmp	r3, #16
 8004536:	d055      	beq.n	80045e4 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	22ca      	movs	r2, #202	; 0xca
 800453e:	625a      	str	r2, [r3, #36]	; 0x24
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2253      	movs	r2, #83	; 0x53
 8004546:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 fa49 	bl	80049e0 <RTC_EnterInitMode>
 800454e:	4603      	mov	r3, r0
 8004550:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004552:	7bfb      	ldrb	r3, [r7, #15]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d12c      	bne.n	80045b2 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	6812      	ldr	r2, [r2, #0]
 8004562:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004566:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800456a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6899      	ldr	r1, [r3, #8]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	431a      	orrs	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	431a      	orrs	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	68d2      	ldr	r2, [r2, #12]
 8004592:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6919      	ldr	r1, [r3, #16]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	041a      	lsls	r2, r3, #16
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	430a      	orrs	r2, r1
 80045a6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 fa50 	bl	8004a4e <RTC_ExitInitMode>
 80045ae:	4603      	mov	r3, r0
 80045b0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80045b2:	7bfb      	ldrb	r3, [r7, #15]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d110      	bne.n	80045da <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80045c6:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	699a      	ldr	r2, [r3, #24]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	22ff      	movs	r2, #255	; 0xff
 80045e0:	625a      	str	r2, [r3, #36]	; 0x24
 80045e2:	e001      	b.n	80045e8 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80045e4:	2300      	movs	r3, #0
 80045e6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80045e8:	7bfb      	ldrb	r3, [r7, #15]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d102      	bne.n	80045f4 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2201      	movs	r2, #1
 80045f2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80045fe:	b590      	push	{r4, r7, lr}
 8004600:	b087      	sub	sp, #28
 8004602:	af00      	add	r7, sp, #0
 8004604:	60f8      	str	r0, [r7, #12]
 8004606:	60b9      	str	r1, [r7, #8]
 8004608:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800460a:	2300      	movs	r3, #0
 800460c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	7f1b      	ldrb	r3, [r3, #28]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d101      	bne.n	800461a <HAL_RTC_SetTime+0x1c>
 8004616:	2302      	movs	r3, #2
 8004618:	e087      	b.n	800472a <HAL_RTC_SetTime+0x12c>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2201      	movs	r2, #1
 800461e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2202      	movs	r2, #2
 8004624:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d126      	bne.n	800467a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004636:	2b00      	cmp	r3, #0
 8004638:	d102      	bne.n	8004640 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	2200      	movs	r2, #0
 800463e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	4618      	mov	r0, r3
 8004646:	f000 fa27 	bl	8004a98 <RTC_ByteToBcd2>
 800464a:	4603      	mov	r3, r0
 800464c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	785b      	ldrb	r3, [r3, #1]
 8004652:	4618      	mov	r0, r3
 8004654:	f000 fa20 	bl	8004a98 <RTC_ByteToBcd2>
 8004658:	4603      	mov	r3, r0
 800465a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800465c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	789b      	ldrb	r3, [r3, #2]
 8004662:	4618      	mov	r0, r3
 8004664:	f000 fa18 	bl	8004a98 <RTC_ByteToBcd2>
 8004668:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800466a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	78db      	ldrb	r3, [r3, #3]
 8004672:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004674:	4313      	orrs	r3, r2
 8004676:	617b      	str	r3, [r7, #20]
 8004678:	e018      	b.n	80046ac <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004684:	2b00      	cmp	r3, #0
 8004686:	d102      	bne.n	800468e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	2200      	movs	r2, #0
 800468c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	785b      	ldrb	r3, [r3, #1]
 8004698:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800469a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80046a0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	78db      	ldrb	r3, [r3, #3]
 80046a6:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80046a8:	4313      	orrs	r3, r2
 80046aa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	22ca      	movs	r2, #202	; 0xca
 80046b2:	625a      	str	r2, [r3, #36]	; 0x24
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2253      	movs	r2, #83	; 0x53
 80046ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f000 f98f 	bl	80049e0 <RTC_EnterInitMode>
 80046c2:	4603      	mov	r3, r0
 80046c4:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80046c6:	7cfb      	ldrb	r3, [r7, #19]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d120      	bne.n	800470e <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80046d6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80046da:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689a      	ldr	r2, [r3, #8]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80046ea:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6899      	ldr	r1, [r3, #8]
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	68da      	ldr	r2, [r3, #12]
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	431a      	orrs	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	430a      	orrs	r2, r1
 8004702:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f000 f9a2 	bl	8004a4e <RTC_ExitInitMode>
 800470a:	4603      	mov	r3, r0
 800470c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800470e:	7cfb      	ldrb	r3, [r7, #19]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d102      	bne.n	800471a <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2201      	movs	r2, #1
 8004718:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	22ff      	movs	r2, #255	; 0xff
 8004720:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	771a      	strb	r2, [r3, #28]

  return status;
 8004728:	7cfb      	ldrb	r3, [r7, #19]
}
 800472a:	4618      	mov	r0, r3
 800472c:	371c      	adds	r7, #28
 800472e:	46bd      	mov	sp, r7
 8004730:	bd90      	pop	{r4, r7, pc}

08004732 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b086      	sub	sp, #24
 8004736:	af00      	add	r7, sp, #0
 8004738:	60f8      	str	r0, [r7, #12]
 800473a:	60b9      	str	r1, [r7, #8]
 800473c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800473e:	2300      	movs	r3, #0
 8004740:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004764:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004768:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	0c1b      	lsrs	r3, r3, #16
 800476e:	b2db      	uxtb	r3, r3
 8004770:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004774:	b2da      	uxtb	r2, r3
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	0a1b      	lsrs	r3, r3, #8
 800477e:	b2db      	uxtb	r3, r3
 8004780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004784:	b2da      	uxtb	r2, r3
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	b2db      	uxtb	r3, r3
 800478e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004792:	b2da      	uxtb	r2, r3
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	0d9b      	lsrs	r3, r3, #22
 800479c:	b2db      	uxtb	r3, r3
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d11a      	bne.n	80047e4 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 f98e 	bl	8004ad4 <RTC_Bcd2ToByte>
 80047b8:	4603      	mov	r3, r0
 80047ba:	461a      	mov	r2, r3
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	785b      	ldrb	r3, [r3, #1]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f000 f985 	bl	8004ad4 <RTC_Bcd2ToByte>
 80047ca:	4603      	mov	r3, r0
 80047cc:	461a      	mov	r2, r3
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	789b      	ldrb	r3, [r3, #2]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 f97c 	bl	8004ad4 <RTC_Bcd2ToByte>
 80047dc:	4603      	mov	r3, r0
 80047de:	461a      	mov	r2, r3
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3718      	adds	r7, #24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80047ee:	b590      	push	{r4, r7, lr}
 80047f0:	b087      	sub	sp, #28
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	60f8      	str	r0, [r7, #12]
 80047f6:	60b9      	str	r1, [r7, #8]
 80047f8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80047fa:	2300      	movs	r3, #0
 80047fc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	7f1b      	ldrb	r3, [r3, #28]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d101      	bne.n	800480a <HAL_RTC_SetDate+0x1c>
 8004806:	2302      	movs	r3, #2
 8004808:	e071      	b.n	80048ee <HAL_RTC_SetDate+0x100>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2201      	movs	r2, #1
 800480e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2202      	movs	r2, #2
 8004814:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d10e      	bne.n	800483a <HAL_RTC_SetDate+0x4c>
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	785b      	ldrb	r3, [r3, #1]
 8004820:	f003 0310 	and.w	r3, r3, #16
 8004824:	2b00      	cmp	r3, #0
 8004826:	d008      	beq.n	800483a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	785b      	ldrb	r3, [r3, #1]
 800482c:	f023 0310 	bic.w	r3, r3, #16
 8004830:	b2db      	uxtb	r3, r3
 8004832:	330a      	adds	r3, #10
 8004834:	b2da      	uxtb	r2, r3
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d11c      	bne.n	800487a <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	78db      	ldrb	r3, [r3, #3]
 8004844:	4618      	mov	r0, r3
 8004846:	f000 f927 	bl	8004a98 <RTC_ByteToBcd2>
 800484a:	4603      	mov	r3, r0
 800484c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	785b      	ldrb	r3, [r3, #1]
 8004852:	4618      	mov	r0, r3
 8004854:	f000 f920 	bl	8004a98 <RTC_ByteToBcd2>
 8004858:	4603      	mov	r3, r0
 800485a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800485c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	789b      	ldrb	r3, [r3, #2]
 8004862:	4618      	mov	r0, r3
 8004864:	f000 f918 	bl	8004a98 <RTC_ByteToBcd2>
 8004868:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800486a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004874:	4313      	orrs	r3, r2
 8004876:	617b      	str	r3, [r7, #20]
 8004878:	e00e      	b.n	8004898 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	78db      	ldrb	r3, [r3, #3]
 800487e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	785b      	ldrb	r3, [r3, #1]
 8004884:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004886:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800488c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004894:	4313      	orrs	r3, r2
 8004896:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	22ca      	movs	r2, #202	; 0xca
 800489e:	625a      	str	r2, [r3, #36]	; 0x24
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2253      	movs	r2, #83	; 0x53
 80048a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f000 f899 	bl	80049e0 <RTC_EnterInitMode>
 80048ae:	4603      	mov	r3, r0
 80048b0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80048b2:	7cfb      	ldrb	r3, [r7, #19]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d10c      	bne.n	80048d2 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80048c2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80048c6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f000 f8c0 	bl	8004a4e <RTC_ExitInitMode>
 80048ce:	4603      	mov	r3, r0
 80048d0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80048d2:	7cfb      	ldrb	r3, [r7, #19]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d102      	bne.n	80048de <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2201      	movs	r2, #1
 80048dc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	22ff      	movs	r2, #255	; 0xff
 80048e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	771a      	strb	r2, [r3, #28]

  return status;
 80048ec:	7cfb      	ldrb	r3, [r7, #19]
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	371c      	adds	r7, #28
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd90      	pop	{r4, r7, pc}

080048f6 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b086      	sub	sp, #24
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	60f8      	str	r0, [r7, #12]
 80048fe:	60b9      	str	r1, [r7, #8]
 8004900:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004902:	2300      	movs	r3, #0
 8004904:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004910:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004914:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	0c1b      	lsrs	r3, r3, #16
 800491a:	b2da      	uxtb	r2, r3
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	0a1b      	lsrs	r3, r3, #8
 8004924:	b2db      	uxtb	r3, r3
 8004926:	f003 031f 	and.w	r3, r3, #31
 800492a:	b2da      	uxtb	r2, r3
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	b2db      	uxtb	r3, r3
 8004934:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004938:	b2da      	uxtb	r2, r3
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	0b5b      	lsrs	r3, r3, #13
 8004942:	b2db      	uxtb	r3, r3
 8004944:	f003 0307 	and.w	r3, r3, #7
 8004948:	b2da      	uxtb	r2, r3
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d11a      	bne.n	800498a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	78db      	ldrb	r3, [r3, #3]
 8004958:	4618      	mov	r0, r3
 800495a:	f000 f8bb 	bl	8004ad4 <RTC_Bcd2ToByte>
 800495e:	4603      	mov	r3, r0
 8004960:	461a      	mov	r2, r3
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	785b      	ldrb	r3, [r3, #1]
 800496a:	4618      	mov	r0, r3
 800496c:	f000 f8b2 	bl	8004ad4 <RTC_Bcd2ToByte>
 8004970:	4603      	mov	r3, r0
 8004972:	461a      	mov	r2, r3
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	789b      	ldrb	r3, [r3, #2]
 800497c:	4618      	mov	r0, r3
 800497e:	f000 f8a9 	bl	8004ad4 <RTC_Bcd2ToByte>
 8004982:	4603      	mov	r3, r0
 8004984:	461a      	mov	r2, r3
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3718      	adds	r7, #24
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800499c:	2300      	movs	r3, #0
 800499e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a0d      	ldr	r2, [pc, #52]	; (80049dc <HAL_RTC_WaitForSynchro+0x48>)
 80049a6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049a8:	f7fd fb88 	bl	80020bc <HAL_GetTick>
 80049ac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80049ae:	e009      	b.n	80049c4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80049b0:	f7fd fb84 	bl	80020bc <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049be:	d901      	bls.n	80049c4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e007      	b.n	80049d4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	f003 0320 	and.w	r3, r3, #32
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d0ee      	beq.n	80049b0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3710      	adds	r7, #16
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	00017f5f 	.word	0x00017f5f

080049e0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049e8:	2300      	movs	r3, #0
 80049ea:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80049ec:	2300      	movs	r3, #0
 80049ee:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d122      	bne.n	8004a44 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68da      	ldr	r2, [r3, #12]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a0c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a0e:	f7fd fb55 	bl	80020bc <HAL_GetTick>
 8004a12:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004a14:	e00c      	b.n	8004a30 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004a16:	f7fd fb51 	bl	80020bc <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a24:	d904      	bls.n	8004a30 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2204      	movs	r2, #4
 8004a2a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d102      	bne.n	8004a44 <RTC_EnterInitMode+0x64>
 8004a3e:	7bfb      	ldrb	r3, [r7, #15]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d1e8      	bne.n	8004a16 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b084      	sub	sp, #16
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a56:	2300      	movs	r3, #0
 8004a58:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68da      	ldr	r2, [r3, #12]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a68:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f003 0320 	and.w	r3, r3, #32
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d10a      	bne.n	8004a8e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f7ff ff8b 	bl	8004994 <HAL_RTC_WaitForSynchro>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d004      	beq.n	8004a8e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2204      	movs	r2, #4
 8004a88:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004aa6:	e005      	b.n	8004ab4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	3301      	adds	r3, #1
 8004aac:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004aae:	79fb      	ldrb	r3, [r7, #7]
 8004ab0:	3b0a      	subs	r3, #10
 8004ab2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004ab4:	79fb      	ldrb	r3, [r7, #7]
 8004ab6:	2b09      	cmp	r3, #9
 8004ab8:	d8f6      	bhi.n	8004aa8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	011b      	lsls	r3, r3, #4
 8004ac0:	b2da      	uxtb	r2, r3
 8004ac2:	79fb      	ldrb	r3, [r7, #7]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	b2db      	uxtb	r3, r3
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	4603      	mov	r3, r0
 8004adc:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8004ae2:	79fb      	ldrb	r3, [r7, #7]
 8004ae4:	091b      	lsrs	r3, r3, #4
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	461a      	mov	r2, r3
 8004aea:	4613      	mov	r3, r2
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	4413      	add	r3, r2
 8004af0:	005b      	lsls	r3, r3, #1
 8004af2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	b2da      	uxtb	r2, r3
 8004af8:	79fb      	ldrb	r3, [r7, #7]
 8004afa:	f003 030f 	and.w	r3, r3, #15
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	4413      	add	r3, r2
 8004b02:	b2db      	uxtb	r3, r3
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3714      	adds	r7, #20
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e07b      	b.n	8004c1a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d108      	bne.n	8004b3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b32:	d009      	beq.n	8004b48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	61da      	str	r2, [r3, #28]
 8004b3a:	e005      	b.n	8004b48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d106      	bne.n	8004b68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7fd f80e 	bl	8001b84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b7e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b90:	431a      	orrs	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b9a:	431a      	orrs	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	431a      	orrs	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bcc:	ea42 0103 	orr.w	r1, r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	0c1b      	lsrs	r3, r3, #16
 8004be6:	f003 0104 	and.w	r1, r3, #4
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bee:	f003 0210 	and.w	r2, r3, #16
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	69da      	ldr	r2, [r3, #28]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c08:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3708      	adds	r7, #8
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b088      	sub	sp, #32
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	60f8      	str	r0, [r7, #12]
 8004c2a:	60b9      	str	r1, [r7, #8]
 8004c2c:	603b      	str	r3, [r7, #0]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c32:	2300      	movs	r3, #0
 8004c34:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d101      	bne.n	8004c44 <HAL_SPI_Transmit+0x22>
 8004c40:	2302      	movs	r3, #2
 8004c42:	e12d      	b.n	8004ea0 <HAL_SPI_Transmit+0x27e>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c4c:	f7fd fa36 	bl	80020bc <HAL_GetTick>
 8004c50:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c52:	88fb      	ldrh	r3, [r7, #6]
 8004c54:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d002      	beq.n	8004c68 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c62:	2302      	movs	r3, #2
 8004c64:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c66:	e116      	b.n	8004e96 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d002      	beq.n	8004c74 <HAL_SPI_Transmit+0x52>
 8004c6e:	88fb      	ldrh	r3, [r7, #6]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d102      	bne.n	8004c7a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c78:	e10d      	b.n	8004e96 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2203      	movs	r2, #3
 8004c7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	88fa      	ldrh	r2, [r7, #6]
 8004c92:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	88fa      	ldrh	r2, [r7, #6]
 8004c98:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cc0:	d10f      	bne.n	8004ce2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cd0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ce0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cec:	2b40      	cmp	r3, #64	; 0x40
 8004cee:	d007      	beq.n	8004d00 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cfe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d08:	d14f      	bne.n	8004daa <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d002      	beq.n	8004d18 <HAL_SPI_Transmit+0xf6>
 8004d12:	8afb      	ldrh	r3, [r7, #22]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d142      	bne.n	8004d9e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1c:	881a      	ldrh	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d28:	1c9a      	adds	r2, r3, #2
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	3b01      	subs	r3, #1
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d3c:	e02f      	b.n	8004d9e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d112      	bne.n	8004d72 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d50:	881a      	ldrh	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5c:	1c9a      	adds	r2, r3, #2
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d70:	e015      	b.n	8004d9e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d72:	f7fd f9a3 	bl	80020bc <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	683a      	ldr	r2, [r7, #0]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d803      	bhi.n	8004d8a <HAL_SPI_Transmit+0x168>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d88:	d102      	bne.n	8004d90 <HAL_SPI_Transmit+0x16e>
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d106      	bne.n	8004d9e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004d9c:	e07b      	b.n	8004e96 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1ca      	bne.n	8004d3e <HAL_SPI_Transmit+0x11c>
 8004da8:	e050      	b.n	8004e4c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d002      	beq.n	8004db8 <HAL_SPI_Transmit+0x196>
 8004db2:	8afb      	ldrh	r3, [r7, #22]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d144      	bne.n	8004e42 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	330c      	adds	r3, #12
 8004dc2:	7812      	ldrb	r2, [r2, #0]
 8004dc4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dca:	1c5a      	adds	r2, r3, #1
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004dde:	e030      	b.n	8004e42 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d113      	bne.n	8004e16 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	330c      	adds	r3, #12
 8004df8:	7812      	ldrb	r2, [r2, #0]
 8004dfa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e00:	1c5a      	adds	r2, r3, #1
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e14:	e015      	b.n	8004e42 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e16:	f7fd f951 	bl	80020bc <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d803      	bhi.n	8004e2e <HAL_SPI_Transmit+0x20c>
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e2c:	d102      	bne.n	8004e34 <HAL_SPI_Transmit+0x212>
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d106      	bne.n	8004e42 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004e40:	e029      	b.n	8004e96 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1c9      	bne.n	8004de0 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e4c:	69ba      	ldr	r2, [r7, #24]
 8004e4e:	6839      	ldr	r1, [r7, #0]
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f000 fbdf 	bl	8005614 <SPI_EndRxTxTransaction>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d002      	beq.n	8004e62 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2220      	movs	r2, #32
 8004e60:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10a      	bne.n	8004e80 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	613b      	str	r3, [r7, #16]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	613b      	str	r3, [r7, #16]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	613b      	str	r3, [r7, #16]
 8004e7e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d002      	beq.n	8004e8e <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	77fb      	strb	r3, [r7, #31]
 8004e8c:	e003      	b.n	8004e96 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2201      	movs	r2, #1
 8004e92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3720      	adds	r7, #32
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b088      	sub	sp, #32
 8004eac:	af02      	add	r7, sp, #8
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	603b      	str	r3, [r7, #0]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d002      	beq.n	8004ece <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004ec8:	2302      	movs	r3, #2
 8004eca:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ecc:	e0fb      	b.n	80050c6 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ed6:	d112      	bne.n	8004efe <HAL_SPI_Receive+0x56>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10e      	bne.n	8004efe <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2204      	movs	r2, #4
 8004ee4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004ee8:	88fa      	ldrh	r2, [r7, #6]
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	9300      	str	r3, [sp, #0]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	68b9      	ldr	r1, [r7, #8]
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f000 f8ef 	bl	80050d8 <HAL_SPI_TransmitReceive>
 8004efa:	4603      	mov	r3, r0
 8004efc:	e0e8      	b.n	80050d0 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d101      	bne.n	8004f0c <HAL_SPI_Receive+0x64>
 8004f08:	2302      	movs	r3, #2
 8004f0a:	e0e1      	b.n	80050d0 <HAL_SPI_Receive+0x228>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f14:	f7fd f8d2 	bl	80020bc <HAL_GetTick>
 8004f18:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d002      	beq.n	8004f26 <HAL_SPI_Receive+0x7e>
 8004f20:	88fb      	ldrh	r3, [r7, #6]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d102      	bne.n	8004f2c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f2a:	e0cc      	b.n	80050c6 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2204      	movs	r2, #4
 8004f30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	88fa      	ldrh	r2, [r7, #6]
 8004f44:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	88fa      	ldrh	r2, [r7, #6]
 8004f4a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f72:	d10f      	bne.n	8004f94 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f82:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f92:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9e:	2b40      	cmp	r3, #64	; 0x40
 8004fa0:	d007      	beq.n	8004fb2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fb0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d16a      	bne.n	8005090 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004fba:	e032      	b.n	8005022 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d115      	bne.n	8004ff6 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f103 020c 	add.w	r2, r3, #12
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd6:	7812      	ldrb	r2, [r2, #0]
 8004fd8:	b2d2      	uxtb	r2, r2
 8004fda:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe0:	1c5a      	adds	r2, r3, #1
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	3b01      	subs	r3, #1
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ff4:	e015      	b.n	8005022 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ff6:	f7fd f861 	bl	80020bc <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	429a      	cmp	r2, r3
 8005004:	d803      	bhi.n	800500e <HAL_SPI_Receive+0x166>
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800500c:	d102      	bne.n	8005014 <HAL_SPI_Receive+0x16c>
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d106      	bne.n	8005022 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005020:	e051      	b.n	80050c6 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005026:	b29b      	uxth	r3, r3
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1c7      	bne.n	8004fbc <HAL_SPI_Receive+0x114>
 800502c:	e035      	b.n	800509a <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f003 0301 	and.w	r3, r3, #1
 8005038:	2b01      	cmp	r3, #1
 800503a:	d113      	bne.n	8005064 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68da      	ldr	r2, [r3, #12]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005046:	b292      	uxth	r2, r2
 8005048:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504e:	1c9a      	adds	r2, r3, #2
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005058:	b29b      	uxth	r3, r3
 800505a:	3b01      	subs	r3, #1
 800505c:	b29a      	uxth	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005062:	e015      	b.n	8005090 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005064:	f7fd f82a 	bl	80020bc <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	429a      	cmp	r2, r3
 8005072:	d803      	bhi.n	800507c <HAL_SPI_Receive+0x1d4>
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800507a:	d102      	bne.n	8005082 <HAL_SPI_Receive+0x1da>
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d106      	bne.n	8005090 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800508e:	e01a      	b.n	80050c6 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005094:	b29b      	uxth	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1c9      	bne.n	800502e <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	6839      	ldr	r1, [r7, #0]
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f000 fa52 	bl	8005548 <SPI_EndRxTransaction>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d002      	beq.n	80050b0 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2220      	movs	r2, #32
 80050ae:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d002      	beq.n	80050be <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	75fb      	strb	r3, [r7, #23]
 80050bc:	e003      	b.n	80050c6 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80050ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3718      	adds	r7, #24
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b08c      	sub	sp, #48	; 0x30
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
 80050e4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80050e6:	2301      	movs	r3, #1
 80050e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80050ea:	2300      	movs	r3, #0
 80050ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d101      	bne.n	80050fe <HAL_SPI_TransmitReceive+0x26>
 80050fa:	2302      	movs	r3, #2
 80050fc:	e198      	b.n	8005430 <HAL_SPI_TransmitReceive+0x358>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005106:	f7fc ffd9 	bl	80020bc <HAL_GetTick>
 800510a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800511c:	887b      	ldrh	r3, [r7, #2]
 800511e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005120:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005124:	2b01      	cmp	r3, #1
 8005126:	d00f      	beq.n	8005148 <HAL_SPI_TransmitReceive+0x70>
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800512e:	d107      	bne.n	8005140 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d103      	bne.n	8005140 <HAL_SPI_TransmitReceive+0x68>
 8005138:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800513c:	2b04      	cmp	r3, #4
 800513e:	d003      	beq.n	8005148 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005140:	2302      	movs	r3, #2
 8005142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005146:	e16d      	b.n	8005424 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d005      	beq.n	800515a <HAL_SPI_TransmitReceive+0x82>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d002      	beq.n	800515a <HAL_SPI_TransmitReceive+0x82>
 8005154:	887b      	ldrh	r3, [r7, #2]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d103      	bne.n	8005162 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005160:	e160      	b.n	8005424 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b04      	cmp	r3, #4
 800516c:	d003      	beq.n	8005176 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2205      	movs	r2, #5
 8005172:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	887a      	ldrh	r2, [r7, #2]
 8005186:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	887a      	ldrh	r2, [r7, #2]
 800518c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	887a      	ldrh	r2, [r7, #2]
 8005198:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	887a      	ldrh	r2, [r7, #2]
 800519e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b6:	2b40      	cmp	r3, #64	; 0x40
 80051b8:	d007      	beq.n	80051ca <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051d2:	d17c      	bne.n	80052ce <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d002      	beq.n	80051e2 <HAL_SPI_TransmitReceive+0x10a>
 80051dc:	8b7b      	ldrh	r3, [r7, #26]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d16a      	bne.n	80052b8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e6:	881a      	ldrh	r2, [r3, #0]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f2:	1c9a      	adds	r2, r3, #2
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	3b01      	subs	r3, #1
 8005200:	b29a      	uxth	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005206:	e057      	b.n	80052b8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b02      	cmp	r3, #2
 8005214:	d11b      	bne.n	800524e <HAL_SPI_TransmitReceive+0x176>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800521a:	b29b      	uxth	r3, r3
 800521c:	2b00      	cmp	r3, #0
 800521e:	d016      	beq.n	800524e <HAL_SPI_TransmitReceive+0x176>
 8005220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005222:	2b01      	cmp	r3, #1
 8005224:	d113      	bne.n	800524e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522a:	881a      	ldrh	r2, [r3, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005236:	1c9a      	adds	r2, r3, #2
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005240:	b29b      	uxth	r3, r3
 8005242:	3b01      	subs	r3, #1
 8005244:	b29a      	uxth	r2, r3
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800524a:	2300      	movs	r3, #0
 800524c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f003 0301 	and.w	r3, r3, #1
 8005258:	2b01      	cmp	r3, #1
 800525a:	d119      	bne.n	8005290 <HAL_SPI_TransmitReceive+0x1b8>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005260:	b29b      	uxth	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d014      	beq.n	8005290 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68da      	ldr	r2, [r3, #12]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005270:	b292      	uxth	r2, r2
 8005272:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005278:	1c9a      	adds	r2, r3, #2
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005282:	b29b      	uxth	r3, r3
 8005284:	3b01      	subs	r3, #1
 8005286:	b29a      	uxth	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800528c:	2301      	movs	r3, #1
 800528e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005290:	f7fc ff14 	bl	80020bc <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800529c:	429a      	cmp	r2, r3
 800529e:	d80b      	bhi.n	80052b8 <HAL_SPI_TransmitReceive+0x1e0>
 80052a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052a6:	d007      	beq.n	80052b8 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80052b6:	e0b5      	b.n	8005424 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052bc:	b29b      	uxth	r3, r3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1a2      	bne.n	8005208 <HAL_SPI_TransmitReceive+0x130>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d19d      	bne.n	8005208 <HAL_SPI_TransmitReceive+0x130>
 80052cc:	e080      	b.n	80053d0 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d002      	beq.n	80052dc <HAL_SPI_TransmitReceive+0x204>
 80052d6:	8b7b      	ldrh	r3, [r7, #26]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d16f      	bne.n	80053bc <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	330c      	adds	r3, #12
 80052e6:	7812      	ldrb	r2, [r2, #0]
 80052e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ee:	1c5a      	adds	r2, r3, #1
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	3b01      	subs	r3, #1
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005302:	e05b      	b.n	80053bc <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b02      	cmp	r3, #2
 8005310:	d11c      	bne.n	800534c <HAL_SPI_TransmitReceive+0x274>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005316:	b29b      	uxth	r3, r3
 8005318:	2b00      	cmp	r3, #0
 800531a:	d017      	beq.n	800534c <HAL_SPI_TransmitReceive+0x274>
 800531c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800531e:	2b01      	cmp	r3, #1
 8005320:	d114      	bne.n	800534c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	330c      	adds	r3, #12
 800532c:	7812      	ldrb	r2, [r2, #0]
 800532e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005334:	1c5a      	adds	r2, r3, #1
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800533e:	b29b      	uxth	r3, r3
 8005340:	3b01      	subs	r3, #1
 8005342:	b29a      	uxth	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005348:	2300      	movs	r3, #0
 800534a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b01      	cmp	r3, #1
 8005358:	d119      	bne.n	800538e <HAL_SPI_TransmitReceive+0x2b6>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800535e:	b29b      	uxth	r3, r3
 8005360:	2b00      	cmp	r3, #0
 8005362:	d014      	beq.n	800538e <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68da      	ldr	r2, [r3, #12]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536e:	b2d2      	uxtb	r2, r2
 8005370:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005376:	1c5a      	adds	r2, r3, #1
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005380:	b29b      	uxth	r3, r3
 8005382:	3b01      	subs	r3, #1
 8005384:	b29a      	uxth	r2, r3
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800538a:	2301      	movs	r3, #1
 800538c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800538e:	f7fc fe95 	bl	80020bc <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800539a:	429a      	cmp	r2, r3
 800539c:	d803      	bhi.n	80053a6 <HAL_SPI_TransmitReceive+0x2ce>
 800539e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053a4:	d102      	bne.n	80053ac <HAL_SPI_TransmitReceive+0x2d4>
 80053a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d107      	bne.n	80053bc <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80053ba:	e033      	b.n	8005424 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d19e      	bne.n	8005304 <HAL_SPI_TransmitReceive+0x22c>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d199      	bne.n	8005304 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f000 f91d 	bl	8005614 <SPI_EndRxTxTransaction>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d006      	beq.n	80053ee <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2220      	movs	r2, #32
 80053ea:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80053ec:	e01a      	b.n	8005424 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d10a      	bne.n	800540c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053f6:	2300      	movs	r3, #0
 80053f8:	617b      	str	r3, [r7, #20]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	617b      	str	r3, [r7, #20]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	617b      	str	r3, [r7, #20]
 800540a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005410:	2b00      	cmp	r3, #0
 8005412:	d003      	beq.n	800541c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800541a:	e003      	b.n	8005424 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800542c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005430:	4618      	mov	r0, r3
 8005432:	3730      	adds	r7, #48	; 0x30
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b088      	sub	sp, #32
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	603b      	str	r3, [r7, #0]
 8005444:	4613      	mov	r3, r2
 8005446:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005448:	f7fc fe38 	bl	80020bc <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005450:	1a9b      	subs	r3, r3, r2
 8005452:	683a      	ldr	r2, [r7, #0]
 8005454:	4413      	add	r3, r2
 8005456:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005458:	f7fc fe30 	bl	80020bc <HAL_GetTick>
 800545c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800545e:	4b39      	ldr	r3, [pc, #228]	; (8005544 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	015b      	lsls	r3, r3, #5
 8005464:	0d1b      	lsrs	r3, r3, #20
 8005466:	69fa      	ldr	r2, [r7, #28]
 8005468:	fb02 f303 	mul.w	r3, r2, r3
 800546c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800546e:	e054      	b.n	800551a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005476:	d050      	beq.n	800551a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005478:	f7fc fe20 	bl	80020bc <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	69fa      	ldr	r2, [r7, #28]
 8005484:	429a      	cmp	r2, r3
 8005486:	d902      	bls.n	800548e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d13d      	bne.n	800550a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	685a      	ldr	r2, [r3, #4]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800549c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054a6:	d111      	bne.n	80054cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054b0:	d004      	beq.n	80054bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ba:	d107      	bne.n	80054cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054d4:	d10f      	bne.n	80054f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054e4:	601a      	str	r2, [r3, #0]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e017      	b.n	800553a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d101      	bne.n	8005514 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005510:	2300      	movs	r3, #0
 8005512:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	3b01      	subs	r3, #1
 8005518:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	689a      	ldr	r2, [r3, #8]
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	4013      	ands	r3, r2
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	429a      	cmp	r2, r3
 8005528:	bf0c      	ite	eq
 800552a:	2301      	moveq	r3, #1
 800552c:	2300      	movne	r3, #0
 800552e:	b2db      	uxtb	r3, r3
 8005530:	461a      	mov	r2, r3
 8005532:	79fb      	ldrb	r3, [r7, #7]
 8005534:	429a      	cmp	r2, r3
 8005536:	d19b      	bne.n	8005470 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3720      	adds	r7, #32
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	20000018 	.word	0x20000018

08005548 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b086      	sub	sp, #24
 800554c:	af02      	add	r7, sp, #8
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800555c:	d111      	bne.n	8005582 <SPI_EndRxTransaction+0x3a>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005566:	d004      	beq.n	8005572 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005570:	d107      	bne.n	8005582 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005580:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800558a:	d12a      	bne.n	80055e2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005594:	d012      	beq.n	80055bc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	2200      	movs	r2, #0
 800559e:	2180      	movs	r1, #128	; 0x80
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f7ff ff49 	bl	8005438 <SPI_WaitFlagStateUntilTimeout>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d02d      	beq.n	8005608 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b0:	f043 0220 	orr.w	r2, r3, #32
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e026      	b.n	800560a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	2200      	movs	r2, #0
 80055c4:	2101      	movs	r1, #1
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f7ff ff36 	bl	8005438 <SPI_WaitFlagStateUntilTimeout>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d01a      	beq.n	8005608 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d6:	f043 0220 	orr.w	r2, r3, #32
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e013      	b.n	800560a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	9300      	str	r3, [sp, #0]
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	2200      	movs	r2, #0
 80055ea:	2101      	movs	r1, #1
 80055ec:	68f8      	ldr	r0, [r7, #12]
 80055ee:	f7ff ff23 	bl	8005438 <SPI_WaitFlagStateUntilTimeout>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d007      	beq.n	8005608 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055fc:	f043 0220 	orr.w	r2, r3, #32
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e000      	b.n	800560a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
	...

08005614 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b088      	sub	sp, #32
 8005618:	af02      	add	r7, sp, #8
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	9300      	str	r3, [sp, #0]
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	2201      	movs	r2, #1
 8005628:	2102      	movs	r1, #2
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f7ff ff04 	bl	8005438 <SPI_WaitFlagStateUntilTimeout>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d007      	beq.n	8005646 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800563a:	f043 0220 	orr.w	r2, r3, #32
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e032      	b.n	80056ac <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005646:	4b1b      	ldr	r3, [pc, #108]	; (80056b4 <SPI_EndRxTxTransaction+0xa0>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a1b      	ldr	r2, [pc, #108]	; (80056b8 <SPI_EndRxTxTransaction+0xa4>)
 800564c:	fba2 2303 	umull	r2, r3, r2, r3
 8005650:	0d5b      	lsrs	r3, r3, #21
 8005652:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005656:	fb02 f303 	mul.w	r3, r2, r3
 800565a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005664:	d112      	bne.n	800568c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	9300      	str	r3, [sp, #0]
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	2200      	movs	r2, #0
 800566e:	2180      	movs	r1, #128	; 0x80
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f7ff fee1 	bl	8005438 <SPI_WaitFlagStateUntilTimeout>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d016      	beq.n	80056aa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005680:	f043 0220 	orr.w	r2, r3, #32
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	e00f      	b.n	80056ac <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00a      	beq.n	80056a8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	3b01      	subs	r3, #1
 8005696:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a2:	2b80      	cmp	r3, #128	; 0x80
 80056a4:	d0f2      	beq.n	800568c <SPI_EndRxTxTransaction+0x78>
 80056a6:	e000      	b.n	80056aa <SPI_EndRxTxTransaction+0x96>
        break;
 80056a8:	bf00      	nop
  }

  return HAL_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3718      	adds	r7, #24
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	20000018 	.word	0x20000018
 80056b8:	165e9f81 	.word	0x165e9f81

080056bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d101      	bne.n	80056ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e041      	b.n	8005752 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d106      	bne.n	80056e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f7fc fa96 	bl	8001c14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2202      	movs	r2, #2
 80056ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	3304      	adds	r3, #4
 80056f8:	4619      	mov	r1, r3
 80056fa:	4610      	mov	r0, r2
 80056fc:	f000 f9c0 	bl	8005a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3708      	adds	r7, #8
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
	...

0800575c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800576a:	b2db      	uxtb	r3, r3
 800576c:	2b01      	cmp	r3, #1
 800576e:	d001      	beq.n	8005774 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e04e      	b.n	8005812 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2202      	movs	r2, #2
 8005778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68da      	ldr	r2, [r3, #12]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f042 0201 	orr.w	r2, r2, #1
 800578a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a23      	ldr	r2, [pc, #140]	; (8005820 <HAL_TIM_Base_Start_IT+0xc4>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d022      	beq.n	80057dc <HAL_TIM_Base_Start_IT+0x80>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800579e:	d01d      	beq.n	80057dc <HAL_TIM_Base_Start_IT+0x80>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a1f      	ldr	r2, [pc, #124]	; (8005824 <HAL_TIM_Base_Start_IT+0xc8>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d018      	beq.n	80057dc <HAL_TIM_Base_Start_IT+0x80>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a1e      	ldr	r2, [pc, #120]	; (8005828 <HAL_TIM_Base_Start_IT+0xcc>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d013      	beq.n	80057dc <HAL_TIM_Base_Start_IT+0x80>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a1c      	ldr	r2, [pc, #112]	; (800582c <HAL_TIM_Base_Start_IT+0xd0>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d00e      	beq.n	80057dc <HAL_TIM_Base_Start_IT+0x80>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a1b      	ldr	r2, [pc, #108]	; (8005830 <HAL_TIM_Base_Start_IT+0xd4>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d009      	beq.n	80057dc <HAL_TIM_Base_Start_IT+0x80>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a19      	ldr	r2, [pc, #100]	; (8005834 <HAL_TIM_Base_Start_IT+0xd8>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d004      	beq.n	80057dc <HAL_TIM_Base_Start_IT+0x80>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a18      	ldr	r2, [pc, #96]	; (8005838 <HAL_TIM_Base_Start_IT+0xdc>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d111      	bne.n	8005800 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	f003 0307 	and.w	r3, r3, #7
 80057e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2b06      	cmp	r3, #6
 80057ec:	d010      	beq.n	8005810 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f042 0201 	orr.w	r2, r2, #1
 80057fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057fe:	e007      	b.n	8005810 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f042 0201 	orr.w	r2, r2, #1
 800580e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3714      	adds	r7, #20
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	40010000 	.word	0x40010000
 8005824:	40000400 	.word	0x40000400
 8005828:	40000800 	.word	0x40000800
 800582c:	40000c00 	.word	0x40000c00
 8005830:	40010400 	.word	0x40010400
 8005834:	40014000 	.word	0x40014000
 8005838:	40001800 	.word	0x40001800

0800583c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	f003 0302 	and.w	r3, r3, #2
 800585a:	2b00      	cmp	r3, #0
 800585c:	d020      	beq.n	80058a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f003 0302 	and.w	r3, r3, #2
 8005864:	2b00      	cmp	r3, #0
 8005866:	d01b      	beq.n	80058a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f06f 0202 	mvn.w	r2, #2
 8005870:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2201      	movs	r2, #1
 8005876:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	f003 0303 	and.w	r3, r3, #3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d003      	beq.n	800588e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 f8dc 	bl	8005a44 <HAL_TIM_IC_CaptureCallback>
 800588c:	e005      	b.n	800589a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f8ce 	bl	8005a30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 f8df 	bl	8005a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	f003 0304 	and.w	r3, r3, #4
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d020      	beq.n	80058ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d01b      	beq.n	80058ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f06f 0204 	mvn.w	r2, #4
 80058bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2202      	movs	r2, #2
 80058c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d003      	beq.n	80058da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f8b6 	bl	8005a44 <HAL_TIM_IC_CaptureCallback>
 80058d8:	e005      	b.n	80058e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f8a8 	bl	8005a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f8b9 	bl	8005a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	f003 0308 	and.w	r3, r3, #8
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d020      	beq.n	8005938 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f003 0308 	and.w	r3, r3, #8
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d01b      	beq.n	8005938 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f06f 0208 	mvn.w	r2, #8
 8005908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2204      	movs	r2, #4
 800590e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	69db      	ldr	r3, [r3, #28]
 8005916:	f003 0303 	and.w	r3, r3, #3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d003      	beq.n	8005926 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 f890 	bl	8005a44 <HAL_TIM_IC_CaptureCallback>
 8005924:	e005      	b.n	8005932 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f882 	bl	8005a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 f893 	bl	8005a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	f003 0310 	and.w	r3, r3, #16
 800593e:	2b00      	cmp	r3, #0
 8005940:	d020      	beq.n	8005984 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f003 0310 	and.w	r3, r3, #16
 8005948:	2b00      	cmp	r3, #0
 800594a:	d01b      	beq.n	8005984 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f06f 0210 	mvn.w	r2, #16
 8005954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2208      	movs	r2, #8
 800595a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	69db      	ldr	r3, [r3, #28]
 8005962:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005966:	2b00      	cmp	r3, #0
 8005968:	d003      	beq.n	8005972 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f86a 	bl	8005a44 <HAL_TIM_IC_CaptureCallback>
 8005970:	e005      	b.n	800597e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f85c 	bl	8005a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 f86d 	bl	8005a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00c      	beq.n	80059a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	2b00      	cmp	r3, #0
 8005996:	d007      	beq.n	80059a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f06f 0201 	mvn.w	r2, #1
 80059a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 f83a 	bl	8005a1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00c      	beq.n	80059cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d007      	beq.n	80059cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 f98c 	bl	8005ce4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00c      	beq.n	80059f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d007      	beq.n	80059f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f83e 	bl	8005a6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	f003 0320 	and.w	r3, r3, #32
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00c      	beq.n	8005a14 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f003 0320 	and.w	r3, r3, #32
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d007      	beq.n	8005a14 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f06f 0220 	mvn.w	r2, #32
 8005a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f95e 	bl	8005cd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a14:	bf00      	nop
 8005a16:	3710      	adds	r7, #16
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005a24:	bf00      	nop
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a38:	bf00      	nop
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a46      	ldr	r2, [pc, #280]	; (8005bac <TIM_Base_SetConfig+0x12c>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d013      	beq.n	8005ac0 <TIM_Base_SetConfig+0x40>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a9e:	d00f      	beq.n	8005ac0 <TIM_Base_SetConfig+0x40>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a43      	ldr	r2, [pc, #268]	; (8005bb0 <TIM_Base_SetConfig+0x130>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d00b      	beq.n	8005ac0 <TIM_Base_SetConfig+0x40>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a42      	ldr	r2, [pc, #264]	; (8005bb4 <TIM_Base_SetConfig+0x134>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d007      	beq.n	8005ac0 <TIM_Base_SetConfig+0x40>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a41      	ldr	r2, [pc, #260]	; (8005bb8 <TIM_Base_SetConfig+0x138>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d003      	beq.n	8005ac0 <TIM_Base_SetConfig+0x40>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a40      	ldr	r2, [pc, #256]	; (8005bbc <TIM_Base_SetConfig+0x13c>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d108      	bne.n	8005ad2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ac6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a35      	ldr	r2, [pc, #212]	; (8005bac <TIM_Base_SetConfig+0x12c>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d02b      	beq.n	8005b32 <TIM_Base_SetConfig+0xb2>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ae0:	d027      	beq.n	8005b32 <TIM_Base_SetConfig+0xb2>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a32      	ldr	r2, [pc, #200]	; (8005bb0 <TIM_Base_SetConfig+0x130>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d023      	beq.n	8005b32 <TIM_Base_SetConfig+0xb2>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a31      	ldr	r2, [pc, #196]	; (8005bb4 <TIM_Base_SetConfig+0x134>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d01f      	beq.n	8005b32 <TIM_Base_SetConfig+0xb2>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a30      	ldr	r2, [pc, #192]	; (8005bb8 <TIM_Base_SetConfig+0x138>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d01b      	beq.n	8005b32 <TIM_Base_SetConfig+0xb2>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a2f      	ldr	r2, [pc, #188]	; (8005bbc <TIM_Base_SetConfig+0x13c>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d017      	beq.n	8005b32 <TIM_Base_SetConfig+0xb2>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a2e      	ldr	r2, [pc, #184]	; (8005bc0 <TIM_Base_SetConfig+0x140>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d013      	beq.n	8005b32 <TIM_Base_SetConfig+0xb2>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a2d      	ldr	r2, [pc, #180]	; (8005bc4 <TIM_Base_SetConfig+0x144>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d00f      	beq.n	8005b32 <TIM_Base_SetConfig+0xb2>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a2c      	ldr	r2, [pc, #176]	; (8005bc8 <TIM_Base_SetConfig+0x148>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d00b      	beq.n	8005b32 <TIM_Base_SetConfig+0xb2>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a2b      	ldr	r2, [pc, #172]	; (8005bcc <TIM_Base_SetConfig+0x14c>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d007      	beq.n	8005b32 <TIM_Base_SetConfig+0xb2>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a2a      	ldr	r2, [pc, #168]	; (8005bd0 <TIM_Base_SetConfig+0x150>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d003      	beq.n	8005b32 <TIM_Base_SetConfig+0xb2>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a29      	ldr	r2, [pc, #164]	; (8005bd4 <TIM_Base_SetConfig+0x154>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d108      	bne.n	8005b44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	689a      	ldr	r2, [r3, #8]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a10      	ldr	r2, [pc, #64]	; (8005bac <TIM_Base_SetConfig+0x12c>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d003      	beq.n	8005b78 <TIM_Base_SetConfig+0xf8>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a12      	ldr	r2, [pc, #72]	; (8005bbc <TIM_Base_SetConfig+0x13c>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d103      	bne.n	8005b80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	691a      	ldr	r2, [r3, #16]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	f003 0301 	and.w	r3, r3, #1
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d105      	bne.n	8005b9e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	f023 0201 	bic.w	r2, r3, #1
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	611a      	str	r2, [r3, #16]
  }
}
 8005b9e:	bf00      	nop
 8005ba0:	3714      	adds	r7, #20
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	40010000 	.word	0x40010000
 8005bb0:	40000400 	.word	0x40000400
 8005bb4:	40000800 	.word	0x40000800
 8005bb8:	40000c00 	.word	0x40000c00
 8005bbc:	40010400 	.word	0x40010400
 8005bc0:	40014000 	.word	0x40014000
 8005bc4:	40014400 	.word	0x40014400
 8005bc8:	40014800 	.word	0x40014800
 8005bcc:	40001800 	.word	0x40001800
 8005bd0:	40001c00 	.word	0x40001c00
 8005bd4:	40002000 	.word	0x40002000

08005bd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d101      	bne.n	8005bf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bec:	2302      	movs	r3, #2
 8005bee:	e05a      	b.n	8005ca6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a21      	ldr	r2, [pc, #132]	; (8005cb4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d022      	beq.n	8005c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c3c:	d01d      	beq.n	8005c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a1d      	ldr	r2, [pc, #116]	; (8005cb8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d018      	beq.n	8005c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a1b      	ldr	r2, [pc, #108]	; (8005cbc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d013      	beq.n	8005c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a1a      	ldr	r2, [pc, #104]	; (8005cc0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d00e      	beq.n	8005c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a18      	ldr	r2, [pc, #96]	; (8005cc4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d009      	beq.n	8005c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a17      	ldr	r2, [pc, #92]	; (8005cc8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d004      	beq.n	8005c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a15      	ldr	r2, [pc, #84]	; (8005ccc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d10c      	bne.n	8005c94 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3714      	adds	r7, #20
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	40010000 	.word	0x40010000
 8005cb8:	40000400 	.word	0x40000400
 8005cbc:	40000800 	.word	0x40000800
 8005cc0:	40000c00 	.word	0x40000c00
 8005cc4:	40010400 	.word	0x40010400
 8005cc8:	40014000 	.word	0x40014000
 8005ccc:	40001800 	.word	0x40001800

08005cd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cd8:	bf00      	nop
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d101      	bne.n	8005d0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e042      	b.n	8005d90 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d106      	bne.n	8005d24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f7fb ffa0 	bl	8001c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2224      	movs	r2, #36	; 0x24
 8005d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68da      	ldr	r2, [r3, #12]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 fdbd 	bl	80068bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	691a      	ldr	r2, [r3, #16]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	695a      	ldr	r2, [r3, #20]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68da      	ldr	r2, [r3, #12]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2220      	movs	r2, #32
 8005d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2220      	movs	r2, #32
 8005d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3708      	adds	r7, #8
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b08a      	sub	sp, #40	; 0x28
 8005d9c:	af02      	add	r7, sp, #8
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	603b      	str	r3, [r7, #0]
 8005da4:	4613      	mov	r3, r2
 8005da6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005da8:	2300      	movs	r3, #0
 8005daa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	2b20      	cmp	r3, #32
 8005db6:	d175      	bne.n	8005ea4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d002      	beq.n	8005dc4 <HAL_UART_Transmit+0x2c>
 8005dbe:	88fb      	ldrh	r3, [r7, #6]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d101      	bne.n	8005dc8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e06e      	b.n	8005ea6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2221      	movs	r2, #33	; 0x21
 8005dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005dd6:	f7fc f971 	bl	80020bc <HAL_GetTick>
 8005dda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	88fa      	ldrh	r2, [r7, #6]
 8005de0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	88fa      	ldrh	r2, [r7, #6]
 8005de6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005df0:	d108      	bne.n	8005e04 <HAL_UART_Transmit+0x6c>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d104      	bne.n	8005e04 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	61bb      	str	r3, [r7, #24]
 8005e02:	e003      	b.n	8005e0c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e0c:	e02e      	b.n	8005e6c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	9300      	str	r3, [sp, #0]
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	2200      	movs	r2, #0
 8005e16:	2180      	movs	r1, #128	; 0x80
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f000 fb1f 	bl	800645c <UART_WaitOnFlagUntilTimeout>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d005      	beq.n	8005e30 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2220      	movs	r2, #32
 8005e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e03a      	b.n	8005ea6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10b      	bne.n	8005e4e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	881b      	ldrh	r3, [r3, #0]
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	3302      	adds	r3, #2
 8005e4a:	61bb      	str	r3, [r7, #24]
 8005e4c:	e007      	b.n	8005e5e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	781a      	ldrb	r2, [r3, #0]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	3b01      	subs	r3, #1
 8005e66:	b29a      	uxth	r2, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1cb      	bne.n	8005e0e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	2140      	movs	r1, #64	; 0x40
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f000 faeb 	bl	800645c <UART_WaitOnFlagUntilTimeout>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d005      	beq.n	8005e98 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2220      	movs	r2, #32
 8005e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e006      	b.n	8005ea6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2220      	movs	r2, #32
 8005e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	e000      	b.n	8005ea6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005ea4:	2302      	movs	r3, #2
  }
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3720      	adds	r7, #32
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b084      	sub	sp, #16
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	60f8      	str	r0, [r7, #12]
 8005eb6:	60b9      	str	r1, [r7, #8]
 8005eb8:	4613      	mov	r3, r2
 8005eba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2b20      	cmp	r3, #32
 8005ec6:	d112      	bne.n	8005eee <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d002      	beq.n	8005ed4 <HAL_UART_Receive_IT+0x26>
 8005ece:	88fb      	ldrh	r3, [r7, #6]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d101      	bne.n	8005ed8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e00b      	b.n	8005ef0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005ede:	88fb      	ldrh	r3, [r7, #6]
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	68b9      	ldr	r1, [r7, #8]
 8005ee4:	68f8      	ldr	r0, [r7, #12]
 8005ee6:	f000 fb12 	bl	800650e <UART_Start_Receive_IT>
 8005eea:	4603      	mov	r3, r0
 8005eec:	e000      	b.n	8005ef0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005eee:	2302      	movs	r3, #2
  }
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3710      	adds	r7, #16
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b0ba      	sub	sp, #232	; 0xe8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	695b      	ldr	r3, [r3, #20]
 8005f1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005f24:	2300      	movs	r3, #0
 8005f26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f2e:	f003 030f 	and.w	r3, r3, #15
 8005f32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005f36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10f      	bne.n	8005f5e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f42:	f003 0320 	and.w	r3, r3, #32
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d009      	beq.n	8005f5e <HAL_UART_IRQHandler+0x66>
 8005f4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f4e:	f003 0320 	and.w	r3, r3, #32
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d003      	beq.n	8005f5e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 fbf2 	bl	8006740 <UART_Receive_IT>
      return;
 8005f5c:	e25b      	b.n	8006416 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005f5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f000 80de 	beq.w	8006124 <HAL_UART_IRQHandler+0x22c>
 8005f68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f6c:	f003 0301 	and.w	r3, r3, #1
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d106      	bne.n	8005f82 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f78:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f000 80d1 	beq.w	8006124 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00b      	beq.n	8005fa6 <HAL_UART_IRQHandler+0xae>
 8005f8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d005      	beq.n	8005fa6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f9e:	f043 0201 	orr.w	r2, r3, #1
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005faa:	f003 0304 	and.w	r3, r3, #4
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00b      	beq.n	8005fca <HAL_UART_IRQHandler+0xd2>
 8005fb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d005      	beq.n	8005fca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fc2:	f043 0202 	orr.w	r2, r3, #2
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fce:	f003 0302 	and.w	r3, r3, #2
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00b      	beq.n	8005fee <HAL_UART_IRQHandler+0xf6>
 8005fd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d005      	beq.n	8005fee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe6:	f043 0204 	orr.w	r2, r3, #4
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ff2:	f003 0308 	and.w	r3, r3, #8
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d011      	beq.n	800601e <HAL_UART_IRQHandler+0x126>
 8005ffa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ffe:	f003 0320 	and.w	r3, r3, #32
 8006002:	2b00      	cmp	r3, #0
 8006004:	d105      	bne.n	8006012 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006006:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	2b00      	cmp	r3, #0
 8006010:	d005      	beq.n	800601e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006016:	f043 0208 	orr.w	r2, r3, #8
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006022:	2b00      	cmp	r3, #0
 8006024:	f000 81f2 	beq.w	800640c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800602c:	f003 0320 	and.w	r3, r3, #32
 8006030:	2b00      	cmp	r3, #0
 8006032:	d008      	beq.n	8006046 <HAL_UART_IRQHandler+0x14e>
 8006034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006038:	f003 0320 	and.w	r3, r3, #32
 800603c:	2b00      	cmp	r3, #0
 800603e:	d002      	beq.n	8006046 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 fb7d 	bl	8006740 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	695b      	ldr	r3, [r3, #20]
 800604c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006050:	2b40      	cmp	r3, #64	; 0x40
 8006052:	bf0c      	ite	eq
 8006054:	2301      	moveq	r3, #1
 8006056:	2300      	movne	r3, #0
 8006058:	b2db      	uxtb	r3, r3
 800605a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006062:	f003 0308 	and.w	r3, r3, #8
 8006066:	2b00      	cmp	r3, #0
 8006068:	d103      	bne.n	8006072 <HAL_UART_IRQHandler+0x17a>
 800606a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800606e:	2b00      	cmp	r3, #0
 8006070:	d04f      	beq.n	8006112 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 fa85 	bl	8006582 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006082:	2b40      	cmp	r3, #64	; 0x40
 8006084:	d141      	bne.n	800610a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	3314      	adds	r3, #20
 800608c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006090:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006094:	e853 3f00 	ldrex	r3, [r3]
 8006098:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800609c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	3314      	adds	r3, #20
 80060ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80060b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80060b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80060be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80060c2:	e841 2300 	strex	r3, r2, [r1]
 80060c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80060ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1d9      	bne.n	8006086 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d013      	beq.n	8006102 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060de:	4a7e      	ldr	r2, [pc, #504]	; (80062d8 <HAL_UART_IRQHandler+0x3e0>)
 80060e0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7fc f975 	bl	80023d6 <HAL_DMA_Abort_IT>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d016      	beq.n	8006120 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80060fc:	4610      	mov	r0, r2
 80060fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006100:	e00e      	b.n	8006120 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 f994 	bl	8006430 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006108:	e00a      	b.n	8006120 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f990 	bl	8006430 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006110:	e006      	b.n	8006120 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 f98c 	bl	8006430 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800611e:	e175      	b.n	800640c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006120:	bf00      	nop
    return;
 8006122:	e173      	b.n	800640c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006128:	2b01      	cmp	r3, #1
 800612a:	f040 814f 	bne.w	80063cc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800612e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006132:	f003 0310 	and.w	r3, r3, #16
 8006136:	2b00      	cmp	r3, #0
 8006138:	f000 8148 	beq.w	80063cc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800613c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006140:	f003 0310 	and.w	r3, r3, #16
 8006144:	2b00      	cmp	r3, #0
 8006146:	f000 8141 	beq.w	80063cc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800614a:	2300      	movs	r3, #0
 800614c:	60bb      	str	r3, [r7, #8]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	60bb      	str	r3, [r7, #8]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	60bb      	str	r3, [r7, #8]
 800615e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	695b      	ldr	r3, [r3, #20]
 8006166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800616a:	2b40      	cmp	r3, #64	; 0x40
 800616c:	f040 80b6 	bne.w	80062dc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800617c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006180:	2b00      	cmp	r3, #0
 8006182:	f000 8145 	beq.w	8006410 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800618a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800618e:	429a      	cmp	r2, r3
 8006190:	f080 813e 	bcs.w	8006410 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800619a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061a0:	69db      	ldr	r3, [r3, #28]
 80061a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061a6:	f000 8088 	beq.w	80062ba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	330c      	adds	r3, #12
 80061b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061b8:	e853 3f00 	ldrex	r3, [r3]
 80061bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80061c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	330c      	adds	r3, #12
 80061d2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80061d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80061da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80061e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80061e6:	e841 2300 	strex	r3, r2, [r1]
 80061ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80061ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d1d9      	bne.n	80061aa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	3314      	adds	r3, #20
 80061fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006200:	e853 3f00 	ldrex	r3, [r3]
 8006204:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006206:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006208:	f023 0301 	bic.w	r3, r3, #1
 800620c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	3314      	adds	r3, #20
 8006216:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800621a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800621e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006220:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006222:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006226:	e841 2300 	strex	r3, r2, [r1]
 800622a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800622c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1e1      	bne.n	80061f6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	3314      	adds	r3, #20
 8006238:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800623c:	e853 3f00 	ldrex	r3, [r3]
 8006240:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006242:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006244:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006248:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	3314      	adds	r3, #20
 8006252:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006256:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006258:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800625c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800625e:	e841 2300 	strex	r3, r2, [r1]
 8006262:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006264:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1e3      	bne.n	8006232 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2220      	movs	r2, #32
 800626e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	330c      	adds	r3, #12
 800627e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006280:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006282:	e853 3f00 	ldrex	r3, [r3]
 8006286:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006288:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800628a:	f023 0310 	bic.w	r3, r3, #16
 800628e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	330c      	adds	r3, #12
 8006298:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800629c:	65ba      	str	r2, [r7, #88]	; 0x58
 800629e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80062a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80062a4:	e841 2300 	strex	r3, r2, [r1]
 80062a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80062aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1e3      	bne.n	8006278 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7fc f81e 	bl	80022f6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2202      	movs	r2, #2
 80062be:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	4619      	mov	r1, r3
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 f8b7 	bl	8006444 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80062d6:	e09b      	b.n	8006410 <HAL_UART_IRQHandler+0x518>
 80062d8:	08006649 	.word	0x08006649
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f000 808e 	beq.w	8006414 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80062f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f000 8089 	beq.w	8006414 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	330c      	adds	r3, #12
 8006308:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630c:	e853 3f00 	ldrex	r3, [r3]
 8006310:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006314:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006318:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	330c      	adds	r3, #12
 8006322:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006326:	647a      	str	r2, [r7, #68]	; 0x44
 8006328:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800632c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800632e:	e841 2300 	strex	r3, r2, [r1]
 8006332:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1e3      	bne.n	8006302 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	3314      	adds	r3, #20
 8006340:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006344:	e853 3f00 	ldrex	r3, [r3]
 8006348:	623b      	str	r3, [r7, #32]
   return(result);
 800634a:	6a3b      	ldr	r3, [r7, #32]
 800634c:	f023 0301 	bic.w	r3, r3, #1
 8006350:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	3314      	adds	r3, #20
 800635a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800635e:	633a      	str	r2, [r7, #48]	; 0x30
 8006360:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006362:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006364:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006366:	e841 2300 	strex	r3, r2, [r1]
 800636a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800636c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1e3      	bne.n	800633a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2220      	movs	r2, #32
 8006376:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	330c      	adds	r3, #12
 8006386:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	e853 3f00 	ldrex	r3, [r3]
 800638e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f023 0310 	bic.w	r3, r3, #16
 8006396:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	330c      	adds	r3, #12
 80063a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80063a4:	61fa      	str	r2, [r7, #28]
 80063a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a8:	69b9      	ldr	r1, [r7, #24]
 80063aa:	69fa      	ldr	r2, [r7, #28]
 80063ac:	e841 2300 	strex	r3, r2, [r1]
 80063b0:	617b      	str	r3, [r7, #20]
   return(result);
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d1e3      	bne.n	8006380 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2202      	movs	r2, #2
 80063bc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80063be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80063c2:	4619      	mov	r1, r3
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 f83d 	bl	8006444 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80063ca:	e023      	b.n	8006414 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80063cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d009      	beq.n	80063ec <HAL_UART_IRQHandler+0x4f4>
 80063d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d003      	beq.n	80063ec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 f943 	bl	8006670 <UART_Transmit_IT>
    return;
 80063ea:	e014      	b.n	8006416 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80063ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00e      	beq.n	8006416 <HAL_UART_IRQHandler+0x51e>
 80063f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006400:	2b00      	cmp	r3, #0
 8006402:	d008      	beq.n	8006416 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 f983 	bl	8006710 <UART_EndTransmit_IT>
    return;
 800640a:	e004      	b.n	8006416 <HAL_UART_IRQHandler+0x51e>
    return;
 800640c:	bf00      	nop
 800640e:	e002      	b.n	8006416 <HAL_UART_IRQHandler+0x51e>
      return;
 8006410:	bf00      	nop
 8006412:	e000      	b.n	8006416 <HAL_UART_IRQHandler+0x51e>
      return;
 8006414:	bf00      	nop
  }
}
 8006416:	37e8      	adds	r7, #232	; 0xe8
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	460b      	mov	r3, r1
 800644e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006450:	bf00      	nop
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b086      	sub	sp, #24
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	603b      	str	r3, [r7, #0]
 8006468:	4613      	mov	r3, r2
 800646a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800646c:	e03b      	b.n	80064e6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800646e:	6a3b      	ldr	r3, [r7, #32]
 8006470:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006474:	d037      	beq.n	80064e6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006476:	f7fb fe21 	bl	80020bc <HAL_GetTick>
 800647a:	4602      	mov	r2, r0
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	6a3a      	ldr	r2, [r7, #32]
 8006482:	429a      	cmp	r2, r3
 8006484:	d302      	bcc.n	800648c <UART_WaitOnFlagUntilTimeout+0x30>
 8006486:	6a3b      	ldr	r3, [r7, #32]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d101      	bne.n	8006490 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800648c:	2303      	movs	r3, #3
 800648e:	e03a      	b.n	8006506 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	f003 0304 	and.w	r3, r3, #4
 800649a:	2b00      	cmp	r3, #0
 800649c:	d023      	beq.n	80064e6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	2b80      	cmp	r3, #128	; 0x80
 80064a2:	d020      	beq.n	80064e6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	2b40      	cmp	r3, #64	; 0x40
 80064a8:	d01d      	beq.n	80064e6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0308 	and.w	r3, r3, #8
 80064b4:	2b08      	cmp	r3, #8
 80064b6:	d116      	bne.n	80064e6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80064b8:	2300      	movs	r3, #0
 80064ba:	617b      	str	r3, [r7, #20]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	617b      	str	r3, [r7, #20]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	617b      	str	r3, [r7, #20]
 80064cc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f000 f857 	bl	8006582 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2208      	movs	r2, #8
 80064d8:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e00f      	b.n	8006506 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	4013      	ands	r3, r2
 80064f0:	68ba      	ldr	r2, [r7, #8]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	bf0c      	ite	eq
 80064f6:	2301      	moveq	r3, #1
 80064f8:	2300      	movne	r3, #0
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	461a      	mov	r2, r3
 80064fe:	79fb      	ldrb	r3, [r7, #7]
 8006500:	429a      	cmp	r2, r3
 8006502:	d0b4      	beq.n	800646e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3718      	adds	r7, #24
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800650e:	b480      	push	{r7}
 8006510:	b085      	sub	sp, #20
 8006512:	af00      	add	r7, sp, #0
 8006514:	60f8      	str	r0, [r7, #12]
 8006516:	60b9      	str	r1, [r7, #8]
 8006518:	4613      	mov	r3, r2
 800651a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	88fa      	ldrh	r2, [r7, #6]
 8006526:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	88fa      	ldrh	r2, [r7, #6]
 800652c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2222      	movs	r2, #34	; 0x22
 8006538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d007      	beq.n	8006554 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68da      	ldr	r2, [r3, #12]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006552:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	695a      	ldr	r2, [r3, #20]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f042 0201 	orr.w	r2, r2, #1
 8006562:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68da      	ldr	r2, [r3, #12]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f042 0220 	orr.w	r2, r2, #32
 8006572:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3714      	adds	r7, #20
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr

08006582 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006582:	b480      	push	{r7}
 8006584:	b095      	sub	sp, #84	; 0x54
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	330c      	adds	r3, #12
 8006590:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006594:	e853 3f00 	ldrex	r3, [r3]
 8006598:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800659a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	330c      	adds	r3, #12
 80065a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065aa:	643a      	str	r2, [r7, #64]	; 0x40
 80065ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065b2:	e841 2300 	strex	r3, r2, [r1]
 80065b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1e5      	bne.n	800658a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	3314      	adds	r3, #20
 80065c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c6:	6a3b      	ldr	r3, [r7, #32]
 80065c8:	e853 3f00 	ldrex	r3, [r3]
 80065cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	f023 0301 	bic.w	r3, r3, #1
 80065d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	3314      	adds	r3, #20
 80065dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065e6:	e841 2300 	strex	r3, r2, [r1]
 80065ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1e5      	bne.n	80065be <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d119      	bne.n	800662e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	330c      	adds	r3, #12
 8006600:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	e853 3f00 	ldrex	r3, [r3]
 8006608:	60bb      	str	r3, [r7, #8]
   return(result);
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	f023 0310 	bic.w	r3, r3, #16
 8006610:	647b      	str	r3, [r7, #68]	; 0x44
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	330c      	adds	r3, #12
 8006618:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800661a:	61ba      	str	r2, [r7, #24]
 800661c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661e:	6979      	ldr	r1, [r7, #20]
 8006620:	69ba      	ldr	r2, [r7, #24]
 8006622:	e841 2300 	strex	r3, r2, [r1]
 8006626:	613b      	str	r3, [r7, #16]
   return(result);
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1e5      	bne.n	80065fa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2220      	movs	r2, #32
 8006632:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800663c:	bf00      	nop
 800663e:	3754      	adds	r7, #84	; 0x54
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006654:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f7ff fee4 	bl	8006430 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006668:	bf00      	nop
 800666a:	3710      	adds	r7, #16
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006670:	b480      	push	{r7}
 8006672:	b085      	sub	sp, #20
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800667e:	b2db      	uxtb	r3, r3
 8006680:	2b21      	cmp	r3, #33	; 0x21
 8006682:	d13e      	bne.n	8006702 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800668c:	d114      	bne.n	80066b8 <UART_Transmit_IT+0x48>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d110      	bne.n	80066b8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	881b      	ldrh	r3, [r3, #0]
 80066a0:	461a      	mov	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066aa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a1b      	ldr	r3, [r3, #32]
 80066b0:	1c9a      	adds	r2, r3, #2
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	621a      	str	r2, [r3, #32]
 80066b6:	e008      	b.n	80066ca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a1b      	ldr	r3, [r3, #32]
 80066bc:	1c59      	adds	r1, r3, #1
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	6211      	str	r1, [r2, #32]
 80066c2:	781a      	ldrb	r2, [r3, #0]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	3b01      	subs	r3, #1
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	4619      	mov	r1, r3
 80066d8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10f      	bne.n	80066fe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68da      	ldr	r2, [r3, #12]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066ec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68da      	ldr	r2, [r3, #12]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066fc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80066fe:	2300      	movs	r3, #0
 8006700:	e000      	b.n	8006704 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006702:	2302      	movs	r3, #2
  }
}
 8006704:	4618      	mov	r0, r3
 8006706:	3714      	adds	r7, #20
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68da      	ldr	r2, [r3, #12]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006726:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2220      	movs	r2, #32
 800672c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f7ff fe73 	bl	800641c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3708      	adds	r7, #8
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b08c      	sub	sp, #48	; 0x30
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800674e:	b2db      	uxtb	r3, r3
 8006750:	2b22      	cmp	r3, #34	; 0x22
 8006752:	f040 80ae 	bne.w	80068b2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800675e:	d117      	bne.n	8006790 <UART_Receive_IT+0x50>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d113      	bne.n	8006790 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006768:	2300      	movs	r3, #0
 800676a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006770:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	b29b      	uxth	r3, r3
 800677a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800677e:	b29a      	uxth	r2, r3
 8006780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006782:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006788:	1c9a      	adds	r2, r3, #2
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	629a      	str	r2, [r3, #40]	; 0x28
 800678e:	e026      	b.n	80067de <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006794:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006796:	2300      	movs	r3, #0
 8006798:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067a2:	d007      	beq.n	80067b4 <UART_Receive_IT+0x74>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d10a      	bne.n	80067c2 <UART_Receive_IT+0x82>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d106      	bne.n	80067c2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	b2da      	uxtb	r2, r3
 80067bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067be:	701a      	strb	r2, [r3, #0]
 80067c0:	e008      	b.n	80067d4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067ce:	b2da      	uxtb	r2, r3
 80067d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d8:	1c5a      	adds	r2, r3, #1
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	3b01      	subs	r3, #1
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	4619      	mov	r1, r3
 80067ec:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d15d      	bne.n	80068ae <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68da      	ldr	r2, [r3, #12]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f022 0220 	bic.w	r2, r2, #32
 8006800:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68da      	ldr	r2, [r3, #12]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006810:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	695a      	ldr	r2, [r3, #20]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f022 0201 	bic.w	r2, r2, #1
 8006820:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2220      	movs	r2, #32
 8006826:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006834:	2b01      	cmp	r3, #1
 8006836:	d135      	bne.n	80068a4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	330c      	adds	r3, #12
 8006844:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	e853 3f00 	ldrex	r3, [r3]
 800684c:	613b      	str	r3, [r7, #16]
   return(result);
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	f023 0310 	bic.w	r3, r3, #16
 8006854:	627b      	str	r3, [r7, #36]	; 0x24
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	330c      	adds	r3, #12
 800685c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800685e:	623a      	str	r2, [r7, #32]
 8006860:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006862:	69f9      	ldr	r1, [r7, #28]
 8006864:	6a3a      	ldr	r2, [r7, #32]
 8006866:	e841 2300 	strex	r3, r2, [r1]
 800686a:	61bb      	str	r3, [r7, #24]
   return(result);
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1e5      	bne.n	800683e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 0310 	and.w	r3, r3, #16
 800687c:	2b10      	cmp	r3, #16
 800687e:	d10a      	bne.n	8006896 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006880:	2300      	movs	r3, #0
 8006882:	60fb      	str	r3, [r7, #12]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	60fb      	str	r3, [r7, #12]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	60fb      	str	r3, [r7, #12]
 8006894:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800689a:	4619      	mov	r1, r3
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f7ff fdd1 	bl	8006444 <HAL_UARTEx_RxEventCallback>
 80068a2:	e002      	b.n	80068aa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f7fb fa75 	bl	8001d94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80068aa:	2300      	movs	r3, #0
 80068ac:	e002      	b.n	80068b4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80068ae:	2300      	movs	r3, #0
 80068b0:	e000      	b.n	80068b4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80068b2:	2302      	movs	r3, #2
  }
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3730      	adds	r7, #48	; 0x30
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068c0:	b0c0      	sub	sp, #256	; 0x100
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80068d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068d8:	68d9      	ldr	r1, [r3, #12]
 80068da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	ea40 0301 	orr.w	r3, r0, r1
 80068e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80068e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ea:	689a      	ldr	r2, [r3, #8]
 80068ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	431a      	orrs	r2, r3
 80068f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068f8:	695b      	ldr	r3, [r3, #20]
 80068fa:	431a      	orrs	r2, r3
 80068fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006900:	69db      	ldr	r3, [r3, #28]
 8006902:	4313      	orrs	r3, r2
 8006904:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006914:	f021 010c 	bic.w	r1, r1, #12
 8006918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006922:	430b      	orrs	r3, r1
 8006924:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006936:	6999      	ldr	r1, [r3, #24]
 8006938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	ea40 0301 	orr.w	r3, r0, r1
 8006942:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	4b8f      	ldr	r3, [pc, #572]	; (8006b88 <UART_SetConfig+0x2cc>)
 800694c:	429a      	cmp	r2, r3
 800694e:	d005      	beq.n	800695c <UART_SetConfig+0xa0>
 8006950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	4b8d      	ldr	r3, [pc, #564]	; (8006b8c <UART_SetConfig+0x2d0>)
 8006958:	429a      	cmp	r2, r3
 800695a:	d104      	bne.n	8006966 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800695c:	f7fd fbf8 	bl	8004150 <HAL_RCC_GetPCLK2Freq>
 8006960:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006964:	e003      	b.n	800696e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006966:	f7fd fbdf 	bl	8004128 <HAL_RCC_GetPCLK1Freq>
 800696a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800696e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006972:	69db      	ldr	r3, [r3, #28]
 8006974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006978:	f040 810c 	bne.w	8006b94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800697c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006980:	2200      	movs	r2, #0
 8006982:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006986:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800698a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800698e:	4622      	mov	r2, r4
 8006990:	462b      	mov	r3, r5
 8006992:	1891      	adds	r1, r2, r2
 8006994:	65b9      	str	r1, [r7, #88]	; 0x58
 8006996:	415b      	adcs	r3, r3
 8006998:	65fb      	str	r3, [r7, #92]	; 0x5c
 800699a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800699e:	4621      	mov	r1, r4
 80069a0:	eb12 0801 	adds.w	r8, r2, r1
 80069a4:	4629      	mov	r1, r5
 80069a6:	eb43 0901 	adc.w	r9, r3, r1
 80069aa:	f04f 0200 	mov.w	r2, #0
 80069ae:	f04f 0300 	mov.w	r3, #0
 80069b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80069b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80069ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80069be:	4690      	mov	r8, r2
 80069c0:	4699      	mov	r9, r3
 80069c2:	4623      	mov	r3, r4
 80069c4:	eb18 0303 	adds.w	r3, r8, r3
 80069c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80069cc:	462b      	mov	r3, r5
 80069ce:	eb49 0303 	adc.w	r3, r9, r3
 80069d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80069e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80069e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80069ea:	460b      	mov	r3, r1
 80069ec:	18db      	adds	r3, r3, r3
 80069ee:	653b      	str	r3, [r7, #80]	; 0x50
 80069f0:	4613      	mov	r3, r2
 80069f2:	eb42 0303 	adc.w	r3, r2, r3
 80069f6:	657b      	str	r3, [r7, #84]	; 0x54
 80069f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80069fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006a00:	f7f9 fbfc 	bl	80001fc <__aeabi_uldivmod>
 8006a04:	4602      	mov	r2, r0
 8006a06:	460b      	mov	r3, r1
 8006a08:	4b61      	ldr	r3, [pc, #388]	; (8006b90 <UART_SetConfig+0x2d4>)
 8006a0a:	fba3 2302 	umull	r2, r3, r3, r2
 8006a0e:	095b      	lsrs	r3, r3, #5
 8006a10:	011c      	lsls	r4, r3, #4
 8006a12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a16:	2200      	movs	r2, #0
 8006a18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a1c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006a20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006a24:	4642      	mov	r2, r8
 8006a26:	464b      	mov	r3, r9
 8006a28:	1891      	adds	r1, r2, r2
 8006a2a:	64b9      	str	r1, [r7, #72]	; 0x48
 8006a2c:	415b      	adcs	r3, r3
 8006a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006a34:	4641      	mov	r1, r8
 8006a36:	eb12 0a01 	adds.w	sl, r2, r1
 8006a3a:	4649      	mov	r1, r9
 8006a3c:	eb43 0b01 	adc.w	fp, r3, r1
 8006a40:	f04f 0200 	mov.w	r2, #0
 8006a44:	f04f 0300 	mov.w	r3, #0
 8006a48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006a4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006a50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a54:	4692      	mov	sl, r2
 8006a56:	469b      	mov	fp, r3
 8006a58:	4643      	mov	r3, r8
 8006a5a:	eb1a 0303 	adds.w	r3, sl, r3
 8006a5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a62:	464b      	mov	r3, r9
 8006a64:	eb4b 0303 	adc.w	r3, fp, r3
 8006a68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a78:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006a7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006a80:	460b      	mov	r3, r1
 8006a82:	18db      	adds	r3, r3, r3
 8006a84:	643b      	str	r3, [r7, #64]	; 0x40
 8006a86:	4613      	mov	r3, r2
 8006a88:	eb42 0303 	adc.w	r3, r2, r3
 8006a8c:	647b      	str	r3, [r7, #68]	; 0x44
 8006a8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006a92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006a96:	f7f9 fbb1 	bl	80001fc <__aeabi_uldivmod>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	4611      	mov	r1, r2
 8006aa0:	4b3b      	ldr	r3, [pc, #236]	; (8006b90 <UART_SetConfig+0x2d4>)
 8006aa2:	fba3 2301 	umull	r2, r3, r3, r1
 8006aa6:	095b      	lsrs	r3, r3, #5
 8006aa8:	2264      	movs	r2, #100	; 0x64
 8006aaa:	fb02 f303 	mul.w	r3, r2, r3
 8006aae:	1acb      	subs	r3, r1, r3
 8006ab0:	00db      	lsls	r3, r3, #3
 8006ab2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006ab6:	4b36      	ldr	r3, [pc, #216]	; (8006b90 <UART_SetConfig+0x2d4>)
 8006ab8:	fba3 2302 	umull	r2, r3, r3, r2
 8006abc:	095b      	lsrs	r3, r3, #5
 8006abe:	005b      	lsls	r3, r3, #1
 8006ac0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006ac4:	441c      	add	r4, r3
 8006ac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006aca:	2200      	movs	r2, #0
 8006acc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ad0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006ad4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006ad8:	4642      	mov	r2, r8
 8006ada:	464b      	mov	r3, r9
 8006adc:	1891      	adds	r1, r2, r2
 8006ade:	63b9      	str	r1, [r7, #56]	; 0x38
 8006ae0:	415b      	adcs	r3, r3
 8006ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ae4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006ae8:	4641      	mov	r1, r8
 8006aea:	1851      	adds	r1, r2, r1
 8006aec:	6339      	str	r1, [r7, #48]	; 0x30
 8006aee:	4649      	mov	r1, r9
 8006af0:	414b      	adcs	r3, r1
 8006af2:	637b      	str	r3, [r7, #52]	; 0x34
 8006af4:	f04f 0200 	mov.w	r2, #0
 8006af8:	f04f 0300 	mov.w	r3, #0
 8006afc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006b00:	4659      	mov	r1, fp
 8006b02:	00cb      	lsls	r3, r1, #3
 8006b04:	4651      	mov	r1, sl
 8006b06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b0a:	4651      	mov	r1, sl
 8006b0c:	00ca      	lsls	r2, r1, #3
 8006b0e:	4610      	mov	r0, r2
 8006b10:	4619      	mov	r1, r3
 8006b12:	4603      	mov	r3, r0
 8006b14:	4642      	mov	r2, r8
 8006b16:	189b      	adds	r3, r3, r2
 8006b18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b1c:	464b      	mov	r3, r9
 8006b1e:	460a      	mov	r2, r1
 8006b20:	eb42 0303 	adc.w	r3, r2, r3
 8006b24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006b34:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006b38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	18db      	adds	r3, r3, r3
 8006b40:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b42:	4613      	mov	r3, r2
 8006b44:	eb42 0303 	adc.w	r3, r2, r3
 8006b48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006b52:	f7f9 fb53 	bl	80001fc <__aeabi_uldivmod>
 8006b56:	4602      	mov	r2, r0
 8006b58:	460b      	mov	r3, r1
 8006b5a:	4b0d      	ldr	r3, [pc, #52]	; (8006b90 <UART_SetConfig+0x2d4>)
 8006b5c:	fba3 1302 	umull	r1, r3, r3, r2
 8006b60:	095b      	lsrs	r3, r3, #5
 8006b62:	2164      	movs	r1, #100	; 0x64
 8006b64:	fb01 f303 	mul.w	r3, r1, r3
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	00db      	lsls	r3, r3, #3
 8006b6c:	3332      	adds	r3, #50	; 0x32
 8006b6e:	4a08      	ldr	r2, [pc, #32]	; (8006b90 <UART_SetConfig+0x2d4>)
 8006b70:	fba2 2303 	umull	r2, r3, r2, r3
 8006b74:	095b      	lsrs	r3, r3, #5
 8006b76:	f003 0207 	and.w	r2, r3, #7
 8006b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4422      	add	r2, r4
 8006b82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006b84:	e106      	b.n	8006d94 <UART_SetConfig+0x4d8>
 8006b86:	bf00      	nop
 8006b88:	40011000 	.word	0x40011000
 8006b8c:	40011400 	.word	0x40011400
 8006b90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006b9e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006ba2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006ba6:	4642      	mov	r2, r8
 8006ba8:	464b      	mov	r3, r9
 8006baa:	1891      	adds	r1, r2, r2
 8006bac:	6239      	str	r1, [r7, #32]
 8006bae:	415b      	adcs	r3, r3
 8006bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8006bb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006bb6:	4641      	mov	r1, r8
 8006bb8:	1854      	adds	r4, r2, r1
 8006bba:	4649      	mov	r1, r9
 8006bbc:	eb43 0501 	adc.w	r5, r3, r1
 8006bc0:	f04f 0200 	mov.w	r2, #0
 8006bc4:	f04f 0300 	mov.w	r3, #0
 8006bc8:	00eb      	lsls	r3, r5, #3
 8006bca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006bce:	00e2      	lsls	r2, r4, #3
 8006bd0:	4614      	mov	r4, r2
 8006bd2:	461d      	mov	r5, r3
 8006bd4:	4643      	mov	r3, r8
 8006bd6:	18e3      	adds	r3, r4, r3
 8006bd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006bdc:	464b      	mov	r3, r9
 8006bde:	eb45 0303 	adc.w	r3, r5, r3
 8006be2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006bf2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006bf6:	f04f 0200 	mov.w	r2, #0
 8006bfa:	f04f 0300 	mov.w	r3, #0
 8006bfe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006c02:	4629      	mov	r1, r5
 8006c04:	008b      	lsls	r3, r1, #2
 8006c06:	4621      	mov	r1, r4
 8006c08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c0c:	4621      	mov	r1, r4
 8006c0e:	008a      	lsls	r2, r1, #2
 8006c10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006c14:	f7f9 faf2 	bl	80001fc <__aeabi_uldivmod>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	4b60      	ldr	r3, [pc, #384]	; (8006da0 <UART_SetConfig+0x4e4>)
 8006c1e:	fba3 2302 	umull	r2, r3, r3, r2
 8006c22:	095b      	lsrs	r3, r3, #5
 8006c24:	011c      	lsls	r4, r3, #4
 8006c26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006c34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006c38:	4642      	mov	r2, r8
 8006c3a:	464b      	mov	r3, r9
 8006c3c:	1891      	adds	r1, r2, r2
 8006c3e:	61b9      	str	r1, [r7, #24]
 8006c40:	415b      	adcs	r3, r3
 8006c42:	61fb      	str	r3, [r7, #28]
 8006c44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c48:	4641      	mov	r1, r8
 8006c4a:	1851      	adds	r1, r2, r1
 8006c4c:	6139      	str	r1, [r7, #16]
 8006c4e:	4649      	mov	r1, r9
 8006c50:	414b      	adcs	r3, r1
 8006c52:	617b      	str	r3, [r7, #20]
 8006c54:	f04f 0200 	mov.w	r2, #0
 8006c58:	f04f 0300 	mov.w	r3, #0
 8006c5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c60:	4659      	mov	r1, fp
 8006c62:	00cb      	lsls	r3, r1, #3
 8006c64:	4651      	mov	r1, sl
 8006c66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c6a:	4651      	mov	r1, sl
 8006c6c:	00ca      	lsls	r2, r1, #3
 8006c6e:	4610      	mov	r0, r2
 8006c70:	4619      	mov	r1, r3
 8006c72:	4603      	mov	r3, r0
 8006c74:	4642      	mov	r2, r8
 8006c76:	189b      	adds	r3, r3, r2
 8006c78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c7c:	464b      	mov	r3, r9
 8006c7e:	460a      	mov	r2, r1
 8006c80:	eb42 0303 	adc.w	r3, r2, r3
 8006c84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	67bb      	str	r3, [r7, #120]	; 0x78
 8006c92:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006c94:	f04f 0200 	mov.w	r2, #0
 8006c98:	f04f 0300 	mov.w	r3, #0
 8006c9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006ca0:	4649      	mov	r1, r9
 8006ca2:	008b      	lsls	r3, r1, #2
 8006ca4:	4641      	mov	r1, r8
 8006ca6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006caa:	4641      	mov	r1, r8
 8006cac:	008a      	lsls	r2, r1, #2
 8006cae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006cb2:	f7f9 faa3 	bl	80001fc <__aeabi_uldivmod>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	460b      	mov	r3, r1
 8006cba:	4611      	mov	r1, r2
 8006cbc:	4b38      	ldr	r3, [pc, #224]	; (8006da0 <UART_SetConfig+0x4e4>)
 8006cbe:	fba3 2301 	umull	r2, r3, r3, r1
 8006cc2:	095b      	lsrs	r3, r3, #5
 8006cc4:	2264      	movs	r2, #100	; 0x64
 8006cc6:	fb02 f303 	mul.w	r3, r2, r3
 8006cca:	1acb      	subs	r3, r1, r3
 8006ccc:	011b      	lsls	r3, r3, #4
 8006cce:	3332      	adds	r3, #50	; 0x32
 8006cd0:	4a33      	ldr	r2, [pc, #204]	; (8006da0 <UART_SetConfig+0x4e4>)
 8006cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8006cd6:	095b      	lsrs	r3, r3, #5
 8006cd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006cdc:	441c      	add	r4, r3
 8006cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	673b      	str	r3, [r7, #112]	; 0x70
 8006ce6:	677a      	str	r2, [r7, #116]	; 0x74
 8006ce8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006cec:	4642      	mov	r2, r8
 8006cee:	464b      	mov	r3, r9
 8006cf0:	1891      	adds	r1, r2, r2
 8006cf2:	60b9      	str	r1, [r7, #8]
 8006cf4:	415b      	adcs	r3, r3
 8006cf6:	60fb      	str	r3, [r7, #12]
 8006cf8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006cfc:	4641      	mov	r1, r8
 8006cfe:	1851      	adds	r1, r2, r1
 8006d00:	6039      	str	r1, [r7, #0]
 8006d02:	4649      	mov	r1, r9
 8006d04:	414b      	adcs	r3, r1
 8006d06:	607b      	str	r3, [r7, #4]
 8006d08:	f04f 0200 	mov.w	r2, #0
 8006d0c:	f04f 0300 	mov.w	r3, #0
 8006d10:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006d14:	4659      	mov	r1, fp
 8006d16:	00cb      	lsls	r3, r1, #3
 8006d18:	4651      	mov	r1, sl
 8006d1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d1e:	4651      	mov	r1, sl
 8006d20:	00ca      	lsls	r2, r1, #3
 8006d22:	4610      	mov	r0, r2
 8006d24:	4619      	mov	r1, r3
 8006d26:	4603      	mov	r3, r0
 8006d28:	4642      	mov	r2, r8
 8006d2a:	189b      	adds	r3, r3, r2
 8006d2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d2e:	464b      	mov	r3, r9
 8006d30:	460a      	mov	r2, r1
 8006d32:	eb42 0303 	adc.w	r3, r2, r3
 8006d36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	663b      	str	r3, [r7, #96]	; 0x60
 8006d42:	667a      	str	r2, [r7, #100]	; 0x64
 8006d44:	f04f 0200 	mov.w	r2, #0
 8006d48:	f04f 0300 	mov.w	r3, #0
 8006d4c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006d50:	4649      	mov	r1, r9
 8006d52:	008b      	lsls	r3, r1, #2
 8006d54:	4641      	mov	r1, r8
 8006d56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d5a:	4641      	mov	r1, r8
 8006d5c:	008a      	lsls	r2, r1, #2
 8006d5e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006d62:	f7f9 fa4b 	bl	80001fc <__aeabi_uldivmod>
 8006d66:	4602      	mov	r2, r0
 8006d68:	460b      	mov	r3, r1
 8006d6a:	4b0d      	ldr	r3, [pc, #52]	; (8006da0 <UART_SetConfig+0x4e4>)
 8006d6c:	fba3 1302 	umull	r1, r3, r3, r2
 8006d70:	095b      	lsrs	r3, r3, #5
 8006d72:	2164      	movs	r1, #100	; 0x64
 8006d74:	fb01 f303 	mul.w	r3, r1, r3
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	011b      	lsls	r3, r3, #4
 8006d7c:	3332      	adds	r3, #50	; 0x32
 8006d7e:	4a08      	ldr	r2, [pc, #32]	; (8006da0 <UART_SetConfig+0x4e4>)
 8006d80:	fba2 2303 	umull	r2, r3, r2, r3
 8006d84:	095b      	lsrs	r3, r3, #5
 8006d86:	f003 020f 	and.w	r2, r3, #15
 8006d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4422      	add	r2, r4
 8006d92:	609a      	str	r2, [r3, #8]
}
 8006d94:	bf00      	nop
 8006d96:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006da0:	51eb851f 	.word	0x51eb851f

08006da4 <memset>:
 8006da4:	4402      	add	r2, r0
 8006da6:	4603      	mov	r3, r0
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d100      	bne.n	8006dae <memset+0xa>
 8006dac:	4770      	bx	lr
 8006dae:	f803 1b01 	strb.w	r1, [r3], #1
 8006db2:	e7f9      	b.n	8006da8 <memset+0x4>

08006db4 <__libc_init_array>:
 8006db4:	b570      	push	{r4, r5, r6, lr}
 8006db6:	4d0d      	ldr	r5, [pc, #52]	; (8006dec <__libc_init_array+0x38>)
 8006db8:	4c0d      	ldr	r4, [pc, #52]	; (8006df0 <__libc_init_array+0x3c>)
 8006dba:	1b64      	subs	r4, r4, r5
 8006dbc:	10a4      	asrs	r4, r4, #2
 8006dbe:	2600      	movs	r6, #0
 8006dc0:	42a6      	cmp	r6, r4
 8006dc2:	d109      	bne.n	8006dd8 <__libc_init_array+0x24>
 8006dc4:	4d0b      	ldr	r5, [pc, #44]	; (8006df4 <__libc_init_array+0x40>)
 8006dc6:	4c0c      	ldr	r4, [pc, #48]	; (8006df8 <__libc_init_array+0x44>)
 8006dc8:	f000 f818 	bl	8006dfc <_init>
 8006dcc:	1b64      	subs	r4, r4, r5
 8006dce:	10a4      	asrs	r4, r4, #2
 8006dd0:	2600      	movs	r6, #0
 8006dd2:	42a6      	cmp	r6, r4
 8006dd4:	d105      	bne.n	8006de2 <__libc_init_array+0x2e>
 8006dd6:	bd70      	pop	{r4, r5, r6, pc}
 8006dd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ddc:	4798      	blx	r3
 8006dde:	3601      	adds	r6, #1
 8006de0:	e7ee      	b.n	8006dc0 <__libc_init_array+0xc>
 8006de2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006de6:	4798      	blx	r3
 8006de8:	3601      	adds	r6, #1
 8006dea:	e7f2      	b.n	8006dd2 <__libc_init_array+0x1e>
 8006dec:	08006ec0 	.word	0x08006ec0
 8006df0:	08006ec0 	.word	0x08006ec0
 8006df4:	08006ec0 	.word	0x08006ec0
 8006df8:	08006ec4 	.word	0x08006ec4

08006dfc <_init>:
 8006dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dfe:	bf00      	nop
 8006e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e02:	bc08      	pop	{r3}
 8006e04:	469e      	mov	lr, r3
 8006e06:	4770      	bx	lr

08006e08 <_fini>:
 8006e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e0a:	bf00      	nop
 8006e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e0e:	bc08      	pop	{r3}
 8006e10:	469e      	mov	lr, r3
 8006e12:	4770      	bx	lr
